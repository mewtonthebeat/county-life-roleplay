#pragma dynamic     50000

/*

	< ENGLISH >
		...- Gamemode Code Starts Here -...



	< SLOVAK >
		...- Kód herného módu zaèína tu -...

*/

//==================================INCLUDES====================================

#include <a_samp>

#undef  MAX_PLAYERS
	#define MAX_PLAYERS 100

#include <YSF>
#include <YSI\y_timers>
#include <YSI\y_iterate>
#include <YSI\y_commands>
#include <YSI\y_iterate>

#include <myfixes>
#include <colandreas>
#include <a_zone>
#include <a_mysql>
#include <cameraFix>
#include <CTime>
#include <dialogs>
#include <3DTryg>
#include <strlib>
#include <sscanf2>
#include <streamer>
#include <fader>
#include <progress2>
#include <vehicleFunctions>
#include <Stingers>
#include <mSelection>
#include <zmessage>
#include <spectate>
#include <GEnterBug>
#include <cuffs>
#include <formatnumber>
#include <garage_block>
#include <callbacks>
#include <attachments>
#include <physics>
#include <linegen>
#include <Pawn.RakNet>
#include <attachment-fix>

// PARTS OF SERVER SCRIPT
#include <internal\truckers.pwn>
#include <internal\menustore.pwn>
#include <internal\cctv.pwn>
#include <internal\drugsystem.pwn>
#include <internal\bmap.pwn>
#include <internal\deers.pwn>
new bool:isSpectating[MAX_PLAYERS];
new bool:donotsave[MAX_PLAYERS];
#include <internal\tutorial.pwn>
//#include <internal\voucher.pwn>

#if !defined gpci
    native gpci(playerid, serial[], len);
#endif

//=================================COLORS=======================================

#define COLOR_WHITE             0xFFFFFFFF
#define COLOR_ADMINCMD	 		0xed705aFF
#define COLOR_GREY 				0xAFAFAFFF
#define COLOR_GREEN 			0x33AA33FF
#define COLOR_GREEN2 			0x3eb03aFF
#define COLOR_DARKRED 			0xCD000000
#define COLOR_LIGHTGREEN 		0x9ACD32AA
#define COLOR_LIGHTBLUE 		0x33CCFFAA
#define COLOR_LIGHTBLUE2 		0x7accf4AA
#define COLOR_DARKBROWN 		0xB36C42FF
#define COLOR_PURPLE            0xd705ffFF
#define COLOR_YELLOW 			0xFFFF00AA
#define COLOR_LOCAL_CHAT_TEXT   0xFFFFFFFF
#define COLOR_LOCAL_OOC_CHAT_TEXT   0xFFFFFFFF
#define COLOR_GLOBAL_OOC_CHAT_TEXT  0xc7dbf9FF
#define COLOR_SHOUT_CHAT_TEXT   0xe2aa2fFF
#define COLOR_SYNTAX            0xe0e0e0FF
#define COLOR_VIOLET            0xc2a2daFF
#define COLOR_COMMANDUSE        0x7998b7FF
#define COLOR_RADIO             0xc6b385FF
#define COLOR_DEPT_RADIO        0xc69c37FF
#define	COLOR_LOTTERY           0xf1c6f2ff
#define COLOR_SERVER            0xe5492dff

#define COLOR_PLAYER_LOGGED     0xF6F6F6FF
#define COLOR_PLAYER    		0xB4B4B4FF

#define COLOR_PORTOFLA          0x82b8d8FF

#define COLOR_ADMIN_CHEATWARN	0xffcd32FF
#define COLOR_ADMIN_DEATHWARN   0xee2323ff
#define	COLOR_ADMIN_GUNCMD      COLOR_ADMIN_DEATHWARN

#define COLOR_MAP_SUCCESS       COLOR_LIGHTGREEN

//=================================DEFINES======================================
// DRIVE BY FIX
#define REARMED_WEAPON_UPDATES 3

/*
	MAIN SERVER DEFINES
*/

#define V_HOST_NAME             "[0.3.DL] County Life Roleplay"
#define GM_NAME                 "CL:RP"
#define GM_VERSION              "1.0.3 R2"
#define GM_AUTHOR               "bigw3b."
#define GM_MAP_NAME             "San Andreas"
#define GM_LANGUAGE             "CZ/SK"
#define GM_LINES                "194789" //(INTERNAL INCLUDES: 532 + 149 + 281) + (MAPS: 3162 + 19541) + (SNOWMAP: 853) + (EXTERNAL INCLUDES: 5856 + 486 + 716)
#define GM_COMMANDS             475
#define GM_CREATED_V1           "01/06/2016"
#define GM_CREATED_V2           "03/11/2016"
#define WEB_SITE                "www.countyliferoleplay.eu"
/*
	SETTINGS
*/

// MAXIMALNE HODNOTY
#define MAX_PHONE_BOOTHS        3
#define MAX_ATTACH_SLOTS        20
#define MAX_MENUS_EX            700
#define MAX_GPS_DESTS           50
#define MAX_FACTIONS            257
#define MAX_ILLEGAL_FACTIONS    10
#define MAX_ENTRANCES           2
#define MAX_BUSINESSES          200
#define MAX_HOUSES              600
#define MAX_GARAGES             500
#define MAX_DROPS               500
#define MAX_BARRIERS            150
#define MAX_BLOOD               500
#define MAX_COMMAND_LOG         30
#define MAX_LAST_DRIVER         8
#define MAX_TOLL_LOG            20
#define MAX_SPEED_CAMERAS       20
#define MAX_ATM                 50
#define MAX_WEED                400
#define MAX_VEHICLE_WEAPONS     3
#define	MAX_ACTIVE_MESSAGES     3
#define	MAX_FUEL_STATIONS       20
#define MAX_ARROWS              50
#define MAX_AD_TABLES           MAX_BUSINESSES
#define MAX_FD_FIRES            500
#define MAX_STREET_SIGNS        20
#define MAX_SPRAY_TAGS          50
#define MAX_MAP_ICONS          	100
#define MAX_FIRE_EXTINGUISHERS  300
#define MAX_STATIC_DO           5

#define     BREAKIN_DEFAULT_PROGRESS	5.0
#define     BREAKIN_CLICK_POWER         1.0
#define     BREAKIN_DECREASE_POWER      1.85

// BASKET BALL
#define  	MAX_BASKET_BALLS    5

#define     BALL_STATE_NONE     	0
#define     BALL_STATE_DRIBBLING_U  1
#define     BALL_STATE_DRIBBLING_D  2
#define     BALL_STATE_TO_BIN       3
#define     BALL_STATE_FALLING      4
#define     BALL_STATE_BIN_U        5
#define     BALL_STATE_BIN_D        6

#define 	PVAR_MONEY "Var_Money"

// CLOTHING SETTINGS

#define ATTACH_MAX_SLOTS      			7 	// maximalny pocet objektov na sebe v jednej chvili
#define ATTACH_MAX_CLOTHING.[%1] 		getmaxattachcloth(%1) 	// maximalny pocet ulozenych doplnkov
#define ATTACH_MAX_CLOTHING_LEV_0       12
#define ATTACH_MAX_CLOTHING_LEV_1       20
#define ATTACH_MAX_CLOTHING_LEV_2       35
#define ATTACH_MAX_CLOTHING_LEV_3       50

#define CLOTHING_USE_DEFAULT_COLOR      0

#if ATTACH_MAX_SLOTS >= MAX_PLAYER_ATTACHED_OBJECTS
  #error ATTACH_MAX_SLOTS cant be equal/greater than MAX_PLAYER_ATTACHED_OBJECTS
#endif

// MOBIL
#define	COLOR_PHONE_MESSAGE			0xf0eeb8FF
#define	INVALID_PHONE_NUMBER		-1
#define	INVALID_PHONE_PLAYER		-1
#define	EMERGENCY_NUMBER            841916189123
#define EMERGENCY_POLICE            515165158888
#define EMERGENCY_FIRE              515610231889
#define EMERGENCY_TAXI              441234545458
#define EMERGENCY_RCN               84845565748
#define EMERGENCY_HAWKINS           115148894532

// VEHICLE INVENTORY
#define	VEH_INVENTORY_SIZE      7

// CRATES
#define 	MAX_CRATES				20
#define		INVALID_CRATE_ID		255
#define		CRATE_OBJECT_MODEL		2969
#define     CRATE_KEVLAR_LIGHT_ID   1000
#define     CRATE_KEVLAR_HEAVY_ID   1001
#define     ILLEGAL_STORE_SHIPPING  4990

// MASK
#define USE_MASK                1
#define USE_PLAYERID            2
#define USE_PUREIDNAME          3
#define NO_MASK     			0
#define MASK_TEXT               "Maskovaný"

// CHAT RANGES
#define LOCAL_CHAT_RANGE        15.0
#define LOW_CHAT_RANGE          3.0
#define HIGH_CHAT_RANGE         25.0
#define ME_CHAT_RANGE           22.0
#define MELOW_CHAT_RANGE        8.0

// TYPES
#define KICK_TYPE_NOMSG         0
#define KICK_TYPE_SYSTEM        1
#define KICK_TYPE_ADMIN         2
#define KICK_TYPE_ANTIHACK      3

// BLOOD DEFINES
#define BLOOD_TIME_SEC          300*4

// DEATH PRICE
#define MIN_DEATH_DAN           10
#define MAX_DEATH_DAN           700

// SPEED CAMERA
#define DEFAULT_BASE_FINE       100

// PLAYER INVENTORY
#define INVENTORY_SIZE          90
#define MAX_INV_PAGES           2

// HOUSE ADDRESSES
#define MIN_HOUSE_ADDRESS       20000
#define MAX_HOUSE_ADDRESS       29999

// BUSINESS ADDRESES
#define	MIN_BUSINESS_ADDRESS    10000
#define	MAX_BUSINESS_ADDRESS    19999

// Garage ADDRESSES
#define MIN_GARAGE_ADDRESS      30000
#define MAX_GARAGE_ADDRESS      39999

// VEHICLE ALARM
#define ALARM_BEEP_TIME         1000

// VEHICLE FUEL TYPES
#define FUEL_NOFUEL             0
#define FUEL_BENZIN             1
#define FUEL_DIESEL             2
#define FUEL_KEROSIN            3
#define FUEL_LPG                4
#define REFILL_FUEL_PRICE       0.64

// PLAYER VEHICLE SLOTS
#define MAX_PLAYER_VEHICLES     3
#define MAX_DON_1_VEHICLES      5
#define MAX_DON_2_VEHICLES      10
#define MAX_DON_3_VEHICLES      15

// REWARDS FROM BRIGADES, JOBS
#define	ODMENA_BRIGADA_KRABICE_BB   rand(20, 60)
#define	ODMENA_BRIGADA_KRABICE_MG   rand(30, 50)
#define	ODMENA_BRIGADA_KRABICE_OD1  60
#define	ODMENA_BRIGADA_KRABICE_OD2  45
#define	ODMENA_BRIGADA_RYBARCENIE   7

// LICENSE TYPES
#define LICENSE_A               0
#define LICENSE_B               1
#define LICENSE_C               2
#define LICENSE_T               3

// LICENSE PRICES

// AMMO PRICE
#define AMMO_PRICE_STOCK        0.68

/*
	SPZ PATTERN
	___________
	1 means alphabetical letter A-Z
	2 means number
*/
#define SPZ_PATTERN             "111 2222"

/*
	TRASHMASTER DEFINES
*/
#define LOCATION_BLUEBERRY              1
#define LOCATION_IDLEWOOD              	2
#define MAX_LOCATIONS                   6
#define MAX_DUMPSTERS                   100

#define INVALID_LOCATION                255

#define	DUMPSTER_DEFAULT_TIME       	5
#define	DUMPSTER_BLACK_TIME				3
#define	DUMPSTER_GREEN_BIG_TIME			4
#define	DUMPSTER_GREEN_RECYCLE_TIME		2
#define	DUMPSTER_GREEN_GLASS_TIME		3
#define	DUMPSTER_ORANGE_BIG_TIME		5
#define	DUMPSTER_ORANGE_TRASHO_TIME		4
#define	DUMPSTER_BLUE_TIME				3

#define INVALID_DUMPSTER_TYPE           255

/*
	JOB DEFINES
*/

#define JOB_SMETIAR 					0
#define JOB_SWEEPER                     1
#define JOB_PIZZAMAN                    2
#define JOB_PREPRAVA                    3

/*
	PREPRAVCA
*/
#define	PREPRAVCA_MIN_PAYOUT            200
#define PREPRAVCA_MAX_PAYOUT            900


//==========================ENUMS===============================================

#define MODE_SKATE (0)        // 0 - medium speed | 1 - fast speed
#define TYPE_SKATE (0)        // 0 - the skate is placed on the right arm | 1 - the skate is placed in the back
#define INDEX_SKATE (9)       //is the slot that used SetPlayerAttachedObject

enum skate{
	sActive,
	sSkate,
};

new InfoSkate[MAX_PLAYERS][skate];

enum E_fireexting()
{
	Float:firee_X,Float:firee_Y,Float:firee_Z,Float:firee_RX,Float:firee_RY,Float:firee_RZ,
	firee_VW, firee_INTERIOR,

	firee_SPOTREBA, firee_PKONTROLA,

	firee_STOLEN,

	firee_OBJECT,
	Text3D:firee_LABEL
}

enum E_basket()
{
	benum_objectId,
	benum_holder,
	benum_areaId,
	benum_ballState,
	benum_binId,
	Float:benum_velocity,
	Float:benum_velocitySp
}

enum E_mapIcons()
{
	mapIcon_Model,
	mapIcon_Style,
	Float:mapIcon_X, Float:mapIcon_Y, Float:mapIcon_Z,

	mapIcon_IconId,
	mapIcon_AreaId
}

enum
{
	INFOBOX_ERROR,
	INFOBOX_SUCCESS,
	INFOBOX_INFO,
	INFOBOX_HAPPY,
}

enum {
	FACTION_TYPE_NONE,
	FACTION_TYPE_LAW,
	FACTION_TYPE_FIRE,
	FACTION_TYPE_MEDIA,
	FACTION_TYPE_GOV,
	FACTION_TYPE_WOODCUTTER,
	FACTION_TYPE_TRASHMASTER,
	FACTION_TYPE_SWEEPER,
	FACTION_TYPE_TAXI,
	FACTION_TYPE_PIZZADELIVERY,
	FACTION_TYPE_MECHANIC,
	FACTION_TYPE_PREPRAVA,
	FACTION_TYPE_BAZAR,
}

enum E_weed()
{
	weed_Owner[30],
	Float:weed_X, Float:weed_Y, Float:weed_Z,
	weed_VW, weed_INT,
	weed_UnixPlaced, weed_UnixFinish,
	weed_DrugId,
	weed_Hnojivo,
	weed_ObjectMain,
	weed_Object,
	weed_ObjectCreated,
	weed_Area,
	Text3D:weed_Label
}

enum E_crates()
{

	// Main variables
	crate_Owner[30],
	bool:crate_Unlocked,

	// Weapons
	crate_Weapon_Slot_1,
	crate_Weapon_Slot_2,
	crate_Weapon_Slot_3,
	crate_Weapon_Slot_4,
	crate_Weapon_Slot_5,

	// Kevlar Vest
	crate_Kevlar_Slot_1,
	crate_Kevlar_Slot_2,
	crate_Kevlar_Slot_3,

	// Streamer variables

	crate_Object,
	crate_AreaID,
	Text3D:crate_Label
}

enum fact_Enum()
{
	fact_Name[64],
	fact_Type,
	fact_Cash,
	fact_IsBlocked,
}

enum ifact_Enum()
{
	ifact_Name[64],
	ifact_Perm_Guns,
	ifact_Perm_Drug_Marijuana,
	ifact_Perm_Graffitis,
	ifact_Chat,
	ifact_Cash,
	ifact_IsBlocked,
}

enum v_Inventory {
	vinv_weed,
	vinv_weed_seed,
	vinv_pacidlo,
	vinv_lano,
	vinv_vrece,
	vinv_puta,
	vinv_rezerva,
}

enum inVentory {
	inv_mask = 1,
	inv_boomBox,
	inv_idCard,
	inv_pepsiCan,
	inv_colaCan,
	inv_kitKatChocolate,
	inv_pringlesChips,
	Float:inv_rybyKG,
	inv_fishingPermit,
	inv_vodicakA,
	inv_vodicakB,
	inv_vodicakC,
	inv_vodicakT,
	inv_pacidlo,
	inv_lano,
	inv_vrece,
	inv_kocka,
	inv_blood,
	inv_puta,
	inv_creditCard,
	inv_weed,
	inv_weed_seed,
	inv_cigarety,
	inv_zapalovac,
	inv_telefon,
	inv_simcard,
	inv_naboje,
	inv_bandaz,
	inv_zbrojnyPreukaz,
	inv_lotteryTicket,
	inv_carBattery,
	Float:inv_vysielacka,
	inv_carOil,
	inv_pizza,
	inv_kanister,
	inv_rezerva,
	inv_weeds1,
	inv_weeds2,
	inv_weeds3,
	inv_hnojivo,
	inv_sprite,
	inv_spritelean,
	inv_petcup,
	inv_prometh,
	inv_skateboard,
	inv_katalog,

	inv_flyPermit,
	inv_boatPermit,
	
	inv_tree_sadenica,
	inv_tree_log_oak,
	inv_tree_log_birch,
	inv_tree_log_spruce,
}

enum drop_Enum()
{
	Float:drop_X, Float:drop_Y, Float:drop_Z, Float:drop_RZ, drop_VirtualWorld, drop_Interior,
	drop_Type,
	drop_Detail,
	drop_Count,
	drop_PlacedBy[30],
	drop_Date[32],
	drop_Faction,
	drop_Text[32],
	Text3D:drop_LabelID,
	drop_ObjectID,
	drop_Model,
	drop_AreaID,
	
	drop_IsWorkWeap,
	drop_IsPermitWeap,
	drop_SerialNumber,
	drop_Origin[128]
}

enum stinger_Enum()
{
	stin_PlacedBy[25],
	Float:stin_PosX, Float:stin_PosY, Float:stin_PosZ, stin_PosVW, stin_PosINT,
	stin_StingerID
}

enum speed_Camera_Enum()
{
	Float:scam_X, Float:scam_Y, Float:scam_Z, Float:scam_RX, Float:scam_RY, Float:scam_RZ,
	scam_SpeedLimit,
	scam_BaseFine,
	scam_ObjectID,
	scam_AreaID
}

enum blood_Enum()
{
	blood_Owner[30],
	blood_ObjectID,
	blood_TimerID,

	Float:blood_X, Float:blood_Y, Float:blood_Z, blood_VW, blood_INT
}

enum barrier_Enum()
{
	barri_PlacedBy[25],
	Float:barri_PosX, Float:barri_PosY, Float:barri_PosZ, barri_PosVW, barri_PosINT,
	barri_BarrierID,
	barri_LabelUsed,
	Text3D:barri_LabelID
}

enum garage_Enum()
{
	ga_Street[32],
	ga_City[32],
	ga_Number,
	ga_PSC,
	ga_Owner[30],
	ga_SecOwner[30],
	Float:ga_vX, Float:ga_vY, Float:ga_vZ, Float:ga_vA,
	Float:ga_pX, Float:ga_pY, Float:ga_pZ, Float:ga_pA,
	ga_PosVirtualWorld, ga_PosInterior,
	ga_InteriorID,
	ga_IsLocked,
	ga_BuyPrice,
	ga_AssignedHouse,

	Text3D:ga_Label,
	ga_Pickup,
	ga_Area
}

enum house_Enum()
{
	ho_Street[32],
	ho_City[32],
	ho_Number,
	ho_PSC,
	ho_Owner[30],
	ho_SecOwner[30],
	Float:ho_PosX, Float:ho_PosY, Float:ho_PosZ, Float:ho_PosAngle, ho_PosVirtualWorld, ho_PosInterior,
	ho_InteriorID,
	ho_IsLocked,
	ho_BuyPrice,
	ho_Light,
	ho_ExteriorFurniture,

	ho_IsRental,
	ho_RentTo,

	Text3D:ho_Label,
	ho_Pickup,
	ho_Area
}

enum business_Enum()
{
	bz_Name [ 255 ],
	bz_Owner [ 30 ],
	bz_SecOwner [ 30 ],
	Float:bz_PosX, Float:bz_PosY, Float:bz_PosZ, Float:bz_PosAngle, bz_PosVirtualWorld,
	bz_PosInterior,
	bz_Address,
	bz_InteriorID,
	bz_IsLocked,
	bz_MusicAddress [ 255 ],
	bz_BuyPrice,
	bz_BusinessType,
	bz_EntryFee,
	bz_Storage,
	bz_Tovar,

	Text3D:bz_Label,
	bz_Pickup,
	bz_Area
}

enum znacka_Enum()
{
	Float:znacka_X, Float:znacka_Y, Float:znacka_Z, Float:znacka_RX, Float:znacka_RY, Float:znacka_RZ,
	znacka_ObjectID1,
	znacka_ObjectID2,
}

enum entrance_Enum() {
	Float:e_posX, Float:e_posY, Float:e_posZ, Float:e_posA, e_posVW, e_posINT,
	e_InteriorID,
	e_Name[84],
	e_Address,
	Text3D:e_Label,
	e_Pickup
}

enum atm_Enum()
{
	Float:atm_posX, Float:atm_posY, Float:atm_posZ, Float:atm_posRX, Float:atm_posRY, Float:atm_posRZ,
	atm_posVW, atm_posINT,
	atm_Object,
	atm_AreaID,
	Text3D:atm_Label
}

enum vehicle_Enum()
{
	v_SPZ[24],
	v_Owner[30],
	v_SecOwner[30],
	v_Fuel,
	v_FuelType,
	v_Battery,
	Float:v_Oil,
	Float:v_MileAge,
	Float:v_Nitrous,
	v_Faction,
	v_Siren,
	v_CarRadio,
	v_AlarmItem,
	v_NoBreakin,
	v_TitWindows,
	v_RadioURL[256],

	v_Color_1,
	v_Color_2,

	v_Sun_LDoor,
	v_Sun_RDoor,
	v_Sun_Hood,
	v_Sun_Boot,
	v_Sun_FBumper,
	v_Sun_RBumper,

	v_SPZDown,

    v_rentalb_IsRental,
    v_rentalb_LastUnix,
    v_rentalb_RentedBy[MAX_PLAYER_NAME+1],

	// Ostatné premenné, ktoré sa vyuívajú na malé èasti skriptu.
	bool:v_Temporary,
	Float:v_def_SpawnX,
	Float:v_def_SpawnY,
	Float:v_def_SpawnZ,
	Float:v_def_SpawnA,
	Float:v_def_Health,
	v_def_SpawnVW,
	v_def_SpawnINT,
	v_ELM,
	v_FrontBullbar,
	v_RearLights,
	v_Alarm,
	v_AlarmTimer,
	v_AlarmTimer_2,
	v_AlarmIcon,
	bool:v_Learner,
	v_LearnerObj,
	bool:v_IsBeingRespawned,
	
	v_IsSweeper,
	
	// Bazar
	
	v_bazar_Price,
	v_bazar_Buyout,
	v_bazar_DateAdded,
	v_bazar_BoughtFor,
	v_bazar_AddedBy[MAX_PLAYER_NAME+1],
	v_bazar_Desc[ 256 ],

	// Tovar

	v_CargoType,
	v_CargoQuantity,

	// Taxameter

	bool:v_Taxameter,
	v_TaxameterItem,
	Float:v_TaxameterPrice,
	Float:v_TaxameterMileAge,

	// Policajný radar

	bool:v_Radar,

	// Znaèka "STOP" pre RCSD

	bool:v_stop_isEnabled,
	v_stop_object_1,
	v_stop_object_2,
	v_stop_object_3,

	// Unity

	bool:v_unit_isUsed,
	Text3D:v_unit_Label,
	v_unit_text[32],
	
	// Drevo
	v_tree_Type,
	v_tree_Count,
}

enum
{
	log_type_other,
	log_type_admin,
	log_type_deaths,
	log_type_buythings,
	log_type_player,
	log_type_kasa,
	log_type_business,
	log_type_punish,
	log_type_assist,
	log_type_trunk,
	log_type_pcommands,
	log_type_map,
}

enum
{
	did_Null = 1,
	did_ServerStats = 1000,
	did_Login,
	did_Admins,
	did_Damages,
	did_Brigady,
	did_Brigady_Viac,
	did_Stats,
	did_Inventory,
	did_Frakcie_Edit,
	did_Frakcie_EditEx,
	did_Frakcie_EditName,
	did_Frakcie_EditID,
	did_Frakcie_EditType,
	did_Frakcie_EditCash,
	did_Frakcie_EditDel,
	did_Banned,
	did_CityHall,
	did_CityHall_id,
	did_CityHall_idy,
	did_CityHall_idm,
	did_CityHall_idd,
	did_CityHall_idp,
	did_CityHall_ids,
	did_Frakcia_Own,
	did_Frakcia_Own_Kasa,
	did_Frakcia_Own_KasaC,
	did_Frakcia_Own_Members,
	did_Frakcia_Own_Vypoved,
	did_Faction_Members,
	did_barriers,
	did_locker_sd,
	did_locker_sd_vypoved,
	did_locker_sd_guns,
	did_locker_sd_skin_m,
	did_locker_sd_skin_f,
	did_locker_fd_skin_m,
	did_locker_fd_skin_f,
	did_posledneprikazy,
	did_changelog,
	did_newbies,
	did_PocasieList,
	did_locker_fd,
	did_locker_fd_vypoved,
	did_locker_fd_guns,
	did_options,
	did_options_pwd,
	did_options_bankacc,
	did_charkill_rem_confirm,
	did_menuList,
	did_menuList_house,
	did_menuList_garage,
	did_afkpls,
	did_InventoryMenu,
	did_InventoryZahodit,
	did_InventoryGive1,
	did_InventoryGive2,
	did_Faction_Member,
	did_skinstorage_buy,
	did_skinstorage_choose,
	did_InventoryPolozit,
	did_Listdrop,
	did_options_prizvuk,
	did_options_popis,
	did_vehicle_spawn,
	did_vehicle_spawn_confirm,
	did_dmv,
	did_dmv_info,
	did_Faction_Set_Hodnost,
	did_Faction_Set_Rank,
	did_Faction_Set_Badge,
	did_boombox,
	did_boombox_custom,
	did_zbranezoznam,
	did_toll_log,
	did_vehinfo,
	did_fines,
	did_fine,
	did_I_Frakcie_Edit,
	did_I_Frakcie_EditEx,
	did_I_Frakcie_EditName,
	did_I_Frakcie_EditID,
	did_I_Frakcie_EditPerms,
	did_I_Frakcie_EditDel,
	did_I_Frakcie_EditCash,
	did_I_Frakcia_Own,
	did_I_Frakcia_Own_Kasa,
	did_I_Frakcia_Own_KasaC,
	did_I_Frakcia_Own_Members,
	did_I_Frakcia_Own_Vypoved,
	did_I_Faction_Member,
	did_I_Faction_Members,
	did_I_Faction_Set_Rank,
	did_banka,
	did_banka_accs,
	did_banka_accs_rem,
	did_banka_add,
	did_banka_add_count,
	did_banka_card,
	did_bank_prevod,
	did_bank_prevod_2,
	did_bank_prevod_fin,
	did_atm_zostatok,
	did_atm_vyber,
	did_atm_pin,
	did_technicak,
	did_charkill_rename,
	did_crate,
	did_illegal_store,
	did_growshop,
	did_gps,
	did_gps_custom,
	did_gps_cust,
	did_gps_custchoose,
	did_gpsex,
	did_gpsex_add,
	did_upgrade_shop,
	did_upgrade_shop_col,
	did_trunk,
	did_trunk_add,
	did_carradio,
	did_carradio_custom,
	did_phone,
	did_phone_options,
	did_phone_dial,
	did_phone_last_msg,
	did_phone_last_msg_detail,
    did_phone_msg_1,
    did_phone_msg_2,
    did_phone_sms_last,
    did_phone_sms_last_od,
    did_phone_contacts,
    did_phone_contact_new,
    did_phone_contact_new_2,
    did_phone_contact_menu,
    did_phone_sms_contact,
    did_kupit_kredit_electro,
    did_kupit_sim_kartu,

    did_mdc,
    did_mdc_search_person,
    did_mdc_person,
    did_mdc_person_info,
    did_mdc_person_majetok,
    did_mdc_online,
    did_mdc_fines,
    did_mdc_ciny,
    did_mdc_add_cin,
    did_mdc_search_vehicle,
    did_mdc_vehicle_detail,
    did_mdc_vehicle_detail_info,
    did_mdc_vehicle_detail_want,
    did_mdc_wanted_cars,
    did_mdc_calls,
    did_mdc_call,
    did_mdc_call_menu,
    did_mdc_cctv,
    did_mdc_pokuta_add,
    did_mdc_pokuta_add_reas,
    did_mdc_trace_number,

    did_clothing,
	did_clothing_new_model,
	did_clothing_new_bone,
	did_clothing_menu,
	did_clothing_menu_bone,
	did_clothing_menu_color_menu,
	did_clothing_menu_color,

	did_buy_ammo,
	did_fdhq_patro,
	did_pdhq_garaz,
	did_zosrotovat,

	did_advert,
	did_adtable_new_text,
	did_adtable_text,

	did_majetok,

	did_CityHall_veh_1,
	did_CityHall_veh_2,
	did_CityHall_veh_c,
	did_assistmaster,

	did_boombox_add_1,
	did_boombox_add_2,
	did_boombox_menu,

	did_carradio_add_1,
	did_carradio_add_2,
	did_carradio_menu,

	did_fos,
	did_fos_cctv,
	did_fos_online,
	did_fos_calls,
	did_fos_call,
	did_fos_call_menu,

	did_register,

	did_graffiti_menu,
	did_graffiti_input_fontsize,
	did_graffiti_input_text,

	did_whitelist,
	did_whitelist_detail,
	did_whitelist_reason,

	did_tuning_main,
	did_tuning_paintjobs,
	did_tuning_exhausts,
	did_tuning_fbumps,
	did_tuning_rbumps,
	did_tuning_roofs,
	did_tuning_spoilers,
	did_tuning_sideskirts,
	did_tuning_bullbars,
	did_tuning_wheels,
	did_tuning_cstereo,
	did_tuning_hydraulics,
    did_tuning_nitro,
    did_tuning_lights,
    did_tuning_hoods,
    did_tuning_vents,
    did_tuning_remove,

    did_goldmenu,
    did_goldmenu_1,
    did_goldmenu_2,
    did_goldmenu_4,
    did_goldmenu_donor,

    did_cctv,

    did_inv_drugs,
    did_inv_drugs_menu,
    did_inv_drugs_action,
    did_inv_drugs_ex_throw,
    did_inv_drugs_ex_give1,
    did_inv_drugs_ex_give2,
    did_inv_drugs_ex_drop,
    did_selldrugs,

    did_map_newmap,
    did_map_deletemap,
    did_map_deletemap_c,
	did_bmap_maps,

    did_vattach_adm_add,
    did_vattach_adm_add_name,
    did_vattach_adm_rem,
    did_vattach,
    did_vattach_kata,
    did_vattach_menu,
    did_vattach_menuex,

    did_trucker_buy,
    did_trucker_buyfuel,
    did_trucker_buyfuel_c,

    did_phonebooth,

    did_prepravca_offer,
    did_preprevca_offer_detail,
    did_prepravca_info,

    did_transfer_house,
    did_transfer_business,
    did_transfer_garage,

    did_emptygun,
    did_emptygun_menu,
    did_emptygun_reload,

    did_achievements,

    did_inv_alcohol,
    did_inv_alcohol_menu,
    did_inv_alcohol_action,

    did_impound_get,
    did_impound_check,

    did_impound_add_select,
    did_impound_add_fine,
    did_impound_add_time,
    did_impound_add_reason,
    did_impound_add_recap,
    
    did_char_cre_name,
    did_char_create_skin,
    did_char_multiple,
    
    did_econ_categories,
    did_econ_lists,
    did_econ_list,
    
    did_econ_edit_name,
    did_econ_edit_category,
    did_econ_edit_value_from,
    did_econ_edit_value_to,
    
    did_dealership,
    did_dealership_detail,
    did_dealership_detail_rename,
    did_dealership_detail_multiplie,
    did_dealership_detail_veh_new,
    did_dealership_detail_vehs,
    did_dealership_vehicle,
    did_dealership_vehicle_donator,
    did_dealership_vehicle_price,
    did_dealership_vehicle_credits,
    did_dealership_vehicle_recolour,
    did_dealership_vehicle_faction,
    did_dealership_confirm,
    did_dealership_confirm_money,
    did_dealership_confirm_money_ex,
    did_dealership_confirm_credits,
    
    did_anawalt_work,
    did_anawalt_work_detail,
    did_anawalt_storage,
    did_anawalt_storage_manip,
    did_anawalt_kontrakty,
    did_anawalt_kontrakt_detail,
}

new menuNames[][] = {
	"_", //null
	"_", //menut_brigada_krabice
	"Town Hall /menu", //menut_cityhall
	"_", //menut_bucks_coffee
	"Buck's Coffee /menu", //menut_foodshop_buckscoffee
	"Bait Shop /menu", //menut_baitshop
	"Brigáda rybárenie /rybarit", //menut_brigada_rybarit
	"Automat na èokoládu /menu", //menut_automat_chocolate
	"_", //menut_locker_sd
	"Stánok s hotdogmi /menu", //menut_foodshop_hotdog
	"_", //menut_locker_fd
	"Preda ryby legál /predatryby", //menut_brigada_predatryby
	"Preda ryby nelegál /predatryby", //menut_brigada_predatrybyex
	"_", //menut_drivingschool
	"_", //menut_brigada_krabice_mg
	"Hardware (eleziarstvo) /menu", //menut_shop_hardware
	"Obchod s obleèením /menu", //menut_skin_shop
	"Laboratórium na zistenie krvi /menu (SD)", //menut_sd_lab
	"_", //menut_watson_automotive
	"Burger Shot (drive-thru) /menu", //menut_burgershot_drive
	"Burger Shot /menu", //menut_burgershot
	"DVM /menu", //menut_d´mv
	"_", //menut_zamestnat_smetiar
	"_", //menut_zamestnat_sweeper
	"Army Shop /menu", //menut_armyshop
	"_", //menut_big_mikes
	"Pizza Stack /menu", //menut_pizza_stack
	"Banka /menu", //menut_banka
	"Buy Illegal Crate /buycrate - /buyammo", //menut_buy_crate
	"Grow Shop /buyseeds", //menut_grow_shop
	"Upgrade Shop /menu", //menut_upgrade_shop
	"General Store /menu", //menut_general_store
	"Electro Shop /menu /buycredit", //menut_electro_shop
	"MDC poèítaè /mdc", //menut_mdc
	"_", //menut_mr_grants
	"_", //menut_general
	"Food Welcome Pump /menu", //menut_welcome_pump
	"Food Marco's Bistro /menu", //menut_marcosbistro
	"Telocvièòa (bojovy styl) /buystyle", //menut_gym
	"_", //menut_fdhq_patro
	"_", //menut_pdhq_garaz,
	"Zorotovanie auta /zosrotovat", //menut_zosrotovat
	"Advertisement /menu", //menut_advert
	"Ammu Nation /buyweapons", //menut_ammun
	"ivý prenos /live", //menut_live
	"_", //menut_zamestnat_pizzaman
	"_", //menut_rybar_brana
	"Obchod s auto vecickami /buy", //menut_car_tools
	"FOS FD MDC /fos", //menut_fos
	"Nákup tovaru /sklad", //menut_trucker_vyklad
	"Nákup paliva /sklad", //menut_trucker_naklad
	"Autodielòa", //menut_autodielna
	"_", //menut_brigada_krabice_od1
	"_", //menut_brigada_krabice_od2
	"_", //menut_pracovat_od_kontajner
	"_", //menut_pracovat_od_kontajner2
	"Sex Shop (/buy)", //menut_sex_shop
	"_", //menut_locker_mech
	"_", //menut_pracovat_od_regaly
	"_", //menut_pracovat_od_trucks
	"ALC /rozhlas", //menut_pola_rozhlas
	"_", //menut_boatshop
	"_", //menut_planeshop
	"Lekáreò /buydrugs", //menut_lekaren
	"Vykup drog /selldrugs", //menut_selldrugs
	"Tutoriál /tutorial", //menut_tutorial
	"Znièenie cisterny /cisterna", //menut_d_cisterna
	"Predaj krabic /predatkrabicu",  //menut_sellkrab
	"Preprávna spolocnost /zamesnat", //menut_zamestnat_preprava
	"Pohrebna sluzba /pracovat", //menut_pohrebna_sluzba
	"Alcohol shop /buyalcohol", //menut_alcohol_shop
	"Rent Bike Spawn /rentbike", //menut_rent_bike
	"ALC /praca", //menut_anawalt_praca
	"ALC obchod /buy", //menut_anawalt_obchod
	"ALC sklad /storage", //menut_anawalt_storage
	"ALC export /export" //menut_anawalt_export
};

new menuPickups[][][] = {
	{ 0, 		"iadny pickup"},
	{ 1240, 	"Srdce" },
	{ 1242, 	"Vesta" },
	{ 1239, 	"Informácie (info icon)" },
	{ 1272, 	"Modrý dom" },
	{ 1273, 	"Zelený dom" },
	{ 1241, 	"Pilulka (adrenaline)"},
	{ 1247, 	"Hviezda (bribe)"},
	{ 1254, 	"Smrtka (skull)"},
	{ 1274, 	"Dolár (money icon)"},
	{ 1275, 	"Modré trièko"},
	{ 1277, 	"Disketa (save disk)"},
	{ 1313, 	"Dve smrtky (2 skulls)"},
	{ 1314, 	"Dvaja hráèi (2 players)"},
	{ 1318, 	"Biela ipka dole"},
	{ 1279, 	"Balíèek s drogami"}
};

enum
{
	menut_null,
	menut_brigada_krabice,
	menut_cityhall,
	menut_bucks_coffee,
	menut_foodshop_buckscoffee,
	menut_baitshop,
	menut_brigada_rybarit,
	menut_automat_chocolate,
	menut_locker_sd,
	menut_foodshop_hotdog,
	menut_locker_fd,
	menut_brigada_predatryby,
	menut_brigada_predatrybyex,
	menut_drivingschool,
	menut_brigada_krabice_mg,
	menut_shop_hardware,
	menut_skin_shop,
	menut_sd_lab,
	menut_watson_automotive,
	menut_burgershot_drive,
	menut_burgershot,
	menut_dmv,
	menut_zamestnat_smetiar,
	menut_zamestnat_sweeper,
	menut_armyshop,
	menut_big_mikes,
	menut_pizza_stack,
	menut_banka,
	menut_buy_crate,
	menut_grow_shop,
	menut_upgrade_shop,
	menut_general_store,
	menut_electro_shop,
	menut_mdc,
	menut_mr_grants,
	menut_general,
    menut_welcome_pump,
    menut_marcosbistro,
    menut_gym,
    menut_fdhq_patro,
    menut_pdhq_garaz,
    menut_zosrotovat,
    menut_advert,
    menut_ammun,
	menut_live,
	menut_zamestnat_pizzaman,
    menut_rybar_brana,
    menut_car_tools,
    menut_fos,
    menut_trucker_vyklad,
    menut_trucker_naklad,
    menut_autodielna,
    menut_brigada_krabice_od1,
    menut_brigada_krabice_od2,
    menut_pracovat_od_kontajner,
    menut_pracovat_od_kontajner2,
    menut_sex_shop,
    menut_locker_mech,
    menut_pracovat_od_regaly,
    menut_pracovat_od_trucks,
    menut_pola_rozhlas,
    menut_boatshop,
    menut_planeshop,
    menut_lekaren,
    menut_selldrugs,
    menut_tutorial,
	menut_d_cisterna,
	menut_sellkrab,
	menut_zamestnat_preprava,
	menut_pohrebna_sluzba,
	menut_alcohol_shop,
	menut_rent_bike_s,
	menut_anawalt_praca,
	menut_anawalt_obchod,
	menut_anawalt_storage,
	menut_anawalt_export,
}

enum
{
	checkp_none,
    checkp_brigada_krabicePC_1,
    checkp_brigada_krabicePC_2,
    checkp_brigada_krabiceMG_1,
    checkp_brigada_krabiceMG_2,
    checkp_vehicle_parkspot,
    checkp_dmv,
	checkp_vehicle_findme,
	checkp_gps,
	checkp_trace,
	checkp_prepravca_truck,
	checkp_prepravka,
	checkp_pohrebak1,
	checkp_pohrebak2,
	checkp_pohrebak3,
	checkp_pohrebak4,
	checkp_pohrebak5,
	checkp_pohrebak6,
	checkp_pohrebak7,
	
	checkp_mission_sweeper,
	checkp_mission_pizza_fin,
}

enum
{
	fadeid_LoginFade,
}

enum fuelEnum_e {
	Float:fuel_X, Float:fuel_Y, Float:fuel_Z,

	fuel_assig_biz,
	fuel_cislo_boxu[30],

	fuel_AreaID,
	Text3D:fuel_Label,

	Float:fuel_pr_benzin,
	Float:fuel_pr_diesel,
	Float:fuel_pr_kerosin,
	Float:fuel_pr_lpg,

	fuel_st_benzin,
	fuel_st_diesel,
	fuel_st_kerosin,
	fuel_st_lpg,

	fuel_is_benzin,
	fuel_is_diesel,
	fuel_is_kerosin,
	fuel_is_lpg

}

enum sipkyEnum {
	Float:arr_X, Float:arr_Y, Float:arr_Z, arr_VW, arr_INTERIOR,
	Float:arr_ToX, Float:arr_ToY, Float:arr_ToZ, Float:arr_ToAngle, arr_ToVW, arr_ToINTERIOR,

	arr_FactionId,

	arr_AreaID,
	arr_PickupID,
	Text3D:arr_LabelID
}

enum adTabula_e {

	adt_Model,

	adt_assignedBiz,

	Float:adt_X, Float:adt_Y, Float:adt_Z, Float:adt_RX, Float:adt_RY, Float:adt_RZ,
	adt_VW, adt_INTERIOR,

	adt_Text[128],

	adt_ObjectID,
	Text3D:adt_LabelID
}

enum menuEnum_e {
	Float:menu_X, Float:menu_Y, Float:menu_Z,
	menu_VW, menu_INT,
	Text3D:menu_LABEL,
	menu_TYPE,
	menu_MODEL,
	menu_AREA,
	menu_PICKUPID,

	//KRV
	menu_blood_OWNER[30],
	menu_blood_TIMER,
	menu_blood_STADIUM,
	bool:menu_blood_PREBIEHA
}

enum actor_Enum()
{
	act_UniqueID,
	act_Skin,
	Float:act_PosX, Float:act_PosY, Float:act_PosZ, Float:act_PosA,
	act_VirtualWorld,
	act_AnimName[32],
	act_AnimNumber,
	act_Label[128],
	act_ActorID,
	Text3D:act_LabelID
}

enum graffiti_Enum()
{

	// Base data
	graffiti_ObjectId,

	// Detailed data
	graffiti_Text[256],
	graffiti_MatSize,
	graffiti_Font[32],
	graffiti_FontSize,
	graffiti_Bold,
	graffiti_Owner[32],

	// Editing
	bool:graffiti_IsBeingEdited,
	graffiti_EditedBy

}

//==============================VARIABLES=======================================

#define MAX_ZONES 16

new music_zones[MAX_ZONES];
new Float:music_zone_points_0[] = {
	-424.0,-652.0,-483.0,-631.0,-507.0,-573.0,-586.0,-575.0,-630.0,-569.0,-627.0,-460.0,-471.0,-462.0,-461.0,-471.0,-461.0,-564.0,-476.0,-576.0,
	-460.0,-617.0,-434.0,-623.0,-428.0,-590.0,-413.0,-556.0,-407.0,-516.0,-441.0,-451.0,-472.0,-415.0,-561.0,-402.0,-684.0,-426.0,-753.0,-453.0,
	-844.0,-471.0,-898.0,-472.0,-900.0,-548.0,-932.0,-563.0,-986.0,-569.0,-965.0,-607.0,-964.0,-709.0,-984.0,-761.0,-1077.0,-770.0,-1131.0,-767.0,
	-1130.0,-705.0,-1130.0,-639.0,-1132.0,-576.0,-1168.0,-683.0,-1197.0,-760.0,-1254.0,-804.0,-1281.0,-831.0,-1218.0,-863.0,-1215.0,-976.0,-1221.0,-1071.0,
	-1230.0,-1159.0,-1262.0,-1193.0,-1347.0,-1194.0,-1433.0,-1351.0,-1415.0,-1398.0,-1308.0,-1366.0,-1166.0,-1323.0,-1074.0,-1329.0,-999.0,-1365.0,-946.0,-1393.0,
	-913.0,-1348.0,-906.0,-1236.0,-904.0,-1153.0,-890.0,-1081.0,-848.0,-1016.0,-788.0,-993.0,-692.0,-997.0,-612.0,-962.0,-553.0,-910.0,-493.0,-846.0,
	-432.0,-817.0,-385.0,-815.0,-364.0,-764.0,-424.0,-652.0
};
new Float:music_zone_points_1[] = {
	-1612.0,-819.0,-1509.0,-831.0,-1413.0,-827.0,-1322.0,-820.0,-1278.0,-832.0,-1221.0,-863.0,-1217.0,-978.0,-1225.0,-1102.0,-1229.0,-1159.0,-1262.0,-1193.0,
	-1347.0,-1193.0,-1432.0,-1350.0,-1452.0,-1296.0,-1496.0,-1236.0,-1569.0,-1163.0,-1615.0,-1091.0,-1630.0,-1021.0,-1612.0,-819.0
};
new Float:music_zone_points_2[] = {
	-312.0,-1682.0,-419.0,-1698.0,-499.0,-1677.0,-537.0,-1625.0,-655.0,-1604.0,-667.0,-1700.0,-700.0,-1730.0,-729.0,-1701.0,-756.0,-1712.0,-784.0,-1785.0,
	-831.0,-1852.0,-882.0,-1904.0,-956.0,-1920.0,-1045.0,-2086.0,-1125.0,-2267.0,-1154.0,-2353.0,-1173.0,-2419.0,-1172.0,-2486.0,-1119.0,-2561.0,-1029.0,-2598.0,
	-884.0,-2541.0,-807.0,-2469.0,-748.0,-2389.0,-712.0,-2311.0,-676.0,-2218.0,-600.0,-2158.0,-524.0,-2152.0,-450.0,-2174.0,-388.0,-2173.0,-356.0,-2133.0,
	-367.0,-2059.0,-382.0,-1966.0,-390.0,-1887.0,-332.0,-1768.0,-312.0,-1682.0
};
new Float:music_zone_points_3[] = {
	-346.0,-2166.0,-329.0,-2218.0,-281.0,-2318.0,-232.0,-2371.0,-163.0,-2435.0,-107.0,-2496.0,-65.0,-2563.0,-41.0,-2645.0,-52.0,-2727.0,-120.0,-2798.0,
	-238.0,-2809.0,-322.0,-2782.0,-437.0,-2763.0,-556.0,-2735.0,-729.0,-2743.0,-882.0,-2802.0,-1011.0,-2837.0,-1233.0,-2844.0,-1369.0,-2859.0,-1476.0,-2817.0,
	-1503.0,-2732.0,-1599.0,-2670.0,-1664.0,-2655.0,-1809.0,-2521.0,-1888.0,-2432.0,-2089.0,-2087.0,-2016.0,-1928.0,-1907.0,-1802.0,-1767.0,-1711.0,-1579.0,-1623.0,
	-1399.0,-1658.0,-1287.0,-1736.0,-1216.0,-1800.0,-1194.0,-1882.0,-1138.0,-1908.0,-994.0,-1923.0,-1103.0,-2112.0,-1127.0,-2180.0,-1171.0,-2303.0,-1211.0,-2426.0,
	-1178.0,-2537.0,-1110.0,-2612.0,-997.0,-2628.0,-866.0,-2571.0,-771.0,-2469.0,-692.0,-2343.0,-651.0,-2228.0,-599.0,-2185.0,-495.0,-2186.0,-437.0,-2206.0,
	-374.0,-2204.0,-346.0,-2166.0
};
new Float:music_zone_points_4[] = {
	-2238.0,-2508.0,-2283.0,-2588.0,-2385.0,-2526.0,-2427.0,-2438.0,-2432.0,-2301.0,-2282.0,-2237.0,-2235.0,-2267.0,-2259.0,-2307.0,-2222.0,-2344.0,-2274.0,-2418.0,
	-2272.0,-2464.0,-2238.0,-2508.0
};
new Float:music_zone_points_5[] = {
	-2628.0,-2193.0,-2821.0,-2298.0,-2841.0,-2427.0,-2832.0,-2561.0,-2742.0,-2726.0,-2633.0,-2862.0,-2506.0,-2906.0,-1977.0,-2879.0,-1660.0,-2768.0,-1791.0,-2726.0,
	-1925.0,-2741.0,-2015.0,-2773.0,-2169.0,-2790.0,-2313.0,-2746.0,-2432.0,-2697.0,-2524.0,-2686.0,-2561.0,-2623.0,-2578.0,-2528.0,-2623.0,-2446.0,-2648.0,-2381.0,
	-2634.0,-2337.0,-2594.0,-2294.0,-2628.0,-2193.0
};
new Float:music_zone_points_6[] = {
	-2856.0,-1800.0,-2905.0,-1592.0,-2917.0,-1402.0,-2873.0,-1144.0,-2720.0,-1001.0,-2533.0,-875.0,-2236.0,-1026.0,-1962.0,-1383.0,-1872.0,-1461.0,-1912.0,-1509.0,
	-1913.0,-1618.0,-1953.0,-1636.0,-1957.0,-1796.0,-2053.0,-1912.0,-2127.0,-2008.0,-2227.0,-2125.0,-2308.0,-2166.0,-2479.0,-2150.0,-2587.0,-2091.0,-2633.0,-2091.0,
	-2856.0,-1800.0
};
new Float:music_zone_points_7[] = {
	1581.0,105.0,1591.0,45.0,1602.0,-18.0,1587.0,-123.0,1547.0,-186.0,1508.0,-221.0,1450.0,-247.0,1370.0,-246.0,1288.0,-212.0,1243.0,-169.0,
	1304.0,-98.0,1396.0,-14.0,1487.0,60.0,1581.0,105.0
};
new Float:music_zone_points_8[] = {
	1226.0,117.0,1230.0,51.0,1220.0,2.0,1124.0,-45.0,1012.0,-57.0,834.0,-67.0,740.0,-147.0,544.0,-128.0,549.0,30.0,529.0,228.0,
	613.0,289.0,653.0,291.0,685.0,233.0,760.0,209.0,807.0,218.0,799.0,318.0,921.0,353.0,995.0,389.0,1029.0,455.0,1098.0,422.0,
	1154.0,368.0,1202.0,347.0,1184.0,299.0,1190.0,271.0,1174.0,229.0,1194.0,203.0,1173.0,145.0,1226.0,117.0
};
new Float:music_zone_points_9[] = {
	-191.0,216.0,-68.0,180.0,41.0,118.0,187.0,43.0,191.0,10.0,123.0,8.0,113.0,-132.0,76.0,-145.0,72.0,-196.0,-81.0,-189.0,
	-296.0,-139.0,-294.0,-69.0,-265.0,51.0,-225.0,156.0,-191.0,216.0
};
new Float:music_zone_points_10[] = {
	-653.0,-1588.0,-533.0,-1605.0,-481.0,-1662.0,-444.0,-1679.0,-380.0,-1671.0,-340.0,-1662.0,-299.0,-1658.0,-239.0,-1547.0,-152.0,-1443.0,-171.0,-1334.0,
	-141.0,-1195.0,-97.0,-1111.0,-89.0,-1069.0,-138.0,-988.0,-263.0,-901.0,-378.0,-854.0,-481.0,-1005.0,-574.0,-1167.0,-630.0,-1281.0,-643.0,-1367.0,
	-653.0,-1588.0
};
new Float:music_zone_points_11[] = {
	2573.0,25.0,2680.0,27.0,2740.0,-36.0,2725.0,-139.0,2679.0,-273.0,2677.0,-334.0,2698.0,-399.0,2746.0,-458.0,2784.0,-533.0,2823.0,-590.0,
	2834.0,-706.0,2821.0,-1021.0,2615.0,-1025.0,2591.0,-919.0,2401.0,-939.0,2338.0,-982.0,2320.0,-1028.0,2210.0,-962.0,2039.0,-936.0,1931.0,-987.0,
	1874.0,-995.0,1786.0,-929.0,1728.0,-793.0,1742.0,-596.0,1749.0,-487.0,1712.0,-372.0,1842.0,-356.0,1889.0,-291.0,1872.0,-207.0,1859.0,-176.0,
	1885.0,-89.0,1914.0,-219.0,1962.0,-254.0,2070.0,-228.0,2183.0,-224.0,2265.0,-218.0,2346.0,-147.0,2454.0,-84.0,2539.0,-48.0,2578.0,-22.0,
	2573.0,25.0
};
new Float:music_zone_points_12[] = {
	2089.0,54.0,1896.0,59.0,1770.0,115.0,1646.0,146.0,1666.0,214.0,1718.0,240.0,1784.0,243.0,1866.0,249.0,1943.0,272.0,2023.0,280.0,
	2072.0,226.0,2152.0,223.0,2089.0,54.0
};
new Float:music_zone_points_13[] = {
	1175.0,-182.0,1237.0,-327.0,1247.0,-403.0,1064.0,-432.0,992.0,-461.0,845.0,-557.0,842.0,-464.0,735.0,-425.0,655.0,-430.0,644.0,-394.0,
	486.0,-399.0,524.0,-257.0,693.0,-243.0,796.0,-181.0,929.0,-190.0,1049.0,-195.0,1123.0,-196.0,1175.0,-182.0
};
new Float:music_zone_points_14[] = {
	-221.0,231.0,-334.0,254.0,-478.0,270.0,-589.0,269.0,-746.0,187.0,-755.0,131.0,-667.0,111.0,-655.0,69.0,-663.0,29.0,-664.0,-30.0,
	-710.0,-83.0,-763.0,-105.0,-858.0,-135.0,-907.0,-153.0,-929.0,-225.0,-839.0,-236.0,-744.0,-235.0,-659.0,-231.0,-596.0,-230.0,-510.0,-257.0,
	-464.0,-262.0,-403.0,-245.0,-355.0,-249.0,-304.0,-269.0,-276.0,-267.0,-312.0,-179.0,-326.0,-87.0,-305.0,7.0,-276.0,105.0,-221.0,231.0
};
new Float:music_zone_points_15[] = {
	846.0,1159.0,944.0,1019.0,966.0,943.0,967.0,775.0,789.0,709.0,670.0,691.0,550.0,711.0,458.0,765.0,357.0,804.0,287.0,870.0,
	246.0,965.0,377.0,997.0,496.0,1028.0,641.0,1070.0,767.0,1100.0,805.0,1115.0,846.0,1159.0
};
new music_zones_text[MAX_ZONES][64] = {
	"http://countyliferoleplay.eu/assets/ambient/forest.mp3",
	"http://countyliferoleplay.eu/assets/ambient/asylum.mp3",
	"http://countyliferoleplay.eu/assets/ambient/forest.mp3",
	"http://countyliferoleplay.eu/assets/ambient/forest.mp3",
	"http://countyliferoleplay.eu/assets/ambient/forest.mp3",
	"http://countyliferoleplay.eu/assets/ambient/beach.mp3",
	"http://countyliferoleplay.eu/assets/ambient/chiliad.mp3",
	"http://countyliferoleplay.eu/assets/ambient/farm1.mp3",
	"http://countyliferoleplay.eu/assets/ambient/forest.mp3",
	"http://countyliferoleplay.eu/assets/ambient/farm1.mp3",
	"http://countyliferoleplay.eu/assets/ambient/farm1.mp3",
	"http://countyliferoleplay.eu/assets/ambient/forest.mp3",
	"http://countyliferoleplay.eu/assets/ambient/farm1.mp3",
	"http://countyliferoleplay.eu/assets/ambient/farm1.mp3",
	"http://countyliferoleplay.eu/assets/ambient/forest.mp3",
	"http://countyliferoleplay.eu/assets/ambient/quarry.mp3"
};

new gTuningFonts[][] = {
	"None",
	"Arial",
	"Calibri",
	"Verdana",
	"Webdings"
};

new gVehicleColors[] =
{
    0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
    0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
    0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
    0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
    0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
    0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
    0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
    0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
    0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
    0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
    0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
    0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
    0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF, 0x177517FF, 0x210606FF,
    0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF, 0xB7B7B7FF, 0x464C8DFF,
    0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF, 0x1E1D13FF, 0x1E1306FF,
    0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF, 0x992E1EFF, 0x2C1E08FF,
    0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF, 0x481A0EFF, 0x7A7399FF,
    0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF, 0x7B3E7EFF, 0x3C1737FF,
    0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF, 0x163012FF, 0x16301BFF,
    0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF, 0x2B3C99FF, 0x3A3A0BFF,
    0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF, 0x2C5089FF, 0x15426CFF,
    0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF, 0x995C52FF, 0x99581EFF,
    0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF, 0x96821DFF, 0x197F19FF,
    0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF, 0x8A653AFF, 0x732617FF,
    0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF, 0x561A28FF, 0x4E0E27FF,
    0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};

new audiostream[MAX_PLAYERS];
new ambientzone[MAX_PLAYERS];
new Text3D:krabicalabel[MAX_VEHICLES];
new cistvod[MAX_VEHICLES][25+1];
new palivocisterna[MAX_VEHICLES];

new delivermaxslot[][] = {
	{600, 2, 1}, //1-bezne,2-cisterna
	{422, 2, 1},
	{543, 3, 1},
	{478, 4, 1},
	{554, 6, 1},

	{413, 10, 1},
	{459, 10, 1},
	{482, 10, 1},

	{440, 12, 1},
	{498, 12, 1},

	{499, 16, 1},
	{414, 18, 1},
	{456, 20, 1},

	{578, 18, 1},

	{435, 30, 1},
	{450, 30, 1},
	{584, 40, 2}
};

new walktime[MAX_PLAYERS]; // for timer
new PlayerWalkStyle[MAX_PLAYERS]; // for the walk style

stock SetPlayerWalkingStyle(playerid, style) // set the player walking style
{
    PlayerWalkStyle[playerid] = style;
}

stock GetPlayerWalkingStyle(playerid) // get the player walking style
{
    return PlayerWalkStyle[playerid];
}

forward WalkAnim(playerid); // forwarding the timer function
public WalkAnim(playerid)  // Function of The Timer
{
    new keys, updown, leftright;
    GetPlayerKeys(playerid,keys,updown,leftright); // Get The Player Pressed Key
    if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))  // if player pressed Key to Walk
    {
        KillTimer(walktime[playerid]); // kill the walk timer if player was walked before
        switch(GetPlayerWalkingStyle(playerid))  //  switching The PlayerWalkStyle
        {
            //Aplly The Walk Anim
            case 1: ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
            case 2: ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
            case 3: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
            case 4: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
            case 5: ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
            case 6: ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
            case 7: ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
            case 8: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
            case 9: ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
            case 10: ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
            case 11: ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
            case 12: ApplyAnimation(playerid,"PED","Walk_drunk",4.1,1,1,1,1,1);
            case 13: ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
            default: ClearAnimations(playerid);  // if player not choosed a Walk Style, Not Playing Anim
        }
        walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid); //Set The Timer For Looping The Anims
    }
    return true;
}

forward WalkAnimDrunk(playerid); // forwarding the timer function
public WalkAnimDrunk(playerid)  // Function of The Timer
{
    new keys, updown, leftright;
    GetPlayerKeys(playerid,keys,updown,leftright); // Get The Player Pressed Key
    if (updown & KEY_UP || updown & KEY_DOWN || leftright & KEY_LEFT || leftright & KEY_RIGHT)
    {
        KillTimer(walktime[playerid]);
        ApplyAnimation(playerid,"PED","Walk_drunk",4.1,1,1,1,1,1);
        walktime[playerid] = SetTimerEx("WalkAnimDrunk",200,0,"d",playerid);
    }
    return true;
}

getmaxdeliveryslots(vehiclemodel, &allowedtype, trailermodel = -1)
{
	new x = 0;

	for (new y; y < sizeof(delivermaxslot); y++)
	{
	    if(trailermodel != -1 && delivermaxslot[y][0] == trailermodel)
	    {
	        x = delivermaxslot[y][1];
	        allowedtype = delivermaxslot[y][2];
	        break;
	    }
	    else if(delivermaxslot[y][0] == vehiclemodel)
	    {
	        x = delivermaxslot[y][1];
	        allowedtype = delivermaxslot[y][2];
	        break;
	    }
	}

	return x;
}

new ptrestnebody[MAX_PLAYERS];
new zakazrizeni[MAX_PLAYERS];
new vattachobj[MAX_VEHICLES][MAX_ATTACH_SLOTS];

new charnametmp[MAX_PLAYERS][MAX_PLAYER_NAME+1];

new PlayerText:SpectateTD[MAX_PLAYERS][17];
new srvcharname[MAX_PLAYERS][30];
// LOTTERY
new PlayerText:lotterio_TD[MAX_PLAYERS][7];
new bool:isInLottery[MAX_PLAYERS];
new bool:lotterio_IsDone[MAX_PLAYERS];
new lotterio_Characters[MAX_PLAYERS][3];
new bool:lotterio_Zotrete[MAX_PLAYERS][3];
new lotterio_RandomChars[] = "111111111111222233344455667";
// END

new Float:pohrebnasluzba_hroby[][] = {
	{2237.902343, -68.584213, 26.484375},
	{2238.083251, -70.969131, 26.484375},
	{2238.233398, -74.208633, 26.491645},
	{2238.486328, -75.706764, 26.496120},
	{2238.545166, -78.771980, 26.501806},
	{2238.266357, -82.066619, 26.503683},
	{2241.371582, -83.520545, 26.500843},
	{2241.648437, -81.614677, 26.504566},
	{2241.815185, -79.262199, 26.509162},
	{2241.635742, -77.099937, 26.513385},
	{2241.834716, -73.516227, 26.520387},
	{2241.999023, -70.035812, 26.518518},
	{2242.122802, -67.047950, 26.514141}
};

////////////////////////////////////////////////////////////////////////////////
new money_work[MAX_PLAYERS];
new money_accepted[MAX_PLAYERS];
new money_admin[MAX_PLAYERS];
new money_givenby[MAX_PLAYERS];
new money_spent[MAX_PLAYERS];
////////////////////////////////////////////////////////////////////////////////
new tg_data[MAX_PLAYERS][6];
new tg_origin[MAX_PLAYERS][128];
new tg_datax[MAX_PLAYERS][13][6];
new tg_originx[MAX_PLAYERS][13][128];
////////////////////////////////////////////////////////////////////////////////
new weaponskill_pistol[MAX_PLAYERS];
new weaponskill_pistol_silenced[MAX_PLAYERS];
new weaponskill_desert_eagle[MAX_PLAYERS];
new weaponskill_shotgun[MAX_PLAYERS];
new weaponskill_sawnoff_shotgun[MAX_PLAYERS];
new weaponskill_spas12_shotgun[MAX_PLAYERS];
new weaponskill_micro_uzi[MAX_PLAYERS];
new weaponskill_mp5[MAX_PLAYERS];
new weaponskill_ak47[MAX_PLAYERS];
new weaponskill_m4[MAX_PLAYERS];
new weaponskill_sniperrifle[MAX_PLAYERS];
////////////////////////////////////////////////////////////////////////////////

new pohrebnasluzba_lasttime;
new pohrebnasluzba_vehid;
new pohrebnasluzba_hrob;
new bool:pohrebnasluzba_isDoing[MAX_PLAYERS];
new pohrebnsluzba_kopehrob[MAX_PLAYERS];
new PlayerText:ps_td[MAX_PLAYERS][3];
new ps_isPlayerFreezed[MAX_PLAYERS];
new ps_playerTimer[MAX_PLAYERS];
new ps_clickCount[MAX_PLAYERS];
new Float:ps_playerProgress[MAX_PLAYERS];

new togfchat[MAX_PLAYERS];
new tognchat[MAX_PLAYERS];
new Float:snakecamdata[MAX_PLAYERS][7];
new bool:issnakecam[MAX_PLAYERS];
new bool:isdrinking[MAX_PLAYERS];
new leanlimit[MAX_PLAYERS];
new bool:isdrinkinglean[MAX_PLAYERS];
new bool:isdrinkingleanpet[MAX_PLAYERS];

new gpscust[MAX_PLAYERS][30];
new static_do[MAX_PLAYERS][5];
new static_doarea[MAX_PLAYERS][5];

new drug_weedTime[MAX_PLAYERS];
new drug_weedTimeLast[MAX_PLAYERS];
new drug_weedTimer[MAX_PLAYERS];
new drug_weedConsumedTimes[MAX_PLAYERS];
new drug_weedConsumeType[MAX_PLAYERS];

new drug_leanTime[MAX_PLAYERS];
new drug_leanTimeLast[MAX_PLAYERS];
new drug_leanTimer[MAX_PLAYERS];
new drug_leanConsumedTimes[MAX_PLAYERS];
new drug_leanConsumeType[MAX_PLAYERS];
new bool:drug_playerConsumedDrug[MAX_PLAYERS][MAX_DRUGS];

new hotwire_isPlayerFreezed[MAX_PLAYERS];

new PlayerText:PTD_timeleft[MAX_PLAYERS];
new PlayerText:breakin_td[MAX_PLAYERS][3];
new breakin_isPlayerFreezed[MAX_PLAYERS];
new breakin_playerTimer[MAX_PLAYERS];
new breakin_clickCount[MAX_PLAYERS];
new breakin_vehId[MAX_PLAYERS];
new Float:breakin_playerProgress[MAX_PLAYERS];

new Text:TD_achievement[5];
new PlayerText:PTD_achievement[MAX_PLAYERS][2];

new inCCTVid[MAX_PLAYERS];
new greetAnim[MAX_PLAYERS][MAX_PLAYERS];
new greet[MAX_PLAYERS][MAX_PLAYERS];
new bool:hasRezerva[MAX_PLAYERS];
new tstudio_dobject[MAX_PLAYERS];

new bool:isdoingfireext[MAX_PLAYERS];

new kanisterType[MAX_PLAYERS];
new currSkinModel[MAX_PLAYERS];
new currSkinIndex[MAX_PLAYERS];
new tcisloex[MAX_PLAYERS];
new npcid_x;

new bballEnum[MAX_BASKET_BALLS][E_basket];
new PlayerText:PTD_infobox[MAX_PLAYERS][2];
new PlayerText:PTD_cameras[MAX_PLAYERS][3];
new PlayerText:PTD_cents[MAX_PLAYERS];
new bool:bb_playerHasBall[MAX_PLAYERS];
new bool:bb_cantGet[MAX_PLAYERS];
new bb_ballEnumId[MAX_PLAYERS];

new playerLastTickSpace[MAX_PLAYERS];
new playerSpaceCount[MAX_PLAYERS];

new Float:bball_binCoords[][] = {
	{2768.6289, -2019.5415, 15.5075}, // Playa Del Seville #1
	{2794.9612, -2019.5415, 15.5075}, // Playa Del Seville #2
	//{2533.260, -1667.551, 17.1168} // Grove St. Sweet's House
	{2290.757, -1541.105, 28.8278}, // East LA Up #1
	{2290.505, -1514.676, 28.8278}, // East LA Up #2
	{2316.873, -1514.828, 27.2958}, // East LA Down #1
	{2316.960, -1541.115, 27.2958} // East LA Down #2
};

new Float:bball_ballCoords[][] = {
	{2789.89, -2024.50, 13.56}, // Playa Del Seville
	//{2524.389, -1670.224, 15.0464} // Grove St. Sweet's House
	{2316.946, -1527.505, 25.343}, // East Los Angeles Down
	{2290.774, -1528.351, 26.875} // East Los Angeles Up
};

new A_animIndexes[][][] = {
	{"knockout", 0, "BASEBALL", "BAT_HIT_3", float:4.1, 0, 1, 1, 1, 0, 1},

	{"fuckyou", 1, "PED", "FUCKU", float:4.1, 0, 0, 0, 0, 0, 0},
	{"fuckyou", 2, "RIOT", "RIOT_FUKU", float:3.8, 0, 1, 1, 0, 0, 0},

	{"vziat", 1, "BAR", "BARSERVE_BOTTLE", float:4.1, 0, 0, 0, 0, 0, 1},
	{"vziat", 2, "BAR", "BARSERVE_GIVE", float:4.1, 0, 0, 0, 0, 0, 1},
	{"vziat", 3, "BAR", "BARSERVE_GLASS", float:4.1, 0, 0, 0, 0, 0, 1},
	{"vziat", 4, "BD_FIRE", "WASH_UP", float:4.1, 0, 1, 1, 0, 0, 1},
	{"vziat", 5, "CRIB", "CRIB_USE_SWITCH", float:4.1, 0, 0, 0, 0, 0, 1},

	{"vypitex", 1, "BAR", "DNK_STNDF_LOOP", float:4.1, 0, 0, 0, 0, 0, 1},
	{"vypitex", 2, "BAR", "DNK_STNDM_LOOP", float:4.1, 0, 0, 0, 0, 0, 1},

	{"nastavit", 1, "BD_FIRE", "WASH_UP", float:4.1, 1, 1, 1, 0, 0, 1},
	{"nastavit", 2, "COP_AMBIENT", "COPBROWSE_LOOP", float:4.1, 1, 0, 0, 0, 0, 1},

	{"cpr", 0, "MEDIC", "CPR", float:4.1, 0, 0, 0, 0, 0, 0},

	{"rap", 1, "RAPPING", "RAP_A_LOOP", float:4.1, 1, 0, 0, 0, 0, 0},
	{"rap", 2, "RAPPING", "RAP_B_LOOP", float:4.1, 1, 0, 0, 0, 0, 0},
	{"rap", 3, "RAPPING", "RAP_C_LOOP", float:4.1, 1, 0, 0, 0, 0, 0},

	{"fandit", 1, "RIOT", "RIOT_ANGRY_B", float:4.1, 1, 0, 0, 0, 0, 0},
	{"fandit", 2, "RIOT", "RIOT_CHANT", float:4.1, 1, 0, 0, 0, 0, 0},

	{"stojka", 0, "DAM_JUMP", "DAM_DIVE_LOOP", float:4.1, 0, 1, 1, 1, 0, 1},

	{"baseball", 1, "BASEBALL", "BAT_IDLE", float:4.1, 1, 0, 0, 0, 0, 1},
	{"baseball", 2, "CRACK", "BBALBAT_IDLE_01", float:4.1, 1, 0, 0, 0, 0, 1},
	{"baseball", 3, "CRACK", "BBALBAT_IDLE_02", float:4.1, 1, 0, 0, 0, 0, 1},

	{"idle", 0, "FAT", "FATIDLE", float:4.1, 1, 0, 0, 0, 0, 1},

	{"dolava", 0, "MISC", "HIKER_POSE_L", float:4.1, 0, 0, 0, 1, 0, 0},

	{"doprava", 0, "MISC", "HIKER_POSE", float:4.1, 0, 0, 0, 1, 0, 0},

	{"opriet", 1, "BD_FIRE", "M_SMKLEAN_LOOP", float:4.1, 1, 0, 0, 0, 0, 1},
	{"opriet", 2, "GANGS", "LEANIN", float:4.1, 0, 1, 1, 1, 0, 1},

	{"sedet", 1, "ATTRACTORS", "STEPSIT_LOOP", float:4.1, 1, 0, 0, 0, 0, 1},
	{"sedet", 2, "BEACH", "PARKSIT_M_LOOP", float:4.1, 1, 0, 0, 0, 0, 1},
	{"sedet", 3, "HAIRCUTS", "BRB_SIT_LOOP", float:4.1, 1, 0, 0, 0, 0, 1},
	{"sedet", 4, "INT_HOUSE", "LOU_LOOP", float:4.1, 1, 0, 0, 0, 0, 1},
	{"sedet", 5, "INT_OFFICE", "OFF_SIT_IDLE_LOOP", float:4.1, 1, 0, 0, 0, 0, 1},
	{"sedet", 6, "PED", "SEAT_IDLE", float:4.1, 1, 0, 0, 0, 0, 1},

	{"lezat", 1, "BEACH", "BATHER", float:4.1, 1, 1, 1, 0, 0, 1},
	{"lezat", 2, "BEACH", "LAY_BAC_LOOP", float:4.1, 1, 0, 0, 0, 0, 1},
	{"lezat", 3, "BEACH", "SITNWAIT_LOOP_W", float:4.1, 1, 0, 0, 0, 0, 1},
	{"lezat", 4, "BEACH", "PARKSIT_W_LOOP", float:4.1, 1, 0, 0, 0, 0, 1},
	{"lezat", 5, "INT_HOUSE", "BED_LOOP_L", float:4.1, 1, 0, 0, 0, 0, 1},
	{"lezat", 6, "INT_HOUSE", "BED_LOOP_R", float:4.1, 1, 0, 0, 0, 0, 1}
};

static pvehicleid[MAX_PLAYERS]; // array containing players vehicle id (loaded when player enters as driver)
static pmodelid[MAX_PLAYERS]; // array containing players vehicle MODEL id (loaded when player enters as driver)
static ASLDAPLPAS;

new NPCVehicle;
new PlayerText:PTD_phone_MAIN[MAX_PLAYERS][27];
new PlayerText:PTD_phone_MENU[MAX_PLAYERS][5];
new PlayerText:PTD_phone_MESSAGES[MAX_PLAYERS][2];
new PlayerText:PTD_phone_EXTRA[MAX_PLAYERS][3];
new PlayerText:PTD_phone_OPTIONS[MAX_PLAYERS][4];
new PlayerText:houseSwitch[MAX_PLAYERS];

new phone_BackgroundScreen[MAX_PLAYERS]; // Is an integer
new phone_SleepMode[MAX_PLAYERS]; // Is an integer
new phone_SelectedTile[MAX_PLAYERS]; // Is an integer
new phone_Screen[MAX_PLAYERS]; // Is an integer
new bool:phone_IsOut[MAX_PLAYERS]; // Is a bool
enum E_BARRIERS_LISTITEM
{
    E_BARRIERS_LISTITEM_NAME[35],
    E_BARRIERS_LISTITEM_MODEL
};

new const BARRIERS_LIST[][E_BARRIERS_LISTITEM] =
{
	{"Kuzel", 					1238},
    {"Znacka DETOUR", 			1425},
    {"Znacka pracovne vozidla", 3091},
    {"Vodna bariera", 			1554},
    {"Vodna bariera", 			1237},
    {"Bariera", 				1459},
    {"Bariera", 				1424},
    {"Bariera", 				1423},
    {"Bariera so svetlom", 		1427},
    {"Retarder", 				19425},
    {"Rebrik (maly)", 			1428},
    {"Rebrik (velky)", 			1437},
    {"Svetlica", 				18728},
    {"Betonova zatarasa", 		3578},
	{"Retarder", 				19425},
	{"Sipky",                   8843}
};

new lockerSkin_FD_m[] = {
	70,
	221,
	274,
	275,
	276,

	20022,
	20023,
	20024
};

new lockerSkin_FD_f[] = {
	308
};

new lockerSkin_SD_m[] = {
	61,
	71,
	280,
	281,
	282,
	283,
	288,
	300,
	301,
	302,
	310,
	311,

	20007,
	20008,
	20009,
	20010,
	20011,
	20012,

	20084,
	20085,
	20086,

	20090,

	20089, //fbi

	285, //swat
	20087, //seb
	20091,
	
	20092, //academy
	
	20096 // forensic
};

new bool:nologcmd[MAX_PLAYERS];
new lockerSkin_SD_f[] = {
	285,
	306,
	307,
	309,
	20088
};

new hor_fireId[MAX_PLAYERS];

new Vyplata_TYP[MAX_PLAYERS];

new bool:playerWaiting[MAX_PLAYERS];

new const stag_fontArray[][] = {
	"Arial",
	"Comic Sans MS",
	"Copperplate Gothic Bold",
	"Fresh Marker",
	"Impact",
	"Lucida Console",
	"Most Wazted",
	"Sprayerz",
	"Webdings",
	"Wingdings",
	"Whoa!"
};

new graffitiEnum[MAX_SPRAY_TAGS][graffiti_Enum];
new Iterator:Graffiti<MAX_SPRAY_TAGS>;
new Iterator:MapIcons<MAX_MAP_ICONS>;
new Iterator:FireExtinguisher<MAX_FIRE_EXTINGUISHERS>;
new fireExt[MAX_FIRE_EXTINGUISHERS][E_fireexting];

new bool:isPlayerEditingTag[MAX_PLAYERS];
new playerEditingTagId[MAX_PLAYERS];

new bbAdd_NAME[MAX_PLAYERS][64];
new bbTemp_NAME[MAX_PLAYERS][64];

new vysielackaToggle[MAX_PLAYERS];

new bool:snowOn[MAX_PLAYERS char],
        snowObject[MAX_PLAYERS][10],
        updateTimer[MAX_PLAYERS char]
;

new gWeather;
new gActualTime;
new bool:gSnowParticles = false;
new gSnowParticles_X;

new bbTemp_URL[MAX_PLAYERS][524];

new prepis_SPZ[MAX_PLAYERS][30];
new prepis_ID[MAX_PLAYERS];
new prepistmpvar[MAX_PLAYERS];
new upgradeShop_carColor[MAX_VEHICLES][2];
new rybarittimer[MAX_PLAYERS];
new assistCount[MAX_PLAYERS];

enum fdFire_e
{
	Float:fdfire_X, Float:fdfire_Y, Float:fdfire_Z,
	fdfire_Model,

	fdfire_PlacedBy[30],

	Float:fdfire_HP,
	fdfire_Steps,

	fdfire_ObjectID,
	Text3D:fdfire_LabelID,
	fdfire_AreaID
}

new fdFire[MAX_FD_FIRES][fdFire_e];
new bool:fdFire_Hasi[MAX_PLAYERS];
new fdFire_OhenID[MAX_PLAYERS];
new bool:fdFire_Placuje[MAX_PLAYERS];

new adtabula_bizid[MAX_PLAYERS];
new adtabula_model[MAX_PLAYERS];
new adtabula_objectid[MAX_PLAYERS];
new adtabula_editingid[MAX_PLAYERS];
new bool:adtabula_placing[MAX_PLAYERS];

new bool:vysielaniePerm[MAX_PLAYERS];

new PCMechanicArea;
new Float:AnawaltZonePoints[] = {
	-307.0,-262.0,-317.0,-155.0,-324.0,-70.0,-296.0,33.0,-255.0,153.0,-222.0,226.0,-448.0,268.0,-650.0,248.0,-745.0,176.0,-746.0,125.0,
	-701.0,128.0,-658.0,60.0,-667.0,-32.0,-720.0,-87.0,-822.0,-122.0,-900.0,-146.0,-936.0,-218.0,-836.0,-233.0,-307.0,-262.0
};
new AnawaltArea;
new InteriorGangZone;

new payDayCheck[MAX_PLAYERS];
new loginTickCount[MAX_PLAYERS];

new bool:isEntering[MAX_PLAYERS];
new bool:vynimkaCK[MAX_PLAYERS];

new give_Weapon[MAX_PLAYERS][3];
new give_Kevlar[MAX_PLAYERS][2];
new give_LegalFaction[MAX_PLAYERS];
new give_NeLegalFaction[MAX_PLAYERS];

new
	g_Count[MAX_PLAYERS],
	g_Weapon[MAX_PLAYERS];

new weaponWarn[MAX_PLAYERS];

new playerAttachments[MAX_PLAYERS][50][E_AttachmentEnum];
new clothingNew_Index[ MAX_PLAYERS ];
new clothingNew_Model[ MAX_PLAYERS ];
new clothingMenu_Edit[ MAX_PLAYERS ];
new bool:clothingMenu_Editing[ MAX_PLAYERS ];
new clothingColor_Slot[ MAX_PLAYERS ];

new Float:lastPos[MAX_PLAYERS][3];
new lastWorlds[MAX_PLAYERS][2];

new bool:ph_TurnedOff[MAX_PLAYERS];
new bool:ph_IsTalking[MAX_PLAYERS];
new bool:ph_IsDialing[MAX_PLAYERS];
new bool:ph_IsWaiting[MAX_PLAYERS];
new bool:ph_IsCaller[MAX_PLAYERS];
new bool:ph_CanAccept[MAX_PLAYERS];
new ph_Emergency[MAX_PLAYERS];
new ph_timer[MAX_PLAYERS];
new ph_CallWith[MAX_PLAYERS];
new ph_SendMsg_To[MAX_PLAYERS][30];
new temp_messages[MAX_PLAYERS][MAX_ACTIVE_MESSAGES][256];
new temp_contactid[MAX_PLAYERS];

new bool:fstat_CanTankovat[MAX_PLAYERS];
new bool:fstat_Tankuje[MAX_PLAYERS];
new fstat_IDAuta[MAX_PLAYERS];
new fstat_NatankovalLitrov[MAX_PLAYERS];
new fstat_TypPaliva[MAX_PLAYERS];
new Float:fstat_CenaZaLiter[MAX_PLAYERS];
new fstat_BoxID[MAX_PLAYERS];

new Iterator:Houses<MAX_HOUSES>;
new Iterator:Garages<MAX_GARAGES>;
new Iterator:Drops<MAX_DROPS>;
new Iterator:Entrances<MAX_ENTRANCES>;
new Iterator:Businesses<MAX_BUSINESSES>;

new bool:B_isFinallyDead[MAX_PLAYERS];


new ph_PayMode[MAX_PLAYERS];
// 0 - nic
// 1 - kredit
// 2 - vyplata
new ph_Credit[MAX_PLAYERS];

new
	store_weapons[MAX_PLAYERS][5],
	store_kevlar[MAX_PLAYERS][3]
;

new bool:isUsingATM[MAX_PLAYERS];
new bool:isUsingDialog[MAX_PLAYERS];
new atm_PIN[MAX_PLAYERS][5];

new bank_editid[MAX_PLAYERS];

new fine_ispaid[MAX_PLAYERS];
new fine_id[MAX_PLAYERS];

new isOnTollBooth[MAX_PLAYERS];

new boomzal[MAX_PLAYERS];

new friskZiadost[MAX_PLAYERS][MAX_PLAYERS];
new dregerZiadost[MAX_PLAYERS][MAX_PLAYERS];
new bazarsZiadost[MAX_PLAYERS][MAX_PLAYERS];
new bazarbZiadost[MAX_PLAYERS][MAX_PLAYERS];
new bazarvehid[MAX_PLAYERS];
new bazarcenat[MAX_PLAYERS];
new flasaZiadost[MAX_PLAYERS][MAX_PLAYERS];

new bool:bb_Placed[MAX_PLAYERS];
new Float:bb_Pos[MAX_PLAYERS][4];
new bb_Worlds[MAX_PLAYERS][2];
new bb_Url[MAX_PLAYERS][256];
new bb_Object[MAX_PLAYERS];
new bb_Area[MAX_PLAYERS];
new bb_Povolenie[MAX_PLAYERS];

new invfor[MAX_PLAYERS];
new invItem[MAX_PLAYERS][INVENTORY_SIZE];
new invEditItem[MAX_PLAYERS];
new invGive[MAX_PLAYERS][3];

new DMV_vehicleID[MAX_PLAYERS];
new DMV_checkpoint[MAX_PLAYERS];
new DMV_warn[MAX_PLAYERS];
new bool:isDoingDMV[MAX_PLAYERS];
new DMV_time[MAX_PLAYERS][2];
new lastPm[MAX_PLAYERS];
new commandLog[MAX_PLAYERS][MAX_COMMAND_LOG][128];
new posvod[MAX_VEHICLES][MAX_LAST_DRIVER][26];
new tollLog[MAX_TOLL_LOG][128];
new stingerEnum[MAX_STINGERS][stinger_Enum];
new dropEnum[MAX_DROPS][drop_Enum];
new Float:Server_Gravity = 0.008;
new barrierEnum[MAX_BARRIERS][barrier_Enum];
new bloodEnum[MAX_BLOOD][blood_Enum];
new IsWorking[MAX_PLAYERS];
new pocetBiznisov = 0;
new pocetDomov = 0;
new pocetGarazi = 0;
new arrowEnum[MAX_ARROWS][sipkyEnum];
new adTableEnum[MAX_AD_TABLES][adTabula_e];
new menuEnum[MAX_MENUS_EX][menuEnum_e];
new fuelEnum[MAX_FUEL_STATIONS][fuelEnum_e];
new vEnum[MAX_VEHICLES][vehicle_Enum];
new mapIconEnum[MAX_MAP_ICONS][E_mapIcons];
new weedEnum[MAX_WEED][E_weed];
new crateEnum[MAX_CRATES][E_crates];
new atmEnum[MAX_ATM][atm_Enum];
new actorEnum[MAX_ACTORS][actor_Enum];
new spdcamEnum[MAX_SPEED_CAMERAS][speed_Camera_Enum];
new entranceEnum[MAX_ENTRANCES][entrance_Enum];
new streetsignEnum[MAX_STREET_SIGNS][znacka_Enum];
new businessEnum[MAX_BUSINESSES][business_Enum];
new houseEnum[MAX_HOUSES][house_Enum];
new garageEnum[MAX_GARAGES][garage_Enum];
new buyBusiness[MAX_PLAYERS][2];
new sellBusiness[MAX_PLAYERS][2];
new t_ID_Date[MAX_PLAYERS][3];
new opt_WebTd[MAX_PLAYERS];
new opt_vyppasy[MAX_PLAYERS];
new opt_HideMaster[MAX_PLAYERS];
new opt_ShowColor[MAX_PLAYERS];
new topt_ooc[MAX_PLAYERS];
new opt_CentTd[MAX_PLAYERS];
new opt_tachometer[MAX_PLAYERS];
new opt_PM[MAX_PLAYERS];
new opt_Sounds[MAX_PLAYERS];
new opt_TimeTd[MAX_PLAYERS];
new opt_HungerTd[MAX_PLAYERS];
new opt_VitalTd[MAX_PLAYERS];
new opt_ChatAnim[MAX_PLAYERS];

new popis[MAX_PLAYERS][144];
new prizvuk[MAX_PLAYERS][32];

new bloodInventory[MAX_PLAYERS][32];

new bool:hasSeatbelt[MAX_PLAYERS];
new sb_lastVehicle[MAX_PLAYERS];
new sb_lastSeat[MAX_PLAYERS];

new DMV_license[MAX_PLAYERS];

new Text:TD_ziadosti;

new bool:hasDotaz[MAX_PLAYERS];
new dotaz_Time[MAX_PLAYERS];
new dotaz_String[MAX_PLAYERS][128];
new bool:hasConv[MAX_PLAYERS];
new dotaz_Conv[MAX_PLAYERS];

new bool:hasSeenTD[MAX_PLAYERS];
new ex_toggleControllable[MAX_PLAYERS];
new bool:hasSeenTDHN[MAX_PLAYERS];
new bool:hasSeenTDAR[MAX_PLAYERS];
new bool:preventVehAction[MAX_PLAYERS];
new preventVehActionT[MAX_PLAYERS];
new bool:spawnCheck[MAX_PLAYERS];
new bool:isVehLocked[MAX_VEHICLES] = false;
new blinklights[MAX_VEHICLES];
new bool:wasEnteringVehicle[MAX_PLAYERS];
new wasEnteringVehicleID[MAX_PLAYERS];
new wasEnteringVehiclePass[MAX_PLAYERS];
new wasEnteringTimer[MAX_PLAYERS];
new lastFacMemb[MAX_PLAYERS];
new bool:cantManipulate[MAX_PLAYERS];

new PlayerText:pdRadar[MAX_PLAYERS][11];
new PlayerText:swoopTaxameter[MAX_PLAYERS][11];
new PlayerText:TD_vitals2[MAX_PLAYERS][6];
new PlayerText:TD_vyplaty[MAX_PLAYERS][1];

new PlayerText:vreceTD[MAX_PLAYERS];

new PlayerText:TD_autoskola0[MAX_PLAYERS];
new PlayerText:TD_autoskola1[MAX_PLAYERS];
new PlayerText:TD_autoskola2[MAX_PLAYERS];

new PlayerText:TD_carShop0[MAX_PLAYERS];
new PlayerText:TD_carShop1[MAX_PLAYERS];
new PlayerText:TD_carShop2[MAX_PLAYERS];
new PlayerText:TD_carShop3[MAX_PLAYERS];
new PlayerText:TD_carShop4[MAX_PLAYERS];
new PlayerText:TD_carShop5[MAX_PLAYERS];
new PlayerText:TD_carShop6[MAX_PLAYERS];
new PlayerText:TD_carShop7[MAX_PLAYERS];
new PlayerText:TD_carShop8[MAX_PLAYERS];
new PlayerText:TD_carShop9[MAX_PLAYERS];

new bool:pVrece[MAX_PLAYERS];
new bool:pBlindfold[MAX_PLAYERS];
new bool:pLano[MAX_PLAYERS];
new bool:isStartingEngine[MAX_PLAYERS];
new Float:loginPos[MAX_PLAYERS][3];
new loginWP[MAX_PLAYERS];
new bool:isInJail[MAX_PLAYERS];
new jail_Time[MAX_PLAYERS][2];
new jail_Admin[MAX_PLAYERS][30];
new jail_Reason[MAX_PLAYERS][128];
new stats_Kick[MAX_PLAYERS];
new stats_Ban[MAX_PLAYERS];
new stats_Jail[MAX_PLAYERS];
new watchCmds[MAX_PLAYERS];

new Inv[MAX_PLAYERS][2];

new RenameTicket[MAX_PLAYERS];
new SVO[MAX_PLAYERS];
new MessagesSent[MAX_PLAYERS];
new MAPlayTime[MAX_PLAYERS];
new MAPlayTimeS[MAX_PLAYERS];

new skinStorage[MAX_PLAYERS][5];

new bool:hasBeanBag[MAX_PLAYERS];
new bool:hasTaser[MAX_PLAYERS];

new blockPm[MAX_PLAYERS][MAX_PLAYERS];

new bool:isAntiVhpUsed[MAX_PLAYERS];
new bool:isAntiHPUsed[MAX_PLAYERS];
new bool:isAntiARUsed[MAX_PLAYERS];
new PlayerEnterTime[MAX_PLAYERS];

new PlayerText:TD_skinShop0[MAX_PLAYERS];
new PlayerText:TD_skinShop1[MAX_PLAYERS];
new PlayerText:TD_skinShop2[MAX_PLAYERS];
new PlayerText:TD_skinShop3[MAX_PLAYERS];
new PlayerText:TD_skinShop4[MAX_PLAYERS];
new PlayerText:TD_skinShop5[MAX_PLAYERS];
new PlayerText:TD_skinShop6[MAX_PLAYERS];

new Float:spec_Pos[MAX_PLAYERS][3];
new spec_Player[MAX_PLAYERS];
new spec_World[MAX_PLAYERS][2];
new spec_Vehicle[MAX_PLAYERS][2];
new Float:spec_Vitals[MAX_PLAYERS][3];
new t_ID_Place[MAX_PLAYERS][32];
new t_ID_Settlement[MAX_PLAYERS][64];
new I_gm_localOOC;
new bool:B_isPlayerInDM[MAX_PLAYERS];
new bool:rybari[MAX_PLAYERS];
new bool:IsEditingSpike[MAX_PLAYERS];
new bool:IsEditingSpeedCam[MAX_PLAYERS];
new bool:IsEditingAdresa[MAX_PLAYERS];
new editingpaskaid[MAX_PLAYERS char];
new znackaEdit[MAX_PLAYERS][128];
new bool:IsEditingATM[MAX_PLAYERS];
new editSpeedCamID[MAX_PLAYERS];
new bool:IsEditingBarrier[MAX_PLAYERS];
new SpikeModel[MAX_PLAYERS];
new Float:F_DM_Pos[MAX_PLAYERS][4];
new I_DM_Skin[MAX_PLAYERS];
new I_playerInventory[MAX_PLAYERS][INVENTORY_SIZE];
new vehicleInventory[MAX_VEHICLES][VEH_INVENTORY_SIZE];
new vehicleInventory_Weapons[MAX_VEHICLES][MAX_VEHICLE_WEAPONS * 2];
new bool:B_isLegWounded[MAX_PLAYERS];
new bool:B_playerAllowLocal[MAX_PLAYERS];
new bool:B_playerTogGold[MAX_PLAYERS];
new bool:B_playerTogDonChat[MAX_PLAYERS];
new bool:B_playerNos[MAX_PLAYERS];
new bool:B_playerLights[MAX_PLAYERS];
new bool:B_playerEngine[MAX_PLAYERS];
new bool:B_playerBlockLocal[MAX_PLAYERS];
new bool:B_playerAllowGlobal[MAX_PLAYERS];
new bool:B_playerBlockGlobal[MAX_PLAYERS];
new I_gm_globalOOC;
new I_gm_playerRecord;

new Register_Money;
new Register_Golds;

new pFadePlace[MAX_PLAYERS];
new Text:textdraw_LoginTD[3];
new Text:td_timeTD1;
new Text:td_timeTD2;
new PlayerText:td_webTD[MAX_PLAYERS];
new Text:blackTD;
//static MySQL:MYSQL;
new login_Pokus[MAX_PLAYERS];
new PlayerText:td_loginPlayer[MAX_PLAYERS][18];
new PlayerText:enterInfoTD[MAX_PLAYERS];
new bool:b_playerSelectChar[MAX_PLAYERS];
new bool:b_playerIsLogged[MAX_PLAYERS];
new bool:b_playerSpawnedF[MAX_PLAYERS];
new S_masterAccount[MAX_PLAYERS][48];
new masterId[MAX_PLAYERS];
new regIP[MAX_PLAYERS][20];
new lastIP[MAX_PLAYERS][20];
new lastChangelog[MAX_PLAYERS][64];
new charSlot[MAX_PLAYERS];
new ppass[MAX_PLAYERS][256];

new I_playerAdminLevel[MAX_PLAYERS];
new Float:F_pHunger[MAX_PLAYERS];
new I_pFightStyle[MAX_PLAYERS];
new I_pSkin[MAX_PLAYERS];
new I_pSkin_Civil[MAX_PLAYERS];
new I_pSkin_Work[MAX_PLAYERS];
new bool:B_playerAdminDuty[MAX_PLAYERS];
new bool:B_playerAdminLogged[MAX_PLAYERS];
new bool:B_playerAdminVanish[MAX_PLAYERS];
new bool:B_playerAdminSPOT[MAX_PLAYERS];
new PlayerBar:hungerTD[MAX_PLAYERS];
new bool:B_dmg_IsInDS[MAX_PLAYERS];
new Text3D:T3D_dmg_Label[MAX_PLAYERS];
new I_dmg_Damages[MAX_PLAYERS][80][3];
new bool:isBleeding[MAX_PLAYERS];
new bool:unStoppableAnim[MAX_PLAYERS];
new unStopLib[MAX_PLAYERS][32];
new unStopName[MAX_PLAYERS][32];
new T_timer_deathTimer[MAX_PLAYERS] = -1;
new T_timer_hungerTimer[MAX_PLAYERS] = -1;
new bool:B_allowDeath[MAX_PLAYERS];
new bool:B_playerHasMask[MAX_PLAYERS];
new bool:B_informDeath[MAX_PLAYERS];
new I_playerMaskID[MAX_PLAYERS];
new Text3D:T3D_bubbleChat[MAX_PLAYERS];
new Text3D:T3D_nameTag[MAX_PLAYERS];
new Text3D:T3D_descTag[MAX_PLAYERS];
new T_timer_bubbleChat[MAX_PLAYERS] = -1;
new bool:g_B_canHavePayDay[MAX_PLAYERS];
new bool:g_B_canPickUpPayDay[MAX_PLAYERS];
new g_S_Registered[MAX_PLAYERS][64];
new g_I_playerMoney[MAX_PLAYERS];
new g_I_tempInt[MAX_PLAYERS];
new g_I_donatorLevel[MAX_PLAYERS] = 0;
new g_I_mince[MAX_PLAYERS];
new g_I_donatorExpire[MAX_PLAYERS];
new g_I_paydayTime[MAX_PLAYERS];
new g_I_playerGender[MAX_PLAYERS];

new g_I_IlPlayerFaction[MAX_PLAYERS];
new g_I_IlPlayerFactionRank[MAX_PLAYERS];

new g_I_VypovedUnix[MAX_PLAYERS];
new g_I_playerCheckpoint[MAX_PLAYERS];
new g_I_playerFaction[MAX_PLAYERS];
new g_I_playerFactionRank[MAX_PLAYERS];
new g_I_playerFactionBadge[MAX_PLAYERS];
new g_I_roleplayLevel[MAX_PLAYERS];
new g_I_editFaction[MAX_PLAYERS];
new g_I_listItem[MAX_PLAYERS];
new g_S_playerFactionTitle[MAX_PLAYERS][32];
new factEnum[MAX_FACTIONS][fact_Enum];
new i_factEnum[MAX_ILLEGAL_FACTIONS][ifact_Enum];
new g_stats_maxRoleplayLevel = 1;
new g_stats_models = 0;
new g_stats_maxRoleplayLevelN[24];
new g_stats_playTime;
new g_stats_playTimeN[24];
new bool:canStopAnimation[MAX_PLAYERS];
new I_playerSpecAct[MAX_PLAYERS];
new I_timer_EnterInfo[MAX_PLAYERS] = -1;
new I_timer_EnterInfoP[MAX_PLAYERS] = 0;
new bool:cantUseY[MAX_PLAYERS] = false;
new g_I_playTimeHour[MAX_PLAYERS];
new g_I_playTimeMin[MAX_PLAYERS];
new g_I_playTimeSecond[MAX_PLAYERS];
new g_I_XP[MAX_PLAYERS];
new g_I_Fightstyle[MAX_PLAYERS];
new g_I_Vyplata[MAX_PLAYERS];
new g_I_VyplataExpire[MAX_PLAYERS];

new ID_ReleaseDate[MAX_PLAYERS][12];
new ID_DateOfBirth[MAX_PLAYERS][12];
new ID_PlaceOfBirth[MAX_PLAYERS][32];
new ID_Settlement[MAX_PLAYERS][64];
new ID_CardID[MAX_PLAYERS];
new bool:ID_Showed[MAX_PLAYERS];

new Text:TD_mask;
new PlayerText:TD_spot[MAX_PLAYERS];

new PlayerText:TD_Vitals0[MAX_PLAYERS];
new PlayerText:TD_Vitals1[MAX_PLAYERS];
new PlayerText:TD_Vitals2[MAX_PLAYERS];

new PlayerText:ID_Textdraw0[MAX_PLAYERS];
new PlayerText:ID_Textdraw1[MAX_PLAYERS];
new PlayerText:ID_Textdraw2[MAX_PLAYERS];
new PlayerText:ID_Textdraw3[MAX_PLAYERS];
new PlayerText:ID_Textdraw4[MAX_PLAYERS];
new PlayerText:ID_Textdraw5[MAX_PLAYERS];
new PlayerText:ID_Textdraw6[MAX_PLAYERS];
new PlayerText:ID_Textdraw7[MAX_PLAYERS];
new PlayerText:ID_Textdraw8[MAX_PLAYERS];
new PlayerText:ID_Textdraw9[MAX_PLAYERS];
new PlayerText:ID_Textdraw10[MAX_PLAYERS];
new PlayerText:ID_Textdraw11[MAX_PLAYERS];
new PlayerText:ID_Textdraw12[MAX_PLAYERS];
new PlayerText:ID_Textdraw13[MAX_PLAYERS];
new PlayerText:ID_Textdraw14[MAX_PLAYERS];
new PlayerText:ID_Textdraw15[MAX_PLAYERS];
new PlayerText:ID_Textdraw16[MAX_PLAYERS];
new PlayerText:ID_Textdraw17[MAX_PLAYERS];
new PlayerText:ID_Textdraw18[MAX_PLAYERS];
new PlayerText:ID_Textdraw19[MAX_PLAYERS];
new PlayerText:ID_Textdraw20[MAX_PLAYERS];
new PlayerText:ID_Textdraw21[MAX_PLAYERS];

new PlayerText:TACHOMETER_TD[MAX_PLAYERS][9];
#include <internal\cctv>
new itemname[][] = {
	"Peniaze",
	"Maska",
	"Boombox",
	"Obèiansky preukaz",
	"Plechovka Pepsi",
	"Plechovka Coca Coly",
	"Kit Kat Èokoláda",
	"Èipsy Pringles",
	"Ryby",
	"Rybárske povolanie",
	"Vodièák A",
	"Vodièák B",
	"Vodiæák C",
	"Vodièák T",
	"Páèidlo",
	"Lano",
	"Vrece",
	"Kocka",
	"Krvný vak",
	"Putá",
	"Kreditná karta",
	"Marihuana",
	"Semienko marihuany",
	"Cigarety",
	"Zapalovaè",
	"Telefón",
	"SIM karta",
	"Náboje",
	"Bandá",
	"Zbrojný preukaz",
	"Lístok do lotérie",
	"Autobatéria",
	"Vysielaèka",
	"Motorový olej",
	"Pizza",
	"Kanister",
	"Rezerva",
	"Sadenica marihuany Phatt Fruity",
	"Sadenica marihuany Amnesia Haze",
	"Sadenica marihuany Sour Diesel",
	"Hnojivo",
	"Sprite",
	"F¾aa leanu",
	"Plastový pohárik",
	"Actavis Promethazine",
	"Skateboard",
	"Katalóg",
	"Letecký preukaz",
	"Lodný preukaz",
	"Sadenice",
	"Dubové drevo",
	"Brezové drevo",
	"Smrekové drevo"
};

new RandomMessage[][] = {
	"Urèite navtív ná web {ZVYRAZNI}www.countyliferoleplay.eu{DEFAULT}, nájde tam plno uitoèných informácií!",
	"Ak sa ti hra na {ZVYRAZNI}County Life: Roleplay{DEFAULT} páèi, môes si na UCP zakúpi Donatora!",
	"Vidí niekoho ako poruuje pravidlá? Vyfo ho a podaj {ZVYRAZNI}fórum report{DEFAULT} alebo poui príkaz {ZVYRAZNI}/report{DEFAULT}!",
	"Obmedzuj pouívanie {ZVYRAZNI}Out Of Character {DEFAULT}chatu, za jeho nadmerné pouívanie môe by potrestaný!",
	"Buï k ostatným ústretový, mono budú aj oni k {ZVYRAZNI}tebe{DEFAULT}!",
	"Ak si nevie rady, poui príkaz {ZVYRAZNI}/assistance{DEFAULT}!",
	"Laguje sa ti hra? Nastav si maximálny poèet streamovaných objektov príkazom {ZVYRAZNI}/setvisibleobjects{DEFAULT}!",
	"Preèo si nenastavi popis èi prízvuk charakteru? {ZVYRAZNI}/nastavenie{DEFAULT}!",
	"Zaparkuj svoje auto a predíï krádei príkazom {ZVYRAZNI}/veh park {DEFAULT}avak, ak nemá parkovacie miesto kúp ho príkazom {ZVYRAZNI}/veh buypark {DEFAULT}za 500$!",
	"Veci z inventára vie inému hráèovi poda tak, e otvorí inventár príkazom {ZVYRAZNI}/inv{DEFAULT}, klikne na item a podá ho!",
	"Zbrane èi vestu vie hráèovi poda príkazmi {ZVYRAZNI}/givewep {DEFAULT}a {ZVYRAZNI}/givevest{DEFAULT}!",
	"Ak chce s niekým komunikova, iadne {ZVYRAZNI}/pm{DEFAULT}, ale {ZVYRAZNI}/ph {DEFAULT}alebo {ZVYRAZNI}/vysielacka{DEFAULT}!",
	"Vysielaèku môe kúpi v ktoromko¾vek obchode s {ZVYRAZNI}elektronikou{DEFAULT}!",
	"Môe si zapnú automatické odopínanie pásov v {ZVYRAZNI}/nastavenie{DEFAULT}!"
};

new randomDoc[][] = {
	"Katy Harbuck",
	"Paulette Locascio",
	"Mana Freitag",
	"Verdell Czajkowski",
	"Louvenia Dewees",
	"Christi Beverly",
	"Angila Fosdick",
	"Hulda Lodge",
	"Tinisha Worman",
	"Lauretta Durbin",
	"Sylvia Picou",
	"Rick Praylow",
	"Erinn Perea",
	"Nicki Pelzer",
	"Zada Ricketts",
	"Isis Umana",
	"Wendy Wensel",
	"Meda Jefferys",
	"Gussie Verhoeven",
	"Johnna Lechner",
	"Nola Brackman",
	"Tameka Wolter",
	"Jane Cunniff",
	"Norah Burchfield",
	"Mariam Hebel",
	"Dolores Speir",
	"Leda Trembath",
	"Elliot Kirwan",
	"Ona Tesch",
	"Shyla Yingling",
	"Marks Man",
	"Kenneth Bolin",
	"Teodora Funderburk",
	"Terrilyn Chilcott",
	"Ta Crimi",
	"Cammie Meek",
	"Marquitta Laughter",
	"Laquanda Deakins",
	"Coral Lynde",
	"Lashandra Mcnulty",
	"Lyn Kirst",
	"Laine Reiman",
	"Hassie Mattice",
	"Fredia Mcgriff",
	"Deann Mcadoo",
	"Raymond Litten",
	"Ezequiel Morales",
	"Martin Penniman",
	"Vincenza Hodak",
	"Ilona Hopps",
	"Joann Dunmire",
	"Latrice Munger",
	"Sherrie Bruck",
	"Casandra Granato",
	"Alfredia Gioia",
	"Carol Cotta",
	"Augustus Tengan",
	"Clemencia Yardley",
	"Raymon Glazier",
	"Tawny Weinman",
	"Kendall Middleton",
	"Arnulfo Doolittle",
	"Marsha Ruble",
	"Ozell Tolliver",
	"Nick Beller",
	"Charlott Bible",
	"Ray Galban",
	"Dawna Whitesel",
	"Argelia Master",
	"Corrine Milligan",
	"Tony Bruss",
	"Ellie Coombes",
	"Dwain Farrington",
	"Boyd Vicente",
	"Miss Matsunaga",
	"Eusebio Frahm",
	"Sherly Tackett",
	"Ardella Seckman",
	"Janeen Rodd",
	"Forrest Toribio",
	"Robin Stivers",
	"Marta Alberico",
	"Zackary Walberg",
	"Deanna Knox",
	"Adella Kremer",
	"Kyoko Klein",
	"Phil Dosch",
	"Reatha Tutt",
	"Blondell Farwell",
	"Erna Flake",
	"Selma Squillace",
	"Dortha Hardnett",
	"Nydia Sayegh",
	"Cindy Solie",
	"Lanette Chillemi",
	"Eva Peller",
	"Reena Ruddy",
	"Donald Burrier",
	"Kirstie Decaro",
	"Sherrie Lemire",
	"Dena Foote",
	"Araceli Truett",
	"Leigha Shavers",
	"Lili Oubre",
	"Joy Locker",
	"Yoshie Pavone",
	"Cathryn Bowser",
	"Brittaney Gawronski",
	"Hedy Warrington",
	"Ollie Duhart",
	"Amberly Aguilar",
	"Herma Nussbaum",
	"Scottie Vanallen",
	"Adena Kulig",
	"Chrystal Marmolejo",
	"Pat Laird",
	"Lyda Joaquin",
	"Zena Botsford",
	"Isidro Lenton",
	"Fay Thurston",
	"Fern Fondren",
	"Lilla Hajek",
	"Jennefer Hensley",
	"Onie Bratcher",
	"Tajuana Oullette",
	"Kay Kuchta",
	"Chrissy Blakney",
	"Nolan Sobers",
	"Florentino Parrott",
	"Caryn Stidham",
	"Genaro Eichorn",
	"Jeana Zygmont",
	"Ethyl Lapham",
	"Kitty Kibler",
	"Keva Fretz",
	"Donnetta Kramp",
	"Cathleen Prouty",
	"Anneliese Wacker",
	"Hyun Going",
	"Kathi Heidelberg",
	"Garfield Frank",
	"Honey Rickards",
	"Jeannine Brouillette",
	"Vicenta Certain",
	"Tatyana Durrant",
	"Joanie Grose",
	"Vertie Bowes",
	"Sherwood Burnes",
	"Sirena Alldredge",
	"Amal Marriott",
	"Willodean Hertzler",
	"Nedra Kridler",
	"Aron Nierman",
	"Chang Shepler",
	"Cynthia Pleiman",
	"Zulma Rezac",
	"Geoffrey Devivo",
	"Julietta Richardson",
	"Nannette Stoner",
	"Kiyoko Aragon",
	"Shani Callier",
	"Adolfo Maloney",
	"Barrett Lile",
	"Miles Mcglade",
	"Veola Jonas",
	"Cindy Schlosser",
	"Kelsey Glatz",
	"Shawnta Rath",
	"Glady Dorner",
	"Etsuko Vu",
	"Marty Jessee",
	"Mckinley Moitoso",
	"Pennie Poynter",
	"Evia Linke",
	"Fritz Runnels",
	"Emogene Clyburn",
	"Araceli Lockard",
	"Ramonita Cyrus",
	"Amie Rawlings",
	"Krystyna Hixson",
	"Herman Brase",
	"Matej Belej",
	"Vladimir Danko",
	"Michal Gyuras",
	"Michael Joke"
};

new buyableFemaleSkins[] = {
	9,
	10,
	11,
	12,
	13,
	31,
	38,
	39,
	40,
	41,
	53,
	54,
	55,
	63,
	64,
	65,
	69,
	75,
	76,
	77,
	85,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	129,
	131,
	138,
	139,
	140,
	141,
	145,
	148,
	150,
	151,
	152,
	157,
	169,
	172,
	178,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	201,
	205,
	207,
	211,
	214,
	215,
	216,
	218,
	219,
	224,
	225,
	226,
	231,
	232,
	233,
	237,
	238,
	243,
	244,
	245,
	246,
	251,
	256,
	257,
	263,
	298,

	20013,20015,20016,20017,
	20046,
	20097,
	20119,
	20174,20175,20177,20178,20179,
	20180,20181,20182,20183,20184,20185
};

new buyableMaleSkins[] = {
   	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	14,
	15,
	17,
	18,
	19,
	20,
	21,
	22,
	23,
	24,
	25,
	26,
	28,
	29,
	30,
	32,
	33,
	34,
	35,
	36,
	37,
	42,
	43,
	44,
	45,
	46,
	47,
	48,
	49,
	50,
	51,
	52,
	57,
	58,
	59,
	60,
	61,
	62,
	66,
	67,
	68,
	70,
	72,
	73,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	86,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	132,
	133,
	134,
	135,
	136,
	137,
	142,
	143,
	144,
	146,
	147,
	149,
	154,
	156,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	170,
	171,
	173,
	174,
	175,
	176,
	177,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	200,
	202,
	203,
	204,
	206,
	209,
	210,
	212,
	213,
	217,
	220,
	221,
	222,
	223,
	227,
	228,
	229,
	230,
	234,
	235,
	236,
	239,
	240,
	241,
	242,
	247,
	248,
	249,
	250,
	253,
	254,
	255,
	258,
	259,
	261,
	262,
	264,
	268,
	269,
	270,
	271,
	272,
	273,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	299,
	303,
	304,
	305,

	20001,20002,20003,20004,20005,20006,
	20014,20018,20019,
	20020,
	20033,20034,20035,20036,20037,20038,20039,
	20040,20041,20042,20043,20044,20045,20047,20048,20049,
	20050,20051,20052,20053,20054,20055,20056,20057,20058,20059,
	20060,20061,20062,20063,20064,20065,20066,20067,20068,20069,
	20070,20071,20072,20073,20074,20075,20076,20077,20078,20079,
	20080,20081,20082,20083,
	20093,20094,20095,20096,20098,20099,
	20100,20101,20102,20103,20104,20105,20106,20107,20108,20109,
	20110,20111,20112,20113,20114,20115,20116,20118,
	
	20120,20121,20122,20123,20124,20125,20126,20127,20128,20129,
    20130,20131,20132,20133,20134,20135,20136,20137,20138,20139,
    20140,20141,20142,20143,20144,20145,20146,20147,20148,20149,
    20150,20151,20152,20153,20154,20155,20156,20157,20158,20159,
    20160,20161,20162,20163,20164,20165,20166,20167,20168,20169,
    20170,20171,20172,20173,20176,
    20186,20187,20188,
    20196,20197
};

new Float:DMV_pos_1[][] = {
	{1403.132324, 246.222229, 19.220354, 40.0},
	{1399.867431, 279.297576, 19.149091, 40.0},
	{1354.835449, 299.619598, 19.146049, 40.0},
	{1311.860473, 305.894287, 19.148075, 40.0},
	{1283.421508, 239.921340, 19.148855, 40.0},
	{1248.898559, 193.175964, 19.146301, 40.0},
	{1225.890014, 222.923995, 19.146326, 40.0},
	{1242.665893, 260.441101, 19.146118, 40.0},
	{1224.925781, 280.295104, 19.143989, 40.0},
	{1214.576293, 320.504211, 19.146118, 40.0},
	{1224.742309, 343.840332, 19.149148, 40.0},
	{1246.353271, 341.908081, 19.145881, 40.0},
	{1277.562744, 340.493286, 19.150236, 40.0},
	{1303.976684, 370.726043, 19.150234, 40.0},
	{1344.406738, 368.430847, 19.153638, 40.0},
	{1377.214965, 439.232513, 19.606651, 60.0},
	{1433.973144, 415.055236, 19.624647, 60.0},
	{1610.626586, 379.511077, 19.622606, 60.0},
	{1726.244140, 383.026794, 19.523473, 60.0},
	{1959.981689, 349.992431, 22.269142, 60.0},
	{2035.931152, 288.272735, 25.717279, 60.0},
	{2188.158447, 228.296646, 14.313297, 60.0},
	{2316.103759, 211.270477, 25.410722, 40.0},
	{2341.512939, 199.183364, 26.079282, 40.0},
	{2341.032470, 103.009056, 26.078449, 40.0},
	{2341.241699, 64.991577, 26.075634, 40.0},
	{2341.687500, -16.025217, 26.082834, 40.0},
	{2304.939208, -25.646579, 26.079753, 40.0},
	{2270.300781, -25.817445, 26.076059, 40.0},
	{2221.365722, -82.111267, 26.075685, 40.0},
	{2306.485595, -100.396415, 26.077503, 40.0},
	{2346.755859, -49.740287, 26.076194, 40.0},
	{2330.190185, -25.962959, 26.077640, 40.0},
	{2296.332519, -14.817747, 26.076690, 40.0},
	{2283.323486, 44.055290, 26.083532, 40.0},
	{2210.085205, 44.323448, 26.077598, 40.0},
	{2169.199951, 44.117897, 26.078990, 60.0},
	{2091.270996, 43.949748, 26.075330, 60.0},
	{1940.273925, 44.120723, 33.289554, 60.0},
	{1755.816162, 104.273155, 33.141590, 60.0},
	{1516.178100, 139.763748, 31.076625, 60.0},
	{1426.341186, 190.892272, 20.691030, 40.0},
	{1387.367065, 217.724121, 19.148109, 40.0},
	{1401.085327, 241.986495, 19.220861, 40.0},
	{0.0, 0.0, 0.0, 40.0}
};

new Float:DMV_pos_2[][] = {
	{1403.132324, 246.222229, 19.220354, 40.0},
	{1399.867431, 279.297576, 19.149091, 40.0},
	{1354.835449, 299.619598, 19.146049, 40.0},
	{1311.860473, 305.894287, 19.148075, 40.0},
	{1283.421508, 239.921340, 19.148855, 40.0},
	{1248.898559, 193.175964, 19.146301, 40.0},
	{1225.890014, 222.923995, 19.146326, 40.0},
	{1242.665893, 260.441101, 19.146118, 40.0},
	{1224.925781, 280.295104, 19.143989, 40.0},
	{1214.576293, 320.504211, 19.146118, 40.0},
	{1224.742309, 343.840332, 19.149148, 40.0},
	{1246.353271, 341.908081, 19.145881, 40.0},
	{1277.562744, 340.493286, 19.150236, 40.0},
	{1303.976684, 370.726043, 19.150234, 40.0},
	{1344.406738, 368.430847, 19.153638, 40.0},
	{1377.214965, 439.232513, 19.606651, 60.0},
	{1433.973144, 415.055236, 19.624647, 60.0},
	{1610.626586, 379.511077, 19.622606, 60.0},
	{1726.244140, 383.026794, 19.523473, 60.0},
	{1959.981689, 349.992431, 22.269142, 60.0},
	{2035.931152, 288.272735, 25.717279, 60.0},
	{2188.158447, 228.296646, 14.313297, 60.0},
	{2316.103759, 211.270477, 25.410722, 40.0},
	{2341.512939, 199.183364, 26.079282, 40.0},
	{2341.032470, 103.009056, 26.078449, 40.0},
	{2341.241699, 64.991577, 26.075634, 40.0},
	{2341.687500, -16.025217, 26.082834, 40.0},
	{2304.939208, -25.646579, 26.079753, 40.0},
	{2270.300781, -25.817445, 26.076059, 40.0},
	{2221.365722, -82.111267, 26.075685, 40.0},
	{2306.485595, -100.396415, 26.077503, 40.0},
	{2346.755859, -49.740287, 26.076194, 40.0},
	{2330.190185, -25.962959, 26.077640, 40.0},
	{2296.332519, -14.817747, 26.076690, 40.0},
	{2283.323486, 44.055290, 26.083532, 40.0},
	{2210.085205, 44.323448, 26.077598, 40.0},
	{2169.199951, 44.117897, 26.078990, 60.0},
	{2091.270996, 43.949748, 26.075330, 60.0},
	{1940.273925, 44.120723, 33.289554, 60.0},
	{1755.816162, 104.273155, 33.141590, 60.0},
	{1516.178100, 139.763748, 31.076625, 60.0},
	{1426.341186, 190.892272, 20.691030, 40.0},
	{1387.367065, 217.724121, 19.148109, 40.0},
	{1401.085327, 241.986495, 19.220861, 40.0},
	{0.0, 0.0, 0.0, 40.0}
};

new A_gpsLocation[MAX_GPS_DESTS][4][128];
new bool:gps_Loaded[MAX_PLAYERS];
new bool:gps_TimerOn[MAX_PLAYERS];
new bool:gps_On[MAX_PLAYERS];
new PlayerText:gps_TD0[MAX_PLAYERS];
new PlayerText:gps_TD1[MAX_PLAYERS];
new PlayerText:gps_TD2[MAX_PLAYERS];

new tollBooths_object[12];
new tollBooths_area[12];
new tollBooths_areaex[12];
new tollBooths_price[12];
new tollBooths_lock[12];
new tollBooths_timer[12];
new tollBooths_block[12];
new tollBooths_blockAll = 0;
new tollBooths_infoMod = 0;

new tollBooths_name[][] = {
	"NONE",
	"NE-HB",
	"HB-NE",
	"NE-BB",
	"BB-NE"
};


new tollBooths[][] = {
	// Block, Cena za vstup, X, Y, Z, RX, RY, RZ, RY2, ROT (1-R,2-L)
	{ 0, 0, float:0.0, float:0.0, float:0.0, float:0.0, float:0.0, float:0.0, float:0.0, 0}, // NONE
	/*{ 0, 30, float:610.575622, float:344.386718, float:18.709695, float:0.000000, float:270.000000, float:34.900032, float:-12.200002, float:605.455, float:345.775, float:18.929, float:612.062, float:335.999, float:19.135}, // NE - HB
	{ 0, 15, float:611.160644, float:342.831878, float:18.709695, float:0.000000, float:270.000000, float:214.900024, float:-10.600029, float:616.442, float:341.603, float:19.005, float:609.643, float:350.972, float:18.929}, // HB - NE
	{ 0, 100, float:1730.303222, float:526.587890, float:27.632730, float:0.000000, float:270.000000, float:160.000000, float:-35.699981, float:1734.739, float:529.294, float:27.657, float:1731.136, float:518.203, float:28.321}, // LV - MG
	{ 0, 100, float:1748.716918, float:521.825195, float:27.632730, float:0.000000, float:90.000000, float:160.000000, float:35.299957, float:1743.316, float:517.513, float:28.129, float:1747.780, float:529.576, float:27.406}, // MG - LV
	{ 0, 30, float:-197.381317, float:255.162826, float:11.948126, float:0.000000, float:90.000000, float:164.699996, float:14.699995, float:-199.291, float:262.253, float:12.078, float:-201.900, float:251.982, float:12.078}, // NE - BB
	{ 0, 15, float:-196.514556, float:259.808776, float:11.948126, float:0.000000, float:90.000000, float:-15.300002, float:11.900014, float:-194.279, float:253.463, float:12.078, float:-191.741, float:264.489, float:12.078} // BB - NE*/

	{
		0, 15,
		float:435.259094, float:594.717773, float:18.911968, float:360.0, float:90.0, float:575.0, float:380.0,
		float:429.234, float:596.719, float:18.921,
		float:435.209, float:588.074, float:18.921
	},

	{
		0, 15,
		float:432.069396, float:598.575744, float:18.911968, float:360.0, float:90.0, float:395.0, float:380.0,
		float:438.183, float:596.574, float:18.921,
		float:432.566, float:604.629, float:18.921
	},
	
	{
		0, 15,
		float:-139.246810, float:477.254089, float:12.078131, float:360.0, float:90.0, float:345.0, float:380.0,
		float:-136.730, float:471.724, float:12.078,
		float:-134.355, float:481.264, float:12.01
	},

	{
		0, 15,
		float:-140.095642, float:472.501770, float:12.078131, float:360.0, float:270.0, float:345.0, float:700.0,
		float:-142.561, float:478.176, float:12.078,
		float:-144.84, float:470.321, float:12.078
	}
};

new openableGates[][] = {
	/*
		Object, cX, cY, cZ, cRX, cRY, cRZ, oX, oY, oZ, oRX, oRY, oRZ, VW, Interior, FactionType
	*/

	// PDHQ závora

	// Airport zavory
	{
	    969,
	    float:1961.564819, float:-2189.821289, float:12.546875, float:0.000000, float:0.000000, float:180.000000,
		float:1544.700439, float:-1630.917724, float:13.091864, float:0.000000, float:89.100013, float:90.000000,
		-1, 0,
		-1,
		float:0.2
	},

	{
	    969,
	    float:1956.503540, float:-2189.821289, float:12.546875, float:0.000000, float:0.000000, float:180.000000,
	    float:1966.755126, float:-2189.821289, float:12.546875, float:0.000000, float:0.000000, float:0.000000,
	    -1, 0,
		-1,
		float:0.2
	},

	// LAPDHQ (dvere)

	{
		1500,
		float:3703.942382, float:1268.859130, float:1067.127807, float:0.000000, float:0.000000, float:540.000000,
	    float:3703.962402, float:1268.829101, float:1067.127807, float:0.000000, float:0.000000, float:-90.000000,
	    -1, -1,
	    FACTION_TYPE_LAW,
	    float:0.15
	},

	{   1495,
	    float:3682.441406, float:1305.396362, float:1067.238769, float:0.000000, float:0.000000, float:90.000000,
	    float:3682.441406, float:1305.396362, float:1067.238769, float:0.000000, float:0.000000, float:180.000000,
	    -1, -1,
		FACTION_TYPE_LAW,
		float:0.15
	},

	{   1495,
	    float:3684.861572, float:1307.661621, float:1067.238769, float:0.000000, float:0.000000, float:360.000000,
	    float:3684.861572, float:1307.661621, float:1067.238769, float:0.000000, float:0.000000, float:450.000000,
	    -1, -1,
	    FACTION_TYPE_LAW,
	    float:0.15
	},

	{   1495,
	    float:3682.360351, float:1310.190429, float:1067.238769, float:0.000000, float:0.000000, float:90.000000,
	    float:3682.360351, float:1310.190429, float:1067.238769, float:0.000000, float:0.000000, float:00.000000,
	    -1, -1,
	    FACTION_TYPE_LAW,
	    float:0.15
	},

	{   1495,
	    float:3682.360351, float:1315.000366, float:1067.238769, float:0.000000, float:0.000000, float:90.000000,
	    float:3682.360351, float:1315.000366, float:1067.238769, float:0.000000, float:0.000000, float:0.000000,
		-1, -1,
		FACTION_TYPE_LAW,
		float:0.15
	},

	{   1495,
	    float:3689.151611, float:1313.302368, float:1067.238769, float:0.000000, float:0.000000, float:270.000000,
	    float:3689.151611, float:1313.302368, float:1067.238769, float:0.000000, float:0.000000, float:180.000000,
		-1, -1,
		FACTION_TYPE_LAW,
		float:0.15
	},
	
	// GAUDET CARS
	//  brana je vzdy defaultne otvorena
	{   2909,
	    float:-248.347991, float:1208.546875, float:20.032184, float:0.000000, float:0.000000, float:90.000000,
	    float:-240.327926, float:1208.546875, float:20.032184, float:0.000000, float:0.000000, float:90.000000,
		-1, -1,
		FACTION_TYPE_BAZAR,
		float:0.6
	},
	
	// FDHQ

	{   11313,
	    float:1216.803466, float:505.381927, float:21.206596, float:0.000000, float:0.000000, float:-117.199996,
	    float:1216.567626, float:504.941986, float:23.139608, float:0.000000, float:90.000000, float:-117.199996,
		-1, -1,
		FACTION_TYPE_FIRE,
		float:0.3
	},
	
	{   11313,
	    float:1209.750000, float:509.006683, float:21.206596, float:0.000000, float:0.000000, float:-117.199996,
	    float:1209.522827, float:508.562316, float:23.139608, float:0.000000, float:90.000000, float:-117.199996,
		-1, -1,
		FACTION_TYPE_FIRE,
		float:0.3
	},
	
	{   11313,
	    float:1202.704833, float:512.627197, float:21.206596, float:0.000000, float:0.000000, float:-117.199996,
	    float:1202.480834, float:512.191162, float:23.140611, float:0.000000, float:90.000000, float:-117.199996,
		-1, -1,
		FACTION_TYPE_FIRE,
		float:0.3
	},
	
	// interier
	
	{   1560,
	    float:1481.241699, float:1345.858276, float:279.856201, float:0.000000, float:0.000000, float:350.000000,
	    float:1481.241699, float:1345.858276, float:279.856201, float:0.000000, float:0.000000, float:270.000000,
		-1, -1,
		FACTION_TYPE_FIRE,
		float:0.3
	},
	
	{   1495,
	    float:1478.738281, float:1343.451293, float:279.846191, float:0.000000, float:0.000000, float:0.000000,
	    float:1478.738281, float:1343.451293, float:279.846191, float:0.000000, float:0.000000, float:75.000000,
		-1, -1,
		FACTION_TYPE_FIRE,
		float:0.3
	},
	
	{   1495,
	    float:1481.006103, float:1331.363769, float:283.368652, float:0.000000, float:0.000000, float:90.000000,
	    float:1481.006103, float:1331.363769, float:283.368652, float:0.000000, float:0.000000, float:180.000000,
		-1, -1,
		FACTION_TYPE_FIRE,
		float:0.3
	},
	
	{   1495,
	    float:1485.226684, float:1332.474243, float:283.368652, float:0.000000, float:0.000000, float:0.000000,
	    float:1485.226684, float:1332.474243, float:283.368652, float:0.000000, float:0.000000, float:90.000000,
		-1, -1,
		FACTION_TYPE_FIRE,
		float:0.3
	},
	
	{   1495,
	    float:1485.226684, float:1340.265869, float:283.368652, float:0.000000, float:0.000000, float:0.000000,
	    float:1485.226684, float:1340.265869, float:283.368652, float:0.000000, float:0.000000, float:90.000000,
		-1, -1,
		FACTION_TYPE_FIRE,
		float:0.3
	},
	
	{   1495,
	    float:1481.125732, float:1348.986328, float:283.368652, float:0.000000, float:0.000000, float:180.000000,
	    float:1481.125732, float:1348.986328, float:283.368652, float:0.000000, float:0.000000, float:90.000000,
		-1, -1,
		FACTION_TYPE_FIRE,
		float:0.3
	},
	
	{   1495,
	    float:1485.217407, float:1348.466674, float:283.368652, float:0.000000, float:0.000000, float:0.000000,
	    float:1485.217407, float:1348.466674, float:283.368652, float:0.000000, float:0.000000, float:90.000000,
		-1, -1,
		FACTION_TYPE_FIRE,
		float:0.3
	},
	
	//STRELNICA
	
	{
	    1569,
	    float: 1363.171020, float:1539.166625, float:3625.996093, float:0.000000, float:0.000000, float:90.100090,
	    float: 1363.171020, float:1539.166625, float:3625.996093, float:0.000000, float:0.000000, float:180.100090,
	    -1, 0,
		FACTION_TYPE_NONE,
		float:0.3
	},
	
	{
	    1569,
	    float: 1371.581420, float:1544.755126, float:3625.99609, float:0.000000, float:0.000000, float:90.100090,
	    float: 1371.581420, float:1544.755126, float:3625.9960, float:0.000000, float:0.000000, float:180.100090,
	    -1, 0,
		FACTION_TYPE_NONE,
		float:0.3
	}
};

new st_garages[][] = {
	// VCHOD POZÍCIA + ANGLE | VÝCHOD POZÍCIA + ANGLE | VW, INTERIOR VCHODU | VW, INTERIOR VYCHODU | FACTION
	{ float:622.007, float:-596.992, float:16.892, float:270.0, float:286.8513,float:-1538.1376,float:24.7827,float:325.4095, 0, 0, 10, 0, FACTION_TYPE_LAW}, // PDHQ
	{ float:1229.391, float:298.975, float:19.249, float:65.313, float:1590.346, float:-1644.815, float:11.794, float:200.5, 0, 0, 6, 0, FACTION_TYPE_FIRE}, // Crippen Memorial
  	{ float:1199.235, float:524.165, float:20.356, float:334.26, float:40.375, float:1665.725, float:1218.235, float:90.0, 0, 0, 12298, 0, FACTION_TYPE_FIRE}, // FDHQ LAVA
  	{ float:1188.054, float:529.845, float:20.458, float:332.719, float:38.656, float:1656.546, float:1217.717, float:90.0, 0, 0, 12298, 0, FACTION_TYPE_FIRE} // FDHQ PRAVA
};

ShowBoomboxMenu(boomid, playerid)
{

	boomzal[playerid] = boomid;

	new
	    string[512];

	strcat(string, "{e75454}Vypnú rádio\n");
	strcat(string, "{ffffff}Vlastná URL adresa\n");
	strcat(string, "{62e357}Prida stanicu\n{ffffff}");

	new
        tstring[72],
        query[92],
        Cache:cache;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_radios WHERE Username = '%e' ORDER BY NAME", ReturnName(playerid));
	cache = mysql_query(MYSQL, query);

	for( new i; i < cache_num_rows(); i++)
	{

	    new temp[64];

	    cache_get_value_name(i, "NAME", temp);
	    format(tstring, 72, "%s\n", temp);
	    strcat(string, tstring);
	}

	cache_delete(cache);

	ShowPlayerDialog(playerid, did_boombox, DIALOG_STYLE_LIST, "RÁDIO", string, "VYBRA", "ZRUI");
	return 1;
}

ShowCarRadioMenu(playerid)
{

	new
	    string[512];

	strcat(string, "{e75454}Vypnú rádio\n");
	strcat(string, "{ffffff}Vlastná URL adresa\n");
	strcat(string, "{62e357}Prida stanicu\n{ffffff}");

	new
        tstring[72],
        query[92],
        Cache:cache;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_radios WHERE Username = '%e' ORDER BY NAME", ReturnName(playerid));
	cache = mysql_query(MYSQL, query);

	for( new i; i < cache_num_rows(); i++)
	{

	    new temp[64];

	    cache_get_value_name(i, "NAME", temp);
	    format(tstring, 72, "%s\n", temp);
	    strcat(string, tstring);
	}

	cache_delete(cache);

	ShowPlayerDialog(playerid, did_carradio, DIALOG_STYLE_LIST, "AUTORÁDIO", string, "VYBRA", "ZRUI");
	return 1;
}

new maxWeaponAmmo[][] = {
	{ WEAPON_COLT45, 	51 },
	{ WEAPON_SILENCED, 	51 },
	{ WEAPON_DEAGLE,	35 },
	{ WEAPON_SHOTGUN,	30 },
	{ WEAPON_SAWEDOFF,  12 },
	{ WEAPON_SHOTGSPA,  35 },
	{ WEAPON_UZI,		150 },
	{ WEAPON_MP5,		90 },
	{ WEAPON_AK47,		90 },
	{ WEAPON_M4,		150 },
	{ WEAPON_TEC9,		150 },
	{ WEAPON_RIFLE,		25 },
	{ WEAPON_SNIPER,	60 }
};

new VehicleNames[][] = {
    "Landstalker","Bravura","Buffalo","Linerunner","Perenniel","Sentinel","Dumper","Firetruck","Trashmaster","Stretch","Manana","Infernus",
    "Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi","Washington","Bobcat","Mr Whoopee","BF Injection",
    "Hunter","Premier","Enforcer","Securicar","Banshee","Predator","Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie",
    "Stallion","Rumpo","RC Bandit","Romero","Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder",
    "Reefer","Tropic","Flatbed","Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
    "Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler","ZR-350","Walton","Regina",
    "Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper","Rancher","FBI Rancher","Virgo","Greenwood",
    "Jetmax","Hotring","Sandking","Blista Compact","Police Maverick","Boxville","Benson","Mesa","RC Goblin","Hotring Racer A","Hotring Racer B",
    "Bloodring Banger","Rancher","Super GT","Elegant","Journey","Bike","Mountain Bike","Beagle","Cropdust","Stunt","Tanker","RoadTrain",
    "Nebula","Majestic","Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
    "Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent","Bullet","Clover",
    "Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility","Nevada","Yosemite","Windsor","Monster A",
    "Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger","Flash","Tahoma","Savanna","Bandito","Freight","Trailer",
    "Kart","Mower","Duneride","Sweeper","Broadway","Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer A","Emperor",
    "Wayfarer","Euros","Hotdog","Club","Trailer B","Trailer C","Andromada","Dodo","RC Cam","Launch","Police Car (LSPD)","Police Car (SFPD)",
    "Police Car (LVPD)","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Old Glendale","Old Sadler","Luggage Trailer A","Luggage Trailer B",
    "Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};

new factionTypes[][] = {
	"Prázdna frakcia",
	"Law-Enforcement",
	"Fire Department",
	"Médiá",
	"Vláda, správa",
	"Drevorubci",
	"(PRACA) Smetiarská firma",
	"(PRACA) Èistiè ulíc",
	"Taxi Firma",
	"(PRACA) Pizza Rozvoz",
	"Mechanici",
	"(PRACA) Prepravná spoloènos",
	"Autobazar"
};

new factionPayday[] = {
	// Rank 1 payday , Multiplier per rank //
	0,
	150,
	150,
	145,
	160,
	120,
	120,
	120,
	125,
	120,
	120,
	120,
	135
};

new weathers[][][] = {
	{ {0}, "Extremne slnecno (LS)" },
	{ {1}, "Slnecno (LS) (buguje)" },
	{ {2}, "Extremne slnecno so smogom (LS)" },
    { {3}, "Slnecno so smogom (LS)" },
    { {4}, "Oblacno (LS)" },
    { {5}, "Slnecno (SF)" },
    { {6}, "Extremne slnecno (SF)" },
    { {7}, "Oblacno (SF)" },
    { {8}, "Dazd (SF)" },
    { {9}, "Hmla (SF)" },
    { {10}, "Slnecno (LV)" },
    { {11}, "Extremne slnecno (LV) (buguje)" },
    { {12}, "Oblacno (LV)" },
    { {13}, "Extremne slnecno (COUNTY)" },
    { {14}, "Slnecno (COUNTY)" },
    { {15}, "Oblacno (COUNTY)" },
    { {16}, "Dazd (COUNTY)" },
    { {17}, "Extremne slnecno (PUST) (buguje)" },
    { {18}, "Slnecno (PUST) (buguje)" },
    { {19}, "Piesocna burka (PUST) (buguje)" }
};

stock Float: ex_GetPlayerMoney(playerid)
	return (GetPVarFloat(playerid, PVAR_MONEY));

new vehicleFuelTypes[] = {
	FUEL_BENZIN, // Landstalker, 400
	FUEL_BENZIN, // Bravura, 401
	FUEL_BENZIN, // Buffalo, 402
	FUEL_DIESEL, // Linerunner, 403
	FUEL_BENZIN, // Perenniel, 404
	FUEL_BENZIN, // Sentinel, 405
	FUEL_DIESEL, // Dumper, 406
	FUEL_DIESEL, // Firetruck, 407
	FUEL_DIESEL, // Trashmaster, 408
	FUEL_BENZIN, // Stretch, 409
	FUEL_BENZIN, // Manana, 410
	FUEL_BENZIN, // Infernus, 411
	FUEL_BENZIN, // Voodoo, 412
	FUEL_BENZIN, // Pony, 413
	FUEL_DIESEL, // Mule, 414
	FUEL_BENZIN, // Cheetah, 415
	FUEL_BENZIN, // Ambulance, 416
	FUEL_DIESEL, // Leviathan, 417
	FUEL_BENZIN, // Moonbeam, 418
	FUEL_DIESEL, // Esperanto, 419
	FUEL_BENZIN, // Taxi, 420
	FUEL_BENZIN, // Washington, 421
	FUEL_DIESEL, // Bobcat, 422
	FUEL_DIESEL, // Mr. Whoopee, 423
	FUEL_BENZIN, // BF Injection, 424
	FUEL_DIESEL, // Hunter, 425
	FUEL_DIESEL, // Premier, 426
	FUEL_DIESEL, // Enforcer, 427
	FUEL_DIESEL, // Securicar, 428
	FUEL_BENZIN, // Banshee, 429
	FUEL_BENZIN, // Predator, 430
	FUEL_DIESEL, // Bus, 431
	FUEL_DIESEL, // Rhino, 423
	FUEL_DIESEL, // Barracks, 433
	FUEL_BENZIN, // Hotknife, 434
	FUEL_NOFUEL, // Article Trailer, 435
	FUEL_BENZIN, // Previon, 436
	FUEL_DIESEL, // Coach, 437
	FUEL_BENZIN, // Cabbie, 438
	FUEL_BENZIN, // Stallion, 439
	FUEL_DIESEL, // Rumpo, 440
	FUEL_NOFUEL, // RC Bandit, 441
	FUEL_BENZIN, // Romero, 442
	FUEL_DIESEL, // Packer, 443
	FUEL_DIESEL, // Monster, 444
	FUEL_DIESEL, // Admiral, 445
	FUEL_BENZIN, // Squallo, 446
	FUEL_BENZIN, // Seasparrow, 447
	FUEL_BENZIN, // Pizzaboy, 448
	FUEL_NOFUEL, // Tram, 449
	FUEL_NOFUEL, // Article Trailer 2, 450
	FUEL_BENZIN, // Turismo, 451
	FUEL_BENZIN, // Speeder, 452
	FUEL_BENZIN, // Reefer, 453
	FUEL_BENZIN, // Tropic, 454
	FUEL_DIESEL, // Flatbed, 455
	FUEL_DIESEL, // Yankee, 456
	FUEL_BENZIN, // Caddy, 457
	FUEL_DIESEL, // Solair, 458
	FUEL_DIESEL, // Topfun Van (Berkley's RC), 459
	FUEL_DIESEL, // Skimmer, 460
	FUEL_BENZIN, // PCJ-600, 461
	FUEL_BENZIN, // Faggio, 462
	FUEL_BENZIN, // Freeway, 463
	FUEL_NOFUEL, // RC Baron, 464
	FUEL_NOFUEL, // RC Raider, 465
	FUEL_DIESEL, // Glendale, 466
	FUEL_DIESEL, // Oceanic, 467
	FUEL_BENZIN, // Sanchez, 468
	FUEL_BENZIN, // Sparrow, 469
	FUEL_DIESEL, // Patriot, 470
	FUEL_BENZIN, // Quad, 471
	FUEL_BENZIN, // Coastguard, 472
	FUEL_BENZIN, // Dinghy, 473
	FUEL_BENZIN, // Hermes, 474
	FUEL_BENZIN, // Sabre, 475
	FUEL_BENZIN, // Rustler, 476
	FUEL_BENZIN, // ZR-350, 477
	FUEL_DIESEL, // Walton, 478
	FUEL_BENZIN, // Regina, 479
	FUEL_BENZIN, // Comet, 480
	FUEL_NOFUEL, // BMX, 481
	FUEL_DIESEL, // Burrito, 482
	FUEL_DIESEL, // Camper, 483
	FUEL_BENZIN, // Marquis, 484
	FUEL_BENZIN, // Baggage, 485
	FUEL_DIESEL, // Dozer, 486
	FUEL_KEROSIN, // Maverick, 487
	FUEL_KEROSIN, // SAN News Maverick, 488
	FUEL_DIESEL, // Rancher, 489
	FUEL_DIESEL, // FBI Rancher, 490
	FUEL_BENZIN, // Virgo, 491
	FUEL_BENZIN, // Greenwood, 492
	FUEL_BENZIN, // Jetmax, 493
	FUEL_BENZIN, // Hotring Racer, 494
	FUEL_DIESEL, // Sandking, 495
	FUEL_BENZIN, // Blista Compact, 496
	FUEL_KEROSIN, // Police Maverick, 497
	FUEL_DIESEL, // Boxville, 498
	FUEL_DIESEL, // Benson, 499
	FUEL_DIESEL, // Mesa, 500
	FUEL_NOFUEL, // RC Goblin, 501
	FUEL_BENZIN, // Hotring Racer A, 502
	FUEL_BENZIN, // Hotring Racer B, 503
	FUEL_DIESEL, // Bloodring Banger, 504
	FUEL_DIESEL, // Rancher Lure, 505
	FUEL_BENZIN, // Super GT, 506
	FUEL_BENZIN, // Elegant, 507
	FUEL_DIESEL, // Journey, 508
	FUEL_NOFUEL, // Bike, 409
	FUEL_NOFUEL, // Mountain Bike, 410
	FUEL_BENZIN, // Beagle, 511
	FUEL_DIESEL, // Cropduster, 512
	FUEL_KEROSIN, // Stuntplane, 513
	FUEL_DIESEL, // Tanker, 514
	FUEL_DIESEL, // Roadtrain, 515
	FUEL_BENZIN, // Nebula, 516
	FUEL_BENZIN, // Majestic, 517
	FUEL_BENZIN, // Buccaneer, 518
	FUEL_KEROSIN, // Shamal, 519
	FUEL_KEROSIN, // Hydra, 520
	FUEL_BENZIN, // FCR-900, 521
	FUEL_BENZIN, // NRG-500, 522
	FUEL_BENZIN, // HPV1000, 523
	FUEL_DIESEL, // Cement Truck, 524
	FUEL_DIESEL, // Towtruck, 525
	FUEL_BENZIN, // Fortune, 526
	FUEL_BENZIN, // Cadrona, 527
	FUEL_BENZIN, // FBI Truck, 528
	FUEL_BENZIN, // Willard, 529
	FUEL_BENZIN, // Forklift, 530
	FUEL_DIESEL, // Tractor, 531
	FUEL_DIESEL, // Combine Harvester, 532
	FUEL_BENZIN, // Feltzer, 533
	FUEL_BENZIN, // Remington, 534
	FUEL_DIESEL, // Slamvan, 535
	FUEL_BENZIN, // Blade, 536
	FUEL_NOFUEL, // Freight (Train), 537
	FUEL_NOFUEL, // Brownstreak (Train), 538
	FUEL_BENZIN, // Vortex, 539
	FUEL_BENZIN, // Vincent, 540
	FUEL_BENZIN, // Bullet, 541
	FUEL_BENZIN, // Clover, 542
	FUEL_BENZIN, // Sadler, 543
	FUEL_DIESEL, // Firetruck LA, 544
	FUEL_BENZIN, // Hustler, 545
	FUEL_BENZIN, // Intruder, 546
	FUEL_BENZIN, // Primo, 547
	FUEL_DIESEL, // Cargobob, 548
	FUEL_BENZIN, // Tampa, 549
	FUEL_BENZIN, // Sunrise, 550
	FUEL_BENZIN, // Merit, 551
	FUEL_DIESEL, // Utility Van, 552
	FUEL_KEROSIN, // Nevada, 553
	FUEL_DIESEL, // Yosemite, 554
	FUEL_BENZIN, // Windsor, 555
	FUEL_DIESEL, // Monster "A", 556
	FUEL_DIESEL, // Monster "B", 557
	FUEL_BENZIN, // Uranus, 558
	FUEL_BENZIN, // Jester, 559
	FUEL_BENZIN, // Sultan, 560
	FUEL_BENZIN, // Stratum, 561
	FUEL_BENZIN, // Elegy, 562
	FUEL_KEROSIN, // Raindance, 563
	FUEL_NOFUEL, // RC Tiger, 564
	FUEL_BENZIN, // Flash, 565
	FUEL_BENZIN, // Tahoma, 566
	FUEL_BENZIN, // Savanna, 567
	FUEL_BENZIN, // Bandito, 568
	FUEL_NOFUEL, // Freight Flat Trailer (Train), 569
	FUEL_NOFUEL, // Streak Trailer (Train), 570
	FUEL_BENZIN, // Kart, 571
	FUEL_BENZIN, // Mower, 572
	FUEL_DIESEL, // Dune, 573
	FUEL_BENZIN, // Sweeper, 574
	FUEL_BENZIN, // Broadway, 575
	FUEL_BENZIN, // Tornado, 576
	FUEL_KEROSIN, // AT400, 577
	FUEL_DIESEL, // DFT-30, 578
	FUEL_DIESEL, // Huntley, 579
	FUEL_BENZIN, // Stafford, 580
	FUEL_BENZIN, // BF-400, 581
	FUEL_DIESEL, // Newsvan, 582
	FUEL_BENZIN, // Tug, 583
	FUEL_NOFUEL, // Petrol Trailer, 584
	FUEL_BENZIN, // Emperor, 585
	FUEL_BENZIN, // Wayfarer, 586
	FUEL_BENZIN, // Euros, 587
	FUEL_DIESEL, // Hotdog, 588
	FUEL_BENZIN, // Club, 589
	FUEL_NOFUEL, // Freight Box Trailer (Train), 590
	FUEL_NOFUEL, // Article Trailer 3, 591
	FUEL_KEROSIN, // Andromada, 592
	FUEL_BENZIN, // Dodo, 593
	FUEL_NOFUEL, // RC Cam, 594
	FUEL_BENZIN, // Launch, 595
	FUEL_BENZIN, // Police Car (LSPD), 596
	FUEL_BENZIN, // Police Car (SFPD), 597
	FUEL_BENZIN, // Police Car (LVPD), 598
	FUEL_DIESEL, // Police Ranger, 599
	FUEL_DIESEL, // Picador, 600
	FUEL_DIESEL, // S.W.A.T., 601
	FUEL_BENZIN, // Alpha, 602
	FUEL_BENZIN, // Phoenix, 603
	FUEL_DIESEL, // Glendale Shit, 604
	FUEL_BENZIN, // Sadler Shit, 605
	FUEL_NOFUEL, // Baggage Trailer "A", 606
	FUEL_NOFUEL, // Baggage Trailer "B", 607
	FUEL_NOFUEL, // Tug Stairs Trailer, 608
	FUEL_DIESEL, // Boxville, 609
	FUEL_NOFUEL, // Farm Trailer, 610
	FUEL_NOFUEL // Utility Trailer, 611
};

new guns_locker_SD[][] = {
	// Weapon ID, Ammo
	{ 4, 1 },
	{ 3, 1 },
	{ 22, 17+17+17 },
	{ 24, 7+7+7+7+7 },
	{ 25, 50 },
	{ 27, 7+7+7+7 },
	{ 29, 30+30+30 },
	{ 31, 50+50+50 },
	{ 34, 20 },
	{ 41, 20000 },
	{ 43, 50 },
	{ 17, 3 },
	{ 100, 100 },
	{ 103, 1 },
	{ 104, 0 },
	{ 105, 0 },
	{ 106, 0}
};

new guns_locker_FD[][] = {
	// Weapon ID, Ammo
	{ 4, 1 },
	{ 6, 1 },
	{ 9, 1 },
	{ 41, 3500 },
	{ 42, 9999 },
	{ 43, 50 },
	{ 46, 1 }
};

new illegal_AllowedItems[][] = {
	// Item ID, Price
	{0, 0},
	{22, 6000}, // 9MM
	{23, 15000}, // 9MM SILENCED
	{24, 9000}, // DEAGLE
	{25, 10000}, // BROKOVNICA
	{26, 15000}, // SAWNOFF
	{28, 10000}, // UZI
	{29, 19000}, // MP5
	{30, 15000}, // AK-47
	{31, 22000}, // M4
	{32, 10300}, // TEC-9
	{33, 11000}, // PUKA
	{34, 42000}, // SNIPER
	{CRATE_KEVLAR_LIGHT_ID, 600}, // LIGHT KEVLAR
	{CRATE_KEVLAR_HEAVY_ID, 1000} // HEAVY KEVLAR
};

new Float:illegal_CratePos[][] = {
	{1763.911254, 592.708618, 12.190003, 0.000000, 0.000000, 14.000000},
	{1660.318115, -41.996829, 28.252113, -23.900011, 0.000000, 15.100001},
	{1466.804443, -477.677276, 54.800376, 2.999999, -8.899997, 0.000000},
	{1131.723876, -497.982604, 52.966041, -18.499998, 0.000000, -19.500001},
	{498.273651, -220.471252, 16.502346, 22.499992, -21.100000, -32.399997},
	{509.034271, -290.998168, 19.009412, -11.200004, 0.000000, 0.000000},
	{288.891052, -555.410217, 16.596584, 0.000000, 0.000000, 0.000000},
	{-511.957519, -863.292419, 117.265518, -18.400001, -15.800001, 76.200004},
	{-782.893127, -1560.906860, 130.431427, 7.299999, 0.000000, 0.000000},
	{-937.870300, -1969.265136, 46.623008, 0.000000, 18.000000, 0.000000},
	{-2739.635009, -2388.426025, 11.971348, -26.000005, -18.199998, 19.899999},
	{-2256.823730, -1152.072998, 14.851876, 2.799998, 0.000000, 0.000000},
	{-979.573547, -204.332641, 47.460788, 0.000000, -2.599999, 0.000000},
	{-617.811096, 159.172790, 27.243661, 0.000000, -24.500005, 0.000000},
	{2871.491455, -2125.381103, 3.836398, 0.000000, 12.699998, 0.000000},
	{2764.288574, -2244.677978, 2.209157, -7.699997, -28.000000, 90.000000},
	{2574.445312, -2192.617187, 12.676877, 0.000000, 0.000000, 0.000000}
};

new bool:ic_isInJail[MAX_PLAYERS];
new ic_jailTime[MAX_PLAYERS];

new Float:cell_Position[][] = {
	{119.511, 1945.266, 642.701, 0.0},
	{120.687, 1940.440, 642.701, 0.0},
	{120.410, 1936.692, 642.701, 0.0},
	{120.348, 1933.131, 642.701, 0.0},
	{2623.809, 3117.841, 2048.144, 1.0}
};

new Float:garageIntList[250][9];
new interiorIDs_g[250][64];

new Float:houseIntList[250][6];
new interiorIDs_h[250][64];

new Float:intList[250][6];
new interiorIDs[250][64];

new bool:veh_IsDeath[MAX_VEHICLES];
new lastkeypressunix[MAX_PLAYERS];
new isuserafk[MAX_PLAYERS];
new isuserafk_start[MAX_PLAYERS];

stock SetVehicleNumberPlateEx(vehicleid, numberplate[])
{
	if(!IsValidVehicle(vehicleid))
	    return 0;

	new
	    plate[32];

	strins(plate, "{3e3e3e}", 0);
	strcat(plate, numberplate);

	SetVehicleNumberPlate(vehicleid, plate);

	return 1;
}
#if defined _ALS_SetVehicleNumberPlate
    #undef SetVehicleNumberPlate
#else
    #define _ALS_SetVehicleNumberPlate
#endif
#define SetVehicleNumberPlate SetVehicleNumberPlateEx

stock SetPlayerPosEx(playerid,Float:X,Float:Y,Float:Z)
{
	PlayerEnterTime[playerid]+=221;
	return SetPlayerPos(playerid,X,Y,Z);
}
#if defined _ALS_SetPlayerPos
  #undef SetPlayerPos
#else
  #define _ALS_SetPlayerPos
#endif
#define SetPlayerPos SetPlayerPosEx

stock PutPlayerInVehicleEx(playerid,vehicleid,seatid)
{
	PlayerEnterTime[playerid]+=221;
	return PutPlayerInVehicle(playerid,vehicleid,seatid);
}
#if defined _ALS_PutPlayerInVehicle
  #undef PutPlayerInVehicle
#else
  #define _ALS_PutPlayerInVehicle
#endif
#define PutPlayerInVehicle PutPlayerInVehicleEx

stock RemovePlayerFromVehicleEx(playerid)
{
    hasSeatbelt[playerid] = false;
	PlayerEnterTime[playerid]+=221;
	return RemovePlayerFromVehicle(playerid);
}
#if defined _ALS_RemovePlayerFromVehicle
  #undef RemovePlayerFromVehicle
#else
  #define _ALS_RemovePlayerFromVehicle
#endif
#define RemovePlayerFromVehicle RemovePlayerFromVehicleEx

//==============================ANTI HEALTH & ARMOUR HACK===============================

new Float:ahac_healthState[MAX_PLAYERS] = 100.0;
new Float:ahac_armourState[MAX_PLAYERS];
new bool:ahac_immunity[MAX_PLAYERS] = false;

stock ahac_SetPlayerHealth(playerid, Float:health, isDeadTrigger = 0)
{
	ahac_immunity[playerid] = true;

	ahac_healthState[playerid] = health;

	if(health < 5 && isDeadTrigger == 0)
	    health = 5.0;

	SetPlayerHealth(playerid, health);

	SetTimerEx("ahac_timer_DisableImmunity", 1000, false, "i", playerid);
	return 1;
}
#if defined _ALS_SetPlayerHealth
    #undef SetPlayerHealth
#else
    #define _ALS_SetPlayerHealth
#endif
#define SetPlayerHealth ahac_SetPlayerHealth

stock ahac_SetPlayerArmour(playerid, Float:armour)
{
	ahac_immunity[playerid] = true;

	ahac_armourState[playerid] = armour;
	SetPlayerArmour(playerid, armour);

	SetTimerEx("ahac_timer_DisableImmunity", 1000, false, "i", playerid);
	return 1;
}
#if defined _ALS_SetPlayerArmour
    #undef SetPlayerArmour
#else
    #define _ALS_SetPlayerArmour
#endif
#define SetPlayerArmour ahac_SetPlayerArmour

stock ahac_GetPlayerHealth(playerid, &Float:health)
{
	health = ahac_healthState[playerid];
	return 1;
}

stock ahac_GetPlayerArmour(playerid, &Float:armour)
{
	armour = ahac_armourState[playerid];
	return 1;
}

forward ahac_timer_DisableImmunity(playerid);
public ahac_timer_DisableImmunity(playerid)
{
	ahac_immunity[playerid] = false;
	return 1;
}
new upozornenie_forbi[MAX_PLAYERS];
forward timer_DisableForbiddenWarn(playerid);
public timer_DisableForbiddenWarn(playerid)
{
	upozornenie_forbi[playerid]=0;
	return 1;
}

//==============================ANTI VEHICLE HEALTH HACK===============================

new Float:vhac_healthState[MAX_VEHICLES] = 1000.0;
new bool:vhac_immunity[MAX_VEHICLES] = false;

stock vhac_RepairVehicle(vehicleid)
{
	vhac_immunity[vehicleid] = true;

	if(vEnum[vehicleid][v_def_Health] > 1000.0)
		vhac_healthState[vehicleid] = vEnum[vehicleid][v_def_Health];
	else
	    vhac_healthState[vehicleid] = 1000.0;

	RepairVehicle(vehicleid);
	vhac_SetVehicleHealth(vehicleid, vhac_healthState[vehicleid]);

	SetTimerEx("vhac_timer_DisableImmunity", 1000, false, "i", vehicleid);
	return 1;
}
#if defined _ALS_RepairVehicle
    #undef RepairVehicle
#else
    #define _ALS_RepairVehicle
#endif
#define RepairVehicle vhac_RepairVehicle

stock vhac_SetVehicleHealth(vehicleid, Float:health)
{
	vhac_immunity[vehicleid] = true;

	vhac_healthState[vehicleid] = health;
	SetVehicleHealth(vehicleid, health);

	SetTimerEx("vhac_timer_DisableImmunity", 1000, false, "i", vehicleid);
	return 1;
}
#if defined _ALS_SetVehicleHealth
    #undef SetVehicleHealth
#else
    #define _ALS_SetVehicleHealth
#endif
#define SetVehicleHealth vhac_SetVehicleHealth

stock vhac_GetVehicleHealth(vehicleid, &Float:health)
{
	health = vhac_healthState[vehicleid];
	return 1;
}

forward vhac_timer_DisableImmunity(vehicleid);
public vhac_timer_DisableImmunity(vehicleid)
{
	vhac_immunity[vehicleid] = false;
	return 1;
}

//==============================ANTI WEAPON HACK===============================

/*

NATIVES

native RemovePlayerWeapon(playerid, weaponid)
native IsPlayerWeaponCheating(playerid, &weaponid = 0, &ammo = 0, &slot = 0)

*/

new playerEmptyGuns[MAX_PLAYERS][13];
new playerEmptyGuns_W[MAX_PLAYERS][13];
new playerEmptyGuns_P[MAX_PLAYERS][13];
new playerEmptyGuns_S[MAX_PLAYERS][13];
new playerEmptyGuns_O[MAX_PLAYERS][13][128];
new ac_playerGuns[MAX_PLAYERS][50];
new bool:ac_immunity[MAX_PLAYERS] = false;

stock ac_GetWeaponSlot(weaponid)
{
	new
		slot;

	switch(weaponid)
	{
		case 0,1: slot = 0;
		case 2 .. 9: slot = 1;
		case 10 .. 15: slot = 10;
		case 16 .. 18, 39: slot = 8;
		case 22 .. 24: slot =2;
		case 25 .. 27: slot = 3;
		case 28, 29, 32: slot = 4;
		case 30, 31: slot = 5;
		case 33, 34: slot = 6;
		case 35 .. 38: slot = 7;
		case 40: slot = 12;
		case 41 .. 43: slot = 9;
		case 44 .. 46: slot = 11;
	}
	return slot;
}

//==============================DEFINED FUNCTIONS===============================

#define		web_LatestFormat(%1) 			format(scfmString,sizeof(scfmString),%1),web_AddToLatest(scfmString)
#define		FormatLog(%1,%2) 				format(scfmString,sizeof(scfmString),%2),LogString(scfmString,%1)
#define		FormatBazarLog(%1,%2) 			format(scfmString,sizeof(scfmString),%2),bazar_Log(%1,scfmString)
#define		FormatWeaponLog(%1,%2) 			format(scfmString,sizeof(scfmString),%2),weapon_Log(%1,scfmString)
#define		FormatWarn(%1,%2,%3,%4) 		format(scfmString,sizeof(scfmString),%4),AdminWarn(%1, %2, %3, scfmString)
#define		FormatWarnEx(%5,%1,%2,%3,%4) 		format(scfmString,sizeof(scfmString),%4),AdminWarn(%5, %2, %3, scfmString, %1)
#define     GetPlayerFightStyle(%1)         g_I_Fightstyle[%1]
#define 	function%0(%1) 					forward%0(%1); public%0(%1)
#define     SetKickTimer(%1)        		SetTimerEx("timer_KickPlayer",750,false,"i",%1)
#define     GetPlayerMasterAcc(%1)  		S_masterAccount[%1]
#define     SetPlayerAdminLevel(%1,%2)  	I_playerAdminLevel[%1] = %2
#define     GetPlayerStaffLevel(     		GetPlayerAdminLevel(
#define     ex_SetPlayerHunger(%1,%2)  	 	F_pHunger[%1] = %2
#define     ex_GetPlayerSkin(%1)        	I_pSkin[%1]
#define     SetPlayerGender(%1,%2)      	g_I_playerGender[%1] = %2
#define     GetPlayerGender(%1)         	g_I_playerGender[%1]
#define     GetPlayerIllegalFaction(%1)        	g_I_IlPlayerFaction[%1]
#define     GetPlayerIllegalFactionRank(%1)    	g_I_IlPlayerFactionRank[%1]
#define     GetPlayerFaction(%1)        	g_I_playerFaction[%1]
#define     GetPlayerFactionRank(%1)    	g_I_playerFactionRank[%1]
#define     GetPlayerFactionTitle(%1)   	g_S_playerFactionTitle[%1]
#define     GetPlayerFactionBadge(%1)   	g_I_playerFactionBadge[%1]
#define     GetPlayerFactionType(%1)    	factEnum[GetPlayerFaction(%1)][fact_Type]
#define     GetPlayerRoleplayLevel(%1)  	g_I_roleplayLevel[%1]
#define     SetPlayerRoleplayLevel(%1,%2)  	g_I_roleplayLevel[%1] = %2,SetPlayerScore(%1,%2)
#define     GetPlayerDonatorLevel(%1)  		g_I_donatorLevel[%1]
#define     GetFactionTypeName(%1)      	factionTypes[%1]
#define     ReturnMaster(%1)            	S_masterAccount[%1]
#define     GetPlayerInventoryItem(%1,%2)   I_playerInventory[%1][%2]
#define     SetPlayerInventoryItem(%1,%2,%3)   I_playerInventory[%1][%2] = %3
#define 	IsPlayerWorking(%0)             IsWorking[%0]
#define     GetVehicleFactionType(%1)   	factEnum[vEnum[%1][v_Faction]][fact_Type]
#define     GetVehicleFaction(%1)   		vEnum[%1][v_Faction]
#define     SetVehicleFaction(%1,%2)   		vEnum[%1][v_Faction] = %2
#define     ex_IsVehicleLocked(%0)          isVehLocked[%0]
#define     IsPlayerControllable(%0)        ex_toggleControllable[%0]
#define     GetPlayerControllable(%0)       ex_toggleControllable[%0]
#define		ex_GetVehicleInterior(%0)		vehicleData[%0][gVeh_Interior]
new 		scfmString[256];
#define		SCFM(%1,%2,%3) 					format(scfmString,sizeof(scfmString),%3),SendClientMessage(%1,%2,scfmString)
#define		SCSuccess(%1,%3) 				format(scfmString,sizeof(scfmString),%3),SendSuccess(%1,scfmString)
#define		SCError(%1,%3) 					format(scfmString,sizeof(scfmString),%3),SendError(%1,scfmString)
#define 	ShiftHexToRGBA(%0,%1,%2,%3,%4)	((%0) = ((%4) & 0xFF) | (((%3) & 0xFF) << 8) | (((%2) & 0xFF) << 16) | ((%1) << 24))

new randomLoginPos[][] = {
	{float:1289.853759, float:232.873657, float:20.871780, float:1292.469482, float:236.326705, float:20.929920,
	    float:1288.853759, float:232.873657, float:20.871780, float:1292.469482, float:236.326705, float:20.929920,
		20000}
};
SetPlayerLoginCamera(playerid)
{

	new
		x = random(sizeof(randomLoginPos));

    PreventSpectate(playerid);
	InterpolatePlayerCamera(playerid, Float:randomLoginPos[x][0], Float:randomLoginPos[x][1], Float:randomLoginPos[x][2],
		Float:randomLoginPos[x][3], Float:randomLoginPos[x][4], Float:randomLoginPos[x][5], Float:randomLoginPos[x][6], Float:randomLoginPos[x][7], Float:randomLoginPos[x][8], Float:randomLoginPos[x][9], Float:randomLoginPos[x][10], Float:randomLoginPos[x][11], randomLoginPos[x][12]);
}
new tvehtuningresp[MAX_VEHICLES][15];
hook OnVehicleDeath(vehicleid, killerid)
{

    CallRemoteFunction("blinker_OnVehicleDeath", "ii", vehicleid, killerid);
    veh_IsDeath[vehicleid] = true;

    foreach ( new playerid : Player )
    {
	    if(isDoingDMV[playerid] == true && DMV_vehicleID[playerid] == vehicleid)
		{

		    PlayerTextDrawHide(playerid, TD_autoskola0[playerid]);
			PlayerTextDrawHide(playerid, TD_autoskola1[playerid]);
			PlayerTextDrawHide(playerid, TD_autoskola2[playerid]);

			DestroyDMV(playerid);

			SCFM(playerid, COLOR_COMMANDUSE, "[ AUTOKOLA ] {ffffff}Gratulujem. Tvoj test bol neúspený. Ty neschopák!");
	    }
	}

	foreach( new i : Player )
	{
	    if(!IsPlayerInAnyVehicle(i))
	        continue;

		if(GetPlayerVehicleID(i) != vehicleid)
		    continue;

        hasSeatbelt[i] = false;
		PlayerEnterTime[i]+=221;
	}

	for(new ix; ix < 14; ix++)
	{
	    if(ix > 13)
	        break;

		tvehtuningresp[vehicleid][ix] = GetVehicleComponentInSlot(vehicleid, ix);

	}

    RemoveAttachObj(vehicleid);
	SetVehicleToRespawn(vehicleid);

	return 1;
}

inter_DeleteVehicle(vehicleid)
{
    vEnum[vehicleid][v_rentalb_IsRental] = 0;

	if(vEnum[vehicleid][v_unit_isUsed])
	{
	    DestroyDynamic3DTextLabel(vEnum[vehicleid][v_unit_Label]);
	}

	for(new i; vehicle_Enum:i < vehicle_Enum; i++) {
		vEnum[vehicleid][vehicle_Enum:i] = 0;
	}
	
	RemoveAttachObj(vehicleid);
	SetTimerEx("timer_DestroyPlayerVehicle", 2000, false, "i", vehicleid);
	return 1;
}

#include <internal\corpse.pwn>
#include <internal\elm_pd.pwn>
#include <internal\achievements.pwn>
#include <internal\characters.pwn>
#include <internal\economy.pwn>
#include <internal\dealerships.pwn>
new anawalt_itemid[MAX_PLAYERS];
new anawalt_skladid[MAX_PLAYERS];
#include <internal\jobs\anawalt.pwn>
#include <internal\jobs\sweeper.pwn>
#include <internal\jobs\pizza.pwn>
#include <internal\weapons.pwn>
#include <internal\farm.pwn>
SetPlayerDonatorLevel(playerid, level)
{
	if(level > 0)
	{
	    Achievement::Reward(playerid, ACHIEVEMENT_DONATOR);
	}
	g_I_donatorLevel[playerid] = level;

	return 1;
}

GetVehicleName(vehicleid)
{

	new string[64];
	format(string, 64, "ID %d",vehicleid);

	if(!IsValidVehicle(vehicleid) || GetVehicleModel(vehicleid) < 400)
	    return string;

	format(string, 64, "%s",VehicleNames[GetVehicleModel(vehicleid)-400]);

	return string;
}

#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

ex_SetVehicleLocked(vehicleid, bool:lock)
{
    isVehLocked[vehicleid] = lock;
    SetVehicleParams(vehicleid, VEHICLE_TYPE_DOORS, lock);
    return 1;
}

new pskin038[MAX_PLAYERS];
setplayerSkin038(playerid, skinid)
{
	pskin038[playerid] = skinid;
	return SetPlayerSkin(playerid, skinid);
}
#if defined _ALS_SetPlayerSkin
	#undef SetPlayerSkin
#else
	#define _ALS_SetPlayerSkin
#endif
#define SetPlayerSkin setplayerSkin038

getplayerskin038(playerid)
{
	return pskin038[playerid];
}
#if defined _ALS_GetPlayerCustomSkin
	#undef GetPlayerCustomSkin
#else
	#define _ALS_GetPlayerCustomSkin
#endif
#define GetPlayerCustomSkin getplayerskin038

//=================================TIMERS=======================================

function specput(playerid)
{
    PutPlayerInVehicle(playerid, spec_Vehicle[playerid][0], spec_Vehicle[playerid][1]);
    return 1;
}

Float:GetDistance(Float:x1,Float:y1,Float:z1, Float:x2,Float:y2,Float:z2) {
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

forward ClearAnims(playerid);
public ClearAnims(playerid)
{
	ClearAnimations(playerid, 1);
	return 1;
}

forward destroybbLabel(labelid);
public destroybbLabel(labelid)
	DestroyDynamic3DTextLabel(Text3D:labelid);

function OnPlayerLogin_CheckPassword(playerid)
{
    if(cache_num_rows() == 0)
    	return WrongPassword(playerid);

	new query[128],Cache:cache;

    mysql_format(MYSQL, query, 128, "SELECT * FROM master_accounts WHERE Username = '%e'",  ReturnName(playerid));
	cache = mysql_query(MYSQL, query);
	cache_get_value_name_int(0,"RenameTicket",RenameTicket[playerid]);
	cache_get_value_name_int(0,"Mince",g_I_mince[playerid]);
	cache_delete(cache);
	
    Character::ShowSelection(playerid);
    
	return 1;
}

forward GivePlayerLegalFactionTimer(playerid, toid); public GivePlayerLegalFactionTimer(playerid, toid)
{

	if(give_LegalFaction[playerid] != toid)
		return 1;

	give_LegalFaction[playerid] = -1;

	SCFM(playerid, COLOR_GREY, "> Ponuka na nabranie do frakcie vyprala!");
	SCFM(toid, COLOR_GREY, "> Ponuka na nabranie do frakcie vyprala!");

	return 1;
}

forward GivePlayerNeLegalFactionTimer(playerid, toid); public GivePlayerNeLegalFactionTimer(playerid, toid)
{

	if(give_NeLegalFaction[playerid] != toid)
		return 1;

	give_NeLegalFaction[playerid] = -1;

	SCFM(playerid, COLOR_GREY, "> Ponuka na nabranie do nelegálnej frakcie vyprala!");
	SCFM(toid, COLOR_GREY, "> Ponuka na nabranie do nelegálnej frakcie vyprala!");

	return 1;
}

forward GivePlayerKevlarTimer(playerid, toid); public GivePlayerKevlarTimer(playerid, toid)
{

	if(give_Kevlar[playerid][1] != toid)
		return 1;

	give_Kevlar[playerid][0] = 0;
	give_Kevlar[playerid][1] = 0;

	SCFM(playerid, COLOR_GREY, "> Ponuka na podanie vesty vyprala!");
	SCFM(toid, COLOR_GREY, "> Ponuka na podanie vesty vyprala!");

	return 1;
}

#include <internal\alcohol.pwn>
#include <internal\phonebooths.pwn>
#include <internal\trucking2.pwn>
#include <internal\emptyguns.pwn>

forward GivePlayerWeaponTimer(playerid, toid); public GivePlayerWeaponTimer(playerid, toid)
{

	if(give_Weapon[playerid][2] != toid)
		return 1;

	give_Weapon[playerid][0] = 0;
	give_Weapon[playerid][1] = 0;
	give_Weapon[playerid][2] = 0;

	SCFM(playerid, COLOR_GREY, "> Ponuka na podanie zbrane vyprala!");
	SCFM(toid, COLOR_GREY, "> Ponuka na podanie zbrane vyprala!");

	return 1;
}

forward phone_timer_Dial_Emergency(fromid); public phone_timer_Dial_Emergency(fromid)
{

	if(phone_isPhoneTurnedOff(fromid))
		return 0;

	ph_IsTalking[fromid] = true;
	ph_IsDialing[fromid] = false;
	ph_IsWaiting[fromid] = true;

	ph_Emergency[fromid] = 0;

	ph_CallWith[fromid] = EMERGENCY_NUMBER;

	SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Dobrý deò, akú slubu vyadujete?");

 	new str[256];
    if(phone_IsOut[fromid] == false)
    {
	    LoadPhone(fromid);

	    phone_SelectedTile[fromid] 	= 0;
	    phone_Screen[fromid]          = 0;
	    phone_IsOut[fromid]           = true;

	    EnterInfo(fromid, "~w~Telefon mozes zatvorit prikazom ~b~/phone~w~ alebo kliknutim na tlacidlo ~b~BACK~w~!~n~Kurzor otvoris prikazom ~b~/pc~w~!");

	    phone_refreshTextdraw(fromid);

	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MENU[fromid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MESSAGES[fromid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_OPTIONS[fromid][x]);

	    format(str,256, "Call in progress with~n~%d", tcisloex[fromid]);
		PlayerTextDrawSetString(fromid, PTD_phone_EXTRA[fromid][1], str);

		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][0]);
		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][1]);
	}
	else
	{
	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MENU[fromid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MESSAGES[fromid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_OPTIONS[fromid][x]);

	    format(str,256, "Call in progress with~n~%d", tcisloex[fromid]);
		PlayerTextDrawSetString(fromid, PTD_phone_EXTRA[fromid][1], str);

		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][0]);
		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][1]);
	}

	return 1;
}

forward phone_timer_Dial_Swoop(fromid); public phone_timer_Dial_Swoop(fromid)
{

	if(phone_isPhoneTurnedOff(fromid))
		return 0;

	ph_IsTalking[fromid] = true;
	ph_IsDialing[fromid] = false;
	ph_IsWaiting[fromid] = true;

	ph_Emergency[fromid] = 0;

	ph_CallWith[fromid] = EMERGENCY_TAXI;

	SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Krásny deò prajem! Kde sa prosím Vás nachádzate?");

    new str[256];
    if(phone_IsOut[fromid] == false)
    {
	    LoadPhone(fromid);

	    phone_SelectedTile[fromid] 	= 0;
	    phone_Screen[fromid]          = 0;
	    phone_IsOut[fromid]           = true;

	    EnterInfo(fromid, "~w~Telefon mozes zatvorit prikazom ~b~/phone~w~ alebo kliknutim na tlacidlo ~b~BACK~w~!~n~Kurzor otvoris prikazom ~b~/pc~w~!");

	    phone_refreshTextdraw(fromid);

	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MENU[fromid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MESSAGES[fromid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_OPTIONS[fromid][x]);

	    format(str,256, "Call in progress with~n~%d", tcisloex[fromid]);
		PlayerTextDrawSetString(fromid, PTD_phone_EXTRA[fromid][1], str);

		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][0]);
		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][1]);
	}
	else
	{
	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MENU[fromid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MESSAGES[fromid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_OPTIONS[fromid][x]);

	    format(str,256, "Call in progress with~n~%d", tcisloex[fromid]);
		PlayerTextDrawSetString(fromid, PTD_phone_EXTRA[fromid][1], str);

		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][0]);
		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][1]);
	}

	return 1;
}

forward phone_timer_Dial_RCN(fromid); public phone_timer_Dial_RCN(fromid)
{

	if(phone_isPhoneTurnedOff(fromid))
		return 0;

	ph_IsTalking[fromid] = true;
	ph_IsDialing[fromid] = false;
	ph_IsWaiting[fromid] = true;

	ph_Emergency[fromid] = 0;

	ph_CallWith[fromid] = EMERGENCY_RCN;

	SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátorka: Dobrý deò! Èo by ste nám radi odkázali?");
	new str[256];
    if(phone_IsOut[fromid] == false)
    {
	    LoadPhone(fromid);

	    phone_SelectedTile[fromid] 	= 0;
	    phone_Screen[fromid]          = 0;
	    phone_IsOut[fromid]           = true;

	    EnterInfo(fromid, "~w~Telefon mozes zatvorit prikazom ~b~/phone~w~ alebo kliknutim na tlacidlo ~b~BACK~w~!~n~Kurzor otvoris prikazom ~b~/pc~w~!");

	    phone_refreshTextdraw(fromid);

	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MENU[fromid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MESSAGES[fromid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_OPTIONS[fromid][x]);

	    format(str,256, "Call in progress with~n~%d", tcisloex[fromid]);
		PlayerTextDrawSetString(fromid, PTD_phone_EXTRA[fromid][1], str);

		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][0]);
		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][1]);
	}
	else
	{

	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MENU[fromid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MESSAGES[fromid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_OPTIONS[fromid][x]);

	    format(str,256, "Call in progress with~n~%d", tcisloex[fromid]);
		PlayerTextDrawSetString(fromid, PTD_phone_EXTRA[fromid][1], str);

		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][0]);
		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][1]);
	}

	return 1;
}

forward phone_timer_Dial_HAWKINS(fromid); public phone_timer_Dial_HAWKINS(fromid)
{

	if(phone_isPhoneTurnedOff(fromid))
		return 0;

	ph_IsTalking[fromid] = true;
	ph_IsDialing[fromid] = false;
	ph_IsWaiting[fromid] = true;

	ph_Emergency[fromid] = 0;

	ph_CallWith[fromid] = EMERGENCY_HAWKINS;

	SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: No, èo je? Èo potrebuje?");
	new str[256];
    if(phone_IsOut[fromid] == false)
    {
	    LoadPhone(fromid);

	    phone_SelectedTile[fromid] 	= 0;
	    phone_Screen[fromid]          = 0;
	    phone_IsOut[fromid]           = true;

	    EnterInfo(fromid, "~w~Telefon mozes zatvorit prikazom ~b~/phone~w~ alebo kliknutim na tlacidlo ~b~BACK~w~!~n~Kurzor otvoris prikazom ~b~/pc~w~!");

	    phone_refreshTextdraw(fromid);

	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MENU[fromid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MESSAGES[fromid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_OPTIONS[fromid][x]);

	    format(str,256, "Call in progress with~n~%d", tcisloex[fromid]);
		PlayerTextDrawSetString(fromid, PTD_phone_EXTRA[fromid][1], str);

		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][0]);
		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][1]);
	}
	else
	{

	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MENU[fromid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MESSAGES[fromid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_OPTIONS[fromid][x]);

	    format(str,256, "Call in progress with~n~%d", tcisloex[fromid]);
		PlayerTextDrawSetString(fromid, PTD_phone_EXTRA[fromid][1], str);

		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][0]);
		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][1]);
	}

	return 1;
}

forward phone_timer_Dial_Success(fromid, toid); public phone_timer_Dial_Success(fromid, toid)
{

	if(phone_isPhoneTurnedOff(fromid))
		return 0;

	if(phone_isPhoneTurnedOff(toid) || ph_CanAccept[toid] == true || ph_IsTalking[toid] == true || ph_IsDialing[toid] == true)
		return SetTimerEx("phone_timer_Dial_Failed", 1, false, "i", fromid);

	ph_IsTalking[fromid] = false;
	ph_IsTalking[toid] = false;

	ph_IsDialing[fromid] = false;

	ph_IsWaiting[fromid] = true;
	ph_IsCaller[fromid] = true;
	ph_CanAccept[toid] = true;

	ph_CallWith[fromid] = toid;
	ph_CallWith[toid] = fromid;

	SCFM(toid, COLOR_PHONE_MESSAGE, "[ PHONE ] Prichádzajúci hovor od %s, poui /(p)ick pre zodvihnutie alebo /(h)angup pre zloenie.", phone_getPlayerContact(toid, phone_getPlayerNumber(fromid)));

	new
		Float:X,
		Float:Y,
		Float:Z;

	GetPlayerPos(toid, X, Y, Z);

	if(phone_SleepMode[toid] != 1)
	{
		foreach ( new all : Player )
		{
			if(!IsPlayerNearPlayer(all, toid, 20.0))
				continue;

			PlayerPlaySound(all, 20600, X, Y, Z);
		}
	}

	new str[256];

	if(phone_IsOut[toid] == false)
    {
	    LoadPhone(toid);

	    phone_SelectedTile[toid] 	= 0;
	    phone_Screen[toid]          = 0;
	    phone_IsOut[toid]           = true;

	    EnterInfo(toid, "~w~Telefon mozes zatvorit prikazom ~b~/phone~w~ alebo kliknutim na tlacidlo ~b~BACK~w~!~n~Kurzor otvoris prikazom ~b~/pc~w~!");

	    phone_refreshTextdraw(toid);

	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(toid, PTD_phone_MENU[toid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(toid, PTD_phone_MESSAGES[toid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(toid, PTD_phone_OPTIONS[toid][x]);

	    format(str,256, "Incoming call from~n~%s", replaceChars(phone_getPlayerContact(toid, phone_getPlayerNumber(fromid))));
		PlayerTextDrawSetString(toid, PTD_phone_EXTRA[toid][1], str);

		PlayerTextDrawShow(toid, PTD_phone_EXTRA[toid][0]);
		PlayerTextDrawShow(toid, PTD_phone_EXTRA[toid][1]);
	}
	else
	{

	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(toid, PTD_phone_MENU[toid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(toid, PTD_phone_MESSAGES[toid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(toid, PTD_phone_OPTIONS[toid][x]);

	    format(str,256, "Incoming call from~n~%s", replaceChars(phone_getPlayerContact(toid, phone_getPlayerNumber(fromid))));
		PlayerTextDrawSetString(toid, PTD_phone_EXTRA[toid][1], str);

		PlayerTextDrawShow(toid, PTD_phone_EXTRA[toid][0]);
		PlayerTextDrawShow(toid, PTD_phone_EXTRA[toid][1]);
	}

	//SetTimerEx("hidephoneextra", 3000, false, "i", toid);

	return 1;
}

forward phone_timer_Dial_Failed(playerid); public phone_timer_Dial_Failed(playerid)
{

	ph_IsDialing[playerid] = false;
	SendClientMessage(playerid, COLOR_PHONE_MESSAGE, "[ PHONE ] enský hlas hovorí: Volané èíslo nie je dostupné!");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	RemovePlayerAttachedObject(playerid, 8);

	PlayerTextDrawHide(playerid, PTD_phone_EXTRA[playerid][0]);
	PlayerTextDrawHide(playerid, PTD_phone_EXTRA[playerid][1]);
	PlayerTextDrawHide(playerid, PTD_phone_EXTRA[playerid][2]);

	return 1;
}

function FriskCancel(var, var1) {
    if(friskZiadost[var][var1] != 1) return 1;
    friskZiadost[var][var1] = 0;
    SCFM(var, COLOR_GREY, "> Èas na potvrdenie iadosti o prehladanie vypral.");
	SCFM(var1, COLOR_GREY, "> Èas na potvrdenie iadosti o prehladanie vypral.");
	return 1;
}

function DregerCancel(var, var1) {
    if(dregerZiadost[var][var1] != 1) return 1;
    dregerZiadost[var][var1] = 0;
    SCFM(var, COLOR_GREY, "> Èas na potvrdenie iadosti o test na poitie alkoholu vypral.");
	SCFM(var1, COLOR_GREY, "> Èas na potvrdenie iadosti o test na poitie alkoholu vypral.");
	return 1;
}

function BazarSCancel(var, var1) {
    if(bazarsZiadost[var][var1] != 1) return 1;
    bazarsZiadost[var][var1] = 0;
    SCFM(var, COLOR_GREY, "> Èas na potvrdenie iadosti o predanie vozidla vypral.");
	SCFM(var1, COLOR_GREY, "> Èas na potvrdenie iadosti o predanie vozidla vypral.");
	return 1;
}

function BazarBCancel(var, var1) {
    if(bazarbZiadost[var][var1] != 1) return 1;
    bazarbZiadost[var][var1] = 0;
    SCFM(var, COLOR_GREY, "> Èas na potvrdenie iadosti o predanie vozidla bazaru vypral.");
	SCFM(var1, COLOR_GREY, "> Èas na potvrdenie iadosti o predanie vozidla bazaru vypral.");
	return 1;
}

function AlkoholCancel(var, var1) {
    if(flasaZiadost[var][var1] == 0) return 1;
    flasaZiadost[var][var1] = 0;
    SCFM(var, COLOR_GREY, "> Èas na potvrdenie iadosti o podanie alkoholu vypral.");
	SCFM(var1, COLOR_GREY, "> Èas na potvrdenie iadosti o podanie alkoholu vypral.");
	return 1;
}

function timer_ExpandFire()
{

    for( new i; i < sizeof fdFire; i++ )
	{
		if(fdFire[i][fdfire_Steps] < 1)
		    continue;

        if(fdFire[i][fdfire_Model] == 0)
			continue;

		if(fdFire[i][fdfire_Steps] > 6000)
		{
		    fdFire[i][fdfire_Steps] ++;
		    fdFire[i][fdfire_HP]    -= float(1 + random(5));

		    if(fdFire[i][fdfire_Steps] >= 6200 || fdFire[i][fdfire_HP] <= 0.0)
		    {
		        fdFire[i][fdfire_HP] 		= 0.0;
				fdFire[i][fdfire_Model] 	= 0;
				fdFire[i][fdfire_Steps] 	= 0;

				DestroyDynamicObject(fdFire[i][fdfire_ObjectID]);
				DestroyDynamic3DTextLabel(fdFire[i][fdfire_LabelID]);
				DestroyDynamicArea(fdFire[i][fdfire_AreaID]);

				continue;
		    }

		    new
			    tstr[ 8 ],
			    model = 0
			;

	        switch(fdFire[i][fdfire_Steps])
	        {
	            case 6090:
	                model = 18688;
	            case 6070:
	                model = 18691;
	            case 6045:
	                model = 18690;
	            case 6020:
					model = 18689;
	        }

	        format(tstr, sizeof tstr, "%.0f HP", fdFire[i][fdfire_HP]);

			UpdateDynamic3DTextLabelText(fdFire[i][fdfire_LabelID], 0xb03939ff, tstr);

			if(model != 0)
			{
			    DestroyDynamicObject(fdFire[i][fdfire_ObjectID]);
			    fdFire[i][fdfire_ObjectID] = CreateDynamicObject(model, fdFire[i][fdfire_X], fdFire[i][fdfire_Y], fdFire[i][fdfire_Z], 0.0, 0.0, 0.0, -1, -1, -1, 150.0, 135.0, -1, 5);
			}

			continue;
		}

		new
		    tstr[ 8 ],
		    model = 18691
		;

        fdFire[i][fdfire_Steps] ++;
        fdFire[i][fdfire_HP]    += float(1 + random(5));

        switch(fdFire[i][fdfire_Steps])
        {
            case 20:
                model = 18692;
            case 45:
                model = 18691;
            case 70:
                model = 18690;
            case 90:
				model = 18689;
        }

        switch(fdFire[i][fdfire_Steps])
        {
            case 60, 70, 80, 90, 100:
            {
                new
					freeid = -1;

				for( new ix; ix < sizeof fdFire; ix++ )
				{

					if(fdFire[ix][fdfire_Model] != 0)
						continue;

					freeid = ix;

					break;

				}

				if(freeid != -1)
				{
	            	new
						Float:X, Float:Y, ix = freeid;

					X 							= fdFire[i][fdfire_X] + (-3.0 + (random(300)/100.0));
					Y 							= fdFire[i][fdfire_Y] + (-3.0 + (random(300)/100.0));

					fdFire[ix][fdfire_Model] 	= model;
					fdFire[ix][fdfire_ObjectID] = CreateDynamicObject(18691, X, Y, fdFire[i][fdfire_Z], 0.0, 0.0, 0.0, -1, -1, -1, 150.0, 135.0, -1, 5);
					fdFire[ix][fdfire_AreaID]   = CreateDynamicSphere(X, Y, fdFire[i][fdfire_Z] + 2.5, 2.0);

					fdFire[ix][fdfire_X]		= X;
					fdFire[ix][fdfire_Y]		= Y;
					fdFire[ix][fdfire_Z]		= fdFire[i][fdfire_Z];

					fdFire[ix][fdfire_Steps]   	= fdFire[i][fdfire_Steps];
					fdFire[ix][fdfire_HP]		= 50.0;
				    fdFire[ix][fdfire_LabelID] 	= CreateDynamic3DTextLabel("50 HP", 0xb03939ff, X,Y, fdFire[i][fdfire_Z] + 3.0, 9.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0, -1, -1, -1, 15.0, -1, 10);
				}
			}
        }

        format(tstr, sizeof tstr, "%.0f HP", fdFire[i][fdfire_HP]);

		UpdateDynamic3DTextLabelText(fdFire[i][fdfire_LabelID], 0xb03939ff, tstr);

		if(model != 0)
		{
		    DestroyDynamicObject(fdFire[i][fdfire_ObjectID]);
		    fdFire[i][fdfire_ObjectID] = CreateDynamicObject(model, fdFire[i][fdfire_X], fdFire[i][fdfire_Y], fdFire[i][fdfire_Z], 0.0, 0.0, 0.0, -1, -1, -1, 150.0, 135.0, -1, 5);
		}
	}

	return 1;
}

function timer_RefreshWeed()
{
	for(new i; i < MAX_WEED; i++)
	{
	    if(strlen(weedEnum[i][weed_Owner]) < 4)
	        continue;

        RefreshWeed(i);
	}

	return 1;
}

function timer_DestroyLearnerVehicle(playerid, vehicleid)
{
	DMV_vehicleID[playerid] = 0;
	vEnum[vehicleid][v_Learner] = false;
	DestroyDynamicObject(vEnum[vehicleid][v_LearnerObj]);
	return DestroyVehicle(vehicleid);
}

function timer_AlarmOff(vehicleid, defaultLights)
{
	if(vEnum[vehicleid][v_Alarm] == 0)
	    return 0;

	vEnum[vehicleid][v_Alarm] = 0;

	KillTimer(vEnum[vehicleid][v_AlarmTimer_2]);

	SetVehicleParams(vehicleid, VEHICLE_TYPE_LIGHTS, defaultLights);

	return 1;
}

function timer_AlarmLightsOff(vehicleid)
{
    SetVehicleParams(vehicleid, VEHICLE_TYPE_LIGHTS, 0);

    if(vEnum[vehicleid][v_AlarmIcon] != -1)
 		DestroyDynamicMapIcon(vEnum[vehicleid][v_AlarmIcon]),
 		vEnum[vehicleid][v_AlarmIcon] = -1;

}

function timer_AlarmBeep(vehicleid)
{
    if(vEnum[vehicleid][v_Alarm] == 0)
    {
        KillTimer(vEnum[vehicleid][v_AlarmTimer_2]);
		if(vEnum[vehicleid][v_AlarmIcon] != -1)
		    DestroyDynamicMapIcon(vEnum[vehicleid][v_AlarmIcon]);

        vEnum[vehicleid][v_AlarmIcon] = -1;
	    return 0;
	}

	new
	    Float:Pos[3],
		Float:pPos[3]
	;

	GetVehiclePos(vehicleid, Pos[0], Pos[1], Pos[2]);

	SetVehicleParams(vehicleid, VEHICLE_TYPE_LIGHTS, 1);

	SetTimerEx("timer_AlarmLightsOff", 500, false, "i", vehicleid);

	if(vEnum[vehicleid][v_AlarmIcon] != -1)
 		DestroyDynamicMapIcon(vEnum[vehicleid][v_AlarmIcon]),
 		vEnum[vehicleid][v_AlarmIcon] = -1;
	else
 		vEnum[vehicleid][v_AlarmIcon] = CreateDynamicMapIcon(
		 														Pos[0], Pos[1], Pos[2],
 																0, 0xFF0000FF,
															 	GetVehicleVirtualWorld(vehicleid),
 																ex_GetVehicleInterior(vehicleid),
																-1,
													 			70.0, MAPICON_LOCAL, -1, 1
 		);

	new
	    Float:dist
	;

 	foreach ( new i : Player )
 	{
  		if(GetPlayerVirtualWorld(i) != GetVehicleVirtualWorld(vehicleid))
	        continue;

		if(GetPlayerInterior(i) != ex_GetVehicleInterior(vehicleid))
		    continue;

        GetPlayerPos(i, pPos[0], pPos[1], pPos[2]);

		dist = GetDistance(Pos[0], Pos[1], Pos[2], pPos[0], pPos[1], pPos[2]);

		if(dist > 70.0)
		    continue;

		new distex = floatround(dist, floatround_round);

		switch(distex)
		{
		    case 60..70:
		        PlayerPlaySound(i, 1147, pPos[0], pPos[1], pPos[2] + 15.0);

            case 45..59:
		        PlayerPlaySound(i, 1147, pPos[0], pPos[1], pPos[2] + 10.0);

            case 30..44:
		        PlayerPlaySound(i, 1147, pPos[0], pPos[1], pPos[2] + 7.0);

            case 15..29:
		        PlayerPlaySound(i, 1147, pPos[0], pPos[1], pPos[2] + 3.0);

			default:
		        PlayerPlaySound(i, 1147, pPos[0], pPos[1], pPos[2]);
		}
 	}

 	return 1;
}

function timer_Vyplata()
{

	foreach ( new i : Player )
	{

	    if(!IsPlayerLogged(i))
	        continue;

		if(GetPlayerFactionType(i) != FACTION_TYPE_LAW && GetPlayerFactionType(i) != FACTION_TYPE_FIRE && GetPlayerFactionType(i) != FACTION_TYPE_TAXI)
		    continue;

		if(!IsPlayerWorking(i))
			continue;

		if(GetPVarInt(i, "afk_mins") > 1)
		    continue;

        if(isInJail[i] == true || ic_isInJail[i]==true || isuserafk[i] != 0)
        {
            continue;
        }

        g_I_Vyplata[i] += 20;

	}

	return 1;
}

function timer_DestroyPlayerVehicle(vehicleid)
{
	return DestroyVehicle(vehicleid);
}

function timer_DestroyPopisLabel(labelid)
{

	new
	    Text3D:finallabel = Text3D:labelid;

	DestroyDynamic3DTextLabel(finallabel);

	return 1;

}

function timer_canDoVehAction(playerid)
{
    preventVehAction[playerid] = false;
}

function ac_stopEnterVeh(playerid)
{
    wasEnteringVehicle[playerid] = false;
}

function timer_BlinkLights(vehicleid, count, yesno) {
	switch(count) {
	    case 0: SetVehicleParams(vehicleid, VEHICLE_TYPE_LIGHTS, 1);
	    case 1: SetVehicleParams(vehicleid, VEHICLE_TYPE_LIGHTS, 0);
	    case 2: SetVehicleParams(vehicleid, VEHICLE_TYPE_LIGHTS, 1);
	    case 3: SetVehicleParams(vehicleid, VEHICLE_TYPE_LIGHTS, 0);
	    default: {
	        blinklights[vehicleid] = 0;
	        return SetVehicleParams(vehicleid, VEHICLE_TYPE_LIGHTS, yesno);
	    }
	}

	SetTimerEx("timer_BlinkLights", 200, false, "iii",vehicleid,count+1,yesno);
	return 1;
}

function timer_fixCamera(playerid)
{
	TogglePlayerControllable(playerid, 1);
	SetCameraBehindPlayer(playerid);

	ApplyAnimation(playerid, "PED", "SEAT_up", 2.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

function timer_StopItemPonuka(playerid, offeredid, item, quantity)
{
	cantManipulate[playerid] = false;

	if(invGive[playerid][0] == -1)
		return 0;

	invGive[playerid][0] = -1;
	invGive[playerid][1] = -1;

	if(!IsPlayerLogged(playerid) || !IsPlayerLogged(offeredid))
	    return 0;

	SCFM(playerid, COLOR_GREY, "> Ponuka na podanie itemu vyprala!");
	SCFM(offeredid, COLOR_GREY, "> Ponuka na podanie itemu vyprala!");

	return 1;
}

function timer_StopDrogPonuka(playerid, offeredid, item, quantity)
{
	cantManipulate[playerid] = false;

	if(invGive[playerid][0] == -1)
		return 0;

	invGive[playerid][0] = -1;
	invGive[playerid][1] = -1;

	if(!IsPlayerLogged(playerid) || !IsPlayerLogged(offeredid))
	    return 0;

	SCFM(playerid, COLOR_GREY, "> Ponuka na podanie drogy vyprala!");
	SCFM(offeredid, COLOR_GREY, "> Ponuka na podanie drogy vyprala!");

	return 1;
}

function timer_rst_KickPlayers()
{
    SendClientMessageToAll(COLOR_SERVER, "> Prebieha retart serveru, vyèkajte prosím, môe to trva do troch minút!");
    if(IsPlayerNPC(npcid_x))
    	Kick(npcid_x);

	foreach( new i : Player )
	{
		SetKickTimer(i);
	}
	
	SendRconCommand("password closage");
	
	SendRconCommand("unloadfs maps");
    SendRconCommand("unloadfs maps_interior");
    SendRconCommand("unloadfs vegetation");
    
	CallRemoteFunction("timer_SaveServerStats", "");
	
	new S_queryx[64];
	mysql_format(MYSQL,S_queryx, sizeof S_queryx, "UPDATE gm_stats SET models = '1'");
	mysql_query(MYSQL, S_queryx, false);
	return 1;
}

function timer_rst_Restart()
{
	if(IsPlayerNPC(npcid_x))
    	Kick(npcid_x);

	SendClientMessageToAll(COLOR_SERVER, "> Prebieha retart serveru, vyèkajte prosím, môe to trva do troch minút!");
    SendRconCommand("gmx");
    return 1;
}

function timer_UnTaze(playerid)
{

	SetPlayerDrunkLevel(playerid, 0);
	unStoppableAnim[playerid] = false;
	ClearAnimations(playerid, 1);

	return 1;
}

function timer_DestroyBlood(bloodid)
{

	format(bloodEnum[bloodid][blood_Owner], 30, "");
	DestroyDynamicObject(bloodEnum[bloodid][blood_ObjectID]);

	return 1;
}

function timer_BleedTimer(playerid)
{
	if(isBleeding[playerid] == false || B_dmg_IsInDS[playerid] == true)
	    return 0;

	new
	    Float:pocetzivotu = 0.05+randomF(0.9);

    PlayerDealDamage(playerid, pocetzivotu, 0, -1, -1);
    FadeColorForPlayer(playerid,255,0,0,255,0,0,0,0,2,1);

    new
        formattedString[64];

	format(formattedString, 64, "~w~Krvacanie rany ti ubera zivot!~n~~r~(%.1f HP)", pocetzivotu);

    EnterInfo(playerid, formattedString);
    SetTimerEx("timer_BleedTimer", 600+random(2600), false, "i", playerid);

    CreateBloodOnGround(playerid);

	return 1;
}

CreateBloodOnGround(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
        return 0;

	new
	    bloodid = -1;

	for(new i; i < MAX_BLOOD; i++)
	{
	    if(strlen(bloodEnum[i][blood_Owner]) > 0)
	        continue;

		bloodid = i;

		break;
	}

	if(bloodid == -1)
	    return 0;

    new
        Float:Pos[3];

    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

    bloodEnum[bloodid][blood_X] = Pos[0];
    bloodEnum[bloodid][blood_Y] = Pos[1];
    bloodEnum[bloodid][blood_Z] = Pos[2];

    bloodEnum[bloodid][blood_VW] = GetPlayerVirtualWorld(playerid);
    bloodEnum[bloodid][blood_INT] = GetPlayerInterior(playerid);

	format(bloodEnum[bloodid][blood_Owner], 30, ReturnName(playerid));
	bloodEnum[bloodid][blood_ObjectID] = CreateDynamicObject(19836, Pos[0], Pos[1], Pos[2] - 0.99, 0, 0, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 20.0, 15.0, -1, 2);
    bloodEnum[bloodid][blood_TimerID] = SetTimerEx("timer_DestroyBlood", BLOOD_TIME_SEC*1000, false, "i", bloodid);

	return 1;
}

function timer_DisableVehicleHack(playerid)
{
    isAntiVhpUsed[playerid] = false;

    return;
}

function timer_DisableHealthHack(playerid)
{
    isAntiHPUsed[playerid] = false;

    return;
}

function timer_DisableArmourHack(playerid)
{
    isAntiARUsed[playerid] = false;

    return;
}

function timer_StopChatAnim(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
    return 1;
}

function timer_RybaritTimer(playerid)
{
	if(rybari[playerid] == false)
		return 0;

    EnterInfo(playerid, " ", 1, 10000);

    TogglePlayerControllable(playerid, 1);
    rybari[playerid] = false;

    if(!IsPlayerInDynamicMenu(playerid, menut_brigada_rybarit))
        return EnterInfo(playerid, "Nestojis pri prute!");

	new
	    ryba = random(100000),
		rybaN[30],
		Float:rybaHM,
		S_string[256],
		isMoney;

	switch(ryba)
	{
	    case 0..14999:
	    {
	        strcat(rybaN, "Kapra");
	        rybaHM = (1.138 + randomF(14.8 - 1.138));
		}

		case 15000..29999:
		{
		    strcat(rybaN, "Lieò");
		    rybaHM = (0.34 + randomF(2.27-0.34));
		}

		case 30000..43999:
		{
		    strcat(rybaN, "uku");
		    rybaHM = (1.540 + randomF(15.8-1.54));
		}

		case 44000..59999:
		{
		    strcat(rybaN, "Amura");
		    rybaHM = (2.9 + randomF(12.90-2.9));
		}

		case 60000..64999:
		{
		    strcat(rybaN, "Pleskaèa");
			rybaHM = (0.25 + randomF(2.18-0.25));
		}

		case 65000..72999:
		{
		    strcat(rybaN, "Lipòa");
		    rybaHM = (0.18 + randomF(1.23-0.18));
		}

		case 73000..74999:
		{
			strcat(rybaN, "Pstruha jazerného");
			rybaHM = (1.3 + randomF(5.80-1.3));
		}

		case 75000..79999:
		{
			strcat(rybaN, "Sumca ve¾keho");
			rybaHM = (3.37 + randomF(24.8-3.37));
		}

		case 80000..84999:
		{
			strcat(rybaN, "Tolstolobika");
			rybaHM = (2.11 + randomF(33.7-2.11));
		}

		case 85000..89999:
		{
			strcat(rybaN, "Zubáèa ve¾kého");
			rybaHM = (1.24 + randomF(10.9-1.24));
		}

		case 90000..90999:
		{
			strcat(rybaN, "Mrenu");
			rybaHM = (0.89 + randomF(4.86-0.89));
		}

		case 91000..91999:
		{
			strcat(rybaN, "Úhora");
			rybaHM = (0.48 + randomF(2.55-0.48));
		}

		case 92000:
		{
			strcat(rybaN, "Ve¾rybu");
			rybaHM = (7000.0 + randomF(150000.0-7000.0));
		}

		case 92001:
		{
			strcat(rybaN, "polis");
	        rybaHM = (0.0);
	        isMoney = 5;
		}

	    case 92002..92999:
	    {
	        strcat(rybaN, "peòaenku");
	        rybaHM = (40.0 + randomF(660.0));
	        isMoney = 1;
	    }

	    case 93000..93999:
	    {
	        strcat(rybaN, "kufrík s peniazmi");
	        rybaHM = (800.0 + randomF(1200.0));
	        isMoney = 1;
	    }

	    case 94000..94500:
	    {
	        strcat(rybaN, "starú vázu");
	        rybaHM = (800.0 + randomF(1200.0));
	        isMoney = 2;
	    }

	    case 94501:
	    {
	        strcat(rybaN, "vikingskú prilbu");
	        rybaHM = (10000.0 + randomF(30000.0));
	        isMoney = 4;
	    }

	    case 94502..100000:
	    {
	        isMoney = 3;
	    }

	    default:
	    {
	        strcat(rybaN, "Mieòa");
	        rybaHM = (0.121 + randomF(2.268));
	    }
	}

	switch(isMoney)
	{
	    case 0:
		{
	        format(S_string, 256, "Navil si prut, pozrel si sa èo na òom je a zbadal si %s s hmotnosou %.3f kíl!", rybaN, rybaHM);

	        SetPlayerInventoryItem(playerid, inv_rybyKG, GetPlayerInventoryItem(playerid, inv_rybyKG) + rybaHM);
	    }
	    case 1:
	    {
	        format(S_string, 256, "Navil si prut, pozrel si sa èo na òom je a zbadal si %s s %d dolármi!", rybaN, floatround(rybaHM, floatround_round));

	        ex_GivePlayerMoney(playerid, floatround(rybaHM, floatround_round));
	        money_work[playerid] += floatround(rybaHM, floatround_round);
		}
		case 2:
	    {
	        format(S_string, 256, "Navil si prut, pozrel si sa èo na òom je a zbadal si %s!", rybaN);
	    }
	    case 3:
	    {
	        format(S_string, 256, "Navil si prut no niè na òom nebolo!");
	    }
	    case 4:
	    {
	        format(S_string, 256, "Navil si prut, pozrel si sa èo na òom je a zbadal si %s (transformované do %d$)!", rybaN, floatround(rybaHM, floatround_round));
	        ex_GivePlayerMoney(playerid, floatround(rybaHM, floatround_round));
	        money_work[playerid] += floatround(rybaHM, floatround_round);
	    }
	    case 5:
	    {
	        format(S_string, 256, "Navil si prut, pozrel si sa èo na òom je a zbadal si Polisa, ktorý ti ukradol vetky ryby a skoèil do mora!");
	        SetPlayerInventoryItem(playerid, inv_rybyKG, 0.0);
	    }
	}

	SendSuccess(playerid, S_string);
	return 1;
}

function timer_nosCheck(playerid)
{
	if(B_playerNos[playerid] == false) return 0;
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	    B_playerNos[playerid] = false;
	    return 0;
	}

	if(vEnum[GetPlayerVehicleID(playerid)][v_Nitrous] - 0.555555555555555 < 0.1)
	{
	    vEnum[GetPlayerVehicleID(playerid)][v_Nitrous] = 0.0;
	    RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	    B_playerNos[playerid] = false;
	}
	else
	{
	    vEnum[GetPlayerVehicleID(playerid)][v_Nitrous] -= 0.555555555555555;
	    AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	    B_playerNos[playerid] = true;
	}

	SetTimerEx("timer_nosCheck", 333, 0, "i", playerid);
	return 1;
}

function timer_lightsCheck(playerid)
{
	if(B_playerLights[playerid] == false) return 0;
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    B_playerLights[playerid] = false;
	    return 0;
	}

	B_playerLights[playerid] = false;

	SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_LIGHTS, 1);
	return 1;
}

function timer_engineCheck(playerid)
{
	if(B_playerEngine[playerid] == false) return 0;
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    B_playerEngine[playerid] = false;
	    return 0;
	}

	B_playerEngine[playerid] = false;

	SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_LIGHTS, 1);
	return 1;
}

function timer_CanUseY(playerid)
{
    cantUseY[playerid] = false;
    return 1;
}

function UnFreezePlayer(playerid) {
    TogglePlayerControllable(playerid, 1);

    new Float:p[3]; GetPlayerPos(playerid, p[0], p[1], p[2]); SetPlayerPos(playerid, p[0], p[1], p[2]+0.1);
    return 1;
}

function timer_EnterInfo(playerid)
{
	KillTimer(I_timer_EnterInfo[playerid]);
    I_timer_EnterInfoP[playerid] = 0;
    I_timer_EnterInfo[playerid] = -1;

    PlayerTextDrawHide(playerid, enterInfoTD[playerid]);
    return 1;
}

function timer_StandUpTutorial(playerid)
{
    unStoppableAnim[playerid] = false;
    ClearAnimations(playerid, 1);

	ApplyAnimation(playerid, "PED", "SEAT_up", 2.1, 0, 0, 0, 0, 0, 1);
    return 1;
}

fix_SetPlayerCheckpoint(playerid, Float:x, Float:y, Float:z, Float:size, cpid = -1)
{
	SetTimerEx("SetPlayerCheckpointfix", 500, false, "dffffd", playerid, x, y, z, size, cpid);
	return 1;
}

function SetPlayerCheckpointfix(playerid, Float:x, Float:y, Float:z, Float:size, cpid)
{
	if(cpid != -1) g_I_playerCheckpoint[playerid] = cpid;
	return SetPlayerCheckpoint(playerid, x, y, z, size);
}

function timer_PickUpCrate_PC(playerid) // ulièka v Palomino Creek
{
    RemovePlayerAttachedObject(playerid, 9);
	SetPlayerSpecialAction(playerid, 25);
	SetPlayerAttachedObject(playerid, 9, 2912, 5, -0.173999, 0.232999, 0.250000, -0.999999, 102.399948, 6.799987, 0.652000, 0.660999, 0.627000);

	new S_str[144];

	if(GetPlayerGender(playerid) == 1)
		format(S_str, 144, "* %s sa zohol a pevne chytil krabicu do oboch rúk. *", GetPlayerNameEx(playerid, USE_MASK));
	else
	    format(S_str, 144, "* %s sa zohla a pevne chytila krabicu do oboch rúk. *", GetPlayerNameEx(playerid, USE_MASK));

	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

	SendSuccess(playerid, "Zobral si krabicu! Odnes ju na vyznaèené miesto.");

	DisablePlayerCheckpoint(playerid);
    g_I_playerCheckpoint[playerid] = checkp_brigada_krabicePC_1;
	fix_SetPlayerCheckpoint(playerid, 2318.521, 8.227, 26.484, 1.0); // ulièka v Palomino Creek
	return 1;
}

function timer_PutDownCrate_PC(playerid) // ulièka v Palomino Creek
{

    RemovePlayerAttachedObject(playerid, 9);
	SetPlayerSpecialAction(playerid, 0);

	new S_str[144];

	if(GetPlayerGender(playerid) == 1)
		format(S_str, 144, "* %s sa zohol a opatrne poloil krabicu na zem. *", GetPlayerNameEx(playerid, USE_MASK));
	else
	    format(S_str, 144, "* %s sa zohla a opatrne poloila krabicu na zem. *", GetPlayerNameEx(playerid, USE_MASK));

	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

	SendSuccess(playerid, "Doniesol si krabicu, vrá sa po svoje peniaze!");

	DisablePlayerCheckpoint(playerid);
	g_I_playerCheckpoint[playerid] = checkp_brigada_krabicePC_2;
	fix_SetPlayerCheckpoint(playerid, 2323.810, 60.239, 26.492, 1.0); // ulièka v Palomino Creek
	return 1;

}

function timer_PickUpCrate_MG(playerid) // ulièka v Montgomery
{
    RemovePlayerAttachedObject(playerid, 9);
	SetPlayerSpecialAction(playerid, 25);
	SetPlayerAttachedObject(playerid, 9, 2912, 5, -0.173999, 0.232999, 0.250000, -0.999999, 102.399948, 6.799987, 0.652000, 0.660999, 0.627000);

	new S_str[144];

	if(GetPlayerGender(playerid) == 1)
		format(S_str, 144, "* %s sa zohol a pevne chytil krabicu do oboch rúk. *", GetPlayerNameEx(playerid, USE_MASK));
	else
	    format(S_str, 144, "* %s sa zohla a pevne chytila krabicu do oboch rúk. *", GetPlayerNameEx(playerid, USE_MASK));

	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

	SendSuccess(playerid, "Zobral si krabicu! Odnes ju na vyznaèené miesto.");

	DisablePlayerCheckpoint(playerid);
    g_I_playerCheckpoint[playerid] = checkp_brigada_krabiceMG_1;
	fix_SetPlayerCheckpoint(playerid, 1370.247, 201.370, 19.554, 1.0); // ulièka v Montgomery
	return 1;
}

function timer_PutDownCrate_MG(playerid) // ulièka v Montgomery
{

    RemovePlayerAttachedObject(playerid, 9);
	SetPlayerSpecialAction(playerid, 0);

	new S_str[144];

	if(GetPlayerGender(playerid) == 1)
		format(S_str, 144, "* %s sa zohol a opatrne poloil krabicu na zem. *", GetPlayerNameEx(playerid, USE_MASK));
	else
	    format(S_str, 144, "* %s sa zohla a opatrne poloila krabicu na zem. *", GetPlayerNameEx(playerid, USE_MASK));

	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

	SendSuccess(playerid, "Doniesol si krabicu, vrá sa po svoje peniaze!");

	DisablePlayerCheckpoint(playerid);
	g_I_playerCheckpoint[playerid] = checkp_brigada_krabiceMG_2;
	fix_SetPlayerCheckpoint(playerid, 1299.758, 214.515, 19.554, 1.0); // ulièka v Montgomery
	return 1;

}

function timer_DeathAllow(playerid, isDeath)
{

	KillTimer(T_timer_deathTimer[playerid]);
	T_timer_deathTimer[playerid] = -1;
	B_allowDeath[playerid] = true;
	if(isDeath == 0)
	{
	    SendClientMessage(playerid, /*0xB33C3CFF*/0xD0D0D0FF, "> Tvoj charakter zomrel! Pre viac informácií poui /damages [tvoje id].");
		SendClientMessage(playerid, /*0xB33C3CFF*/0xD0D0D0FF, "> Môe poui príkaz /death alebo /accept death.");
	}
	else
	{
		SendClientMessage(playerid, /*0xB33C3CFF*/0xD0D0D0FF, "> Môe poui príkaz /death alebo /accept death.");
	}
	return 1;
}

function timer_CheckCrates()
{
	foreach ( new playerid : Player )
	{

	    if(!IsPlayerLogged(playerid))
	        continue;

		new
		    Query[128],
			Cache:cache;

		mysql_format(MYSQL, Query, sizeof Query, "SELECT * FROM gm_crates WHERE Owner = '%e' AND UnixArrive < %d LIMIT 1",
		    ReturnName(playerid), gettime());

		cache = mysql_query(MYSQL, Query);

		if(cache_num_rows() <= 0)
		{
		    cache_delete(cache);

		    continue;
		}

		new
		    Weapon_1,
		    Weapon_2,
		    Weapon_3,
		    Weapon_4,
		    Weapon_5,

		    Kevlar_1,
		    Kevlar_2,
		    Kevlar_3
		;

		cache_get_value_name_int(0, "Weapon_1", Weapon_1);
		cache_get_value_name_int(0, "Weapon_2", Weapon_2);
		cache_get_value_name_int(0, "Weapon_3", Weapon_3);
		cache_get_value_name_int(0, "Weapon_4", Weapon_4);
		cache_get_value_name_int(0, "Weapon_5", Weapon_5);

		cache_get_value_name_int(0, "Kevlar_1", Kevlar_1);
		cache_get_value_name_int(0, "Kevlar_2", Kevlar_2);
		cache_get_value_name_int(0, "Kevlar_3", Kevlar_3);

	    cache_delete(cache);

	    mysql_format(MYSQL, Query, sizeof Query, "DELETE FROM gm_crates WHERE Owner = '%e' AND UnixArrive < %d LIMIT 1",
		    ReturnName(playerid), gettime());

		mysql_query(MYSQL, Query, false);

	    CreateCrate(ReturnName(playerid), Weapon_1, Weapon_2, Weapon_3, Weapon_4, Weapon_5, Kevlar_1, Kevlar_2, Kevlar_3, playerid, 1);

	    continue;
	}

	return 1;
}

////////////////////////////////////////////////////////////////////////////////

function tautosave_AnawaltKontrakt()
{
	new
	    S_query[64]
	;

    if(cache_num_rows()>0)
	{
	
	    new
			datefin
		;
	    cache_get_value_name_int(0, "datefin", datefin);
	    
	    if(datefin <= gettime())
	    {
	    
	        new
				cena
			;
			
	        cache_get_value_name_int(0,"price",cena);

	        for(new f; f < MAX_FACTIONS; f++)
		 	{
		  		if(strlen(factEnum[f][fact_Name]) < 3) continue;
			    if(factEnum[f][fact_Type] == FACTION_TYPE_WOODCUTTER) {
		     		factEnum[f][fact_Cash] -= (cena*2);
		       		break;
			    }
		    }

		    foreach( new x : Player )
			{
		 		if(GetPlayerFactionType(x) != FACTION_TYPE_WOODCUTTER)
		   			continue;

				if(GetPlayerFactionType(x) == FACTION_TYPE_WOODCUTTER)
		  			continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] Kontrakt za %d$ bol neúspený, firma zaplatila poplatok %d$!", cena,cena*2);
			}

		    mysql_format(MYSQL, S_query, sizeof S_query, "UPDATE anawalt_kontrakt SET finished = 2 WHERE finished = 0");
			mysql_tquery(MYSQL, S_query);
			
	    }
	    
	}
	
	return 1;
}

autosave_AnawaltKontrakt()
{
	new
		S_query[64]
	;
	
    mysql_format(MYSQL, S_query, sizeof S_query, "SELECT * FROM anawalt_kontrakt WHERE finished = 0");
	mysql_tquery(MYSQL, S_query, "tautosave_AnawaltKontrakt", "");
	
	return 1;
}

////////////////////////////////////////////////////////////////////////////////

autosave_PlayerAccounts()
{

    foreach( new i : Player )
	{
	    if(!IsPlayerLogged(i)) continue;
	    SavePlayerData(i);
	}
	
	return 1;
	
}

////////////////////////////////////////////////////////////////////////////////

autosave_Businesses()
{

	new
		S_query[512 + 256]
	;

	pocetBiznisov = 0;
	
	foreach( new i : Businesses )
	{
	    if(businessEnum[i][bz_Address] < MIN_BUSINESS_ADDRESS) continue;

	    pocetBiznisov ++;

		mysql_format(
			MYSQL, S_query, sizeof S_query,
			
			"UPDATE gm_businesses SET Name = '%e', Owner = '%e', SecOwner = '%e', InteriorID = '%d', IsLocked = '%d', MusicAddress = '%e', BuyPrice = '%d', BusinessType = '%d', EntryFee = '%d', Storage = '%d', Tovar = '%d' WHERE VirtualWorld = '%d'",

			businessEnum[i][bz_Name],
		    businessEnum[i][bz_Owner],
		    businessEnum[i][bz_SecOwner],
		    businessEnum[i][bz_InteriorID],
		    businessEnum[i][bz_IsLocked],
		    businessEnum[i][bz_MusicAddress],
		    businessEnum[i][bz_BuyPrice],
		    businessEnum[i][bz_BusinessType],
		    businessEnum[i][bz_EntryFee],
		    businessEnum[i][bz_Storage],
		    businessEnum[i][bz_Tovar],

		    businessEnum[i][bz_Address]
		);

		mysql_tquery(MYSQL, S_query);
	}
	
	return 1;
}

////////////////////////////////////////////////////////////////////////////////

autosave_Houses()
{

	new
	    S_query[ 512 ]
	;

	pocetDomov = 0;

	foreach( new i : Houses )
	{
	    if(houseEnum[i][ho_PSC] < MIN_HOUSE_ADDRESS) continue;

	    pocetDomov ++;

	    if(houseEnum[i][ho_IsRental] == 1 && houseEnum[i][ho_RentTo] <= gettime() && strlen( houseEnum[i][ho_Owner]) > 4)
	    {
	        FormatLog(log_type_admin, "Domu %s (%d) - %s) expiroval prenajom! (hrac: %s)", houseEnum[i][ho_Street], houseEnum[i][ho_Number], houseEnum[i][ho_City], houseEnum[i][ho_Owner]);

            houseEnum[i][ho_RentTo] = 0;

            format(houseEnum[i][ho_Owner], 30, "Ne");
            format(houseEnum[i][ho_SecOwner], 30, "Ne");
            houseEnum[i][ho_IsLocked] = 0;

            ReloadHouseLabel(i);
	    }

		mysql_format(
			MYSQL, S_query, sizeof S_query,

			"UPDATE gm_houses SET Street = '%e', City = '%e', Number = '%d', Owner = '%e', SecOwner = '%e', InteriorID = '%d', IsLocked = '%d', BuyPrice = '%d', RentTo = '%d' WHERE PSC = '%d'",

			houseEnum[i][ho_Street],
            houseEnum[i][ho_City],
            houseEnum[i][ho_Number],
            houseEnum[i][ho_Owner],
            houseEnum[i][ho_SecOwner],
            houseEnum[i][ho_InteriorID],
            houseEnum[i][ho_IsLocked],
            houseEnum[i][ho_BuyPrice],
            houseEnum[i][ho_RentTo],

			houseEnum[i][ho_PSC]
		);

		mysql_tquery(MYSQL, S_query);
	}

	return 1;
}

////////////////////////////////////////////////////////////////////////////////

autosave_Garages()
{

	new
		S_query[ 512 ]
	;

	pocetGarazi = 0;

	foreach( new i : Garages )
	{
	    if(garageEnum[i][ga_PSC] < MIN_GARAGE_ADDRESS) continue;

	    pocetGarazi ++;

		mysql_format(
			MYSQL, S_query, sizeof S_query,
			
			"UPDATE gm_garages SET Street = '%e', City = '%e', Number = '%d', Owner = '%e', SecOwner = '%e', InteriorID = '%d', IsLocked = '%d', BuyPrice = '%d', AssignedHouse = '%d' WHERE PSC = '%d'",
			
            garageEnum[i][ga_Street],
            garageEnum[i][ga_City],
            garageEnum[i][ga_Number],
            garageEnum[i][ga_Owner],
            garageEnum[i][ga_SecOwner],
            garageEnum[i][ga_InteriorID],
            garageEnum[i][ga_IsLocked],
            garageEnum[i][ga_BuyPrice],
            garageEnum[i][ga_AssignedHouse],

			garageEnum[i][ga_PSC]
		);

		mysql_tquery(MYSQL, S_query);
	}

	return 1;
}

////////////////////////////////////////////////////////////////////////////////

autosave_Vehicles_Player()
{

	foreach (new i : Vehicle)
	{
	    if(GetVehicleModel(i) < 400) 		continue;
		if(GetVehicleFaction(i) != 0) 		continue;
		if(strlen(vEnum[i][v_Owner]) < 1) 	continue;

		SavePlayerVehicle(i, 0);
	}
	
	return 1;
}

////////////////////////////////////////////////////////////////////////////////

function tautosave_Vehicles_Faction(vehicleid)
{

	if(cache_num_rows() < 1) return 0;
	
	new
	    color1,
	    color2,
	    Float:health,
	    
	    panels,
	    doors,
	    lights,
	    tires,
	    
	    S_query[ 1024 ]
	;
	
	////////////////////////////////////////////////////////////////////////////

	sys_GetVehicleColor(vehicleid, color1, color2);
	vhac_GetVehicleHealth(vehicleid, health);
	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

	////////////////////////////////////////////////////////////////////////////

    mysql_format(
		MYSQL, S_query, sizeof S_query,
		"UPDATE faction_vehicles SET Color1='%d',Color2='%d',Paintjob='%d',MileAge='%f',Nitrous='%f',Fuel='%d',Battery='%d',Health='%f',NoBreakin='%d',PlexWindows='%d' WHERE SPZ='%e'",

		color1,
		color2,
		
		vehicleData[vehicleid][gVeh_Paintjob],
		vEnum[vehicleid][v_MileAge],
		vEnum[vehicleid][v_Nitrous],
		vEnum[vehicleid][v_Fuel],
		vEnum[vehicleid][v_Battery],
		
		health,
		
		vEnum[vehicleid][v_NoBreakin],
		vEnum[vehicleid][v_TitWindows],
		vEnum[vehicleid][v_SPZ]
	);
	
 	mysql_tquery(MYSQL, S_query);
 	
 	////////////////////////////////////////////////////////////////////////////

	mysql_format(
		MYSQL, S_query, sizeof S_query,
		"UPDATE faction_vehicles SET dmg_Panels='%d',dmg_Doors='%d',dmg_Lights='%d',dmg_Tires='%d',def_Health='%.1f',TaxameterItem='%d',CarRadio='%d',AlarmItem='%d',Sun_LDoor='%d',Sun_RDoor='%d',Sun_Hood='%d',Sun_Boot='%d',Sun_FBumper='%d',Sun_RBumper='%d' WHERE SPZ='%e'",

		panels,
		doors,
		lights,
		tires,

		vEnum[vehicleid][v_def_Health],
		vEnum[vehicleid][v_TaxameterItem],
		vEnum[vehicleid][v_CarRadio],
		vEnum[vehicleid][v_AlarmItem],
		
		vEnum[vehicleid][v_Sun_LDoor],
		vEnum[vehicleid][v_Sun_RDoor],
		vEnum[vehicleid][v_Sun_Hood],
		vEnum[vehicleid][v_Sun_Boot],
		vEnum[vehicleid][v_Sun_FBumper],
		vEnum[vehicleid][v_Sun_RBumper],

		vEnum[vehicleid][v_SPZ]
	);
	
	mysql_tquery(MYSQL, S_query);
	
	////////////////////////////////////////////////////////////////////////////

	mysql_format(
		MYSQL, S_query, sizeof S_query,

		"UPDATE faction_vehicles SET Oil='%f',Bazar_Price='%d',Bazar_Buyout='%d',Bazar_DateAdded='%d',Bazar_BoughtFor='%d',Bazar_AddedBy='%e',Bazar_Desc='%e' WHERE SPZ='%e'",

		vEnum[vehicleid][v_Oil],

		vEnum[vehicleid][v_bazar_Price],
        vEnum[vehicleid][v_bazar_Buyout],
        vEnum[vehicleid][v_bazar_DateAdded],
        vEnum[vehicleid][v_bazar_BoughtFor],
        vEnum[vehicleid][v_bazar_AddedBy],
        vEnum[vehicleid][v_bazar_Desc],

		vEnum[vehicleid][v_SPZ]
	);
	
	mysql_tquery(MYSQL, S_query);
	
	////////////////////////////////////////////////////////////////////////////

	format(S_query, sizeof S_query, "UPDATE faction_vehicles SET ");

	new
	    tempString[32]
	;

	for(new ix; ix < 14; ix++)
	{
	    if(ix > 13)
	        break;

		if(ix != 0)
		{
		    format(tempString, sizeof tempString, ",tune_Slot%d='%d'", ix, GetVehicleComponentInSlot(vehicleid, ix));
		}
		else
		{
		    format(tempString, sizeof tempString, "tune_Slot%d='%d'", ix, GetVehicleComponentInSlot(vehicleid, ix));
		}

		strcat(S_query, tempString);
	}

	mysql_format(MYSQL, tempString, sizeof tempString, " WHERE SPZ = '%e'", vEnum[vehicleid][v_SPZ]);
	strcat(S_query, tempString);
	
    mysql_tquery(MYSQL, S_query);
    
    ////////////////////////////////////////////////////////////////////////////

	return 1;
}

autosave_Vehicles_Faction()
{

	new
	    S_query[128]
	;

	foreach ( new i : Vehicle )
	{

	    if(GetVehicleModel(i) < 400)	continue;
		if(GetVehicleFaction(i) == 0)	continue;

		mysql_format(
			MYSQL, S_query, sizeof S_query,
			"SELECT Model FROM faction_vehicles WHERE SPZ = '%e'",

			vEnum[i][v_SPZ]
		);
		mysql_tquery(MYSQL, S_query, "tautosave_Vehicles_Faction", "d", i);
		
	}

	return 1;
}

////////////////////////////////////////////////////////////////////////////////

autosave_ServerStats()
{

	new
	    S_query[ 1024 ]
	;

    mysql_format(
		MYSQL, S_query, sizeof(S_query),

		"UPDATE gm_stats SET lOOC='%d',gOOC='%d',gm_Lines='%d',gm_Version='%e',gm_Objects='%d',gm_Vehicles='%d',gm_Author='%e',gm_MaxRPLvl='%d',gm_MaxRPLvlN = '%e',gm_Commands='%d',gm_playRecord='%d',Register_Money='%d',Register_Golds='%d',playt='%d',playtN='%e'",

		I_gm_localOOC,
        I_gm_globalOOC,
		strval(GM_LINES),
		GM_VERSION,
		CountDynamicObjects(),
		CountTotalVehicles(),
		GM_AUTHOR,
		g_stats_maxRoleplayLevel,
		g_stats_maxRoleplayLevelN,
		GM_COMMANDS,
		I_gm_playerRecord,
        Register_Money,
		Register_Golds,
		
		g_stats_playTime,
		g_stats_playTimeN
		);

	mysql_tquery(MYSQL, S_query);

	return 1;
}

////////////////////////////////////////////////////////////////////////////////

autosave_Gas_Station()
{

	new
		S_query[512]
	;

    for(new i; i < MAX_FUEL_STATIONS; i++)
	{
		if(fuelEnum[i][fuel_assig_biz] == 0) continue;

        mysql_format(
			MYSQL, S_query, sizeof S_query,

			"UPDATE gm_business_fuel SET Price_Benzin='%f',Price_Diesel='%f',Price_Kerosin='%f',Price_LPG='%f',Storage_Benzin='%d',Storage_Diesel='%d',Storage_Kerosin='%d',Storage_LPG='%d' WHERE CisloBoxu = '%e'",

			fuelEnum[i][fuel_pr_benzin],
            fuelEnum[i][fuel_pr_diesel],
            fuelEnum[i][fuel_pr_kerosin],
            fuelEnum[i][fuel_pr_lpg],

            fuelEnum[i][fuel_st_benzin],
            fuelEnum[i][fuel_st_diesel],
            fuelEnum[i][fuel_st_kerosin],
            fuelEnum[i][fuel_st_lpg],

			fuelEnum[i][fuel_cislo_boxu]);

		mysql_tquery(MYSQL, S_query);
	}

	return 1;
}

////////////////////////////////////////////////////////////////////////////////

/*
	* autosave_AnawaltKontrakt();
	* autosave_PlayerAccounts();
	* autosave_Businesses();
	* autosave_Houses();
	* autosave_Garages();
	* autosave_Vehicles_Player();
	* autosave_Vehicles_Faction();
	* autosave_ServerStats();
	* autosave_Gas_Station();
*/

function timer_SaveServerStats()
{
	autosave_PlayerAccounts();
	
	autosave_Vehicles_Player();
	
	autosave_Houses();
	autosave_Businesses();
	autosave_Garages();
	
	autosave_Vehicles_Faction();
	
	autosave_ServerStats();
	autosave_AnawaltKontrakt();
	autosave_Gas_Station();

	return 1;
}

////////////////////////////////////////////////////////////////////////////////

function timer_FuelDecrease()
{
	foreach( new i : Vehicle )
	{
	    if(!IsValidVehicle(i))
	        continue;

		if(strlen(vEnum[i][v_Owner]) < 2)
		    format(vEnum[i][v_Owner], 25, "Neni");

		if(vehicleFuelTypes[GetVehicleModel(i)-400] == FUEL_NOFUEL)
		{
		    vEnum[i][v_FuelType] = FUEL_NOFUEL;
		    vEnum[i][v_Fuel] = 100;
		    vEnum[i][v_Battery] = 1000;
		    vEnum[i][v_Oil] = 100.0;
		    continue;
		}

		if(GetVehicleParams(i, VEHICLE_TYPE_ENGINE) == 1)
		{

		    if(vEnum[i][v_Oil] > 0.84)
		        vEnum[i][v_Oil] -= 0.84;
			else
			{
			    vEnum[i][v_Oil] = 0.0;

				new
					Float:vHP
				;

				vhac_GetVehicleHealth(i, vHP);

				if(vHP > 252.0)
				    SetVehicleHealth(i, 251.9);

                SetVehicleParams(i, VEHICLE_TYPE_ENGINE, 0);

                new
		            S_string[148], Float:Pos[3];

				GetVehiclePos(i, Pos[0], Pos[1], Pos[2]);

				format(S_string, 148, "* Motor sa zadrel a vypol sa. (( %s ))", GetVehicleName(i));

				foreach( new playerid : Player )
				{
				    if(GetPlayerInterior(playerid) != vehicleData[i][gVeh_Interior])
				        continue;

					if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i))
					    continue;

					if(!IsPlayerInRangeOfPoint(playerid, ME_CHAT_RANGE, Pos[0], Pos[1], Pos[2]))
					    continue;

					SendClientMessage(playerid, COLOR_VIOLET, S_string);
				}
			}

		    if(vEnum[i][v_Battery] + 1 <= 1000)
		    {
		        // Nabíja batériu do 1000HP.

		        vEnum[i][v_Battery] ++;

		    }

		    if(vEnum[i][v_Fuel] - 1 < 1)
		    {
		        // Ak bude ma vozidlo prázdnu nádr.

		        vEnum[i][v_Fuel] = 0;
		        vEnum[i][v_FuelType] = FUEL_NOFUEL;
		        SetVehicleParams(i, VEHICLE_TYPE_ENGINE, 0);

		        new
		            S_string[148], Float:Pos[3];

				GetVehiclePos(i, Pos[0], Pos[1], Pos[2]);

				format(S_string, 148, "* Motor zdochol. (( %s ))", GetVehicleName(i));

				foreach( new playerid : Player )
				{
				    if(GetPlayerInterior(playerid) != vehicleData[i][gVeh_Interior])
				        continue;

					if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i))
					    continue;

					if(!IsPlayerInRangeOfPoint(playerid, ME_CHAT_RANGE, Pos[0], Pos[1], Pos[2]))
					    continue;

					SendClientMessage(playerid, COLOR_VIOLET, S_string);
				}

		    }
		    else
		    {
		        vEnum[i][v_Fuel] --;
			}

			continue;
		}

		if(GetVehicleParams(i, VEHICLE_TYPE_LIGHTS) == 1)
		{

		    // Míòa batériu automaticky, ak je vypnutý motor a zapnuté svetlá.

		    if(vEnum[i][v_Battery] - 1 <= 0)
		    {
		        vEnum[i][v_Battery] = 0;
		        SetVehicleParams(i, VEHICLE_TYPE_LIGHTS, 0);
		    }
		    else
		    {
		        vEnum[i][v_Battery] --;
		    }
		}
	}
	return 1;
}

new hadnitro[MAX_VEHICLES];
//new elmcheat[MAX_PLAYERS];
function timer_Speedometer()
{
	new vid;
	foreach( new i : Player )
	{

		if(!IsPlayerInAnyVehicle(i))
		    continue;
		vid = GetPlayerVehicleID(i);
        if(!IsPlayerInDynamicArea(i, PCMechanicArea, 0) && (upgradeShop_carColor[vid][0] != -1 || upgradeShop_carColor[vid][1] != -1))
		{
		    ChangeVehicleColor(vid, vEnum[vid][v_Color_1], vEnum[vid][v_Color_2]);

	        upgradeShop_carColor[vid][0] = -1;
	        upgradeShop_carColor[vid][1] = -1;

			DisableRemoteVehicleCollisions(i, 0);
		}

		if(GetPlayerVehicleSeat(i) == 0)
		{
		    switch(GetVehicleModel(vid))
		    {
		        case
		            481,
		            509,
		            510:
				{
				    SetVehicleParams(vid, VEHICLE_TYPE_ENGINE, 1);
				    SetVehicleParams(vid, VEHICLE_TYPE_DOORS, 0);
				}
		    }
		}

		new
		    Float:v_HP1,
		    Float:v_HP2;

		vhac_GetVehicleHealth(vid, v_HP1);
		GetVehicleHealth(vid, v_HP2);

		if(v_HP2 < v_HP1 && v_HP2 > 299 && veh_IsDeath[vid] == false && vhac_immunity[vid] == false)
		{
			SetVehicleHealth(vid, v_HP2);
		}
		else if(v_HP2 < 298 && veh_IsDeath[vid] == false)
		{
		    SetVehicleHealth(vid, 299.1);
		}


		if(v_HP2 < 300.0 && GetVehicleParams(vid, VEHICLE_TYPE_ENGINE) == 1)
		{

		    if(GetVehicleModel(vid) == 481 || GetVehicleModel(vid) == 509 || GetVehicleModel(vid) == 510)
		    {
				vhac_SetVehicleHealth(vid, 1000.0);
		    }
		    else
		    {
			    SetVehicleParams(vid, VEHICLE_TYPE_ENGINE, 0);

			    new S_str[144];
				format(S_str, 144, "* Motor vozidla %s zachrèal a vypol sa. (( %s ))", GetVehicleName(vid), GetPlayerNameEx(i, USE_MASK));
				SendLocalMessage(i, ME_CHAT_RANGE,COLOR_VIOLET,S_str);

				EnterInfo(i, "~r~Toto vozidlo je poskodene, zavolaj mechanika!");
			}
		}

		//////////////////////////////////////////////////////////////////////////////////////////

		new
			S_string[128],
			Float:F_Speed,
			I_Speed;

        ex_GetVehicleSpeed(vid, 1, I_Speed, F_Speed);
        
        vEnum[vid][v_MileAge] += F_Speed/20000;
	    vEnum[vid][v_TaxameterMileAge] += F_Speed/20000;

        for(new x; x < 9; x ++)
			PlayerTextDrawHide(i, TACHOMETER_TD[i][x]);

		if(opt_tachometer[i] != 0)
		{
		    continue;
		}

		if(I_Speed >= 120)
		    Achievement::Reward(i, ACHIEVEMENT_FAST_TRAVELER);
		    
 		format(S_string, 128, "%d MPH", I_Speed);
 		
 		PlayerTextDrawSetString(i, TACHOMETER_TD[i][1], S_string);
        PlayerTextDrawShow(i, TACHOMETER_TD[i][0]);
        PlayerTextDrawShow(i, TACHOMETER_TD[i][1]);

		switch(GetVehicleModel(vid))
		{
		    case 481, 509, 510:
		    {
		        continue;
		    }
			case 435, 441, 449, 450, 464, 465, 501, 537, 538, 564, 569, 570, 590, 591, 594, 606, 607, 608, 610, 611:
			{

			    for(new x = 2; x < 9; x ++)
					PlayerTextDrawHide(i, TACHOMETER_TD[i][x]);

			    continue;
			}
		}

		new
		    I_Fuel = GetVehicleFuel(vid);

        format(S_string, 128, "%d litres", I_Fuel);

 		PlayerTextDrawSetString(i, TACHOMETER_TD[i][3], S_string);
        PlayerTextDrawShow(i, TACHOMETER_TD[i][2]);
        PlayerTextDrawShow(i, TACHOMETER_TD[i][3]);

		if(!hasSeatbelt[i])
		{
		    PlayerTextDrawShow(i, TACHOMETER_TD[i][4]);
		}

		if(vEnum[vid][v_Battery] < 50)
		{
		    PlayerTextDrawShow(i, TACHOMETER_TD[i][5]);
		}

		if(vEnum[vid][v_Oil] < 1.50)
		{
		    PlayerTextDrawShow(i, TACHOMETER_TD[i][6]);
		}
		
		////////////////////////////////////////////////////////////////////////
		
		if(vEnum[vid][v_Nitrous] >= 0.1)
		{
		    format(S_string, 128, "%.1f ccm", vEnum[vid][v_Nitrous]);
	 		PlayerTextDrawSetString(i, TACHOMETER_TD[i][8], S_string);
	        PlayerTextDrawShow(i, TACHOMETER_TD[i][8]);
	        PlayerTextDrawShow(i, TACHOMETER_TD[i][7]);
		    
		    hadnitro[vid] = 1;
		}
		else
		{
		    hadnitro[vid] = 0;
		}

		switch(GetVehicleModel(vid))
		{
		    case
		        400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413,
		        414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428,
		        429, 431, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445,
		        448, 451, 455, 456, 457, 458, 459, 461, 462, 463, 466, 467, 468,
				470, 471, 474, 475, 477, 478, 479, 480, 482, 483, 485, 489, 490,
				491, 492, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506,
				507, 508, 514, 515, 516, 517, 518, 521, 522, 523, 524, 525, 526,
				527, 529, 530, 531, 533, 534, 535, 540, 541, 542, 543, 544, 545,
				546, 547, 549, 550, 551, 552, 554, 555, 558, 559, 560, 561, 562,
				565, 566, 567, 568, 571, 572, 574, 575, 576, 578, 579, 580, 581,
				582, 583, 585, 586, 587, 588, 589, 596, 597, 598, 599, 600, 602,
				603, 604, 605, 609
			:
			{
			    new randomnum, mileage = floatround(vEnum[vid][v_MileAge], floatround_round);

				switch(mileage)
				{
					case 0..3000: randomnum = 30000;
					case 3001..8000: randomnum = 27000;
					case 8001..14000: randomnum = 23000;
					case 14001..23000: randomnum = 22000;
					case 23001..100000: randomnum = 20000;
					default: randomnum = 17500;
				}
			
				new
				    x1 = random(randomnum), x2=random(randomnum),x3=random(randomnum),x4=random(randomnum);
				if(x1 == x2 && x2 == x3 && x3 == x4)
		        {

					new
						panel,
						door,
						light,
						tire,

						tirex = random(4)
					;

					GetVehicleDamageStatus(vid, panel, door, light, tire);
					if(tirex == 0) UpdateVehicleDamageStatus(vid, panel, door, light, encode_tires(1, 0, 0, 0));
					else if(tirex == 1) UpdateVehicleDamageStatus(vid, panel, door, light, encode_tires(0, 1, 0, 0));
					else if(tirex == 2) UpdateVehicleDamageStatus(vid, panel, door, light, encode_tires(0, 0, 1, 0));
					else if(tirex == 3) UpdateVehicleDamageStatus(vid, panel, door, light, encode_tires(1, 0, 0, 1));

					new
			            Float:Pos[3];

					GetVehiclePos(vid, Pos[0], Pos[1], Pos[2]);

					format(S_string, sizeof S_string, "* Zvonka vozidla sa ozvalo zasyèanie, pneumatika syèí. (( %s ))", GetVehicleName(vid));

					foreach( new playerid : Player )
					{
					    if(GetPlayerInterior(playerid) != vehicleData[vid][gVeh_Interior])
					        continue;

						if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(vid))
						    continue;

						if(!IsPlayerInRangeOfPoint(playerid, ME_CHAT_RANGE, Pos[0], Pos[1], Pos[2]))
						    continue;

						SendClientMessage(playerid, COLOR_VIOLET, S_string);
					}
		        }
			}
		}

	}
	return 1;
}

func_timer_CheckTime()
{

	new
	    year,
	    mon,
	    day,

	    hour,
	    minute,
	    type = 1;

	// type 1 == AM
	// type 2 == PM

	getdate(year, mon, day);
	gettime(hour, minute);

	new
	    string[64],
	    stringex[64]
	;

	if(hour > 12)
	    hour -= 12,
		type = 2;

	if(hour == 0)
	    hour = 12;



	if(type == 1)
		format(string, 64, "%d:%02d AM", hour, minute);
	else
	    format(string, 64, "%d:%02d PM", hour, minute);

	TextDrawSetString(td_timeTD1, string);

	format(string, 64, "%02d/%02d/%04d", day, mon, year);
	TextDrawSetString(td_timeTD2, string);

	if(type == 1)
		format(stringex, 64, "SURVEILLANCE CAMERA___%02d:%02d AM___%02d/%02d/%02d", hour, minute, mon, day, year-2000);
	else
	    format(stringex, 64, "SURVEILLANCE CAMERA___%02d:%02d PM___%02d/%02d/%02d", hour, minute, mon, day, year-2000);

    if(type == 1)
		format(string, 16, "%s %02d:%02d AM", GetWeekDay(), hour, minute);
	else
	    format(string, 16, "%s %02d:%02d PM", GetWeekDay(), hour, minute);

	foreach( new i : Player )
	{
	    if(!IsPlayerLogged(i))
	        continue;

        if(phone_IsOut[i]) PlayerTextDrawSetString(i, PTD_phone_MAIN[i][4], string);
        PlayerTextDrawSetString(i, PTD_cameras[i][0], stringex);

		if(opt_TimeTd[i] == 1 || inCCTV[i] == 1)
		{
		    TextDrawHideForPlayer(i, td_timeTD1);
		    TextDrawHideForPlayer(i, td_timeTD2);
		    continue;
		}

		TextDrawShowForPlayer(i, td_timeTD1);
  		TextDrawShowForPlayer(i, td_timeTD2);
	}
	return;

}

ex_SetWeather(weatherid)
{
	gWeather = weatherid;
	return SetWeather(weatherid);
}
#if defined _ALS_SetWeather
    #undef SetWeather
#else
    #define _ALS_SetWeather
#endif
#define SetWeather ex_SetWeather

new weatherArray[][] = {
	{0, 9},
	{2, 9},
	{3, 9},
	{4, 9},
	{5, 9},
	{6, 9},
	{10, 9},
	{13, 9},
	// ^^ slnecne

	{7, 2},
	{8, 2},
	{9, 2},
	{12, 2},
	{15, 2},
	{16, 1}
};

new lastWeatherChange = -1;
func_timer_CheckWeather()
{

	new
		hour;

	gettime(hour);

	if(lastWeatherChange == hour)
	    return 0;

    lastWeatherChange = hour;

    new maxpercent = 0, lastpercent = 0, tpercent = 0, chosen = 0, weather = random(19);

	for(new x; x < sizeof(weatherArray); x++)
	    maxpercent += weatherArray[x][1];

	chosen = random(maxpercent+1);

	for(new x; x < sizeof(weatherArray); x++)
	{
	    tpercent += weatherArray[x][1];

	    if(chosen < tpercent && chosen >= lastpercent)
	    {
	        weather = weatherArray[x][0];
	        break;
	    }

	    lastpercent += weatherArray[x][1];
	}

    SetWeather(weather);

	return 1;

}

new lastTimeChange = -1;
func_timer_CheckDayTime()
{

	new
		hour;

	gettime(hour);

	if(lastTimeChange == hour)
	    return 0;

    lastTimeChange = hour;

	SetWorldTime(hour);
	gActualTime = hour;

	return 1;

}

interDecreaseWeaponSkill(playerid,skillid,decrby)
{
	switch(skillid)
	{
	    case 0: weaponskill_pistol[playerid] -= decrby;
	    case 1: weaponskill_pistol_silenced[playerid] -= decrby;
	    case 2: weaponskill_desert_eagle[playerid] -= decrby;
	    case 3: weaponskill_shotgun[playerid] -= decrby;
	    case 4: weaponskill_sawnoff_shotgun[playerid] -= decrby;
	    case 5: weaponskill_spas12_shotgun[playerid] -= decrby;
	    case 6: weaponskill_micro_uzi[playerid] -= decrby;
	    case 7: weaponskill_mp5[playerid] -= decrby;
	    case 8: weaponskill_ak47[playerid] -= decrby;
	    case 9: weaponskill_m4[playerid] -= decrby;
	    case 10: weaponskill_sniperrifle[playerid] -= decrby;
	}
	
	ValidateWeaponSkill(playerid);
	return 1;
}
DecreaseWeaponSkill(playerid)
{
	#pragma unused playerid
	/*for(new x; x < 11; x++)
	{
	    if(x == 11) break;
	    interDecreaseWeaponSkill(playerid,x,0+random(11));
	}*/
	return 1;
}

new
	lastPayDay = -1,
	lottery = 0;

new impound_selcar[MAX_PLAYERS];
new impound_fine[MAX_PLAYERS];
new impound_time[MAX_PLAYERS];
new impound_reason[MAX_PLAYERS][82];
new impound_veharr[MAX_PLAYERS][150]; //0 is stored for size
#include <internal\inpc.pwn>
func_timer_CheckPayDay()
{

    new
	    hour,
	    minu;

	gettime(hour, minu);

    if(lastPayDay != hour && minu < 3)
	{

	    new
			lotteryCount,
			lotteryNumber = rand(1,100),
			lotteryWinner;

	    lastPayDay = hour;
	    foreach(new i : Player)
		{

		    if(GetPlayerInventoryItem(i, inv_lotteryTicket) == lotteryNumber)
		    {
				lotteryCount ++;
				lotteryWinner = i;
			}
			
			////////////////////////////////////////////////////////////////////
			if(random(2) == 1)
			    DecreaseWeaponSkill(i);
			////////////////////////////////////////////////////////////////////
			
			if(isInJail[i] == true ||ic_isInJail[i]==true)
			{
			    continue;
			}

	    	if(g_I_paydayTime[i] < 1740)
	    	{
	    	    SendClientMessage(i, 0xD0D0D0FF, "> Neodohral si dos èasu, aby ti prila výplata.");
	    	    g_B_canHavePayDay[i] = false;
	    	    g_B_canPickUpPayDay[i] = false;
	    	    g_I_VyplataExpire[i] = 0;
	    	}
	    	else
	    	{

				if(Vyplata_TYP[i] == 0)
				{
				    SCFM(i, 0xD0D0D0FF, "> Prila ti výplata! Vyzdvihni si ju v Palomino Creek Town Hall príkazom /signcheck [èíslo eku], ak chce!");
				    SCFM(i, 0xD0D0D0FF, "> Èíslo eku vidí v pravom dolnom rohu.");

					g_B_canHavePayDay[i] = true;
		    	    g_B_canPickUpPayDay[i] = true;

		    	    g_I_VyplataExpire[i] = gettime() + 1800;

		    	    payDayCheck[i] = rand(1, 9999);

					new
						tdStr[64];

					format(tdStr, sizeof tdStr, "Cislo seku: ~w~%04d", payDayCheck[i]);

		    	    PlayerTextDrawShow(i, TD_vyplaty[i][0]);
		    	    PlayerTextDrawSetString(i, TD_vyplaty[i][0], tdStr);
		    	    PlayerTextDrawShow(i, TD_vyplaty[i][0]);
				}
				else
				{
				    GivePlayerPayDay(i, 1);
				}
	    	}
		}

		if(lottery == 0)
		    lottery = Economy::GetPrice(ECONOMY_LIST_LOTTERY);

		if(lotteryCount == 0)
		{
		    foreach( new i : Player )
		    {
		        SetPlayerInventoryItem(i, inv_lotteryTicket, 0);

		        SCFM(i, COLOR_LOTTERY, "[ LOTÉRIA ] V jackpote bolo $%d USD, no èíslo %d netipol nikto!", lottery, lotteryNumber);
		    }
		}
		else if(lotteryCount == 1)
		{
		    foreach( new i : Player )
		    {
		        SetPlayerInventoryItem(i, inv_lotteryTicket, 0);

		        SCFM(i, COLOR_LOTTERY, "[ LOTÉRIA ] V jackpote bolo $%d USD a správne èíslo %d tipol iba %s!", lottery, lotteryNumber, GetPlayerNameEx(lotteryWinner, NO_MASK));
				if(i == lotteryWinner)
				{
				    SCFM(i, COLOR_LOTTERY, "[ LOTÉRIA ] Gratulujem, vyhral si $%d USD! Ui ich dobre!", lottery);
				    ex_GivePlayerMoney(i, lottery);
				    
				    money_admin[i] += floatround(lottery,floatround_round);

				    web_LatestFormat("%s vyhral v loterii", GetPlayerNameEx(i, NO_MASK));
				}
			}
		}
		else
		{
		    foreach( new i : Player )
		    {

		        if(GetPlayerInventoryItem(i, inv_lotteryTicket) == lotteryNumber)
		        {
		            SCFM(i, COLOR_LOTTERY, "[ LOTÉRIA ] V jackpote bolo $%d USD a správne èíslo %d tipli %d ¾udia!", lottery, lotteryNumber, lotteryCount);
                    SCFM(i, COLOR_LOTTERY, "[ LOTÉRIA ] Gratulujem, vyhral si $%d USD! Ui ich dobre!", floatround(float(lottery) / float(lotteryCount), floatround_round));
                    ex_GivePlayerMoney(i, floatround(float(lottery) / float(lotteryCount), floatround_round));
                    
                    money_admin[i] += floatround(float(lottery) / float(lotteryCount), floatround_round);

                    web_LatestFormat("%s vyhral v loterii", GetPlayerNameEx(i, NO_MASK));
				}
				else
				    SCFM(i, COLOR_LOTTERY, "[ LOTÉRIA ] V jackpote bolo $%d USD a správne èíslo %d tipli %d ¾udia!", lottery, lotteryNumber, lotteryCount);

		        SetPlayerInventoryItem(i, inv_lotteryTicket, 0);
			}
		}

		lottery = 0;
	}

	if(lastPayDay == hour && minu == 30)
	{

	    lastPayDay = -1;
	    lottery += rand(3000,32500);

	    foreach(new i : Player)
	    {
	        if(g_B_canPickUpPayDay[i] == true)
	        {
	            PlayerTextDrawHide(i, TD_vyplaty[i][0]);
	            payDayCheck[i] = 0;
	            g_I_VyplataExpire[i] = 0;
	            g_B_canPickUpPayDay[i] = false;
	            SCFM(i, 0xD0D0D0FF, "> Èas na vybratie výplaty vypral, k ïalej výplate sa ti pripoèíta %d$!", floatround(g_I_Vyplata[i] / 100 * 40, floatround_round));
	        }

	        SCFM(i, COLOR_LOTTERY, "[ LOTÉRIA ] Hrá sa o jackpot $%d USD, kúpte si lístok v General Store a zapojte sa, losovanie prebehne o 30 minút!", lottery);
	    }
	}

	return;

}

func_timer_UpdateNameTag(i)
{
    if(GetPVarInt(i, "afk_check") == 0) {

   		SetPVarInt(i, "afk_check", 1);
	   	SetPVarInt(i, "afk", 0);
    	SetPVarInt(i, "afk_secs", 0);
    	SetPVarInt(i, "afk_mins", 0);

 	} else {

     	SetPVarInt(i, "afk", 1);
    	SetPVarInt(i, "afk_secs", GetPVarInt(i, "afk_secs")+1);

    	if(GetPVarInt(i, "afk_secs")>= 60) {
 	 	    SetPVarInt(i, "afk_mins",GetPVarInt(i, "afk_mins")+1);
     	    SetPVarInt(i, "afk_secs", 0);
		}

   	}

	new
		S_finalName[ 128 ],
		S_afk[ 30 ],
	    S_nameTag[ 64 ];

	if(isuserafk[i] != 0)
	{
	    format(S_afk, sizeof S_afk, "{ee6363}[AFK] ");
	}
	else if(GetPVarInt(i, "afk_secs") > 1 || GetPVarInt(i, "afk_mins") > 0)
	{
		format(S_afk, sizeof S_afk, "{ee6363}[PAUSED] ");
	}

	if(B_playerAdminSPOT[i] == false)
	{
		if(B_playerHasMask[i] == false)
			format(S_nameTag, sizeof(S_nameTag), "{%06x} %s (%d)", GetPlayerColor(i) >>> 8, GetPlayerNameEx(i, NO_MASK), i);
		else
		    format(S_nameTag, sizeof(S_nameTag), "{%06x} %s", GetPlayerColor(i) >>> 8, GetPlayerNameEx(i, USE_MASK));
	}
	else
	    format(S_nameTag, sizeof(S_nameTag), "{%06x}(OOC) %s (%d)", GetPlayerColor(i) >>> 8, ReturnMaster(i), i);

	format(S_finalName, sizeof S_finalName, "%s%s", S_afk, S_nameTag);

	if(T3D_nameTag[i] != Text3D:INVALID_3DTEXT_ID && IsValidDynamic3DTextLabel(T3D_nameTag[i]))
	    UpdateDynamic3DTextLabelText(T3D_nameTag[i], 0xFFFFFFFF, S_finalName);
	else
	{
	    if(IsValidDynamic3DTextLabel(T3D_nameTag[i]))
		{
			DestroyDynamic3DTextLabel(T3D_nameTag[i]);
			T3D_nameTag[i] = Text3D:INVALID_3DTEXT_ID;
		}
	    T3D_nameTag[i] = CreateDynamic3DTextLabel(S_finalName, 0xFFFFFFFF, 0.0, 0.0, 0.075, 15.0, i, INVALID_VEHICLE_ID, 1, -1, -1, -1, 10000.0, -1, 1);
	}

	return;
}

func_timer_CorrectFaction(i)
{
    if(GetPlayerFaction(i) == 0)
	{

		g_I_VypovedUnix[i] = 0;

		//if(strcmp(GetPlayerFactionTitle(i), "Novacik", false))
  			//SetPlayerFactionTitle(i, "Novacik");

		if(GetPlayerFactionRank(i) < 0)
  			SetPlayerFactionRank(i, 0);
	}

	return;
}

func_timer_CorrectLevel(i)
{
    if(GetPlayerRoleplayLevel(i) > g_stats_maxRoleplayLevel)
	{
	   	g_stats_maxRoleplayLevel = GetPlayerRoleplayLevel(i);
	    format(g_stats_maxRoleplayLevelN, 24, GetPlayerNameEx(i, NO_MASK));
	}
	
	if(floatround(MAPlayTime[i] / 60, floatround_floor) > g_stats_playTime)
	{
	    g_stats_playTime = floatround(MAPlayTime[i] / 60, floatround_floor);
	    format(g_stats_playTimeN, 24, GetPlayerNameEx(i, NO_MASK));
	}

	if(GetPlayerRoleplayLevel(i) < 1) SetPlayerRoleplayLevel(i, 1);

	return;
}

func_timer_UpdatePlayTime(i)
{
    g_I_playTimeSecond[i] ++;
    if(g_I_playTimeSecond[i] > 59) g_I_playTimeSecond[i] = 0, g_I_playTimeMin[i] ++;
    if(g_I_playTimeMin[i] > 59) g_I_playTimeMin[i] = 0, g_I_playTimeHour[i] ++, g_I_mince[i] ++;

    MAPlayTimeS[i] ++;
    if(MAPlayTimeS[i] > 59) MAPlayTimeS[i] = 0, MAPlayTime[i] ++;
    return;
}

func_timer_FactionLeave(i)
{
    if(g_I_VypovedUnix[i] > 10 && g_I_VypovedUnix[i] < gettime())
	{
 		FormatLog(log_type_player, "%s(%s) bol automaticky prepusteny z frakcie %s!", ReturnName(i), ReturnIP(i), factEnum[GetPlayerFaction(i)][fact_Name]);

		g_I_VypovedUnix[i] = 0;
  		SetPlayerFaction(i, 0);

  		IsWorking[i] = 0;
  		ex_SetPlayerSkin(i, I_pSkin_Civil[i]);


		SCFM(i, COLOR_SERVER, "> Uplynul potrebný èas pre podanie výpovede zo zamestnania, bol si automaticky prepustený!");
	}

	return;
}

func_timer_IsSpectating(playerid)
{

	if(isSpectating[playerid] == false)
	    return 0;
	    
	if(spec_Player[playerid] < 0)
	    return 0;

	if(!IsPlayerConnected(spec_Player[playerid]) && spec_Player[playerid] >= 0)
	{
	    TogglePlayerSpectating(playerid, false);
	    return 0;
	}
	
	new statexx;
	statexx = GetPlayerState(spec_Player[playerid]);
	
	if(statexx == 0 || statexx == 7 || statexx == 9)
	{
	    TogglePlayerSpectating(playerid, false);
	    return 0;
	}


	new

		finalString[128],
		vehName[82] = "Nic",
		titul[32] = "Hrac",
		I_Speed,
		Float:F_Speed,
		Float:F_Health,
		Float:F_Hunger,
		Float:F_Armour,

		vid = GetPlayerVehicleID(spec_Player[playerid])
	;

	switch(GetPlayerAdminLevel(spec_Player[playerid]))
	{
	    case 0: format(titul, 32, "Hrac");
	    case 1: format(titul, 32, "Helper");
	    case 2: format(titul, 32, "Moderator");
	    default: format(titul, 32, "Administrator Level %d", GetPlayerAdminLevel(spec_Player[playerid])-4);
	}
	
	// CAST USERA
	format(finalString, sizeof finalString, "%s~n~%s~n~Donator Level %d", GetPlayerNameEx(spec_Player[playerid], USE_PUREIDNAME), titul, GetPlayerDonatorLevel(spec_Player[playerid]));
	PlayerTextDrawSetString(playerid, SpectateTD[playerid][3], finalString);
	
	// VITALS, ETC
	ahac_GetPlayerHealth(spec_Player[playerid], F_Health);
	ex_GetPlayerHunger(spec_Player[playerid], F_Hunger);
	ahac_GetPlayerArmour(spec_Player[playerid], F_Armour);
	
	format(finalString, sizeof finalString, "%d", floatround(F_Health, floatround_round));
	PlayerTextDrawSetString(playerid, SpectateTD[playerid][5], finalString);
	
	format(finalString, sizeof finalString, "%d", floatround(F_Armour, floatround_round));
	PlayerTextDrawSetString(playerid, SpectateTD[playerid][7], finalString);
	
	format(finalString, sizeof finalString, "%d", floatround(F_Hunger, floatround_round));
	PlayerTextDrawSetString(playerid, SpectateTD[playerid][9], finalString);
	
	format(finalString, sizeof finalString, "%.2f", ex_GetPlayerMoney(spec_Player[playerid]));
	PlayerTextDrawSetString(playerid, SpectateTD[playerid][11], finalString);
	
	format(finalString, sizeof finalString, "%s (%d)", GetWeaponNameEx(GetPlayerWeapon(spec_Player[playerid])), GetPlayerAmmo(spec_Player[playerid]));
	PlayerTextDrawSetString(playerid, SpectateTD[playerid][13], finalString);
	
	// CAST S VOZIDLOM
	ex_GetVehicleSpeed(vid, 1, I_Speed, F_Speed);
	if(IsPlayerInAnyVehicle(spec_Player[playerid]))
	{
	    format(vehName, sizeof vehName, "%s~n~%s~n~%d MPH", GetVehicleName(vid), vEnum[vid][v_SPZ], I_Speed);
	}
	else
	{
	    format(vehName, sizeof vehName, "~n~NENI VO VOZIDLE");
	}
	PlayerTextDrawSetString(playerid, SpectateTD[playerid][15], vehName);
	return 1;

}

func_timer_AntiCheat()
{

	if(GetGravity() != Server_Gravity)
	{

	    SetGravity(Server_Gravity);

	}

	return 1;

}

new upozornenie_HP[MAX_PLAYERS];
new upozornenie_SH[MAX_PLAYERS];
new upozornenie_AR[MAX_PLAYERS];
new upozornenie_VHP[MAX_PLAYERS];
new preventVTH[MAX_PLAYERS];
new bool:isinforbidden[MAX_PLAYERS];
func_timer_PlayerAntiCheat(playerid)
{

    preventVTH[playerid] --;
    ////////////////////////////////////////////////////////////////////////////
    //upozornenie forbidden
	/*if(isinforbidden[playerid] == true && upozornenie_forbi[playerid] == 0)
	{
	    upozornenie_forbi[playerid] = 1;
        FormatWarn(-1, "ZoneWarn:", 0xff0000, "Hráè %s vstúpil do zakázanej zóny!", GetPlayerNameEx(playerid,USE_PUREIDNAME));
        SetTimerEx("timer_DisableForbiddenWarn", 60000*3, false, "i", playerid);
	}*/
	////////////////////////////////////////////////////////////////////////////
	// jetpack hack
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
	{
	    if(GetPlayerAdminLevel(playerid) < 4)
	    {
		    stats_Ban[playerid] ++;
		    BanPlayer(playerid, "JetPack Hack", "System", 2);
		}
		else
		{
		    SCFM(playerid, COLOR_SERVER, "[ ANTI-CHEAT ] Ak by si nebol administrátor, dostal by si BAN za JetPack Hack.");
		}
	    return 1;
	}
	////////////////////////////////////////////////////////////////////////////
	// anti speed hack
	if(GetPlayerVehicleSeat(playerid) == 0 && IsPlayerInAnyVehicle(playerid))
	{
	    new
	    	Float:F_Speed,
			I_Speed;

        ex_GetVehicleSpeed(GetPlayerVehicleID(playerid), 1, I_Speed, F_Speed);

	    if(I_Speed >= 200)
	    {
	        new Float:tmp, Float:Z;
	        GetVehiclePos(GetPlayerVehicleID(playerid), tmp, tmp, Z);
	        if(Z >= 3.0)
	        {
		        upozornenie_SH[playerid] ++;
		        if(upozornenie_SH[playerid] >= 3)
				{
			        if(GetPlayerAdminLevel(playerid) < 4)
				    {
					    stats_Ban[playerid] ++;
					    new tstr[32];
					    format(tstr, sizeof tstr, "Speed Hack (%d MPH)", I_Speed);
					    BanPlayer(playerid, tstr, "System", 2);
					}
					else
					{
					    SCFM(playerid, COLOR_SERVER, "[ ANTI-CHEAT ] Ak by si nebol administrátor, dostal by si BAN za Speed Hack.");
					}
				}
			}
	    }
	    else
	    {
	        upozornenie_SH[playerid] = 0;
	    }
	}
    ////////////////////////////////////////////////////////////////////////////
    // afk check
	if(GetPVarInt(playerid, "afk_secs") > 3 || GetPVarInt(playerid, "afk_mins")>0)
		return 0;

    ////////////////////////////////////////////////////////////////////////////
    // veh health hack
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && isAntiVhpUsed[playerid] == false)
	{

	    new
	        Float:vhac_vHP,
			Float:vHP;

	    vhac_GetVehicleHealth(GetPlayerVehicleID(playerid), vhac_vHP);
	    GetVehicleHealth(GetPlayerVehicleID(playerid), vHP);

	    if((vhac_vHP + 5.0) < vHP)
	    {
	        upozornenie_VHP[playerid] ++;
	        if(upozornenie_VHP[playerid] >= 2)
			{
		        isAntiVhpUsed[playerid] = true;
		        FormatWarn(-1, "CheatWarn:", COLOR_ADMIN_CHEATWARN, "Vozidlo %s(%s) hráèa %s má inú hodnotu HP! [Server: %.1f - Client: %.1f]", GetVehicleName(GetPlayerVehicleID(playerid)), vEnum[GetPlayerVehicleID(playerid)][v_SPZ], GetPlayerNameEx(playerid, USE_PUREIDNAME), vhac_vHP, vHP);

		        SetTimerEx("timer_DisableVehicleHack", 30000, false, "i", playerid);
			}
	    }
	    else
	    {
	        upozornenie_VHP[playerid] = 0;
	    }
	}
    ////////////////////////////////////////////////////////////////////////////
    // health hack
	if(isAntiHPUsed[playerid] == false)
	{
	    new
			Float:ahac_HP,
			Float:HP;

		ahac_GetPlayerHealth(playerid, ahac_HP);
		GetPlayerHealth(playerid, HP);

		if((ahac_HP + 5.0) < HP)
	    {
	        upozornenie_HP[playerid] ++;
	        if(upozornenie_HP[playerid] >= 4)
			{
		        isAntiHPUsed[playerid] = true;

		        FormatWarn(-1, "CheatWarn:", COLOR_ADMIN_CHEATWARN, "ivot hráèa %s má inú hodnotu! [Server: %.1f - Client: %.1f]", GetPlayerNameEx(playerid, USE_PUREIDNAME), ahac_HP, HP);

		        SetTimerEx("timer_DisableHealthHack", 30000, false, "i", playerid);
			}
	    }
	    else
	    {
	        upozornenie_HP[playerid] = 0;
	    }
	}
    ////////////////////////////////////////////////////////////////////////////
    // armour hack
	if(isAntiARUsed[playerid] == false)
	{
	    new
			Float:ahac_AR,
			Float:AR;

		ahac_GetPlayerArmour(playerid, ahac_AR);
		GetPlayerArmour(playerid, AR);

		if((ahac_AR + 5.0) < AR)
	    {
	        upozornenie_AR[playerid] ++;
	        if(upozornenie_AR[playerid] >= 2)
			{
		        isAntiARUsed[playerid] = true;

		        FormatWarn(-1, "CheatWarn:", COLOR_ADMIN_CHEATWARN, "Vesta hráèa %s má inú hodnotu! [Server: %.1f - Client: %.1f]", GetPlayerNameEx(playerid, USE_PUREIDNAME), ahac_AR, AR);

		        SetTimerEx("timer_DisableArmourHack", 30000, false, "i", playerid);
			}
	    }
	    else
	    {
	        upozornenie_AR[playerid] = 0;
	    }
	}

	return 0;

}

func_timer_UpdateLoginTD()
{

	new
	    string[128],
		pCount = 0;

	foreach( new i : Player )
	{
	    pCount ++;

	    if(b_playerIsLogged[i] != true || b_playerSelectChar[i] == true)
	    {
	        for(new ix; ix < 3; ix++) TextDrawShowForPlayer(i, textdraw_LoginTD[ix]);
	    }
	}

	format(string, 128, "Momentalne je pripojenych %d hracov.", pCount);
	TextDrawSetString(textdraw_LoginTD[1], string);

	return;
}

func_timer_JailCheck(playerid)
{

	if(ic_isInJail[playerid] == true)
	{
	    if(gettime() > ic_jailTime[playerid])
	    {
	        new
			    str[128];

			format(str, 128, "~w~Pre prepustenie napis prikaz ~b~/prepustit~w~!");

			EnterInfo(playerid, str, 5000, 3);
	    }
	    else
	    {
			new
			    str[128];

			format(str, 128, "~w~Budes prepusteny ~b~%s~w~!", getdateunix(ic_jailTime[playerid]));

			EnterInfo(playerid, str, 5000, 3);
	    }
	}

	if(isInJail[playerid] == false)
	    return;

	jail_Time[playerid][1] --;

	if(jail_Time[playerid][0] <= 0 && jail_Time[playerid][1] <= 0)
	{
	    isInJail[playerid] = false;

	    jail_Time[playerid][0] = 0;
	    jail_Time[playerid][1] = 0;

	    format(jail_Admin[playerid], 30, "");
		format(jail_Reason[playerid], 128, "");

	    SetPlayerPos(playerid, 2285.259, -54.464, 26.484);
		SetPlayerFacingAngle(playerid, 270.0);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetCameraBehindPlayer(playerid);

		SendSuccess(playerid, "Tvoj èas nastal, si volný!");

		stats_Jail[playerid] ++;

		FormatLog(log_type_punish, "%s(%s) si odsedel trest v admin jaile!", ReturnName(playerid), ReturnIP(playerid));
	}

	if(jail_Time[playerid][1] < 1)
	{
	    jail_Time[playerid][1] = 59;
	    jail_Time[playerid][0] --;
	}
	return;
}


function timer_RandomMessage()
{
    foreach(new i : Player)
	{

		if(!IsPlayerLogged(i))
			continue;

		SendRandomMessage(i);

	}
	return 1;
}


new bool:isRestartTriggered = false;
func_timer_RestartCheck()
{

	if(isRestartTriggered == true)
	    return 0;

	new
		hour,
		mins;

	gettime(hour, mins);

	if(hour == 3 && mins == 27)
	{
	    /*isRestartTriggered = true;

		SendClientMessageToAll(COLOR_SERVER, "> Bol spustený retart serveru, prebehne o dve minúty!");
		SendRconCommand("password closage");

		SetTimer("timer_rst_KickPlayers", (2*1000*60)-60000, false);
		SetTimer("timer_rst_Restart", (2*1000*60), false);*/
	}

	return 1;

}

func_timer_DMVCheck(i)
{
	if(isDoingDMV[i] == true)
	{
	    if(DMV_checkpoint[i] < 0)
	        return 1;
	
	    DMV_time[i][1] ++;
	    if(DMV_time[i][1] == 60)
	    {
	        DMV_time[i][1] = 0;
	        DMV_time[i][0] ++;
	    }

	    new
	        string[128],
			Float:F_Speed,
			I_Speed;

        ex_GetVehicleSpeed(GetPlayerVehicleID(i), 1, I_Speed, F_Speed);

		if(DMV_license[i] == 0 || DMV_license[i] == 1)
		{
		    if(DMV_checkpoint[i] >= sizeof DMV_pos_1) return 1;
	        if(I_Speed - 5 > floatround(DMV_pos_1[DMV_checkpoint[i]][3], floatround_round))
	        {
	            DMV_warn[i] ++;
	        }

	        new spd;
	        if(DMV_checkpoint[i]-1 <= 0) spd = 0;
			else spd = DMV_checkpoint[i]-1;

		    format(string, 128, "Maximalna rychlost: ~b~~h~%dMPH", floatround(DMV_pos_1[spd][3], floatround_round));
			PlayerTextDrawSetString(i, TD_autoskola0[i], string);

			if(DMV_checkpoint[i] + 1 >= sizeof(DMV_pos_1)-1)
				format(string, 128, "Nasledujuca rychlost: ~b~~h~FINISH");
			else
				format(string, 128, "Nasledujuca rychlost: ~b~~h~%dMPH", floatround(DMV_pos_1[DMV_checkpoint[i]][3], floatround_round));
			PlayerTextDrawSetString(i, TD_autoskola1[i], string);
		}
		else
		{
		    if(DMV_checkpoint[i] >= sizeof DMV_pos_1) return 1;
			if(I_Speed - 5 > floatround(DMV_pos_2[DMV_checkpoint[i]][3], floatround_round))
	        {
	            DMV_warn[i] ++;
	        }

	        new spd;
	        if(DMV_checkpoint[i]-1 < 0) spd = 0;
			else spd = DMV_checkpoint[i]-1;

		    format(string, 128, "Maximalna rychlost: ~b~~h~%dMPH", floatround(DMV_pos_2[spd][3], floatround_round));
			PlayerTextDrawSetString(i, TD_autoskola0[i], string);

			if(DMV_checkpoint[i] + 1 >= sizeof(DMV_pos_2)-1)
				format(string, 128, "Nasledujuca rychlost: ~b~~h~FINISH");
			else
				format(string, 128, "Nasledujuca rychlost: ~b~~h~%dMPH", floatround(DMV_pos_2[DMV_checkpoint[i]][3], floatround_round));
			PlayerTextDrawSetString(i, TD_autoskola1[i], string);
		}

		format(string, 128, "Trvanie tejto jazdy: ~b~~h~%d:%02d", DMV_time[i][0], DMV_time[i][1]);
		PlayerTextDrawSetString(i, TD_autoskola2[i], string);

		PlayerTextDrawShow(i, TD_autoskola0[i]);
		PlayerTextDrawShow(i, TD_autoskola1[i]);
		PlayerTextDrawShow(i, TD_autoskola2[i]);

	}
	return 0;
}

function timer_CheckCalling(playerid)
{

	/*
	    new bool:ph_TurnedOff[MAX_PLAYERS];
		new bool:ph_IsTalking[MAX_PLAYERS];
		new bool:ph_IsDialing[MAX_PLAYERS];
		new bool:ph_IsWaiting[MAX_PLAYERS];
		new bool:ph_IsCaller[MAX_PLAYERS];
		new bool:ph_CanAccept[MAX_PLAYERS];
		new ph_CallWith[MAX_PLAYERS];
		new ph_SendMsg_To[MAX_PLAYERS][30];
		new temp_messages[MAX_PLAYERS][MAX_ACTIVE_MESSAGES][256];
		new temp_contactid[MAX_PLAYERS];

		new ph_PayMode[MAX_PLAYERS];
		// 0 - nic
		// 1 - kredit
		// 2 - vyplata
		new ph_Credit[MAX_PLAYERS];
	*/

	if(!ph_IsTalking[playerid])
	    return 0;

	if(!ph_IsCaller[playerid])
	    return 0;

	switch(ph_PayMode[playerid])
	{
	    case 1:
	    {
	        ph_Credit[playerid] -- ;

	        if(ph_Credit[playerid] <= 0)
	        {
	            new
					fromid = ph_CallWith[playerid];

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
				RemovePlayerAttachedObject(playerid, 8);

				if(ph_IsTalking[fromid] == true || ph_IsWaiting[fromid] == true)
				{
					SetPlayerSpecialAction(fromid, SPECIAL_ACTION_STOPUSECELLPHONE);
					RemovePlayerAttachedObject(fromid, 8);
				}

				ph_IsTalking[playerid] = false;
				ph_IsTalking[fromid] = false;
				ph_IsDialing[playerid] = false;
				ph_IsDialing[fromid] = false;
				ph_IsWaiting[playerid] = false;
				ph_IsWaiting[fromid] = false;
				ph_CanAccept[playerid] = false;
				ph_CanAccept[fromid] = false;
				ph_IsCaller[fromid] = false;
				ph_IsCaller[playerid] = false;
				ph_CallWith[playerid] = -1;
				ph_CallWith[fromid] = -1;

				SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk preruenia hovoru**");
				SCFM(playerid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk preruenia hovoru**");

				KillTimer(ph_timer[playerid]);

				return SetTimerEx("phone_timer_Message_NoCredit", 3000 + random(7000), false, "i", playerid);
	        }

	    }

	    case 2:
	    {
	        g_I_Vyplata[playerid] -- ;
	    }
	}

	return 1;
}

func_timer_PlayerExpireDonator(i)
{
	if(GetPlayerDonatorLevel(i) < 1)
	    return 1;

	if(g_I_donatorExpire[i] > gettime())
	    return 1;

	PlayerPlaySound(i, 3200, 0.0, 0.0, 0.0);

	SCFM( i, COLOR_ADMINCMD, "|___________________| !!! POZOR !!! |___________________|" );
	SCFM( i, COLOR_ADMINCMD, "| {ffffff}Tvoj prémium (donator) level %d práve expiroval!", GetPlayerDonatorLevel(i) );
	SCFM( i, COLOR_ADMINCMD, "| {ffffff}Práve je %s, donator mal expirova %s!", getdateunix(gettime()), getdateunix(g_I_donatorExpire[i]) );
	SCFM( i, COLOR_ADMINCMD, "| {ffffff}Ak si myslí, e sa jedná o chybu, vyfo toto a poli to Managementu!");

	B_playerTogGold[i] = false;
	foreach ( new x : Player )
        blockPm[i][x] = 0;

	g_I_donatorExpire[i] = 0;
	SetPlayerDonatorLevel(i, 0);

	return 1;
}

function timer_PDRadar()
{

	foreach( new vid : Vehicle )
	{
	    if(vEnum[vid][v_Radar] == false)
	        continue;

		new
		    players[2];

		players[0] = -1;
		players[1] = -1;

		foreach( new pl : Player )
		{

		    if(!IsPlayerInAnyVehicle(pl))
		        continue;

			if(GetPlayerVehicleID(pl) != vid)
			    continue;

			if(GetPlayerVehicleSeat(pl) > 1)
			    continue;

			if(players[0] == -1)
			    players[0] = pl;
			else if(players[1] == -1)
			{
			    players[1] = pl;
			    break;
			}
			else
			    break;
		}

		if(players[0] == -1 && players[1] == -1)
		    continue;

		new
		    Float:X, Float:Y, Float:Z,
			Float:A,

			Float:dist = 30.1, Float:newdist,

			targetVehicle = -1;

		GetVehiclePos(vid, X, Y, Z);
		GetVehicleZAngle(vid, A);

		X += 5.0 * floatsin(-A, degrees);
		Y += 5.0 * floatcos(-A, degrees);

		foreach( new tgt : Vehicle )
		{

		    if(tgt == vid)
		        continue;

			switch(GetVehicleModel(tgt))
			{
			    case 481, 509, 510:
					continue;
			}

			if(GetVehicleVirtualWorld(tgt) != GetVehicleVirtualWorld(vid))
			    continue;

			if(ex_GetVehicleInterior(tgt) != ex_GetVehicleInterior(vid))
			    continue;

			newdist = GetVehicleDistanceFromPoint(tgt, X, Y, Z);

			if(dist < newdist)
			    continue;

			dist = newdist;
			targetVehicle = tgt;
		}

		new
		    vehicleName[ 36 ],
		    speedStr[ 12 ],
		    numberPlate[ 28 ];

		if(targetVehicle == -1)
		{
		    format(vehicleName, sizeof vehicleName, "Target vehicle: N/A");
			format(speedStr, sizeof speedStr, "N/A");
			format(numberPlate, sizeof numberPlate, "License plate: N/A");

			if(players[0] != -1)
			{
				PlayerTextDrawSetString(players[0], pdRadar[players[0]][1], vehicleName);
				PlayerTextDrawSetString(players[0], pdRadar[players[0]][2], speedStr);
				PlayerTextDrawSetString(players[0], pdRadar[players[0]][3], numberPlate);
			}

			if(players[1] != -1)
			{
			    PlayerTextDrawSetString(players[1], pdRadar[players[1]][1], vehicleName);
				PlayerTextDrawSetString(players[1], pdRadar[players[1]][2], speedStr);
				PlayerTextDrawSetString(players[1], pdRadar[players[1]][3], numberPlate);
			}
		    continue;
		}

        new
 			I_Speed,
 			Float:F_Speed;

		ex_GetVehicleSpeed(targetVehicle, 1, I_Speed, F_Speed);


		format(vehicleName, sizeof vehicleName, "Target vehicle: %s", VehicleNames[GetVehicleModel(targetVehicle) - 400]);
		format(speedStr, sizeof speedStr, "%d~n~MPH", I_Speed);
		if(vEnum[targetVehicle][v_SPZDown] == 0)
			format(numberPlate, sizeof numberPlate, "License plate: %s", vEnum[targetVehicle][v_SPZ]);
		else
		    format(numberPlate, sizeof numberPlate, "License plate: N/A");

		if(players[0] != -1)
		{
			PlayerTextDrawSetString(players[0], pdRadar[players[0]][1], vehicleName);
			PlayerTextDrawSetString(players[0], pdRadar[players[0]][2], speedStr);
			PlayerTextDrawSetString(players[0], pdRadar[players[0]][3], numberPlate);
		}

		if(players[1] != -1)
		{
		    PlayerTextDrawSetString(players[1], pdRadar[players[1]][1], vehicleName);
			PlayerTextDrawSetString(players[1], pdRadar[players[1]][2], speedStr);
			PlayerTextDrawSetString(players[1], pdRadar[players[1]][3], numberPlate);
		}
	}

	return 1;
}

function timer_Taxameter()
{

	foreach( new vid : Vehicle )
	{
	    if(vEnum[vid][v_Taxameter] == false)
	        continue;

		/*new
		    players[2];

		players[0] = -1;
		players[1] = -1;

		foreach( new pl : Player )
		{

		    if(!IsPlayerInAnyVehicle(pl))
		        continue;

			if(GetPlayerVehicleID(pl) != vid)
			    continue;

			if(GetPlayerVehicleSeat(pl) > 1)
			    continue;

			if(players[0] == -1)
			    players[0] = pl;
			else if(players[1] == -1)
			{
			    players[1] = pl;
			    break;
			}
			else
			    break;
		}

		if(players[0] == -1 && players[1] == -1)
		    continue;*/

		new
		    vehicleName[ 55 ],
		    speedStr[ 12 ],
		    numberPlate[ 28 ];

		format(vehicleName, sizeof vehicleName, "Distance travelled: %.2f MI", vEnum[vid][v_TaxameterMileAge]);
		format(speedStr, sizeof speedStr, "$%.2f~n~USD", vEnum[vid][v_TaxameterPrice] * vEnum[vid][v_TaxameterMileAge]);
		format(numberPlate, sizeof numberPlate, "Pricing: $%.2f USD per Mile", vEnum[vid][v_TaxameterPrice]);

		foreach( new players : Player )
		{

		    if(!IsPlayerInAnyVehicle(players))
		        continue;

			if(GetPlayerVehicleID(players) != vid)
			    continue;

			PlayerTextDrawSetString(players, swoopTaxameter[players][1], vehicleName);
			PlayerTextDrawSetString(players, swoopTaxameter[players][2], speedStr);
			PlayerTextDrawSetString(players, swoopTaxameter[players][3], numberPlate);
		}
	}

	return 1;
}

/*func_timer_WhitelistCheck()
{

	new
	    mins,
		sec;

	gettime(mins, mins, sec);

	if(mins % 3 == 0 && sec == 0)
	{

	    new
	        query[144],
	        Cache:cache;

		mysql_format(MYSQL, query, sizeof query, "SELECT * FROM master_accounts WHERE Activated = '2'");
		cache = mysql_query(MYSQL, query);

	    if(cache_num_rows() > 0)
	    	FormatWarn(-1, "WhitelistWarn:", 0x9aec97ff, "Momentálne na kontrolu úètu èaká %d hráèov!", cache_num_rows());

		cache_delete(cache);

	}

	return 1;

}*/

func_timer_PoLAAnnounce()
{

	/*if(lasttruckcontrol + 10800 <= gettime())
	{
		new
		    mins,
			sec;

		gettime(mins, mins, sec);

		if(mins % 20 == 0 && sec == 0)
		{

		    foreach( new i : Player )
		    {
		        if(!IsPlayerInDynamicArea(i, AnawaltArea))
		            continue;

				SendClientMessage(i, COLOR_PORTOFLA, "[ PRIEMYSELNÝ ROZHLAS ]: Potrebujeme niekoho na skontrolovanie stavu návesov prosím!");
		    }

		}
	}*/
	
	// autobazar refresh dat
	new
	    mins,
		sec;

	gettime(mins, mins, sec);
	
	if(mins % 5 == 0 && sec == 0)
	{
	    HTTP(0, HTTP_HEAD, "countyliferoleplay.eu/scripts/autobazar.php?code=gaudetcars", "", "HTTPREQUEST_AUTOBAZAR");
	}

	if(pohrebnasluzba_lasttime + 14400 <= gettime())
	{
		if(mins % 20 == 0 && sec == 0)
		{

			SendClientMessageToAll(0x5eb04cff, "[Company Advert] Èo najrýchlejie zháòame niekoho kto je schopný previez nebotíka a umiestni ho na hrobové miesto!");
			SendClientMessageToAll(0x5eb04cff, "[Company Advert] Záujemca nech sa èo najrýchlejie dostaví na cintorín do Palomino Creek!");

		}
	}
	return 1;

}

func_timer_RezervaCheck(i)
{
    if(hasRezerva[i] == true && GetPlayerInventoryItem(i, inv_rezerva) <= 0)
	{
		//rezervu maeme
		RemovePlayerAttachedObject(i, 8);
	    hasRezerva[i] = false;
	    SetPlayerSpecialAction(i, 0);
	}
	else if(hasRezerva[i] == false && GetPlayerInventoryItem(i, inv_rezerva) > 0 )
	{
	    //rezervu dávame
	    SetPlayerAttachedObject(i, 8, 1098, 6, 0.135, 0.235, -0.257, 0.0, -1.29999, -3.7, 0.791, 0.722, 0.687, 0, 0);
	    hasRezerva[i] = true;
	    SetPlayerSpecialAction(i, 25);
	}

	if(GetPVarInt(i,"haskrabica") == 1 && GetPVarInt(i,"haskrabica_last") != 1)
	{
	    SetPlayerAttachedObject(i, 8, 1271, 6, 0.135, 0.235, -0.257, 0.0, -1.29999, -3.7, 0.791, 0.722, 0.687, 0, 0);
	    SetPVarInt(i,"haskrabica_last",1);
	    SetPlayerSpecialAction(i, 25);
	}
	else if(GetPVarInt(i,"haskrabica") == 0 && GetPVarInt(i,"haskrabica_last") != 0)
	{
	    RemovePlayerAttachedObject(i, 8);
	    DeletePVar(i,"haskrabica_last");
	    SetPlayerSpecialAction(i, 0);
	}
	return 1;
}

function timer_PrimaryTimer()
{

	func_timer_PoLAAnnounce();
	func_timer_RestartCheck();
	func_timer_AntiCheat();
	func_timer_CheckPayDay();
	func_timer_CheckDayTime();
	func_timer_CheckWeather();
	func_timer_CheckTime();
	func_timer_UpdateLoginTD();
	Alcohol::EffectCheck();

	foreach(new i : Player)
	{

	    if(i < 0 || i >= MAX_PLAYERS) continue;

		if(!IsPlayerLogged(i))
			continue;
			
		////////////////////////////////////////////////////////////////////////
		// antiafk
		if(lastkeypressunix[i] < (gettime() - 300) && isuserafk[i] != 1)
		{
		    isuserafk[i] = 1;
		    isuserafk_start[i] = gettime();
		    SendError(i, "Systém detekoval, e si AFK! Si tu?");
		}

		////////////////////////////////////////////////////////////////////////
		// Horenie hraca a jeho auta
		new tskin = GetPlayerCustomSkin(i);
		if(hor_fireId[i] > 0 && GetPlayerState(i) == PLAYER_STATE_ONFOOT && B_dmg_IsInDS[i] == false&& (tskin<20026 || tskin>20028))
		{
			new Float:PHP, Float:decrby = (300 + random(800))/100.0;
			ahac_GetPlayerHealth(i, PHP);

			if(PHP - decrby < 10.0)
			{
			    // zomre
			    ClearAnimations(i, 1);
                PutPlayerInDeathScreen(i, .head = true);
			}
			else
			{
			    PlayerDealDamage(i, decrby, 20, 1000);
			}
			

            hor_fireId[i] = 0;
			for( new ix; ix < sizeof fdFire; ix++ )
			{

				if(fdFire[ix][fdfire_Model] == 0)
					continue;

				if(!IsPlayerInDynamicArea(i,fdFire[ix][fdfire_AreaID]))
					continue;

				hor_fireId[i] = ix+1;
				break;

			}

		}
		////////////////////////////////////////////////////////////////////////
		// trucking systém
		if(Trucking::gWorkEnum[i][tworkp_Type] != 0)
		{
		    new
				vehid = GetPlayerVehicleID(i)
			;

		    if(Trucking::vWorkEnum[vehid][tworkv_State] == 1 || Trucking::vWorkEnum[vehid][tworkv_State] == 3)
		    {
		    
		        if(IsTrailerAttachedToVehicle(vehid))
		        {
		            if(GetVehicleTrailer(vehid) != Trucking::vWorkEnum[vehid][tworkv_TrailerId])
		            {
		                SendError(i, "Toto nie je tvoj náves!");
		                DetachTrailerFromVehicle(vehid);
		            }
		        }
		    
			    new
					str[64],
					timeleft = (Trucking::gWorkEnum[i][tworkp_ToUnix] - gettime())
				;

			    format(str, sizeof str, "Zostavajuci cas ~r~%02d:%02d", floatround(timeleft / 60, floatround_floor), timeleft % 60);

				PlayerTextDrawSetString(i, PTD_timeleft[i], str);
			}
			else if(Trucking::vWorkEnum[vehid][tworkv_State] == 2)
		    {
		        if(IsTrailerAttachedToVehicle(vehid))
		        {
		            if(GetVehicleTrailer(vehid) != Trucking::vWorkEnum[vehid][tworkv_TrailerId])
		            {
		                SendError(i, "Toto nie je tvoj náves!");
		                DetachTrailerFromVehicle(vehid);
		            }
		        }
		    
			    new
					str[64],
					timeleft = (Trucking::gWorkEnum[i][tworkp_ToUnix] - gettime())
				;

			    format(str, sizeof str, "Naves sa naklada, zostava ~r~%02d:%02d", floatround(timeleft / 60, floatround_floor), timeleft % 60);

				PlayerTextDrawSetString(i, PTD_timeleft[i], str);

				if((floatround(timeleft / 60, floatround_floor) == 0 && timeleft % 60 == 0) || floatround(timeleft / 60, floatround_floor) < 0)
				{
				    Trucking::vWorkEnum[Trucking::gWorkEnum[i][tworkp_VehicleId]][tworkv_State] = 3;

					Trucking::gWorkEnum[i][tworkp_StartUnix] 									= gettime();
					Trucking::gWorkEnum[i][tworkp_ToUnix]   	 								= gettime() + (18*60);

					g_I_playerCheckpoint[i] = checkp_prepravka;
	        		DisablePlayerCheckpoint(i);

	        		new
				        Float:lX, Float:lY, Float:lZ
					;

					lX = Float:Trucking::TransportDepots[ Trucking::vWorkEnum[Trucking::glastveh[i]][tworkv_FinishId] ][2];
					lY = Float:Trucking::TransportDepots[ Trucking::vWorkEnum[Trucking::glastveh[i]][tworkv_FinishId] ][3];
					lZ = Float:Trucking::TransportDepots[ Trucking::vWorkEnum[Trucking::glastveh[i]][tworkv_FinishId] ][4];

					fix_SetPlayerCheckpoint(i, lX, lY, lZ, 3.0);

					Trucking::vWorkEnum[vehid][tworkv_State] 									= 3;

					TogglePlayerControllable(i, 1);

					PlayerTextDrawSetString(i, PTD_timeleft[i], "Vrat sa do Blueberry");

					SCFM(i, COLOR_GREEN, "[ROUTE ADVISOR v11.5.4.134]; {FFFFFF}Navigujem a na výkladisko! Ani len to tu nepokráb!");
				}
			}
			else if(Trucking::vWorkEnum[vehid][tworkv_State] == 4)
		    {
			    new
					str[64],
					timeleft = (Trucking::gWorkEnum[i][tworkp_ToUnix] - gettime())
				;

			    format(str, sizeof str, "Naves sa vyklada, zostava ~r~%02d:%02d", floatround(timeleft / 60, floatround_floor), timeleft % 60);

				PlayerTextDrawSetString(i, PTD_timeleft[i], str);

				if((floatround(timeleft / 60, floatround_floor) == 0 && timeleft % 60 == 0) || floatround(timeleft / 60, floatround_floor) < 0)
				{
				    Trucking::vWorkEnum[Trucking::gWorkEnum[i][tworkp_VehicleId]][tworkv_State] = 3;

					Trucking::gWorkEnum[i][tworkp_StartUnix] 									= gettime();
					Trucking::gWorkEnum[i][tworkp_ToUnix]   	 								= gettime() + (18*60);

					g_I_playerCheckpoint[i] = checkp_prepravka;
	        		DisablePlayerCheckpoint(i);

	        		Trucking::vWorkEnum[vehid][tworkv_State] 									= 5;

					fix_SetPlayerCheckpoint(i, -18.836, -279.958, 5.42, 6.0);

					TogglePlayerControllable(i, 1);

					SCFM(i, COLOR_GREEN, "[ROUTE ADVISOR v11.5.4.134]; {FFFFFF}Navigujem a domov!");
					SendSuccess(i, "Naves bol vylozeny, cestuj domov!");
					PlayerTextDrawHide(i, PTD_timeleft[i]);
				}
			}
		}
		else
		    PlayerTextDrawHide(i, PTD_timeleft[i]);
		////////////////////////////////////////////////////////////////////////
		// úprava bariér
		if(IsEditingBarrier[i] == true && editingpaskaid{i} != -1)
		{
		    new
				Float:X, Float:Y, Float:Z
			;

			GetPlayerPos(i, X, Y, Z);
		    SetLineSegmentDest(editingpaskaid{i}, X, Y, Z);
		}
		////////////////////////////////////////////////////////////////////////
		// poèasie v interiéroch
		new Float:pos[2];

		GetPlayerPos(i, pos[0], pos[0], pos[1]);

		if(pos[1] >= 550.0 && !IsPlayerInAnyVehicle(i))
		{
		    SetPlayerWeather(i, 2);
		}
		else
		{
		    SetPlayerWeather(i, gWeather);
		}
		////////////////////////////////////////////////////////////////////////
		// úprava textdrawu zóny pod¾a mena zóny
		if(GetPlayerVirtualWorld(i) == 0)
		{
			new zonen[32];
			GetPlayer2DZone(i, zonen, 32);
			PlayerTextDrawSetString(i, td_webTD[i], zonen);
		}
		else
		    PlayerTextDrawSetString(i, td_webTD[i], "_");
		////////////////////////////////////////////////////////////////////////
		// rezerva
		func_timer_RezervaCheck(i);

		if(hasRezerva[i] == true && GetPlayerSpecialAction(i) != 25)
		    SetPlayerSpecialAction(i, 25);
		////////////////////////////////////////////////////////////////////////
		// kontrola èi má animáciu pút ak má putá
		if(IsPlayerCuffed(i) && GetPlayerSpecialAction(i) != SPECIAL_ACTION_CUFFED)
			SetPlayerSpecialAction(i, SPECIAL_ACTION_CUFFED);
		////////////////////////////////////////////////////////////////////////
		// èas k výplate
		if(isuserafk[i] != 1)
        	g_I_paydayTime[i] ++;
        ////////////////////////////////////////////////////////////////////////
        // svetlo v domácnosti pod¾a èasu
        switch(gActualTime)
        {
            case 0..4, 22..24:
                PlayerTextDrawBoxColor(i, houseSwitch[i], 0x00000088);

			case 5..9, 17..21:
                PlayerTextDrawBoxColor(i, houseSwitch[i], 0x00000055);

			default:
			    PlayerTextDrawBoxColor(i, houseSwitch[i], 0x00000033);
		}
		////////////////////////////////////////////////////////////////////////
		// iné
		func_timer_PlayerExpireDonator(i);
		func_timer_PlayerAntiCheat(i);
        func_timer_UpdateNameTag(i);
		func_timer_UpdatePlayTime(i);
		func_timer_CorrectLevel(i);
		func_timer_CorrectFaction(i);
		func_timer_FactionLeave(i);
		func_timer_IsSpectating(i);
		func_timer_JailCheck(i);
		func_timer_DMVCheck(i);

	}
	return 1;
}

function timer_SpawnPlayer(playerid)
{
	SpawnPlayer(playerid);
	return 1;
}

function timer_LoadPlayerAfterSpawn(playerid)
{

	printf("[LOGIN]: Internal: %s - Name: %s - Master: %s", srvcharname[playerid], ReturnName(playerid), S_masterAccount[playerid]);
	
	if(strlen(srvcharname[playerid]) < 3)
	{
	    SetTimerEx("timer_KickPlayer",5,false,"i",playerid);
	    return 1;
	}

    lastkeypressunix[playerid] = gettime();
    Weapons::resetWeapons(playerid);

    new
		S_query[256],
		Cache:q,
		S_queryEx[256],
		Float:F_Health,
		Float:F_Armour,
		Float:F_Hunger,
		Float:F_PosX,
		Float:F_PosY,
		Float:F_PosZ,
		I_VirtualWorld,
		I_Interior,
		I_SkinID,
  		I_AdminLevel,
  		Float:I_Money,
  		I_Gender,
  		I_Faction,
  		I_FactionRank,
  		I_FactionBadge,
  		S_FactionTitle[64],
		I_RoleplayLevel,
		hour,
		minu;

    mysql_format(MYSQL, S_query, sizeof(S_query), "SELECT * FROM char_main WHERE Username = '%e'", srvcharname[playerid]);
	q=mysql_query(MYSQL, S_query);

	if(cache_num_rows() < 1) {

	    cache_delete(q);
	    mysql_format(MYSQL, S_queryEx, sizeof(S_queryEx), "INSERT INTO char_main (Username) VALUES ('%e')", srvcharname[playerid]);
		mysql_query(MYSQL, S_queryEx, false);

		mysql_format(MYSQL, S_query, sizeof(S_query), "SELECT * FROM char_main WHERE Username = '%e'", srvcharname[playerid]);
		q=mysql_query(MYSQL, S_query);
	}

	cache_get_value_name_float(0, "Health", F_Health);

	if(F_Health < 5.0)
		F_Health = 100.0;

	cache_get_value_name_float(0, "Armour", F_Armour);
	cache_get_value_name_float(0, "Hunger", F_Hunger);
	cache_get_value_name_float(0, "Money", I_Money);
	cache_get_value_name_float(0, "PosX", F_PosX);
	cache_get_value_name_float(0, "PosY", F_PosY);
	cache_get_value_name_float(0, "PosZ", F_PosZ);
	cache_get_value_name_int(0, "VirtualWorld", I_VirtualWorld);
	cache_get_value_name_int(0, "Interior", I_Interior);
	cache_get_value_name_int(0, "SkinID", I_SkinID);
	cache_get_value_name_int(0, "IsWorking", IsWorking[playerid]);
	cache_get_value_name_int(0, "skin_Civil", I_pSkin_Civil[playerid]);
	cache_get_value_name_int(0, "skin_Work", I_pSkin_Work[playerid]);
	cache_get_value_name_int(0, "Gender", I_Gender);
	cache_get_value_name_int(0, "BloodAlcohol", Alcohol::inblood[ playerid ]);
	cache_get_value_name_int(0, "optShowColor", opt_ShowColor[playerid]);

	if(I_Gender == 1)
	{
	    currSkinModel[playerid] = buyableMaleSkins[0];
		currSkinIndex[playerid] = 0;
	}
	else
	{
	    currSkinModel[playerid] = buyableFemaleSkins[0];
		currSkinIndex[playerid] = 0;
	}

	cache_get_value_name_int(0, "Faction", I_Faction);
	cache_get_value_name_int(0, "FactionRank", I_FactionRank);
	cache_get_value_name_int(0, "FactionBadge", I_FactionBadge);
	cache_get_value_name(0, "FactionTitle", S_FactionTitle);
	cache_get_value_name_int(0, "RoleplayLevel", I_RoleplayLevel);
	cache_get_value_name_int(0, "XP", g_I_XP[playerid]);
	cache_get_value_name_int(0, "PlayTimeHour", g_I_playTimeHour[playerid]);
	cache_get_value_name_int(0, "PlayTimeMin", g_I_playTimeMin[playerid]);
	cache_get_value_name_int(0, "Vyplata", g_I_Vyplata[playerid]);
	cache_get_value_name_int(0, "VyplataExpire", g_I_VyplataExpire[playerid]);
	cache_get_value_name_int(0, "Vypoved", g_I_VypovedUnix[playerid]);
	cache_get_value_name_int(0, "FightStyle", g_I_Fightstyle[playerid]);
	cache_get_value_name_int(0, "PayDayTime", g_I_paydayTime[playerid]);
	cache_get_value_name_int(0, "Vyplata_TYP", Vyplata_TYP[playerid]);
	cache_get_value_name_int(0, "PHONE_SleepMode", phone_SleepMode[playerid]);
	cache_get_value_name_int(0, "PHONE_BackGround", phone_BackgroundScreen[playerid]);

	cache_get_value_name_int(0, "Illegal_Faction", g_I_IlPlayerFaction[playerid]);
	cache_get_value_name_int(0, "Illegal_FactionRank", g_I_IlPlayerFactionRank[playerid]);
	cache_get_value_name_int(0, "WalkStyle", PlayerWalkStyle[playerid]);
	
	cache_get_value_name_int(0, "WEAPONSKILL_PISTOL", weaponskill_pistol[playerid]);
    cache_get_value_name_int(0, "WEAPONSKILL_PISTOL_SILENCED", weaponskill_pistol_silenced[playerid]);
    cache_get_value_name_int(0, "WEAPONSKILL_DESERT_EAGLE", weaponskill_desert_eagle[playerid]);
    cache_get_value_name_int(0, "WEAPONSKILL_SHOTGUN", weaponskill_shotgun[playerid]);
    cache_get_value_name_int(0, "WEAPONSKILL_SAWNOFF_SHOTGUN", weaponskill_sawnoff_shotgun[playerid]);
    cache_get_value_name_int(0, "WEAPONSKILL_SPAS12_SHOTGUN", weaponskill_spas12_shotgun[playerid]);
    cache_get_value_name_int(0, "WEAPONSKILL_MICRO_UZI", weaponskill_micro_uzi[playerid]);
    cache_get_value_name_int(0, "WEAPONSKILL_MP5", weaponskill_mp5[playerid]);
    cache_get_value_name_int(0, "WEAPONSKILL_AK47", weaponskill_ak47[playerid]);
    cache_get_value_name_int(0, "WEAPONSKILL_M4", weaponskill_m4[playerid]);
    cache_get_value_name_int(0, "WEAPONSKILL_SNIPERRIFLE", weaponskill_sniperrifle[playerid]);
    
    cache_get_value_name_int(0, "opt_vyppasy", opt_vyppasy[playerid]);
    cache_get_value_name_int(0, "trestnebody", ptrestnebody[playerid]);
    cache_get_value_name_int(0, "zakazrizeni", zakazrizeni[playerid]);
    
    if(zakazrizeni[playerid] < gettime()) zakazrizeni[playerid] = 0;
    
    ValidateWeaponSkill(playerid);

	new icjail = 0;

	cache_get_value_name_int(0, "IsInJail", icjail);
	cache_get_value_name_int(0, "JailTime", ic_jailTime[playerid]);

	cache_get_value_name_int(0, "Assistances", assistCount[playerid]);

	if(icjail == 0) ic_isInJail[playerid] = false;
	else ic_isInJail[playerid] = true;

	loginPos[playerid][0] = F_PosX;
	loginPos[playerid][1] = F_PosY;
	loginPos[playerid][2] = F_PosZ;

	cache_get_value_name(0, "ID_ReleaseDate", ID_ReleaseDate[playerid]);
	cache_get_value_name(0, "ID_DateOfBirth", ID_DateOfBirth[playerid]);
	cache_get_value_name(0, "ID_PlaceOfBirth", ID_PlaceOfBirth[playerid]);
	cache_get_value_name(0, "ID_Settlement", ID_Settlement[playerid]);
	cache_get_value_name_int(0, "ID_CardID", ID_CardID[playerid]);

	new
		WasPlayed,
		IsCuffed,
		HasVrece,
		HasLano,
		IsInDeathMode
	;

    cache_get_value_name_int(0, "WasPlayed", WasPlayed);
    cache_get_value_name_int(0, "IsCuffed", IsCuffed);
    cache_get_value_name_int(0, "HasVrece", HasVrece);
    cache_get_value_name_int(0, "HasLano", HasLano);
    cache_get_value_name_int(0, "IsInDeathMode", IsInDeathMode);

    // ZMA AK BUDU BUGY START
    if(IsInDeathMode == 1)
        B_isPlayerInDM[playerid] = true;
	else
	    B_isPlayerInDM[playerid] = false;
	// ZMA AK BUDU BUGY END

    loginWP[playerid] = WasPlayed;

    cache_get_value_name_int(0, "skinStorage1", skinStorage[playerid][0]);
    cache_get_value_name_int(0, "skinStorage2", skinStorage[playerid][1]);
    cache_get_value_name_int(0, "skinStorage3", skinStorage[playerid][2]);
    cache_get_value_name_int(0, "skinStorage4", skinStorage[playerid][3]);
    cache_get_value_name_int(0, "skinStorage5", skinStorage[playerid][4]);

    format(prizvuk[playerid], 32, "");
    format(popis[playerid], 144, "");

    cache_get_value_name(0, "Prizvuk", prizvuk[playerid]);
    cache_get_value_name(0, "Popis", popis[playerid]);

	F_PosZ += 0.8;

	cache_delete(q);

	mysql_format(MYSQL, S_query, sizeof(S_query), "SELECT * FROM master_accounts WHERE Username = '%e'", S_masterAccount[playerid]);
	q = mysql_query(MYSQL, S_query);

	cache_get_value_name_int(0, "AdminLevel", I_AdminLevel);
	cache_get_value_name_int(0, "DonatorLevel", g_I_donatorLevel[playerid]);
	cache_get_value_name_int(0, "Mince", g_I_mince[playerid]);
	cache_get_value_name_int(0, "DonatorExpireUnix", g_I_donatorExpire[playerid]);
	cache_get_value_name_int(0, "Kicks", stats_Kick[playerid]);
	cache_get_value_name_int(0, "Bans", stats_Ban[playerid]);
	cache_get_value_name_int(0, "Jails", stats_Jail[playerid]);
	cache_get_value_name_int(0, "opt_WebTD", opt_WebTd[playerid]);
    cache_get_value_name_int(0, "opt_centy", opt_CentTd[playerid]);
	cache_get_value_name_int(0, "opt_TimeTD", opt_TimeTd[playerid]);
	cache_get_value_name_int(0, "opt_PM", opt_PM[playerid]);
	cache_get_value_name_int(0, "opt_Sounds", opt_Sounds[playerid]);
	cache_get_value_name_int(0, "opt_VitalTd", opt_VitalTd[playerid]);
	cache_get_value_name_int(0, "opt_HungerTd", opt_HungerTd[playerid]);
	cache_get_value_name_int(0, "opt_ChatAnim", opt_ChatAnim[playerid]);
	cache_get_value_name_int(0, "opt_HideMaster", opt_HideMaster[playerid]);
	cache_get_value_name_int(0, "opt_tachometer", opt_tachometer[playerid]);
	cache_get_value_name(0, "Registered", g_S_Registered[playerid]);
	cache_get_value_name(0, "LastChangelog", lastChangelog[playerid]);

	cache_get_value_name_int(0, "isInJail", isInJail[playerid]);
	cache_get_value_name(0, "jail_Admin", jail_Admin[playerid]);
	cache_get_value_name(0, "jail_Reason", jail_Reason[playerid]);
    cache_get_value_name_int(0, "jail_Time_M", jail_Time[playerid][0]);
    cache_get_value_name_int(0, "jail_Time_S", jail_Time[playerid][1]);
    cache_get_value_name_int(0, "RenameTicket", RenameTicket[playerid]);
    cache_get_value_name_int(0, "SVO", SVO[playerid]);
    cache_get_value_name_int(0, "MessagesSent", MessagesSent[playerid]);
    cache_get_value_name_int(0, "PlayTime", MAPlayTime[playerid]);
    
	if(SVO[playerid] < 350)
	    SVO[playerid] = 2000;

 	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, SVO[playerid], playerid);

    cache_delete(q);

    ac_immunity[playerid] = true;

    ahac_SetPlayerHealth(playerid, F_Health);
	ahac_SetPlayerHealth(playerid, F_Health);
	ahac_SetPlayerHealth(playerid, F_Health);

	if(WasPlayed == 0)
	{

	    I_Money = float(Register_Money);
		F_Health = 100.0;
		F_Hunger = 100.0;

		new
		    query2[256];

		mysql_format(MYSQL, query2, 256, "UPDATE char_main SET WasPlayed = '1' WHERE Username = '%e'", srvcharname[playerid]);
		mysql_query(MYSQL, query2, false);

		SendClientMessage(playerid, 0xD0D0D0FF, "> Vybral si si tvoj novo zaloený charakter, vitaj!");
		SendClientMessage(playerid, 0xD0D0D0FF, "> Na zaèiatok ti dám nejaké tie rady, ale aj tak, pred Information Centre má tutoriál, urèite si ho prezri!");
		SendClientMessage(playerid, 0xD0D0D0FF, "> Do budovy vstúpi stlaèením klávesy Y alebo príkazom /enter, vyjde z nej príkazom /exit.");
		SendClientMessage(playerid, 0xD0D0D0FF, "> Na zaèiatok urèite navtív Information Centre, kde si urobí obèiansky preukaz a prenajme bicykel.");
		SendClientMessage(playerid, 0xD0D0D0FF, "> Ak si technický typ alebo proste len chce ma èím niekomu zavola, kúp si mobil v MnB Electronics,");
		SendClientMessage(playerid, 0xD0D0D0FF, "> ktorá je hneï ved¾a, na¾avo od Information Centre!");
		SendClientMessage(playerid, 0xD0D0D0FF, ">");
		SendClientMessage(playerid, 0xD0D0D0FF, "> Ak by si nieèomu nerozumel, opýtaj sa príkazom /assist. Dúfame, e si u nás uije hru!");
		
		TogglePlayerControllable(playerid, 1);

	}
	else
	{
	    Attachment_Load(playerid);
	    SendClientMessage(playerid, 0xD0D0D0FF, "> Úspene si si vybral svoj charakter! Vitaj spä v hre.");
	    TogglePlayerControllable(playerid, 1);
	}

	if(I_VirtualWorld != 0)
	{
	    Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 2000, playerid);
	}

	Streamer_UpdateEx(playerid, F_PosX, F_PosY, F_PosZ, I_VirtualWorld, I_Interior, STREAMER_TYPE_OBJECT, 1000, 1);
	//SetPlayerPos(playerid, F_PosX, F_PosY, F_PosZ);
	SetPlayerFacingAngle(playerid, 0.0);
	SetPlayerVirtualWorld(playerid, I_VirtualWorld);
	SetPlayerInterior(playerid, I_Interior);

	SetPlayerGender(playerid, I_Gender);

	SetPlayerRoleplayLevel(playerid, I_RoleplayLevel);

 	g_I_playerFaction[playerid] = I_Faction;
	g_I_playerFactionRank[playerid] = I_FactionRank;
 	g_I_playerFactionBadge[playerid] = I_FactionBadge;
	format(g_S_playerFactionTitle[playerid], 32, S_FactionTitle);

	ex_SetPlayerSkin(playerid, I_SkinID);
	ex_SetPlayerMoney(playerid, I_Money);

	SetPlayerAdminLevel(playerid, I_AdminLevel);

	ahac_SetPlayerArmour(playerid, F_Armour);
	ex_SetPlayerHunger(playerid, F_Hunger);

	TextDrawHideForPlayer(playerid, blackTD);

	new
	    S_statLogin[256] = "> tatistiky: {ffffff}",
	    S_tempStrig[256];
    format(S_tempStrig, 256, "ivot (%.1f%%) - Vesta (%.1f%%) - Hlad (%.1f%%) - Hotovos ($%.2f)", F_Health, F_Armour, F_Hunger, I_Money);
	strcat(S_statLogin, S_tempStrig);
	SendClientMessage(playerid, 0xD0D0D0FF, S_statLogin);

	mysql_format(MYSQL, S_query, sizeof(S_query), "SELECT * FROM char_inventory WHERE Username = '%e'", srvcharname[playerid]);
	q = mysql_query(MYSQL, S_query);
	if(cache_num_rows() < 1) {
	    cache_delete(q);
	    mysql_format(MYSQL, S_queryEx, sizeof(S_queryEx), "INSERT INTO char_inventory (Username) VALUES ('%e')", srvcharname[playerid]);
		mysql_query(MYSQL, S_queryEx, false);

		mysql_format(MYSQL, S_query, sizeof(S_query), "SELECT * FROM char_inventory WHERE Username = '%e'", srvcharname[playerid]);
		q = mysql_query(MYSQL, S_query);
	}

	cache_get_value_name_int(0, "Mask", I_playerInventory[playerid][inv_mask]);
	cache_get_value_name_int(0, "pepsiCan", I_playerInventory[playerid][inv_pepsiCan]);
	cache_get_value_name_int(0, "colaCan", I_playerInventory[playerid][inv_colaCan]);
	cache_get_value_name_int(0, "kitKatChocolate", I_playerInventory[playerid][inv_kitKatChocolate]);
	cache_get_value_name_int(0, "pringlesChips", I_playerInventory[playerid][inv_pringlesChips]);
	cache_get_value_name_int(0, "PizzaItem", I_playerInventory[playerid][inv_pizza]);
	cache_get_value_name_int(0, "FishingPermit", I_playerInventory[playerid][inv_fishingPermit]);
	cache_get_value_name_int(0, "VodicakA", I_playerInventory[playerid][inv_vodicakA]);
	cache_get_value_name_int(0, "VodicakB", I_playerInventory[playerid][inv_vodicakB]);
	cache_get_value_name_int(0, "VodicakC", I_playerInventory[playerid][inv_vodicakC]);
	cache_get_value_name_int(0, "VodicakT", I_playerInventory[playerid][inv_vodicakT]);
	cache_get_value_name_int(0, "PermFly", I_playerInventory[playerid][inv_flyPermit]);
	cache_get_value_name_int(0, "PermBoat", I_playerInventory[playerid][inv_boatPermit]);
	cache_get_value_name_int(0, "CreditCard", I_playerInventory[playerid][inv_creditCard]);
	cache_get_value_name_int(0, "Marihuana", I_playerInventory[playerid][inv_weed]);
	cache_get_value_name_int(0, "Marihuana_Seed", I_playerInventory[playerid][inv_weed_seed]);
	cache_get_value_name_int(0, "BoomBox", I_playerInventory[playerid][inv_boomBox]);
	cache_get_value_name_int(0, "ObcianskyPreukaz", I_playerInventory[playerid][inv_idCard]);
	cache_get_value_name_int(0, "pacidlo", I_playerInventory[playerid][inv_pacidlo]);
	cache_get_value_name_int(0, "Kanister", I_playerInventory[playerid][inv_kanister]);
	cache_get_value_name_int(0, "KanisterType", kanisterType[playerid]);
	cache_get_value_name_int(0, "Naboje", I_playerInventory[playerid][inv_naboje]);
	cache_get_value_name_int(0, "Bandaz", I_playerInventory[playerid][inv_bandaz]);
	cache_get_value_name_int(0, "ZbrojnyPreukaz", I_playerInventory[playerid][inv_zbrojnyPreukaz]);
	cache_get_value_name_int(0, "LotteryTicket", I_playerInventory[playerid][inv_lotteryTicket]);
	cache_get_value_name_int(0, "CarBattery", I_playerInventory[playerid][inv_carBattery]);
	cache_get_value_name_int(0, "lano", I_playerInventory[playerid][inv_lano]);
	cache_get_value_name_int(0, "puta", I_playerInventory[playerid][inv_puta]);
	cache_get_value_name_int(0, "Rezerva", I_playerInventory[playerid][inv_rezerva]);
	cache_get_value_name_int(0, "Cigarety", I_playerInventory[playerid][inv_cigarety]);
	cache_get_value_name_int(0, "Zapalovac", I_playerInventory[playerid][inv_zapalovac]);
	cache_get_value_name_int(0, "Telefon", I_playerInventory[playerid][inv_telefon]);
	cache_get_value_name_int(0, "SimKarta", I_playerInventory[playerid][inv_simcard]);
	cache_get_value_name_int(0, "vrece", I_playerInventory[playerid][inv_vrece]);
	cache_get_value_name_int(0, "kocka", I_playerInventory[playerid][inv_kocka]);
	cache_get_value_name_int(0, "Blood", I_playerInventory[playerid][inv_blood]);
	cache_get_value_name(0, "Blood_Owner", bloodInventory[playerid]);
	cache_get_value_name_float(0, "RybyKG", I_playerInventory[playerid][inv_rybyKG]);
	cache_get_value_name_float(0, "Vysielacka", I_playerInventory[playerid][inv_vysielacka]);
	cache_get_value_name_int(0, "VysielackaToggle", vysielackaToggle[playerid]);
	cache_get_value_name_int(0, "weeds_1", I_playerInventory[playerid][inv_weeds1]);
	cache_get_value_name_int(0, "weeds_2", I_playerInventory[playerid][inv_weeds2]);
	cache_get_value_name_int(0, "weeds_3", I_playerInventory[playerid][inv_weeds3]);
	cache_get_value_name_int(0, "hnojivo", I_playerInventory[playerid][inv_hnojivo]);
	cache_get_value_name_int(0, "Sprite", I_playerInventory[playerid][inv_sprite]);
	cache_get_value_name_int(0, "SpriteLean", I_playerInventory[playerid][inv_spritelean]);
	cache_get_value_name_int(0, "PETCup", I_playerInventory[playerid][inv_petcup]);
	cache_get_value_name_int(0, "Prometh", I_playerInventory[playerid][inv_prometh]);
	cache_get_value_name_int(0, "Skateboard", I_playerInventory[playerid][inv_skateboard]);
	cache_get_value_name_int(0, "Katalogy", I_playerInventory[playerid][inv_katalog]);
	
	cache_get_value_name_int(0, "Tree_Sadenice", I_playerInventory[playerid][inv_tree_sadenica]);
	cache_get_value_name_int(0, "Tree_Log_Oak", I_playerInventory[playerid][inv_tree_log_oak]);
	cache_get_value_name_int(0, "Tree_Log_Birch", I_playerInventory[playerid][inv_tree_log_birch]);
	cache_get_value_name_int(0, "Tree_Log_Spruce", I_playerInventory[playerid][inv_tree_log_spruce]);
	cache_delete(q);

    ////////////////////////////////////////////////////////////////////////////

	/*
	    EMPTY WEAPONS
	*/

	mysql_format(MYSQL, S_query, sizeof(S_query), "SELECT * FROM char_eweapons WHERE user = '%e'", srvcharname[playerid]);
	q = mysql_query(MYSQL, S_query);

	new
	    lweaponidx,
		lorigin[128],
	    lslotx,
	    haveguns = 0
	;

	for(new i, r = cache_num_rows(); i < r; i++)
	{
	    cache_get_value_name_int(i, "weaponid", lweaponidx);
	    lslotx = ac_GetWeaponSlot(lweaponidx);

	    if(playerEmptyGuns[playerid][lslotx] < 1)
	    {
	        cache_get_value_name_int(i, "iswork", playerEmptyGuns_W[playerid][lslotx]);
	        cache_get_value_name_int(i, "isperm", playerEmptyGuns_P[playerid][lslotx]);
	        cache_get_value_name_int(i, "serialnumber", playerEmptyGuns_S[playerid][lslotx]);
	        cache_get_value_name(i, "origin", lorigin);
	    
	        playerEmptyGuns[playerid][lslotx] = lweaponidx;
	        format(playerEmptyGuns_O[playerid][lslotx], 128, "%s", lorigin);
	        haveguns = 1;
		}
	}

	cache_delete(q);

	mysql_format(MYSQL, S_query, sizeof(S_query), "DELETE FROM char_eweapons WHERE user = '%e'", srvcharname[playerid]);
	mysql_tquery(MYSQL, S_query);

	if(haveguns == 1)
	    SendClientMessage(playerid, 0xD0D0D0FF, "> Prázdne zbrane: Má nejaké prázdne zbrane! Poui /myguns!");

	/* DRUGS SYSTEM */
	mysql_format(MYSQL, S_query, sizeof(S_query), "SELECT * FROM char_drugs_inv WHERE Username = '%e'", srvcharname[playerid]);
	q = mysql_query(MYSQL, S_query);

	if(cache_num_rows() < 1) {
	    mysql_format(MYSQL, S_queryEx, sizeof(S_queryEx), "INSERT INTO char_drugs_inv (Username) VALUES ('%e')", srvcharname[playerid]);
		mysql_tquery(MYSQL, S_queryEx);
	}
	else
	{

	    new Username[ 25 ];
	    cache_get_value_name(0, "Username", Username);

	    if(!strcmp(Username, ReturnName(playerid), false))
	    {
			foreach( new i : Drugs )
			{
			    new getString[30], drug;

			    format(getString, 30, "Slot%d",i+1);
			    cache_get_value_name_int(0, getString, drug);

			    if(drug == 0)
					continue;

				drug_givePlayerDrug(playerid, i, drug);
			}
		}
	}

	cache_delete(q);

	/* END OF DRUG SYSTEM */

	/* ALCOHOL SYSTEM */

	mysql_format(MYSQL, S_query, sizeof(S_query), "SELECT * FROM char_alcohol_inv WHERE Username = '%e'", srvcharname[playerid]);
	q = mysql_query(MYSQL, S_query);

	for( new x, y = cache_num_rows(); x < y; x++ )
	{
	    if(x >= MAX_ALCOHOL_INVENTORY) break;

	    new tstrx[128];
	    cache_get_value_name(x, 	"Name", 		tstrx);
	    cache_get_value_name_int(x, "ObjectId",		Alcohol::inventory[playerid][x][alcinv_Object]);
	    cache_get_value_name_int(x, "Alcohol",		Alcohol::inventory[playerid][x][alcinv_Alcohol]);
	    cache_get_value_name_int(x, "Objem",		Alcohol::inventory[playerid][x][alcinv_Objem]);
	    cache_get_value_name_int(x, "DecreaseBy",	Alcohol::inventory[playerid][x][alcinv_DecreaseBy]);

	    format(Alcohol::inventory[playerid][x][alcinv_Name], 63, tstrx);
	}

	cache_delete(q);

	/* END OF ALCOHOL SYSTEM */

	gettime(hour, minu);

	if(hour > -1 && minu < 41) g_B_canHavePayDay[playerid] = true;
	else g_B_canHavePayDay[playerid] = false;

	mysql_format(MYSQL, S_query, sizeof(S_query), "UPDATE char_main SET LastOn = NOW() WHERE Username = '%e'", srvcharname[playerid]);
	mysql_query(MYSQL, S_query, false);

	SetTimerEx("ac_timer_DisableImmunity", 3000, false, "i", playerid);

	CheckPlayerAdminJail(playerid);

	SetPlayerCuffed(playerid, false);

	new bool:boolex=false;
	if(IsCuffed == 1) boolex=true;

	SetPlayerCuffed(playerid, boolex);

	if(HasVrece == 1)
	{
	    SetPlayerAttachedObject(playerid, 8, 2060, 2,0,0.00400000,0.02199999,0,0,0,0.37699991,0.51799982,0.94299995);
	    pVrece[playerid] = true;

	    PlayerTextDrawShow(playerid, vreceTD[playerid]);
	}

	if(HasLano == 1)
	{
	   	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	    SetPlayerAttachedObject(playerid, 9, 19088, 5, 0.061000, 0.119000, 0.074000, -75.700027, 4.099957, -166.800003, 0.050000, 0.227000, 0.053000);
	    pLano[playerid] = true;
	}

	if(IsPlayerWorking(playerid) && GetPlayerFaction(playerid) > 0)
	    SendClientMessage(playerid, COLOR_ADMINCMD, "> {ffffff}Nezabudni, e tvoj charakter je momentálne v slube!");

    if(g_I_paydayTime[playerid] > 1739 && g_I_VyplataExpire[playerid] > gettime() + 5)
   	{
    	SCFM(playerid, 0xD0D0D0FF, "> Prila ti výplata! Vyzdvihni si ju v Palomino Creek Town Hall príkazom /signcheck [èíslo eku], ak chce!");
	    g_B_canHavePayDay[playerid] = true;
	    g_B_canPickUpPayDay[playerid] = true;

		payDayCheck[playerid] = rand(1, 9999);

		new
			tdStr[64];

		format(tdStr, sizeof tdStr, "Cislo seku: ~w~%04d", payDayCheck[playerid]);

		PlayerTextDrawShow(playerid, TD_vyplaty[playerid][0]);
	  	PlayerTextDrawSetString(playerid, TD_vyplaty[playerid][0], tdStr);
  		PlayerTextDrawShow(playerid, TD_vyplaty[playerid][0]);
 	}
 	else
 	    g_I_VyplataExpire[playerid] = 0;

	/*if(strlen(lastChangelog[playerid]) > 0 && strcmp(lastChangelog[playerid], GM_VERSION, true))
	{
	    // Show changelog

        HTTP(playerid, HTTP_GET, "countyliferoleplay.eu/changelog.php", "", "HTTPREQUEST_CHANGELOG");

	}*/

	if(isInJail[playerid] == true)
	{

		SCFM(playerid, COLOR_SERVER, "> Si v admin jaile od administrátora %s za %s", jail_Admin[playerid], jail_Reason[playerid]);

		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, playerid+90000);
		SetPlayerPos(playerid, 167.164, 1391.767, 11.562);
		SetPlayerFacingAngle(playerid, 360.0);
		SetCameraBehindPlayer(playerid);

		Achievement::Reward(playerid, ACHIEVEMENT_ADMIN_JAIL);
	}
	else if(isInJail[playerid] == false && (GetPlayerVirtualWorld(playerid) > 90000 && GetPlayerVirtualWorld(playerid) < I_gm_playerRecord+90001))
	{
	    SetPlayerPos(playerid, 2300.82, 25.654, 26.490);
		SetPlayerFacingAngle(playerid, 0.0);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetCameraBehindPlayer(playerid);
	}

	b_playerIsLogged[playerid] = true;

	format(lastChangelog[playerid], 64, GM_VERSION);

	g_I_mince[playerid] += 1;

	createppopis(playerid);

	new query[ 1024];
	mysql_format(MYSQL, query, sizeof query, "INSERT INTO login_history (username,type,timestampdate,ipaddress) VALUES ('%e', '0', '%d', '%e')",ReturnMaster(playerid),gettime(),ReturnIP(playerid));
	mysql_tquery(MYSQL, query);

	////////////////////////////////////////////////////////////////////////////
	Achievement::Reward(playerid, ACHIEVEMENT_FIRST_CHARACTER);
	////////////////////////////////////////////////////////////////////////////

    BumpPlayerOptions(playerid);
    BumpPlayerColor(playerid);

    ////////////////////////////////////////////////////////////////////////////

    new Cache:cache;
    mysql_format(MYSQL, query, 1024, "SELECT * FROM char_pokuty WHERE Username = '%e' AND Paid = 0", srvcharname[playerid]);
	cache = mysql_query(MYSQL, query);

	if(cache_num_rows() > 0)
	{
	    SCFM(playerid, COLOR_LIGHTBLUE2, "> Má %d nezaplatených pokút, zapla ich v najbliej Town Hall!", cache_num_rows());
	}

	cache_delete(cache);
	
	////////////////////////////////////////////////////////////////////////////
	
	mysql_format(MYSQL, query, 1024, "SELECT * FROM char_vehicles WHERE Owner = '%e' AND Impounded = 1", srvcharname[playerid]);
	cache = mysql_query(MYSQL, query);

	if(cache_num_rows() > 0)
	{
	    SCFM(playerid, COLOR_LIGHTBLUE2, "> Má %d vozidiel na odahovom parkovisku!", cache_num_rows());
	}

	cache_delete(cache);
	
	////////////////////////////////////////////////////////////////////////////
	mysql_format(MYSQL, S_query, sizeof(S_query), "SELECT * FROM char_stats WHERE Username = '%e'", srvcharname[playerid]);
	q=mysql_query(MYSQL, S_query);

	if(cache_num_rows() < 1) {

	    cache_delete(q);
	    mysql_format(MYSQL, S_queryEx, sizeof(S_queryEx), "INSERT INTO char_stats (Username) VALUES ('%e')", srvcharname[playerid]);
		mysql_query(MYSQL, S_queryEx, false);

		mysql_format(MYSQL, S_query, sizeof(S_query), "SELECT * FROM char_stats WHERE Username = '%e'", srvcharname[playerid]);
		q=mysql_query(MYSQL, S_query);
	}
	
	cache_get_value_name_int(0, "money_work", money_work[playerid]);
	cache_get_value_name_int(0, "money_accepted", money_accepted[playerid]);
	cache_get_value_name_int(0, "money_admin", money_admin[playerid]);
	cache_get_value_name_int(0, "money_givenby", money_givenby[playerid]);
	cache_get_value_name_int(0, "money_spent", money_spent[playerid]);
	
	cache_delete(q);
	////////////////////////////////////////////////////////////////////////////
	
	if(!WasPlayed)
	{
	    money_admin[playerid] += floatround(I_Money,floatround_round);
	}
	
	b_playerSpawnedF[playerid]=true;
	////////////////////////////////////////////////////////////////////////////
	
	new vehicleid = rentalbike_HasRentalBike(playerid);

	if(vehicleid != 0)
	{
		vEnum[vehicleid][v_rentalb_LastUnix] = gettime();
		SCFM(playerid, COLOR_LIGHTGREEN, "> Má prenajatý bicykel, vrá ho príkazom /returnbike!");
	}

    ////////////////////////////////////////////////////////////////////////////
    
    TogglePlayerControllable(playerid, 0);
    EnterInfo(playerid, "Vydrz prosim, prebieha nacitavanie uctu ...", 100000, 50);
    donotsave[playerid]=true;
    SetTimerEx("login_loaded", 3000, false, "i", playerid);
	return 1;
}

function login_loaded(playerid)
{
    donotsave[playerid]=false;
	TogglePlayerControllable(playerid, 1);
	EnterInfo(playerid, "Ucet bol nacitany, vitaj v hre.", 2000, 51);

	new S_query[512], Cache:cache;

    mysql_format(MYSQL, S_query, sizeof(S_query), "SELECT * FROM player_weapons WHERE Username = '%e'", srvcharname[playerid]);
	//mysql_tquery(MYSQL, S_query, "OnPlayerWeaponsLoad", "i", playerid);
	cache = mysql_query(MYSQL, S_query);

	new rows = cache_num_rows();

	if(rows > 0)
	{
		new
		    Username[25],
		    WeaponId[13],
		    Ammo[13],
		    SerialNumber[13],
		    IsPermitted[13],
		    WorkWeapon[13],
		    Origin[13][MAX_ORIGIN_STRING_LEN+1],
		    GivenGuns = 0,
		    GivenSlot[13],
		    
		    twid,

		    S_gunLogin[256] = "> Zbrane: {ffffff}",
			S_tempStrg[38]

		;

		for(new x; x < rows; x++)
		{

		    if(rows >= 13) continue;

		    cache_get_value_name(x, "Username", 	Username);
		    if(strcmp(srvcharname[playerid], Username)) continue;

			cache_get_value_name_int(x, "WeaponId", twid);

			new slot = Weapons::getWeaponSlot(twid);
			if(GivenSlot[slot] == 1) continue;
			GivenSlot[slot] = 1;
            GivenGuns ++;
            
			//////////////////////////////////////////////////////////////

            WeaponId[x] = twid;
			cache_get_value_name_int(x, "Ammo", 			Ammo[x]);
			cache_get_value_name_int(x, "SerialNumber", 	SerialNumber[x]);
			cache_get_value_name_int(x, "IsPermitted", 		IsPermitted[x]);
			cache_get_value_name_int(x, "WorkWeapon", 		WorkWeapon[x]);
            cache_get_value_name(x, "Origin", 				Origin[x],	120);

			//////////////////////////////////////////////////////////////
			//////////////////////////////////////////////////////////////

			if(GivenGuns == 1)
		        format(S_tempStrg, sizeof S_tempStrg, "%s (%d ammo)", GetWeaponNameEx(WeaponId[x]), Ammo[x]);

			else
			    format(S_tempStrg, sizeof S_tempStrg, " - %s (%d ammo)", GetWeaponNameEx(WeaponId[x]), Ammo[x]);

			strcat(S_gunLogin, S_tempStrg);

		}

		for(new x; x < rows; x++)
		{
		    if(rows >= 13) continue;
		    if(GivenSlot[x] != 1) continue;
		    if(WeaponId[x] <= 0 || WeaponId[x] > BIGGEST_WEAPON_ID) continue;
		    if(Ammo[x] <= 0) continue;
		    if(SerialNumber[x] <= 0) continue;

		    Weapons::GivePlayerNewWeapon(playerid, WeaponId[x], Ammo[x], !!WorkWeapon[x], !!IsPermitted[x], Origin[x], false, SerialNumber[x], true);
		}

		strcat(S_gunLogin, ";");
		if(GivenGuns > 0) SendClientMessage(playerid, 0xD0D0D0FF, S_gunLogin);
	}

	cache_delete(cache);

	////////////////////////////////////////////////////////////////////////////

	mysql_format(MYSQL, S_query, sizeof(S_query), "DELETE FROM player_weapons WHERE Username = '%e'", srvcharname[playerid]);
	mysql_tquery(MYSQL, S_query);
	
	return 1;
}

function HTTPREQUEST_CHANGELOG(playerid, response_code, log[])
{

	if(strlen(log) > 2)
	{

	    return ShowPlayerDialog(playerid, did_changelog, DIALOG_STYLE_MSGBOX, GM_NAME" "GM_VERSION, log, "OK", "");

	}

	return 1;

}

function HTTPREQUEST_AUTOBAZAR(playerid, response_code, log[])
{
	return 1;
}

CheckPlayerAdminJail(playerid)
{
	if(isInJail[playerid] == false)
	    return 0;
	return 1;
}

function timer_DestroyBubbleChat(playerid)
{
    KillTimer(T_timer_bubbleChat[playerid]);

    T_timer_bubbleChat[playerid] = -1;

    DestroyDynamic3DTextLabel(T3D_bubbleChat[playerid]);
    return 1;
}

function timer_HungerTimer(playerid)
{
	new
		Float:F_Health,
	    Float:F_Hunger;

	ahac_GetPlayerHealth(playerid, F_Health);
	ex_GetPlayerHunger(playerid, F_Hunger);

	if(F_Hunger > 0)
		ex_SetPlayerHunger(playerid, F_Hunger-1);

	if(F_Hunger < 10)
	{
	    new
			S_string[128];

		format(S_string, sizeof(S_string), "* Zvuky kvàkania zo alúdku. (( %s ))", GetPlayerNameEx(playerid, USE_MASK));

	    BubbleChat(playerid, COLOR_VIOLET, S_string);
	}

	if(F_Hunger == 0)
	{
	    if(F_Health > 15)
	    {
	        ahac_SetPlayerHealth(playerid, F_Health - 3.0);
	    }
	}
	return 1;
}

function timer_LoginInterpolateCamera(playerid, isLogged)
{

    if(isLogged == 0) for(new i; i < 100; i++) SendClientMessage(playerid, COLOR_WHITE, " ");

    TextDrawHideForPlayer(playerid, blackTD);
    
	if(isLogged == 0)
	{
		login_Pokus[playerid] = 3;

		ShowLoginDialogForPlayer(playerid);
	}
	return 1;
}


//==================================FUNCTIONS===================================

PlayAudioStreamForPlayerEx(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0, bool:ambient = false)
{
	if(ambient == true && audiostream[playerid] != 0) return 0;
 	audiostream[playerid] = (ambient == false) ? 1 : 0;
	PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
	return 1;
}

StopAudioStreamForPlayerEx(playerid)
{
	audiostream[playerid] = 0;
	StopAudioStreamForPlayer(playerid);
	return 1;
}

stock RGBAToARGB( rgba )
    return rgba >>> 8 | rgba << 24;

getmaxattachcloth(playerid)
{
	switch(g_I_donatorLevel[playerid])
	{
	    case 0: return ATTACH_MAX_CLOTHING_LEV_0;
	    case 1: return ATTACH_MAX_CLOTHING_LEV_1;
	    case 2: return ATTACH_MAX_CLOTHING_LEV_2;
	    case 3: return ATTACH_MAX_CLOTHING_LEV_3;
	    default: return ATTACH_MAX_CLOTHING_LEV_0;
	}

	return 12;
}

createppopis(playerid)
{

	if(strlen(popis[playerid]) <= 0)
	    return 0;

	new str[128+24];
	format(str,128+24,"* %s", popis[playerid]);

	if(T3D_descTag[playerid] != Text3D:INVALID_3DTEXT_ID && IsValidDynamic3DTextLabel(T3D_descTag[playerid]))
	    UpdateDynamic3DTextLabelText(T3D_descTag[playerid], 0xc2a2daee, str);
	else
	{
	    if(IsValidDynamic3DTextLabel(T3D_descTag[playerid]))
		{
			DestroyDynamic3DTextLabel(T3D_descTag[playerid]);
			T3D_descTag[playerid] = Text3D:INVALID_3DTEXT_ID;
		}
	    T3D_descTag[playerid] = CreateDynamic3DTextLabel(str, 0xc2a2daee, 0.0, 0.0, 0.175, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 10000.0, -1, 1);
	}

	return 1;
}

updateppopis(playerid, text[] = "")
{

	if(strlen(text) > 0)
	{
	    new str[ 128 + 24 ];

	    format(str, sizeof str, "* %s",text);

	    if(strlen(popis[playerid]) > 0)
	    {
	        if(T3D_descTag[playerid] != Text3D:INVALID_3DTEXT_ID && IsValidDynamic3DTextLabel(T3D_descTag[playerid]))
			    UpdateDynamic3DTextLabelText(T3D_descTag[playerid], 0xc2a2daee, str);
			else
			{
			    if(IsValidDynamic3DTextLabel(T3D_descTag[playerid]))
				{
					DestroyDynamic3DTextLabel(T3D_descTag[playerid]);
					T3D_descTag[playerid] = Text3D:INVALID_3DTEXT_ID;
				}
			    T3D_descTag[playerid] = CreateDynamic3DTextLabel(str, 0xc2a2daee, 0.0, 0.0, 0.25, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 10000.0, -1, 1);
			}
	    }
	    else
	    {
	        // create new

	        if(T3D_descTag[playerid] != Text3D:INVALID_3DTEXT_ID && IsValidDynamic3DTextLabel(T3D_descTag[playerid]))
			    UpdateDynamic3DTextLabelText(T3D_descTag[playerid], 0xc2a2daee, str);
			else
			{
			    if(IsValidDynamic3DTextLabel(T3D_descTag[playerid]))
				{
					DestroyDynamic3DTextLabel(T3D_descTag[playerid]);
					T3D_descTag[playerid] = Text3D:INVALID_3DTEXT_ID;
				}
			    T3D_descTag[playerid] = CreateDynamic3DTextLabel(str, 0xc2a2daee, 0.0, 0.0, 0.25, 20.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 10000.0, -1, 1);
			}
	    }
	}
	else
	{
	    if(T3D_descTag[playerid] != Text3D:INVALID_3DTEXT_ID && IsValidDynamic3DTextLabel(T3D_descTag[playerid]))
	    {
	    	DestroyDynamic3DTextLabel(T3D_descTag[playerid]);
			T3D_descTag[playerid] = Text3D:INVALID_3DTEXT_ID;
		}
		else
		{
		    if(IsValidDynamic3DTextLabel(T3D_descTag[playerid]))
			{
				DestroyDynamic3DTextLabel(T3D_descTag[playerid]);
				T3D_descTag[playerid] = Text3D:INVALID_3DTEXT_ID;
			}
   		}
	}

	return 1;
}

stock ex_SetPlayerMoney(playerid, {Float,_}:money, nastag = tagof(money))
{

    SetTimerEx("mh_timer_DisableImmunity", 2000, false, "i", playerid);

    ResetPlayerMoney(playerid);

    if(nastag == tagof(Float:))
		GivePlayerMoney(playerid, floatround(money, floatround_floor)),
		g_I_playerMoney[playerid] = floatround(money, floatround_floor),
		SetPVarFloat(playerid, PVAR_MONEY, money );
	else
	    GivePlayerMoney(playerid, floatround(money / 100, floatround_floor)),
	    g_I_playerMoney[playerid] = floatround(money / 100, floatround_floor),
		SetPVarFloat(playerid, PVAR_MONEY, money / 100 );

	if(opt_CentTd[playerid] == 0)
	{
		new
		    tstr[3]
		;

        if(nastag == tagof(Float:))
			format(tstr, sizeof tstr, "%02d", floatround(money*100, floatround_round) % 100);
		else
		    format(tstr, sizeof tstr, "%02d", floatround(money, floatround_round) % 100);

		PlayerTextDrawSetString(playerid, PTD_cents[playerid], tstr);
	}

	return 1;
}


stock ex_GivePlayerMoney(playerid, {Float,_}:money, nastag = tagof(money))
{
    SetTimerEx("mh_timer_DisableImmunity", 2000, false, "i", playerid);

	ResetPlayerMoney(playerid);

    if(nastag == tagof(Float:))
		GivePlayerMoney(playerid, floatround(GetPVarFloat(playerid, PVAR_MONEY) +floatround(money, floatround_floor), floatround_round)),
		g_I_playerMoney[playerid] += GetPVarFloat(playerid, PVAR_MONEY) + floatround(money, floatround_floor),
		SetPVarFloat(playerid, PVAR_MONEY, GetPVarFloat(playerid, PVAR_MONEY) + money );
	else
	    GivePlayerMoney(playerid, floatround(GetPVarFloat(playerid, PVAR_MONEY) + floatround(money / 100, floatround_floor), floatround_round)),
	    g_I_playerMoney[playerid] += GetPVarFloat(playerid, PVAR_MONEY) + floatround(money / 100, floatround_floor),
		SetPVarFloat(playerid, PVAR_MONEY, GetPVarFloat(playerid, PVAR_MONEY) + money / 100 );

    if(opt_CentTd[playerid] == 0)
	{
		new
		    tstr[3]
		;

		if(nastag == tagof(Float:))
			format(tstr, sizeof tstr, "%02d", floatround(money*100, floatround_round) % 100);
		else
		    format(tstr, sizeof tstr, "%02d", floatround(money, floatround_round) % 100);

		PlayerTextDrawSetString(playerid, PTD_cents[playerid], tstr);
	}

	if(ex_GetPlayerMoney(playerid) >= 10000)
		Achievement::Reward(playerid, ACHIEVEMENT_HAVE_10000);
	if(ex_GetPlayerMoney(playerid) >= 50000)
		Achievement::Reward(playerid, ACHIEVEMENT_HAVE_50000);
    if(ex_GetPlayerMoney(playerid) >= 100000)
		Achievement::Reward(playerid, ACHIEVEMENT_HAVE_100000);
    if(ex_GetPlayerMoney(playerid) >= 500000)
		Achievement::Reward(playerid, ACHIEVEMENT_HAVE_500000);
    if(ex_GetPlayerMoney(playerid) >= 1000000)
		Achievement::Reward(playerid, ACHIEVEMENT_HAVE_1000000);

	return 1;
}

searchhousebypsc(const psc)
{
	new id = -1;

	foreach( new i : Houses )
	{
	    if(houseEnum[i][ho_PSC] != psc)
	        continue;

		id = i;
		break;
	}

	return id;
}

searchgaragebypsc(const psc)
{
	new id = -1;

	foreach( new i : Garages )
	{
	    if(garageEnum[i][ga_PSC] != psc)
	        continue;

		id = i;
		break;
	}

	return id;
}

searchbizzbypsc(const psc)
{
	new id = -1;

	foreach( new i : Businesses )
	{
	    if(businessEnum[i][bz_Address] != psc)
	        continue;

		id = i;
		break;
	}

	return id;
}

stock GetTickDiff(newtick, oldtick)
{
	if (oldtick < 0 && newtick >= 0) {
		return newtick - oldtick;
	} else if (oldtick >= 0 && newtick < 0 || oldtick > newtick) {
		return (cellmax - oldtick + 1) - (cellmin - newtick);
	}
	return newtick - oldtick;
}

// * native drug_playerShowMenu(playerid)
stock drug_playerShowMenu(playerid)
{

    new
	    finstr[256],
	    tempstr[128],
	    pocet = 0
	;

	foreach( new drugid : Drugs )
	{

	    if(drug_getPlayerDrug(playerid, drugid) < 1)
	        continue;

		format(tempstr, sizeof tempstr, "%s\n", drug_getName(drugid));
		strcat(finstr, tempstr);

		invItem[playerid][pocet] = drugid;
		pocet ++;

	}

	ShowPlayerDialog(
	    playerid,
	    did_inv_drugs_menu,
	    DIALOG_STYLE_LIST,
	    "VYBER DROGU S KTOROU CHCE MANIPULOVA",
		finstr,
		"VYBRA",
		"SPA"
	);


	return (true);
}

// * native drug_showPlayerDrugInv(playerid, forplayerid)
stock drug_showPlayerDrugInv(playerid, forplayerid)
{

	new
	    finstr[256],
	    tempstr[128]
	;

	format(finstr, sizeof finstr, "{7bb875}> Drogy ktoré pri sebe má hráè %s:\n\n{eaeaea}", GetPlayerNameEx(playerid, USE_MASK));

	foreach( new drugid : Drugs )
	{

	    if(drug_getPlayerDrug(playerid, drugid) < 1)
	        continue;

		format(tempstr, sizeof tempstr, "\r\t- %s (%d %s)\n", drug_getName(drugid), drug_getPlayerDrug(playerid, drugid), drug_getUnderName(drugid));
		strcat(finstr, tempstr);

	}

	if(invfor[playerid] == playerid)
	{
		ShowPlayerDialog(
		    forplayerid,
		    did_inv_drugs,
		    DIALOG_STYLE_MSGBOX,
		    "ZOZNAM DROG",
		    finstr,
		    "MENU",
		    "ZRUI"
		);
	}
	else
	{
	    ShowPlayerDialog(
		    forplayerid,
		    did_inv_drugs,
		    DIALOG_STYLE_MSGBOX,
		    "ZOZNAM DROG",
		    finstr,
		    "ZRUI",
		    ""
		);
	}

	return (true);
}

ReturnGPCI(iPlayerID)
{
    new
        szSerial[41]; // 40 + \0

    gpci(iPlayerID, szSerial, sizeof(szSerial));
    return szSerial;
}

ps_AddOneClick(playerid)
{
    if(ps_isPlayerFreezed[playerid] == 1)
    {
        ps_playerTimer[playerid] = SetTimerEx("ps_timer", 500, true, "i", playerid);
        ps_isPlayerFreezed[playerid] = 2;
    }
    else if(ps_isPlayerFreezed[playerid] == 2)
    {
        if(ps_clickCount[playerid] >= 8)
            return 1;

        ps_clickCount[playerid] ++;
        ps_playerProgress[playerid] += BREAKIN_CLICK_POWER;
        ps_UpdateProgressBar(playerid);
    }

    return 1;
}

forward ps_timer(playerid); public ps_timer(playerid)
{
	if(ps_isPlayerFreezed[playerid] != 2)
	    return 1;

    ps_UpdateProgressBar(playerid);
    ps_CheckProgress(playerid);

    ps_clickCount[playerid] = 0;

	return 1;

}

ps_CheckProgress(playerid)
{
    if(ps_playerProgress[playerid] >= 99.5)
    {
        ps_StopBreaking(playerid, 2);
    }

    return 1;
}

ps_StopBreaking(playerid, type = 0)
{

    if(ps_isPlayerFreezed[playerid] == 2)
		KillTimer(ps_playerTimer[playerid]);

    ps_isPlayerFreezed[playerid] = 0;

    PlayerTextDrawHide(playerid, ps_td[playerid][0]);
	PlayerTextDrawHide(playerid, ps_td[playerid][1]);
	PlayerTextDrawHide(playerid, ps_td[playerid][2]);

	if(type == 2)
    {
		SendSuccess(playerid, "Vykopal si jamu na rakvu, choï vráti lopatu!");
		g_I_playerCheckpoint[playerid] = checkp_pohrebak5;
	   	fix_SetPlayerCheckpoint(playerid, 2250.604, -52.948, 26.493, 1.0);
	}

	ClearAnimations(playerid, 0);
 	TogglePlayerControllable(playerid, 1);

	return 1;

}

ps_UpdateProgressBar(playerid)
{

    PlayerTextDrawTextSize(playerid, ps_td[playerid][2], 37.000000 + (ps_playerProgress[playerid] * 0.64), 0.000000);
	PlayerTextDrawShow(playerid, ps_td[playerid][2]);

	return 1;
}

breakin_AddOneClick(playerid)
{
    if(breakin_isPlayerFreezed[playerid] == 1)
    {
        breakin_playerTimer[playerid] = SetTimerEx("breakin_timer", 500, true, "i", playerid);
        breakin_isPlayerFreezed[playerid] = 2;
    }
    else if(breakin_isPlayerFreezed[playerid] == 2)
    {
        if(breakin_clickCount[playerid] >= 8)
            return 1;

        breakin_clickCount[playerid] ++;
        breakin_playerProgress[playerid] += BREAKIN_CLICK_POWER;
        breakin_UpdateProgressBar(playerid);
    }

    return 1;
}

forward breakin_timer(playerid); public breakin_timer(playerid)
{
	if(breakin_isPlayerFreezed[playerid] != 2)
	    return 1;

    breakin_playerProgress[playerid] -= BREAKIN_DECREASE_POWER;
    breakin_UpdateProgressBar(playerid);
    breakin_CheckProgress(playerid);

    breakin_clickCount[playerid] = 0;

	return 1;

}

breakin_CheckProgress(playerid)
{
    if(breakin_playerProgress[playerid] <= 0.5)
    {
        breakin_StopBreaking(playerid, 1);
    }

    else if(breakin_playerProgress[playerid] >= 99.5)
    {
        breakin_StopBreaking(playerid, 2);
    }

    return 1;
}

breakin_StopBreaking(playerid, type = 0)
{

    if(breakin_isPlayerFreezed[playerid] == 2)
		KillTimer(breakin_playerTimer[playerid]);

    breakin_isPlayerFreezed[playerid] = 0;

    PlayerTextDrawHide(playerid, breakin_td[playerid][0]);
	PlayerTextDrawHide(playerid, breakin_td[playerid][1]);
	PlayerTextDrawHide(playerid, breakin_td[playerid][2]);

	RemovePlayerAttachedObject(playerid, 9);

	if(type == 0)
	{
		SendClientMessage(playerid, 0xAFAFAFFF, "> Zruil si páèenie vozidla!");

		if(random(5) == 1)
		    SetVehiclesAlarm(breakin_vehId[playerid], 1);
	}
	else if(type == 1)
	{
		SendClientMessage(playerid, 0xAFAFAFFF, "> Páèenie bolo neúspené!");
		SetVehiclesAlarm(breakin_vehId[playerid], 1);
	}
    else if(type == 2)
    {
		SendClientMessage(playerid, 0xAFAFAFFF, "> Páèenie bolo úspené!");
		SetVehiclesAlarm(breakin_vehId[playerid], 1);

		ex_SetVehicleLocked(breakin_vehId[playerid], false);
		SetVehicleParams(breakin_vehId[playerid], VEHICLE_TYPE_DOORS, 0);

		new vpanel, vdoor, vlight, vtire,
			bonnet,boot,driver_door,passenger_door;
		GetVehicleDamageStatus(breakin_vehId[playerid], vpanel, vdoor, vlight, vtire);

		decode_doors(vdoor, bonnet,boot,driver_door,passenger_door);

		if(driver_door < 2)
		    driver_door = 1;

		UpdateVehicleDamageStatus(breakin_vehId[playerid], vpanel, encode_doors(bonnet,boot,driver_door,passenger_door), vlight, vtire);
	}

	ClearAnimations(playerid, 0);
 	TogglePlayerControllable(playerid, 1);

	return 1;

}

breakin_UpdateProgressBar(playerid)
{

    PlayerTextDrawTextSize(playerid, breakin_td[playerid][2], 37.000000 + (breakin_playerProgress[playerid] * 0.64), 0.000000);
	PlayerTextDrawShow(playerid, breakin_td[playerid][2]);

	return 1;
}


stock GetDotXY(Float:StartPosX, Float:StartPosY, &Float:NewX, &Float:NewY, Float:alpha, Float:dist)
{
         NewX = StartPosX + (dist * floatsin(alpha, degrees));
         NewY = StartPosY + (dist * floatcos(alpha, degrees));
}

canHaveLargeWeapon(playerid, weaponid)
{
	switch(ac_GetWeaponSlot(weaponid))
	{
   			case 3:
	        {
         		// BROKOVNICE
				new temp_wep, temp_amm;

				GetPlayerWeaponData(playerid, 5, temp_wep, temp_amm);
				if(temp_wep != 0 && temp_amm > 0)
    				return 0;

				GetPlayerWeaponData(playerid, 6, temp_wep, temp_amm);
				if(temp_wep != 0 && temp_amm > 0)
    				return 0;
      		}

			case 5:
			{
    			// BROKOVNICE
				new temp_wep, temp_amm;

				GetPlayerWeaponData(playerid, 3, temp_wep, temp_amm);
				if(temp_wep != 0 && temp_amm > 0)
    				return 0;

				GetPlayerWeaponData(playerid, 6, temp_wep, temp_amm);
				if(temp_wep != 0 && temp_amm > 0)
    				return 0;
        	}

			case 6:
			{
   				// BROKOVNICE
				new temp_wep, temp_amm;

				GetPlayerWeaponData(playerid, 5, temp_wep, temp_amm);
				if(temp_wep != 0 && temp_amm > 0)
    				return 0;

				GetPlayerWeaponData(playerid, 3, temp_wep, temp_amm);
				if(temp_wep != 0 && temp_amm > 0)
	    			return 0;
        	}
	}

	return 1;
}

doPlayerLogout(playerid) {
    for(new x; x < MAX_STATIC_DO; x++)
	{
		if(static_do[playerid][x] == -1)
		    continue;

		DestroyDynamicArea(static_doarea[playerid][x]);
		DestroyDynamic3DTextLabel(Text3D:static_do[playerid][x]);
		static_do[playerid][x] = -1;
	}

	ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, " - ", " ", " - ", " ");

	if(B_dmg_IsInDS[playerid] == true)
	{
        if(IsValidDynamic3DTextLabel(T3D_dmg_Label[playerid]))
		{
			DestroyDynamic3DTextLabel(T3D_dmg_Label[playerid]);
			T3D_dmg_Label[playerid] = Text3D:INVALID_3DTEXT_ID;
		}
	}

	if(IsWorking[playerid] && GetPlayerFactionType(playerid) == FACTION_TYPE_TAXI)
	{
	    IsWorking[playerid] = 0;
	}

	if(bb_Placed[playerid] == true)
	{
	    DestroyBoombox(playerid);
	}

	bb_Povolenie[playerid] = -1;

	new S_msg[144];

	format(S_msg, 144, "%s práve pouil /swap!", GetPlayerNameEx(playerid, USE_PUREIDNAME), MAX_PLAYERS);
	AdminWarn(playerid, "LoginWarn:", COLOR_YELLOW, S_msg);


	if(hasConv[playerid] == true)
	{
		FormatWarn(-1, "ASSIST -", COLOR_PURPLE, "{ffffff}ID %d sa odpojilo poèas konverzácie s %s!", playerid, ReturnMaster(dotaz_Conv[playerid]));
		FormatLog(log_type_assist, "%s((%d) %s - %s) sa odpojil pocas konverzacie s %s((%d) %s - %s)", ReturnName(playerid), playerid, ReturnMaster(playerid), ReturnIP(playerid), ReturnName(dotaz_Conv[playerid]), dotaz_Conv[playerid], ReturnMaster(dotaz_Conv[playerid]), ReturnIP(dotaz_Conv[playerid]));

		SCFM(dotaz_Conv[playerid], COLOR_PURPLE, "[ ASSIST ] {ffffff}%s(%s) sa odpojil poèas konverzácie s tebou!", ReturnName(playerid), ReturnMaster(playerid));

		hasConv[dotaz_Conv[playerid]] = false;
		dotaz_Conv[dotaz_Conv[playerid]] = 0;
		hasConv[playerid] = false;
		dotaz_Conv[playerid] = 0;
	}

	if(hasDotaz[playerid] == true)
	{
	    FormatWarn(-1, "ASSIST -", COLOR_PURPLE, "{ffffff}ID %d zruil assist: %s", playerid, dotaz_String[playerid]);
		FormatLog(log_type_assist, "%s((%d) %s - %s) zrusil otazku: %s",ReturnName(playerid), playerid, ReturnMaster(playerid), ReturnIP(playerid), dotaz_String[playerid]);

		hasDotaz[playerid] = false;
		dotaz_Time[playerid] = 0;
		dotaz_Conv[playerid] = 0;

		format(dotaz_String[playerid], 128, "");

		new
			ac = GetAssistCount(),
			str[128];

		format(str, 128, "%d ziadosti", ac);
		TextDrawSetString(TD_ziadosti, str);

		if(ac > 0)
		{
			foreach(new i : Player)
			{
				if(GetPlayerAdminLevel(i) < 1)
					continue;

				if(B_playerAdminDuty[i] == false)
					continue;

				TextDrawShowForPlayer(i, TD_ziadosti);
			}
		}
		else
		{
		    foreach(new i : Player)
			{
				if(GetPlayerAdminLevel(i) < 1)
					continue;

				if(B_playerAdminDuty[i] == false)
					continue;

				TextDrawHideForPlayer(i, TD_ziadosti);
			}
		}
	}

	if(isDoingDMV[playerid] == true)
	{
	    SetTimerEx("timer_DestroyLearnerVehicle", 500, false, "ii", playerid, DMV_vehicleID[playerid]);
	}

	SavePlayerData(playerid);

	SetPlayerName(playerid, S_masterAccount[playerid]);

	PlayerReloadVariables_Logout(playerid);
	return 1;
}

renameCharacter(oldName[], newName[])
{
	new
	    query[128];

	mysql_format(MYSQL, query, sizeof query, "UPDATE char_inventory SET Username = '%e' WHERE Username = '%e'", newName, oldName);
	mysql_query(MYSQL, query, false);

	mysql_format(MYSQL, query, sizeof query, "UPDATE char_main SET Username = '%e', isPKed = '0' WHERE Username = '%e'", newName, oldName);
	mysql_query(MYSQL, query, false);
	
	mysql_format(MYSQL, query, sizeof query, "UPDATE char_stats SET Username = '%e' WHERE Username = '%e'", newName, oldName);
	mysql_query(MYSQL, query, false);

	mysql_format(MYSQL, query, sizeof query, "UPDATE char_radios SET Username = '%e' WHERE Username = '%e'", newName, oldName);
	mysql_query(MYSQL, query, false);
	
	mysql_format(MYSQL, query, sizeof query, "UPDATE char_vehicles SET Owner = '%e' WHERE Owner = '%e'", newName, oldName);
	mysql_query(MYSQL, query, false);

	mysql_format(MYSQL, query, sizeof query, "UPDATE char_clothing SET Username = '%e' WHERE Username = '%e'", newName, oldName);
	mysql_query(MYSQL, query, false);

	mysql_format(MYSQL, query, sizeof query, "UPDATE phone_contacts SET Username = '%e' WHERE Username = '%e'", newName, oldName);
	mysql_query(MYSQL, query, false);

	mysql_format(MYSQL, query, sizeof query, "UPDATE phone_list SET DisplayFor = '%e' WHERE DisplayFor = '%e'", newName, oldName);
	mysql_query(MYSQL, query, false);

	mysql_format(MYSQL, query, sizeof query, "UPDATE gm_bankaccs SET Owner = '%e' WHERE Owner = '%e'", newName, oldName);
	mysql_query(MYSQL, query, false);

	mysql_format(MYSQL, query, sizeof query, "UPDATE gm_crates SET Owner = '%e' WHERE Owner = '%e'", newName, oldName);
	mysql_query(MYSQL, query, false);

	mysql_format(MYSQL, query, sizeof query, "UPDATE gm_drops SET PlacedBy = '%e' WHERE PlacedBy = '%e'", newName, oldName);
	mysql_query(MYSQL, query, false);

	mysql_format(MYSQL, query, sizeof query, "UPDATE gm_weed SET Owner = '%e' WHERE Owner = '%e'", newName, oldName);
	mysql_query(MYSQL, query, false);

	mysql_format(MYSQL, query, sizeof query, "DELETE FROM char_pokuty WHERE Username = '%e'", oldName);
	mysql_query(MYSQL, query, false);

	mysql_format(MYSQL, query, sizeof query, "DELETE FROM char_trestneciny WHERE Username = '%e'", oldName);
	mysql_query(MYSQL, query, false);

	foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;

		if(strcmp(houseEnum[i][ho_Owner], oldName, false))
		    continue;

		format(houseEnum[i][ho_Owner], 30, "%s", newName);
		ReloadHouseLabel(i);
	}

	foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;

		if(strcmp(garageEnum[i][ga_Owner], oldName, false))
		    continue;

		format(garageEnum[i][ga_Owner], 30, "%s", newName);
		ReloadGarageLabel(i);
	}

	foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;

	    if(strcmp(businessEnum[i][bz_Owner], oldName, false))
	        continue;

		format(businessEnum[i][bz_Owner], 30, "%s", newName);

		ReloadBusinessLabel(i);
	}

	foreach( new i : Drops ) {
	    if(strlen(dropEnum[i][drop_PlacedBy]) < 2) continue;

		if(strcmp(dropEnum[i][drop_PlacedBy], oldName, false))
		    continue;

		format(dropEnum[i][drop_PlacedBy], 30, "%s", newName);
	    break;
	}

	foreach ( new i : Vehicle )
	{
	    if(strlen(vEnum[i][v_Owner]) < 2)
	        continue;

		if(strcmp(vEnum[i][v_Owner], oldName, false))
		    continue;

		format(vEnum[i][v_Owner], 30, "%s", newName);
		SavePlayerVehicle(i, 1);
	}

	return 1;
}

PlayerViewCCTV(playerid, id)
{

	if(inCCTV[playerid] != 1)
	{
		GetPlayerPos(playerid, spec_Pos[playerid][0], spec_Pos[playerid][1], spec_Pos[playerid][2]);
		spec_World[playerid][0] = GetPlayerVirtualWorld(playerid);
		spec_World[playerid][1] = GetPlayerInterior(playerid);

		ahac_GetPlayerHealth(playerid, spec_Vitals[playerid][0]);
		ex_GetPlayerHunger(playerid, spec_Vitals[playerid][1]);
		ahac_GetPlayerArmour(playerid, spec_Vitals[playerid][2]);

		if(IsPlayerInAnyVehicle(playerid))
		{
			spec_Vehicle[playerid][0] = GetPlayerVehicleID(playerid);
			spec_Vehicle[playerid][1] = GetPlayerVehicleSeat(playerid);
		}
		else
		    spec_Vehicle[playerid][0] = -1;

		for(new x; x < MAX_WEAPON_SLOTS; x++)
	    {

            tg_datax[playerid][x][0] = playerWeapons[playerid][x][pweapons_WeaponId];
			tg_datax[playerid][x][2] = playerWeapons[playerid][x][pweapons_AmmoGiven];
			tg_datax[playerid][x][1] = playerWeapons[playerid][x][pweapons_Ammo];
			tg_datax[playerid][x][3] = playerWeapons[playerid][x][pweapons_SerialNumber];
			tg_datax[playerid][x][4] = playerWeapons[playerid][x][pweapons_IsWork];
			tg_datax[playerid][x][5] = playerWeapons[playerid][x][pweapons_IsPermit];
			format(tg_originx[playerid][x], 128, playerWeapons[playerid][x][pweapons_Origin]);

		}
	}

	PlayerTextDrawShow(playerid, PTD_cameras[playerid][0]);
	PlayerTextDrawShow(playerid, PTD_cameras[playerid][1]);
	PlayerTextDrawShow(playerid, PTD_cameras[playerid][2]);

	inCCTV[playerid] = 1;
	inCCTVid[playerid] = id;

	SetTimerEx("tim_viewcctv", 300, false, "ii", playerid, id);

	return 1;
}

function tim_viewcctv(playerid, id)
{
    SetPlayerPos(playerid, CCTVInfo[id][cctv_X], CCTVInfo[id][cctv_Y], CCTVInfo[id][cctv_Z]);
	SetPlayerVirtualWorld(playerid, CCTVInfo[id][cctv_VW]);
	SetPlayerInterior(playerid, CCTVInfo[id][cctv_Interior]);

	new
	    Float:lookto[3]
	;

	lookto[0] = CCTVInfo[id][cctv_X] - 5.0 * floatsin(-CCTVInfo[id][cctv_rotZ], degrees);
	lookto[1] = CCTVInfo[id][cctv_Y] - 5.0 * floatcos(-CCTVInfo[id][cctv_rotZ], degrees);
	lookto[2] = CCTVInfo[id][cctv_Z] - (CCTVInfo[id][cctv_rotX] / 10);

    PreventSpectate(playerid);
	TogglePlayerSpectating(playerid, true);
	//AttachCameraToDynamicObject(playerid, CCTVInfo[id][cctv_Object]);
	SetPlayerCamera(playerid, CCTVInfo[id][cctv_X] - 0.7 * floatsin(-CCTVInfo[id][cctv_rotZ], degrees), CCTVInfo[id][cctv_Y] - 0.7 * floatcos(-CCTVInfo[id][cctv_rotZ], degrees), CCTVInfo[id][cctv_Z] - 0.5, lookto[0], lookto[1], lookto[2] - 0.5);
	return 1;
}

ShowPlayerCCTVMenu(playerid)
{
	new
		str_long[2048], str[MAX_CCTV_NAME+12];
	foreach(new i : CCTVIter)
	{
		//if(PLAYER FACTION ID == CCTVInfo[id][cctv_Faction])
		if(CCTVInfo[i][cctv_IsBroken] == 0)
			format(str, sizeof str, "{FFFFFF}[CAM %d]: %s\n", i, CCTVInfo[i][cctv_Name]);
		else
		    format(str, sizeof str, "{eb3f3f}[CAM %d]: %s\n", i, CCTVInfo[i][cctv_Name]);

		strcat(str_long, str);
	}
	ShowPlayerDialog(playerid, did_mdc_cctv, DIALOG_STYLE_LIST, "MESTSKÉ KAMERY", str_long, "UKÁZA", "SPA");
	return 1;
}

ShowPlayerWDBMenu(playerid)
{
	new
		str_long[2048], str[MAX_CCTV_NAME+12];
	foreach(new i : CCTVIter)
	{
		//if(PLAYER FACTION ID == CCTVInfo[id][cctv_Faction])
		if(CCTVInfo[i][cctv_IsBroken] == 0)
			format(str, sizeof str, "{FFFFFF}[CAM %d]: %s\n", i, CCTVInfo[i][cctv_Name]);
		else
		    format(str, sizeof str, "{eb3f3f}[CAM %d]: %s\n", i, CCTVInfo[i][cctv_Name]);

		strcat(str_long, str);
	}
	ShowPlayerDialog(playerid, did_mdc_cctv, DIALOG_STYLE_LIST, "MESTSKÉ KAMERY", str_long, "UKÁZA", "SPA");
	return 1;
}

//new lastshotobj = -1;
function repcctv(i)
{
	if(CCTVInfo[i][cctv_IsBroken] == 0)
	    return 1;

	DestroyDynamicObject(CCTVInfo[i][cctv_Particle]);
	CCTVInfo[i][cctv_IsBroken] = 0;

	//lastshotobj = -1;

	foreach( new ix : Player )
	{
  		if(GetPlayerFactionType(ix) != FACTION_TYPE_LAW)
			continue;

		if(!IsPlayerWorking(ix))
			continue;

		SCFM(ix, COLOR_RADIO, "[ Radio - 9112 MHz ] Dispeèer: Kamera %s mi znova naskoèila.", CCTVInfo[i][cctv_Name]);
	}

	return 1;
}

ShowPlayerCCTVMenuFD(playerid)
{
	new
		str_long[2048], str[MAX_CCTV_NAME+12];
	foreach(new i : CCTVIter)
	{
		//if(PLAYER FACTION ID == CCTVInfo[id][cctv_Faction])
        if(CCTVInfo[i][cctv_IsBroken] == 0)
			format(str, sizeof str, "{FFFFFF}[CAM %d]: %s\n", i, CCTVInfo[i][cctv_Name]);
		else
		    format(str, sizeof str, "{eb3f3f}[CAM %d]: %s\n", i, CCTVInfo[i][cctv_Name]);

		strcat(str_long, str);
	}
	ShowPlayerDialog(playerid, did_fos_cctv, DIALOG_STYLE_LIST, "MESTSKÉ KAMERY", str_long, "UKÁZA", "SPA");
	return 1;
}

ShowPlayerCCTVMenuEx(playerid)
{
	new
		str_long[2048], str[MAX_CCTV_NAME+12];
	foreach(new i : CCTVIter)
	{
		//if(PLAYER FACTION ID == CCTVInfo[id][cctv_Faction])
		if(CCTVInfo[i][cctv_IsBroken] == 0)
			format(str, sizeof str, "{FFFFFF}[CAM %d]: %s\n", i, CCTVInfo[i][cctv_Name]);
		else
		    format(str, sizeof str, "{eb3f3f}[CAM %d]: %s\n", i, CCTVInfo[i][cctv_Name]);

		strcat(str_long, str);
	}
	ShowPlayerDialog(playerid, did_cctv, DIALOG_STYLE_LIST, "MESTSKÉ KAMERY", str_long, "UKÁZA", "ZRUI");
	return 1;
}

new infoboxpr[MAX_PLAYERS];
new infoboxtim[MAX_PLAYERS];

function HideInfoBox(playerid)
{

    PlayerTextDrawHide(playerid, PTD_infobox[playerid][0]);
	PlayerTextDrawHide(playerid, PTD_infobox[playerid][1]);

	infoboxpr[playerid]        = -1;
    if(infoboxtim[playerid] != -1)
        KillTimer(infoboxtim[playerid]);

    infoboxtim[playerid]           = -1;

	return 1;

}

InfoBox(playerid, type, text[], time = 5000, priority = 1)
{

	if(infoboxpr[playerid] > priority)
	    return (false);

    infoboxpr[playerid]        = -1;
    if(infoboxtim[playerid] != -1)
        KillTimer(infoboxtim[playerid]);

    infoboxtim[playerid]           = SetTimerEx("HideInfoBox", time, false, "i", playerid);

	PlayerTextDrawHide(playerid, PTD_infobox[playerid][0]);
	PlayerTextDrawHide(playerid, PTD_infobox[playerid][1]);

	PlayerTextDrawSetString(playerid, PTD_infobox[playerid][0], _:replaceChars(text));

	switch(_:type)
	{
	    case INFOBOX_ERROR:
	        PlayerTextDrawSetString(playerid, PTD_infobox[playerid][1], "LD_CHAT:thumbdn");

        case INFOBOX_SUCCESS:
	        PlayerTextDrawSetString(playerid, PTD_infobox[playerid][1], "LD_CHAT:thumbup");

        case INFOBOX_INFO:
	        PlayerTextDrawSetString(playerid, PTD_infobox[playerid][1], "LD_CHAT:badchat");

        case INFOBOX_HAPPY:
	        PlayerTextDrawSetString(playerid, PTD_infobox[playerid][1], "LD_CHAT:goodchat");
	}

	PlayerTextDrawShow(playerid, PTD_infobox[playerid][0]);
	PlayerTextDrawShow(playerid, PTD_infobox[playerid][1]);

	return 1;

}

ShowPlayerGoldMenu_1(playerid)
{
    new
	    S_caption[64]
	;

	format(
	    S_caption,
	    sizeof S_caption,
	    "{eeeeee}KREDIT-MENU [MÁ {FFCC50}%d KREDITOV{EEEEEE}]",
	    g_I_mince[playerid]
	);

	ShowPlayerDialog(
	    playerid,
		did_goldmenu_1, DIALOG_STYLE_INPUT,
	    S_caption,
	    "{FFFFFF}> Zadaj prosím novú SPZ tohoto auta!\nMusí ma 2-9 znakov (obsahova môe iba: A-Z;0-9; ;_;$).\nTáto akcia je nevratná.",
	    "OK",
	    "SPA"
	);

	return 1;
}

ShowPlayerGoldMenu_2(playerid)
{
    new
	    S_caption[64]
	;

	format(
	    S_caption,
	    sizeof S_caption,
	    "{eeeeee}KREDIT-MENU [MÁ {FFCC50}%d KREDITOV{EEEEEE}]",
	    g_I_mince[playerid]
	);

	ShowPlayerDialog(
	    playerid,
		did_goldmenu_2, DIALOG_STYLE_INPUT,
	    S_caption,
	    "{FFFFFF}> Zadaj prosím tvoje nové telefónne èíslo!\nMusí ma 5-9 cifier.\nTáto akcia je nevratná.",
	    "OK",
	    "SPA"
	);

	return 1;
}

ShowPlayerGoldMenu_4(playerid)
{
    new
	    S_string[128],
	    S_caption[64]
	;

	format(
	    S_caption,
	    sizeof S_caption,
	    "{eeeeee}KREDIT-MENU [MÁ {FFCC50}%d KREDITOV{EEEEEE}]",
	    g_I_mince[playerid]
	);

	format(
		S_string,
		sizeof S_string,
		"{FFFFFF}> Skutoène chce vymeni {FFCC50}%d kreditov {ffffff}za {52b654}%d${ffffff}?!\nTáto akcia je nevratná!",
		g_I_mince[playerid], g_I_mince[playerid] * Economy::GetPrice(ECONOMY_LIST_GOLDS)
	);

	ShowPlayerDialog(
	    playerid,
		did_goldmenu_4, DIALOG_STYLE_MSGBOX,
	    S_caption,
	    S_string,
	    "ÁNO",
	    "NIE"
	);

	return 1;
}

ShowPlayerGoldMenu_Lease(playerid)
{
	new
	    finalString[ 256 ],
	    cena = 0 // per day
	;

	switch(GetPlayerDonatorLevel(playerid))
	{
	    case 1:
			cena = 50;

		case 2:
		    cena = 75;

		case 3:
		    cena = 100;
	}

	format(finalString, sizeof finalString, "{ffffff}> Predåenie {f4d142}Donator Levelu %d {ffffff}stojí {f4d142}%d kreditov {ffffff}na jeden deò.\nZadaj poèet dní, o ko¾ko chce level predåi.", GetPlayerDonatorLevel(playerid), cena);

	ShowPlayerDialog(playerid, did_goldmenu_donor, DIALOG_STYLE_INPUT, "PREDÅI DONATOR LEVEL", finalString, "PREDÅI", "SPA");
	return 1;
}

ShowPlayerGoldMenu(playerid)
{

	new
	    S_string[512],
	    S_caption[64]
	;

	format(
	    S_caption,
	    sizeof S_caption,
	    "{eeeeee}KREDIT-MENU [MÁ {FFCC50}%d KREDITOV{EEEEEE}]",
	    g_I_mince[playerid]
	);

	format(
		S_string,
		sizeof S_string,
		"{FFFFFF}Predåi Donator Level »\nKúpit 1 Rename Ticket ({ffcc50}150 kreditov{FFFFFF})\nKúpi 1 XP ({ffcc50}50 kreditov{FFFFFF})\nZmena SPZ vozidla ({ffcc50}50 kreditov{FFFFFF})\nZmena telefónneho èísla ({ffcc50}200 kreditov{FFFFFF})\nVetky kredity na peniaze ({ffcc50}%d kreditov{FFFFFF} na {52b654}%d${ffffff})",
		g_I_mince[playerid], g_I_mince[playerid] * Economy::GetPrice(ECONOMY_LIST_GOLDS)
	);

	ShowPlayerDialog(
	    playerid,
		did_goldmenu, DIALOG_STYLE_LIST,
	    S_caption,
	    S_string,
	    "VYBRA",
	    "ZRUI"
	);

	return 1;

}

stock IsPlayerFacingPoint(playerid, Float:dOffset, Float:pX, Float:pY, Float:pZ)
{
	#pragma unused pZ
	new
		Float:X,
		Float:Y,
		Float:Z,
		Float:pA,
		Float:ang;

	if(!IsPlayerConnected(playerid)) return 0;

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;

}

stock AngleInRangeOfAngle(Float:a1, Float:a2, Float:range)
{

	a1 -= a2;
	if((a1 < range) && (a1 > -range)) return true;

	return false;

}


enablePhysics(Ball)
{
	PHY_InitObject(Ball, 2114);
	PHY_RollObject(Ball);
	PHY_SetObjectFriction(Ball, 7.0);
	PHY_SetObjectAirResistance(Ball, 0.2);
	PHY_SetObjectGravity(Ball, 10.0);
	PHY_SetObjectZBound(Ball, _, _, 0.5);
	PHY_UseColAndreas(Ball);
	PHY_ToggleObjectPlayerColls(Ball, 1, 0.6);

	return 1;
}

disablePhysics(Ball)
{
	PHY_DeleteObject(Ball);

	return 1;
}

createBasketBall_Balls()
{

	for( new r; r < MAX_BASKET_BALLS; r++ )
	{
	    bballEnum[r][benum_objectId] 	= -1;
	    bballEnum[r][benum_holder]      = -1024;
	}

	for( new i; i < sizeof(bball_ballCoords); i++)
	{

		bballEnum[i][benum_holder] = INVALID_PLAYER_ID;

		bballEnum[i][benum_objectId] =
	        CreateObject(2114,
								bball_ballCoords[i][0], bball_ballCoords[i][1], bball_ballCoords[i][2] - 0.85,
								0.0, 0.0, 0.0
			);

	}

	for( new i; i < MAX_PLAYERS; i++)
	{
		bb_playerHasBall[i] = false;
		bb_ballEnumId[i] = -1;
	}

	return 1;

}

stock destroyBasketBall_Balls()
{
    for( new i; i < sizeof(bball_ballCoords); i++)
	{

		bballEnum[i][benum_holder] = INVALID_PLAYER_ID;

		DestroyObject(bballEnum[i][benum_objectId]);

	}

	for( new i; i < MAX_PLAYERS; i++)
	{
		bb_playerHasBall[i] = false;
		bb_ballEnumId[i] = -1;
		bb_cantGet[i] = false;
	}

	return 1;
}

stock Float:array_reverse(const Float:list[][2], size)
{
    new
        pos,
        len = size-1,
        Float:result[MAX_ROUTE_POINTS][2];

    while ( (len >= 0 && pos < sizeof(result)) &&
          ( (result[pos][0] = list[len][0]) && (result[pos][1] = list[len][1]) ) )
    {
        pos++;
        --len;
    }

    return result;
}

GetWeekDay(day=0, month=0, year=0)
{
  	if (!day)
    	getdate(year, month, day);

  	new
    	weekday_str[10],
    	j,
    	e
  	;

  	if (month <= 2)
  	{
    	month += 12;
    	--year;
  	}

  	j = year % 100;
  	e = year / 100;

  	switch ((day + (month+1)*26/10 + j + j/4 + e/4 - 2*e) % 7)
  	{
	    case 0: weekday_str = "SAT";
	    case 1: weekday_str = "SUN";
	    case 2: weekday_str = "MON";
	    case 3: weekday_str = "TUE";
	    case 4: weekday_str = "WED";
	    case 5: weekday_str = "THU";
	    case 6: weekday_str = "FRI";
  	}

  	return weekday_str;
}

new bool:wl_verdikt[MAX_PLAYERS];
new wl_editname[MAX_PLAYERS][25];
new wl_count[MAX_PLAYERS];

ShowPlayerWhitelistDetail(playerid, const count)
{
    new
	    query[256],
	    Cache:cache,

		username[25],
		act_ipfrom[148],
		regip[20],

		zhoda[64],
		tzh[24]
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM master_accounts WHERE Activated = '0' ORDER BY Registered DESC LIMIT 20");

	cache = mysql_query(MYSQL, query);

	cache_get_value_name(count, "Username", username);
 	cache_get_value_name(count, "RegIP", regip);
 	cache_get_value_name(count, "Activated_IPFrom", act_ipfrom);

    cache_delete(cache);

    mysql_format(MYSQL, query, sizeof query, "SELECT * FROM master_accounts WHERE (RegIP = '%e' OR LastIP = '%e') AND Username != '%e' ORDER BY Registered DESC LIMIT 3", regip, regip, username);

	cache = mysql_query(MYSQL, query);

	for(new x, y = cache_num_rows(); x < y; x++)
	{
	    cache_get_value_name(x, "Username", tzh);

	    strcat(zhoda, tzh);

	    if(x < y)
	        strcat(zhoda, ", ");
	}

	cache_delete(cache);

	format(query, sizeof query, "{ffffff}Meno: {e34f4f}%s\t{ffffff}IP: {e34f4f}%s\n{ffffff}Lokácia: {e34f4f}%s\n{FFFFFF}Zhoda: {e34f4f}%s\n{7ddb74}Schváli\n{e34f4f}Zamietnu", username, regip, act_ipfrom, zhoda);

	format(wl_editname[playerid], 25, username);
	wl_verdikt[playerid] = false;
	wl_count[playerid] = count;

	ShowPlayerDialog(playerid, did_whitelist_detail, DIALOG_STYLE_TABLIST_HEADERS, "WHITELIST (DETAIL)", query, "VYBRA", "SPA");

	return 1;
}

ShowPlayerWhitelist(playerid)
{

	new
	    query[144],
	    Cache:cache,
	    finalString[ 2048 ] = "Meno\tIP\tLokácia{FFFFFF}",

		username[25],
		act_ipfrom[148],
		regip[20]
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM master_accounts WHERE Activated = '0' ORDER BY Registered DESC LIMIT 20");

	cache = mysql_query(MYSQL, query);

	for( new i; i < cache_num_rows(); i++)
	{

	    cache_get_value_name(i, "Username", username);
	    cache_get_value_name(i, "RegIP", regip);
	    cache_get_value_name(i, "Activated_IPFrom", act_ipfrom);

	    format(finalString, sizeof finalString, "%s\n%s\t%s\t%s", finalString, username, regip, act_ipfrom);

	}

	cache_delete(cache);

	ShowPlayerDialog(playerid, did_whitelist, DIALOG_STYLE_TABLIST_HEADERS, "WHITELIST (POSLEDNÝCH 20)", finalString, "DETAIL", "ZAVRIE");

	return 1;

}

AngleToQuarter(&Float:angle)
{

	if(angle < 0)
		angle += -1;

	while(angle > 360.0)
	    angle -= 360.0;

	if(angle < 22.5)
	    angle = 0.0;
	else if(angle >= 22.5 && angle < 67.5)
	    angle = 45.0;
	else if(angle >= 67.5 && angle < 112.5)
	    angle = 90.0;
	else if(angle >= 112.5 && angle < 157.5)
	    angle = 135.0;
	else if(angle >= 157.5 && angle < 202.5)
	    angle = 180.0;
	else if(angle >= 202.5 && angle < 247.5)
	    angle = 225.0;
	else if(angle >= 247.5 && angle < 292.5)
	    angle = 270.0;
	else if(angle >= 292.5 && angle < 337.5)
		angle = 315.0;
	else
	    angle = 0.0;

	return (true);

}

RefreshGraffitiTag(const id)
{

    SetDynamicObjectMaterialText(
		graffitiEnum[id][graffiti_ObjectId],
		0,
		graffitiEnum[id][graffiti_Text],
		graffitiEnum[id][graffiti_MatSize],
		graffitiEnum[id][graffiti_Font], graffitiEnum[id][graffiti_FontSize],
		graffitiEnum[id][graffiti_Bold],
		0xFF000000, 0,
		1
	);

	return (true);

}

retBoolStringFromInt(const integer)
{

	new
	    _tmp[ 4 ]
	;

	switch(integer)
	{

        case 1:
	        format(_tmp, sizeof _tmp, "Áno");

        default:
	        format(_tmp, sizeof _tmp, "Nie");

	}

	return _tmp;

}

retResolStringFromInt(const integer)
{

	new
	    _tmp[ 12 ]
	;

	switch(integer)
	{

        case 40:
	        format(_tmp, sizeof _tmp, "128x32");

        case 50:
	        format(_tmp, sizeof _tmp, "128x64");

        case 60:
	        format(_tmp, sizeof _tmp, "128x128");

        case 70:
	        format(_tmp, sizeof _tmp, "256x32");

        case 80:
	        format(_tmp, sizeof _tmp, "256x64");

        case 90:
	        format(_tmp, sizeof _tmp, "256x128");

        case 100:
	        format(_tmp, sizeof _tmp, "256x256");

        case 110:
	        format(_tmp, sizeof _tmp, "512x64");

        case 120:
	        format(_tmp, sizeof _tmp, "512x128");

        case 130:
	        format(_tmp, sizeof _tmp, "512x256");

        case 140:
	        format(_tmp, sizeof _tmp, "512x512");

        default:
	        format(_tmp, sizeof _tmp, "%d", integer);

	}

	return _tmp;

}

ShowPlayerGraffitiMenu(playerid, const id)
{

	new
	    finalString[ 2048 ];

	format(finalString, sizeof finalString,
	    "{FFFFFF}Upravi text\nPísmo ( {dfae51}%s {FFFFFF})\nVe¾kos písma ( {dfae51}%dpx {FFFFFF})\nHrubé písmo ( {dfae51}%s {FFFFFF})\nRozlíenie ( {dfae51}%spx {FFFFFF})\nUkáka spray tagu\nUloi spray tag\nZmaza spray tag",
	    graffitiEnum[id][graffiti_Font],
	    graffitiEnum[id][graffiti_FontSize],
	    retBoolStringFromInt(graffitiEnum[id][graffiti_Bold]),
	    retResolStringFromInt(graffitiEnum[id][graffiti_MatSize])
	);

	ShowPlayerDialog(playerid, did_graffiti_menu, DIALOG_STYLE_LIST, "TVORBA SPRAY TAGU", finalString, "ZVOLI", "ZRUI");

	return (true);

}

GetPlayerGraffiti(playerid, string[] = "°")
{

	new
	    Float:x, Float:y, Float:z,

	    bool:_var = false
	;

	if(strcmp(string, "°", false))
	    _var = true;

	foreach( new i : Graffiti )
	{

	    if(_var == true && strfind(graffitiEnum[i][graffiti_Text], string, true) == -1)
	        continue;

	    GetDynamicObjectPos(graffitiEnum[i][graffiti_ObjectId], x, y, z);

	    if(!IsPlayerInRangeOfPoint(playerid, 2.5, x, y, z))
	        continue;

		return i;

	}

	return -1;

}

LoadGraffiti() {

	//CUSTOM, DATABASE MENUS
    new mql_query[128];
	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_graffiti");
	mysql_tquery(MYSQL, mql_query, "OnGraffitiLoad");
	return 1;

}

function OnGraffitiLoad() {
	new
		Text[128],
		MatSize,
		Font[35],
		FontSize,
		Bold,

		Float:Pos[6],

		Owner[35],

		VW,
		Interior
 	;

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name(i, "Text", Text);

	    cache_get_value_name_int(i, "MatSize", MatSize);

	    cache_get_value_name(i, "Font", Font);

	    cache_get_value_name_int(i, "FontSize", FontSize);
	    cache_get_value_name_int(i, "Bold", Bold);

	    cache_get_value_name_float(i, "X", Pos[0]);
	    cache_get_value_name_float(i, "Y", Pos[1]);
	    cache_get_value_name_float(i, "Z", Pos[2]);
	    cache_get_value_name_float(i, "RX", Pos[3]);
	    cache_get_value_name_float(i, "RY", Pos[4]);
	    cache_get_value_name_float(i, "RZ", Pos[5]);

	    cache_get_value_name_int(i, "VW", VW);
	    cache_get_value_name_int(i, "INTERIOR", Interior);

	    cache_get_value_name(i, "Owner", Owner);

		new
		    freeId = Iter_Alloc(Graffiti);

        format(graffitiEnum[freeId][graffiti_Text], 128, Text);
		format(graffitiEnum[freeId][graffiti_Font], 32,   Font);
		format(graffitiEnum[freeId][graffiti_Owner],35,   Owner);
		graffitiEnum[freeId][graffiti_MatSize] 		= MatSize;
		graffitiEnum[freeId][graffiti_FontSize] 	= FontSize;
		graffitiEnum[freeId][graffiti_Bold] 		= Bold;

		graffitiEnum[freeId][graffiti_IsBeingEdited] = false;
		graffitiEnum[freeId][graffiti_EditedBy]     = -1;

		graffitiEnum[freeId][graffiti_ObjectId] =
			CreateDynamicObject(
				19477,
				Pos[0], Pos[1], Pos[2],
				Pos[3], Pos[4], Pos[5],
				VW, Interior,
				-1,
				80.0, 80.0,
				-1, 3
			)
	 	;

	    RefreshGraffitiTag(freeId);
	}
	return 1;
}

LoadMapIcons() {

	//CUSTOM, DATABASE MENUS
    new mql_query[128];
	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_map_icons");
	mysql_tquery(MYSQL, mql_query, "OnMapIconsLoad");
	return 1;

}

function OnMapIconsLoad() {
	new
	    Icon,
		Float:Pos[3],
		Style;

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name_int(i, "Icon", Icon);
	    cache_get_value_name_float(i, "X", Pos[0]);
	    cache_get_value_name_float(i, "Y", Pos[1]);
	    cache_get_value_name_float(i, "Z", Pos[2]);
	    cache_get_value_name_int(i, "Style", Style);

	    CreateSystemMapIcon(Icon, Pos[0], Pos[1], Pos[2], Style);
	}
	return 1;
}

DestroySystemMapIcon(id)
{

	mapIconEnum[id][mapIcon_Model]  = 0;

	mapIconEnum[id][mapIcon_X]      = 0.0;
	mapIconEnum[id][mapIcon_Y]      = 0.0;
	mapIconEnum[id][mapIcon_Z]      = 0.0;

	mapIconEnum[id][mapIcon_Style]  = 0;

	DestroyDynamicMapIcon(mapIconEnum[id][mapIcon_IconId]);
	DestroyDynamicArea(mapIconEnum[id][mapIcon_AreaId]);

	Iter_Remove(MapIcons, id);

	return 1;
}

GetPlayerSystemMapIcon(playerid, model = -1) {
	foreach( new i : MapIcons ) {

	    if(mapIconEnum[i][mapIcon_X] == 0 && mapIconEnum[i][mapIcon_Y] == 0 && mapIconEnum[i][mapIcon_Z] == 0)
			continue;

		if(model != -1 && model != mapIconEnum[i][mapIcon_Model])
		    continue;

	    if(!IsPlayerInDynamicArea(playerid, mapIconEnum[i][mapIcon_AreaId], 0))
			continue;

	    return i;
	}
	return -1;
}

CreateSystemMapIcon(model, Float:x, Float:y, Float:z, style)
{

	new
	    id = Iter_Alloc(MapIcons),
		Float:streamDistance = 320.0;

	switch(style)
	{
	    case MAPICON_GLOBAL:
	        streamDistance = 10000.0;
	}

	mapIconEnum[id][mapIcon_Model]  = model;

	mapIconEnum[id][mapIcon_X]   	= x;
	mapIconEnum[id][mapIcon_Y]   	= y;
	mapIconEnum[id][mapIcon_Z]   	= z;

	mapIconEnum[id][mapIcon_Style]  = style;

	mapIconEnum[id][mapIcon_IconId] =
		CreateDynamicMapIcon(
			x, y, z,
			model,
			0,
			-1, 0, -1,
			streamDistance,
			style,
			-1, 30
		);

	mapIconEnum[id][mapIcon_AreaId] =
		CreateDynamicSphere(
		    x, y, z,
		    10.0,
		    -1, 0, -1
		);

	return id;

}

LoadRoadSigns() {

	//CUSTOM, DATABASE MENUS
    new mql_query[128];
	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_roadsigns");
	mysql_tquery(MYSQL, mql_query, "OnStreetSignsLoad");
	return 1;

}

GetPlayerDynamicSign(playerid) {
	for(new i; i < MAX_STREET_SIGNS; i++) {

	    if(streetsignEnum[i][znacka_X] == 0 && streetsignEnum[i][znacka_Y] == 0 && streetsignEnum[i][znacka_Z] == 0)
			continue;

	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, streetsignEnum[i][znacka_X], streetsignEnum[i][znacka_Y], streetsignEnum[i][znacka_Z]))
			continue;

	    return i;
	}
	return -1;
}

function UpdateSnow(playerid)
{
        if(!snowOn{playerid}) return 0;
        new Float:pPos[3];
        GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
        for(new i = 0; i < gSnowParticles_X; i++) SetDynamicObjectPos(snowObject[playerid][i], pPos[0] + random(5), pPos[1] + random(5), pPos[2] - 5 + random(10));
        return 1;
}

stock CreateSnow(playerid)
{
        if(snowOn{playerid}) return 0;
        new Float:pPos[3];
        GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
        for(new i = 0; i < gSnowParticles_X; i++) snowObject[playerid][i] = CreateDynamicObject(18864, pPos[0] + random(25), pPos[1] + random (25), pPos[2] - 5 + random(10), random(280), random(280), 0, -1, -1, playerid);
        snowOn{playerid} = true;
        updateTimer{playerid} = SetTimerEx("UpdateSnow", 1000, true, "i", playerid);
        return 1;
}

stock DeleteSnow(playerid)
{
	if(!snowOn{playerid}) return 0;
 	for(new i = 0; i < gSnowParticles_X; i++) DestroyDynamicObject(snowObject[playerid][i]);
  	KillTimer(updateTimer{playerid});
   	snowOn{playerid} = false;
    return 1;
}

function OnStreetSignsLoad() {
	new
		Float:Pos[6],
		Label[45];

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;
	    cache_get_value_name_float(i, "X", Pos[0]);
	    cache_get_value_name_float(i, "Y", Pos[1]);
	    cache_get_value_name_float(i, "Z", Pos[2]);
	    cache_get_value_name_float(i, "RX", Pos[3]);
	    cache_get_value_name_float(i, "RY", Pos[4]);
	    cache_get_value_name_float(i, "RZ", Pos[5]);
	    cache_get_value_name(i, "Street", Label);

		CreateDynamicStreetSign(Label, Pos[0], Pos[1], Pos[2], Pos[3], Pos[4], Pos[5]);
	}
	return 1;
}


/*GetWeather()
	return gWeather;*/

Float:getPlayerRadioFrequencyDiff(const playerid)
{

	new
	    Float:freq = GetPlayerInventoryItem( playerid, inv_vysielacka ),

		Float:des
	;

	des = (floatround(freq, floatround_floor) - freq);

	return des;

}

distortMessage(messageEx[], Float:quality)
{

	new
		tmpstring[258],
		qualityex = floatround(quality * 10, floatround_round)
	;

	format(tmpstring, 258, messageEx);

	switch(qualityex)
	{
		case 0:
		    return tmpstring;

		case 1:
		{

		    new
				_vardone = 0,
				_varmax  = floatround(strlen(tmpstring) / 2.1, floatround_round)
			;

			while(_vardone < _varmax)
			{

			    new
			        index =
						random(
							strlen(
								tmpstring
							)
						)
				;

				// random character from ascii table
				if(tmpstring[ index ] != ' ')
					tmpstring[ index ] = '?'/*32 + random(222)*/;

				_vardone ++;
			}

		}

		case 2:
		{

		    new
				_vardone = 0,
				_varmax  = floatround(strlen(tmpstring) / 1.2, floatround_round)
			;

			while(_vardone < _varmax)
			{

			    new
			        index =
						random(
							strlen(
								tmpstring
							)
						)
				;

				// random character from ascii table
				if(tmpstring[ index ] != ' ')
					tmpstring[ index ] = '?'/*32 + random(222)*/;

				_vardone ++;
			}

		}
	}

	return tmpstring;

}

SendRadioMessageFromPlayer(const playerid, const Float:freq, const message[], name = 0)
{

	// name 0   =   show name without mask
	// name 1   =   show name with mask (if player has one)
	// name 2   =   show 'Neznámy' tag (unknown)

	new
	    finalString[ 144 ],
	    messageEx[ 128 ],
		finName[ MAX_PLAYER_NAME+1 ];

	switch(name)
	{

	    case 0:
	        format(finName, sizeof finName, GetPlayerNameEx(playerid, NO_MASK));

		case 1:
		    format(finName, sizeof finName, GetPlayerNameEx(playerid, USE_MASK));

		case 2:
		    format(finName, sizeof finName, "Neznámy");

	}

	foreach( new targetid : Player )
	{

        // If player doesn't have radio, skip him
	    if( GetPlayerInventoryItem(targetid, inv_vysielacka) == 0.0 )
	        continue;

		// If player's radio is disabled, skip him
		if( vysielackaToggle[ targetid ] == 1 )
		    continue;

		new
		    Float:playerid_Freq = getPlayerRadioFrequencyDiff(playerid),
		    Float:targetid_Freq = getPlayerRadioFrequencyDiff(targetid),

		    Float:quality = 0

		    // quality 0    = will hear very good
		    // quality 1    = will hear good
		    // quality 2    = will hear bad
		    // quality >= 3 = wont hear anything
		;

		new Float:fr1 = GetPlayerInventoryItem(targetid, inv_vysielacka), Float:qualityex;

		if(fr1> freq)
		    qualityex = (fr1-freq);
		else
		    qualityex = (freq-fr1);

		if(qualityex > 0.35)
		    continue;

		if(playerid_Freq > targetid_Freq)
		    quality = (playerid_Freq - targetid_Freq);
		else
		    quality = (targetid_Freq - playerid_Freq);

		if(quality >= 0.35)
		    continue;

        format(messageEx, sizeof messageEx, message);

		if(quality > 0.0)
		    format(messageEx, sizeof messageEx, distortMessage(messageEx, quality));

        format(finalString, sizeof finalString, "[ Radio - %.1f MHz ] %s: %s", freq, finName, messageEx);

		SendClientMessage(targetid, COLOR_RADIO, finalString);

	}

	return (true);

}

CreateDynamicStreetSign(street[], Float:X, Float:Y, Float:Z, Float:RX, Float:RY, Float:RZ)
{

	new
	    i = -1;

	for(new freeSlot; freeSlot < MAX_STREET_SIGNS; freeSlot ++)
	{
	    if(streetsignEnum[freeSlot][znacka_ObjectID1] < 1)
		{
			i = freeSlot;

			break;
		}
	}

	if(i == -1)
	    return printf("Street Sign System Error; Nepodarilo sa vytvorit znacku! Nie je volny slot.");

	streetsignEnum[i][znacka_X] = X;
	streetsignEnum[i][znacka_Y] = Y;
	streetsignEnum[i][znacka_Z] = Z;
	streetsignEnum[i][znacka_RX] = RX;
	streetsignEnum[i][znacka_RY] = RY;
	streetsignEnum[i][znacka_RZ] = RZ;

    new
		Float:exX = X,
		Float:exY = Y,

		fontsize = 18;

	exX -= (0.025302 * floatsin(-RZ, degrees));
	exY -= (0.045035 * floatcos(-RZ, degrees));

	switch(strlen(street))
	{

	    case 7..10:
	        fontsize = 30;

		case 11..13:
		    fontsize = 23;

		case 14:
		    fontsize = 20;

		case 15..16:
		    fontsize = 18;

		default:
		    fontsize = 18;

	}

	if(strlen(street) < 7)
	    fontsize = 30;

	streetsignEnum[i][znacka_ObjectID2] = CreateDynamicObject(19477, exX, exY, Z + 2.677186, RX, RY, RZ - 90.000000, -1, -1, -1, 40.00, 40.00);
	SetDynamicObjectMaterialText(streetsignEnum[i][znacka_ObjectID2], 0, street, 130, "Arial", fontsize, 1, 0xFFFFFFFF, 0x00000000, 1);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	streetsignEnum[i][znacka_ObjectID1] = CreateDynamicObject(19981, X, Y, Z, RX, RY, RZ, -1, -1, -1, 200.00, 200.00);

	return 1;

}

ShowPlayerFOS(playerid)
{

	ShowPlayerDialog(playerid, did_fos, DIALOG_STYLE_LIST, "MOBILE DATABASE COMPUTER",
		"Posledné hovory\nZamestnanci v slube\nMestské kamery",
	    "SELECT", "LOGOUT");

	return 1;
}

ShowBoomboxDetail(playerid, count)
{

	new
        query[90],
        Cache:cache;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_radios WHERE Username = '%e' ORDER BY NAME", ReturnName(playerid));
	cache = mysql_query(MYSQL, query);

	cache_get_value_name(count, "NAME", bbTemp_NAME[playerid]);
	cache_get_value_name(count, "URL", bbTemp_URL[playerid]);

	cache_delete(cache);

	return ShowPlayerDialog(playerid, did_boombox_menu, DIALOG_STYLE_LIST, "STANICA", "Spusti rádio\nVymaza stanicu", "VYBRA", "SPA");

}

ShowCarRadioDetail(playerid, count)
{

	new
        query[90],
        Cache:cache;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_radios WHERE Username = '%e' ORDER BY NAME", ReturnName(playerid));
	cache = mysql_query(MYSQL, query);

	cache_get_value_name(count, "NAME", bbTemp_NAME[playerid]);
	cache_get_value_name(count, "URL", bbTemp_URL[playerid]);

	cache_delete(cache);

	return ShowPlayerDialog(playerid, did_carradio_menu, DIALOG_STYLE_LIST, "STANICA", "Spusti rádio\nVymaza stanicu", "VYBRA", "SPA");

}

LoadDB_Interiors()
{

    new
		mql_query[43+25+32];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_interiors");

	mysql_tquery(MYSQL, mql_query, "OnDBInteriorsLoad");

	return 1;
}

function OnDBInteriorsLoad()
{

	new
	    id,
	    Name[ 255 ],
		Float:Pos[ 4 ],
		InteriorId;

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

        cache_get_value_name_int(i, "id", id);
	    cache_get_value_name(i, "Name", Name);
	    cache_get_value_name_float(i, "X", Pos[0]);
	    cache_get_value_name_float(i, "Y", Pos[1]);
	    cache_get_value_name_float(i, "Z", Pos[2]);
	    cache_get_value_name_float(i, "A", Pos[3]);
	    cache_get_value_name_int(i, "Interior", InteriorId);

		if(id == 0 || id > 250)
		    continue;

	    intList[id][0] = Pos[0];
	    intList[id][1] = Pos[1];
	    intList[id][2] = Pos[2];
	    intList[id][3] = Pos[3];
	    intList[id][5] = InteriorId;

		format(interiorIDs[id], 64, Name);
	}

	new
		mql_query[43+25+32];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_house_interiors");

	mysql_tquery(MYSQL, mql_query, "OnDBHInteriorsLoad");

	return 1;
}

function OnDBHInteriorsLoad()
{

	new
	    id,
	    Name[ 255 ],
		Float:Pos[ 4 ],
		InteriorId;

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

        cache_get_value_name_int(i, "id", id);
	    cache_get_value_name(i, "Name", Name);
	    cache_get_value_name_float(i, "X", Pos[0]);
	    cache_get_value_name_float(i, "Y", Pos[1]);
	    cache_get_value_name_float(i, "Z", Pos[2]);
	    cache_get_value_name_float(i, "A", Pos[3]);
	    cache_get_value_name_int(i, "Interior", InteriorId);

		if(id == 0 || id > 250)
		    continue;

	    houseIntList[id][0] = Pos[0];
	    houseIntList[id][1] = Pos[1];
	    houseIntList[id][2] = Pos[2];
	    houseIntList[id][3] = Pos[3];
	    houseIntList[id][5] = InteriorId;

		format(interiorIDs_h[id], 64, Name);
	}

	new
		mql_query[43+25+32];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_garage_interiors");

	mysql_tquery(MYSQL, mql_query, "OnDBGInteriorsLoad");

	return 1;
}

function OnDBGInteriorsLoad()
{

	new
	    id,
	    Name[ 255 ],
		Float:Pos[ 8 ],
		InteriorId;

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

        cache_get_value_name_int(i, "id", id);
	    cache_get_value_name(i, "Name", Name);
	    cache_get_value_name_float(i, "pX", Pos[0]);
	    cache_get_value_name_float(i, "pY", Pos[1]);
	    cache_get_value_name_float(i, "pZ", Pos[2]);
	    cache_get_value_name_float(i, "pA", Pos[3]);
	    cache_get_value_name_float(i, "vX", Pos[4]);
	    cache_get_value_name_float(i, "vY", Pos[5]);
	    cache_get_value_name_float(i, "vZ", Pos[6]);
	    cache_get_value_name_float(i, "vA", Pos[7]);
	    cache_get_value_name_int(i, "Interior", InteriorId);

		if(id == 0 || id > 250)
		    continue;

	    garageIntList[id][0] = Pos[0];
	    garageIntList[id][1] = Pos[1];
	    garageIntList[id][2] = Pos[2];
	    garageIntList[id][3] = Pos[3];
	    garageIntList[id][4] = Pos[4];
	    garageIntList[id][5] = Pos[5];
	    garageIntList[id][6] = Pos[6];
	    garageIntList[id][7] = Pos[7];
	    garageIntList[id][8] = InteriorId;

		format(interiorIDs_g[id], 64, Name);
	}

	return 1;
}

GetPlayerUpgradePrice(vehicleid)
{

	new
	    cena = 0;

    if(upgradeShop_carColor[vehicleid][0] != -1 || upgradeShop_carColor[vehicleid][1] != -1)
		cena += 1500;

	return cena;

}

stock Float:frandomex(Float:min, Float:max)
{
    return min + (max - min) * random(32768) / 32768.0;
}

GetPlayerFDFire(playerid)
{

	new
		id = -1,

		Float:pX, Float:pY, Float:pZ,
		Float:vX, Float:vY, Float:vZ
	;

	GetPlayerPos(playerid, pX, pY, pZ);
	GetPlayerCameraFrontVector(playerid, vX, vY, vZ);

	vX = pX + vX;
	vY = pY + vY;
	vZ = pZ + vZ;

	for( new i; i < sizeof fdFire; i++ )
	{

		if(fdFire[i][fdfire_Model] == 0)
			continue;

		if(GetDistance(vX, vY, vZ, fdFire[i][fdfire_X], fdFire[i][fdfire_Y], fdFire[i][fdfire_Z] + 1.5) > 3.4)
		    continue;

		if(!IsPlayerInRangeOfPoint(playerid, 10.0, fdFire[i][fdfire_X], fdFire[i][fdfire_Y], fdFire[i][fdfire_Z] + 1.5))
			continue;

		id = i;

		break;

	}

	return id;
}

function fdfire_ExtinguisherCheck(playerid)
{
	if(fdFire_Hasi[playerid] == false)
		return 0;

    if((fdFire_OhenID[playerid] = GetPlayerFDFire(playerid)) == -1)
		return 0;

	new
		Float:hp = frandomex(0.250, 3.500);

	if(fdFire[fdFire_OhenID[playerid]][fdfire_HP] - hp <= 0.0)
	{
		// Zru oheò, dohorel.

		fdFire[fdFire_OhenID[playerid]][fdfire_HP] 		= 0.0;
		fdFire[fdFire_OhenID[playerid]][fdfire_Model] 	= 0;
		fdFire[fdFire_OhenID[playerid]][fdfire_Steps]   = 0;

		DestroyDynamicObject(fdFire[fdFire_OhenID[playerid]][fdfire_ObjectID]);
		DestroyDynamic3DTextLabel(fdFire[fdFire_OhenID[playerid]][fdfire_LabelID]);
		DestroyDynamicArea(fdFire[fdFire_OhenID[playerid]][fdfire_AreaID]);
	}
	else
	{
		// Aktualizuj oheò, horí stále.

		fdFire[fdFire_OhenID[playerid]][fdfire_HP] -= hp;

		new
			string[ 25 ],

			color = 0xFFFFFFFF;

		switch( floatround(fdFire[fdFire_OhenID[playerid]][fdfire_HP], floatround_round) )
		{
			case 0..50:
				color = 0xb03939ff;

			case 51..100:
				color = 0xdb4c4cff;

			case 101..250:
				color = 0xf45d5dff;

			case 251..500:
				color = 0xff831dff;

			case 501..2500:
				color = 0xfbe040ff;

			case 2501..5000:
				color = 0xddfb40ff;

			case 5001..7500:
				color = 0x91fb5bff;

			case 7501..9000:
				color = 0xddf9d0ff;

			default:
				color = 0xffffffff;
		}

		format(string, sizeof string, "%d HP", floatround(fdFire[fdFire_OhenID[playerid]][fdfire_HP], floatround_round));

		UpdateDynamic3DTextLabelText(fdFire[fdFire_OhenID[playerid]][fdfire_LabelID], color, string);
	}

	SetTimerEx("fdfire_ExtinguisherCheck", 500, false, "i", playerid);

	return 1;
}

GetOnlinePlayers()
{

	new count = 0;

	foreach( new i : Player )
	{
	    count ++;
	}

	return count;
}

LoadADTables() {
    new mql_query[128];
	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_adtabula");
	mysql_tquery(MYSQL, mql_query, "OnADTablesLoad");
	return 1;
}

function OnADTablesLoad() {
	new
	    Model,
	    AssignedBiz,
		Float:Pos[6],
		Worlds[2],
		Text_Label[256];

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name_int(i, "Model", Model);
	    cache_get_value_name_int(i, "AssignedBiz", AssignedBiz);

	    cache_get_value_name_float(i, "X", Pos[0]);
	    cache_get_value_name_float(i, "Y", Pos[1]);
	    cache_get_value_name_float(i, "Z", Pos[2]);

	    cache_get_value_name_float(i, "RX", Pos[3]);
	    cache_get_value_name_float(i, "RY", Pos[4]);
	    cache_get_value_name_float(i, "RZ", Pos[5]);

	    cache_get_value_name_int(i, "VW", Worlds[0]);
	    cache_get_value_name_int(i, "INTERIOR", Worlds[1]);

	    cache_get_value_name(i, "LABEL", Text_Label);

	    CreateDynamicAdTable(Model, AssignedBiz, Pos[0], Pos[1],Pos[2], Pos[3], Pos[4], Pos[5], Worlds[0], Worlds[1], Text_Label);
	}

	return 1;
}

CreateDynamicAdTable(model, bizid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, vw, interior, label[])
{
	new
		freeid = -1;

	for(new i; i < MAX_AD_TABLES; i++)
	{
		if(adTableEnum[i][adt_Model] == 0 || adTableEnum[i][adt_assignedBiz] == 0)
		{
			freeid = i;
			break;
		}
	}

	if(freeid == -1)
		return printf("Ad Table Error; Nedostatok volnych slotov na vytvorenie reklamnej tabule!");

	adTableEnum[freeid][adt_Model] = model;
	adTableEnum[freeid][adt_assignedBiz] = bizid;
	adTableEnum[freeid][adt_X] = x;
	adTableEnum[freeid][adt_Y] = y;
	adTableEnum[freeid][adt_Z] = z;
	adTableEnum[freeid][adt_RX] = rx;
	adTableEnum[freeid][adt_RY] = ry;
	adTableEnum[freeid][adt_RZ] = rz;
	adTableEnum[freeid][adt_VW] = vw;
	adTableEnum[freeid][adt_INTERIOR] = interior;

	format(adTableEnum[freeid][adt_Text], 256, "%s", str_replace("=", "\n", label));

	adTableEnum[freeid][adt_ObjectID] = CreateDynamicObject(model, x, y, z, rx, ry, rz, vw, interior, -1, 50.0, 25.0, -1, 1);
	adTableEnum[freeid][adt_LabelID] = CreateDynamic3DTextLabel(str_replace("=", "\n", label), 0xFFFFFFFF, x, y, z, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 3);
	
	switch(model)
	{
		case 2599:
		{
		    SetDynamicObjectMaterial(adTableEnum[freeid][adt_ObjectID], 0, 16150, "ufo_bar", "GEwhite1_64", 0x00000000);
		}
	}

	return freeid;
}

static bool:OnFly[MAX_PLAYERS];
static Float:flySpeed[MAX_PLAYERS];
static Float:flyZAngle[MAX_PLAYERS];
static playerIsInVehicle[MAX_PLAYERS];
forward InitFly(playerid);
forward bool:StartFly(playerid);
forward Fly(playerid);
forward bool:StopFly(playerid);

InitFly(playerid)
{
    OnFly[playerid] = false;
    flySpeed[playerid] = 1.024;
    return true;
}
bool:StartFly(playerid)
{
    if(OnFly[playerid]) return false;

    if(IsPlayerInAnyVehicle(playerid))
        playerIsInVehicle[playerid] = true;
    else
        ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_Accel",6.1,1,1,1,1,0,1);
    OnFly[playerid] = true;
    Fly(playerid);

    return true;
}
bool:StopFly(playerid)
{
    if(!OnFly[playerid]) return false;

    OnFly[playerid] = false;
    SetPlayerHealth(playerid,100.0);
    if(playerIsInVehicle[playerid])
        SetVehicleHealth(GetPlayerVehicleID(playerid),1000.0);
    else
        ClearAnimations(playerid);
    playerIsInVehicle[playerid] = false;
    return true;
}
public Fly(playerid)
{
    if(!IsPlayerConnected(playerid)) return 1;
    if(!OnFly[playerid]) return 1;
    if(IsPlayerInAnyVehicle(playerid) ^ playerIsInVehicle[playerid]) return StopFly(playerid);

    new k,ud,lr;
    new Float:v_x,Float:v_y,Float:v_z;
    GetPlayerKeys(playerid,k,ud,lr);
    if(ud == KEY_UP)
    {
        GetPlayerCameraFrontVector(playerid,v_x,v_y,v_z);
        v_x = v_x*flySpeed[playerid];
        v_y = v_y*flySpeed[playerid];
        if(v_x == 0.0)
            v_x = v_x+0.001;

        flyZAngle[playerid] = atan(v_y/v_x)-90.0;
        if(v_x < 0)
            flyZAngle[playerid] = flyZAngle[playerid]+180.0;
        if(playerIsInVehicle[playerid])
            SetVehicleHealth(GetPlayerVehicleID(playerid),99999.0);
        else
        {
            ahac_SetPlayerHealth(playerid,99999.0);
            SetPlayerFacingAngle(playerid,flyZAngle[playerid]);
            if(GetPlayerAnimationIndex(playerid) != 959)
                ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_Accel",6.1,1,1,1,1,0,1);
        }
    }

    if(k & KEY_ANALOG_LEFT)
        flySpeed[playerid] = flySpeed[playerid]/2;
    else if(k & KEY_ANALOG_RIGHT)
        flySpeed[playerid] = flySpeed[playerid]*2;
    if(flySpeed[playerid] > 20.0)
        flySpeed[playerid] = 20.0;
    if(lr == KEY_LEFT)     // down
        v_z = -0.5*flySpeed[playerid];
    else if(lr == KEY_RIGHT)   // up
        v_z = 0.5*flySpeed[playerid];
    else
        v_z = 0.025;

    if(playerIsInVehicle[playerid])
    {
        SetVehicleVelocity(GetPlayerVehicleID(playerid),v_x,v_y,v_z);
        SetVehicleZAngle(GetPlayerVehicleID(playerid),flyZAngle[playerid]);
    }
    else
    {
        SetPlayerVelocity(playerid,v_x,v_y,v_z);
        if(v_x == 0 && v_y == 0)
            if(GetPlayerAnimationIndex(playerid) == 959)
                ApplyAnimation(playerid,"PARACHUTE","PARA_steerR",6.1,1,1,1,1,0,1);
    }

    SetTimerEx("Fly",100,false,"i",playerid);

    return 1;
}

ReturnVehicleID(vName[])
{
	for(new x; x != 211; x++) if(strfind(VehicleNames[x], vName, true) != -1) return x + 400;
	return INVALID_VEHICLE_ID;
}

ReturnBoolString(item)
{

	new
		str[5];
	if(item == 1)
		format(str, sizeof str, "Áno");
	else
	    format(str, sizeof str, "Nie");

	return str;
}

exSetPlayerFightingStyle(playerid, style = 4)
{

	if(style < 4 || (style > 7 && style < 15) || style > 15)
	    style = 4;

    I_pFightStyle[playerid] = style;
	return SetPlayerFightingStyle(playerid, I_pFightStyle[playerid]);

}

#if defined _ALS_SetPlayerFightingStyle
  #undef SetPlayerFightingStyle
#else
  #define _ALS_SetPlayerFightingStyle
#endif

#define SetPlayerFightingStyle          exSetPlayerFightingStyle

ShowPlayerAmmoShop(playerid)
{

	new
	    string[ 1024 ];

	format(string, sizeof(string), "{ffffff}Krabièka 10 nábojov\t{2fb838}25$\n");
	format(string, sizeof(string), "%s{ffffff}Krabièka 30 nábojov\t{2fb838}72$\n", string);
	format(string, sizeof(string), "%s{ffffff}Krabièka 50 nábojov\t{2fb838}115$\n", string);
	format(string, sizeof(string), "%s{ffffff}Krabièka 100 nábojov\t{2fb838}220$\n", string);
	format(string, sizeof(string), "%s{ffffff}Krabièka 150 nábojov\t{2fb838}315$\n", string);
	format(string, sizeof(string), "%s{ffffff}Krabièka 500 nábojov\t{2fb838}1000$\n", string);

	ShowPlayerDialog(playerid, did_buy_ammo, DIALOG_STYLE_TABLIST, "NÁKUP NÁBOJOV", string, "KÚPI", "ZRUI");

	return 1;

}

Attachment_Show(playerid)
{

	new
	    content[ 524 ] = "{6cbd59}Prida nový{FFFFFF}",

		tempstring[ 48 ],
		bool:hasFoundInArray = false;

	for ( new i; i < 50; i++)
	{

	    // Kontroluje èi doplnok existuje
	    if(playerAttachments[playerid][i][MODELID] == 0)
	        continue;

	    // Zresetujeme kontrolu
     	hasFoundInArray = false;

		// Spúame checker mena doplnku
		for ( new x; x < sizeof attachmentModels; x++)
		{

		    if(attachmentModels[x][0] != playerAttachments[playerid][i][MODELID])
		        continue;

			if(GetPlayerAdminLevel(playerid) < 5)
			{
				if(playerAttachments[playerid][i][ACTIVE] == true)
			    	format(tempstring, sizeof tempstring, "\n{3f86e7}%s{FFFFFF}", attachmentModels[x][2]);
				else
				    format(tempstring, sizeof tempstring, "\n%s", attachmentModels[x][2]);
			}
			else
			{
			    if(playerAttachments[playerid][i][ACTIVE] == true)
			    	format(tempstring, sizeof tempstring, "\n{3f86e7}(#%d) %s{FFFFFF}", i+1, attachmentModels[x][2]);
				else
				    format(tempstring, sizeof tempstring, "\n(#%d) %s", i+1, attachmentModels[x][2]);
			}

			hasFoundInArray = true;

		    break;
		}

		// Ak nenalo, meno doplnku nastavíme na 'Neznáme'

	    if(hasFoundInArray == false)
		{
		    if(GetPlayerAdminLevel(playerid) < 5)
			{
			    if(playerAttachments[playerid][i][ACTIVE] == true)
			    	format(tempstring, sizeof tempstring, "\n{3f86e7}Neznámy item{FFFFFF}");
				else
				    format(tempstring, sizeof tempstring, "\nNeznámy item");
			}
			else
			{
			    if(playerAttachments[playerid][i][ACTIVE] == true)
			    	format(tempstring, sizeof tempstring, "\n{3f86e7}(#%d) Neznámy item{FFFFFF}", i+1);
				else
				    format(tempstring, sizeof tempstring, "\n(#%d) Neznámy item", i+1);
			}
		}

		strcat(content, tempstring);
	}

	ShowPlayerDialog(playerid, did_clothing, DIALOG_STYLE_LIST, "TVOJE DOPLNKY", content, "VYBRA", "ZRUI");

	return 1;

}

new A_replaceChar[][] = {
	{'á', 'a'},
	{'Á', 'A'},
	{'ä', 'a'},

	{'é', 'e'},
	{'ì', 'e'},
	{'É', 'E'},
	{'Ì', 'E'},

	{'à', 'r'},
	{'ø', 'r'},
	{'À', 'R'},
	{'Ø', 'R'},

	{'', 'z'},
	{'', 'z'},
	{'', 'Z'},
	{'', 'Z'},

	{'ú', 'u'},
	{'Ú', 'U'},

	{'í', 'i'},
	{'Í', 'I'},

	{'ó', 'o'},
	{'Ó', 'O'},
	{'ô', 'o'},
	{'Ô', 'O'},

	{'', 't'},
	{'', 'T'},

	{'ú', 'u'},
	{'Ú', 'U'},

	{'í', 'i'},
	{'Í', 'I'},

	{'', 's'},
	{'', 'S'},

	{'ï', 'd'},
	{'Ï', 'D'},

	{'å', 'l'},
	{'¾', 'l'},
	{'Å', 'L'},
	{'¼', 'L'},

	{'ý', 'y'},
	{'Ý', 'Y'},

	{'è', 'c'},
	{'È', 'C'},

	{'ò', 'n'},
	{'Ò', 'N'}
};

replaceChars(str[])
{
	new nstr[256];

	format(nstr, sizeof nstr, str);

	new c = 0;
	while(c < sizeof nstr)
	{
	    if(c >= sizeof nstr)
	        break;

		for(new x; x < sizeof A_replaceChar; x++)
		{
			if(nstr[c] == A_replaceChar[x][0])
			    nstr[c] = A_replaceChar[x][1];
		}

	    c ++;
	}

	return _:nstr;
}

Attachment_AddNew(playerid)
{

	if(Attachment_GetUsedSlots(playerid) >= ATTACH_MAX_CLOTHING.[playerid])
	    return
			SendError(playerid, "Nemôe ma viac ako 20 doplnkov!"),
			Attachment_Show(playerid);

	new
	    models[ 1024 ],
		names[ 1024 ][ 25 ], x = 0;

	for (new i; i < sizeof attachmentModels; i++)
	{
		if(attachmentModels[i][1]!=0 && (GetPlayerAdminLevel(playerid) < 3 && attachmentModels[i][1] != GetPlayerFactionType(playerid)))
			continue;
			
	    models[x] = attachmentModels[i][0];
	    strcat(names[x], replaceChars(attachmentModels[i][2]));
	    x++;

	}

	ShowPreviewModelDialog(playerid, did_clothing_new_model, "PRIDAT DOPLNOK", models, names, "VYBRAT", "SPAT");
	return 1;

}

Attachment_AddNew_Bone(playerid)
{

	new
	    content [ 256 ];

	for (new i; i < sizeof attachmentBones; i++)
	{

	    strcat(content, attachmentBones[i]);
	    strcat(content, "\n");
	}

	content[strlen(content) - 1] = 0;

	ShowPlayerDialog(playerid, did_clothing_new_bone, DIALOG_STYLE_LIST, "PRIDA DOPLNOK", content, "VYBRA", "SPA");

	return 1;

}

Attachment_ShowItem(playerid, requested, edititem = -1)
{


	new
	    item = -1;

	if(requested == -1 && edititem != -1)
	{

	    item = edititem;

	}
	else
	{

		new
		    count = 0;

	    for ( new i; i < 50; i++)
		{

		    // Kontroluje èi doplnok existuje
		    if(playerAttachments[playerid][i][MODELID] == 0)
		        continue;

			if(requested == count)
			{

			    item = i;
			    break;

			}

			count ++;

		}

	}

	if(item == -1)
	    return Attachment_Show(playerid);

    clothingMenu_Edit[ playerid ] = item;

	new
	    finalstring [ 512 ],
	    tempstring [ 128 ];

    if(playerAttachments[playerid][item][ACTIVE] == true)
        format(tempstring, sizeof tempstring, "{f45555}Skry doplnok\n \n");
	else
	    format(tempstring, sizeof tempstring, "{6cbd59}Nasadi doplnok\n \n");

	strcat(finalstring, tempstring);

	format(tempstring, sizeof tempstring, "{ffffff}Upravi pozíciu\n");
    strcat(finalstring, tempstring);

    format(tempstring, sizeof tempstring, "Upravi kos\n \n");
    strcat(finalstring, tempstring);

    new
        color[2][24];

	for( new i; i < sizeof attachmentPallete; i++)
	{

	    if(attachmentPallete[i][1][0] != playerAttachments[playerid][item][COLOR1])
	        continue;

		format(color[0], 24, "%s", attachmentPallete[i][0]);

		break;

	}

	for( new i; i < sizeof attachmentPallete; i++)
	{

	    if(attachmentPallete[i][1][0] != playerAttachments[playerid][item][COLOR2])
	        continue;

		format(color[1], 24, "%s", attachmentPallete[i][0]);

		break;

	}

    if(playerAttachments[playerid][item][COLOR1] != 0 && playerAttachments[playerid][item][COLOR2] == 0)
    	format(tempstring, sizeof tempstring, "Prefarbi doplnok (%s)\n \n", color[0]);
	else if(playerAttachments[playerid][item][COLOR1] == 0 && playerAttachments[playerid][item][COLOR2] != 0)
    	format(tempstring, sizeof tempstring, "Prefarbi doplnok (%s)\n \n", color[1]);
	else if(playerAttachments[playerid][item][COLOR1] != 0 && playerAttachments[playerid][item][COLOR2] != 0)
    	format(tempstring, sizeof tempstring, "Prefarbi doplnok (%s, %s)\n \n", color[0], color[1]);
	else
	    format(tempstring, sizeof tempstring, "Prefarbi doplnok\n \n");

    strcat(finalstring, tempstring);

    format(tempstring, sizeof tempstring, "{f45555}Zmaza doplnok");
    strcat(finalstring, tempstring);

    ShowPlayerDialog(playerid, did_clothing_menu, DIALOG_STYLE_LIST, "DOPLNOK", finalstring, "VYBRA", "ZRUI");

	return 1;

}

Attachment_EditBone(playerid)
{

	new
	    content [ 256 ];

	for (new i; i < sizeof attachmentBones; i++)
	{

	    strcat(content, attachmentBones[i]);
	    strcat(content, "\n");
	}

	content[strlen(content) - 1] = 0;

	ShowPlayerDialog(playerid, did_clothing_menu_bone, DIALOG_STYLE_LIST, "UPRAVI KOS", content, "VYBRA", "SPA");

	return 1;

}

Attachment_ShowColorPalette(playerid)
{

    new
	    content [ 256 ];

	for (new i; i < sizeof attachmentPallete; i++)
	{

	    strcat(content, attachmentPallete[i][0]);
	    strcat(content, "\n");
	}

	content[strlen(content) - 1] = 0;

	ShowPlayerDialog(playerid, did_clothing_menu_color, DIALOG_STYLE_LIST, "UPRAVI KOS", content, "VYBRA", "SPA");

	return 1;

}

Attachment_GetUsedSlots(playerid)
{

	new count = 0;

	for ( new i; i < 50; i++)
	{

	    // Kontroluje èi doplnok existuje
	    if(playerAttachments[playerid][i][MODELID] == 0)
	        continue;

		count ++;

	}

	return count;

}

/*for(new i; i < ATTACH_MAX_CLOTHING; i++)
{
    if(playerAttachments[playerid][i][MODELID] == 0)
    	continue;
}*/

Attachment_Spawn(playerid)
{

	new index = 0;

    for ( new i; i < 50; i++)
	{

	    // Kontroluje èi doplnok existuje
	    if(playerAttachments[playerid][i][MODELID] == 0)
	        continue;

        if(playerAttachments[playerid][i][ACTIVE] == false)
	        continue;

        playerAttachments[playerid][ i ][INDEX] = index;

		SetPlayerAttachedObject(playerid, index,
	   		playerAttachments[playerid][ i ][MODELID],
			playerAttachments[playerid][ i ][BONE],
	     	playerAttachments[playerid][ i ][FOFFSETX],
     		playerAttachments[playerid][ i ][FOFFSETY],
       		playerAttachments[playerid][ i ][FOFFSETZ],
	        playerAttachments[playerid][ i ][FROTX],
	        playerAttachments[playerid][ i ][FROTY],
	        playerAttachments[playerid][ i ][FROTZ],
	        playerAttachments[playerid][ i ][FSCALEX],
	        playerAttachments[playerid][ i ][FSCALEY],
	        playerAttachments[playerid][ i ][FSCALEZ],
        	playerAttachments[playerid][ i ][COLOR1],
        	playerAttachments[playerid][ i ][COLOR2]
		);

		index ++;

		if(index >= 7)
		    break;

		/*for ( new index; index < ATTACH_MAX_SLOTS; index ++ )
		{

		    if(IsPlayerAttachedObjectSlotUsed(playerid, index))
		        continue;

            playerAttachments[playerid][ i ][INDEX] = index;

            SetPlayerAttachedObject(playerid, index,
	       		playerAttachments[playerid][ i ][MODELID],
	  			playerAttachments[playerid][ i ][BONE],
	     		playerAttachments[playerid][ i ][FOFFSETX],
	       		playerAttachments[playerid][ i ][FOFFSETY],
		        playerAttachments[playerid][ i ][FOFFSETZ],
		        playerAttachments[playerid][ i ][FROTX],
		        playerAttachments[playerid][ i ][FROTY],
		        playerAttachments[playerid][ i ][FROTZ],
		        playerAttachments[playerid][ i ][FSCALEX],
		        playerAttachments[playerid][ i ][FSCALEY],
		        playerAttachments[playerid][ i ][FSCALEZ],
	        	playerAttachments[playerid][ i ][COLOR1],
	        	playerAttachments[playerid][ i ][COLOR2]
			);

			break;

		}*/
	}
}

function OnAttachmentsLoad(playerid)
{
    new
		User[25],
		SlotID,
		ModelID,
		Bone,
		Float:X, Float:Y, Float:Z,
		Float:RX, Float:RY, Float:RZ,
		Float:SX, Float:SY, Float:SZ,
		eCOLOR1, eCOLOR2,
		Active;

	for ( new i; i < cache_num_rows(); i++ )
	{

	    if(i == cache_num_rows())
			break;

        cache_get_value_name(i, "Username", User);

        if(strcmp(User, ReturnName(playerid), false))
            continue;

	    cache_get_value_name_int(i, "SlotID", SlotID);
        cache_get_value_name_int(i, "ModelID", ModelID);
        cache_get_value_name_int(i, "Bone", Bone);

        cache_get_value_name_float(i, "X", X);
        cache_get_value_name_float(i, "Y", Y);
        cache_get_value_name_float(i, "Z", Z);

        cache_get_value_name_float(i, "RX", RX);
        cache_get_value_name_float(i, "RY", RY);
        cache_get_value_name_float(i, "RZ", RZ);

        cache_get_value_name_float(i, "SX", SX);
        cache_get_value_name_float(i, "SY", SY);
        cache_get_value_name_float(i, "SZ", SZ);

        cache_get_value_name_int(i, "COLOR1", eCOLOR1);
        cache_get_value_name_int(i, "COLOR2", eCOLOR2);
        cache_get_value_name_int(i, "Active", Active);

        playerAttachments[playerid][SlotID][MODELID] = ModelID;
        playerAttachments[playerid][SlotID][BONE] = Bone;

        playerAttachments[playerid][SlotID][FOFFSETX] = X;
        playerAttachments[playerid][SlotID][FOFFSETY] = Y;
        playerAttachments[playerid][SlotID][FOFFSETZ] = Z;

        playerAttachments[playerid][SlotID][FROTX] = RX;
        playerAttachments[playerid][SlotID][FROTY] = RY;
        playerAttachments[playerid][SlotID][FROTZ] = RZ;

        playerAttachments[playerid][SlotID][FSCALEX] = SX;
        playerAttachments[playerid][SlotID][FSCALEY] = SY;
        playerAttachments[playerid][SlotID][FSCALEZ] = SZ;

        playerAttachments[playerid][SlotID][COLOR1] = eCOLOR1;
        playerAttachments[playerid][SlotID][COLOR2] = eCOLOR2;

        playerAttachments[playerid][SlotID][ACTIVE] = !!Active;

	}
	return 1;
}

Attachment_Load(playerid)
{

    new
	    query [ 128 ];

 	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_clothing WHERE Username = '%e'", ReturnName(playerid));
	mysql_tquery(MYSQL, query, "OnAttachmentsLoad", "i", playerid);

	return 1;

}

Attachment_Save(playerid)
{

	new
	    query [ 1024 ];

	mysql_format(MYSQL, query, sizeof query, "DELETE FROM char_clothing WHERE Username = '%e'", ReturnName(playerid));
	mysql_query(MYSQL, query, false);

	new slotUsed = 0;

	for ( new i; i < 50; i++)
	{

	    // Kontroluje èi doplnok existuje
	    if(playerAttachments[playerid][i][MODELID] == 0)
	        continue;

		mysql_format(MYSQL, query, sizeof query, "INSERT INTO char_clothing (Username, SlotID, ModelID, Bone, X, Y, Z, RX, RY, RZ, SX, SY, SZ, COLOR1, COLOR2, Active) VALUES ('%e', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d')",
			ReturnName(playerid), slotUsed,
			playerAttachments[playerid][i][MODELID],
			playerAttachments[playerid][i][BONE],

			playerAttachments[playerid][i][FOFFSETX],
			playerAttachments[playerid][i][FOFFSETY],
			playerAttachments[playerid][i][FOFFSETZ],

			playerAttachments[playerid][i][FROTX],
			playerAttachments[playerid][i][FROTY],
			playerAttachments[playerid][i][FROTZ],

			playerAttachments[playerid][i][FSCALEX],
			playerAttachments[playerid][i][FSCALEY],
			playerAttachments[playerid][i][FSCALEZ],

			playerAttachments[playerid][i][COLOR1],
			playerAttachments[playerid][i][COLOR2],

			playerAttachments[playerid][i][ACTIVE]
		);

		mysql_pquery(MYSQL, query);

		slotUsed ++;

	}

	return 1;

}

new mdc_Username[ MAX_PLAYERS ][ MAX_PLAYER_NAME + 1 ];
new mdc_SPZ[ MAX_PLAYERS ][ 24 ];
new mdc_CALL[ MAX_PLAYERS ];
new mdc_CALLNUM[ MAX_PLAYERS ][32];
new mdc_CALLID[ MAX_PLAYERS ];
new mdc_HANDLED[ MAX_PLAYERS ];

ShowPDCallDetails(playerid, listitem)
{

	mdc_CALL[playerid] = listitem;

    new
		mql_query[128];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_calls WHERE FactionType = '%d' AND Handled != '3' ORDER BY id DESC", FACTION_TYPE_LAW);

	new
	    Cache:query = mysql_query(MYSQL, mql_query),

		Caller[ 130 ],
		Situation[ 130 ],
		Location[ 130 ],
		FromNumber,
		Date,
		id,
		handlers[260]
	;

	cache_get_value_name(listitem, "Caller", Caller);
	cache_get_value_name(listitem, "Situation", Situation);
	cache_get_value_name(listitem, "Location", Location);
	cache_get_value_name(listitem, "Handlers", handlers);
	cache_get_value_name_int(listitem, "FromNumber", FromNumber);
	cache_get_value_name_int(listitem, "Date", Date);
	cache_get_value_name_int(listitem, "id", id);
	cache_get_value_name_int(listitem, "Handled", mdc_HANDLED[playerid]);

	format(mdc_CALLNUM[playerid], 32, "%d", FromNumber);
	mdc_CALLID[playerid] = id;

	cache_delete(query);

	new
	    finalString[2048];

	format(finalString, sizeof finalString, "{ffffff}|\n|\tVolajúci: %s\n|\tÈas hovoru: %s\n|\tLokácia: %s\n|\tTelefónne èíslo: %d\n|\tReagujúci: %s\n|\n|\tInformácie:\n|\t> %s",
		Caller, getdateunix(Date), Location, FromNumber, handlers, Situation);

	return ShowPlayerDialog(playerid, did_mdc_call, DIALOG_STYLE_MSGBOX, "MOBILE DATABASE COMPUTER",
	    finalString, "MENU", "SPA");
}

ShowFDCallDetails(playerid, listitem)
{

	mdc_CALL[playerid] = listitem;

    new
		mql_query[128];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_calls WHERE FactionType = '%d' AND Handled = '0' ORDER BY id DESC", FACTION_TYPE_FIRE);

	new
	    Cache:query = mysql_query(MYSQL, mql_query),

		Caller[ 130 ],
		Situation[ 130 ],
		Location[ 130 ],
		FromNumber,
		Date,
		id;

	cache_get_value_name(listitem, "Caller", Caller);
	cache_get_value_name(listitem, "Situation", Situation);
	cache_get_value_name(listitem, "Location", Location);
	cache_get_value_name_int(listitem, "FromNumber", FromNumber);
	cache_get_value_name_int(listitem, "Date", Date);
	cache_get_value_name_int(listitem, "id", id);

	format(mdc_CALLNUM[playerid], 32, "%d", FromNumber);
	mdc_CALLID[playerid] = id;

	cache_delete(query);

	new
	    finalString[2048];

	format(finalString, sizeof finalString, "{ffffff}|\n|\tVolajúci: %s\n|\tÈas hovoru: %s\n|\tLokácia: %s\n|\tTelefónne èíslo: %d\n|\n|\tInformácie:\n|\t> %s",
		Caller, getdateunix(Date), Location, FromNumber, Situation);

	return ShowPlayerDialog(playerid, did_fos_call, DIALOG_STYLE_MSGBOX, "FIRE OPERATING SYSTEM",
	    finalString, "MENU", "SPA");
}

ShowPlayerLastCallsFD(playerid)
{

    new
		mql_query[128],
		finalString[2048] = "Èíslo hovoru\tDátum a èas\n",
		tString[256];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_calls WHERE FactionType = '%d' AND Handled = '0' ORDER BY id DESC", FACTION_TYPE_FIRE);

	new
	    Cache:query = mysql_query(MYSQL, mql_query);

	for(new i; i < cache_num_rows(); i++) {
        if(i == cache_num_rows()) break;

        new
            id,
			datum;

     	cache_get_value_name_int(i, "id", id);
     	cache_get_value_name_int(i, "Date", datum);

     	format(tString, sizeof tString, "{ffffff}#%05d\t%s\n", id, getdateunix(datum));
     	strcat(finalString, tString);
	}

	cache_delete(query);

	ShowPlayerDialog(playerid, did_fos_calls, DIALOG_STYLE_TABLIST_HEADERS, "FIRE OPERATING SYSTEM",
	    finalString, "DETAIL", "SPA");

	return 1;

}

ShowPlayerLastCallsPD(playerid)
{

    new
		mql_query[128],
		finalString[2048] = "Èíslo hovoru\tDátum a èas\n",
		tString[256];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_calls WHERE FactionType = '%d' AND Handled != '3' ORDER BY id DESC LIMIT 25", FACTION_TYPE_LAW);

	new
	    Cache:query = mysql_query(MYSQL, mql_query);

    new
		id,
		datum,
		handled;

	for(new i; i < cache_num_rows(); i++) {
        if(i == cache_num_rows()) break;

     	cache_get_value_name_int(i, "id", id);
     	cache_get_value_name_int(i, "Date", datum);
     	cache_get_value_name_int(i, "Handled", handled);

     	if(handled == 0) format(tString, sizeof tString, "{ffffff}#%04d\t%s {e38055}(NEW)\n", id, getdateunix(datum));
     	else if(handled == 1) format(tString, sizeof tString, "{ffffff}#%04d\t%s\n", id, getdateunix(datum));
        else if(handled == 2) format(tString, sizeof tString, "{ffffff}#%04d\t%s {75c563}(CLEAN)\n", id, getdateunix(datum));
     	strcat(finalString, tString);
	}

	cache_delete(query);

	ShowPlayerDialog(playerid, did_mdc_calls, DIALOG_STYLE_TABLIST_HEADERS, "MOBILE DATABASE COMPUTER",
	    finalString, "DETAIL", "SPA");

	return 1;

}

ShowPlayerMDC_DetailVeh_Want(playerid)
{
    new
	    query[256],
	    Cache:cache,

		dt_IsWanted;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_vehicles WHERE SPZ = '%e'", mdc_SPZ[playerid]);
	cache = mysql_query(MYSQL, query);

	cache_get_value_name_int(0, "IsWanted", dt_IsWanted);

	cache_delete(cache);

	if(dt_IsWanted == 1)
	{
		SendSuccess(playerid, "H¾adanos vozidla zruená!");

		mysql_format(MYSQL, query, sizeof query, "UPDATE char_vehicles SET IsWanted = '0', IsWantedFor = ' ' WHERE SPZ = '%e'", mdc_SPZ[playerid]);
		mysql_query(MYSQL, query, false);
	}
	else
	{
	    return ShowPlayerDialog(playerid, did_mdc_vehicle_detail_want, DIALOG_STYLE_INPUT, "MOBILE DATABASE COMPUTER",
	    	"{ffffff}> Zadajte prosím, zaèo je toto vozidlo hladané!", "OK", "SPA");
	}

	return ShowPlayerMDC_DetailVehicle(playerid, mdc_SPZ[playerid]);
}

ShowPlayerMDC_DetailVeh_Info(playerid)
{
    new
	    finalString[256],
	    tempstring[48],

	    query[256],
	    Cache:cache,

		dt_SPZ[ 24 ],
		dt_Model,
		dt_Owner[ 25 ],
		dt_IsWanted,
		dt_IsWantedFor[ 128 ];

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_vehicles WHERE SPZ = '%e'", mdc_SPZ[playerid]);
	cache = mysql_query(MYSQL, query);

	cache_get_value_name(0, "SPZ", dt_SPZ);
	cache_get_value_name_int(0, "Model", dt_Model);
	cache_get_value_name(0, "Owner", dt_Owner);
	cache_get_value_name_int(0, "IsWanted", dt_IsWanted);
	cache_get_value_name(0, "IsWantedFor", dt_IsWantedFor);

	format(tempstring, sizeof tempstring, "{ffffff}Vozidlo: {60a5f2}%s\n", VehicleNames[dt_Model-400]);
	strcat(finalString, tempstring);

	format(tempstring, sizeof tempstring, "{ffffff}Poznávacia znaèka: {60a5f2}%s\n", dt_SPZ);
	strcat(finalString, tempstring);

	format(tempstring, sizeof tempstring, "{ffffff}Majite¾: {60a5f2}%s\n\n", str_replace("_", " ", dt_Owner));
	strcat(finalString, tempstring);

	if(dt_IsWanted == 1)
	{
	    strcat(finalString, "{ee4141}[ !!! TOTO VOZIDLO JE H¼ADANÉ !!! ]\n");
	    format(tempstring, sizeof tempstring, "{ffffff}H¾adané za: {60a5f2}%s\n", dt_IsWantedFor);
		strcat(finalString, tempstring);
	}

	cache_delete(cache);

	return ShowPlayerDialog(playerid, did_mdc_vehicle_detail_info, DIALOG_STYLE_MSGBOX, "MOBILE DATABASE COMPUTER",
	    finalString, "OK", "");
}

ShowPlayerMDC_DetailVehicle(playerid, spz[])
{

	format(mdc_SPZ[playerid], 30, "%s", spz);

	new
	    caption[64],
	    finalString[256],
	    tempstring[45],

	    query[90],
	    Cache:cache,

		dt_SPZ[ 24 ],
		dt_Model,
		dt_Owner[ 25 ],
		dt_IsWanted;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_vehicles WHERE SPZ = '%e'", spz);
	cache = mysql_query(MYSQL, query);

	cache_get_value_name(0, "SPZ", dt_SPZ);
	cache_get_value_name_int(0, "Model", dt_Model);
	cache_get_value_name(0, "Owner", dt_Owner);
	cache_get_value_name_int(0, "IsWanted", dt_IsWanted);

	if(dt_IsWanted == 0)
	    format(caption, sizeof caption, "{ffffff}%s", VehicleNames[dt_Model-400]);
	else
	    format(caption, sizeof caption, "{f94c4c}[H¼ADANÉ] {ffffff}%s", VehicleNames[dt_Model-400]);

	format(tempstring, sizeof tempstring, "{ffffff}Zobrazi informácie\n \n");
	strcat(finalString, tempstring);

	if(dt_IsWanted == 0)
		format(tempstring, sizeof tempstring, "{ffffff}Nastavi ako hladané\n");
	else
	    format(tempstring, sizeof tempstring, "{ffffff}Zrui hladanos\n");

	strcat(finalString, tempstring);

	cache_delete(cache);

	ShowPlayerDialog(playerid, did_mdc_vehicle_detail, DIALOG_STYLE_LIST, caption, finalString, "VYBRA", "ZRUI");

	return 1;

}

ShowPlayerMDC_DetailPerson_AFin(playerid)
{

	ShowPlayerDialog(
		playerid,
		did_mdc_pokuta_add, DIALOG_STYLE_INPUT,
		"PRIDA POKUTU",
		"{FFFFFF}> Zadaj prosím sumu pokuty v rozmedzí 1-20000$!",
		"ÏALEJ", "SPA"
	);
	return 1; //ShowPlayerMDC_DetailPerson(playerid, mdc_Username[playerid]);

}

ShowPlayerMDC_DetailPerson_ACin(playerid)
{

	ShowPlayerDialog(playerid, did_mdc_add_cin, DIALOG_STYLE_INPUT, "MOBILE DATABASE COMPUTER", "{ffffff}> Zadajte prosím, èoho sa táto osoba dopustila.",
	    "PRIDA", "SPA");

	return 1;

}

ShowPlayerMDC_DetailPerson_Info(playerid)
{

	new
		query[128],
		Cache:cache;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_main WHERE Username = '%e'", mdc_Username[playerid]);
	cache = mysql_query(MYSQL, query);

	new
	    Username[ MAX_PLAYER_NAME + 1],
	    Faction, FactionTitle[ 32 ],
	    ID_DateOfBirthe[ 32 ], ID_PlaceOfBirthe[ 64 ], ID_Settlemente[ 48 ];

    cache_get_value_name(0, "Username", Username);
    cache_get_value_name_int(0, "Faction", Faction);
    cache_get_value_name(0, "FactionTitle", FactionTitle);

    cache_get_value_name(0, "ID_DateOfBirth", ID_DateOfBirthe);
    cache_get_value_name(0, "ID_PlaceOfBirth", ID_PlaceOfBirthe);
    cache_get_value_name(0, "ID_Settlement", ID_Settlemente);

	cache_delete(cache);

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_inventory WHERE Username = '%e'", Username);

	cache = mysql_query(MYSQL, query);

	new
	    ObcianskyPreukaz,
	    Telefon,
	    SimKarta;

	cache_get_value_name_int(0, "ObcianskyPreukaz", ObcianskyPreukaz);
	cache_get_value_name_int(0, "Telefon", Telefon);
	cache_get_value_name_int(0, "SimKarta", SimKarta);

	cache_delete(cache);

	new
	    finalString[2048],
	    tString[128];

	format(tString, sizeof tString, "{ffffff}Meno osoby: {60a5f2}%s\n\n", str_replace("_", " ", Username));
	strcat(finalString, tString);

	if(Faction != 0)
	{
	    format(tString, sizeof tString, "{ffffff}Zamestnanie: {60a5f2}%s\n", factEnum[Faction][fact_Name]);
		strcat(finalString, tString);
		format(tString, sizeof tString, "{ffffff}Pozícia v zamestnaní: {60a5f2}%s\n\n", FactionTitle);
		strcat(finalString, tString);
	}
	else
	{
	    format(tString, sizeof tString, "{ffffff}Zamestnanie: {60a5f2}iadne\n\n");
		strcat(finalString, tString);
	}

	if(ObcianskyPreukaz == 1)
	{
	    format(tString, sizeof tString, "{ffffff}Dátum narodenia: {60a5f2}%s\n", ID_DateOfBirthe);
		strcat(finalString, tString);
		format(tString, sizeof tString, "{ffffff}Miesto narodenia: {60a5f2}%s\n", ID_PlaceOfBirthe);
		strcat(finalString, tString);
		format(tString, sizeof tString, "{ffffff}Trvalé bydlisko: {60a5f2}%s\n\n", ID_Settlemente);
		strcat(finalString, tString);
	}

	if(Telefon == 1)
	{
	    format(tString, sizeof tString, "{ffffff}Telefónne èíslo: {60a5f2}%d\n\n", SimKarta);
		strcat(finalString, tString);
	}

	ShowPlayerDialog(playerid, did_mdc_person_info, DIALOG_STYLE_MSGBOX, "MOBILE DATABASE COMPUTER",
	    finalString,
	    "BACK", "");

	return 1;

}

ShowPlayerMDC_DetailPerson_Maje(playerid)
{
	new
	    finalString[2048] = "{60a5f2}Vozidlá:\n",
	    tString[128];

    new
		mql_query[128];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM char_vehicles WHERE Owner = '%e' ORDER BY Model", mdc_Username[playerid]);

	new
	    Cache:query = mysql_query(MYSQL, mql_query),
	    SPZ[30],
	    Model;

	for(new i; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

     	cache_get_value_name(i, "SPZ", SPZ);
     	cache_get_value_name_int(i, "Model", Model);

     	if(Model == 481 || Model == 509 || Model == 510)
     	    continue;

     	format(tString, sizeof tString, "{ffffff}\n\r\t%s [ %s ]", VehicleNames[Model-400], SPZ);
     	strcat(finalString, tString);
	}

	cache_delete(query);

	mysql_format(MYSQL, mql_query, sizeof mql_query, "SELECT * FROM char_inventory WHERE Username = '%e'", mdc_Username[playerid]);
	query = mysql_query(MYSQL, mql_query);

	new va,vb,vc,vt,vf,vz,vlod,vlet,tb,zr;

	cache_get_value_name_int(0, "VodicakA", va);
	cache_get_value_name_int(0, "VodicakC", vc);
	cache_get_value_name_int(0, "VodicakB", vb);
	cache_get_value_name_int(0, "VodicakT", vt);
	cache_get_value_name_int(0, "PermFly", vlet);
	cache_get_value_name_int(0, "PermBoat", vlod);
	cache_get_value_name_int(0, "FishingPermit", vf);
	cache_get_value_name_int(0, "ZbrojnyPreukaz", vz);

	cache_delete(query);
	
	//////////////////////
	
	mysql_format(MYSQL, mql_query, sizeof mql_query, "SELECT * FROM char_main WHERE Username = '%e'", mdc_Username[playerid]);
	query = mysql_query(MYSQL, mql_query);
	cache_get_value_name_int(0, "trestnebody", tb);
	cache_get_value_name_int(0, "zakazrizeni", zr);
	cache_delete(query);

	if(zr > gettime())
	    format(tString, sizeof tString, "\n\n\r{60a5f2}Preukazy (%d/12 t.b.):\nTato osoba má zákaz riadenia do %s!", tb, getdateunix(zr));
	else
		format(tString, sizeof tString, "\n\n\r{60a5f2}Preukazy (%d/12 t.b.):\n", tb);
		
	strcat(finalString, tString);
	if(va > 0) strcat(finalString, "{ffffff}\n\r\tVodièský preukaz skupiny A");
	if(vb > 0) strcat(finalString, "{ffffff}\n\r\tVodièský preukaz skupiny B,BE");
	if(vc > 0) strcat(finalString, "{ffffff}\n\r\tVodièský preukaz skupiny C,CE");
	if(vt > 0) strcat(finalString, "{ffffff}\n\r\tVodièský preukaz skupiny T");
	if(vlod > 0) strcat(finalString, "{ffffff}\n\r\tLodný preukaz");
	if(vlet > 0) strcat(finalString, "{ffffff}\n\r\tLetecký preukaz");
    if(vf > 0) strcat(finalString, "{ffffff}\n\r\tRybárske oprávnenie");
    if(vz > 0) strcat(finalString, "{ffffff}\n\r\tZbrojný preukaz");

	strcat(finalString, "\n\n\r{60a5f2}Domy:\n");

	foreach( new i : Houses )
	{
	    if(houseEnum[i][ho_PSC] == 0)
	        continue;

		if(strcmp(mdc_Username[playerid], houseEnum[i][ho_Owner], true))
		    continue;

        format(tString, sizeof tString, "{ffffff}\n\r\t%d%s %s, %s", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City]);
     	strcat(finalString, tString);
	}

	strcat(finalString, "\n\n\r{60a5f2}Garáe:\n");

	foreach( new i : Garages )
	{
	    if(garageEnum[i][ga_PSC] == 0)
	        continue;

		if(strcmp(mdc_Username[playerid], garageEnum[i][ga_Owner], true))
		    continue;

        format(tString, sizeof tString, "{ffffff}\n\r\t%d%s %s, %s", garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City]);
     	strcat(finalString, tString);
	}

	strcat(finalString, "\n\n\r{60a5f2}Biznisy:\n");

	foreach( new i : Businesses )
	{
	    if(businessEnum[i][bz_Address] == 0)
	        continue;

		if(strcmp(mdc_Username[playerid], businessEnum[i][bz_Owner], true))
		    continue;

        format(tString, sizeof tString, "{ffffff}\n\r\t%s", businessEnum[i][bz_Name]);
     	strcat(finalString, tString);
	}

	ShowPlayerDialog(playerid, did_mdc_person_majetok, DIALOG_STYLE_MSGBOX, "MOBILE DATABASE COMPUTER",
	    finalString,
	    "BACK", "");

	return 1;

}

ShowPlayerMDC_DetailPerson_Cont(playerid)
{

	new
	    calltoid = -1;

	foreach( new i : Player )
	{
	    if(playerid == i)
			continue;

		if(!IsPlayerLogged(i))
		    continue;

		if(strcmp(ReturnName(i), mdc_Username[playerid], true))
		    continue;

		calltoid = i;
	}

	if(calltoid == -1)
	{
	    //fail

	    SendError(playerid, "Osobu sa nepodarilo kontaktova!");
	    return ShowPlayerMDC_DetailPerson(playerid, mdc_Username[playerid]);
	}

	//success

	new
	    cislo[ 32 ];

	format(cislo, 32, "%d", GetPlayerInventoryItem(calltoid, inv_simcard));

	ProceedDial(playerid, cislo);

	return 1;

}

ShowPlayerMDC_DetailPerson_Trac(playerid)
{

	new
	    calltoid = -1;

	foreach( new i : Player )
	{
		if(!IsPlayerLogged(i))
		    continue;

		if(strcmp(ReturnName(i), mdc_Username[playerid], true))
		    continue;

		if(phone_isPhoneTurnedOff(i))
		    continue;

		calltoid = i;
	}

	if(calltoid == -1 || phone_playerHasPhone(calltoid) != 1)
	{
	    //fail

	    SendError(playerid, "Osobu sa nepodarilo vystopova!");
	    return ShowPlayerMDC_DetailPerson(playerid, mdc_Username[playerid]);
	}
	
	new
		Float:X = -8000.0,
		Float:Y = -8000.0,
		Float:Z = -8000.0;
	
	if(GetPlayerVirtualWorld(calltoid) != 0)
	{
	    new bool:beenSent = false;
	    if(beenSent == false)
		{
			foreach( new i : Businesses ) {
			    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
				if(GetPlayerVirtualWorld(calltoid) == businessEnum[i][bz_Address])
				{
				    beenSent = true;

				    X=businessEnum[i][bz_PosX];
				    Y=businessEnum[i][bz_PosY];
				    Z=businessEnum[i][bz_PosZ];

					break;
				}
			}
		}

		if(beenSent == false)
		{
			foreach( new i : Houses ) {
			    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;

				if(GetPlayerVirtualWorld(playerid) == houseEnum[i][ho_PSC])
				{
				    beenSent = true;

				    X=houseEnum[i][ho_PosX];
				    Y=houseEnum[i][ho_PosY];
				    Z=houseEnum[i][ho_PosZ];

					break;
				}
			}

			foreach( new i : Garages ) {
			    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;

				if(GetPlayerVirtualWorld(playerid) == garageEnum[i][ga_PSC])
				{
				    beenSent = true;

				    X = garageEnum[i][ga_pX];
				    Y = garageEnum[i][ga_pY];
				    Z = garageEnum[i][ga_pZ];

					break;
				}
			}
		}
	}
	else
	{
	    GetPlayerPos(calltoid, X, Y, Z);
	}
	
	if(X == -8000.0)
	{
	    SendError(playerid, "Osobu sa nepodarilo vystopova, nie je k nej dostupný signál!");
	    return ShowPlayerMDC_DetailPerson(playerid, mdc_Username[playerid]);
	}

	//success

	DisablePlayerCheckpoint(playerid);
	GetRandomPointInCircle(X, Y, 30.0, X, Y);

	fix_SetPlayerCheckpoint(playerid, X, Y, Z, 35.0);
	g_I_playerCheckpoint[playerid] = checkp_trace;

    foreach( new x : Player )
	{
 		if(GetPlayerFactionType(x) != FACTION_TYPE_LAW)
   			continue;

		if(GetPlayerFactionType(x) == FACTION_TYPE_LAW && !IsPlayerWorking(x))
  			continue;

		SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s vystopoval hráèa %s pomocou MDC!", GetPlayerNameEx(playerid, NO_MASK), GetPlayerNameEx(calltoid, NO_MASK));
	}

	FormatWarnEx(playerid, 2, "AdmCmd:", COLOR_ADMINCMD, "%s vystopoval hráèa %s pomocou MDC!", GetPlayerNameEx(playerid, NO_MASK), GetPlayerNameEx(calltoid, NO_MASK));

	return 1;

}

ShowPlayerMDC_DetailPerson_LFin(playerid)
{

    new
		query[256],
		Cache:cache,

		finalString[2048] = "Suma\tDôvod\tDátum udelenia\tZaplatená\n",
		tempString[128];

	mysql_format(MYSQL, query, 256, "SELECT * FROM char_pokuty WHERE Username = '%e' ORDER BY Paid, Date DESC", mdc_Username[playerid]);

	cache = mysql_query(MYSQL, query);

	for( new i; i < cache_num_rows(); i++)
	{
	    if(i > cache_num_rows())
			break;

		new
		    Suma,
		    Dovod[128],
		    Date,
		    Officer[64],
		    Paid;

	    cache_get_value_name_int(i, "Suma", Suma);
	    cache_get_value_name(i, "Dovod", Dovod);
	    cache_get_value_name_int(i, "Date", Date);
	    cache_get_value_name(i, "Officer", Officer);
	    cache_get_value_name_int(i, "Paid", Paid);

	    new
	        paidstr[15];

		switch(Paid)
		{
		    case 0:
		        format(paidstr, 15, "{e17070}Nie");

			default:
			    format(paidstr, 15, "{8be183}Áno");

		}

		format(tempString, 128, "{548555}%d${ffffff}\t%s\t%s\t%s\n", Suma, Dovod, getdateunix(Date), paidstr);
		strcat(finalString, tempString);
	}

	cache_delete(cache);

	ShowPlayerDialog(playerid, did_mdc_fines, DIALOG_STYLE_TABLIST_HEADERS, "POKUTY", finalString, "VYMAZA", "ZRUI");

	return 1;
}

ShowPlayerMDC_DetailPerson_LCin(playerid)
{

    new
		query[256],
		Cache:cache,

		finalString[2048] = "Trestný èin\tDátum\tUdelil\n",
		tempString[128];

	mysql_format(MYSQL, query, 256, "SELECT * FROM char_trestneciny WHERE Username = '%e' ORDER BY Datum", mdc_Username[playerid]);

	cache = mysql_query(MYSQL, query);

	for( new i; i < cache_num_rows(); i++)
	{
	    if(i > cache_num_rows())
			break;

		new
		    Cin[64],
		    Udelil[25],
		    Datum;

	    cache_get_value_name(i, "Cin", Cin);
	    cache_get_value_name(i, "Udelil", Udelil);
	    cache_get_value_name_int(i, "Datum", Datum);

		format(tempString, 128, "%s\t%s\t%s\n", Cin, getdateunix(Datum), str_replace("_", " ", Udelil));
		strcat(finalString, tempString);
	}

	cache_delete(cache);

	ShowPlayerDialog(playerid, did_mdc_ciny, DIALOG_STYLE_TABLIST_HEADERS, "TRESTNÉ ÈINY", finalString, "VYMAZA", "ZRUI");

	return 1;
}

ShowPlayerMDC_DetailPerson(playerid, username[])
{

	format(mdc_Username[playerid], 25, "%s", username);

	ShowPlayerDialog(playerid, did_mdc_person, DIALOG_STYLE_LIST, str_replace("_", " ", username),
	    "Zobrazi informácie\nZobrazi majetok\nKontakova\nVystopova\n \nZobrazi pokuty\nZobrazi trestné èiny\n \nPrida pokutu\nPrida trestný èin",
	    "CHOOSE", "BACK");

	return 1;

}

ShowPlayerMDC_SearchPerson(playerid)
{

	ShowPlayerDialog(playerid, did_mdc_search_person, DIALOG_STYLE_INPUT, "MOBILE DATABASE COMPUTER",
	 	"{FFFFFF}> Zadajte prosím meno osoby, ktorú chcete vyh¾ada!\n\n(( !!! Osoba môe by aj offline, dáta sa aktualizujú nepravidelne priemerne kadú hodinu !!! ))",
	 	"SEARCH", "BACK");

	return 1;

}

ShowPlayerMDC_SearchVehicle(playerid)
{

    ShowPlayerDialog(playerid, did_mdc_search_vehicle, DIALOG_STYLE_INPUT, "MOBILE DATABASE COMPUTER",
	 	"{FFFFFF}> Zadajte prosím SPZ vozidla, ktore chcete vyh¾ada!\n\n(( !!! Ak je vozidlo frakèné, nenájde ho !!! ))",
	 	"SEARCH", "BACK");

	return 1;
}

ShowPlayerMDC_TraceNumber(playerid)
{

    ShowPlayerDialog(playerid, did_mdc_trace_number, DIALOG_STYLE_INPUT, "MOBILE DATABASE COMPUTER",
	 	"{FFFFFF}> Zadajte prosím telefónne èíslo, ktoré chcete vystopova!\n(( Ak je hráè ktorému patrí offline, nefunguje! ))",
	 	"SEARCH", "BACK");

	return 1;
}

ShowPlayerMDC(playerid)
{

	new
	    string[256] = "{FFFFFF}Vyh¾ada obèana\nVyh¾ada vozidlo\nVyh¾ada èíslo\nStránici v slube\nPosledné hovory\n",
	    tempString[45],

	    query[128],
	    Cache:cache,

		wantedVehicles = 0,
		wantedPeople = 0;

    mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_vehicles WHERE IsWanted = '1'");
	cache = mysql_query(MYSQL, query);

	wantedVehicles = cache_num_rows();

	cache_delete(cache);

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_pokuty WHERE Date < %d AND Paid = 0", gettime()-604800);
	cache = mysql_query(MYSQL, query);

	wantedPeople = cache_num_rows();

	cache_delete(cache);

	if(wantedPeople > 0)
		format(tempString, sizeof tempString, "Daòové úniky ( {db5959}NEW {ffffff})\n");
	else
	    format(tempString, sizeof tempString, "Daòové úniky\n");
	strcat(string, tempString);

	if(wantedVehicles > 0)
		format(tempString, sizeof tempString, "H¾adané vozidlá ( {db5959}%d! {ffffff})\n", wantedVehicles);
	else
	    format(tempString, sizeof tempString, "H¾adané vozidlá\n");
	strcat(string, tempString);

	strcat(string, "Mestské kamery\nDatabáza zbraní");

	ShowPlayerDialog(playerid, did_mdc, DIALOG_STYLE_LIST, "MOBILE DATABASE COMPUTER",
 		string,
   		"SELECT", "LOGOUT");

	return 1;
}

/*

	API

*/

phone_getPlayerContact(playerid, number)
{

	new
	    query[128],
		cislo[30];

	valstr(cislo, number);

	mysql_format(MYSQL ,query, sizeof query, "SELECT * FROM phone_contacts WHERE Username = '%e' AND ContactNumber = '%e'", ReturnName(playerid), cislo);
	new Cache:c = mysql_query(MYSQL, query);

	new pocet = cache_num_rows(),
	    meno[30];

    cache_get_value_name(0, "ContactName", meno);

    cache_delete(c);

    if(pocet == 0)
        format(meno, 30, "%d", number);

	return meno;
}

phone_getPlayerNumber(playerid)
{

	if(!IsPlayerLogged(playerid))
		return INVALID_PHONE_NUMBER;

	if(GetPlayerInventoryItem(playerid, inv_simcard) < 1)
		return INVALID_PHONE_NUMBER;

	return GetPlayerInventoryItem(playerid, inv_simcard);
}

phone_getPlayerFromNumber(number)
{

	new
		player = INVALID_PHONE_PLAYER;

	foreach ( new i : Player )
	{
		if(!phone_playerHasPhone(i))
			continue;

		if(phone_getPlayerNumber(i) == -1)
			continue;

		if(phone_getPlayerNumber(i) != number)
			continue;

		player = i;
		break;
	}

	return player;
}

phone_playerHasPhone(playerid)
{
	if(!IsPlayerLogged(playerid))
		return 0;

	if(!GetPlayerInventoryItem(playerid, inv_telefon))
		return 0;

	return 1;
}

phone_isPhoneTurnedOff(playerid)
{
	if(!IsPlayerLogged(playerid))
		return 0;

	if(ph_TurnedOff[playerid] == true)
		return 1;

	else
		return 0;
}

phone_setPlayerPhoneState(playerid, sstate)
{

	if(!IsPlayerLogged(playerid))
		return 0;

	ph_TurnedOff[playerid] = !sstate;

	return 1;
}


/*

	Vytoèi èíslo
	Zasla SMS správu

	Kontakty

	Nastavenia

	Zapnú / vypnú telefón

*/

ShowPlayerPhoneMenu(playerid)
{

	// Ak nemá telefón, zatvoríme
	if(phone_playerHasPhone(playerid) == 0)
		return SendError(playerid, "Nemá mobilný telefón!");

	if(ph_IsDialing[playerid] == true)
		return SendError(playerid, "Vytáèa nejaké èíslo ...");


	new
		finalString[256] = "",
		tempString[32];

    if(phone_isPhoneTurnedOff(playerid) == 1 || ph_PayMode[playerid] != 1)
    {
        format(tempString, sizeof tempString, " \t \n");
		strcat(finalString, tempString);
    }
    else
    {
		format(tempString, sizeof tempString, "%d USD\t100 %%\n", ph_Credit[playerid]);
		strcat(finalString, tempString);
	}

	format(tempString, 32, "Vytoèi èíslo\n");
	strcat(finalString, tempString);

	format(tempString, 32, "Zasla SMS správu\n\n");
	strcat(finalString, tempString);

	format(tempString, 32, "Posledné SMS správy\n \n");
	strcat(finalString, tempString);


	format(tempString, 32, "Kontakty\n \n");
	strcat(finalString, tempString);


	format(tempString, 32, "Nastavenia\n \n");
	strcat(finalString, tempString);

	if(phone_isPhoneTurnedOff(playerid) == 1)
		format(tempString, 32, "{7ae195}Zapnú mobilný telefón");
	else
		format(tempString, 32, "{fd5e5e}Vypnú mobilný telefón");

	strcat(finalString, tempString);

	ShowPlayerDialog(playerid, did_phone, DIALOG_STYLE_TABLIST_HEADERS, "TELEFÓN", finalString, "ZVOLI", "ZRUI");

	return 1;

}

ShowPlayerPhoneOptions(playerid)
{

	// Ak nemá telefón, zatvoríme
	if(phone_playerHasPhone(playerid) == 0)
		return SendError(playerid, "Nemá mobilný telefón!");

	new
		finalString[256],
		tempString[64];

	format(tempString, sizeof tempString, "Moje telefónne èíslo\t%d\n \n", phone_getPlayerNumber(playerid));
	strcat(finalString, tempString);

	format(tempString, sizeof tempString, "Binbows v1.52.5165\n");
	strcat(finalString, tempString);

	format(tempString, sizeof tempString, "© Michaelsoft 2017");
	strcat(finalString, tempString);

	ShowPlayerDialog(playerid, did_phone_options, DIALOG_STYLE_TABLIST, "TELEFÓN - NASTAVENIA", finalString, "OK", "");

	return 1;
}

ShowPlayerPhoneDial(playerid)
{
	// Ak nemá telefón, zatvoríme
	if(phone_playerHasPhone(playerid) == 0)
		return SendError(playerid, "Nemá mobilný telefón!");

    if(GetPlayerInventoryItem(playerid, inv_simcard) < 10)
    	return SendError(playerid, "Nemá SIM kartu!");

	if(phone_IsOut[playerid] == false)
	{
	    LoadPhone(playerid);

	    phone_SelectedTile[playerid] 	= 0;
	    phone_Screen[playerid]          = 0;
	    phone_IsOut[playerid]           = true;

	    SelectTextDraw(playerid, -858993409);

	    EnterInfo(playerid, "~w~Telefon mozes zatvorit prikazom ~b~/phone~w~ alebo kliknutim na tlacidlo ~b~BACK~w~!");

	    phone_refreshTextdraw(playerid);
	}

	new
		finalString[256],
		tempString[256];

	format(tempString, sizeof tempString, "{ffffff}> Zadajte prosím telefónne èíslo, ktoré chcete vytoèi.\n\nUitoèné èísla:\n\t911 (Emergency Services)\n\r\t222-444-666 (Taxi Service)\n\r\t8778 (Red County News Network)\n\r\t333 (Hayes' Home Service)");
	strcat(finalString, tempString);

	ShowPlayerDialog(playerid, did_phone_dial, DIALOG_STYLE_INPUT, "TELEFÓN - VYTOÈI", finalString, "VOLA", "SPA");

	return 1;
}

SendMessage(playerid, const number[], const message[])
{

    new
	    cisielko[256];

	format(cisielko, sizeof cisielko, "%s", str_replace("-", "", number));
	format(cisielko, sizeof cisielko, "%s", str_replace(" ", "", cisielko));

    SendPlayerAction(playerid, "uká do klávesnice text a klikná na odosla ...");

    if(strval(number) == 1444)
    {

        new sid = -1;

		for(new i; i < MAX_ACTIVE_MESSAGES; i++)
		{
		    if(strlen(temp_messages[playerid][i]) > 0)
		        continue;

			format(temp_messages[playerid][i], 255, message);

			sid = i;
			break;
		}

		if(sid == -1)
			return SetTimerEx("phone_timer_Message_Failed", 4000 + random(6000), false, "i", playerid);

        SetTimerEx("phone_timer_Message_Advert", 1000 + random(3000), false, "ii", playerid, sid);

        return 1;
    }

    new player = phone_getPlayerFromNumber(strval( cisielko ));

    if(player == INVALID_PHONE_PLAYER || player == playerid)
		return SetTimerEx("phone_timer_Message_Failed", 4000 + random(6000), false, "i", playerid);
    else if(phone_isPhoneTurnedOff(player) == 1)
		return SetTimerEx("phone_timer_Message_Failed", 4000 + random(6000), false, "i", playerid);

	new sid = -1;

	for(new i; i < MAX_ACTIVE_MESSAGES; i++)
	{
	    if(strlen(temp_messages[playerid][i]) > 0)
	        continue;

		format(temp_messages[playerid][i], 255, message);

		sid = i;
		break;
	}

	if(sid == -1)
		return SetTimerEx("phone_timer_Message_Failed", 4000 + random(6000), false, "i", playerid);

    SetTimerEx("phone_timer_Message_Success", 1000 + random(3000), false, "iii", playerid, player, sid);

    return 1;

}

function phone_timer_Message_Success(fromid, toid, sid)
{

	new
	    query[512];

	mysql_format(MYSQL, query, sizeof query, "INSERT INTO phone_list (FromNumber, ToNumber, Text, Date, DisplayFor) VALUES ('%d', '%d', '%e', '%d', '%e')",
	    phone_getPlayerNumber(fromid), phone_getPlayerNumber(toid), temp_messages[fromid][sid], gettime(), ReturnName(fromid));

	mysql_query(MYSQL, query, false);

	mysql_format(MYSQL, query, sizeof query, "INSERT INTO phone_list (FromNumber, ToNumber, Text, Date, DisplayFor) VALUES ('%d', '%d', '%e', '%d', '%e')",
	    phone_getPlayerNumber(fromid), phone_getPlayerNumber(toid), temp_messages[fromid][sid], gettime(), ReturnName(toid));

	mysql_query(MYSQL, query, false);

	SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Správa pre èíslo %s s textom '%s' bola úspene odoslaná!", phone_getPlayerContact(fromid, phone_getPlayerNumber(toid)), temp_messages[fromid][sid]);
	SendPlayerDo(toid, "Zvuk pípnutia mobilného telefónu.");
	SCFM(toid, COLOR_PHONE_MESSAGE, "[ PHONE ] Nová správa od èísla '%s', pre viac info poui /lastsms!", phone_getPlayerContact(toid, phone_getPlayerNumber(fromid)));

    format(temp_messages[fromid][sid], 255, "");

    if(phone_IsOut[toid] == false)
    {
	    LoadPhone(toid);

	    phone_SelectedTile[toid] 	= 0;
	    phone_Screen[toid]          = 0;
	    phone_IsOut[toid]           = true;

	    EnterInfo(toid, "~w~Telefon mozes zatvorit prikazom ~b~/phone~w~ alebo kliknutim na tlacidlo ~b~BACK~w~!~n~Kurzor otvoris prikazom ~b~/pc~w~!");

	    phone_refreshTextdraw(toid);

	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(toid, PTD_phone_MENU[toid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(toid, PTD_phone_MESSAGES[toid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(toid, PTD_phone_OPTIONS[toid][x]);

	    format(query, 1024, "New message from:~n~%s", replaceChars(phone_getPlayerContact(toid, phone_getPlayerNumber(fromid))));
		PlayerTextDrawSetString(toid, PTD_phone_EXTRA[toid][1], query);

		PlayerTextDrawShow(toid, PTD_phone_EXTRA[toid][0]);
		PlayerTextDrawShow(toid, PTD_phone_EXTRA[toid][1]);
		PlayerTextDrawShow(toid, PTD_phone_EXTRA[toid][2]);
		SetTimerEx("hidephoneextra", 3000, false, "ii", toid,1);
	}
	else
	{
	    PlayerTextDrawShow(toid, PTD_phone_EXTRA[toid][2]);
	    SetTimerEx("hidephoneextra", 3000, false, "ii", toid,0);
	}

	return 1;
}

function phone_timer_Message_Advert(fromid, sid)
{


	SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Správa pre èíslo %s s textom '%s' bola úspene odoslaná!", phone_getPlayerContact(fromid, 1444), temp_messages[fromid][sid]);

    ex_GivePlayerMoney(fromid, strlen(temp_messages[fromid][sid]) * -6);
    money_spent[fromid] += floatround(strlen(temp_messages[fromid][sid]) * 6,floatround_round);

	for(new f; f < MAX_FACTIONS; f++)
 	{
  		if(strlen(factEnum[f][fact_Name]) < 3) continue;
	    if(factEnum[f][fact_Type] == FACTION_TYPE_MEDIA) {
     		factEnum[f][fact_Cash] += (strlen(temp_messages[fromid][sid]) * 5);
       		break;
	    }
    }

	new
 		str[ 256 ];

	if(phone_getPlayerNumber(fromid) == -1)
 		format(str, 256, "[Advert] %s [%s]", temp_messages[fromid][sid], GetPlayerNameEx(fromid, NO_MASK));
	else
		format(str, 256, "[Advert] %s [%d]", temp_messages[fromid][sid], phone_getPlayerNumber(fromid));

	SendClientMessageToAll(0x5eb04cff, str);

	format(temp_messages[fromid][sid], 255, "");

	return 1;
}

function hidephoneextra(playerid, integer)
{
	PlayerTextDrawHide(playerid, PTD_phone_EXTRA[playerid][0]);
	PlayerTextDrawHide(playerid, PTD_phone_EXTRA[playerid][1]);
	PlayerTextDrawHide(playerid, PTD_phone_EXTRA[playerid][2]);

	if(integer == 1)
	{
	    phone_refreshTextdraw(playerid);
	}
	return 1;
}

function phone_timer_Message_NoCredit(toid)
{

	new
	    query[512],
		string[256];

	format(string, sizeof string, "Dobrý deò %s, oznamujeme Vám, e %s bol Vá kredit zníený na úroveò 0 USD. Môete si ho doplni vo vetkých dobrých Elektroobchodoch a General Storoch.", GetPlayerNameEx(toid, NO_MASK), getdateunix(gettime()));

	mysql_query(MYSQL, query, false);

	mysql_format(MYSQL, query, sizeof query, "INSERT INTO phone_list (FromNumber, ToNumber, Text, Date, DisplayFor) VALUES ('%d', '%d', '%e', '%d', '%e')",
	    1551, phone_getPlayerNumber(toid), string, gettime(), ReturnName(toid));

	mysql_query(MYSQL, query, false);

	if(phone_SleepMode[toid] == 0) SendPlayerDo(toid, "Zvuk pípnutia mobilného telefónu.");
	SCFM(toid, COLOR_PHONE_MESSAGE, "[ PHONE ] Nová správa od èísla '%s', pre viac info poui /lastsms!", phone_getPlayerContact(toid, 1551));

	return 1;
}

function phone_timer_Message_Failed(playerid)
{

	SendClientMessage(playerid, COLOR_PHONE_MESSAGE, "[ PHONE ] enský hlas hovorí: Správu sa nepodarilo odosla!");

	return 1;
}


ProceedDial(const playerid, number[])
{

	SendPlayerAction(playerid, "uká èislo do klávesnice a vytáèa ho ...");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	SetPlayerAttachedObject(playerid, 8, -1027, 6, 0.083, 0.024, 0.013, 0.0, -3.2);

	new
	    cisielko[256],str[256];

	format(cisielko, sizeof cisielko, "%s", str_replace("-", "", number));
	format(cisielko, sizeof cisielko, "%s", str_replace(" ", "", cisielko));

	for(new x; x < 5; x++)
		PlayerTextDrawHide(playerid, PTD_phone_MENU[playerid][x]);

	for(new x; x < 2; x++)
		PlayerTextDrawHide(playerid, PTD_phone_MESSAGES[playerid][x]);

	for(new x; x < 4; x++)
		PlayerTextDrawHide(playerid, PTD_phone_OPTIONS[playerid][x]);

	format(str,256, "Outgoing call to~n~%s", replaceChars( phone_getPlayerContact(playerid, strval(number))));
	PlayerTextDrawSetString(playerid, PTD_phone_EXTRA[playerid][1], str);

	PlayerTextDrawShow(playerid, PTD_phone_EXTRA[playerid][0]);
	PlayerTextDrawShow(playerid, PTD_phone_EXTRA[playerid][1]);

	ph_IsDialing[playerid] = true;

	PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

	if(strlen(cisielko) > 32)
	    return SetTimerEx("phone_timer_Dial_Failed", 4000 + random(6000), false, "i", playerid);

	if(strval(cisielko) == 911)
	{
	    tcisloex[playerid] = 911;
	    return SetTimerEx("phone_timer_Dial_Emergency", 4000 + random(6000), false, "i", playerid);
	}
	else if(strval(cisielko) == 222444666)
	{
        tcisloex[playerid] = 222444666;
	    return SetTimerEx("phone_timer_Dial_Swoop", 4000 + random(6000), false, "i", playerid);
	}
	else if(strval(cisielko) == 8778)
	{
        tcisloex[playerid] = 8778;
	    return SetTimerEx("phone_timer_Dial_RCN", 4000 + random(6000), false, "i", playerid);
	}
	else if(strval(cisielko) == 333)
	{
        tcisloex[playerid] = 333;
	    return SetTimerEx("phone_timer_Dial_HAWKINS", 4000 + random(6000), false, "i", playerid);
	}

	new player = phone_getPlayerFromNumber(strval( cisielko ));

	if(player == INVALID_PHONE_PLAYER || player == playerid)
		return SetTimerEx("phone_timer_Dial_Failed", 4000 + random(6000), false, "i", playerid);
	else if(phone_isPhoneTurnedOff(player) == 1 || ph_IsTalking[player] == true || ph_IsDialing[player] == true || ph_IsWaiting[player] == true)
		return SetTimerEx("phone_timer_Dial_Failed", 4000 + random(6000), false, "i", playerid);

	// CALLING PLAYER 'player' FROM 'playerid' SUCCESSFULLY

	SetTimerEx("phone_timer_Dial_Success", 1000 + random(3000), false, "ii", playerid, player);

	return 1;
}

new ph_EmergencyCall[MAX_PLAYERS][2][130];

PhoneMessage(const fromid, const text[], extraid = 0)
{

	if(ph_IsTalking[fromid] == false)
		return 0;

	if(ph_CallWith[fromid] == EMERGENCY_NUMBER)
	{

	    new
			prefix[ 12 ] = "hovorí",
			bool:beenSent = false;

	    switch(extraid)
		{
			case 1:
				format(prefix, sizeof prefix, "krièí");

			case 2:
				format(prefix, sizeof prefix, "epká");
		}

	    new o[4];
	    GetVehicleParamsCarWindows(GetPlayerVehicleID(fromid), o[0],o[1],o[2],o[3]);
	    if(IsPlayerInAnyVehicle(fromid) && o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0) {

	        new
				S_string[144];

			format(S_string, sizeof(S_string), "%s %s do telefónu: %s", GetPlayerNameEx(fromid, USE_MASK), prefix, text);

			switch(GetVehicleModel(GetPlayerVehicleID(fromid))) {
			    case 424,439,446,448,449,452,453,454,457,461,462,463,468,471,472,473,480,481,484,485,486,493,500,504,509,510,521,522,523,530,531,533,536,539,567,568,571,572,586,595: {}
			    default: {
			        foreach(new i : Player) {
			            if(GetPlayerVehicleID(fromid) == GetPlayerVehicleID(i)) {
							SendClientMessage(i,0xFFFFFFff,S_string);
						}
			        }

                    beenSent = true;
			    }
			}
	    }

		if(!beenSent)
		{
			new S_string[144];

			format(S_string, sizeof(S_string), "%s %s do telefónu: %s", GetPlayerNameEx(fromid, USE_MASK), prefix, text);

			ProxDetector(fromid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, S_string, 1.6, true);

			if(GetPlayerVirtualWorld(fromid) != 0)
			{
				format(S_string, sizeof(S_string), "%s", text);
				BubbleChat(fromid, COLOR_LOCAL_CHAT_TEXT, S_string);
			}
		}


	    if(strfind(text, "pol", true) != -1 || strfind(text, "er", true) != -1 || strfind(text, "her", true) != -1 || strfind(text, "sher", true) != -1 || strfind(text, "ser", true) != -1)
	    {
	        ph_CallWith[fromid] = EMERGENCY_POLICE;

	        SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] *PÍP*");
	        SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Dobrý deò, opíte mi vau situáciu, prosím.");

	        ph_Emergency[fromid] = 0;
	    }
	    else if(strfind(text, "has", true) != -1 || strfind(text, "zac", true) != -1 || strfind(text, "zác", true) != -1)
	    {
	        ph_CallWith[fromid] = EMERGENCY_FIRE;

	        SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] *PÍP*");
	        SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátorka: Dobrý deò, opíte mi prosím pekne vau situáciu.");

	        ph_Emergency[fromid] = 0;
	    }
	    else
	    {
	        SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Prepáète, ale nerozumiem vám.");
	    }

	    return 0;
	}

	if(ph_CallWith[fromid] == EMERGENCY_POLICE)
	{

	    new
			prefix[ 12 ] = "hovorí";

	    switch(extraid)
		{
			case 1:
				format(prefix, sizeof prefix, "krièí");

			case 2:
				format(prefix, sizeof prefix, "epká");
		}


	    new o[4];
	    GetVehicleParamsCarWindows(GetPlayerVehicleID(fromid), o[0],o[1],o[2],o[3]);
	    if(IsPlayerInAnyVehicle(fromid) && o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0) {

	        new S_string[144];
			format(S_string, sizeof(S_string), "%s %s do telefónu: %s", GetPlayerNameEx(fromid, USE_MASK), prefix, text);

			switch(GetVehicleModel(GetPlayerVehicleID(fromid))) {
			    case 424,439,446,448,449,452,453,454,457,461,462,463,468,471,472,473,480,481,484,485,486,493,500,504,509,510,521,522,523,530,531,533,536,539,567,568,571,572,586,595: {}
			    default: {
			        foreach(new i : Player) {
			            if(GetPlayerVehicleID(fromid) == GetPlayerVehicleID(i)) {
							SendClientMessage(i,0xFFFFFFff,S_string);
						}
			        }

			        if(ph_Emergency[fromid] < 2)
						format(ph_EmergencyCall[fromid][ph_Emergency[fromid]], 130, text);

					ph_Emergency[fromid] ++;

					if(ph_Emergency[fromid] == 1)
					    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Rozumiem, kde sa nachádzate?");
					else if(ph_Emergency[fromid] == 2)
					    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Poprosím Vae meno.");

			        if(ph_Emergency[fromid] == 3)
			        {
			            SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Dobre, vydrte, oznámim to kolegom.");
			            SetPlayerSpecialAction(fromid, SPECIAL_ACTION_STOPUSECELLPHONE);
						RemovePlayerAttachedObject(fromid, 8);

						ph_IsTalking[fromid] = false;
						ph_IsDialing[fromid] = false;
						ph_IsWaiting[fromid] = false;
						ph_CanAccept[fromid] = false;

						ph_IsCaller[fromid] = false;
						ph_CallWith[fromid] = -1;

						SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk poloenia**");

						new
							query[512];

						mysql_format(MYSQL, query, sizeof query, "INSERT INTO gm_calls (Caller, Situation, Location, FromNumber, Date, FactionType, Handled) VALUES ('%e', '%e', '%e', '%d', '%d', '%d', '0')",
							text, ph_EmergencyCall[fromid][0], ph_EmergencyCall[fromid][1], phone_getPlayerNumber(fromid), gettime(), FACTION_TYPE_LAW);

						mysql_query(MYSQL, query, false);



						foreach( new i : Player )
						{
						    if(GetPlayerFactionType(i) != FACTION_TYPE_LAW)
						        continue;

							if(!IsPlayerWorking(i))
							    continue;

							SCFM(i, COLOR_RADIO, "[ Radio - 9112 MHz ] Dispeèer: Nejaké jednotky k dispozícii na telefonát v lokácii '%s'?", ph_EmergencyCall[fromid][1]);
						}
			        }

			        return 0;
			    }
			}
	    }

	    new S_string[144];

		format(S_string, sizeof(S_string), "%s %s do telefónu: %s", GetPlayerNameEx(fromid, USE_MASK), prefix, text);

		ProxDetector(fromid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, S_string, 1.6, true);

        if(GetPlayerVirtualWorld(fromid) != 0)
		{
			format(S_string, sizeof(S_string), "%s", text);
			BubbleChat(fromid, COLOR_LOCAL_CHAT_TEXT, S_string);
		}

		if(ph_Emergency[fromid] < 2)
			format(ph_EmergencyCall[fromid][ph_Emergency[fromid]], 130, text);
		else
		{
		    new
				query[512];

			mysql_format(MYSQL, query, sizeof query, "INSERT INTO gm_calls (Caller, Situation, Location, FromNumber, Date, FactionType, Handled) VALUES ('%e', '%e', '%e', '%d', '%d', '%d', '0')",
				text, ph_EmergencyCall[fromid][0], ph_EmergencyCall[fromid][1], phone_getPlayerNumber(fromid), gettime(), FACTION_TYPE_LAW);

			mysql_query(MYSQL, query, false);

			foreach( new i : Player )
			{
			    if(GetPlayerFactionType(i) != FACTION_TYPE_LAW)
			        continue;

				if(!IsPlayerWorking(i))
				    continue;

				SCFM(i, COLOR_RADIO, "[ Radio - 9112 MHz ] Dispeèer: Nejaké jednotky k dispozícii na telefonát v lokácii '%s'?", ph_EmergencyCall[fromid][1]);
			}
		}

		ph_Emergency[fromid] ++;

		if(ph_Emergency[fromid] == 1)
		    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Rozumiem, kde sa nachádzate?");
		else if(ph_Emergency[fromid] == 2)
		    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Poprosím Vae meno.");

        if(ph_Emergency[fromid] == 3)
		{
  			SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Dobre, vydrte, oznámim to kolegom.");
     		SetPlayerSpecialAction(fromid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(fromid, 8);

			ph_IsTalking[fromid] = false;
			ph_IsDialing[fromid] = false;
			ph_IsWaiting[fromid] = false;
			ph_CanAccept[fromid] = false;

			ph_IsCaller[fromid] = false;
			ph_CallWith[fromid] = -1;

			SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk poloenia**");
   		}

	    return 0;
	}

   	if(ph_CallWith[fromid] == EMERGENCY_FIRE)
	{

	    new
			prefix[ 12 ];

	    switch(extraid)
		{
			case 1:
				format(prefix, sizeof prefix, "krièí");

			case 2:
				format(prefix, sizeof prefix, "epká");
		}


	    new o[4];
	    GetVehicleParamsCarWindows(GetPlayerVehicleID(fromid), o[0],o[1],o[2],o[3]);
	    if(IsPlayerInAnyVehicle(fromid) && o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0) {

	        new S_string[144];
			format(S_string, sizeof(S_string), "%s %s do telefónu: %s", GetPlayerNameEx(fromid, USE_MASK), prefix, text);

			switch(GetVehicleModel(GetPlayerVehicleID(fromid))) {
			    case 424,439,446,448,449,452,453,454,457,461,462,463,468,471,472,473,480,481,484,485,486,493,500,504,509,510,521,522,523,530,531,533,536,539,567,568,571,572,586,595: {}
			    default: {
			        foreach(new i : Player) {
			            if(GetPlayerVehicleID(fromid) == GetPlayerVehicleID(i)) {
							SendClientMessage(i,0xFFFFFFff,S_string);
						}
			        }

			        if(ph_Emergency[fromid] < 2)
						format(ph_EmergencyCall[fromid][ph_Emergency[fromid]], 130, text);
					else
					{

					    new
							query[512];

						mysql_format(MYSQL, query, sizeof query, "INSERT INTO gm_calls (Caller, Situation, Location, FromNumber, Date, FactionType, Handled) VALUES ('%e', '%e', '%e', '%d', '%d', '%d', '0')",
							text, ph_EmergencyCall[fromid][0], ph_EmergencyCall[fromid][1], phone_getPlayerNumber(fromid), gettime(), FACTION_TYPE_FIRE);

						mysql_query(MYSQL, query, false);

						foreach( new i : Player )
						{
						    if(GetPlayerFactionType(i) != FACTION_TYPE_FIRE)
						        continue;

							if(!IsPlayerWorking(i))
							    continue;

                            /*SCFM(i, COLOR_ADMINCMD, "|_________________________________________| NOVÝ TELEFONÁT |_________________________________________|");
					  		SCFM(i, COLOR_ADMINCMD, "|");
					  		SCFM(i, COLOR_ADMINCMD, "| Telefonát od: {ffffff}%s (PH.: %d)", text, phone_getPlayerNumber(fromid));
					  		SCFM(i, COLOR_ADMINCMD, "| Zadaná lokácia: {ffffff}%s", ph_EmergencyCall[fromid][1]);
					  		SCFM(i, COLOR_ADMINCMD, "| Situácia: {ffffff}%s", ph_EmergencyCall[fromid][0]);
					  		SCFM(i, COLOR_ADMINCMD, "|____________________________________________________________________________________________________|");*/

					  		SCFM(i, COLOR_RADIO, "[ Radio - 9112 MHz ] Dispeèer: Nejaké jednotky k dispozícii na telefonát v lokácii '%s'?", ph_EmergencyCall[fromid][1]);
						}
					}

					ph_Emergency[fromid] ++;

					if(ph_Emergency[fromid] == 1)
					    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátorka: Rozumiem, kde sa nachádzate?");
					else if(ph_Emergency[fromid] == 2)
					    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátorka: Poprosím Vae meno.");

			        if(ph_Emergency[fromid] == 3)
			        {
			            SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátorka: Dobre, vydrte, oznámim to kolegom.");
			            SetPlayerSpecialAction(fromid, SPECIAL_ACTION_STOPUSECELLPHONE);
						RemovePlayerAttachedObject(fromid, 8);

						ph_IsTalking[fromid] = false;
						ph_IsDialing[fromid] = false;
						ph_IsWaiting[fromid] = false;
						ph_CanAccept[fromid] = false;

						ph_IsCaller[fromid] = false;
						ph_CallWith[fromid] = -1;

						SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk poloenia**");
			        }

			        return 0;
			    }
			}
	    }

		new S_string[144];

		format(S_string, sizeof(S_string), "%s %s do telefónu: %s", GetPlayerNameEx(fromid, USE_MASK), prefix, text);

		ProxDetector(fromid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, S_string, 1.6, true);

        if(GetPlayerVirtualWorld(fromid) != 0)
		{
			format(S_string, sizeof(S_string), "%s", text);
			BubbleChat(fromid, COLOR_LOCAL_CHAT_TEXT, S_string);
		}

		if(ph_Emergency[fromid] < 2)
			format(ph_EmergencyCall[fromid][ph_Emergency[fromid]], 130, text);
		else
		{

		    new
				query[512];

			mysql_format(MYSQL, query, sizeof query, "INSERT INTO gm_calls (Caller, Situation, Location, FromNumber, Date, FactionType, Handled) VALUES ('%e', '%e', '%e', '%d', '%d', '%d', '0')",
				text, ph_EmergencyCall[fromid][0], ph_EmergencyCall[fromid][1], phone_getPlayerNumber(fromid), gettime(), FACTION_TYPE_FIRE);

			mysql_query(MYSQL, query, false);

		    foreach( new i : Player )
			{
   				if(GetPlayerFactionType(i) != FACTION_TYPE_FIRE)
			        continue;

				if(!IsPlayerWorking(i))
    				continue;

				/*SCFM(i, COLOR_ADMINCMD, "|_________________________________________| NOVÝ TELEFONÁT |_________________________________________|");
  				SCFM(i, COLOR_ADMINCMD, "|");
		  		SCFM(i, COLOR_ADMINCMD, "| Telefonát od: {ffffff}%s (PH.: %d)", text, phone_getPlayerNumber(fromid));
		  		SCFM(i, COLOR_ADMINCMD, "| Zadaná lokácia: {ffffff}%s", ph_EmergencyCall[fromid][1]);
		  		SCFM(i, COLOR_ADMINCMD, "| Situácia: {ffffff}%s", ph_EmergencyCall[fromid][0]);
		  		SCFM(i, COLOR_ADMINCMD, "|____________________________________________________________________________________________________|");*/

		  		SCFM(i, COLOR_RADIO, "[ Radio - 9112 MHz ] Dispeèer: Nejaké jednotky k dispozícii na telefonát v lokácii '%s'?", ph_EmergencyCall[fromid][1]);
			}
		}

		ph_Emergency[fromid] ++;

		if(ph_Emergency[fromid] == 1)
		    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Rozumiem, kde sa nachádzate?");
		else if(ph_Emergency[fromid] == 2)
		    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Poprosím Vae meno.");

        if(ph_Emergency[fromid] == 3)
        {
        	SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Dobre, vyèkajte prosím.");
	        SetPlayerSpecialAction(fromid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(fromid, 8);

			ph_IsTalking[fromid] = false;
			ph_IsDialing[fromid] = false;
			ph_IsWaiting[fromid] = false;
			ph_CanAccept[fromid] = false;

			ph_IsCaller[fromid] = false;
			ph_CallWith[fromid] = -1;

			SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk poloenia**");
   		}

	    return 0;
	}

	if(ph_CallWith[fromid] == EMERGENCY_TAXI)
	{

	    new
			prefix[ 12 ] = "hovorí";

	    switch(extraid)
		{
			case 1:
				format(prefix, sizeof prefix, "krièí");

			case 2:
				format(prefix, sizeof prefix, "epká");
		}


	    new o[4];
	    GetVehicleParamsCarWindows(GetPlayerVehicleID(fromid), o[0],o[1],o[2],o[3]);
	    if(IsPlayerInAnyVehicle(fromid) && o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0) {

	        new S_string[144];
			format(S_string, sizeof(S_string), "%s %s do telefónu: %s", GetPlayerNameEx(fromid, USE_MASK), prefix, text);

			switch(GetVehicleModel(GetPlayerVehicleID(fromid))) {
			    case 424,439,446,448,449,452,453,454,457,461,462,463,468,471,472,473,480,481,484,485,486,493,500,504,509,510,521,522,523,530,531,533,536,539,567,568,571,572,586,595: {}
			    default: {
			        foreach(new i : Player) {
			            if(GetPlayerVehicleID(fromid) == GetPlayerVehicleID(i)) {
							SendClientMessage(i,0xFFFFFFff,S_string);
						}
			        }

			        if(ph_Emergency[fromid] < 2)
						format(ph_EmergencyCall[fromid][ph_Emergency[fromid]], 130, text);
					else
					{

					    new bool:isOnline = false;
						foreach( new i : Player )
						{
						    if(GetPlayerFactionType(i) != FACTION_TYPE_TAXI)
						        continue;

							if(!IsPlayerWorking(i))
							    continue;

							isOnline = true;

							SCFM(i, 0x73d6dfff, "|_________________________________________| NOVÝ TELEFONÁT |_________________________________________|");
			  				SCFM(i, 0x73d6dfff, "|");
					  		SCFM(i, 0x73d6dfff, "| Telefonát od: {ffffff}%s (PH.: %d)", text, phone_getPlayerNumber(fromid));
					  		SCFM(i, 0x73d6dfff, "| Aktuálna lokácia: {ffffff}%s", ph_EmergencyCall[fromid][0]);
					  		SCFM(i, 0x73d6dfff, "| Dovoz do(na): {ffffff}%s", ph_EmergencyCall[fromid][1]);
					  		SCFM(i, 0x73d6dfff, "|____________________________________________________________________________________________________|");
						}

						if(!isOnline)
						{
						    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Rozumiem, bude to ale trva o nieèo dlhie ako zvyèajne.");
						    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: (( iadny èlenovia taxi sluby nie sú online, je mi ¾úto! ))");
						}
						else
						{
						    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Dobre, oznámim to kolegom!");
						}
					}

					ph_Emergency[fromid] ++;

					if(ph_Emergency[fromid] == 1)
					    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Okej, kam potrebujete ís?");
					else if(ph_Emergency[fromid] == 2)
					    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Vae meno môem dosta, prosím?");

			        if(ph_Emergency[fromid] == 3)
					{
			            SetPlayerSpecialAction(fromid, SPECIAL_ACTION_STOPUSECELLPHONE);
						RemovePlayerAttachedObject(fromid, 8);

						ph_IsTalking[fromid] = false;
						ph_IsDialing[fromid] = false;
						ph_IsWaiting[fromid] = false;
						ph_CanAccept[fromid] = false;

						ph_IsCaller[fromid] = false;
						ph_CallWith[fromid] = -1;

						SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk poloenia**");
			        }

			        return 0;
			    }
			}
	    }

	    new S_string[144];

		format(S_string, sizeof(S_string), "%s %s do telefónu: %s", GetPlayerNameEx(fromid, USE_MASK), prefix, text);

		ProxDetector(fromid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, S_string, 1.6, true);

        if(GetPlayerVirtualWorld(fromid) != 0)
		{
			format(S_string, sizeof(S_string), "%s", text);
			BubbleChat(fromid, COLOR_LOCAL_CHAT_TEXT, S_string);
		}

		if(ph_Emergency[fromid] < 2)
			format(ph_EmergencyCall[fromid][ph_Emergency[fromid]], 130, text);
		else
		{
		    new bool:isOnline = false;
			foreach( new i : Player )
			{
   				if(GetPlayerFactionType(i) != FACTION_TYPE_TAXI)
			        continue;

				if(!IsPlayerWorking(i))
    				continue;

				isOnline = true;

				SCFM(i, 0x73d6dfff, "|_________________________________________| NOVÝ TELEFONÁT |_________________________________________|");
				SCFM(i, 0x73d6dfff, "|");
  				SCFM(i, 0x73d6dfff, "| Telefonát od: {ffffff}%s (PH.: %d)", text, phone_getPlayerNumber(fromid));
		  		SCFM(i, 0x73d6dfff, "| Aktuálna lokácia: {ffffff}%s", ph_EmergencyCall[fromid][0]);
		  		SCFM(i, 0x73d6dfff, "| Dovoz do(na): {ffffff}%s", ph_EmergencyCall[fromid][1]);
		  		SCFM(i, 0x73d6dfff, "|____________________________________________________________________________________________________|");
			}

			if(!isOnline)
			{
   				SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Rozumiem, bude to ale trva o nieèo dlhie ako zvyèajne.");
			    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: (( iadny èlenovia taxi sluby nie sú online, je mi ¾úto! ))");
			}
			else
			{
   				SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Dobre, oznámim to kolegom!");
			}
		}

		ph_Emergency[fromid] ++;

		if(ph_Emergency[fromid] == 1)
  			SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Okej, kam potrebujete ís?");
		else if(ph_Emergency[fromid] == 2)
  			SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Vae meno môem dosta, prosím?");

        if(ph_Emergency[fromid] == 3)
		{
     		SetPlayerSpecialAction(fromid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(fromid, 8);

			ph_IsTalking[fromid] = false;
			ph_IsDialing[fromid] = false;
			ph_IsWaiting[fromid] = false;
			ph_CanAccept[fromid] = false;

			ph_IsCaller[fromid] = false;
			ph_CallWith[fromid] = -1;

			SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk poloenia**");
   		}

	    return 0;
	}

	if(ph_CallWith[fromid] == EMERGENCY_RCN)
	{

	    new
			prefix[ 12 ] = "hovorí";

	    switch(extraid)
		{
			case 1:
				format(prefix, sizeof prefix, "krièí");

			case 2:
				format(prefix, sizeof prefix, "epká");
		}


	    new o[4];
	    GetVehicleParamsCarWindows(GetPlayerVehicleID(fromid), o[0],o[1],o[2],o[3]);
	    if(IsPlayerInAnyVehicle(fromid) && o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0) {

	        new S_string[144];
			format(S_string, sizeof(S_string), "%s %s do telefónu: %s", GetPlayerNameEx(fromid, USE_MASK), prefix, text);

			switch(GetVehicleModel(GetPlayerVehicleID(fromid))) {
			    case 424,439,446,448,449,452,453,454,457,461,462,463,468,471,472,473,480,481,484,485,486,493,500,504,509,510,521,522,523,530,531,533,536,539,567,568,571,572,586,595: {}
			    default: {
			        foreach(new i : Player) {
			            if(GetPlayerVehicleID(fromid) == GetPlayerVehicleID(i)) {
							SendClientMessage(i,0xFFFFFFff,S_string);
						}
			        }

			        if(ph_Emergency[fromid] < 1)
						format(ph_EmergencyCall[fromid][ph_Emergency[fromid]], 130, text);
					else
					{

					    new bool:isOnline = false;
						foreach( new i : Player )
						{
						    if(GetPlayerFactionType(i) != FACTION_TYPE_MEDIA)
						        continue;

							if(!IsPlayerWorking(i))
							    continue;

							isOnline = true;

							SCFM(i, 0x73d6dfff, "|_________________________________________| NOVÝ TELEFONÁT |_________________________________________|");
			  				SCFM(i, 0x73d6dfff, "|");
					  		SCFM(i, 0x73d6dfff, "| Telefonát od: {ffffff}%s (PH.: %d)", text, phone_getPlayerNumber(fromid));
					  		SCFM(i, 0x73d6dfff, "| Informácie: {ffffff}%s", ph_EmergencyCall[fromid][0]);
					  		SCFM(i, 0x73d6dfff, "|____________________________________________________________________________________________________|");
						}

						if(!isOnline)
						{
						    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátorka: Ïakujeme za informácie!");
						    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátorka: (( iadny èlenovia LANN nie sú online, je mi ¾úto! ))");
						}
						else
						{
						    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátorka: Ïakujeme za informácie!");
						}
					}

					ph_Emergency[fromid] ++;

					if(ph_Emergency[fromid] == 1)
					    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátorka: Vae meno mi prosím poviete?");

			        if(ph_Emergency[fromid] == 2)
					{
			            SetPlayerSpecialAction(fromid, SPECIAL_ACTION_STOPUSECELLPHONE);
						RemovePlayerAttachedObject(fromid, 8);

						ph_IsTalking[fromid] = false;
						ph_IsDialing[fromid] = false;
						ph_IsWaiting[fromid] = false;
						ph_CanAccept[fromid] = false;

						ph_IsCaller[fromid] = false;
						ph_CallWith[fromid] = -1;

						SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk poloenia**");
			        }

			        return 0;
			    }
			}
	    }

	    new S_string[144];

		format(S_string, sizeof(S_string), "%s %s do telefónu: %s", GetPlayerNameEx(fromid, USE_MASK), prefix, text);

		ProxDetector(fromid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, S_string, 1.6, true);

        if(GetPlayerVirtualWorld(fromid) != 0)
		{
			format(S_string, sizeof(S_string), "%s", text);
			BubbleChat(fromid, COLOR_LOCAL_CHAT_TEXT, S_string);
		}

		if(ph_Emergency[fromid] < 1)
			format(ph_EmergencyCall[fromid][ph_Emergency[fromid]], 130, text);
		else
		{
		    new bool:isOnline = false;
			foreach( new i : Player )
			{
   				if(GetPlayerFactionType(i) != FACTION_TYPE_MEDIA)
			        continue;

				if(!IsPlayerWorking(i))
    				continue;

				isOnline = true;

				SCFM(i, 0x73d6dfff, "|_________________________________________| NOVÝ TELEFONÁT |_________________________________________|");
				SCFM(i, 0x73d6dfff, "|");
  				SCFM(i, 0x73d6dfff, "| Telefonát od: {ffffff}%s (PH.: %d)", text, phone_getPlayerNumber(fromid));
		  		SCFM(i, 0x73d6dfff, "| Informácie: {ffffff}%s", ph_EmergencyCall[fromid][0]);
		  		SCFM(i, 0x73d6dfff, "|____________________________________________________________________________________________________|");
			}

			if(!isOnline)
			{
   				SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátorka: Ïakujeme za informácie!");
			    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: (( iadny èlenovia LANN nie sú online, je mi ¾úto! ))");
			}
			else
			{
   				SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátorka: Ïakujeme za informácie!");
			}
		}

		ph_Emergency[fromid] ++;

		if(ph_Emergency[fromid] == 1)
  			SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátorka: Vae meno mi poviete, prosím?");

        if(ph_Emergency[fromid] == 2)
		{
     		SetPlayerSpecialAction(fromid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(fromid, 8);

			ph_IsTalking[fromid] = false;
			ph_IsDialing[fromid] = false;
			ph_IsWaiting[fromid] = false;
			ph_CanAccept[fromid] = false;

			ph_IsCaller[fromid] = false;
			ph_CallWith[fromid] = -1;

			SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk poloenia**");
   		}

	    return 0;
	}

	if(ph_CallWith[fromid] == EMERGENCY_HAWKINS)
	{

	    new
			prefix[ 12 ] = "hovorí";

	    switch(extraid)
		{
			case 1:
				format(prefix, sizeof prefix, "kricí");

			case 2:
				format(prefix, sizeof prefix, "epká");
		}


	    new o[4];
	    GetVehicleParamsCarWindows(GetPlayerVehicleID(fromid), o[0],o[1],o[2],o[3]);
	    if(IsPlayerInAnyVehicle(fromid) && o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0) {

	        new S_string[144];
			format(S_string, sizeof(S_string), "%s %s do telefónu: %s", GetPlayerNameEx(fromid, USE_MASK), prefix, text);

			switch(GetVehicleModel(GetPlayerVehicleID(fromid))) {
			    case 424,439,446,448,449,452,453,454,457,461,462,463,468,471,472,473,480,481,484,485,486,493,500,504,509,510,521,522,523,530,531,533,536,539,567,568,571,572,586,595: {}
			    default: {
			        foreach(new i : Player) {
			            if(GetPlayerVehicleID(fromid) == GetPlayerVehicleID(i)) {
							SendClientMessage(i,0xFFFFFFff,S_string);
						}
			        }

			        if(ph_Emergency[fromid] < 1)
						format(ph_EmergencyCall[fromid][ph_Emergency[fromid]], 130, text);
					else
					{

					    new bool:isOnline = false;
						foreach( new i : Player )
						{
						    if(GetPlayerFactionType(i) != FACTION_TYPE_MECHANIC)
						        continue;

							isOnline = true;

							SCFM(i, 0x73d6dfff, "|_________________________________________| NOVÝ TELEFONÁT |_________________________________________|");
			  				SCFM(i, 0x73d6dfff, "|");
					  		SCFM(i, 0x73d6dfff, "| Telefonát od: {ffffff}%s (PH.: %d)", text, phone_getPlayerNumber(fromid));
					  		SCFM(i, 0x73d6dfff, "| Informácie: {ffffff}%s", ph_EmergencyCall[fromid][0]);
					  		SCFM(i, 0x73d6dfff, "|____________________________________________________________________________________________________|");
						}

						if(!isOnline)
						{
						    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Okej, poviem to naim.");
						    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: (( iadny mechanici nie sú online, je mi lúto! ))");
						}
						else
						{
						    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Okej, poviem to naim!");
						}
					}

					ph_Emergency[fromid] ++;

					if(ph_Emergency[fromid] == 1)
					    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Povedz mi meno ete prosím ta.");

			        if(ph_Emergency[fromid] == 2)
					{
			            SetPlayerSpecialAction(fromid, SPECIAL_ACTION_STOPUSECELLPHONE);
						RemovePlayerAttachedObject(fromid, 8);

						ph_IsTalking[fromid] = false;
						ph_IsDialing[fromid] = false;
						ph_IsWaiting[fromid] = false;
						ph_CanAccept[fromid] = false;

						ph_IsCaller[fromid] = false;
						ph_CallWith[fromid] = -1;

						SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk poloenia**");
			        }

			        return 0;
			    }
			}
	    }

	    new S_string[144];

		format(S_string, sizeof(S_string), "%s %s do telefónu: %s", GetPlayerNameEx(fromid, USE_MASK), prefix, text);

		ProxDetector(fromid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, S_string, 1.6, true);

        if(GetPlayerVirtualWorld(fromid) != 0)
		{
			format(S_string, sizeof(S_string), "%s", text);
			BubbleChat(fromid, COLOR_LOCAL_CHAT_TEXT, S_string);
		}

		if(ph_Emergency[fromid] < 1)
			format(ph_EmergencyCall[fromid][ph_Emergency[fromid]], 130, text);
		else
		{
		    new bool:isOnline = false;
			foreach( new i : Player )
			{
   				if(GetPlayerFactionType(i) != FACTION_TYPE_MECHANIC)
			        continue;

				if(!IsPlayerWorking(i))
    				continue;

				isOnline = true;

				SCFM(i, 0x73d6dfff, "|_________________________________________| NOVÝ TELEFONÁT |_________________________________________|");
				SCFM(i, 0x73d6dfff, "|");
  				SCFM(i, 0x73d6dfff, "| Telefonát od: {ffffff}%s (PH.: %d)", text, phone_getPlayerNumber(fromid));
		  		SCFM(i, 0x73d6dfff, "| Informácie: {ffffff}%s", ph_EmergencyCall[fromid][0]);
		  		SCFM(i, 0x73d6dfff, "|____________________________________________________________________________________________________|");
			}

			if(!isOnline)
			{
   				SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Odkáem naim.");
			    SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: (( iadny mechanici nie sú online, je mi lúto! ))");
			}
			else
			{
   				SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Odkáem naim!");
			}
		}

		ph_Emergency[fromid] ++;

		if(ph_Emergency[fromid] == 1)
  			SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] Operátor: Ete mi nadiktuj tvoje meno prosím ta.");

        if(ph_Emergency[fromid] == 2)
		{
     		SetPlayerSpecialAction(fromid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(fromid, 8);

			ph_IsTalking[fromid] = false;
			ph_IsDialing[fromid] = false;
			ph_IsWaiting[fromid] = false;
			ph_CanAccept[fromid] = false;

			ph_IsCaller[fromid] = false;
			ph_CallWith[fromid] = -1;

			SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk poloenia**");
   		}

	    return 0;
	}

	new
		toid = ph_CallWith[fromid],
		prefix[8] = "hovorí",
		voice[16];

	switch(GetPlayerGender(fromid))
	{
		case 1:
			format(voice, sizeof voice, "Muský");

		default:
			format(voice, sizeof voice, "enský");
	}

	switch(extraid)
	{
		case 1:
			format(prefix, sizeof prefix, "krièí");

		case 2:
			format(prefix, sizeof prefix, "epká");
	}


	new o[4];
    GetVehicleParamsCarWindows(GetPlayerVehicleID(fromid), o[0],o[1],o[2],o[3]);
    if(IsPlayerInAnyVehicle(fromid) && o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0) {

        SCFM(toid, COLOR_PHONE_MESSAGE, "[ PHONE ] %s hlas %s: %s", voice, prefix, text);

        new S_string[144];
		format(S_string, sizeof(S_string), "%s %s do telefónu: %s", GetPlayerNameEx(fromid, USE_MASK), prefix, text);

		switch(GetVehicleModel(GetPlayerVehicleID(fromid))) {
		    case 424,439,446,448,449,452,453,454,457,461,462,463,468,471,472,473,480,481,484,485,486,493,500,504,509,510,521,522,523,530,531,533,536,539,567,568,571,572,586,595: {}
		    default: {
		        foreach(new i : Player) {
		            if(GetPlayerVehicleID(fromid) == GetPlayerVehicleID(i)) {
						SendClientMessage(i,0xFFFFFFff,S_string);
					}
		        }
		        return 0;
		    }
		}
    }

	new S_string[144];

	format(S_string, sizeof(S_string), "%s %s do telefónu: %s", GetPlayerNameEx(fromid, USE_MASK), prefix, text);

	ProxDetector(fromid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, S_string, 1.6, true);

    if(GetPlayerVirtualWorld(fromid) != 0)
	{
		format(S_string, sizeof(S_string), "%s", text);
		BubbleChat(fromid, COLOR_LOCAL_CHAT_TEXT, S_string);
	}

	SCFM(toid, COLOR_PHONE_MESSAGE, "[ PHONE ] %s hlas %s: %s", voice, prefix, text);

	return 0;
}

ShowPlayerPhoneSendMsg(playerid)
{

	ShowPlayerDialog(playerid, did_phone_msg_1, DIALOG_STYLE_INPUT, "TELEFÓN - NOVÁ SPRÁVA",
	    "{ffffff}> Zadajte prosím telefónne èíslo na ktoré chcete správu odosla!\n\n(1444 - podanie inzerátu, 6$/znak)", "ÏALEJ", "ZRUI");

	return 1;
}

ShowPlayerPhoneSendMsgText(playerid)
{
    ShowPlayerDialog(playerid, did_phone_msg_2, DIALOG_STYLE_INPUT, "TELEFÓN - NOVÁ SPRÁVA",
	    "{ffffff}> Zadajte prosím text, aký chcete na èíslo odosla!", "ODOSLA", "SPA");

	return 1;
}

ShowPlayerPhoneMessages(playerid)
{
	new
	    query[256],
	    Cache:c,

		finalString[ 4096 ] = "Od/Pre\tDátum\n",
		tString[ 256 ];

	mysql_format(MYSQL, query, 256, "SELECT * FROM phone_list WHERE DisplayFor = '%e' AND (FromNumber = '%d' OR ToNumber = '%d') ORDER BY Date DESC LIMIT 50",
		ReturnName(playerid), phone_getPlayerNumber(playerid), phone_getPlayerNumber(playerid));

	c = mysql_query(MYSQL, query);

	for ( new i; i < cache_num_rows(); i++)
	{

	    new
	        to,
	        from,
	        text[256],
	        date;

        cache_get_value_name_int(i, "ToNumber", to);
        cache_get_value_name_int(i, "FromNumber", from);
        cache_get_value_name(i, "Text", text);
        cache_get_value_name_int(i, "Date", date);

        if(to == phone_getPlayerNumber(playerid))
        	format(tString, 256, "Od %s\t%s\n", phone_getPlayerContact(playerid, from), getdateunix(date));
		else
			format(tString, 256, "Pre %s\t%s\n", phone_getPlayerContact(playerid, to), getdateunix(date));

	    strcat(finalString, tString);

	}

	cache_delete(c);

	ShowPlayerDialog(playerid, did_phone_last_msg, DIALOG_STYLE_TABLIST_HEADERS, "TELEFÓN - SPRÁVY", finalString, "DETAIL", "SPA");

	return 1;
}

ShowPlayerPhoneContacts(playerid)
{
    new
	    query[256],
	    Cache:c,

		finalString[ 4096 ] = "Kontakt\tÈíslo\nVytvori nový kontakt\n",
		tString[ 128 ];

	mysql_format(MYSQL, query, 256, "SELECT * FROM phone_contacts WHERE Username = '%e' ORDER BY ContactName LIMIT 30",
		ReturnName(playerid));

	c = mysql_query(MYSQL, query);

	for ( new i; i < cache_num_rows(); i++)
	{

	    new
			contactname[64],
			contactnumber[15];

        cache_get_value_name(i, "ContactName", contactname);
        cache_get_value_name(i, "ContactNumber", contactnumber);

		format(tString, 128, "%s\t%s\n", contactname, contactnumber);

	    strcat(finalString, tString);
	}

	cache_delete(c);

	ShowPlayerDialog(playerid, did_phone_contacts, DIALOG_STYLE_TABLIST_HEADERS, "TELEFÓN - KONTAKTY", finalString, "MENU", "SPA");

	return 1;
}

SendPlayerAction(playerid, text[])
{
    new str[256];
	format(str,256,"* %s %s",GetPlayerNameEx(playerid, USE_MASK), text);
   	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,str);

   	return 1;
}

SendPlayerDo(playerid, text[])
{
    new str[256];
	format(str,256,"* %s (( %s ))", text, GetPlayerNameEx(playerid, USE_MASK));
   	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,str);

   	return 1;
}

new legalmods[48][22] = {
		{400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
		{404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
		{415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
		{439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
		{477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
		{491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
		{492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
		{500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
		{517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
		{518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
		{527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
		{534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
		{535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
		{536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
		{540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
		{542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
		{547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
		{550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
		{551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
		{558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
		{559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
		{560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
		{561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
		{562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
		{565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
		{567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
		{575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
		{600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
		{603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};

iswheelmodel(modelid) {

	new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};

	for( new I; I < sizeof wheelmodels; I++) {

		if (modelid == wheelmodels[I])
			return true;

	}

	return false;
}

IllegalCarNitroIde(carmodel) {

	new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };

	for( new I; I < sizeof illegalvehs; I++) {

		if (carmodel == illegalvehs[I])
			return true;

	}

	return false;
}

// assumes player is in a car - make sure it is.
illegal_nos_vehicle(PlayerID) {

	new carid = GetPlayerVehicleID(PlayerID);
	new playercarmodel = GetVehicleModel(carid);

	return IllegalCarNitroIde(playercarmodel);

}

stock islegalcarmod(vehicleide, componentid) {

	new modok = false;

	// stereo, hydraulics & nos (1x 2x 3x) are special.
	if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) {

		new nosblocker = IllegalCarNitroIde(vehicleide);

		if (!nosblocker)
			modok = true;

	} else {

		// check if the specified model CAN use this particular mod.
		for( new I; I < sizeof legalmods; I++) {

			if (legalmods[I][0] == vehicleide) { // first is car IDE

				for(new J = 1; J < 22; J++) { // start with 1
					if (legalmods[I][J] == componentid)
						modok = true;
				}

			}

		}

	}

	return modok;
}

RefreshCarRadio(vehicleid)
{

	foreach ( new i : Player )
	{
	    if(!IsPlayerInAnyVehicle(i))
	        continue;

		if(GetPlayerVehicleID(i) != vehicleid)
		    continue;

		if(strlen(vEnum[vehicleid][v_RadioURL]) > 2)
		    PlayAudioStreamForPlayerEx(i, vEnum[vehicleid][v_RadioURL]);
		else
		    StopAudioStreamForPlayerEx(i);
	}

	return 1;

}

sys_GetVehicleColor(vehicleid, &color1, &color2)
{
	color1 = vEnum[vehicleid][v_Color_1];
	color2 = vEnum[vehicleid][v_Color_2];

	return 1;
}


new pvehinv[MAX_PLAYERS];

ShowPlayerVehicleInventory(playerid, vehicleid)
{

	new
	    finalString[256],
		tString[128];

	pvehinv[playerid] = vehicleid;

	/*for( new i; i < MAX_VEHICLE_WEAPONS * 2; i++ )
	{

	    if(i % 2 != 0)
	        continue;

		format(tString, 256, "Zbraò ( %s )\n", GetCrateItemName(vehicleInventory_Weapons[vehicleid][i]));
		strcat(finalString, tString);

	}*/
	
	for( new i; i < VEH_INVENTORY_SIZE; i++ )
	{

		format(tString, 256, "%s ( %d )\n", GetTrunkItemName(i), vehicleInventory[vehicleid][i]);
		strcat(finalString, tString);
	}

	if(vEnum[vehicleid][v_CargoType] == 0)
		format(tString, 256, "Tovar ( iadny tovar )\n");
	else
	    format(tString, 256, "Tovar ( %s, %d krabíc/kubíkov )\n", trucking_retCargoTypeName(_:vEnum[vehicleid][v_CargoType]), vEnum[vehicleid][v_CargoQuantity]);
	strcat(finalString, tString);


	ShowPlayerDialog(playerid, did_trunk, DIALOG_STYLE_LIST, "KUFOR VOZIDLA", finalString, "ZVOLI", "ZRUI");

	return 1;
}

GetTrunkItemName( const itemid )
{

	new
		tstring[ 25 ];

	switch( itemid )
	{
	    case 0:
	        format(tstring, sizeof tstring, "Peniaze");

		case 1:
            format(tstring, sizeof tstring, "Náboje");

		case 2:
		    format(tstring, sizeof tstring, "Páèidlo");

		case 3:
		    format(tstring, sizeof tstring, "Lano");

		case 4:
		    format(tstring, sizeof tstring, "Vrece");

		case 5:
		    format(tstring, sizeof tstring, "Putá");

        case 6:
		    format(tstring, sizeof tstring, "Rezervné koleso");
	}

	return tstring;

}

ShowPlayerUpgradeShop(playerid)
{

	new
	    finalString[ 1024 ],
	    Float:VHP, repPrice, Float:fullhp,
		vid = GetPlayerVehicleID(playerid);

	if(vEnum[vid][v_def_Health] > 1000.0)
	    fullhp = vEnum[vid][v_def_Health];
	else
		fullhp = 1000.0;
	vhac_GetVehicleHealth(vid, VHP);
	repPrice = floatround((VHP - fullhp) * -1 * 2.2, floatround_round);

	if(GetVehicleFactionType(vid) == FACTION_TYPE_LAW || GetVehicleFactionType(vid) == FACTION_TYPE_FIRE)
	    format(finalString, 1024, "Produkt\tCena\n{ffffff}Oprava vozidla\t{57985f}ZDARMA\n{ffffff}Autorádio\t{57985f}320$\n{ffffff}Prefarbenie vozidla\t{57985f}1500$");
	else
		format(finalString, 1024, "Produkt\tCena\n{ffffff}Oprava vozidla\t{57985f}%d$\n{ffffff}Autorádio\t{57985f}320$\n{ffffff}Prefarbenie vozidla\t{57985f}1500$", repPrice);

	ShowPlayerDialog(playerid, did_upgrade_shop, DIALOG_STYLE_TABLIST_HEADERS, "MECHANICS", finalString, "KÚPI", "ZRUI");

	return 1;
}

ShowPlayerGPS(playerid)
{
	if(gps_Loaded[playerid] == false)
	{

	    if(gps_TimerOn[playerid] == true)
	        return SendError(playerid, "GPS sa u otvára!");

		gps_TimerOn[playerid] = true;

		PlayerTextDrawShow(playerid, gps_TD0[playerid]);
		PlayerTextDrawShow(playerid, gps_TD1[playerid]);
		PlayerTextDrawShow(playerid, gps_TD2[playerid]);

	    SetTimerEx("gps_HideTextdraw", 6500, false, "i", playerid);
	    SetTimerEx("gps_OpenGPS", 6500, false, "i", playerid);
	}
	else
	{
	    SetTimerEx("gps_OpenGPS", 1, false, "i", playerid);
	}

	return 1;
}

ShowPlayerGPSEx(playerid)
{
	SetTimerEx("gps_OpenGPSEx", 1, false, "i", playerid);

	return 1;
}

function gps_HideTextdraw(playerid)
{
    PlayerTextDrawHide(playerid, gps_TD0[playerid]);
	PlayerTextDrawHide(playerid, gps_TD1[playerid]);
	PlayerTextDrawHide(playerid, gps_TD2[playerid]);

	return 1;
}

function gps_OpenGPS(playerid)
{
    gps_Loaded[playerid] = true;
    gps_TimerOn[playerid] = false;

    new
        tstring[2048];

    strcat(tstring, "Zrui destináciu\nMoje súradnice\nZada vlastné súradnice\nVyh¾ada najblií bankomat\nVyh¾ada nehnute¾nos\n");

	for(new i; i < MAX_GPS_DESTS; i++)
	{
	    if(A_gpsLocation[i][0][0] == 0.0) continue;
	    strcat(tstring, A_gpsLocation[i][3]);
		strcat(tstring, "\n");
	}

	ShowPlayerDialog(playerid, did_gps, DIALOG_STYLE_LIST, "GPS", tstring, "VYBRA", "ZRUI");

    return 1;
}

function gps_OpenGPSEx(playerid)
{
    gps_Loaded[playerid] = true;
    gps_TimerOn[playerid] = false;

    new
        tstring[2048];

    strcat(tstring, "Prida novú destináciu\n");

	for(new i; i < MAX_GPS_DESTS; i++)
	{
	    if(A_gpsLocation[i][0][0] == 0.0) continue;
	    strcat(tstring, A_gpsLocation[i][3]);
		strcat(tstring, "\n");
	}

	ShowPlayerDialog(playerid, did_gpsex, DIALOG_STYLE_LIST, "GPS (PRE ZMAZANIE VYBER)", tstring, "VYBRA", "ZRUI");

    return 1;
}

ShowPlayerIllegalStore(playerid)
{

	new
	    finalString[1024] = "Item\tCena\n",
	    tString[52];

	for(new i; i < 5; i++)
	{
	    if(store_weapons[playerid][i] == 0)
	    {
	        format(tString, 128, "Prázdny slot\tKlikni pre zmenu\n");
	    }
	    else
	    {

	        new cena;

	        for(new x; x < sizeof illegal_AllowedItems; x++)
	        {
	            if(store_weapons[playerid][i] == illegal_AllowedItems[x][0])
				{
				    cena = illegal_AllowedItems[x][1];
				    break;
				}
	        }

	        format(tString, 128, "%s\t{549670}%d${ffffff}\n", GetCrateItemName(store_weapons[playerid][i]), cena);
	    }

	    strcat(finalString, tString);

	}

	strcat(finalString, " \n");

    for(new i; i < 3; i++)
	{
	    if(store_kevlar[playerid][i] == 0)
	    {
	        format(tString, 128, "Prázdny slot\tKlikni pre zmenu\n");
	    }
	    else
	    {

	        new cena;

	        for(new x; x < sizeof illegal_AllowedItems; x++)
	        {
	            if(store_kevlar[playerid][i] == illegal_AllowedItems[x][0])
				{
				    cena = illegal_AllowedItems[x][1];
				    break;
				}
	        }

	        format(tString, 128, "%s\t{549670}%d${ffffff}\n", GetCrateItemName(store_kevlar[playerid][i]), cena);
	    }

	    strcat(finalString, tString);

	}

	strcat(finalString, " \n");
	format(tString, 128, "Cena za dovoz\t{549670}%d$\n", ILLEGAL_STORE_SHIPPING);
	strcat(finalString, tString);

	new
	    cena;

    for(new i; i < 5; i++)
	{
	    for(new x; x < sizeof illegal_AllowedItems; x++)
     	{
      		if(store_weapons[playerid][i] == illegal_AllowedItems[x][0])
			{
   				cena += illegal_AllowedItems[x][1];
			    break;
			}
   		}
	}

    for(new i; i < 3; i++)
	{
	    for(new x; x < sizeof illegal_AllowedItems; x++)
     	{
      		if(store_kevlar[playerid][i] == illegal_AllowedItems[x][0])
			{
   				cena += illegal_AllowedItems[x][1];
			    break;
			}
   		}
	}

	format(tString, 128, "{e57070}Objedna\t{e57070}%d$", cena+ILLEGAL_STORE_SHIPPING);
	strcat(finalString, tString);

	ShowPlayerDialog(playerid, did_illegal_store, DIALOG_STYLE_TABLIST_HEADERS, "ÈIERNY TRH", finalString, "VYBRA", "ZRUI");

	return 1;

}

GetCrateItemName(const weaponid)
{
	new pName[48];
 	switch(weaponid) {
		case 0: format(pName,48,"Prázdny slot");
		case 1: format(pName,48,"Boxer");
		case 2: format(pName,48,"Golfová palica");
		case 3: format(pName,48,"Obusok");
		case 4: format(pName,48,"Noz");
		case 5: format(pName,48,"Baseballová palka");
		case 6: format(pName,48,"Lopata");
		case 7: format(pName,48,"Biliardová tyè");
		case 8: format(pName,48,"Katana");
		case 9: format(pName,48,"Motorova pila");
		case 10: format(pName,48,"Dildo");
		case 11: format(pName,48,"Dildo");
		case 12: format(pName,48,"Vibrator");
		case 13: format(pName,48,"Vibrator");
		case 14: format(pName,48,"Kvetiny");
		case 15: format(pName,48,"Tyc");
		case 16: format(pName,48,"Granát");
		case 17: format(pName,48,"Slzný granat");
		case 18: format(pName,48,"Molotovov koktejl");
		case 22: format(pName,48,"9mm");
		case 23: format(pName,48,"9mm s tlmicom");
		case 24: format(pName,48,"Desert Eagle");
		case 25: format(pName,48,"Brokovnica");
		case 26: format(pName,48,"Upilovaná brokovnica");
		case 27: format(pName,48,"Bojová brokovnica");
		case 28: format(pName,48,"Uzi");
		case 29: format(pName,48,"MP5");
		case 30: format(pName,48,"AK-47");
		case 31: format(pName,48,"M4");
		case 32: format(pName,48,"Tec-9");
		case 33: format(pName,48,"Puka");
		case 34: format(pName,48,"Sniper");
		case 35: format(pName,48,"RPG");
		case 36: format(pName,48,"Raketomet");
		case 37: format(pName,48,"Plameòomet");
		case 38: format(pName,48,"Minigun");
		case 39: format(pName,48,"Vybusnina");
		case 40: format(pName,48,"Detonátor");
		case 41: format(pName,48,"Sprej");
		case 42: format(pName,48,"Hasiaci pristroj");
		case 43: format(pName,48,"Kamera");
		case 44: format(pName,48,"Nic");
		case 45: format(pName,48,"Nic");
		case 46: format(pName,48,"Padák");
		case CRATE_KEVLAR_LIGHT_ID: format(pName, 48, "Light Kevlar");
		case CRATE_KEVLAR_HEAVY_ID: format(pName, 48, "Heavy Kevlar");
		default: format(pName,48,"Nezname");
	}

  	return pName;
}

/*
	CrateCrate( ... )

	RETURNS:
		0 (failed to create crate)
		1 (crate created successfully)

*/
CreateCrate(const owner[],
		const weapon_1 = 0, const weapon_2 = 0, const weapon_3 = 0, const weapon_4 = 0, const weapon_5 = 0,
		const kevlar_1 = 0, const kevlar_2 = 0, const kevlar_3 = 0, const playerid = -1, const inform_player = 0
)
{

	new
		crateid = INVALID_CRATE_ID;

	// Check for free slot id
	for( new enumid; enumid < MAX_CRATES; enumid ++ )
	{
		if(strlen( crateEnum[enumid][crate_Owner] ) > 3)
			continue;

		crateid = enumid;

		break;
	}

	// If there isn't any free space.
	if(crateid == INVALID_CRATE_ID)
	{
		printf("Error: Failed to create crate for %s, an error occured: No free space.", owner);
		return 0;
	}

	// Creating variables
	new
	    const
			label_Text[ 72 ] = "{73bd8a}[ Drevená krabica ]\n\n{e7e7e7}Zamknutá\n/vypacit",
			randomInteger = random(sizeof illegal_CratePos );

	new
		Float:position[ 6 ];

	/*
		START OF ASSIGNING POSITION TO VARIABLES
	*/

	position[0] = illegal_CratePos[randomInteger][0]; // Position X
	position[1] = illegal_CratePos[randomInteger][1]; // Position Y
	position[2] = illegal_CratePos[randomInteger][2]; // Position Z
	position[3] = illegal_CratePos[randomInteger][3]; // Position RX
	position[4] = illegal_CratePos[randomInteger][4]; // Position RY
	position[5] = illegal_CratePos[randomInteger][5]; // Position RZ

	/*
		END OF ASSIGNING POSITION TO VARIABLES
	*/

	// Creating object, label, area
	crateEnum[crateid][crate_Object] = CreateDynamicObject(
		CRATE_OBJECT_MODEL,
		position[0], position[1], position[2] - 0.15, position[3], position[4], position[5],
		0, 0,
		-1, 70.0, 100.0, -1, 0
	);

	crateEnum[crateid][crate_Label] = CreateDynamic3DTextLabel(
		label_Text, 0xFFFFFFFF,
		position[0], position[1], position[2] + 0.3,
		2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 10.0, -1, 1
	);

	crateEnum[crateid][crate_AreaID] = CreateDynamicSphere(
		position[0], position[1], position[2], 8.0, 0, 0, -1
	);

	/*
		START OF ASSIGNING ITEMS TO CRATE
	*/

	format(crateEnum[crateid][crate_Owner], MAX_PLAYER_NAME, owner);

	crateEnum[crateid][crate_Weapon_Slot_1] = weapon_1;
	crateEnum[crateid][crate_Weapon_Slot_2] = weapon_2;
	crateEnum[crateid][crate_Weapon_Slot_3] = weapon_3;
	crateEnum[crateid][crate_Weapon_Slot_4] = weapon_4;
	crateEnum[crateid][crate_Weapon_Slot_5] = weapon_5;

	crateEnum[crateid][crate_Kevlar_Slot_1] = kevlar_1;
	crateEnum[crateid][crate_Kevlar_Slot_2] = kevlar_2;
	crateEnum[crateid][crate_Kevlar_Slot_3] = kevlar_3;

	crateEnum[crateid][crate_Unlocked] = false;

	/*
		END OF ASSIGNING ITEMS TO CRATE
	*/

	if(inform_player == 1)
	{
	    SCFM(playerid, 0xdf4040FF, "...---------------------------- DODÁVKA ----------------------------...");
	    SCFM(playerid, 0xdf4040FF, "...- Dodávka bola doruèená na nasledujúcich koordináciách !!! !!! !!!");
	    SCFM(playerid, 0xdf4040FF, "...- X: %.3f - Y: %.3f - Z: %.3f", position[0], position[1], position[2]);
	    SCFM(playerid, 0xdf4040FF, "...---------------------------- DODÁVKA ----------------------------...");
	}

	return 1;
}
DestroyCrate( const crateid )
{

	// If crateid is not valid.
	if(crateid > MAX_CRATES  || crateid < 0)
	{
	    printf("Error: Failed to destroy crate ID %d, an error occured: ID %d is not valid crate ID!",
		    crateid, crateid);

	    return 0;
	}


	if(strlen( crateEnum[crateid][crate_Owner] ) < 3)
	{
		printf("Error: Failed to destroy crate ID %d, an error occured: Crate with ID %d doesn't exists!",
		    crateid, crateid);

	    return 0;
	}

	// Destroy object, label and area
	DestroyDynamicObject(crateEnum[crateid][crate_Object]);
	DestroyDynamic3DTextLabel(crateEnum[crateid][crate_Label]);
	DestroyDynamicArea(crateEnum[crateid][crate_AreaID]);

	// Reload all weapons and kevlars in the crate, owner also

	crateEnum[crateid][crate_Owner][0] = EOS;

	crateEnum[crateid][crate_Weapon_Slot_1] = 0;
	crateEnum[crateid][crate_Weapon_Slot_2] = 0;
	crateEnum[crateid][crate_Weapon_Slot_3] = 0;
	crateEnum[crateid][crate_Weapon_Slot_4] = 0;
	crateEnum[crateid][crate_Weapon_Slot_5] = 0;

	crateEnum[crateid][crate_Kevlar_Slot_1] = 0;
	crateEnum[crateid][crate_Kevlar_Slot_2] = 0;
	crateEnum[crateid][crate_Kevlar_Slot_3] = 0;

	return 1;
}

/*

	IsPlayerNearAnyCrate(playerid)

	RETURNS:
		0 (if player is not near any crate)
		1 (if player is near crate)
*/
stock IsPlayerNearAnyCrate(playerid)
{
	if(!IsPlayerConnected(playerid))
	    return 0;

	for( new crateid; crateid < MAX_CRATES; crateid ++ )
	{
	    if( strlen(crateEnum[crateid][crate_Owner]) < 3)
	        continue;

		if( !IsPlayerInDynamicArea(playerid, crateEnum[crateid][crate_AreaID], 0))
		    continue;

		// Crate found.

		return 1;
	}

	return 0;
}

/*

	GetPlayerNearestCrate(playerid)

	RETURNS:
		-1 (if player is not near any crate)
		crate id (if player is near crate)
*/
stock GetPlayerNearestCrate(playerid)
{
	if(!IsPlayerConnected(playerid))
	    return -1;

	for( new crateid; crateid < MAX_CRATES; crateid ++ )
	{
	    if( strlen(crateEnum[crateid][crate_Owner]) < 3)
	        continue;

		if( !IsPlayerInDynamicArea(playerid, crateEnum[crateid][crate_AreaID], 0))
		    continue;

		// Crate found.

		return crateid;
	}

	return -1;
}

/*

	ShowPlayerCrateInventory( playerid, crateid )

	RETURNS:
	    nothing
*/
ShowPlayerCrateInventory(playerid, const crateid)
{

	new
	    finalString[256];

	format(finalString, sizeof finalString,
	    "%s\n%s\n%s\n%s\n%s\n \n%s\n%s\n%s",
	        GetCrateItemName(crateEnum[crateid][crate_Weapon_Slot_1]),
	        GetCrateItemName(crateEnum[crateid][crate_Weapon_Slot_2]),
	        GetCrateItemName(crateEnum[crateid][crate_Weapon_Slot_3]),
	        GetCrateItemName(crateEnum[crateid][crate_Weapon_Slot_4]),
	        GetCrateItemName(crateEnum[crateid][crate_Weapon_Slot_5]),

	        GetCrateItemName(crateEnum[crateid][crate_Kevlar_Slot_1]),
	        GetCrateItemName(crateEnum[crateid][crate_Kevlar_Slot_2]),
	        GetCrateItemName(crateEnum[crateid][crate_Kevlar_Slot_3])
	 );

	ShowPlayerDialog(playerid, did_crate, DIALOG_STYLE_LIST, "DREVENÁ KRABICA", finalString, "VYBRA", "ZAVRIE");

	return 1;
}

/*noSpecialChars(string[])
{
    for(new i = strlen(string); i > 0; i--)
        if(!('A' <= string[i] <= 'Z') && !('a' <= string[i] <= 'z') && !('_' <= string[i] <= '_')) return false;

    return true;
}*/

HasFreeBankSlot(playerid)
{
	new
	    string[128],
		Cache:cache,
		pocet,
		maxslot = 2;

	mysql_format(MYSQL, string, 128, "SELECT AccID FROM gm_bankaccs WHERE Owner = '%e'", ReturnName(playerid));
	cache = mysql_query(MYSQL, string);
	pocet = cache_num_rows();
	cache_delete(cache);

	switch(GetPlayerDonatorLevel(playerid))
	{
	    case 1:
	        maxslot = 3;

		case 2:
		    maxslot = 5;

		case 3:
		    maxslot = 10;
	}

	if(pocet >= maxslot)
	    return 0;

	return 1;
}

HasFreeBusinessSlot(playerid)
{
	new
	    string[128],
		Cache:cache,
		pocet,
		maxslot = 1;

	mysql_format(MYSQL, string, 128, "SELECT IsLocked FROM gm_businesses WHERE Owner = '%e'", ReturnName(playerid));
	cache = mysql_query(MYSQL, string);
	pocet = cache_num_rows();
	cache_delete(cache);

	switch(GetPlayerDonatorLevel(playerid))
	{
	    case 1:
	        maxslot = 2;

		case 2:
		    maxslot = 3;
		    
		case 3:
		    maxslot = 4;
	}

	if(pocet >= maxslot)
	    return 0;

	return 1;
}

new openableGate[30][5];
// 0 - object
// 1 - area
// 2 - faction
// 3 arrayid
// 4 ismoving
LoadGates()
{
	/*
		Object, cX, cY, cZ, cRX, cRY, cRZ, oX, oY, oZ, oRX, oRY, oRZ, VW, Interior, FactionType
	*/

	for( new i; i < sizeof(openableGates); i++)
	{
	    openableGate[i][0] = CreateDynamicObject(
			openableGates[i][0],
			Float:openableGates[i][1], Float:openableGates[i][2], Float:openableGates[i][3],
			Float:openableGates[i][4], Float:openableGates[i][5], Float:openableGates[i][6],
			openableGates[i][13], openableGates[i][14],
			-1
		);

		if(openableGates[i][0] == 11313 && openableGates[i][15] == FACTION_TYPE_FIRE)
		{
		    SetDynamicObjectMaterial(openableGate[i][0], 0, 10763, "airport1_sfse", "ws_rollerdoor_fire", 0x00000000);
		}
		else if(openableGates[i][0] == 1560 && openableGates[i][15] == FACTION_TYPE_FIRE)
		{
			SetDynamicObjectMaterial(openableGate[i][0], 0, 1560, "7_11_door", "cj_sheetmetal2", 0xFFFFFFFF);
			SetDynamicObjectMaterial(openableGate[i][0], 1, 11631, "mp_ranchcut", "mpCJ_WOOD_DARK", 0x00000000);
			SetDynamicObjectMaterial(openableGate[i][0], 2, 14665, "genintint711_1", "interiorwindowglow", 0xFFDDDDDD);
		}
		else if(openableGates[i][0] == 1495 && openableGates[i][15] == FACTION_TYPE_FIRE)
		{
			SetDynamicObjectMaterial(openableGate[i][0], 0, -1, "none", "none", 0xFFFFFFFF);
			SetDynamicObjectMaterial(openableGate[i][0], 1, 18757, "vcinteriors", "dt_office_gls_text", 0x00000000);
			SetDynamicObjectMaterial(openableGate[i][0], 2, 11631, "mp_ranchcut", "mpCJ_WOOD_DARK", 0x00000000);
		}

		openableGate[i][1] = CreateDynamicSphere(
													Float:openableGates[i][1], Float:openableGates[i][2], Float:openableGates[i][3],
													10.0,
													openableGates[i][13],
													openableGates[i][14],
													-1
		);

		openableGate[i][2] = openableGates[i][15];
		openableGate[i][3] = i;
	}

	return 1;
}

LoadTollBooths()
{
	for( new i; i < sizeof(tollBooths); i++)
	{

	    if(i == 0)
	        continue;

	    tollBooths_object[i] = CreateDynamicObject(968, Float:tollBooths[i][2], Float:tollBooths[i][3], Float:tollBooths[i][4], Float:tollBooths[i][5], Float:tollBooths[i][6], Float:tollBooths[i][7], -1, -1, -1);
		tollBooths_price[i] = tollBooths[i][1];

		new
			string[128];

		format(string, 128, "{59d454}[ MÝTNA BRÁNA ]\n{FFFFFF}Poplatok %d$\n\n/toll", tollBooths[i][1]);

        CreateDynamic3DTextLabel( string, -1, Float:tollBooths[i][9], Float:tollBooths[i][10], Float:tollBooths[i][11], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 50.0, -1, 0 );

		tollBooths_area[i] = CreateDynamicSphere( Float:tollBooths[i][9], Float:tollBooths[i][10], Float:tollBooths[i][11], 5.0, 0, 0, -1 );
		tollBooths_areaex[i] = CreateDynamicSphere( Float:tollBooths[i][12], Float:tollBooths[i][13], Float:tollBooths[i][14], 5.0, 0, 0, -1 );
	}
}

opeda_Boombox(playerid, areaid)
{
    if(IsPlayerInAnyVehicle(playerid)) {
    	switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
		    case 446, 448, 452, 457, 461, 462, 463, 468, 481, 485, 493, 509, 510, 521, 522, 523, 530, 531, 539, 571, 572, 581: {}
		    default: {
		        new o[4];
    			GetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), o[0],o[1],o[2],o[3]);
    			if(o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0) return 1;
		    }
		}
	}

    foreach( new i : Player ) {
		if(!IsPlayerLogged(i)) continue;
		if(bb_Placed[i] == false) continue;
		if(areaid != bb_Area[i]) continue;
		if(strlen(bb_Url[i]) < 1) continue;
		StopAudioStreamForPlayerEx(playerid);
		PlayAudioStreamForPlayerEx(playerid, bb_Url[i], bb_Pos[i][0], bb_Pos[i][1], bb_Pos[i][2], 32, 1);
	}
	return 1;
}

function DestroyObjectTimer(objectid)
	return DestroyDynamicObject(objectid);

opeda_SpeedCamera(playerid, areaid)
{
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && B_playerAdminSPOT[playerid] == false)
	{

	    switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
	    {
	        case
	            481,
				510,
				509,

				//lietadlá, helikoptéry:

				417, 424, 425, 430, 432, 435, 441, 446,
				447, 449, 450, 452, 453, 454, 457, 460,
				464, 465, 469, 472, 473, 476, 484, 485,
				486, 487, 488, 493, 497, 501, 511, 512,
				513, 519, 520, 530, 531, 532, 537, 538,
				539, 548, 553, 563, 564, 568, 569, 570,
				571, 572, 574, 577, 583, 584, 590, 591,
				592, 593, 594, 601, 606, 607, 608, 610,
				611:
			{
			    return 1;
			}
	    }

	    if(vEnum[GetPlayerVehicleID(playerid)][v_SPZDown] == 1)
			return 1;

	    new
	        Float:angle;

        GetVehicleZAngle(GetPlayerVehicleID(playerid), angle);

        new
 			I_Speed,
 			Float:F_Speed;

		ex_GetVehicleSpeed(GetPlayerVehicleID(playerid), 1, I_Speed, F_Speed);

		for(new i; i < MAX_SPEED_CAMERAS; i++)
		{
	 		if(spdcamEnum[i][scam_SpeedLimit] < 1)
				continue;

			if(areaid != spdcamEnum[i][scam_AreaID])
			    continue;

            if(spdcamEnum[i][scam_SpeedLimit] > I_Speed - 6)
                continue;

			new
			    Float:offset = angle - spdcamEnum[i][scam_RZ];

			ValidateDegree(offset);
			ValidateDegree(angle);

			if(offset > 45.0 && offset < 315.0)
				continue;

			foreach( new pl : Player )
			{
			    if(!IsPlayerInAnyVehicle(pl))
			        continue;

				if(GetPlayerVehicleID(pl) != GetPlayerVehicleID(playerid))
				    continue;

				PlayerPlaySound(pl, 1132, 0.0, 0.0, 0.0);
                FadeColorForPlayer(pl, 255,255,255,255,255,255,255,0,2,1);
			}

			if(GetVehicleFactionType(GetPlayerVehicleID(playerid)) == FACTION_TYPE_LAW || GetVehicleFactionType(GetPlayerVehicleID(playerid)) == FACTION_TYPE_FIRE)
				return 0;

			new query[256], Cache:cache, wantedVehicles;
            mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_vehicles WHERE IsWanted = '1' AND SPZ = '%e'", vEnum[GetPlayerVehicleID(playerid)][v_SPZ]);
			cache = mysql_query(MYSQL, query);

			wantedVehicles = cache_num_rows();

			cache_delete(cache);

			if(wantedVehicles == 0)
			{
				SCFM(playerid, COLOR_ADMINCMD, "> Preletel si okolo rýchlostnej kamery rýchlosou %dMPH, maximálna povolená rýchlos je vak %dMPH!", I_Speed, spdcamEnum[i][scam_SpeedLimit]);

				new
				    reason[68];

				format(reason, sizeof reason, "Prekroèenie rýchlosti o %d MI", I_Speed - spdcamEnum[i][scam_SpeedLimit]);

				if(strcmp(vEnum[GetPlayerVehicleID(playerid)][v_Owner], ReturnName(playerid), false))
				{
				    if(strlen(vEnum[GetPlayerVehicleID(playerid)][v_Owner]) < 5)
				        break;

	                GivePlayerFine(vEnum[GetPlayerVehicleID(playerid)][v_Owner], floatround(spdcamEnum[i][scam_BaseFine]+(I_Speed*1.25), floatround_round), reason, "SASD");

	                format(reason, sizeof reason, "~w~Prisla ti nova pokuta za ~b~prekrocenie rychlosti~w~!");

	                EnterInfo(playerid, reason);
				}
				else
				{

				    if(strlen(vEnum[GetPlayerVehicleID(playerid)][v_Owner]) < 5)
				        break;

				    SCFM(playerid, COLOR_ADMINCMD, "> Tento akt a bude stá pokutu, presne %d$!", floatround(spdcamEnum[i][scam_BaseFine]+(I_Speed*1.25), floatround_round));

					GivePlayerFine(vEnum[GetPlayerVehicleID(playerid)][v_Owner], floatround(spdcamEnum[i][scam_BaseFine]+(I_Speed*1.25), floatround_round), reason, "SASD");
				}
			}
			else
			{

			    new
					zonen[32],
					bound[18];

			    GetPlayer2DZone(playerid, zonen, 32);

			    if(angle < 45 || angle > 315)
			        format(bound, 18, "severne");
				else if(angle >= 225 && angle <= 315)
				    format(bound, 18, "západne");
				else if(angle > 180 && angle < 225)
				    format(bound, 18, "june");
				else if(angle <= 180 && angle >= 45)
				    format(bound, 18, "východne");
				else
				    format(bound, 18, "neznámo kam");

			    foreach( new x : Player )
				{
			 		if(GetPlayerFactionType(x) != FACTION_TYPE_LAW)
			   			continue;

					if(!IsPlayerWorking(x))
			  			continue;

					SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] H¾adané vozidlo %s (%s) prelo rýchlosou %dMPH v lokácii %s, smeruje %s!", GetVehicleName(GetPlayerVehicleID(playerid)), vEnum[GetPlayerVehicleID(playerid)][v_SPZ], I_Speed, zonen, bound);

				}
			}
			break;
		}
	}
	return 1;
}

GivePlayerFine(player[], suma, dovod[], officer[] = "SASD")
{
	new
	    query[512];

	mysql_format(MYSQL, query, 1024, "INSERT INTO char_pokuty (Username, Suma, Dovod, Date, Officer, Paid) VALUES ('%e', '%d', '%e', '%d', '%e', '0')",
	    player, suma, dovod, gettime(), officer);

	mysql_query(MYSQL, query, false);

	return 0;
}

ShowPlayerFines(playerid)
{
	new
		query[256],
		Cache:cache,

		finalString[2048] = "Suma\tDôvod\tDátum udelenia\tZaplatená\n",
		tempString[128];

	mysql_format(MYSQL, query, 256, "SELECT * FROM char_pokuty WHERE Username = '%e' ORDER BY Paid, Date DESC", ReturnName(playerid));

	cache = mysql_query(MYSQL, query);

	for( new i; i < cache_num_rows(); i++)
	{
	    if(i > cache_num_rows())
			break;

		new
		    Suma,
		    Dovod[128],
		    Date,
		    Officer[64],
		    Paid;

	    cache_get_value_name_int(i, "Suma", Suma);
	    cache_get_value_name(i, "Dovod", Dovod);
	    cache_get_value_name_int(i, "Date", Date);
	    cache_get_value_name(i, "Officer", Officer);
	    cache_get_value_name_int(i, "Paid", Paid);

	    new
	        paidstr[15];

		switch(Paid)
		{
		    case 0:
		        format(paidstr, 15, "{e17070}Nie");

			default:
			    format(paidstr, 15, "{8be183}Áno");

		}

		format(tempString, 128, "{548555}%d${ffffff}\t%s\t%s\t%s\n", Suma, Dovod, getdateunix(Date), paidstr);
		strcat(finalString, tempString);
	}

	cache_delete(cache);

	ShowPlayerDialog(playerid, did_fines, DIALOG_STYLE_TABLIST_HEADERS, "POKUTY", finalString, "ZOBRAZI", "ZRUI");

	return 1;
}

PayPlayerFine(playerid)
{
    new
		query[256],
		Cache:cache;

	mysql_format(MYSQL, query, 256, "SELECT * FROM char_pokuty WHERE Username = '%e' ORDER BY Paid, Date DESC", ReturnName(playerid));

	cache = mysql_query(MYSQL, query);

	new
 		Suma,
    	Date;

	cache_get_value_name_int(fine_id[playerid], "Suma", Suma);
	cache_get_value_name_int(fine_id[playerid], "Date", Date);

	cache_delete(cache);

	if(ex_GetPlayerMoney(playerid) < Suma)
	{
	    SendError(playerid, "Nemá dos peòazí na zaplatenie pokuty!");
	    return ShowPlayerFineDetail(playerid, fine_id[playerid]);
	}

	ex_GivePlayerMoney(playerid, -Suma);
	money_spent[playerid] += floatround(Suma,floatround_round);

	SendSuccess(playerid, "Pokuta zaplatená!");

	mysql_format(MYSQL, query, 256, "UPDATE char_pokuty SET Paid = 1 WHERE Username = '%e' AND Date = '%d'", ReturnName(playerid), Date);
	mysql_query(MYSQL, query, false);

	ShowPlayerFineDetail(playerid, fine_id[playerid], Suma, Date);

    for(new f; f < MAX_FACTIONS; f++)
    {
    	if(strlen(factEnum[f][fact_Name]) < 3) continue;
	    if(factEnum[f][fact_Type] == FACTION_TYPE_GOV) {
     		factEnum[f][fact_Cash] += floatround(Suma / 100 * 10, floatround_round);
	    }
	    else if(factEnum[f][fact_Type] == FACTION_TYPE_LAW) {
     		factEnum[f][fact_Cash] += floatround(Suma / 100 * 90, floatround_round);
	    }
    }

    foreach( new x : Player )
	{
 		if(GetPlayerFactionType(x) != FACTION_TYPE_LAW && GetPlayerFactionType(x) != FACTION_TYPE_GOV)
   			continue;

		if(GetPlayerFactionType(x) == FACTION_TYPE_LAW && !IsPlayerWorking(x))
  			continue;

		if(GetPlayerFactionType(x) == FACTION_TYPE_LAW)
			SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s zaplatil jeho pokutu, do kasy bolo pridaných %d$ (90 percent z pokuty)!", GetPlayerNameEx(playerid, NO_MASK), floatround(Suma / 100 * 90, floatround_round));

        if(GetPlayerFactionType(x) == FACTION_TYPE_GOV)
			SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s zaplatil jeho pokutu, do kasy bolo pridaných %d$ (10 percent z pokuty)!", GetPlayerNameEx(playerid, NO_MASK), floatround(Suma / 100 * 10, floatround_round));
	}

	return 1;
}

ShowPlayerFineDetail(playerid, count, Sumae = 0, Datee = 0)
{

	fine_id[playerid] = count;

    new
		query[256],
		Cache:cache,

		finalString[2048];

	if(Sumae == 0 && Datee == 0)
		mysql_format(MYSQL, query, 256, "SELECT * FROM char_pokuty WHERE Username = '%e' ORDER BY Paid, Date DESC", ReturnName(playerid));
	else
		mysql_format(MYSQL, query, 256, "SELECT * FROM char_pokuty WHERE Username = '%e' AND Suma = '%d' AND Date = '%d'", ReturnName(playerid), Sumae, Datee);

	cache = mysql_query(MYSQL, query);

	new
 		Suma,
   		Dovod[128],
    	Date,
	    Officer[64],
		Paid;

	if(Sumae != 0 && Datee != 0)
	    count = 0;

	cache_get_value_name_int(count, "Suma", Suma);
	cache_get_value_name(count, "Dovod", Dovod);
	cache_get_value_name_int(count, "Date", Date);
	cache_get_value_name(count, "Officer", Officer);
 	cache_get_value_name_int(count, "Paid", Paid);

    fine_ispaid[playerid] = Paid;

    new
    	paidstr[15];

	switch(Paid)
	{
 		case 0:
   			format(paidstr, 15, "Nie");

		default:
  			format(paidstr, 15, "Áno");

	}

	format(finalString, 2048, "{ffffff}Udelil: {e34f4f}%s\n{ffffff}Dôvod: {e34f4f}%s\n{ffffff}Suma: {e34f4f}%d$\n{ffffff}Dátum: {e34f4f}%s\n{ffffff}Zaplatená: {e34f4f}%s\n\n{ffffff}Kadá pokuta musí by zaplatená do {e34f4f}72 hodín{ffffff}, inak môete by trestne stíhaný!",
	    Officer, Dovod, Suma, getdateunix(Date), paidstr);

	if(Paid == 0)
		ShowPlayerDialog(playerid, did_fine, DIALOG_STYLE_MSGBOX, "POKUTA", finalString, "ZAPLATI", "ZRUI");
	else
	    ShowPlayerDialog(playerid, did_fine, DIALOG_STYLE_MSGBOX, "POKUTA", finalString, "OK", "");

	cache_delete(cache);

	return 1;
}

oplda_Boombox(playerid, areaid)
{
    for(new i; i < MAX_PLAYERS; i++) {
		if(IsPlayerInAnyVehicle(playerid)) {
		    switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
			    case 446, 448, 452, 457, 461, 462, 463, 468, 481, 485, 493, 509, 510, 521, 522, 523, 530, 531, 539, 571, 572, 581: {}
			    default: {
			        new o[4];
    				GetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), o[0],o[1],o[2],o[3]);
    				if(o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0) break;
    				else
    				{
    				    if(strlen(vEnum[GetPlayerVehicleID(playerid)][v_RadioURL]) > 2)
    				        break;
    				}
			    }
			}
		}
		if(!IsPlayerLogged(i)) continue;
		if(bb_Placed[i] == false) continue;
		if(areaid != bb_Area[i]) continue;
		StopAudioStreamForPlayerEx(playerid);
	}
}

PlaceBoombox(playerid) {
	GetPlayerPos(playerid, bb_Pos[playerid][0], bb_Pos[playerid][1], bb_Pos[playerid][2]);
	GetXYInFrontOfPlayer(playerid, bb_Pos[playerid][0], bb_Pos[playerid][1], 0.8);
	GetPlayerFacingAngle(playerid, bb_Pos[playerid][3]);

	foreach( new i : Player ) {
	    if(!IsPlayerLogged(i)) continue;
	    if(bb_Placed[i] == false) continue;
	    if(GetPlayerVirtualWorld(playerid) != bb_Worlds[i][0]) continue;
	    if(GetPlayerInterior(playerid) != bb_Worlds[i][1]) continue;
	    if(GetDistance(bb_Pos[playerid][0], bb_Pos[playerid][1], bb_Pos[playerid][2], bb_Pos[i][0], bb_Pos[i][1], bb_Pos[i][2]) < 64.1) {
	        bb_Pos[playerid][0] = 0;
	        bb_Pos[playerid][1] = 0;
	        bb_Pos[playerid][2] = 0;
	        bb_Pos[playerid][3] = 0;
	        return EnterInfo(playerid, "~r~Uz tu niekde je Boombox!");
	    }
	}

	bb_Placed[playerid] = true;
	bb_Worlds[playerid][0] = GetPlayerVirtualWorld(playerid);
	bb_Worlds[playerid][1] = GetPlayerInterior(playerid);
	format(bb_Url[playerid], 256, "");
	bb_Object[playerid] = CreateDynamicObject(2102, bb_Pos[playerid][0], bb_Pos[playerid][1], bb_Pos[playerid][2] - 1.0, 0, 0, bb_Pos[playerid][3], bb_Worlds[playerid][0], bb_Worlds[playerid][1], -1, 64.0, 60.0, -1, 0);
	bb_Area[playerid] = CreateDynamicSphere(bb_Pos[playerid][0], bb_Pos[playerid][1], bb_Pos[playerid][2], 32, bb_Worlds[playerid][0], bb_Worlds[playerid][1], -1);
	return 1;
}

RefreshBoomboxFor(playerid) {
	if(IsPlayerInAnyVehicle(playerid)) {
	    switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
	        case 446, 448, 452, 457, 461, 462, 463, 468, 481, 485, 493, 509, 510, 521, 522, 523, 530, 531, 539, 571, 572, 581: {}
	    	default: {
	    	    new o[4];
    			GetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), o[0],o[1],o[2],o[3]);
    			if(o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0)
				{

				    if(strlen(vEnum[GetPlayerVehicleID(playerid)][v_RadioURL]) > 2)
				        return 1;

					return StopAudioStreamForPlayerEx(playerid);
				}
			}
	    }
	}
	foreach( new i : Player ) {
		if(!IsPlayerLogged(i)) continue;
		if(bb_Placed[i] == false) continue;
		if(!IsPlayerInDynamicArea(playerid, bb_Area[i])) continue;
		if(strlen(bb_Url[i]) < 1) continue;
		StopAudioStreamForPlayerEx(playerid);
		PlayAudioStreamForPlayerEx(playerid, bb_Url[i], bb_Pos[i][0], bb_Pos[i][1], bb_Pos[i][2], 32, 1);
		return 1;
	}
	//StopAudioStreamForPlayerEx(playerid);
	return 1;
}

RefreshMusicAmbientFor(playerid) {
	if(GetPlayerVirtualWorld(playerid) != 0)
	    return 0;

	if(IsPlayerInAnyVehicle(playerid)) {
	    switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
	        case 446, 448, 452, 457, 461, 462, 463, 468, 481, 485, 493, 509, 510, 521, 522, 523, 530, 531, 539, 571, 572, 581: {}
	    	default: {
	    	    new o[4];
    			GetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), o[0],o[1],o[2],o[3]);
    			if(o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0)
				{

				    if(strlen(vEnum[GetPlayerVehicleID(playerid)][v_RadioURL]) > 2)
				        return 1;

					StopAudioStreamForPlayerEx(playerid);
					return 1;
				}
			}
	    }
	}

	if(ambientzone[playerid] > 0 && audiostream[playerid] == 0)
	{
	    PlayAudioStreamForPlayerEx(playerid, music_zones_text[ambientzone[playerid]-1], .ambient = true);
	}

	return 1;
}

RefreshBoombox(playerid) {
	//if(strlen(bb_Url[playerid]) < 1) return 1;

	foreach( new i : Player ) {
		if(!IsPlayerLogged(i)) continue;
		if(!IsPlayerInDynamicArea(i, bb_Area[playerid])) continue;
		if(IsPlayerInAnyVehicle(i)) {
		    switch(GetVehicleModel(GetPlayerVehicleID(i))) {
		        case 446, 448, 452, 457, 461, 462, 463, 468, 481, 485, 493, 509, 510, 521, 522, 523, 530, 531, 539, 571, 572, 581: {}
		    	default: {
		    	    new o[4];
	    			GetVehicleParamsCarWindows(GetPlayerVehicleID(i), o[0],o[1],o[2],o[3]);
	    			if(o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0) continue;
				}
		    }
		}

		StopAudioStreamForPlayerEx(i);
		if(strlen(bb_Url[playerid]) > 1)
			PlayAudioStreamForPlayerEx(i, bb_Url[playerid], bb_Pos[playerid][0], bb_Pos[playerid][1], bb_Pos[playerid][2], 32, 1);
	}
	return 1;
}

DestroyBoombox(playerid) {
	format(bb_Url[playerid], 256, "");
	RefreshBoombox(playerid);

	bb_Placed[playerid] = false;

	foreach( new i : Player ) {
		if(!IsPlayerLogged(i)) continue;
		if(IsPlayerInAnyVehicle(i)) continue;
		if(!IsPlayerInDynamicArea(i, bb_Area[playerid])) continue;
		StopAudioStreamForPlayerEx(i);
	}

	bb_Pos[playerid][0] = 0.0;
	bb_Pos[playerid][1] = 0.0;
	bb_Pos[playerid][2] = 0.0;
	bb_Pos[playerid][3] = 0.0;
	bb_Worlds[playerid][0] = 0;
	bb_Worlds[playerid][1] = 0;
	if(IsValidDynamicObject(bb_Object[playerid])) DestroyDynamicObject(bb_Object[playerid]);
	if(IsValidDynamicArea(bb_Area[playerid])) DestroyDynamicArea(bb_Area[playerid]);
	return 1;
}

AddBusinessCash(id, amount)
{
	if(id < 0 || id > MAX_BUSINESSES)
		return 0;

	businessEnum[id][bz_Storage] += amount;

	return 1;
}

GetBizTovar(bizid)
{
    if(bizid < 0) return 50000;
	new xca = 50000;

	if(strlen(businessEnum[bizid][bz_Owner]) > 4) xca = businessEnum[bizid][bz_Tovar];

	return xca;
}

DecrBizTovar(bizid)
{
	if(bizid < 0) return 0;
	if(strlen(businessEnum[bizid][bz_Owner]) > 4) businessEnum[bizid][bz_Tovar]--;

	return 1;
}

GetPlayerBusiness(playerid)
{
	if(GetPlayerVirtualWorld(playerid) < MIN_BUSINESS_ADDRESS)
	    return -1;

	if(GetPlayerVirtualWorld(playerid) > MAX_BUSINESS_ADDRESS)
	    return -1;

	foreach( new i : Businesses )
	{
	    if(businessEnum[i][bz_Address] == GetPlayerVirtualWorld(playerid))
	        return i;
	}

	return -1;
}

/*GetDumpsterFixTime(dumpsterType)
{

	new
		fixTime = DUMPSTER_DEFAULT_TIME; //Fixed time will be 5 seconds by default.

	switch( dumpsterType )
	{

		case DUMPSTER_BLACK:
			fixTime = DUMPSTER_BLACK_TIME;

		case DUMPSTER_GREEN_BIG:
			fixTime = DUMPSTER_GREEN_BIG_TIME;

		case DUMPSTER_GREEN_RECYCLE:
			fixTime = DUMPSTER_GREEN_RECYCLE_TIME;

		case DUMPSTER_GREEN_GLASS:
			fixTime = DUMPSTER_GREEN_GLASS_TIME;

		case DUMPSTER_ORANGE_BIG:
			fixTime = DUMPSTER_ORANGE_BIG_TIME;

		case DUMPSTER_ORANGE_TRASHO:
			fixTime = DUMPSTER_ORANGE_TRASHO_TIME;

		case DUMPSTER_BLUE:
			fixTime = DUMPSTER_BLUE_TIME;
	}

	return (fixTime);

}*/

CreateDMVVehicle(playerid)
{

	isDoingDMV[playerid] = true;

	new
		model,
		Float:Pos[4];

	switch(DMV_license[playerid])
	{
		case LICENSE_A:
			model = 461, Pos[0] = 1399.843, Pos[1] = 239.957, Pos[2] = 19.213, Pos[3] = 336.346;

		case LICENSE_B:
			model = 547, Pos[0] = 1399.843, Pos[1] = 239.957, Pos[2] = 19.213, Pos[3] = 336.346;

		case LICENSE_C:
			model = 498, Pos[0] = 1399.843, Pos[1] = 239.957, Pos[2] = 19.213, Pos[3] = 336.346;
	}

	new
		vid,
		spz[24];

	vid = CreateVehicle(model, Pos[0], Pos[1], Pos[2], Pos[3], 1, 1, -1, 0);
	DMV_vehicleID[playerid] = vid;

	strcat(spz, "M-DMV 111");

	for(new i; i < sizeof(spz); i++)
	{
		if(spz[i] == '1')
		{
			spz[i] = getRandomLetter();
		}
		else if(spz[i] == '2')
		{
			spz[i] = (48 + random(10));
		}

		continue;
	}

	SetVehicleNumberPlate(vid, spz);
	SetVehicleHealth(vid, 1000.0);
	veh_IsDeath[vid]=false;
	vEnum[vid][v_Learner] = true;
	format(vEnum[vid][v_SPZ], 24, spz);
	format(vEnum[vid][v_Owner], 30, "-");
	vEnum[vid][v_Fuel] = 100;
	vEnum[vid][v_FuelType] = vehicleFuelTypes[GetVehicleModel(vid)-400];
	vEnum[vid][v_Battery] = 1000;
	vEnum[vid][v_Oil] = 100.0;
	vEnum[vid][v_Siren] = 0;
	vEnum[vid][v_MileAge] = float(random(105215));
	vEnum[vid][v_Nitrous] = 0.0;
	vEnum[vid][v_Faction] = 0;
	vEnum[vid][v_tree_Count] = 0;
	
	vEnum[vid][v_bazar_Price]   = 0;
	vEnum[vid][v_bazar_Buyout]   = 0;
	vEnum[vid][v_bazar_DateAdded]   = 0;
	vEnum[vid][v_bazar_BoughtFor]   = 0;
	format(vEnum[vid][v_bazar_Desc], 256, "");
	format(vEnum[vid][v_bazar_AddedBy], MAX_PLAYER_NAME+1, "");

	vEnum[vid][v_Color_1] = 1;
	vEnum[vid][v_Color_2] = 1;

	vEnum[vid][v_def_SpawnX] = Pos[0];
	vEnum[vid][v_def_SpawnY] = Pos[1];
	vEnum[vid][v_def_SpawnZ] = Pos[2];
	vEnum[vid][v_def_SpawnA] = Pos[3];
	vEnum[vid][v_def_SpawnVW] = 0;
	vEnum[vid][v_def_SpawnINT] = 0;
	vEnum[vid][v_def_Health] = 1000.0;

	switch(model)
	{
	    case 461:
	    {
	        vEnum[vid][v_LearnerObj] = CreateDynamicObject(19310,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,150.0,150.0);
	        SetDynamicObjectMaterialText(vEnum[vid][v_LearnerObj], 0, "LEARNER", 40, "Calibri", 28, 1, -16777216, -1, 1);
    		AttachDynamicObjectToVehicle(vEnum[vid][v_LearnerObj], vid, 0.000, -1.080, 0.590, 0.000, 0.000, 90.000);
	    }
	    case 547:
		{
	        vEnum[vid][v_LearnerObj] = CreateDynamicObject(19310,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,150.0,150.0);
	        SetDynamicObjectMaterialText(vEnum[vid][v_LearnerObj], 0, "LEARNER", 40, "Calibri", 28, 1, -16777216, -1, 1);
    		AttachDynamicObjectToVehicle(vEnum[vid][v_LearnerObj], vid, 0.000, -0.300, 0.969, 0.000, 0.000, 90.000);
		}
		case 498:
		{
	        vEnum[vid][v_LearnerObj] = CreateDynamicObject(19310,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,150.0,150.0);
	        SetDynamicObjectMaterialText(vEnum[vid][v_LearnerObj], 0, "LEARNER", 40, "Calibri", 28, 1, -16777216, -1, 1);
    		AttachDynamicObjectToVehicle(vEnum[vid][v_LearnerObj], vid, 0.599, 2.630, 0.699, 0.000, 0.000, 90.000);
		}
	}

	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);

	PutPlayerInVehicleEx(playerid, vid, 0);

	return 1;
}

StartLearning(playerid)
{
	SCFM(playerid, COLOR_COMMANDUSE, "[ AUTOKOLA ] {ffffff}Vozidlo môe natartova príkazom /motor alebo draním klávesy N (default).");
	SCFM(playerid, COLOR_COMMANDUSE, "[ AUTOKOLA ] {ffffff}Pred jazdou si zapni pásy (/pasy), alebo si nasaï helmu (RP/doplnok).");
	SCFM(playerid, COLOR_COMMANDUSE, "[ AUTOKOLA ] {ffffff}Svetlá môe zapnú draním + (default) alebo príkazom /svetla. Zapni ich pod¾a znenia zákona.");
	SCFM(playerid, COLOR_COMMANDUSE, "[ AUTOKOLA ]");
	SCFM(playerid, COLOR_COMMANDUSE, "[ AUTOKOLA ] {ffffff}Vpravo vidí tatistiky, èas a maximálnu povolenú rýchlos. Rýchlos dodruj, jazdi bezpeène.");
	SCFM(playerid, COLOR_COMMANDUSE, "[ AUTOKOLA ] {ffffff}Natartuj, zabezpeè sa a pokraèuj po èervených checkpointoch.");
	SCFM(playerid, COLOR_COMMANDUSE, "[ AUTOKOLA ] {ffffff}Ak by sa nieèo stalo, môe poui /zrusittest, ale peniaze nebudú vrátené.");
	SCFM(playerid, COLOR_ADMINCMD, "[ AUTOKOLA ] {ffffff}V meste je povolená rýchlos 40MPH, mimo mesta èi na dialnici 60MPH.");

	DMV_checkpoint[playerid] = 0;
	DMV_warn[playerid] = 0;
	DMV_time[playerid][0] = 0;
	DMV_time[playerid][1] = 0;

	AddPlayerDMVCP(playerid);

	return 1;
}

AddPlayerDMVCP(playerid)
{
    g_I_playerCheckpoint[playerid] = checkp_dmv;

	switch(DMV_license[playerid])
	{
		case LICENSE_A, LICENSE_B:
		{

			if(DMV_checkpoint[playerid] >= sizeof(DMV_pos_1)-1)
			{
				FinishDMV(playerid);
				return 1;
			}

			fix_SetPlayerCheckpoint(playerid, DMV_pos_1[DMV_checkpoint[playerid]][0], DMV_pos_1[DMV_checkpoint[playerid]][1], DMV_pos_1[DMV_checkpoint[playerid]][2], 3.0);
		}

		case LICENSE_C:
		{

			if(DMV_checkpoint[playerid] >= sizeof(DMV_pos_2)-1)
			{
				FinishDMV(playerid);
				return 1;
			}

			fix_SetPlayerCheckpoint(playerid, DMV_pos_2[DMV_checkpoint[playerid]][0], DMV_pos_2[DMV_checkpoint[playerid]][1], DMV_pos_2[DMV_checkpoint[playerid]][2], 3.0);
		}
	}

	DMV_checkpoint[playerid] ++;

	return 1;
}

FinishDMV(playerid)
{
	new
		Float:vhp;

	vhac_GetVehicleHealth(DMV_vehicleID[playerid], vhp);

	PlayerTextDrawHide(playerid, TD_autoskola0[playerid]);
	PlayerTextDrawHide(playerid, TD_autoskola1[playerid]);
	PlayerTextDrawHide(playerid, TD_autoskola2[playerid]);

	if(vhp < 970.0)
	{
		DestroyDMV(playerid);
		FormatLog(log_type_buythings, "%s(%s) zlyhal v teste na opravnenie (poskodenie)!", ReturnName(playerid), ReturnIP(playerid));
		return SCFM(playerid, COLOR_COMMANDUSE, "[ AUTOKOLA ] {ffffff}Je nám ¾úto, ale pokodil si vozidlo a tvoj test bol neúspený.");
	}
	else if((DMV_license[playerid] == LICENSE_A || DMV_license[playerid] == LICENSE_B || DMV_license[playerid] == LICENSE_C) && DMV_time[playerid][0] >= 10)
	{
		DestroyDMV(playerid);
		FormatLog(log_type_buythings, "%s(%s) zlyhal v teste na opravnenie (cas)!", ReturnName(playerid), ReturnIP(playerid));
		return SCFM(playerid, COLOR_COMMANDUSE, "[ AUTOKOLA ] {ffffff}Je nám ¾úto, ale jazda ti trvala moc dlho a tvoj test bol neúspený.");
	}
	/*else if(DMV_warn[playerid] >= 7)
	{
	    DestroyDMV(playerid);
		FormatLog(log_type_buythings, "%s(%s) zlyhal v teste na opravnenie (rychlost)!", ReturnName(playerid), ReturnIP(playerid));
		return SCFM(playerid, COLOR_COMMANDUSE, "[ AUTOKOLA ] {ffffff}Je nám ¾úto, ale jazda bola rýchla (viac ako 3 míle navye) a tvoj test bol neúspený.");
	}*/

	DestroyDMV(playerid);

	SCFM(playerid, COLOR_COMMANDUSE, "[ AUTOKOLA ] {ffffff}Gratulujem. Tvoj test bol úspený. Ui si svoje nové oprávnenie!");

	web_LatestFormat("%s dokoncil test z autoskoly", GetPlayerNameEx(playerid, NO_MASK));

	if(DMV_license[playerid] == LICENSE_A)
	{
		SetPlayerInventoryItem(playerid, inv_vodicakA, 1);
		FormatLog(log_type_buythings, "%s(%s) uspel v teste na opravnenie A!", ReturnName(playerid), ReturnIP(playerid));
	}
	else if(DMV_license[playerid] == LICENSE_B)
	{
		SetPlayerInventoryItem(playerid, inv_vodicakB, 1);
		FormatLog(log_type_buythings, "%s(%s) uspel v teste na opravnenie B!", ReturnName(playerid), ReturnIP(playerid));
	}
	else if(DMV_license[playerid] == LICENSE_C)
	{
		SetPlayerInventoryItem(playerid, inv_vodicakC, 1);
		FormatLog(log_type_buythings, "%s(%s) uspel v teste na opravnenie C!", ReturnName(playerid), ReturnIP(playerid));
	}

	return 1;
}

DestroyDMV(playerid)
{

    hasSeatbelt[playerid] = false;
	RemovePlayerFromVehicle(playerid);
	SetTimerEx("timer_DestroyLearnerVehicle", 1500, false, "ii", playerid, DMV_vehicleID[playerid]);

	isDoingDMV[playerid] = false;
	DMV_checkpoint[playerid] = 0;
	DisablePlayerCheckpoint(playerid);
	g_I_playerCheckpoint[playerid] = 0;

	return 1;
}

StartDMV(playerid)
{
	switch(DMV_license[playerid])
	{
	    case LICENSE_A:
	    {

	        if(GetPlayerInventoryItem(playerid, inv_vodicakA) == 1)
	    		return SendError(playerid, "U má vodièský preukaz skupiny A!"), ShowDMVInfo(playerid, DMV_license[playerid]);

            if(ex_GetPlayerMoney(playerid) < Economy::GetPrice(ECONOMY_LIST_VODICAK_A))
			    return SendError(playerid, "Nemá dos peòazí!"), ShowDMVInfo(playerid, DMV_license[playerid]);

	        ex_GivePlayerMoney(playerid, -Economy::GetPrice(ECONOMY_LIST_VODICAK_A));
	        money_spent[playerid] += floatround(Economy::GetPrice(ECONOMY_LIST_VODICAK_A),floatround_round);
	        FormatLog(log_type_buythings, "%s(%s) si kupil vodicsky preukaz A za %d$!", ReturnName(playerid), ReturnIP(playerid), Economy::GetPrice(ECONOMY_LIST_VODICAK_A));
	        CreateDMVVehicle(playerid);
	        StartLearning(playerid);
	    }

	    case LICENSE_B:
	    {

	        if(GetPlayerInventoryItem(playerid, inv_vodicakB) == 1)
	    		return SendError(playerid, "U má vodièský preukaz skupiny B, BE!"), ShowDMVInfo(playerid, DMV_license[playerid]);

	        new
                CENA_B = Economy::GetPrice(ECONOMY_LIST_VODICAK_B);

			if(GetPlayerRoleplayLevel(playerid) <= 1)
			    CENA_B = Economy::GetPrice(ECONOMY_LIST_VODICAK_BL);

            if(ex_GetPlayerMoney(playerid) < CENA_B)
			    return SendError(playerid, "Nemá dos peòazí!"), ShowDMVInfo(playerid, DMV_license[playerid]);

	        ex_GivePlayerMoney(playerid, -CENA_B);
	        money_spent[playerid] += floatround(CENA_B,floatround_round);
	        FormatLog(log_type_buythings, "%s(%s) si kupil vodicsky preukaz B, BE za %d$!", ReturnName(playerid), ReturnIP(playerid), CENA_B);
	        CreateDMVVehicle(playerid);
	        StartLearning(playerid);

	    }

	    case LICENSE_C:
	    {

	        if(GetPlayerInventoryItem(playerid, inv_vodicakC) == 1)
	    		return SendError(playerid, "U má vodièský preukaz skupiny C, CE!"), ShowDMVInfo(playerid, DMV_license[playerid]);

            if(ex_GetPlayerMoney(playerid) < Economy::GetPrice(ECONOMY_LIST_VODICAK_C))
			    return SendError(playerid, "Nemá dos peòazí!"), ShowDMVInfo(playerid, DMV_license[playerid]);

            ex_GivePlayerMoney(playerid, -Economy::GetPrice(ECONOMY_LIST_VODICAK_C));
            money_spent[playerid] += floatround(Economy::GetPrice(ECONOMY_LIST_VODICAK_C),floatround_round);
	        FormatLog(log_type_buythings, "%s(%s) si kupil vodicsky preukaz C, CE za %d$!", ReturnName(playerid), ReturnIP(playerid), Economy::GetPrice(ECONOMY_LIST_VODICAK_C));

	        CreateDMVVehicle(playerid);
	        StartLearning(playerid);
	    }

	    case LICENSE_T:
	    {

	        if(GetPlayerInventoryItem(playerid, inv_vodicakT) == 1)
	    		return SendError(playerid, "U má vodièský preukaz skupiny T!"), ShowDMVInfo(playerid, DMV_license[playerid]);

	        if(GetPlayerInventoryItem(playerid, inv_vodicakC) < 1)
	    		return SendError(playerid, "Nemá vodièský preukaz skupiny C, CE!"), ShowDMVInfo(playerid, DMV_license[playerid]);

			if(ex_GetPlayerMoney(playerid) < Economy::GetPrice(ECONOMY_LIST_VODICAK_T))
			    return SendError(playerid, "Nemá dos peòazí!"), ShowDMVInfo(playerid, DMV_license[playerid]);

			ex_GivePlayerMoney(playerid, -Economy::GetPrice(ECONOMY_LIST_VODICAK_T));
			money_spent[playerid] += floatround(Economy::GetPrice(ECONOMY_LIST_VODICAK_T),floatround_round);
			FormatLog(log_type_buythings, "%s(%s) si kupil vodicsky preukaz T za %d$!", ReturnName(playerid), ReturnIP(playerid), Economy::GetPrice(ECONOMY_LIST_VODICAK_T));

			SetPlayerInventoryItem(playerid, inv_vodicakT, 1);

			SendSuccess(playerid, "Vodièské oprávnenie skupiny T zakúpené!");
			ShowDMV(playerid);
		}
	}

	return 1;
}

ShowDMVInfo(playerid, license)
{

	new
	    finalString[512];

	switch(license)
	{
		case LICENSE_A:
		{
		    format(finalString, 512,
			"\tTyp oprávnenia: Vodièské oprávnenie skupiny A\n\tCena oprávnenia: %d$\n\tVozidlo: PCJ-600\n\tTyp skúky: Jazda po Red County\n\tPodmienky:\n\t\t- Pokodenie menie ako 3%%\n\t\t- Dodrovanie rýchlosti\n\t\t- Èas lepí ako 10 minút", Economy::GetPrice(ECONOMY_LIST_VODICAK_A));

			format(finalString, 512,
			"%s\n\n\rAkonáhle skúku spustí, nie je moné ju zrui. Ak v skúke zlyhá, peniaze ti nebudú vrátené.\nAk naopak uspeje, peniaze ti nebudú vrátené a dostane\niadané oprávnenie. Chce spusti skúku?", finalString);
		}

		case LICENSE_B:
		{

		    new
                CENA_B = Economy::GetPrice(ECONOMY_LIST_VODICAK_B);

			if(GetPlayerRoleplayLevel(playerid) <= 1)
			    CENA_B = Economy::GetPrice(ECONOMY_LIST_VODICAK_BL);

		    format(finalString, 512,
			"\tTyp oprávnenia: Vodièské oprávnenie skupiny B, BE\n\tCena oprávnenia: %d$\n\tVozidlo: Primo\n\tTyp skúky: Jazda po Red County\n\tPodmienky:\n\t\t- Pokodenie menie ako 3%%\n\t\t- Dodrovanie rýchlosti\n\t\t- Èas lepí ako 10 minút", CENA_B);

			format(finalString, 512,
			"%s\n\n\rAkonáhle skúku spustí, nie je moné ju zrui. Ak v skúke zlyhá, peniaze ti nebudú vrátené.\nAk naopak uspeje, peniaze ti nebudú vrátené a dostane\niadané oprávnenie. Chce spusti skúku?", finalString);
		}

		case LICENSE_C:
		{
		    format(finalString, 512,
			"\tTyp oprávnenia: Vodièské oprávnenie skupiny C, CE\n\tCena oprávnenia: %d$\n\tVozidlo: Mule\n\tTyp skúky: Jazda po Red County\n\tPodmienky:\n\t\t- Pokodenie menie ako 3%%\n\t\t- Dodrovanie rýchlosti\n\t\t- Èas lepí ako 10 minút", Economy::GetPrice(ECONOMY_LIST_VODICAK_C));

			format(finalString, 512,
			"%s\n\n\rAkonáhle skúku spustí, nie je moné ju zrui. Ak v skúke zlyhá, peniaze ti nebudú vrátené.\nAk naopak uspeje, peniaze ti nebudú vrátené a dostane\niadané oprávnenie. Chce spusti skúku?", finalString);
		}

		case LICENSE_T:
		{
		    format(finalString, 512,
			"\tTyp oprávnenia: Vodièské oprávnenie skupinyT\n\tCena oprávnenia: %d$\n\tVozidlo: /\n\tTyp skúky: iadna\n\tPodmienky:\n\t\t- Vodièské oprávnenie skupiny C, CE", Economy::GetPrice(ECONOMY_LIST_VODICAK_T));

			format(finalString, 512,
			"%s\n\n\rAkonáhle odklikne áno a splòuje podmienky,\nlicencia bude zakúpená.\nChce licenciu skutoène zakúpi?", finalString);
		}
	}

	DMV_license[playerid] = license;

	ShowPlayerDialog(playerid, did_dmv_info, DIALOG_STYLE_MSGBOX, "AUTOKOLA", finalString, "ÁNO", "NIE");

	return 1;
}

ShowDMV(playerid)
{
	new
		finalString[512],
		tempString[128],

		CENA_B = Economy::GetPrice(ECONOMY_LIST_VODICAK_B);

	if(GetPlayerRoleplayLevel(playerid) <= 1)
	    CENA_B = Economy::GetPrice(ECONOMY_LIST_VODICAK_BL);

	/*
		LICENSE - GROUP A
	*/
	format(tempString, sizeof(tempString), "{ffffff}Vodièské oprávnenie skupiny A\t{2fb838}%d$\n", Economy::GetPrice(ECONOMY_LIST_VODICAK_A));
	strcat(finalString, tempString);

	/*
		LICENSE - GROUP B
	*/
	format(tempString, sizeof(tempString), "{ffffff}Vodièské oprávnenie skupiny B, BE\t{2fb838}%d$\n", CENA_B);
	strcat(finalString, tempString);

	/*
		LICENSE - GROUP C
	*/
	format(tempString, sizeof(tempString), "{ffffff}Vodièské oprávnenie skupiny C, CE\t{2fb838}%d$\n", Economy::GetPrice(ECONOMY_LIST_VODICAK_C));
	strcat(finalString, tempString);

	/*
		LICENSE - GROUP T
	*/
	format(tempString, sizeof(tempString), "{ffffff}Vodièské oprávnenie skupiny T\t{2fb838}%d$\n", Economy::GetPrice(ECONOMY_LIST_VODICAK_T));
	strcat(finalString, tempString);



	/*
	    SHOW DIALOG TO PLAYER
	*/
	ShowPlayerDialog(playerid, did_dmv, DIALOG_STYLE_TABLIST, "AUTOKOLA", finalString, "INFO", "ZRUI");
	return 1;
}

stock IsLeapYear(year)
{
    if(year % 4 == 0)
    {
        if(year % 100 == 0 && year % 400 != 0) return 0;
        else return 1;
    }
    else return 0;
}

getdateunix(timestamp)
{
	new
	    string[64],
		tm <tmTime>;

	localtime(Time:timestamp, tmTime);

	strftime(string, 64, "%d/%m/%Y %H:%M:%S", tmTime);

	return string;
}

SetVehiclesAlarm(vehicleid, yes_no, time_ms = 20000)
{

	if(!IsValidVehicle(vehicleid))
	    return 0;

	if(vEnum[vehicleid][v_AlarmItem] == 0)
	    return 0;

	if(vEnum[vehicleid][v_Alarm] == 1)
	{
	    KillTimer(vEnum[vehicleid][v_AlarmTimer]);
	    KillTimer(vEnum[vehicleid][v_AlarmTimer_2]);
	}

	vEnum[vehicleid][v_Alarm] = yes_no;

	if(yes_no == 1)
	{
	    vEnum[vehicleid][v_AlarmTimer] = SetTimerEx("timer_AlarmOff", time_ms, false, "ii", vehicleid, GetVehicleParams(vehicleid, VEHICLE_TYPE_LIGHTS));
	    vEnum[vehicleid][v_AlarmTimer_2] = SetTimerEx("timer_AlarmBeep", ALARM_BEEP_TIME, true, "i", vehicleid);
	}

	return 1;
}

GetAssistCount()
{

	new count = 0;

	foreach( new i : Player)
	{
	    if(!IsPlayerLogged(i))
			continue;

		if(hasDotaz[i])
			count ++;
	}

	return count;
}

new vehicleOperation[MAX_PLAYERS][32];

CountPlayerVehicles(playerid)
{
    new
		mql_query[128],
		pocet;

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM char_vehicles WHERE Owner = '%e'", ReturnName(playerid));

	new
	    Cache:query = mysql_query(MYSQL, mql_query);

	pocet = cache_num_rows();

	cache_delete(query);
	return pocet;
}

SpawnPlayerVehicle(playerid, bool:impounded=false)
{

    new mql_query[128];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM char_vehicles WHERE SPZ = '%e' AND isUnParked = '0'", vehicleOperation[playerid]);

	new
	    Cache:query = mysql_query(MYSQL, mql_query);

    mysql_format(MYSQL, mql_query, sizeof(mql_query), "UPDATE char_vehicles SET isUnParked = '1', Impounded = 0 WHERE SPZ = '%e'", vehicleOperation[playerid]);
    mysql_query(MYSQL, mql_query, false);

    new
	    SPZ[30],
	    Model,
	    Float:X, Float:Y, Float:Z, Float:Angle, VirtualWorld, Interior,
	    Float:pX, Float:pY, Float:pZ, Float:pAngle, pVW, pINT,
	    Color1, Color2,
	    Paintjob,
	    Siren,
		Faction_Legal,
		Faction_Ilegal,
		Float:MileAge,
		Float:Nitrous,
		Fuel,
		Battery,
		Float:Health,
		dmg_Panels,
		dmg_Doors,
		dmg_Lights,
		dmg_Tires,
		tune_Slot[14],
		Owner[30],
		SecondOwner[30],

		i = 0;

	cache_get_value_name(i, "SPZ", SPZ);
	cache_get_value_name(i, "Owner", Owner);
	cache_get_value_name(i, "SecondOwner", SecondOwner);
	cache_get_value_name_int(i, "Model", Model);
	cache_get_value_name_float(i, "X", X);
	cache_get_value_name_float(i, "Y", Y);
	cache_get_value_name_float(i, "Z", Z);
	cache_get_value_name_float(i, "Angle", Angle);
	cache_get_value_name_int(i, "VirtualWorld", VirtualWorld);
	cache_get_value_name_int(i, "Interior", Interior);
	cache_get_value_name_float(i, "Park_X", pX);
	cache_get_value_name_float(i, "Park_Y", pY);
	cache_get_value_name_float(i, "Park_Z", pZ);
	cache_get_value_name_float(i, "Park_A", pAngle);
	cache_get_value_name_int(i, "Park_VW", pVW);
	cache_get_value_name_int(i, "Park_INT", pINT);
	cache_get_value_name_int(i, "Color_1", Color1);
	cache_get_value_name_int(i, "Color_2", Color2);
	cache_get_value_name_int(i, "Paintjob", Paintjob);
	cache_get_value_name_int(i, "Siren", Siren);
	cache_get_value_name_int(i, "Faction_Legal", Faction_Legal);
	cache_get_value_name_int(i, "Faction_Ilegal", Faction_Ilegal);
	cache_get_value_name_float(i, "MileAge", MileAge);
	cache_get_value_name_float(i, "Nitrous", Nitrous);
	cache_get_value_name_int(i, "Fuel", Fuel);
	cache_get_value_name_int(i, "Battery", Battery);
	cache_get_value_name_float(i, "Health", Health);
	cache_get_value_name_int(i, "dmg_Panels", dmg_Panels);
	cache_get_value_name_int(i, "dmg_Doors", dmg_Doors);
	cache_get_value_name_int(i, "dmg_Lights", dmg_Lights);
	cache_get_value_name_int(i, "dmg_Tires", dmg_Tires);

	for(new id; id < 14; id ++)
	{
 		if(id > 13) break;

		new
  			tString[18];

		format(tString, 18, "tune_Slot%d", id);

		cache_get_value_name_int(i, tString, tune_Slot[id]);
 	}

	if(pX > -0.5 && pX < 0.5 &&
 		pY > -0.5 && pY < 0.5 &&
	 	pZ > -0.5 && pZ < 0.5)
	{
 		pX = 641.148;
   		pY = -499.903;
		pZ = 16.078;
		pAngle = 270.0;
		pVW = 0;
		pINT = 0;
	}

	new
 		vehicleid;

	if(impounded)
	    vehicleid = CreateVehicle(Model, 637.250, -587.476, 16.002, 0.0, Color1, Color2, -1, Siren);
	else
	 	vehicleid = CreateVehicle(Model, pX, pY, pZ, pAngle, Color1, Color2, -1, Siren);

    cache_get_value_name_int(i, "weapon_1", vehicleInventory_Weapons[vehicleid][0]);
    cache_get_value_name_int(i, "ammo_1", vehicleInventory_Weapons[vehicleid][1]);
    cache_get_value_name_int(i, "weapon_2", vehicleInventory_Weapons[vehicleid][2]);
    cache_get_value_name_int(i, "ammo_2", vehicleInventory_Weapons[vehicleid][3]);
    cache_get_value_name_int(i, "weapon_3", vehicleInventory_Weapons[vehicleid][4]);
    cache_get_value_name_int(i, "ammo_3", vehicleInventory_Weapons[vehicleid][5]);
    
    vEnum[vehicleid][v_bazar_Price]   = 0;
	vEnum[vehicleid][v_bazar_Buyout]   = 0;
	vEnum[vehicleid][v_bazar_DateAdded]   = 0;
	vEnum[vehicleid][v_bazar_BoughtFor]   = 0;
	format(vEnum[vehicleid][v_bazar_Desc], 256, "");
	format(vEnum[vehicleid][v_bazar_AddedBy], MAX_PLAYER_NAME+1, "");

    cache_get_value_name_int(i, "weed", vehicleInventory[vehicleid][0]);
    cache_get_value_name_int(i, "weed_seed", vehicleInventory[vehicleid][1]);
    cache_get_value_name_int(i, "pacidlo", vehicleInventory[vehicleid][2]);
    cache_get_value_name_int(i, "lano", vehicleInventory[vehicleid][3]);
    cache_get_value_name_int(i, "vrece", vehicleInventory[vehicleid][4]);
    cache_get_value_name_int(i, "puta", vehicleInventory[vehicleid][5]);
    cache_get_value_name_int(i, "rezerva", vehicleInventory[vehicleid][6]);
    cache_get_value_name_int(i, "tovar_typ", vEnum[vehicleid][v_CargoType]);
    cache_get_value_name_int(i, "tovar", vEnum[vehicleid][v_CargoQuantity]);

    cache_get_value_name_int(i, "SPZDown", vEnum[vehicleid][v_SPZDown]);
    if(vEnum[vehicleid][v_SPZDown] == 0)
		SetVehicleNumberPlate(vehicleid, SPZ);
	else
	    SetVehicleNumberPlate(vehicleid, "____");

	format(vEnum[vehicleid][v_SPZ], 24, SPZ);
	format(vEnum[vehicleid][v_Owner], 30, Owner);
	format(vEnum[vehicleid][v_SecOwner], 30, SecondOwner);

	vEnum[vehicleid][v_Color_1] = Color1;
	vEnum[vehicleid][v_Color_2] = Color2;

	vhac_SetVehicleHealth(vehicleid, Health);
	SetVehicleVirtualWorld(vehicleid, pVW);
	LinkVehicleToInterior(vehicleid, pINT);
	ChangeVehiclePaintjob(vehicleid, Paintjob);
	SetVehicleFaction(vehicleid, Faction_Legal);
	UpdateVehicleDamageStatus(vehicleid, dmg_Panels, dmg_Doors, dmg_Lights, dmg_Tires);
	for(new id; id < 14; id ++)
	{
	    if(id > 13) break;
	    AddVehicleComponent(vehicleid, tune_Slot[id]);
	}
	vEnum[vehicleid][v_MileAge] = MileAge;
	vEnum[vehicleid][v_Nitrous] = Nitrous;
	vEnum[vehicleid][v_Fuel] = Fuel;
	vEnum[vehicleid][v_FuelType] = vehicleFuelTypes[Model-400];
	vEnum[vehicleid][v_Battery] = Battery;
	vEnum[vehicleid][v_Siren] = Siren;

	vEnum[vehicleid][v_Temporary] = false;

	vEnum[vehicleid][v_def_SpawnX] = pX;
	vEnum[vehicleid][v_def_SpawnY] = pY;
	vEnum[vehicleid][v_def_SpawnZ] = pZ;
	vEnum[vehicleid][v_def_SpawnA] = pAngle;
	vEnum[vehicleid][v_def_SpawnVW] = pVW;
	vEnum[vehicleid][v_def_SpawnINT] = pINT;
	vEnum[vehicleid][v_def_Health] = 1000.0;

	cache_get_value_name_int(i, "TaxameterItem", vEnum[vehicleid][v_TaxameterItem]);
	cache_get_value_name_int(i, "CarRadio", vEnum[vehicleid][v_CarRadio]);
	cache_get_value_name_float(i, "Oil", vEnum[vehicleid][v_Oil]);
	cache_get_value_name_int(i, "AlarmItem", vEnum[vehicleid][v_AlarmItem]);
    cache_get_value_name_int(i, "NoBreakin", vEnum[vehicleid][v_NoBreakin]);
	cache_get_value_name_int(i, "PlexWindows", vEnum[vehicleid][v_TitWindows]);

	cache_get_value_name_int(i, "Sun_LDoor", vEnum[vehicleid][v_Sun_LDoor]);
	cache_get_value_name_int(i, "Sun_RDoor", vEnum[vehicleid][v_Sun_RDoor]);
	cache_get_value_name_int(i, "Sun_Hood", vEnum[vehicleid][v_Sun_Hood]);
	cache_get_value_name_int(i, "Sun_Boot", vEnum[vehicleid][v_Sun_Boot]);
	cache_get_value_name_int(i, "Sun_FBumper", vEnum[vehicleid][v_Sun_FBumper]);
	cache_get_value_name_int(i, "Sun_RBumper", vEnum[vehicleid][v_Sun_RBumper]);

	cache_delete(query);

	VehAttachObj(vehicleid);

	SendSuccess(playerid, "Vozidlo úspene odparkované!");

	if(GetPlayerVirtualWorld(playerid) == pVW && !impounded)
	{
	    g_I_playerCheckpoint[playerid] = checkp_vehicle_findme;
	    fix_SetPlayerCheckpoint(playerid, pX, pY, pZ, 4.0);
	}
	return 1;
}
Impound_ShowNearVehicles(playerid)
{

    new
		vid = 0,
		Float:pos[3],

		finalstr[2048] = "Model\tSPZ",
		tstr[128]
	;

	foreach ( new i : Vehicle ) {
		if(!IsValidVehicle(i)) continue;
		if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
		if(GetVehicleFaction(i) != 0) continue;
		GetVehiclePos(i, pos[0], pos[1], pos[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 12.0, pos[0], pos[1], pos[2])) continue;

		vid ++;

		impound_veharr[playerid][vid] = i;

		format(tstr, sizeof tstr, "\n%s\t%s", GetVehicleName(i), vEnum[i][v_SPZ]);
		strcat(finalstr, tstr);
	}

	if(vid == 0)
	{
	    InteractiveNPC::Response_Pulaski(playerid, InteractiveNPC::playernpcid[playerid], INPC_PULASKI_R_ADD_NO_RESPONSE);
		return SendError(playerid, "Nie je tu iadne vozidlo!");
	}

	impound_veharr[playerid][0] = vid+1;

	ShowPlayerDialog(playerid, did_impound_add_select, DIALOG_STYLE_TABLIST_HEADERS, "VYBER VOZIDLO", finalstr, "VYBRA", "ZRUI");

	return 1;
}

ShowPlayerVehicleGetConfirm(playerid, listitem)
{

    new mql_query[128];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM char_vehicles WHERE Owner = '%e' OR SecondOwner = '%e' ORDER BY isUnParked", ReturnName(playerid), ReturnName(playerid));

	new
	    Cache:query = mysql_query(MYSQL, mql_query),

	    SPZ[30],
	    Model,
	    Parked,
		Impounded;

    cache_get_value_name(listitem, "SPZ", SPZ);
   	cache_get_value_name_int(listitem, "Model", Model);
   	cache_get_value_name_int(listitem, "isUnParked", Parked);
   	cache_get_value_name_int(listitem, "Impounded", Impounded);

   	if(Parked == 1)
   	    return SendError(playerid, "Toto vozidlo nie je zaparkované!"), ShowPlayerVehicleGet(playerid);

    if(Impounded == 1)
   	    return SendError(playerid, "Toto vozidlo je na odtahovom parkovisku!"), ShowPlayerVehicleGet(playerid);

	new
	    finalString[144];

	format(finalString, 144, "{ffffff}> Skutoène chce spawnú vozidlo {e34f4f}%s {ffffff}so znaèkou {e34f4f}%s{ffffff}?", VehicleNames[Model-400], SPZ);
	format(vehicleOperation[playerid], 32, SPZ);

	cache_delete(query);

	return ShowPlayerDialog(playerid, did_vehicle_spawn_confirm, DIALOG_STYLE_MSGBOX, "SPAWNÚ VOZIDLO", finalString, "ÁNO", "NIE");
}

ShowPlayerVehicleGet(playerid)
{
    new mql_query[128];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM char_vehicles WHERE Owner = '%e' OR SecondOwner = '%e' ORDER BY isUnParked", ReturnName(playerid), ReturnName(playerid));

	new
	    Cache:query = mysql_query(MYSQL, mql_query);

    new
	    SPZ[30],
	    Model,
	    Parked,
	    Impounded,

	    vehCount = 0,

		finalString[512] = "Model\tSPZ\tZaparkované\n",
		tempString[128];

	for(new i; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

     	cache_get_value_name(i, "SPZ", SPZ);
     	cache_get_value_name_int(i, "Model", Model);
     	cache_get_value_name_int(i, "isUnParked", Parked);
     	cache_get_value_name_int(i, "Impounded", Impounded);

        if(Impounded == 1) format(tempString, 128, "{db3e1e}%s\t%s\tODTIAHNUTÉ\n", VehicleNames[Model-400], SPZ);
		else if(Parked == 1) format(tempString, 128, "{bfbfbf}%s\t%s\tNIE\n", VehicleNames[Model-400], SPZ);
     	else format(tempString, 128, "{ffffff}%s\t%s\tÁNO\n", VehicleNames[Model-400], SPZ);

     	strcat(finalString, tempString);

		vehCount ++;
	}

	cache_delete(query);

	if(vehCount == 0)
	    return SendError(playerid, "Nemôe spawnú iadne vozidlo!");

	ShowPlayerDialog(playerid, did_vehicle_spawn, DIALOG_STYLE_TABLIST_HEADERS, "SPAWNÚ VOZIDLO", finalString, "SPAWN", "ZAVRIE");

	return 1;
}

SavePlayerVehicle(i, destroy = 0)
{

	new
		smallQuery[128],
		bigQuery[2048],
		Cache:queryid;

	mysql_format(MYSQL, smallQuery, 128, "SELECT Model FROM char_vehicles WHERE SPZ = '%e'", vEnum[i][v_SPZ]);
	queryid = mysql_query(MYSQL, smallQuery);

	new
		pocet = cache_num_rows();

	cache_delete(queryid);

	if(pocet < 1)
	    return 0;

	new
		color1,
		color2,
		Float:health,
		Float:Pos[4],
		radioint
	;

	radioint = vEnum[i][v_CarRadio];

	GetVehiclePos(
		i, Pos[0], Pos[1], Pos[2]
	);

	GetVehicleZAngle(
		i, Pos[3]
	);

	sys_GetVehicleColor(
	    i, color1, color2
	);

	vhac_GetVehicleHealth(
		i,
		health
	);


    mysql_format(MYSQL, bigQuery, sizeof(bigQuery),
		"UPDATE char_vehicles SET X = '%f', Y = '%f', Z = '%f', Angle = '%f', VirtualWorld = '%d', Interior = '%d', Park_X = '%f', Park_Y = '%f', Park_Z = '%f', Park_A = '%f', Park_VW = '%d', Park_INT = '%d', Color_1 = '%d', Color_2 = '%d', Paintjob = '%d', Siren = '%d', Faction_Legal = '%d' WHERE SPZ = '%e'",

		Pos[0], Pos[1], Pos[2], Pos[3], GetVehicleVirtualWorld(i), ex_GetVehicleInterior(i),
		vEnum[i][v_def_SpawnX], vEnum[i][v_def_SpawnY], vEnum[i][v_def_SpawnZ], vEnum[i][v_def_SpawnA], vEnum[i][v_def_SpawnVW], vEnum[i][v_def_SpawnINT],
		color1, color2, vehicleData[i][gVeh_Paintjob],
		vEnum[i][v_Siren],
		GetVehicleFaction(i),

		vEnum[i][v_SPZ]
	);
	mysql_tquery(MYSQL, bigQuery);

	mysql_format(MYSQL, bigQuery, sizeof(bigQuery),
		"UPDATE char_vehicles SET weapon_1 = '%d', ammo_1 = '%d', weapon_2 = '%d', ammo_2 = '%d', weapon_3 = '%d', ammo_3 = '%d', weed = '%d', weed_seed = '%d', pacidlo = '%d', lano = '%d', vrece = '%d', puta = '%d', rezerva = '%d',NoBreakin='%d',PlexWindows='%d' WHERE SPZ = '%e'",

		vehicleInventory_Weapons[i][0], vehicleInventory_Weapons[i][1],
		vehicleInventory_Weapons[i][2], vehicleInventory_Weapons[i][3],
		vehicleInventory_Weapons[i][4], vehicleInventory_Weapons[i][5],

		vehicleInventory[i][0],
		vehicleInventory[i][1],
		vehicleInventory[i][2],
		vehicleInventory[i][3],
		vehicleInventory[i][4],
		vehicleInventory[i][5],
		vehicleInventory[i][6],
		
		vEnum[i][v_NoBreakin],
		vEnum[i][v_TitWindows],

		vEnum[i][v_SPZ]
	);
	mysql_tquery(MYSQL, bigQuery);

	mysql_format(MYSQL, bigQuery, sizeof(bigQuery),
		"UPDATE char_vehicles SET TaxameterItem = '%d', CarRadio = '%d', AlarmItem = '%d', Sun_LDoor = '%d', Sun_RDoor = '%d', Sun_Hood = '%d', Sun_Boot = '%d', Sun_FBumper = '%d', Sun_RBumper = '%d', Oil = '%f', MaxHealth = '%f', tovar_typ='%d',tovar='%d' WHERE SPZ = '%e'",

	    vEnum[i][v_TaxameterItem],
	    radioint,
	    vEnum[i][v_AlarmItem],

	    vEnum[i][v_Sun_LDoor], vEnum[i][v_Sun_RDoor], vEnum[i][v_Sun_Hood], vEnum[i][v_Sun_Boot], vEnum[i][v_Sun_FBumper], vEnum[i][v_Sun_RBumper],
		vEnum[i][v_Oil],
		vEnum[i][v_def_Health],

		vEnum[i][v_CargoType],
    	vEnum[i][v_CargoQuantity],

		vEnum[i][v_SPZ]
	);
	mysql_tquery(MYSQL, bigQuery);

	new
 		panels,
		doors,
		lights,
		tires,
		wind[4]
	;

	for(new x; x < 4; x++)
	{
	    if(wind[x] == -1)
	        wind[x] = 1;
	}

	GetVehicleParamsCarWindows(i, wind[0], wind[1], wind[2], wind[3]);

	GetVehicleDamageStatus(
	    i, panels, doors, lights, tires
	);

	if(destroy == 0)
	{
		mysql_format(MYSQL, bigQuery, sizeof(bigQuery),
		"UPDATE char_vehicles SET MileAge = '%f', Nitrous = '%f', Fuel = '%d', Battery = '%d', Health = '%f', dmg_Panels = '%d', dmg_Doors = '%d', dmg_Lights = '%d', dmg_Tires = '%d', Owner = '%e', param_engine = '%d', param_lights = '%d', param_doors = '%d', param_bonnet = '%d', param_boot = '%d' WHERE SPZ = '%e'",
			vEnum[i][v_MileAge], vEnum[i][v_Nitrous],
			vEnum[i][v_Fuel],
			vEnum[i][v_Battery],
			health,

			panels, doors, lights, tires,

			vEnum[i][v_Owner],

			GetVehicleParams(i, VEHICLE_TYPE_ENGINE), GetVehicleParams(i, VEHICLE_TYPE_LIGHTS), GetVehicleParams(i, VEHICLE_TYPE_DOORS), GetVehicleParams(i, VEHICLE_TYPE_BONNET), GetVehicleParams(i, VEHICLE_TYPE_BOOT),

			vEnum[i][v_SPZ]
		);
		mysql_query(MYSQL, bigQuery, false);

		mysql_format(MYSQL, bigQuery, sizeof(bigQuery),
		"UPDATE char_vehicles SET wind_0 = '%d', wind_1 = '%d', wind_2 = '%d', wind_3 = '%d' WHERE SPZ = '%e'",

		    wind[0], wind[1], wind[2], wind[3],

			vEnum[i][v_SPZ]
		);
		mysql_query(MYSQL, bigQuery, false);
	}
	else
	{
	    mysql_format(MYSQL, bigQuery, sizeof(bigQuery),
		"UPDATE char_vehicles SET MileAge = '%f', Nitrous = '%f', Fuel = '%d', Battery = '%d', Health = '%f', dmg_Panels = '%d', dmg_Doors = '%d', dmg_Lights = '%d', dmg_Tires = '%d', Owner = '%e', param_engine = '0', param_lights = '0', param_doors = '0', param_bonnet = '0', param_boot = '0', isUnParked = '0' WHERE SPZ = '%e'",
			vEnum[i][v_MileAge], vEnum[i][v_Nitrous],
			vEnum[i][v_Fuel],
			vEnum[i][v_Battery],
			health,

			panels, doors, lights, tires,

			vEnum[i][v_Owner],

			vEnum[i][v_SPZ]
		);
		mysql_query(MYSQL, bigQuery, false);

		mysql_format(MYSQL, bigQuery, sizeof(bigQuery),
		"UPDATE char_vehicles SET wind_0 = '0', wind_1 = '0', wind_2 = '0', wind_3 = '0', isUnParked = '0' WHERE SPZ = '%e'",
			vEnum[i][v_SPZ]
		);
		mysql_query(MYSQL, bigQuery, false);
	}

	format(bigQuery, sizeof(bigQuery), "UPDATE char_vehicles SET ");

	for(new ix; ix < 14; ix++)
	{
	    if(ix > 13)
	        break;

		if(ix != 0)
		{
		    format(smallQuery, 128, ", tune_Slot%d = '%d'", ix, GetVehicleComponentInSlot(i, ix));
		}
		else
		{
		    format(smallQuery, 128, "tune_Slot%d = '%d'", ix, GetVehicleComponentInSlot(i, ix));
		}

		strcat(bigQuery, smallQuery);
	}

	format(smallQuery, 128, "WHERE SPZ = '%s'", vEnum[i][v_SPZ]);

	strcat(bigQuery, smallQuery);
    mysql_query(MYSQL, bigQuery, false);

    if(destroy == 1)
	{
	    foreach ( new pl : Player )
	    {
	        if(IsPlayerInAnyVehicle(pl) && GetPlayerVehicleID(pl) == i)
	        {
	            hasSeatbelt[pl] = false;
				ClearAnimations(pl, 1);
			}
	    }
	    RemoveAttachObj(i);
		SetTimerEx("timer_DestroyPlayerVehicle", 500, false, "i", i);
	}

	return 1;
}

//Panels
decode_panels(panels, &front_left_panel, &front_right_panel, &rear_left_panel, &rear_right_panel, &windshield, &front_bumper, &rear_bumper)
{
    front_left_panel = panels & 15;
    front_right_panel = panels >> 4 & 15;
    rear_left_panel = panels >> 8 & 15;
    rear_right_panel = panels >> 12 & 15;
    windshield = panels >> 16 & 15;
    front_bumper = panels >> 20 & 15;
    rear_bumper = panels >> 24 & 15;
}
encode_panels(front_left_panel, front_right_panel, rear_left_panel, rear_right_panel, windshield, front_bumper, rear_bumper)
{
    return front_left_panel | (front_right_panel << 4) | (rear_left_panel << 8) | (rear_right_panel << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);
}

//Doors
decode_doors(doors, &bonnet, &boot, &driver_door, &passenger_door)
{
    bonnet = doors & 7;
    boot = doors >> 8 & 7;
    driver_door = doors >> 16 & 7;
    passenger_door = doors >> 24 & 7;
}
encode_doors(bonnet, boot, driver_door, passenger_door)
{
    return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24);
}

//Lights
decode_lights(lights, &front_left_light, &front_right_light, &back_lights)
{
    front_left_light = lights & 1;
    front_right_light = lights >> 2 & 1;
    back_lights = lights >> 6 & 1;
}
encode_lights(front_left_light, front_right_light, back_lights)
{
    return front_left_light | (front_right_light << 2) | (back_lights << 6);
}

//Tires
decode_tires(tires, &rear_right_tire, &front_right_tire, &rear_left_tire, &front_left_tire)
{
    rear_right_tire = tires & 1;
    front_right_tire = tires >> 1 & 1;
    rear_left_tire = tires >> 2 & 1;
    front_left_tire = tires >> 3 & 1;
}
encode_tires(rear_right_tire, front_right_tire, rear_left_tire, front_left_tire)
{
	return rear_right_tire | (front_right_tire << 1) | (rear_left_tire << 2) | (front_left_tire << 3);
}

function timer_MajakMode(vehicleid) {
    new
		Float:vhp;

	vhac_GetVehicleHealth(vehicleid, vhp);

    if(vhp < 301)
	{
        vEnum[vehicleid][v_ELM] = 0;
        return SetTimerEx("timer_MajakModeRepair", 10, false, "i", vehicleid);
    }

	if(vEnum[vehicleid][v_ELM] == 0)
		return SetTimerEx("timer_MajakModeRepair", 10, false, "i", vehicleid);

	new
		panels,
		doors,
		lights,
		tires;

	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
	vEnum[vehicleid][v_ELM] ++;
	if(vEnum[vehicleid][v_ELM] > 9) vEnum[vehicleid][v_ELM] = 1;
	if(vEnum[vehicleid][v_ELM] == 1) UpdateVehicleDamageStatus(vehicleid, panels, doors, encode_lights(1, 0, 0), tires);
	else if(vEnum[vehicleid][v_ELM] == 2) UpdateVehicleDamageStatus(vehicleid, panels, doors, encode_lights(0, 1, 1), tires);
	else if(vEnum[vehicleid][v_ELM] == 3) UpdateVehicleDamageStatus(vehicleid, panels, doors, encode_lights(1, 0, 0), tires);
	else if(vEnum[vehicleid][v_ELM] == 4) UpdateVehicleDamageStatus(vehicleid, panels, doors, encode_lights(0, 1, 0), tires);
	else if(vEnum[vehicleid][v_ELM] == 5) UpdateVehicleDamageStatus(vehicleid, panels, doors, encode_lights(1, 0, 0), tires);
	else if(vEnum[vehicleid][v_ELM] == 6) UpdateVehicleDamageStatus(vehicleid, panels, doors, encode_lights(0, 1, 1), tires);
	else if(vEnum[vehicleid][v_ELM] == 7) UpdateVehicleDamageStatus(vehicleid, panels, doors, encode_lights(0, 0, 0), tires);
	else if(vEnum[vehicleid][v_ELM] == 8) UpdateVehicleDamageStatus(vehicleid, panels, doors, encode_lights(0, 1, 1), tires);
	else if(vEnum[vehicleid][v_ELM] == 9) UpdateVehicleDamageStatus(vehicleid, panels, doors, encode_lights(1, 0, 1), tires);
	return SetTimerEx("timer_MajakMode", 200, false, "i", vehicleid);
}

function timer_MajakModeRepair(vehicleid) {
	new
		panels,
		doors,
		lights,
		tires;

	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
	UpdateVehicleDamageStatus(vehicleid, panels, doors, encode_lights(0, 0, 0), tires);
	return 1;
}

#define	ELM_TYPE_RED_B    	19286
#define	ELM_TYPE_BLUE_B   	19288
#define ELM_TYPE_WHITE_B  	19285

#define	ELM_TYPE_RED    	19290
#define	ELM_TYPE_BLUE   	19292
#define ELM_TYPE_WHITE  	19289

new
	offSets_BullBar_Front[][] = {
		// Ambulance
		{416, ELM_TYPE_RED, float:0.700, float:3.099, float:0.000},
		{416, ELM_TYPE_BLUE, float:-0.700, float:3.099, float:0.000},

	    //LSPD Cruiser
	    {596, ELM_TYPE_BLUE, float:0.300, float:2.499, float:-0.050},
	    {596, ELM_TYPE_RED, float:-0.300, float:2.499, float:-0.050},

	    // SFPD Cruiser
	    {597, ELM_TYPE_RED, float:0.300, float:2.499, float:-0.050},
	    {597, ELM_TYPE_BLUE, float:-0.300, float:2.499, float:-0.050},

	    // Premier
	    {426, ELM_TYPE_RED, float:0.300, float:2.499, float:-0.050},
	    {426, ELM_TYPE_BLUE, float:-0.300, float:2.499, float:-0.050}
};

new frontbullbarObjects[MAX_VEHICLES][10];

new
	offSets_Rear_Lights[][] = {
	    //Ambulance
	    {416, ELM_TYPE_RED, float:1.020, float:-3.779, float:-0.479},
	    {416, ELM_TYPE_BLUE, float:-1.020, float:-3.779, float:-0.479},

	    //LSPD Cruiser
	    {596, ELM_TYPE_WHITE, float:0.800, float:-2.700, float:-0.050},
	    {596, ELM_TYPE_WHITE, float:-0.800, float:-2.700, float:-0.050},

	    //Premier
	    {426, ELM_TYPE_WHITE, float:0.800, float:-2.700, float:-0.050},
	    {426, ELM_TYPE_WHITE, float:-0.800, float:-2.700, float:-0.050},

	    // SFPD Cruiser
	    {597, ELM_TYPE_WHITE, float:0.800, float:-2.700, float:-0.050},
	    {597, ELM_TYPE_WHITE, float:-0.800, float:-2.700, float:-0.050}
};

new rearLightsObjects[MAX_VEHICLES][10];

stock ex_TogglePlayerControllable(playerid, integer)
{
	ex_toggleControllable[playerid] = integer;
	return TogglePlayerControllable(playerid, integer);
}
#if defined _ALS_TogglePlayerControllable
  #undef TogglePlayerControllable
#else
  #define _ALS_TogglePlayerControllable
#endif
#define TogglePlayerControllable ex_TogglePlayerControllable

MaskToId(&id)
{
	if(id < 1000)
		return 0;

	foreach( new i : Player )
	{
		if(B_playerHasMask[i] == false)
			continue;

		if(I_playerMaskID[i] != id)
			continue;

		id = i;
		return 1;
	}

	return 1;
}

GetDistanceFromPoint( Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2 )
{
	return floatround( floatsqroot( ( ( x1 - x2 ) * ( x1 - x2 ) ) + ( ( y1 - y2 ) * ( y1 - y2 ) ) + ( ( z1 - z2 ) * ( z1 - z2 ) ) ) );
}

ShowPlayerSkinStorage(playerid)
{

    new
		finalString[256],
		tempString[128];

	if(skinStorage[playerid][0] < 1) format(tempString, 128, "[#1] iadny skin\n{ffffff}");
	else format(tempString, 128, "{d64d4d}[#1] Skin ID: %d\n{ffffff}", skinStorage[playerid][0]);

	strcat(finalString, tempString);

	if(skinStorage[playerid][1] < 1) format(tempString, 128, "[#2] iadny skin\n{ffffff}");
	else format(tempString, 128, "{d64d4d}[#2] Skin ID: %d\n{ffffff}", skinStorage[playerid][1]);

	strcat(finalString, tempString);

	if(GetPlayerDonatorLevel(playerid) < 1)
	{
		if(skinStorage[playerid][2] < 1) format(tempString, 128, "{e7b310}[#3] Iba pre Donator Level 1 a vyie\n{ffffff}");
		else format(tempString, 128, "{d64d4d}[#3] Skin ID: %d\n{ffffff}", skinStorage[playerid][2]);
	}
	else
	{
		if(skinStorage[playerid][2] < 1) format(tempString, 128, "[#3] iadny skin\n{ffffff}");
		else format(tempString, 128, "{d64d4d}[#3] Skin ID: %d\n{ffffff}", skinStorage[playerid][2]);
	}

	strcat(finalString, tempString);

	if(GetPlayerDonatorLevel(playerid) < 2)
	{
		if(skinStorage[playerid][3] < 1) format(tempString, 128, "{e7b310}[#4] Iba pre Donator Level 2 a vyie\n{ffffff}");
		else format(tempString, 128, "{d64d4d}[#4] Skin ID: %d\n{ffffff}", skinStorage[playerid][3]);
	}
	else
	{
		if(skinStorage[playerid][3] < 1) format(tempString, 128, "[#4] iadny skin\n{ffffff}");
		else format(tempString, 128, "{d64d4d}[#4] Skin ID: %d\n{ffffff}", skinStorage[playerid][3]);
	}

	strcat(finalString, tempString);

	if(GetPlayerDonatorLevel(playerid) < 3)
	{
		if(skinStorage[playerid][4] < 1) format(tempString, 128, "{e7b310}[#5] Iba pre Donator Level 3{ffffff}");
		else format(tempString, 128, "{d64d4d}[#5] Skin ID: %d{ffffff}", skinStorage[playerid][4]);
	}
	else
	{
		if(skinStorage[playerid][4] < 1) format(tempString, 128, "[#5] iadny skin{ffffff}");
		else format(tempString, 128, "{d64d4d}[#5] Skin ID: %d{ffffff}", skinStorage[playerid][4]);
	}

	strcat(finalString, tempString);

	ShowPlayerDialog(playerid, did_skinstorage_choose, DIALOG_STYLE_LIST, "VYBRA SKIN", finalString, "VYBRA", "ZAVRIE");

	return 1;
}

ReturnID(playerid)
{
    if(B_playerHasMask[playerid] == false) return playerid;
	else return I_playerMaskID[playerid];
}

GetItemName(const itemid)
{

	new
		itemName[32];

	format(itemName, 32, itemname[itemid]);

	return itemName;

}

SendRandomMessage(playerid)
{
	new i = random(sizeof(RandomMessage));

	new string[255];

	format(string, 255, str_replace("{ZVYRAZNI}", "{9bb4dd}", RandomMessage[i]));
	format(string, 255, str_replace("{DEFAULT}", "{ffffff}", string));

	strins(string, "[TIP] {ffffff}", 0);

	SendClientMessage(playerid, 0x9bb4ddff, string);

	return 1;
}

ShowPlayerOptions(playerid)
{

	new
	    string[1024],
		finalString[90],

		tprizvuk[38];

	format(tprizvuk, 38, prizvuk[playerid]);

	strcat(string, "Zmeni heslo\n");

	if(opt_TimeTd[playerid] == 1)
	    format(finalString, 82, "{FFFFFF}Textdraw èasu ( {D4434A}VYPNUTÝ {FFFFFF})\n");
	else
		format(finalString, 82, "{FFFFFF}Textdraw èasu ( {5ed443}ZAPNUTÝ {FFFFFF})\n");
	strcat(string, finalString);

	if(opt_WebTd[playerid] == 1)
	    format(finalString, 82, "{FFFFFF}Textdraw lokácie ( {D4434A}VYPNUTÝ {FFFFFF})\n");
	else
		format(finalString, 82, "{FFFFFF}Textdraw lokácie ( {5ed443}ZAPNUTÝ {FFFFFF})\n");
	strcat(string, finalString);

	if(opt_CentTd[playerid] == 1)
	    format(finalString, 82, "{FFFFFF}Textdraw centov ( {D4434A}VYPNUTÝ {FFFFFF})\n");
	else
		format(finalString, 82, "{FFFFFF}Textdraw centov ( {5ed443}ZAPNUTÝ {FFFFFF})\n");
	strcat(string, finalString);

	if(opt_PM[playerid] == 1)
	    format(finalString, 82, "{FFFFFF}Súkromné správy ( {D4434A}VYPNUTÉ {FFFFFF})\n");
	else
		format(finalString, 82, "{FFFFFF}Súkromné správy ( {5ed443}ZAPNUTÉ {FFFFFF})\n");
	strcat(string, finalString);

	if(opt_Sounds[playerid] == 1)
	    format(finalString, 82, "{FFFFFF}Dodatoèné ozvuèenie ( {D4434A}VYPNUTÉ {FFFFFF})\n");
	else
		format(finalString, 82, "{FFFFFF}Dodatoèné ozvuèenie ( {5ed443}ZAPNUTÉ {FFFFFF})\n");
	strcat(string, finalString);

	if(opt_VitalTd[playerid] == 2)
	    format(finalString, 82, "{FFFFFF}Zobrazenie ivotu, vesty ( {D4434A}VYPNUTÉ {FFFFFF})\n");
 	else if(opt_VitalTd[playerid] == 1)
	    format(finalString, 82, "{FFFFFF}Zobrazenie ivotu, vesty ( {5ed443}TÝL 2 {FFFFFF})\n");
 	else
	    format(finalString, 82, "{FFFFFF}Zobrazenie ivotu, vesty ( {5ed443}TÝL 1 {FFFFFF})\n");
	strcat(string, finalString);

	if(strlen(prizvuk[playerid]) > 0)
	    format(finalString, 82, "{FFFFFF}Prízvuk postavy ( {5ed443}%s {FFFFFF})\n", tprizvuk);
	else
	    format(finalString, 82, "{FFFFFF}Prízvuk postavy ( {D4434A}NIE {FFFFFF})\n");
    strcat(string, finalString);

    if(strlen(popis[playerid]) > 0)
	    format(finalString, 82, "{FFFFFF}Popis postavy ( {5ed443}ÁNO {FFFFFF})\n");
	else
	    format(finalString, 82, "{FFFFFF}Popis postavy ( {D4434A}NIE {FFFFFF})\n");
    strcat(string, finalString);

    if(opt_ChatAnim[playerid] == 0)
	    format(finalString, 82, "{FFFFFF}Chat animácia ( {5ed443}ZAPNUTÁ {FFFFFF})\n");
	else
	    format(finalString, 82, "{FFFFFF}Chat animácia ( {D4434A}VYPNUTÁ {FFFFFF})\n");
    strcat(string, finalString);

    if(Vyplata_TYP[playerid] == 0)
        format(finalString, 82, "{FFFFFF}Výplata ( {5ed443}EK {FFFFFF})\n");
	else
	    format(finalString, 82, "{FFFFFF}Výplata ( {5ed443}ÚÈET > %d {FFFFFF})\n", Vyplata_TYP[playerid]);
    strcat(string, finalString);

    if(opt_tachometer[playerid] == 0)
	    format(finalString, 82, "{FFFFFF}Tachometer ( {5ed443}DIGITÁLNY {FFFFFF})\n");
	else
	    format(finalString, 82, "{FFFFFF}Tachometer ( {D4434A}VYPNUTÝ {FFFFFF})\n");
    strcat(string, finalString);

    if(opt_ShowColor[playerid] == 0)
	    format(finalString, 82, "{FFFFFF}Farba mena pod¾a frakcie ( {5ed443}ZAPNUTÁ {FFFFFF})\n");
	else
	    format(finalString, 82, "{FFFFFF}Farba mena pod¾a frakcie ( {D4434A}VYPNUTÁ {FFFFFF})\n");
    strcat(string, finalString);

    if(opt_HideMaster[playerid] == 1)
	    format(finalString, 82, "{FFFFFF}Skry meno hlavného úètu ( {5ed443}ZAPNUTÉ {FFFFFF})\n");
	else
	    format(finalString, 82, "{FFFFFF}Skry meno hlavného úètu ( {D4434A}VYPNUTÉ {FFFFFF})\n");
    strcat(string, finalString);
    
    if(opt_vyppasy[playerid] == 1)
	    format(finalString, 82, "{FFFFFF}Automatické odopínanie pásov ( {5ed443}ZAPNUTÉ {FFFFFF})\n");
	else
	    format(finalString, 82, "{FFFFFF}Automatické odopínanie pásov ( {D4434A}VYPNUTÉ {FFFFFF})\n");
    strcat(string, finalString);

	ShowPlayerDialog(playerid, did_options, DIALOG_STYLE_LIST, "NASTAVENIA", string, "UPRAVI", "KONIEC");

	return 1;
}

stock AdminNews(playerid)
{

	new
	    finalString[512] = "{e34f4f}Novinky pre Administrátorov:\n\n{ffffff}";

	strcat(finalString, "- /reloadmaps\n");
	strcat(finalString, "- /prepisauto bolo upravene\n");

	ShowPlayerDialog(playerid, did_changelog, DIALOG_STYLE_MSGBOX, "CHANGELOG", finalString, "OK", "");
	return;

}

stock sys_strcmp(string1[], string2[], bool:ignorecase = false)
{
	if(strlen(string1) < 1 || strlen(string2) < 1)
	    return 1;

	return strcmp(string1, string2, ignorecase);
}
#if defined _ALS_strcmp
    #undef strcmp
#else
    #define _ALS_strcmp
#endif
#define strcmp sys_strcmp

ShowPlayerSDLocker_Guns(playerid)
{

	new
	    finalString[ 1024 ] = "{FFFFFF}";

	for(new i; i < sizeof(guns_locker_SD); i++)
	{
	    strcat(finalString, GetWeaponNameEx(guns_locker_SD[i][0]));
	    strcat(finalString, "\n");
	}

	ShowPlayerDialog(playerid, did_locker_sd_guns, DIALOG_STYLE_LIST, "ZBROJNICA", finalString, "VYBRA", "ZAVRIE");

	return 1;

}

ShowPlayerSDLocker(playerid)
{

	new
	    finalString[ 1024 ],
	    caption[ 64 ];

	format(caption, 64, factEnum[GetPlayerFaction(playerid)][fact_Name]);

	// Prvý riadok
	if(IsPlayerWorking(playerid))
	    strcat(finalString, "{d64d4d}Odís zo sluby\n");
	else
	    strcat(finalString, "{42c157}Prís do sluby\n");

	// Druhý riadok
	strcat(finalString, "{eaeaea}Zmena obleèenia\n");

	// Tretí riadok
	strcat(finalString, "{eaeaea}Zbrojnica\n{eaeaea}\n");

	// tvrtý riadok je prázdny

	// Piaty riadok
	strcat(finalString, "{d64d4d}Poda výpoveï\n");

	ShowPlayerDialog(
		playerid, did_locker_sd, DIALOG_STYLE_LIST, caption, finalString, "VYBRA", "ZAVRIE"
	);
	return 1;

}

ShowPlayerFDLocker(playerid)
{

	new
	    finalString[ 1024 ],
	    caption[ 64 ];

	format(caption, 64, factEnum[GetPlayerFaction(playerid)][fact_Name]);

	// Prvý riadok
	if(IsPlayerWorking(playerid))
	    strcat(finalString, "{d64d4d}Odís zo sluby\n");
	else
	    strcat(finalString, "{42c157}Prís do sluby\n");

	// Druhý riadok
	strcat(finalString, "{eaeaea}Zmena obleèenia\n");

	// Tretí riadok
	strcat(finalString, "{eaeaea}Zbrojnica\n{eaeaea}\n");

	// tvrtý riadok je prázdny

	// Piaty riadok
	strcat(finalString, "{d64d4d}Poda výpoveï\n");

	ShowPlayerDialog(
		playerid, did_locker_fd, DIALOG_STYLE_LIST, caption, finalString, "VYBRA", "ZAVRIE"
	);
	return 1;

}

ShowPlayerFDLocker_Guns(playerid)
{

	new
	    finalString[ 1024 ] = "{FFFFFF}";

	for(new i; i < sizeof(guns_locker_FD); i++)
	{
	    strcat(finalString, GetWeaponNameEx(guns_locker_FD[i][0]));
	    strcat(finalString, "\n");
	}

	ShowPlayerDialog(playerid, did_locker_fd_guns, DIALOG_STYLE_LIST, "ZBROJNICA", finalString, "VYBRA", "ZAVRIE");

	return 1;

}

stock SetPlayerSpecialActionEx(playerid, id)
{
	if(I_playerSpecAct[playerid] != 0)
	{
	    return 1;
	}

	SetPlayerSpecialAction(playerid, id);

	return 1;
}

rand(min, max = 0)
{

	if(max == 0)
	{
	    return random(min);
	}
	else
	{
	    return min + random(max + 1 - min);
	}

}

GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	// Created by Y_Less

	new Float:a;

	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);

	if (GetPlayerVehicleID(playerid)) {
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}

	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));

	return 1;
}

/*GetXYBehindVehicle(vehicleid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetVehiclePos(vehicleid, x, y, a);
	GetVehicleZAngle(vehicleid, a);
	x -= (distance * floatsin(-a, degrees));
	y -= (distance * floatcos(-a, degrees));
	return 1;
}*/

BanPlayer(playerid, reason[], admin[] = "System", type = 1, adminid = -1, unbanunix = 0) {
	if(type == 1) {
	    new str[512], title[32];
	    switch(GetPlayerAdminLevel(adminid)) {
		    case 0: strcat(title, "Hráè");
	 		case 1: strcat(title, "Helper");
	   		case 2: strcat(title, "Moderator");
		    default: strcat(title, "Administrator");
		}

		if(unbanunix == 0)
	    	format(str,512,"> %s %s zabanoval hráèa %s. Dôvod: %s", title, ReturnMaster(adminid), GetPlayerNameEx(playerid, NO_MASK), reason);
		else
		    format(str,512,"> %s %s zabanoval hráèa %s do %s. Dôvod: %s", title, ReturnMaster(adminid), GetPlayerNameEx(playerid, NO_MASK), getdateunix(unbanunix), reason);
		SendClientMessageToAll(COLOR_ADMINCMD, str);

		if(unbanunix == 0)
			mysql_format(MYSQL, str, sizeof str,
				"INSERT INTO punishlist (MasterAcc, Username, AdminMACC, Date, Reason, Type) VALUES ('%e', '%e', '%e', NOW(), '%e', '2')",
                ReturnMaster(playerid), ReturnName(playerid), ReturnMaster(adminid), reason
			);
		else
		    mysql_format(MYSQL, str, sizeof str,
				"INSERT INTO punishlist (MasterAcc, Username, AdminMACC, Date, Reason, Type, Unban) VALUES ('%e', '%e', '%e', NOW(), '%e', '3', '%d')",
                ReturnMaster(playerid), ReturnName(playerid), ReturnMaster(adminid), reason, unbanunix
			);

		mysql_tquery(MYSQL, str);

	} else if(type == 2) {
	    new str[512];

	    if(unbanunix == 0)
	    	format(str,512,"> %s bol zabanovaný systémom. Dôvod: %s", GetPlayerNameEx(playerid, NO_MASK), reason);
		else
		    format(str,512,"> %s bol zabanovaný systémom do %s. Dôvod: %s", GetPlayerNameEx(playerid, NO_MASK), getdateunix(unbanunix), reason);

	    SendClientMessageToAll(COLOR_ADMINCMD, str);

	    if(unbanunix == 0)
			mysql_format(MYSQL, str, sizeof str,
				"INSERT INTO punishlist (MasterAcc, Username, AdminMACC, Date, Reason, Type) VALUES ('%e', '%e', 'System', NOW(), '%e', '2')",
                ReturnMaster(playerid), ReturnName(playerid), reason
			);
		else
		    mysql_format(MYSQL, str, sizeof str,
				"INSERT INTO punishlist (MasterAcc, Username, AdminMACC, Date, Reason, Type, Unban) VALUES ('%e', '%e', 'System', NOW(), '%e', '3', '%d')",
                ReturnMaster(playerid), ReturnName(playerid), reason, unbanunix
			);

		mysql_tquery(MYSQL, str);
	}

	new str[512], IP[16]; GetPlayerIp(playerid, IP, 16);

	mysql_format(MYSQL, str, 1024, "INSERT INTO gm_ipbans (IP, Date, Reason, AdminMACC, Username, Master_Acc, UnbanUnix, gpci) VALUES ('%e', NOW(), '%e', '%e', '%e', '%e', '%d', '%e')",IP,reason,admin,ReturnName(playerid),ReturnMaster(playerid), unbanunix, ReturnGPCI(playerid));
	mysql_query(MYSQL, str, false);

	web_LatestFormat("%s byl zabanovan", GetPlayerNameEx(playerid, NO_MASK));

	KickEx(playerid);
	return 1;
}

CKPlayer(playerid, reason[], adminid, ren = 0) {
	new str[512], title[32];
 	switch(GetPlayerAdminLevel(adminid)) {
	    case 0: strcat(title, "Hráè");
		case 1: strcat(title, "Helper");
  		case 2: strcat(title, "Moderator");
	    default: strcat(title, "Administrator");
	}
    format(str,1024,"> %s %s udelil CK hráèovi %s. Dôvod: %s", title, ReturnMaster(adminid), GetPlayerNameEx(playerid, NO_MASK), reason);
    SendClientMessageToAll(COLOR_ADMINCMD, str);

	new IP[16]; GetPlayerIp(playerid, IP, 16);

	mysql_format(MYSQL, str, 1024, "UPDATE char_main SET isPKed = '%d', PKDate = NOW(), PKReason = '%e', PKAdmin = '%e' WHERE Username = '%e'",
		1+ren, reason, ReturnMaster(adminid),ReturnName(playerid));

	mysql_query(MYSQL, str, false);

	web_LatestFormat("%s dostal Character Kill", GetPlayerNameEx(playerid, NO_MASK));

	Achievement::Reward(playerid, ACHIEVEMENT_CHARACTER_KILL);

	KickEx(playerid);
	return 1;
}

KickEx(playerid) {
	SetTimerEx("timer_KickPlayer", 500, false, "d", playerid);
	return 1;
}

function timer_KickPlayer(playerid) {
	Kick(playerid);
	return 1;
}

Warp(playerid, Float:X, Float:Y, Float:Z,Float:angle,vw,interior) {
	if(IsPlayerInAnyVehicle(playerid)) {
	    SetVehiclePos(GetPlayerVehicleID(playerid),X,Y,Z);
	    SetVehicleZAngle(GetPlayerVehicleID(playerid),angle);
	    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), vw);
	    LinkVehicleToInterior(GetPlayerVehicleID(playerid), interior);
	    SetPlayerVirtualWorld(playerid,vw);
	    SetPlayerInterior(playerid,interior);
	} else {
	    SetPlayerPos(playerid,X,Y,Z);
	    SetPlayerFacingAngle(playerid,angle);
	    SetPlayerVirtualWorld(playerid,vw);
	    SetPlayerInterior(playerid,interior);
	}
	return 1;
}

getRandomLetter() {
    return 65 + random(26);
}

forward Float:randomF(Float:max);
Float:randomF(Float:max)
{
	return float(random(floatround(max*10000000,floatround_round))/10000000);
}

GetVehicleFuel(vehicleid)
{
	new
	    I_Fuel = vEnum[vehicleid][v_Fuel];

	return I_Fuel;
}

stock SetVehicleSpeed(vehicleid, Float:speed)
{
	new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, Float:a;
	GetVehicleVelocity(vehicleid, x1, y1, z1);
	GetVehiclePos(vehicleid, x2, y2, z2);
	GetVehicleZAngle(vehicleid, a); a = 360 - a;
	x1 = (floatsin(a, degrees) * (speed/85.4166672) + floatcos(a, degrees) * 0 + x2) - x2;
	y1 = (floatcos(a, degrees) * (speed/85.4166672) + floatsin(a, degrees) * 0 + y2) - y2;
	SetVehicleVelocity(vehicleid, x1, y1, z1);
}

ex_GetVehicleSpeed(vehicleid, UseMPH = 0, &speed, &Float:item)
{
	new Float:speed_x,Float:speed_y,Float:speed_z,Float:temp_speed;

	GetVehicleVelocity(vehicleid,speed_x,speed_y,speed_z);

	if(UseMPH == 0)
	{
	    //temp_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*136.666667;

	    temp_speed = floatsqroot(floatpower(speed_x, 2) + floatpower(speed_y, 2) + floatpower(speed_z, 2)) * 120;
	}
	else
	{
	    //temp_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*95.4166672;

	    temp_speed = floatsqroot(floatpower(speed_x, 2) + floatpower(speed_y, 2) + floatpower(speed_z, 2)) * 120;
	}
	item = temp_speed;
	speed = floatround(temp_speed,floatround_round);
	return 1;
}

IsPlayerNearPlayer(playerid, n_playerid, Float:radius)
{

	if(!IsPlayerStreamedIn(n_playerid, playerid) && playerid != n_playerid)
		return 0;

	new
		Float:npx,
		Float:npy,
		Float:npz;

	GetPlayerPos(n_playerid, npx, npy, npz);

	if(IsPlayerInRangeOfPoint(playerid, radius, npx, npy, npz))
		return 1;
	else
		return 0;
}

GetMonthName(month)
{
	new
		S_string[18];

	switch(month)
	{
		case 1: strcat(S_string, "Január");
		case 2: strcat(S_string, "Február");
		case 3: strcat(S_string, "Marec");
		case 4: strcat(S_string, "Apríl");
		case 5: strcat(S_string, "Máj");
		case 6: strcat(S_string, "Jún");
		case 7: strcat(S_string, "Júl");
		case 8: strcat(S_string, "August");
		case 9: strcat(S_string, "September");
		case 10: strcat(S_string, "Október");
		case 11: strcat(S_string, "November");
		case 12: strcat(S_string, "December");
		default: strcat(S_string, "N/A");
	}

	return S_string;
}

new armyshop_items[][][] = {
	{"Baseballová pálka", {15}, {5}},
	{"Golfová palica", {100}, {2}},
	{"Katana", {2500}, {8}},
	{"Lopata", {90}, {6}},
	{"Nô", {60}, {4}},
	{"Obuok", {1000}, {3}}
};

new buyfood_welcomepump_items[][][] = {
    // Meno itemu, Cena za 1ks, Kolko % hladu doplni
    {"Bacon Egg & Cheese Biscuit", {5}, {50}},
    {"Hamburger Classic", {5}, {50}},
    {"Medium Steak & Fries", {10}, {100}},
    {"Capon & Potatos", {15}, {100}},
    {"Dr. Pepper", {2}, {50}},
    {"Pissh Beer", {2}, {50}}
};

// Marco's Bistro
new buyfood_marcobistro_items[][][] = {
    // Meno itemu, Cena za 1ks, Kolko % hladu doplni
    {"Pizza Salami", {10}, {100}},
    {"Pizza Culatello", {10}, {100}},
    {"Pasta e fagioli", {10}, {100}},
    {"Cacciucco", {20}, {100}},
    {"Cappon magro", {5}, {50}},
    {"Sassicaia", {5}, {50}},
    {"Tomato Salad", {5}, {50}}
};

new buyfood_fastfood_mat_items[][][] = {
	{"Plechovka Pepsi Coly", {4}, {inv_pepsiCan}},
	{"Plechovka Coca Coly", {5}, {inv_colaCan}},
	{"Èokoládový Kit Kat", {6}, {inv_kitKatChocolate}},
	{"Pringles", {2}, {inv_pringlesChips}}
};

new buyfood_buckscoffee_items[][][] = {
	{"Moccacino", {3}, {20}},
	{"Latté", {2}, {15}},
	{"Espresso", {2}, {15}},
	{"Cappucino", {2}, {15}},
	{"Horúca èokoláda", {4}, {25}},
	{"Jahodový donut", {3}, {30}},
	{"Èokoloádový donut", {3}, {30}},
	{"Vanilkový donut", {3}, {30}},
	{"Burger", {6}, {100}},
	{"Tortilla", {5}, {80}}
};

new buyfood_hotdog_items[][][] = {
	{"Hot Dog", {5}, {70}},
	{"Hot Dog Extra", {7}, {100}},
	{"Hot Dog Americano", {6}, {100}},
	{"Èínské slíe", {10}, {100}},
	{"Coca Cola 0,5L", {2}, {80}}
};

new buyfood_burgershot_items[][][] = {
	{"Moo Kids Meal", {2}, {30}},
	{"Beef Tower", {5}, {40}},
	{"Meat Stack", {10}, {100}},
	{"Salad Meal", {5}, {50}},
	{"Heart Stopper", {7}, {80}},
	{"Bleeder Meal", {4}, {70}},
	{"Money Shot Meal", {7}, {80}},
	{"Torpedo Meal", {8}, {100}}
};

new buyfood_pizzastack_items[][][] = {
	{"Buster", {2}, {100}},
	{"Double D-Luxe", {5}, {100}},
	{"Full Rack", {10}, {100}},
	{"Salad Meal", {10}, {100}}
};

ShowPlayerBuyFoodMenu(playerid, menuid)
{

	if(!IsPlayerLogged(playerid))
	    return 0;

	new
	    S_finalString[2048],
	    S_tempString[256],
		S_caption[64];

	switch(menuid)
	{

	    case menut_marcosbistro:
	    {

	        strcat(S_finalString, "Názov produktu\tCena\n");

	        for(new i; i < sizeof(buyfood_marcobistro_items); i++)
	        {
				format(S_tempString, sizeof(S_tempString), "{FFFFFF}%s\t{2fb838}%d$\n", buyfood_marcobistro_items[i][0],buyfood_marcobistro_items[i][1][0]);
				strcat(S_finalString, S_tempString);

				format(S_caption, 64, "MARCO'S BISTRO");
	        }

	    }

	    case menut_welcome_pump:
	    {

	        strcat(S_finalString, "Názov produktu\tCena\n");

	        for(new i; i < sizeof(buyfood_welcomepump_items); i++)
	        {
				format(S_tempString, sizeof(S_tempString), "{FFFFFF}%s\t{2fb838}%d$\n", buyfood_welcomepump_items[i][0], buyfood_welcomepump_items[i][1][0]);
				strcat(S_finalString, S_tempString);

				format(S_caption, 64, "   ");
	        }
	    }

	    //Bucks Coffee Menu
	    case menut_foodshop_hotdog:
	    {

	        strcat(S_finalString, "Názov produktu\tCena\n");

	        for(new i; i < sizeof(buyfood_hotdog_items); i++)
	        {
				format(S_tempString, sizeof(S_tempString), "{FFFFFF}%s\t{2fb838}%d$\n", buyfood_hotdog_items[i][0], buyfood_hotdog_items[i][1][0]);
				strcat(S_finalString, S_tempString);

				format(S_caption, 64, "RÝCHLE OBÈERSTVENIE");
	        }

	    }

	    //Bucks Coffee Menu
	    case menut_foodshop_buckscoffee:
	    {

	        strcat(S_finalString, "Názov produktu\tCena\n");

	        for(new i; i < sizeof(buyfood_buckscoffee_items); i++)
	        {
				format(S_tempString, sizeof(S_tempString), "{FFFFFF}%s\t{2fb838}%d$\n", buyfood_buckscoffee_items[i][0], buyfood_buckscoffee_items[i][1][0]);
				strcat(S_finalString, S_tempString);

				format(S_caption, 64, "KAVIAREÒ");
	        }

	    }

	    //Automat na sladkosti
	    case menut_automat_chocolate:
	    {

	        strcat(S_finalString, "Názov produktu\tCena\n");

	        for(new i; i < sizeof(buyfood_fastfood_mat_items); i++)
	        {
				format(S_tempString, sizeof(S_tempString), "{FFFFFF}%s\t{2fb838}%d$\n", buyfood_fastfood_mat_items[i][0], buyfood_fastfood_mat_items[i][1][0]);
				strcat(S_finalString, S_tempString);

				format(S_caption, 64, "CANDY SHOP");
	        }

	    }

	    //Burger Shot
	    case menut_burgershot, menut_burgershot_drive:
	    {

	        strcat(S_finalString, "Názov produktu\tCena\n");

	        for(new i; i < sizeof(buyfood_burgershot_items); i++)
	        {
				format(S_tempString, sizeof(S_tempString), "{FFFFFF}%s\t{2fb838}%d$\n", buyfood_burgershot_items[i][0], buyfood_burgershot_items[i][1][0]);
				strcat(S_finalString, S_tempString);

				format(S_caption, 64, "BURGER SHOT");
	        }

	    }

	    //PIZZA STACK
	    case menut_pizza_stack:
	    {

	        strcat(S_finalString, "Názov produktu\tCena\n");

	        for(new i; i < sizeof(buyfood_pizzastack_items); i++)
	        {
				format(S_tempString, sizeof(S_tempString), "{FFFFFF}%s\t{2fb838}%d$\n", buyfood_pizzastack_items[i][0], buyfood_pizzastack_items[i][1][0]);
				strcat(S_finalString, S_tempString);

				format(S_caption, 64, "WELL STACKED PIZZA");
	        }

	    }
	}

	ShowPlayerDialog(playerid, menuid, DIALOG_STYLE_TABLIST_HEADERS, S_caption, S_finalString, "KÚPI", "ZRUI");

	return 1;
}

new menuitem_hardware[][][] = {
	{"Páèidlo", {99}, {inv_pacidlo}},
	{"Lano", {20}, {inv_lano}},
	{"Vrece (Pytel)", {15}, {inv_vrece}},
	{"Kocka (Kostka)", {10}, {inv_kocka}},
	{"Pár pút", {990}, {inv_puta}},
	{"Sprej", {150}, {123568}},
	{"Motorová píla", {990}, {123567}}
};

new menuitem_general[][][] = {
	{"Maska", {3500}, {inv_mask}},
	{"Plechovka Pepsi", {5}, {inv_pepsiCan}},
	{"Plechovka Coly", {5}, {inv_colaCan}},
	{"KitKat èokoláda", {4}, {inv_kitKatChocolate}},
	{"Èipsy Pringles", {5}, {inv_pringlesChips}},
	{"Balíèek cigariet (20ks)", {4}, {inv_cigarety}},
	{"Zapalovaè (20 pouití)", {3}, {inv_zapalovac}},
	{"Bandá", {20}, {inv_bandaz}}
};

new menuitem_growshop[][][] = {
	{"Semienko marihuany", {30}, {inv_weed_seed}}
};

new menuitem_electro[][][] = {
	{"Boombox", {590}, {inv_boomBox}},
	{"Mobilný telefón", {90}, {inv_telefon}},
	{"SIM karta", {40}, {inv_simcard}},
	{"Kúpi kredit", {0}, {51561561561}},
	{"Fotoaparát", {150}, {43}},
	{"Vysielaèka", {90}, {inv_vysielacka}}
};

new menuitem_fightstyle[][][] = {
	{"Bený", {0}, {4}, {float:2.45}},
	{"Boxing", {5}, {5}, {float:3.12}},
	{"Kung Fu", {10}, {6}, {float:4.86}},
	{"Kneehead", {25}, {7}, {float:5.52}},
	{"Grabkick", {25}, {15}, {float:5.21}}
};

new menuitem_car_tools[][][] = {
	{"Autobatéria", {1490}, {inv_carBattery}},
	{"Motorový olej", {490}, {inv_carOil}}
};

enum {
	storeid_none,
	storeid_normal,
	storeid_ammu,
	storeid_generalstore,
	storeid_anawalt,
}

ShowPlayerMenu(playerid, menuid)
{

	if(!IsPlayerLogged(playerid))
	    return 0;

	new
	    S_finalString[2048],
	    S_tempString[256],
		S_caption[64];

	new bizname[64], bid = GetPlayerBusiness(playerid);

	if(bid == -1)
	    format(bizname, sizeof bizname, "Item Shop");
	else
	    format(bizname, sizeof bizname, _:replaceChars(businessEnum[bid][bz_Name]));

	switch(menuid)
	{

	    //Car Tools Shop
	    case menut_car_tools:
	    {
	        ms_addItem(playerid, ITEM_TYPE_INVENTORY, inv_carBattery, "Autobateria", 390, 2975, 1, -10.0, -10.0, 45, 1.2);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, inv_carOil, "Motorovy olej", 190, 19621, 1, 0.0, 0.0, -80.0, 1);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, inv_rezerva, "Rezerva", 190, 1098, 1, 0.0, 0.0, -80.0, 1);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, inv_kanister, "5L Kanister s benzinom", 9, 1650, 1, 0.0, 0.0, -80.0, 1);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, inv_kanister, "5L Kanister s naftou", 9, 1650, 2, 0.0, 0.0, -80.0, 1);

			ms_showStore(playerid, bizname, storeid_normal);

	    }
	    
	    case menut_anawalt_obchod:
	    {
	        ms_addItem(playerid, ITEM_TYPE_INVENTORY, inv_tree_sadenica, "Sadenice stromu 1ks", 50, 779, 1, -10.0, -10.0, 45, 1.2);
	        ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 6, "Lopata", 120, 337, 1, 0.0, -45.0, 90.0, 2.2);
			ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 9, "Motorova Pila", 1050, 341, 1, 0.0, 0.0, 45.0, 1.5);

			ms_showStore(playerid, bizname, storeid_anawalt);

	    }

	    case menut_ammun:
		{
	        ms_addItem(playerid, ITEM_TYPE_WEAPON, 22, "Colt 45", Economy::GetPrice(ECONOMY_LIST_AMMO_COLT), 346, 0, 0.0, 0.0, 0.0, 1.2);
		    ms_addItem(playerid, ITEM_TYPE_WEAPON, 24, "Desert Eagle", Economy::GetPrice(ECONOMY_LIST_AMMO_DESERT), 348, 0, 0.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_WEAPON, 25, "Brokovnica", Economy::GetPrice(ECONOMY_LIST_AMMO_SHOTG), 349, 0, 0.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_WEAPON, 33, "Puska", Economy::GetPrice(ECONOMY_LIST_AMMO_PUSKA), 357, 0, 0.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_ARMOUR, 50, "Vesta", Economy::GetPrice(ECONOMY_LIST_AMMO_VESTA), 1242, 1, 0.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_naboje, "10 ammo", 25, 3013, 10, 0.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_naboje, "25 ammo", 57, 3013, 25, 0.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_naboje, "50 ammo", 105, 3013, 50, 0.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_naboje, "100 ammo", 201, 3013, 100, 0.0, 0.0, 0.0, 1.2);

			ms_showStore(playerid, bizname, storeid_ammu);
	    }

	    case menut_alcohol_shop:
		{
		    ms_addItem(playerid, ITEM_TYPE_ALCOHOL, 4, "Budweisser 0.5L 12/", 48, 1487, 500, 0.0, 0.0, 0.0, 1.2);
	        ms_addItem(playerid, ITEM_TYPE_ALCOHOL, 1, "Hennessy 0.7L 40/", 77, 19823, 700, 0.0, 0.0, 0.0, 1.2);
	        ms_addItem(playerid, ITEM_TYPE_ALCOHOL, 2, "Jack Daniels 0.7L 40/", 61, 1520, 700, 0.0, 0.0, 0.0, 1.2);
	        ms_addItem(playerid, ITEM_TYPE_ALCOHOL, 5, "Captain Morgan 0.7L 35/", 64, 19824, 700, 0.0, 0.0, 0.0, 1.2);
	        ms_addItem(playerid, ITEM_TYPE_ALCOHOL, 3, "Smirnoff Vodka 1L 37.5/", 78, 1668, 1000, 0.0, 0.0, 0.0, 1.2);
	        ms_addItem(playerid, ITEM_TYPE_ALCOHOL, 6, "Absolut Vodka 0.7L 37.5/", 65, 1668, 700, 0.0, 0.0, 0.0, 1.2);
	        ms_addItem(playerid, ITEM_TYPE_ALCOHOL, 7, "Absinth Jade Edouard 0.7L 72/", 95, 1669, 700, 0.0, 0.0, 0.0, 1.2);

			ms_showStore(playerid, bizname, storeid_normal);
	    }

	    case menut_gym:
	    {

	        strcat(S_finalString, "Názov týlu\tCena v poète XP\n");

	        for(new i; i < sizeof(menuitem_fightstyle); i++)
	        {
				format(S_tempString, sizeof(S_tempString), "{FFFFFF}%s\t{2fb838}%d XP\n", menuitem_fightstyle[i][0], menuitem_fightstyle[i][1][0]);
				strcat(S_finalString, S_tempString);
	        }

            format(S_caption, 64, "BOJOVÉ UMENIE");
	    }
	    //Grow Shop
	    case menut_grow_shop:
	    {

            ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_weeds1, "Semeno marihuany Phatt Fruity", 99, 702, 1, 0.0, 0.0, 0.0, 1.2); //cena za predaj script 20$
            ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_weeds2, "Semeno marihuany Amnesia Haze", 250, 702, 1, 0.0, 0.0, 0.0, 1.2); //60$
            ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_weeds3, "Semeno marihuany Sour Diesel", 795, 702, 1, 0.0, 0.0, 0.0, 1.2); //220$
            ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:5000, "LSD (5 davok)", 499, 19128, 5, 0.0, 0.0, 0.0, 0.8); //220$
            ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_hnojivo, "Hnojivo", 39, 1575, 1, 0.0, 0.0, 0.0, 1.2);
            ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 4, "Kuchynsky noz", 300, 335, 1, 0.0, 0.0, 0.0, 1.5);
			ms_showStore(playerid, bizname, 1);
	    }
	    //eleziarstvo
	    case menut_shop_hardware:
	    {
	        ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_pacidlo, "Pacidlo", 99, 18634, 1, 90.0, 90.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_lano, "Lano", 20, 19088, 1, 0.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_vrece, "Vrece (pytel)", 15, 2060, 1, 90.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_kocka, "Kocka (kostka)", 10, 19789, 1, 0.0, 10.0, 45.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_puta, "Puta", 990, 19418, 1, 90.0, 90.0, 0.0, 0.3);
			ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 41, "Sprej", 150, 365, 300, 0.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 9, "Motorova Pila", 990, 341, 1, 0.0, 0.0, 45.0, 1.5);

			ms_showStore(playerid, bizname, 1);

	    }

	    //General
	    case menut_general_store:
	    {
            ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_mask, "Maska", 300, 19036, 1, 90.0, 90.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_katalog, "Katalog", 300, 2855, 1, -10.0, 0.0, 0.0, 1.0);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_colaCan, "Cola", 5, 2601, 1, -10.0, 0.0, 0.0, 1.0);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_kitKatChocolate, "KitKat", 4, 19565, 1, 0.0, 0.0, 0.0, 1.0);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_pringlesChips, "Pringles", 7, 19573, 1, 0.0, 0.0, 0.0, 1.0);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_cigarety, "Cigarety", 4, 19897, 20, 90.0, 0.0, 180.0, 1.0);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_zapalovac, "Zapalovac", 3, 19998, 20, 0.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_bandaz, "Bandaz", 20, 11747, 1, -20.0, 0.0, 0.0, 1.0);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_sprite, "Sprite", 9, -1033, 1, 0.0, 0.0, 0.0, 0.1);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_petcup, "Plastove pohariky (3ks)", 49, -1052, 3, 0.0, 0.0, 0.0, 0.1);

			ms_showStore(playerid, bizname, storeid_generalstore);
	    }

	    // Lekaren
	    case menut_lekaren:
	    {
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_prometh, "Actavis Promethazine", 399, -1032, 250, 0.0, 0.0, 0.0, 0.1);

			ms_showStore(playerid, bizname, 1);
	    }

	    case menut_selldrugs:
	    {
			strcat(S_finalString, "Droga\tCena za dávku\tMinimálny poèet dávok\n");

	        strcat(S_finalString, "Marihuana Phatt Fruity\t$20\t50g\n");
	        strcat(S_finalString, "Marihuana Amnesia Haze\t$60\t70g\n");
	        strcat(S_finalString, "Marihuana Sour Diesel\t$220\t100g\n");

            format(S_caption, 64, "PREDAJ DROG");
	    }

	    //Electro
	    case menut_electro_shop:
	    {
	        ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_boomBox, "Boombox", 490, 2102, 1, 0.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_telefon, "Mobil", 50, 18872, 1, 90.0, 0.0, 0.0, 1.0);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_simcard, "SIM karta", 10, 2953, 1, 90.0, 0.0, 0.0, 0.7);
			ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 43, "Kamera", 150, 367, 30, -10.0, 0.0, 40.0, 1.0);
			ms_addItem(playerid, ITEM_TYPE_INVENTORY, _:inv_vysielacka, "Vysielacka", 30, 19942, 1, 0.0, 0.0, 0.0, 1.0);

			ms_showStore(playerid, bizname, 1);
	    }

	    case menut_sex_shop:
		{
		    ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 3, "Analna tycinka", 990, 334, 1, 0.0, 0.0, 0.0, 1.2);
		    ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 10, "Dildo", 15, 321, 1, 0.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 11, "Vibracna vagina", 10, 322, 1, 0.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 12, "Vibrator", 50, 323, 1, 0.0, 0.0, 0.0, 1.2);
			ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 13, "Vibrator", 30, 324, 1, 0.0, 0.0, 0.0, 1.2);

			ms_showStore(playerid, bizname, storeid_normal);
		}

	    // Obchod so skinmi
	    case menut_skin_shop:
	    {
			return ShowSkinShop(playerid);
	    }

	    // Autokola
	    case menut_dmv:
	    {
			return ShowDMV(playerid);
	    }

	    case menut_armyshop:
	    {

	        ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 5, "Baseballova Palka", 45, 336, 1, 0.0, -45.0, 0.0, 2.2);
			ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 2, "Golfova Palica", 300, 333, 1, 0.0, -45.0, 0.0, 2.2);
			ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 6, "Lopata", 90, 337, 1, 0.0, -45.0, 90.0, 2.2);
			ms_addItem(playerid, ITEM_TYPE_WEAPON_F, 3, "Obusok", 1000, 334, 1, 0.0, 0.0, 0.0, 1.4);

			ms_showStore(playerid, bizname, 1);

	    }
	}

	ShowPlayerDialog(playerid, menuid, DIALOG_STYLE_TABLIST_HEADERS, S_caption, S_finalString, "KÚPI", "ZRUI");

	return 1;
}

ShowPlayerBank(playerid)
{

	ShowPlayerDialog(playerid, did_banka, DIALOG_STYLE_TABLIST,
	    "NOVÉ KONTO",
		"{ffffff}Vytvori bankové konto\t{47b059}50$\n{ffffff}Vloi peniaze na konto\nZíska kreditnú kartu\nMoje bankové kontá",
		"VYBRA", "ZAVRIE");

	return 1;
}

ShowPlayerIDYear(playerid)
{
	ShowPlayerDialog(playerid, did_CityHall_idy, DIALOG_STYLE_INPUT, "OBCIANSKY PREUKAZ", "{FFFFFF}> Zadaj prosím rok narodenia tvojho charakteru...\n\nCharakter musí by narodený v rokoch 1917 - 2001.", "OK", "SPAT");
	return 0;
}

ShowPlayerIDMonth(playerid)
{
	new
		string[256] = "{FFFFFF}";

	for(new i = 1; i<13; i++)
	{
		if(i < 1 || i > 12) break;
		strcat(string, GetMonthName(i));
		strcat(string, "\n");
	}
	ShowPlayerDialog(playerid, did_CityHall_idm, DIALOG_STYLE_LIST, "OBCIANSKY PREUKAZ", string, "VYBRAT", "SPAT");
	return 0;
}

ShowPlayerIDCreateMenu(playerid)
{

	new
		S_string[512 + 256] = "{FFFFFF}",
		S_tStr[128],
		canDoIt = 1;

	if(t_ID_Date[playerid][2] < 1900)
	{
	    if(GetPlayerInventoryItem(playerid, inv_idCard)) {
	        strcat(S_string, "Rok narodenia ( {b6b6b6}Vybrané ... {ffffff})\n");
			canDoIt = 1;
	    } else {
			strcat(S_string, "Rok narodenia ( {b6b6b6}Klikni pre zmenu ... {ffffff})\n");
			canDoIt = 0;
		}
	}
	else
	{
	    if(GetPlayerInventoryItem(playerid, inv_idCard)) {
	        strcat(S_string, "Rok narodenia ( {b6b6b6}Vybrané ... {ffffff})\n");
			canDoIt = 1;
	    }
	    else
	    {
			format(S_tStr, 128, "Rok narodenia ( {b6b6b6}%d {ffffff})\n", t_ID_Date[playerid][2]);
			strcat(S_string, S_tStr);
		}
	}

	if(t_ID_Date[playerid][1] < 1)
	{
	    if(GetPlayerInventoryItem(playerid, inv_idCard)) {
            strcat(S_string, "Mesiac narodenia ( {b6b6b6}Vybrané ... {ffffff})\n");
			canDoIt = 1;
	    } else {
			strcat(S_string, "Mesiac narodenia ( {b6b6b6}Klikni pre zmenu ... {ffffff})\n");
			canDoIt = 0;
		}
	}
	else
	{
	    if(GetPlayerInventoryItem(playerid, inv_idCard)) {
            strcat(S_string, "Mesiac narodenia ( {b6b6b6}Vybrané ... {ffffff})\n");
	    } else {
			format(S_tStr, 128, "Mesiac narodenia ( {b6b6b6}%s {ffffff})\n", GetMonthName(t_ID_Date[playerid][1]));
			strcat(S_string, S_tStr);
		}
	}

	if(t_ID_Date[playerid][0] < 1)
	{
	    if(GetPlayerInventoryItem(playerid, inv_idCard)) {
            strcat(S_string, "Deò narodenia ( {b6b6b6}Vybrané ... {ffffff})\n");
	    } else {
			strcat(S_string, "Deò narodenia ( {b6b6b6}Klikni pre zmenu ... {ffffff})\n");
			canDoIt = 0;
		}
	}
	else
	{
	    if(GetPlayerInventoryItem(playerid, inv_idCard)) {
            strcat(S_string, "Deò narodenia ( {b6b6b6}Vybrané ... {ffffff})\n");
	    } else {
			format(S_tStr, 128, "Deò narodenia ( {b6b6b6}%d. {ffffff})\n", t_ID_Date[playerid][0]);
			strcat(S_string, S_tStr);
		}
	}

	if(strlen(t_ID_Place[playerid]) < 4)
	{
	    if(GetPlayerInventoryItem(playerid, inv_idCard)) {
            strcat(S_string, "Miesto narodenia ( {b6b6b6}Vybrané ... {ffffff})\n");
	    } else {
			strcat(S_string, "Miesto narodenia ( {b6b6b6}Klikni pre zmenu ... {ffffff})\n");
			canDoIt = 0;
		}
	}
	else
	{
	    if(GetPlayerInventoryItem(playerid, inv_idCard)) {
            strcat(S_string, "Miesto narodenia ( {b6b6b6}Vybrané ... {ffffff})\n");
	    } else {
			format(S_tStr, 128, "Miesto narodenia ( {b6b6b6}%s {ffffff})\n", t_ID_Place[playerid]);
			strcat(S_string, S_tStr);
		}
	}

	if(strlen(t_ID_Settlement[playerid]) < 4)
	{
		strcat(S_string, "Trvalé bydlisko ( {b6b6b6}Klikni pre zmenu ... {ffffff})\n");
		canDoIt = 0;
	}
	else
	{
		format(S_tStr, 128, "Trvalé bydlisko ( {b6b6b6}%s {ffffff})\n", t_ID_Settlement[playerid]);
		strcat(S_string, S_tStr);
	}

	if(canDoIt == 1) strcat(S_string, "{ee3535}Vybavi nový obèiansky preukaz [15$]");
	else strcat(S_string, "{aeaeae}Vybavi nový obèiansky preukaz [15$]");

	ShowPlayerDialog(playerid, did_CityHall_id, DIALOG_STYLE_LIST, "OBCIANSKY PREUKAZ", S_string, "VYBRAT", "SPAT");

	return 1;
}

ShowPlayerIDDay(playerid)
{
	new
		string[256] = "{FFFFFF}",
		pocetDni = 31;

	if(t_ID_Date[playerid][2] > 0 && !IsLeapYear(t_ID_Date[playerid][2]) && t_ID_Date[playerid][1] == 2) {
		pocetDni = 28;
	} else if(t_ID_Date[playerid][2] > 0 && IsLeapYear(t_ID_Date[playerid][2]) && t_ID_Date[playerid][1] == 2) {
		pocetDni = 29;
	} else if(t_ID_Date[playerid][1] == 4) {
		pocetDni = 30;
	} else if(t_ID_Date[playerid][1] == 6) {
		pocetDni = 30;
	} else if(t_ID_Date[playerid][1] == 9) {
		pocetDni = 30;
	} else if(t_ID_Date[playerid][1] == 11) {
		pocetDni = 30;
	}

	for(new i = 1; i<pocetDni+1; i++)
	{
		if(i < 1 || i > 31) break;

		new str[128];

		format(str,128,"%d.", i);

		strcat(string, str);
		strcat(string, "\n");
	}
	ShowPlayerDialog(playerid, did_CityHall_idd, DIALOG_STYLE_LIST, "OBCIANSKY PREUKAZ", string, "VYBRAT", "SPAT");
	return 0;
}

ShowPlayerIDPoB(playerid)
{
	ShowPlayerDialog(playerid, did_CityHall_idp, DIALOG_STYLE_INPUT, "OBCIANSKY PREUKAZ", "{FFFFFF}> Zadaj prosím miesto narodenia tvojho charakteru...\n\nMiesto charakteru musí by dlhie ako 5 a kratie ako 30 znakov.", "OK", "SPAT");
	return 0;
}

ShowPlayerIDSettlm(playerid)
{

	new
		string[512] = "{FFFFFF}Palomino Creek Town Hall (DEFAULT)\n",
		tstring[128];

	foreach( new i : Houses )
	{

	    if(houseEnum[i][ho_Number] < 1)
	        continue;

		if(strcmp(houseEnum[i][ho_Owner], ReturnName(playerid), false) && strcmp(houseEnum[i][ho_SecOwner], ReturnName(playerid), false))
		    continue;

		format(tstring, 128, "%d%s %s\n", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street]);

		strcat(string, tstring);

	}

	ShowPlayerDialog(playerid, did_CityHall_ids, DIALOG_STYLE_LIST, "OBCIANSKY PREUKAZ", string, "VYBRAT", "SPAT");
	return 0;
}

ShowPlayerFactionMember(playerid, counts)
{

    lastFacMemb[playerid] = counts;

    new
	    S_query[256],
		Cache:C_q,

		S_finalString[2048],
		S_tempString[256],
		S_caption[25];

	mysql_format(MYSQL, S_query, 256, "SELECT * FROM char_main WHERE Faction = '%d'", GetPlayerFaction(playerid));
	C_q = mysql_query(MYSQL, S_query);

	new
		Username[25],
		FactionTitle[64],
		FactionRank,
		FactionBadge,
		pridalsa,

		P_wasFound = 0;

	cache_get_value_name(counts, "Username", Username);

	format(S_caption, 25, str_replace("_", " ", Username));

	for(new i; i < 25; i++)
	    S_caption[i] = toupper(S_caption[i]);

    cache_get_value_name(counts, "FactionTitle", FactionTitle);
    cache_get_value_name_int(counts, "FactionRank", FactionRank);
    cache_get_value_name_int(counts, "FactionBadge", FactionBadge);
    cache_get_value_name_int(counts, "FactionJoined", pridalsa);

	if(strlen(FactionTitle) < 1)
 		format(FactionTitle, 64, "Novacik");

	foreach( new id : Player )
 	{
  		if(!IsPlayerLogged(id))
			continue;

		if(strcmp(ReturnName(id), Username, false))
  			continue;

		P_wasFound = 1;

	    if(P_wasFound == 1)
	        break;

	}

	if(P_wasFound == 0)
	{
	    format(S_tempString, 256, "{ffffff}Status\t{ec4848}OFFLINE\n{ffffff}Pridal sa: %s\n", getdateunix(pridalsa));
	    strcat(S_finalString, S_tempString);
	}
	else
	{
	    format(S_tempString, 256, "{ffffff}Status\t{46ec40}ONLINE\n{ffffff}Pridal sa: %s\n", getdateunix(pridalsa));
	    strcat(S_finalString, S_tempString);
	}

	format(S_tempString, 256, "{ffffff}Hodnos\t%s\n", FactionTitle);
	strcat(S_finalString, S_tempString);
	format(S_tempString, 256, "{ffffff}Rank\t%d / 10\n", FactionRank);
	strcat(S_finalString, S_tempString);
	format(S_tempString, 256, "{ffffff}Èíslo odznaku\t%d\n \n", FactionBadge);
	strcat(S_finalString, S_tempString);

	format(S_tempString, 256, "{dd5858}Vyhodi");
	strcat(S_finalString, S_tempString);


	cache_delete(C_q);

	ShowPlayerDialog(playerid, did_Faction_Member, DIALOG_STYLE_TABLIST, S_caption, S_finalString, "UPRAVI", "ZRUI");

	return 1;
}

ShowPlayerIFactionMember(playerid, counts)
{

    lastFacMemb[playerid] = counts;

    new
	    S_query[256],
		Cache:C_q,

		S_finalString[2048],
		S_tempString[256],
		S_caption[25],
		pridalsa;

	mysql_format(MYSQL, S_query, 256, "SELECT * FROM char_main WHERE Illegal_Faction = '%d' ORDER BY Username", GetPlayerIllegalFaction(playerid));
	C_q = mysql_query(MYSQL, S_query);

	new
		Username[25],
		FactionRank,

		P_wasFound = 0;

	cache_get_value_name(counts, "Username", Username);

	format(S_caption, 25, str_replace("_", " ", Username));

	for(new i; i < 25; i++)
	    S_caption[i] = toupper(S_caption[i]);

    cache_get_value_name_int(counts, "Illegal_FactionRank", FactionRank);
    cache_get_value_name_int(counts, "Illegal_Faction_Joined", pridalsa);

	foreach( new id : Player )
 	{
  		if(!IsPlayerLogged(id))
			continue;

		if(strcmp(ReturnName(id), Username, false))
  			continue;

		P_wasFound = 1;

	    if(P_wasFound == 1)
	        break;

	}

	if(P_wasFound == 0)
	{
	    format(S_tempString, 256, "{ffffff}Status\t{ec4848}OFFLINE\n{ffffff}Pridal sa: %s\n", getdateunix(pridalsa));
	    strcat(S_finalString, S_tempString);
	}
	else
	{
	    format(S_tempString, 256, "{ffffff}Status\t{46ec40}ONLINE\n{ffffff}Pridal sa: %s\n", getdateunix(pridalsa));
	    strcat(S_finalString, S_tempString);
	}

	format(S_tempString, 256, "Rank\t%d / 10\n \n", FactionRank);
	strcat(S_finalString, S_tempString);

	format(S_tempString, 256, "{dd5858}Vyhodi");
	strcat(S_finalString, S_tempString);


	cache_delete(C_q);

	ShowPlayerDialog(playerid, did_I_Faction_Member, DIALOG_STYLE_TABLIST, S_caption, S_finalString, "UPRAVI", "ZRUI");

	return 1;
}

DeletePlayerBankAccounts(playerid, forplayerid = -11)
{
	if(forplayerid == -11)
	    forplayerid = playerid;

    new
	    S_query[256],
		Cache:C_q,

		S_finalString[2048] = "Èíslo úètu\tPIN\tStav úètu\tPoplatok za zruenie\n",
		S_tempString[256];

	mysql_format(MYSQL, S_query, 256, "SELECT * FROM gm_bankaccs WHERE Owner = '%e'", ReturnName(playerid));
	C_q = mysql_query(MYSQL, S_query);

	for(new i = 0; i < cache_num_rows(); i++) {

	    new
			accid,
			pin,
			Float:cash;

	    cache_get_value_name_int(i, "AccID", accid);
	    cache_get_value_name_int(i, "PIN", pin);
	    cache_get_value_name_float(i, "Cash", cash);

	    format(S_tempString, 256, "{FFFFFF}%d\t%04d\t{68c189}%.2f$\t{dd6161}%d$\n", accid, pin, cash, 150 - floatround(cash / 10000, floatround_round));
		strcat(S_finalString, S_tempString);

	}

	cache_delete(C_q);

	ShowPlayerDialog(forplayerid, did_banka_accs, DIALOG_STYLE_TABLIST_HEADERS, "BANKOVÉ KONTÁ", S_finalString, "VYMAZA", "SPA");

	return 1;
}

AddPlayerBankDollar(playerid)
{
    new
	    S_query[256],
		Cache:C_q,

		S_finalString[2048] = "Èíslo úètu\tPIN\tStav úètu\n",
		S_tempString[256];

	mysql_format(MYSQL, S_query, 256, "SELECT * FROM gm_bankaccs WHERE Owner = '%e'", ReturnName(playerid));
	C_q = mysql_query(MYSQL, S_query);

	for(new i = 0; i < cache_num_rows(); i++) {

	    new
			accid,
			pin,
			Float:cash;

	    cache_get_value_name_int(i, "AccID", accid);
	    cache_get_value_name_int(i, "PIN", pin);
	    cache_get_value_name_float(i, "Cash", cash);

	    format(S_tempString, 256, "{FFFFFF}%d\t%04d\t{68c189}%.2f$\n", accid, pin, cash);
		strcat(S_finalString, S_tempString);

	}

	cache_delete(C_q);

	ShowPlayerDialog(playerid, did_banka_add, DIALOG_STYLE_TABLIST_HEADERS, "ZVOL KONTO", S_finalString, "VYBRA", "SPA");

	return 1;
}

PlayerBankCard(playerid)
{
    new
	    S_query[256],
		Cache:C_q,

		S_finalString[2048] = "Èíslo úètu\tPIN\tStav úètu\n",
		S_tempString[256];

	mysql_format(MYSQL, S_query, 256, "SELECT * FROM gm_bankaccs WHERE Owner = '%e'", ReturnName(playerid));
	C_q = mysql_query(MYSQL, S_query);

	for(new i = 0; i < cache_num_rows(); i++) {

	    new
			accid,
			pin,
			Float:cash;

	    cache_get_value_name_int(i, "AccID", accid);
	    cache_get_value_name_int(i, "PIN", pin);
	    cache_get_value_name_float(i, "Cash", cash);

	    format(S_tempString, 256, "{FFFFFF}%d\t%04d\t{68c189}%.2f$\n", accid, pin, cash);
		strcat(S_finalString, S_tempString);

	}

	cache_delete(C_q);

	ShowPlayerDialog(playerid, did_banka_card, DIALOG_STYLE_TABLIST_HEADERS, "ZVOL KONTO", S_finalString, "VYBRA", "SPA");

	return 1;
}

ShowPlayerFactionMemb(playerid)
{

	new
	    S_query[256],
		Cache:C_q,

		S_finalString[4096] = "Status a meno\tHodnos a rank/level\tPriiel do frakcie\n",
		S_tempString[256];

	mysql_format(MYSQL, S_query, 256, "SELECT * FROM char_main WHERE Faction = '%d'", GetPlayerFaction(playerid));
	C_q = mysql_query(MYSQL, S_query);

	for(new i = 0; i < cache_num_rows(); i++) {

	    new
			Username[25],
			FactionTitle[64],
			FactionRank,
			pridalsa,

			P_wasFound = 0;

	    cache_get_value_name(i, "Username", Username);
	    cache_get_value_name(i, "FactionTitle", FactionTitle);
	    cache_get_value_name_int(i, "FactionRank", FactionRank);
	    cache_get_value_name_int(i, "FactionJoined", pridalsa);

	    if(strlen(FactionTitle) < 1)
	        format(FactionTitle, 64, "Nováèik");

	    foreach( new id : Player )
	    {
	        if(!IsPlayerLogged(id))
				continue;

			if(strcmp(ReturnName(id), Username, false))
			    continue;

			P_wasFound = 1;

			if(GetPlayerFactionType(playerid) == FACTION_TYPE_PREPRAVA)
				format(S_tempString, 256, "{46ec40} {FFFFFF}%s\t%s (level %d)\t%s\n", str_replace("_", " ", Username), FactionTitle, FactionRank, getdateunix(pridalsa));
			else
			    format(S_tempString, 256, "{46ec40} {FFFFFF}%s\t%s %d/10\t%s\n", str_replace("_", " ", Username), FactionTitle, FactionRank, getdateunix(pridalsa));

			strcat(S_finalString, S_tempString);

			break;
	    }

	    if(P_wasFound == 1)
	        continue;

        format(S_tempString, 256, "{ec4848} {FFFFFF}%s\t%s %d/10\t%s\n", str_replace("_", " ", Username), FactionTitle, FactionRank, getdateunix(pridalsa));

		strcat(S_finalString, S_tempString);

	}

	cache_delete(C_q);

	ShowPlayerDialog(playerid, did_Faction_Members, DIALOG_STYLE_TABLIST_HEADERS, "ÈLENOVIA FRAKCIE", S_finalString, "UPRAVI", "ZRUI");

	return 1;
}

ShowPlayerIFactionMemb(playerid)
{

	new
	    S_query[256],
		Cache:C_q,

		S_finalString[2048] = "Status a meno\tRank\tPridal sa do frakcie\n",
		S_tempString[256];

	mysql_format(MYSQL, S_query, 256, "SELECT * FROM char_main WHERE Illegal_Faction = '%d' ORDER BY Username", GetPlayerIllegalFaction(playerid));
	C_q = mysql_query(MYSQL, S_query);

	for(new i = 0; i < cache_num_rows(); i++) {

	    new
			Username[25],
			FactionRank,
			pridalsa,

			P_wasFound = 0;

	    cache_get_value_name(i, "Username", Username);
	    cache_get_value_name_int(i, "Illegal_FactionRank", FactionRank);
	    cache_get_value_name_int(i, "Illegal_Faction_Joined", pridalsa);

	    foreach( new id : Player )
	    {
	        if(!IsPlayerLogged(id))
				continue;

			if(strcmp(ReturnName(id), Username, false))
			    continue;

			P_wasFound = 1;

			format(S_tempString, 256, "{46ec40} {FFFFFF}%s\t%d/10\t%s\n", str_replace("_", " ", Username), FactionRank, getdateunix(pridalsa));

			strcat(S_finalString, S_tempString);

			break;
	    }

	    if(P_wasFound == 1)
	        continue;

        format(S_tempString, 256, "{ec4848} {FFFFFF}%s\t%d/10\t%s\n", str_replace("_", " ", Username), FactionRank, getdateunix(pridalsa));

		strcat(S_finalString, S_tempString);

	}

	cache_delete(C_q);

	ShowPlayerDialog(playerid, did_I_Faction_Members, DIALOG_STYLE_TABLIST_HEADERS, "ÈLENOVIA FRAKCIE", S_finalString, "UPRAVI", "ZRUI");

	return 1;
}

ShowPlayerIFactionCasa(playerid)
{

	new
		S_string[512];

	format(S_string,512,
	    "{FFFFFF}> Môe vybra alebo vloi peniaze do kasy (Zostatok kasy je {e34f4f}%d${ffffff}).\nVybra ich môe iba rank 10, no vloi kadý.\nZadaj sumu a klikni na tlaèidlo VLOZIT/VYBRAT.\nAk chce toto okno opusti, nechaj pole prázdné a klikni na ktoréko¾vek tlaèidlo.",
	    i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Cash]);

    ShowPlayerDialog(playerid, did_I_Frakcia_Own_Kasa, DIALOG_STYLE_INPUT, "FRAKCNA KASA",
		S_string,
  		"VLOZIT", "VYBRAT");

	return 1;
}

ShowPlayerFactionCasa(playerid)
{

	new
		S_string[512];

	format(S_string,512,
	    "{FFFFFF}> Môe vybra alebo vloi peniaze do kasy (Zostatok kasy je {e34f4f}%d${ffffff}).\nVybra ich môe iba rank 10, no vloi kadý.\nZadaj sumu a klikni na tlaèidlo VLOZIT/VYBRAT.\nAk chce toto okno opusti, nechaj pole prázdné a klikni na ktoréko¾vek tlaèidlo.",
	    factEnum[GetPlayerFaction(playerid)][fact_Cash]);

    ShowPlayerDialog(playerid, did_Frakcia_Own_Kasa, DIALOG_STYLE_INPUT, "FRAKCNA KASA",
		S_string,
  		"VLOZIT", "VYBRAT");

	return 1;
}

ShowPlayerOwnFaction(playerid)
{

	new
	    S_string[512],
	    S_tempString[256],
	    S_query[256],
		i = GetPlayerFaction(playerid),
		pocetClenov = 1;

	mysql_format(MYSQL, S_query, 256, "SELECT * FROM char_main WHERE Faction = '%d'", i);
	new
	    Cache:q = mysql_query(MYSQL, S_query);
	pocetClenov = cache_num_rows();
	cache_delete(q);

	format(S_tempString, sizeof(S_tempString), "{ffffff}ID frakcie: {e34f4f}%d{ffffff}\nMeno frakcie: {e34f4f}%s{ffffff}\nTyp frakcie: {e34f4f}%s{ffffff}\nKasa frakcie: {e34f4f}%d${ffffff}\n{ffffff}Èlenovia frakcie (%d èlenov)\n{f03939}Poda výpoveï",
		i, factEnum[i][fact_Name], GetFactionTypeName(factEnum[i][fact_Type]), factEnum[i][fact_Cash], pocetClenov);

	strcat(S_string, S_tempString);
	ShowPlayerDialog(playerid, did_Frakcia_Own, DIALOG_STYLE_LIST, "FRAKCIA", S_string, "ZVOLI", "SPA");
	return 1;
}

ShowPlayerOwnIFaction(playerid)
{

	new
	    S_string[512],
	    S_tempString[512],
	    S_query[256],
		i = GetPlayerIllegalFaction(playerid),
		pocetClenov = 1;

	mysql_format(MYSQL, S_query, 256, "SELECT * FROM char_main WHERE Illegal_Faction = '%d' ORDER BY Username", i);
	new
	    Cache:q = mysql_query(MYSQL, S_query);
	pocetClenov = cache_num_rows();
	cache_delete(q);

	format(S_tempString, sizeof(S_tempString),
		"{ee5555} {ffffff}Meno frakcie: {e34f4f}%s{ffffff}\n{ee5555} {ffffff}Oprávnenie na: {e34f4f}%s{ffffff}\n{ee5555} {ffffff}Kasa frakcie: {e34f4f}%d${ffffff}\n{ffffff}{ee5555} {ffffff}Èlenovia frakcie (%d èlenov)\n{ee5555}> {ffffff}{f03939}Odís",
		i_factEnum[i][ifact_Name], GetFactionPerms(i_factEnum[i][ifact_Perm_Drug_Marijuana], i_factEnum[i][ifact_Perm_Guns], i_factEnum[i][ifact_Perm_Graffitis]), i_factEnum[i][ifact_Cash], pocetClenov);

	strcat(S_string, S_tempString);
	ShowPlayerDialog(playerid, did_I_Frakcia_Own, DIALOG_STYLE_LIST, "ILEGÁLNA FRAKCIA", S_string, "ZVOLI", "SPA");
	return 1;
}

GivePlayerPayDay(playerid, toacc = 0)
{

    g_I_VyplataExpire[playerid] = 0;

	new
	    finalPayday,
	    finalDane,
	    finalXP,
	    finalDonor,


	    finalCash;

	finalPayday = g_I_Vyplata[playerid];
	finalXP = 0;

	if(g_I_playTimeHour[playerid] < 12)
	    finalPayday += Economy::GetPrice(ECONOMY_LIST_PAYDAY_BONUS_NEW);

	switch( GetPlayerDonatorLevel(playerid) )
	{
	    case 0:
	        finalXP = 1,
			finalDonor = 0;

		case 1:
		    finalXP = 2,
			finalDonor = Economy::GetPrice(ECONOMY_LIST_DONATOR1_PD);

		case 2:
		    finalXP = 2,
			finalDonor = Economy::GetPrice(ECONOMY_LIST_DONATOR2_PD);

		case 3:
		    finalXP = 3,
			finalDonor = Economy::GetPrice(ECONOMY_LIST_DONATOR3_PD);

		default:
		    finalXP = 1,
			finalDonor = 0;
	}

	foreach( new i : Houses )
	{

		if(strcmp(houseEnum[i][ho_Owner], ReturnName(playerid), false))
		    continue;

		finalDane += floatround(float(houseEnum[i][ho_BuyPrice]) / 1000.0, floatround_round);
	}

	foreach( new i : Businesses )
	{
		if(strcmp(businessEnum[i][bz_Owner], ReturnName(playerid), false))
		    continue;

		finalDane += floatround(float(businessEnum[i][bz_BuyPrice]) / 500.0, floatround_round);

		if(businessEnum[i][bz_Tovar] <= 0)
		    continue;

		finalPayday += Economy::GetPrice(ECONOMY_LIST_PAYDAY_BONUS_BIZ);
	}

	if(GetPlayerFaction(playerid) >= 1 && GetPlayerFaction(playerid) <= 70)
	{
		if(GetPlayerFactionType(playerid) != 0 && GetPlayerFactionType(playerid) != FACTION_TYPE_PREPRAVA && GetPlayerFaction(playerid) < sizeof(factionPayday))
		{
		    finalPayday += floatround( factionPayday[GetPlayerFaction(playerid)] * (GetPlayerFactionRank(playerid) * 0.5), floatround_round);
		}
		else if(GetPlayerFactionType(playerid) == FACTION_TYPE_PREPRAVA)
		{
		    new tmpvar = PREPRAVCA_MIN_PAYOUT;
			tmpvar += (GetPlayerFactionRank(playerid) * 10);
			if(tmpvar > PREPRAVCA_MAX_PAYOUT)
			    tmpvar = PREPRAVCA_MAX_PAYOUT;

		    finalPayday += tmpvar;
		}
	}
	else
	{
	    finalPayday += Economy::GetPrice(ECONOMY_LIST_PAYDAY_UNEMPLOY);
	}

	finalCash += (finalPayday + finalDonor - finalDane);

	SCFM(playerid, 0x6699ccff		, "|_____________________| VÝPLATA |_____________________|", finalDane);
	SCFM(playerid, COLOR_WHITE		, "| Dane na zaplatenie: {e34f4f}%d${ffffff} |", finalDane);
	SCFM(playerid, COLOR_WHITE		, "| Výplata v hrubom: {e34f4f}%d${ffffff} |", finalPayday);

	if(GetPlayerDonatorLevel(playerid) == 0)
	    SCFM(playerid, COLOR_WHITE		, "| Výplata v èistom: {e34f4f}%d$ + %dXP{ffffff} |", finalCash, finalXP);
	else
		SCFM(playerid, COLOR_WHITE		, "| Výplata v èistom: {e34f4f}%d$ + %dXP {fddc52}+ %d${ffffff} |", finalCash-finalDonor, finalXP, finalDonor);

    if(g_I_playTimeHour[playerid] < 12)
	    SCFM(playerid, COLOR_WHITE		, "| Dostal si bonus %d$ k výplate, pretoe má nahraných menej ako 12 hodín! |", Economy::GetPrice(ECONOMY_LIST_PAYDAY_BONUS_NEW));

    g_I_XP[playerid] += finalXP;
    
	if(toacc == 0)
	{
		ex_GivePlayerMoney(playerid, finalCash);
		money_work[playerid] += floatround(finalCash,floatround_round);
	}

	g_B_canPickUpPayDay[playerid] = false;
	g_I_Vyplata[playerid] = 0;
	g_I_paydayTime[playerid] = 0;

	if(toacc == 1 && finalCash > 0)
	{
		new
		    Query[256];

		mysql_format(MYSQL, Query, sizeof Query, "UPDATE gm_bankaccs SET Cash = Cash + '%.2f' WHERE AccID = '%d'", float(finalCash), Vyplata_TYP[playerid]);
		mysql_tquery(MYSQL, Query);
	}
	else if(toacc == 1 && finalCash < 0)
	{
	    GivePlayerFine(ReturnName(playerid), finalCash, "Nedoplatok", "Government");
	    SCFM(playerid, COLOR_WHITE		, "| Nedoplatok %d$ môe zaplati v City Hall v sekcii Pokuty, najneskôr do 168h. |", finalCash);
	}

	if(g_I_XP[playerid] > (6 + (2 * GetPlayerRoleplayLevel(playerid))))
	{
	    SCFM(playerid, 0xD0D0D0FF, "> Má dos XP bodov, aby si si mohol kúpi upgrade na roleplay level %d! Poui /levelup, bude a to stá %d XP.", GetPlayerRoleplayLevel(playerid) + 1, (6 + 2*GetPlayerRoleplayLevel(playerid)));
	}

	return 1;
}

ShowCityHallMenu(playerid)
{

	new
	    S_string[256];

    strcat(S_string, "Vybavi obèianský preukaz\t{20a74b}(15$){ffffff}\n");
	strcat(S_string, "Zakúpi rybárske povolenie\t{20a74b}(700$){ffffff}\n");
	strcat(S_string, "Zaplati pokuty\n");
	strcat(S_string, "Prepis vozidla\n");

	ShowPlayerDialog(playerid, did_CityHall, DIALOG_STYLE_TABLIST, "TOWN HALL", S_string, "VYBRAT", "ZRUSIT");
	return 1;
}

DoExitCommandEntrance(playerid) {
	if(isInJail[playerid] == true ||ic_isInJail[playerid]==true)
	    return SendError(playerid, "Si v admin-jaile/vazeni!");

    foreach( new i : Entrances ) {
	    if(entranceEnum[i][e_posX] == 0 && entranceEnum[i][e_posY] == 0) continue;
		if(GetPlayerVirtualWorld(playerid) != (i + 10000)) continue;
		if(GetPlayerInterior(playerid) != floatround(intList[entranceEnum[i][e_InteriorID]][5], floatround_round)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, intList[entranceEnum[i][e_InteriorID]][0], intList[entranceEnum[i][e_InteriorID]][1], intList[entranceEnum[i][e_InteriorID]][2])) continue;

        if(isEntering[playerid] == true)
		    return 1;

	    isEntering[playerid] = true;
	    SetTimerEx("DisableEntering", 2000, false, "i", playerid);

		SetPlayerInterior(playerid, entranceEnum[i][e_posINT]);
		SetPlayerVirtualWorld(playerid, entranceEnum[i][e_posVW]);
		SetPlayerPos(playerid, entranceEnum[i][e_posX], entranceEnum[i][e_posY], entranceEnum[i][e_posZ]);
		SetPlayerFacingAngle(playerid, entranceEnum[i][e_posA]);

		SetCameraBehindPlayer(playerid);
		return 0;
	}
	return 1;
}

function DisableEntering(playerid)
{

	isEntering[playerid] = false;
	return 1;

}

DoEnterCommandEntrance(playerid) {
    if(isInJail[playerid] == true ||ic_isInJail[playerid]==true)
	    return SendError(playerid, "Si v admin - jaile/vazeni!");

    foreach( new i : Entrances ) {
	    if(entranceEnum[i][e_posX] == 0 && entranceEnum[i][e_posY] == 0) continue;
		if(entranceEnum[i][e_posVW] != GetPlayerVirtualWorld(playerid)) continue;
		if(entranceEnum[i][e_posINT] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, entranceEnum[i][e_posX], entranceEnum[i][e_posY], entranceEnum[i][e_posZ])) continue;

		if(isEntering[playerid] == true)
		    return 1;

	    isEntering[playerid] = true;
	    SetTimerEx("DisableEntering", 2000, false, "i", playerid);

		Streamer_UpdateEx(playerid, intList[entranceEnum[i][e_InteriorID]][0], intList[entranceEnum[i][e_InteriorID]][1], intList[entranceEnum[i][e_InteriorID]][2], i + 10000, floatround(intList[entranceEnum[i][e_InteriorID]][5], floatround_round), STREAMER_TYPE_OBJECT, 1000, 1);

		SetPlayerInterior(playerid, floatround(intList[entranceEnum[i][e_InteriorID]][5], floatround_round));
		SetPlayerVirtualWorld(playerid, i + 10000);
		//SetPlayerPos(playerid, intList[entranceEnum[i][e_InteriorID]][0], intList[entranceEnum[i][e_InteriorID]][1], intList[entranceEnum[i][e_InteriorID]][2]);
		SetPlayerFacingAngle(playerid, intList[entranceEnum[i][e_InteriorID]][3]);


		new nick[25];
		strcat(nick,ReturnName(playerid));
		strdel(nick,strfind(nick,"_",true),25);

		EnterInfo(playerid, "Ak chces vyjst, pouzi prikaz ~b~/exit~w~ pri vchodovy dverach.", 3500, 1);

		if(entranceEnum[i][e_InteriorID] > 51) {
		    TogglePlayerControllable(playerid, 0);
		    SetTimerEx("UnFreezePlayer", 2000, false, "i", playerid);
		}

		SetCameraBehindPlayer(playerid);
		return 0;
	}
	return 1;
}

DoExitCommandBusiness(playerid)
{

    if(isInJail[playerid] == true ||ic_isInJail[playerid]==true)
	    return SendError(playerid, "Si v admin - jaile/vazeni!");

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(GetPlayerVirtualWorld(playerid) != businessEnum[i][bz_Address]) continue;
		if(GetPlayerInterior(playerid) != floatround(intList[businessEnum[i][bz_InteriorID]][5], floatround_round)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, intList[businessEnum[i][bz_InteriorID]][0], intList[businessEnum[i][bz_InteriorID]][1], intList[businessEnum[i][bz_InteriorID]][2])) continue;

        if(isEntering[playerid] == true)
		    return 1;

	    isEntering[playerid] = true;
	    SetTimerEx("DisableEntering", 2000, false, "i", playerid);

		if(businessEnum[i][bz_IsLocked] == 1)
		    return SendError(playerid, "Tento biznis je zamknutý!");

		StopAudioStreamForPlayerEx(playerid);

		Streamer_UpdateEx(playerid, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ], businessEnum[i][bz_PosVirtualWorld], floatround(businessEnum[i][bz_PosInterior], floatround_round), STREAMER_TYPE_OBJECT, 1000, 1);

		SetPlayerInterior(playerid, businessEnum[i][bz_PosInterior]);
		SetPlayerVirtualWorld(playerid, businessEnum[i][bz_PosVirtualWorld]);
		SetPlayerFacingAngle(playerid, businessEnum[i][bz_PosAngle]);

		SetCameraBehindPlayer(playerid);
		return 0;
	}

	return 1;

}

DoEnterCommandBusiness(playerid) {
    if(isInJail[playerid] == true ||ic_isInJail[playerid]==true)
	    return SendError(playerid, "Si v admin - jaile/vazeni!");

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

		if(isEntering[playerid] == true)
		    return 1;

		if(businessEnum[i][bz_InteriorID] == 0)
		    return SendError(playerid, "Do tohoto biznisu sa nedá vstúpit!");

	    isEntering[playerid] = true;
	    SetTimerEx("DisableEntering", 2000, false, "i", playerid);

		if(businessEnum[i][bz_IsLocked] == 1)
		    return SendError(playerid, "Tento biznis je zamknutý!");

		if(strcmp(ReturnName(playerid), businessEnum[i][bz_Owner], false) && strcmp(ReturnName(playerid), businessEnum[i][bz_SecOwner]) && B_playerAdminSPOT[playerid] == false)
		{
		    if(businessEnum[i][bz_EntryFee] > 0 && ex_GetPlayerMoney(playerid) < businessEnum[i][bz_EntryFee])
		    	return SendError(playerid, "Nemá dos peòazí na vstup do biznisu!");

            ex_GivePlayerMoney(playerid, -businessEnum[i][bz_EntryFee]);
            money_spent[playerid] += floatround(businessEnum[i][bz_EntryFee],floatround_round);

            if(strcmp(businessEnum[i][bz_Owner], "Ne", false))
				businessEnum[i][bz_Storage] += businessEnum[i][bz_EntryFee];
			else
			{
			    for(new f; f < MAX_FACTIONS; f++)
			    {
			        if(strlen(factEnum[f][fact_Name]) < 3) continue;
				    if(factEnum[f][fact_Type] == FACTION_TYPE_GOV) {
			            factEnum[f][fact_Cash] += businessEnum[i][bz_EntryFee];
			            break;
				    }
			    }
			}
		}

		if(strlen(businessEnum[i][bz_MusicAddress]) > 1) PlayAudioStreamForPlayerEx(playerid, businessEnum[i][bz_MusicAddress]);

		Streamer_UpdateEx(playerid, intList[businessEnum[i][bz_InteriorID]][0], intList[businessEnum[i][bz_InteriorID]][1], intList[businessEnum[i][bz_InteriorID]][2], businessEnum[i][bz_Address], floatround(intList[businessEnum[i][bz_InteriorID]][5], floatround_round), STREAMER_TYPE_OBJECT, 1000, 1);

		SetPlayerInterior(playerid, floatround(intList[businessEnum[i][bz_InteriorID]][5], floatround_round));
		SetPlayerVirtualWorld(playerid, businessEnum[i][bz_Address]);
		//SetPlayerPos(playerid, intList[businessEnum[i][bz_InteriorID]][0], intList[businessEnum[i][bz_InteriorID]][1], intList[businessEnum[i][bz_InteriorID]][2]);
		SetPlayerFacingAngle(playerid, intList[businessEnum[i][bz_InteriorID]][3]);

		EnterInfo(playerid, "Ak chces vyjst, pouzi prikaz ~b~/exit~w~ pri vchodovych dverach.", 3500, 1);

		if(businessEnum[i][bz_InteriorID] > 51) {
		    TogglePlayerControllable(playerid, 0);
		    SetTimerEx("UnFreezePlayer", 2000, false, "i", playerid);
		}

		SetCameraBehindPlayer(playerid);
		return 0;
	}
	return 1;
}

DoEnterCommandArrow(playerid) {
    if(isInJail[playerid] == true ||ic_isInJail[playerid]==true)
	    return SendError(playerid, "Si v admin - jaile/vazeni!");

    for( new i; i < MAX_ARROWS; i++)
	{
	    if(arrowEnum[i][arr_X] == 0 && arrowEnum[i][arr_Y] == 0) continue;
		if(arrowEnum[i][arr_VW] != GetPlayerVirtualWorld(playerid)) continue;
		if(arrowEnum[i][arr_INTERIOR] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInDynamicArea(playerid,arrowEnum[i][arr_AreaID])) continue;

		if(isEntering[playerid] == true)
		    return 1;

		if(GetPlayerAdminLevel(playerid) < 1 && arrowEnum[i][arr_FactionId] != 0 && arrowEnum[i][arr_FactionId] != GetPlayerFaction(playerid))
		    return SendError(playerid, "Tento vchod nemôe poui!");

	    isEntering[playerid] = true;
	    SetTimerEx("DisableEntering", 2000, false, "i", playerid);

        Streamer_UpdateEx(playerid, arrowEnum[i][arr_ToX], arrowEnum[i][arr_ToY], arrowEnum[i][arr_ToZ], arrowEnum[i][arr_ToVW], arrowEnum[i][arr_ToINTERIOR], STREAMER_TYPE_OBJECT, 1000, 1);

		SetPlayerInterior(playerid, arrowEnum[i][arr_ToINTERIOR]);
		SetPlayerVirtualWorld(playerid, arrowEnum[i][arr_ToVW]);
		SetPlayerFacingAngle(playerid, arrowEnum[i][arr_ToAngle]);

		SetCameraBehindPlayer(playerid);
		return 0;
	}
	return 1;
}

DoEnterCommandGarage_V(playerid) {
    if(isInJail[playerid] == true ||ic_isInJail[playerid]==true)
	    return SendError(playerid, "Si v admin - jaile/vazeni!");

	if(!IsPlayerInAnyVehicle(playerid))
		return 1;

	if(GetPlayerVehicleSeat(playerid) != 0)
		return 1;

    foreach( new i : Garages )
	{
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, garageEnum[i][ga_vX], garageEnum[i][ga_vY], garageEnum[i][ga_vZ])) continue;

		if(isEntering[playerid] == true)
		    return 1;

	    isEntering[playerid] = true;
	    SetTimerEx("DisableEntering", 2000, false, "i", playerid);

		if(garageEnum[i][ga_IsLocked] == 1)
		{
			SendError(playerid, "Táto gará je zamknutá!");
            return 1;
		}

		if(strlen(garageEnum[i][ga_Owner]) < 3)
		{
		    SendError(playerid, "Nemôe vojs do garáe ktorá nikomu nepatrí!");
		    return 1;
		}

        Streamer_UpdateEx(playerid, garageIntList[garageEnum[i][ga_InteriorID]][4], garageIntList[garageEnum[i][ga_InteriorID]][5], garageIntList[garageEnum[i][ga_InteriorID]][6], garageEnum[i][ga_PSC], floatround(garageIntList[garageEnum[i][ga_InteriorID]][8], floatround_round), STREAMER_TYPE_OBJECT);

		SetPlayerInterior(playerid, floatround(garageIntList[garageEnum[i][ga_InteriorID]][8], floatround_round));
		SetPlayerVirtualWorld(playerid, garageEnum[i][ga_PSC]);

		LinkVehicleToInterior(GetPlayerVehicleID(playerid), floatround(garageIntList[garageEnum[i][ga_InteriorID]][8], floatround_round));
		vehicleData[GetPlayerVehicleID(playerid)][gVeh_Interior] = floatround(garageIntList[garageEnum[i][ga_InteriorID]][8], floatround_round);
		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), garageEnum[i][ga_PSC]);

		SetVehiclePos(GetPlayerVehicleID(playerid), garageIntList[garageEnum[i][ga_InteriorID]][4], garageIntList[garageEnum[i][ga_InteriorID]][5], garageIntList[garageEnum[i][ga_InteriorID]][6]);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), garageIntList[garageEnum[i][ga_InteriorID]][7]);

		foreach( new x : Player )
		{
		    if(x == playerid)
		        continue;

			if(GetPlayerVehicleID(x) == GetPlayerVehicleID(playerid))
			{
			    SetPlayerInterior(x, floatround(garageIntList[garageEnum[i][ga_InteriorID]][8], floatround_round));
				SetPlayerVirtualWorld(x, garageEnum[i][ga_PSC]);
			}
		}

		EnterInfo(playerid, "Ak chces vyjst, pouzi prikaz ~b~/exit~w~ pri garazovych vratach.", 3500, 1);

		SetCameraBehindPlayer(playerid);
		return 1;
	}
	return 1;
}

DoExitCommandGarage_V(playerid) {
    if(isInJail[playerid] == true ||ic_isInJail[playerid]==true)
	    return SendError(playerid, "Si v admin - jaile/vazeni!");

    foreach( new i : Garages )
	{
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(GetPlayerVirtualWorld(playerid) != garageEnum[i][ga_PSC]) continue;
		if(GetPlayerInterior(playerid) != floatround(garageIntList[garageEnum[i][ga_InteriorID]][8], floatround_round)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 8.0, garageIntList[garageEnum[i][ga_InteriorID]][4], garageIntList[garageEnum[i][ga_InteriorID]][5], garageIntList[garageEnum[i][ga_InteriorID]][6])) continue;

        if(isEntering[playerid] == true)
		    return 1;

	    isEntering[playerid] = true;
	    SetTimerEx("DisableEntering", 2000, false, "i", playerid);

		if(garageEnum[i][ga_IsLocked] == 1)
		{
			SendError(playerid, "Táto gará je zamknutá!");
            return 1;
		}

        Streamer_UpdateEx(playerid, garageEnum[i][ga_vX], garageEnum[i][ga_vY], garageEnum[i][ga_vZ], garageEnum[i][ga_PosVirtualWorld], garageEnum[i][ga_PosInterior], STREAMER_TYPE_OBJECT);

		SetPlayerInterior(playerid, garageEnum[i][ga_PosInterior]);
		SetPlayerVirtualWorld(playerid, garageEnum[i][ga_PosVirtualWorld]);

		LinkVehicleToInterior(GetPlayerVehicleID(playerid), garageEnum[i][ga_PosInterior]);
		vehicleData[GetPlayerVehicleID(playerid)][gVeh_Interior] = garageEnum[i][ga_PosInterior];
		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), garageEnum[i][ga_PosVirtualWorld]);
		SetVehiclePos(GetPlayerVehicleID(playerid), garageEnum[i][ga_vX], garageEnum[i][ga_vY], garageEnum[i][ga_vZ]);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), garageEnum[i][ga_vA]);

		foreach( new x : Player )
		{
		    if(x == playerid)
		        continue;

			if(GetPlayerVehicleID(x) == GetPlayerVehicleID(playerid))
			{
			    SetPlayerInterior(x, garageEnum[i][ga_PosInterior]);
				SetPlayerVirtualWorld(x, garageEnum[i][ga_PosVirtualWorld]);
			}
		}

		SetCameraBehindPlayer(playerid);
		return 1;
	}
	return 1;
}

DoEnterCommandGarage(playerid) {
    if(isInJail[playerid] == true ||ic_isInJail[playerid]==true)
	    return SendError(playerid, "Si v admin - jaile/vazeni!");

    foreach( new i : Garages )
	{
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 1.5, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;

		if(isEntering[playerid] == true)
		    return 1;

	    isEntering[playerid] = true;
	    SetTimerEx("DisableEntering", 2000, false, "i", playerid);

		if(garageEnum[i][ga_IsLocked] == 1)
		{
			SendError(playerid, "Táto gará je zamknutá!");
            return 1;
		}

        Streamer_UpdateEx(playerid, garageIntList[garageEnum[i][ga_InteriorID]][0], garageIntList[garageEnum[i][ga_InteriorID]][1], garageIntList[garageEnum[i][ga_InteriorID]][2], garageEnum[i][ga_PSC], floatround(garageIntList[garageEnum[i][ga_InteriorID]][8], floatround_round), STREAMER_TYPE_OBJECT, 1000, 1);

		SetPlayerInterior(playerid, floatround(garageIntList[garageEnum[i][ga_InteriorID]][8], floatround_round));
		SetPlayerVirtualWorld(playerid, garageEnum[i][ga_PSC]);
		//SetPlayerPos(playerid, houseIntList[garageEnum[i][ga_InteriorID]][0], houseIntList[garageEnum[i][ga_InteriorID]][1], houseIntList[garageEnum[i][ga_InteriorID]][2]);
		SetPlayerFacingAngle(playerid, garageIntList[garageEnum[i][ga_InteriorID]][3]);

		EnterInfo(playerid, "Ak chces vyjst, pouzi prikaz ~b~/exit~w~ pri vchodovych dverach.", 3500, 1);

		SetCameraBehindPlayer(playerid);
		return 0;
	}
	return 1;
}

DoExitCommandGarage(playerid) {
    if(isInJail[playerid] == true ||ic_isInJail[playerid]==true)
	    return SendError(playerid, "Si v admin - jaile/vazeni!");

    foreach( new i : Garages )
	{
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(GetPlayerVirtualWorld(playerid) != garageEnum[i][ga_PSC]) continue;
		if(GetPlayerInterior(playerid) != floatround(garageIntList[garageEnum[i][ga_InteriorID]][8], floatround_round)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, garageIntList[garageEnum[i][ga_InteriorID]][0], garageIntList[garageEnum[i][ga_InteriorID]][1], garageIntList[garageEnum[i][ga_InteriorID]][2])) continue;

        if(isEntering[playerid] == true)
		    return 1;

	    isEntering[playerid] = true;
	    SetTimerEx("DisableEntering", 2000, false, "i", playerid);

		if(garageEnum[i][ga_IsLocked] == 1)
		    return SendError(playerid, "Táto gará je zamknutá!");

        Streamer_UpdateEx(playerid, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ], garageEnum[i][ga_PosVirtualWorld], garageEnum[i][ga_PosInterior], STREAMER_TYPE_OBJECT, 1000, 1);

		SetPlayerInterior(playerid, garageEnum[i][ga_PosInterior]);
		SetPlayerVirtualWorld(playerid, garageEnum[i][ga_PosVirtualWorld]);
		//SetPlayerPos(playerid, garageEnum[i][ga_PosX], garageEnum[i][ga_PosY], garageEnum[i][ga_PosZ]);
		SetPlayerFacingAngle(playerid, garageEnum[i][ga_pA]);

		SetCameraBehindPlayer(playerid);
		return 0;
	}
	return 1;
}

DoEnterCommandHouse(playerid) {
    if(isInJail[playerid] == true ||ic_isInJail[playerid]==true)
	    return SendError(playerid, "Si v admin - jaile/vazeni!");

    foreach( new i : Houses )
	{
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 1.5, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;

		if(isEntering[playerid] == true)
		    return 1;

	    isEntering[playerid] = true;
	    SetTimerEx("DisableEntering", 2000, false, "i", playerid);

		if(houseEnum[i][ho_IsLocked] == 1)
		    return SendError(playerid, "Tento dom je zamknutý!");

		if(houseEnum[i][ho_Light] == 0)
		    PlayerTextDrawShow(playerid, houseSwitch[playerid]);
		else
		    PlayerTextDrawHide(playerid, houseSwitch[playerid]);

        Streamer_UpdateEx(playerid, houseIntList[houseEnum[i][ho_InteriorID]][0], houseIntList[houseEnum[i][ho_InteriorID]][1], houseIntList[houseEnum[i][ho_InteriorID]][2], houseEnum[i][ho_PSC], floatround(houseIntList[houseEnum[i][ho_InteriorID]][5], floatround_round), STREAMER_TYPE_OBJECT, 1000, 1);

		SetPlayerInterior(playerid, floatround(houseIntList[houseEnum[i][ho_InteriorID]][5], floatround_round));
		SetPlayerVirtualWorld(playerid, houseEnum[i][ho_PSC]);
		//SetPlayerPos(playerid, houseIntList[houseEnum[i][ho_InteriorID]][0], houseIntList[houseEnum[i][ho_InteriorID]][1], houseIntList[houseEnum[i][ho_InteriorID]][2]);
		SetPlayerFacingAngle(playerid, houseIntList[houseEnum[i][ho_InteriorID]][3]);

		EnterInfo(playerid, "Ak chces vyjst, pouzi prikaz ~b~/exit~w~ pri vchodovych dverach.~n~Ak je zhasnute, mozes zaznut prikazom ~g~/svetlo~w~.", 5000, 1);

		SetCameraBehindPlayer(playerid);
		return 0;
	}
	return 1;
}

DoExitCommandHouse(playerid) {
    if(isInJail[playerid] == true ||ic_isInJail[playerid]==true)
	    return SendError(playerid, "Si v admin - jaile/vazeni!");

    foreach( new i : Houses )
	{
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(GetPlayerVirtualWorld(playerid) != houseEnum[i][ho_PSC]) continue;
		if(GetPlayerInterior(playerid) != floatround(houseIntList[houseEnum[i][ho_InteriorID]][5], floatround_round)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, houseIntList[houseEnum[i][ho_InteriorID]][0], houseIntList[houseEnum[i][ho_InteriorID]][1], houseIntList[houseEnum[i][ho_InteriorID]][2])) continue;

        if(isEntering[playerid] == true)
		    return 1;

	    isEntering[playerid] = true;
	    SetTimerEx("DisableEntering", 2000, false, "i", playerid);

		if(houseEnum[i][ho_IsLocked] == 1)
		    return SendError(playerid, "Tento dom je zamknutý!");

        PlayerTextDrawHide(playerid, houseSwitch[playerid]);

        Streamer_UpdateEx(playerid, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ], houseEnum[i][ho_PosVirtualWorld], houseEnum[i][ho_PosInterior], STREAMER_TYPE_OBJECT, 1000, 1);

		SetPlayerInterior(playerid, houseEnum[i][ho_PosInterior]);
		SetPlayerVirtualWorld(playerid, houseEnum[i][ho_PosVirtualWorld]);
		//SetPlayerPos(playerid, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ]);
		SetPlayerFacingAngle(playerid, houseEnum[i][ho_PosAngle]);

		SetCameraBehindPlayer(playerid);
		return 0;
	}
	return 1;
}

AdminWarn(playerid, tag[] = "AdmCmd:", color = COLOR_ADMINCMD, string[], minlevel = 1)
{

	if(playerid != -1)
	{
		if(nologcmd[playerid]==true) return 1;
	}

	if(color == -1)
	    color = COLOR_ADMINCMD;

	new
	    S_finalString[512];

	format(S_finalString, 512, "%s %s", tag, string);

	foreach( new i : Player )
	{

	    if(playerid != -1 && playerid == i)
	        continue;

	    if(!IsPlayerLogged(i))
	        continue;

	    if(GetPlayerAdminLevel(i) < 1 || GetPlayerAdminLevel(i) < minlevel)
	        continue;

		if(playerid != i && B_playerAdminDuty[i] == false)
		    continue;

		SendClientMessage(i, color, S_finalString);

	}

	return 1;
}

web_AddToLatest(string[])
{
	new
	    query[1024]
	;

	mysql_format(MYSQL, query, sizeof query, "INSERT INTO web_latest (timestamp,text) VALUES (UNIX_TIMESTAMP(NOW()), '%e')", string);
	mysql_tquery(MYSQL, query);

	return 1;
}

LogString(string[], logType = 0)
{
	new
	    S_query[512];

	mysql_format(MYSQL, S_query, 512, "INSERT INTO gm_logs (Date, Type, Text) VALUES (NOW(), '%d', '%e')", logType, replaceChars(string));

	mysql_tquery(MYSQL, S_query);
	return 1;
}

StopPlayerAnimation(playerid)
{

	if(IsPlayerInAnyVehicle(playerid))
	    return 1;

	if(I_playerSpecAct[playerid] == 0 && GetPlayerSpecialAction(playerid) != 0)
	    SetPlayerSpecialAction(playerid, 0);

	ClearAnimations(playerid, 1);
	canStopAnimation[playerid] = false;
	return 1;
}

IsNumeric(const string[])
{
	new length=strlen(string);
	if (length==0) return false;
	for (new i = 0; i < length; i++)
	{
		if ((string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='.' && string[i]!=',' && string[i]!='+')|| (string[i]=='-' && i!=0) || (string[i]==',' && i==0) || (string[i]=='.' && i==0) || (string[i]=='+' && i!=0)) return false;
	}
	if (length==1 && (string[0]=='-' || string[0]=='+')) return false;
	return true;
}

ShowPlayerEditFactionMenu(playerid, listitem)
{

	if(listitem == 0)
	{
		for(new i=1; i < MAX_FACTIONS; i++)
		{
		    if(strlen(factEnum[i][fact_Name]) > 3) continue;

		    new
		        S_query[256],
		        S_codeName[64],
				day,
				month,
				year,
				hour,
				minute;

			getdate(year, month, day);
			gettime(hour, minute);

			format(S_codeName, 64, "CREATED_FACTION_%d_%d_%d_%d-%d__%d", day, month, year, hour, minute, 1000+random(9000));

			format(factEnum[i][fact_Name], 64, S_codeName);
			factEnum[i][fact_Type] = 0;
			factEnum[i][fact_Cash] = 0;

		    mysql_format(MYSQL, S_query, 256, "INSERT INTO gm_factions (ID, Name, Type, Cash) VALUES ('%d', '%e', '0', '0')", i, S_codeName);
			mysql_tquery(MYSQL, S_query);

			format(S_query, 256, "Vytvoril si novú frakciu s ID %d. Názov je: %s", i, S_codeName);
			SendSuccess(playerid, S_query);

			ShowPlayerFactionList(playerid);

		    return 1;
		}
	}

    new
		S_string[2048],
		S_finalString[2048],
		I_pocet = 0;

    for(new i=1; i < MAX_FACTIONS; i++)
	{
	    if(strlen(factEnum[i][fact_Name]) < 3) continue;

		I_pocet ++;

	    if(I_pocet != listitem) continue;

	    g_I_editFaction[playerid] = i;
	    g_I_listItem[playerid] = listitem;

	    format(S_finalString, sizeof(S_finalString), "{ffffff}ID frakcie: {e34f4f}%d{ffffff}\nMeno frakcie: {e34f4f}%s{ffffff}\nTyp frakcie: {e34f4f}%s{ffffff}\nKasa frakcie: {e34f4f}%d${ffffff}\n{f03939}Vymaza frakciu",
			i, factEnum[i][fact_Name], GetFactionTypeName(factEnum[i][fact_Type]), factEnum[i][fact_Cash]);

		strcat(S_string, S_finalString);
	}

	ShowPlayerDialog(playerid, did_Frakcie_EditEx, DIALOG_STYLE_LIST, "UPRAVI FRAKCIU", S_string, "ZVOLI", "SPA");
	return 1;
}

ShowPlayerFactionList(playerid)
{

	new
		S_string[256*4] = "> Vytvori novú frakciu\n",
		S_finalString[64+8];

	for(new i=1; i < MAX_FACTIONS; i++)
	{
	    if(strlen(factEnum[i][fact_Name]) < 3) continue;

	    format(S_finalString, sizeof(S_finalString), "[#%d] %s\n",
			i, factEnum[i][fact_Name]);

		strcat(S_string, S_finalString);
	}

	ShowPlayerDialog(playerid, did_Frakcie_Edit, DIALOG_STYLE_LIST, "ZOZNAM FRAKCIÍ", S_string, "UPRAVI", "KONIEC");
	return 1;
}

ShowPlayerIllegalFactionList(playerid)
{

	new
		S_string[256*4] = "> Vytvori novú ilegálku\n",
		S_finalString[64+8];

	for(new i=1; i < MAX_ILLEGAL_FACTIONS; i++)
	{
	    if(strlen(i_factEnum[i][ifact_Name]) < 3) continue;

	    format(S_finalString, sizeof(S_finalString), "[#%d] %s\n",
			i, i_factEnum[i][ifact_Name]);

		strcat(S_string, S_finalString);
	}

	ShowPlayerDialog(playerid, did_I_Frakcie_Edit, DIALOG_STYLE_LIST, "ZOZNAM ILEGÁLIEK", S_string, "UPRAVI", "KONIEC");
	return 1;
}

ShowPlayerEditIFactionMenu(playerid, listitem)
{

	if(listitem == 0)
	{
		for(new i=1; i < MAX_ILLEGAL_FACTIONS; i++)
		{
		    if(strlen(i_factEnum[i][ifact_Name]) > 3) continue;

		    new
		        S_query[256],
		        S_codeName[64],
				day,
				month,
				year,
				hour,
				minute;

			getdate(year, month, day);
			gettime(hour, minute);

			format(S_codeName, 64, "CREATED_FACTION_%d_%d_%d_%d-%d__%d", day, month, year, hour, minute, 1000+random(9000));

			format(i_factEnum[i][ifact_Name], 64, S_codeName);
			i_factEnum[i][ifact_Perm_Drug_Marijuana] = 0;
			i_factEnum[i][ifact_Perm_Guns] = 0;
			i_factEnum[i][ifact_Perm_Graffitis] = 0;

		    mysql_format(MYSQL, S_query, 256, "INSERT INTO gm_ifactions (ID, Name) VALUES ('%d', '%e')", i, S_codeName);

		    new
		        Cache:q = mysql_query(MYSQL, S_query);

			cache_delete(q);

			format(S_query, 256, "Vytvoril si novú ilegálnu frakciu s ID %d. Názov je: %s", i, S_codeName);
			SendSuccess(playerid, S_query);

			ShowPlayerIllegalFactionList(playerid);

		    return 1;
		}
	}

    new
		S_string[2048],
		S_finalString[2048],
		I_pocet = 0;

    for(new i=1; i < MAX_ILLEGAL_FACTIONS; i++)
	{
	    if(strlen(i_factEnum[i][ifact_Name]) < 3) continue;

		I_pocet ++;

	    if(I_pocet != listitem) continue;

	    g_I_editFaction[playerid] = i;
	    g_I_listItem[playerid] = listitem;

	    format(S_finalString, sizeof(S_finalString), "{ffffff}ID frakcie: {e34f4f}%d{ffffff}\nMeno frakcie: {e34f4f}%s{ffffff}\nPovolenia: {e34f4f}%s{ffffff}\nKasa frakcie: {e34f4f}%d${ffffff}\n{f03939}Vymaza frakciu",
			i, i_factEnum[i][ifact_Name], GetFactionPerms(i_factEnum[i][ifact_Perm_Drug_Marijuana], i_factEnum[i][ifact_Perm_Guns], i_factEnum[i][ifact_Perm_Graffitis]), i_factEnum[i][ifact_Cash]);

		strcat(S_string, S_finalString);
	}

	ShowPlayerDialog(playerid, did_I_Frakcie_EditEx, DIALOG_STYLE_LIST, "UPRAVI FRAKCIU", S_string, "ZVOLI", "SPA");
	return 1;
}

GetFactionPerms(drugs, guns, graffiti)
{
	new
	    string[68];

	if(drugs && !guns && !graffiti)
	    format(string, 68, "Marihuana");
	else if(drugs && guns && !graffiti)
	    format(string, 68, "Marihuana, zbrane");
    else if(drugs && guns && graffiti)
	    format(string, 68, "Marihuana, zbrane, graffiti");
	else if(!drugs && !guns && !graffiti)
	    format(string, 68, "iadne");
	else if(!drugs && guns && !graffiti)
    	format(string, 68, "Zbrane");
	else if(!drugs && guns && graffiti)
	    format(string, 68, "Zbrane, graffiti");
	else if(!drugs && !guns && graffiti)
	    format(string, 68, "Graffiti");

	return string;
}

ShowPlayerInventory(playerid, forplayerid, page = 1)
{
    invfor[forplayerid]=playerid;
    new
		S_string[2048] = "Poèet\tItem\tPoznámka\n{7bb875}>> Moje drogy\n{7bb875}>> Moje flae alkoholu{FFFFFF}\n",
		S_tempString[256],
		pocet = 1;


    Inv[forplayerid][0] = page;
    Inv[forplayerid][1] = playerid;

	format(S_tempString, sizeof(S_tempString), "$%.2f\tHotovos\n", ex_GetPlayerMoney(playerid));
	strcat(S_string, S_tempString);

	pocet ++;

	format(S_tempString, sizeof(S_tempString), "1\tObiansky preukaz\t/obcianka, /uo\n");
	if(GetPlayerInventoryItem(playerid, inv_idCard) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_idCard;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tMaska\t/mask\n", GetPlayerInventoryItem(playerid, inv_mask));
	if(GetPlayerInventoryItem(playerid, inv_mask) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_mask;
		pocet ++;
	}

 	format(S_tempString, sizeof(S_tempString), "1\tBoombox\t/boombox\n");
	if(GetPlayerInventoryItem(playerid, inv_boomBox) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_boomBox;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "1\tTelefón\t/phone, /pc\n");
	if(GetPlayerInventoryItem(playerid, inv_telefon) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_telefon;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "1\tSIM Karta\t( %d )\n", GetPlayerInventoryItem(playerid, inv_simcard));
	if(GetPlayerInventoryItem(playerid, inv_simcard) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_simcard;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tAutobatéria\t/kapota bateria\n", GetPlayerInventoryItem(playerid, inv_carBattery));
	if(GetPlayerInventoryItem(playerid, inv_carBattery) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_carBattery;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "1\tRezerva\t/vymenitkoleso\n");
	if(GetPlayerInventoryItem(playerid, inv_rezerva) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_rezerva;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tMotorový olej\t/kapota olej\n", GetPlayerInventoryItem(playerid, inv_carOil));
	if(GetPlayerInventoryItem(playerid, inv_carOil) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_carOil;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "1\tGPS\t/gps\n");
	strcat(S_string, S_tempString);
	invItem[playerid][pocet] = 151515151;
	pocet ++;

	format(S_tempString, sizeof(S_tempString), "1\tLístok do lotérie\tÈíslo: %d\n", GetPlayerInventoryItem(playerid, inv_lotteryTicket));
	if(GetPlayerInventoryItem(playerid, inv_lotteryTicket))
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = 151515151;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "1\tKreditná karta\tacc.: %d\n", GetPlayerInventoryItem(playerid, inv_creditCard));
	if(GetPlayerInventoryItem(playerid, inv_creditCard) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_creditCard;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%.3f kg\tRyby\n", GetPlayerInventoryItem(playerid, inv_rybyKG));
	if(GetPlayerInventoryItem(playerid, inv_rybyKG) > 0.1)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_rybyKG;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tPáèidlo\t/vypacit\n", GetPlayerInventoryItem(playerid, inv_pacidlo));
	if(GetPlayerInventoryItem(playerid, inv_pacidlo) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_pacidlo;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tNáboje\t/nabitzbran\n", GetPlayerInventoryItem(playerid, inv_naboje));
	if(GetPlayerInventoryItem(playerid, inv_naboje) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_naboje;
		pocet ++;
	}

	if(GetPlayerInventoryItem(playerid, inv_kanister) > 0.0)
	{
	    format(S_tempString, sizeof(S_tempString), "1\tKanister\t/kanister\n");
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_kanister;
		pocet ++;
	}

	if(GetPlayerInventoryItem(playerid, inv_katalog) > 0)
	{
	    format(S_tempString, sizeof(S_tempString), "%d\tKatalógy\t/zapalit\n", GetPlayerInventoryItem(playerid, inv_katalog));
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_katalog;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tBandá\t/bandaz\n", GetPlayerInventoryItem(playerid, inv_bandaz));
	if(GetPlayerInventoryItem(playerid, inv_bandaz) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_bandaz;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tPár pút\t/cuff\n", GetPlayerInventoryItem(playerid, inv_puta));
	if(GetPlayerInventoryItem(playerid, inv_puta) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_puta;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tCigarety\t/fajcit\n", GetPlayerInventoryItem(playerid, inv_cigarety));
	if(GetPlayerInventoryItem(playerid, inv_cigarety) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_cigarety;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tZapalovaè\n", GetPlayerInventoryItem(playerid, inv_zapalovac));
	if(GetPlayerInventoryItem(playerid, inv_zapalovac) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_zapalovac;
		pocet ++;
	}

	/*format(S_tempString, sizeof(S_tempString), "%d\tMarihuana\t/hulit\n", GetPlayerInventoryItem(playerid, inv_weed));
	if(GetPlayerInventoryItem(playerid, inv_weed) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_weed;
		pocet ++;
	}*/

	format(S_tempString, sizeof(S_tempString), "%d\tSemienko marihuany Phatt Fruity\t/zasadit\n", GetPlayerInventoryItem(playerid, inv_weeds1));
	if(GetPlayerInventoryItem(playerid, inv_weeds1) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_weeds1;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tSemienko marihuany Amnesia Haze\t/zasadit\n", GetPlayerInventoryItem(playerid, inv_weeds2));
	if(GetPlayerInventoryItem(playerid, inv_weeds2) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_weeds2;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tSemienko marihuany Sour Diesel\t/zasadit\n", GetPlayerInventoryItem(playerid, inv_weeds3));
	if(GetPlayerInventoryItem(playerid, inv_weeds3) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_weeds3;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tHnojivo\n", GetPlayerInventoryItem(playerid, inv_hnojivo));
	if(GetPlayerInventoryItem(playerid, inv_hnojivo) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_hnojivo;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tLano\t/lano\n", GetPlayerInventoryItem(playerid, inv_lano));
	if(GetPlayerInventoryItem(playerid, inv_lano) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_lano;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tVrece\t/vrece\n", GetPlayerInventoryItem(playerid, inv_vrece));
	if(GetPlayerInventoryItem(playerid, inv_vrece) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_vrece;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tKocka\t/kocka\n", GetPlayerInventoryItem(playerid, inv_kocka));
	if(GetPlayerInventoryItem(playerid, inv_kocka) > 0)
	{
		strcat(S_string, S_tempString);
  		invItem[playerid][pocet] = inv_kocka;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "1\tVzorka krvi\n", GetPlayerInventoryItem(playerid, inv_blood));
	if(GetPlayerInventoryItem(playerid, inv_blood) > 0)
	{
		strcat(S_string, S_tempString);
  		invItem[playerid][pocet] = inv_blood;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tPlechovka Pepsi\n", GetPlayerInventoryItem(playerid, inv_pepsiCan));
	if(GetPlayerInventoryItem(playerid, inv_pepsiCan) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_pepsiCan;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tPlechovka Coca Cola\n", GetPlayerInventoryItem(playerid, inv_colaCan));
	if(GetPlayerInventoryItem(playerid, inv_colaCan) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_colaCan;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tÈokoláda Kit Kat\n", GetPlayerInventoryItem(playerid, inv_kitKatChocolate));
	if(GetPlayerInventoryItem(playerid, inv_kitKatChocolate) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_kitKatChocolate;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tÈipsy Pringles\n", GetPlayerInventoryItem(playerid, inv_pringlesChips));
	if(GetPlayerInventoryItem(playerid, inv_pringlesChips) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_pringlesChips;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tPizza\n", GetPlayerInventoryItem(playerid, inv_pizza));
	if(GetPlayerInventoryItem(playerid, inv_pizza) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_pizza;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%d\tF¾aa Spritu\t/zamiesat lean\n", GetPlayerInventoryItem(playerid, inv_sprite));
	if(GetPlayerInventoryItem(playerid, inv_sprite) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_sprite;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%dml\tF¾aa leanu\t/vypit flasaleanu\n", GetPlayerInventoryItem(playerid, inv_spritelean));
	if(GetPlayerInventoryItem(playerid, inv_spritelean) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_spritelean;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "%dml\tActavis Promethazine\t/zamiesat lean\n", GetPlayerInventoryItem(playerid, inv_prometh));
	if(GetPlayerInventoryItem(playerid, inv_prometh) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_prometh;
		pocet ++;
	}

	format(S_tempString, sizeof(S_tempString), "\tSkateboard\t/skate");
	if(GetPlayerInventoryItem(playerid, inv_skateboard) > 0)
	{
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_skateboard;
		pocet ++;
	}
	
	if(GetPlayerInventoryItem(playerid, inv_tree_sadenica) > 0)
	{
	    format(S_tempString, sizeof(S_tempString), "%d\tSadenice stromu\t/zasaditstrom\n", GetPlayerInventoryItem(playerid, inv_tree_sadenica));
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_tree_sadenica;
		pocet ++;
	}
	
	if(GetPlayerInventoryItem(playerid, inv_tree_log_oak) > 0)
	{
	    format(S_tempString, sizeof(S_tempString), "%d\tDubové drevo\n", GetPlayerInventoryItem(playerid, inv_tree_log_oak));
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_tree_log_oak;
		pocet ++;
	}
	
	if(GetPlayerInventoryItem(playerid, inv_tree_log_birch) > 0)
	{
	    format(S_tempString, sizeof(S_tempString), "%d\tBrezové drevo\n", GetPlayerInventoryItem(playerid, inv_tree_log_birch));
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_tree_log_birch;
		pocet ++;
	}
	
	if(GetPlayerInventoryItem(playerid, inv_tree_log_spruce) > 0)
	{
	    format(S_tempString, sizeof(S_tempString), "%d\tSmrekové drevo\n", GetPlayerInventoryItem(playerid, inv_tree_log_spruce));
		strcat(S_string, S_tempString);
		invItem[playerid][pocet] = inv_tree_log_spruce;
		pocet ++;
	}

	if(playerid == forplayerid)
		ShowPlayerDialog(forplayerid, did_Inventory, DIALOG_STYLE_TABLIST_HEADERS, "INVENTÁR", S_string, "MENU", "ZAVRIE");
	else
	    ShowPlayerDialog(forplayerid, did_Inventory, DIALOG_STYLE_TABLIST_HEADERS, "INVENTÁR", S_string, "OK", "");

	return 1;
}

ShowPlayerLicenses(playerid, forplayerid)
{
    new
		S_string[2048],
		S_tempString[256];

	if(zakazrizeni[playerid] < gettime())
		format(S_string, sizeof(S_string), "{e34f4f}Preukazy hráèa %s(%d) - %d/12 trestných bodov;\n\n", GetPlayerNameEx(playerid, NO_MASK), playerid, ptrestnebody[playerid]);
	else
	    format(
			S_string, sizeof(S_string),
			"{e34f4f}Preukazy hráèa %s(%d) - %d/12 trestných bodov;\n\n{FFFF00}Osoba má zákaz riadenia do %s!\n\n{e34f4f}",

			GetPlayerNameEx(playerid, NO_MASK),
			playerid,
			ptrestnebody[playerid],
			getdateunix(zakazrizeni[playerid])
		);

	format(S_tempString, sizeof(S_tempString), "{ffffff}Vodièský preukaz skupiny A\n");
	if(GetPlayerInventoryItem(playerid, inv_vodicakA) > 0) strcat(S_string, S_tempString);

	format(S_tempString, sizeof(S_tempString), "{ffffff}Vodièský preukaz skupiny B, BE\n");
	if(GetPlayerInventoryItem(playerid, inv_vodicakB) > 0) strcat(S_string, S_tempString);

	format(S_tempString, sizeof(S_tempString), "{ffffff}Vodièský preukaz skupiny C, CE\n");
	if(GetPlayerInventoryItem(playerid, inv_vodicakC) > 0) strcat(S_string, S_tempString);

	format(S_tempString, sizeof(S_tempString), "{ffffff}Vodièský preukaz skupiny T\n");
	if(GetPlayerInventoryItem(playerid, inv_vodicakT) > 0) strcat(S_string, S_tempString);

	format(S_tempString, sizeof(S_tempString), "{ffffff}\nLodný preukaz\n");
	if(GetPlayerInventoryItem(playerid, inv_boatPermit) > 0) strcat(S_string, S_tempString);

	format(S_tempString, sizeof(S_tempString), "{ffffff}\nLetecký preukaz\n");
	if(GetPlayerInventoryItem(playerid, inv_flyPermit) > 0) strcat(S_string, S_tempString);

	format(S_tempString, sizeof(S_tempString), "{ffffff}\nRybárske povolenie\n");
	if(GetPlayerInventoryItem(playerid, inv_fishingPermit) > 0) strcat(S_string, S_tempString);

	format(S_tempString, sizeof(S_tempString), "{ffffff}\nZbrojný preukaz\n");
	if(GetPlayerInventoryItem(playerid, inv_zbrojnyPreukaz) > 0) strcat(S_string, S_tempString);

	ShowPlayerDialog(forplayerid, did_Stats, DIALOG_STYLE_MSGBOX, "PREUKAZY", S_string, "OK", "");
	return 1;
}

ShowPlayerStats(playerid, forplayerid)
{

	new
		S_string[ 256],
		S_version[9],
		S_zamestnanie[64],
		S_ifrakcia[64],

		potreba;

	GetPlayerVersion(playerid, S_version, sizeof S_version);
	potreba = 6 + (GetPlayerRoleplayLevel(playerid) * 2);
	if(GetPlayerFaction(playerid) > 0) format(S_zamestnanie, 64, factEnum[GetPlayerFaction(playerid)][fact_Name]);
	else format(S_zamestnanie, 64, "Nezamestnaný");

	if(GetPlayerIllegalFaction(playerid) > 0) format(S_ifrakcia, 64, i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Name]);
	else format(S_ifrakcia, 64, "Nezamestnaný");

	format(S_string, sizeof(S_string), "{628C96}tatistiky úètu %s (%s), ID %d [Pripojený cez klienta SA-MP %s. Ping: %dms.)\n\n", GetPlayerNameEx(playerid, NO_MASK), ReturnMaster(playerid), playerid, S_version, GetPlayerPing(playerid));
	SendClientMessage(forplayerid, 0x628C96FF, S_string);

	format(S_string, sizeof(S_string), "{628C96}[ÚÈET] {FFFFFF}Level úètu: %d | Experience body: %d (%d bodov do ïalieho levelu [/levelup]) | Donator level: %d",
		GetPlayerRoleplayLevel(playerid), g_I_XP[playerid], potreba - g_I_XP[playerid], GetPlayerDonatorLevel(playerid));

	SendClientMessage(forplayerid, 0xFFFFFFFF, S_string);

	format(S_string, sizeof(S_string), "{628C96}[ÚÈET] {FFFFFF}Poèet kreditov: %d [/kreditmenu] | Odoslaných správ: %d",
		g_I_mince[playerid], MessagesSent[playerid]);
	SendClientMessage(forplayerid, 0xFFFFFFFF, S_string);

	format(S_string, sizeof(S_string), "{628C96}[FRAKCIA] {FFFFFF}Frakcia: %s (rank %d, [%d] %s) | Nelegálna frakcia: %s (rank %d)",
		S_zamestnanie,  g_I_playerFactionRank[playerid],  g_I_playerFactionBadge[playerid], GetPlayerFactionTitle(playerid), S_ifrakcia, GetPlayerIllegalFactionRank(playerid));
	SendClientMessage(forplayerid, 0xFFFFFFFF, S_string);

	format(S_string, sizeof(S_string), "{628C96}[TATISTIKY] {FFFFFF}Rename tickety: %d | Nahraný èas: %d hodín, %d minút | Dátum registrácie: %s",
		RenameTicket[playerid], g_I_playTimeHour[playerid], g_I_playTimeMin[playerid], g_S_Registered[playerid]);
	SendClientMessage(forplayerid, 0xFFFFFFFF, S_string);

	format(S_string, sizeof(S_string), "{628C96}[TATISTIKY] {FFFFFF}Poèet banov: %d | Poèet kickov: %d | Poèet jailov: %d | Od poslednej výplaty: %d minút",
		stats_Ban[playerid], stats_Kick[playerid], stats_Jail[playerid], floatround(float(g_I_paydayTime[playerid]) / 60, floatround_floor));
	SendClientMessage(forplayerid, 0xFFFFFFFF, S_string);

	if(GetPlayerDonatorLevel(playerid) < 1)
		format(S_string, sizeof(S_string), "{628C96}[TATISTIKY] {FFFFFF}IP adresa: %s | IP adresa pri registrácii: %s",
			lastIP[playerid], regIP[playerid]);
	else
	    format(S_string, sizeof(S_string), "{628C96}[TATISTIKY] {FFFFFF}IP adresa: %s | IP adresa pri registrácii: %s | Donator expiruje: %s",
			lastIP[playerid], regIP[playerid], getdateunix(g_I_donatorExpire[playerid]));

	SendClientMessage(forplayerid, 0xFFFFFFFF, S_string);
	return 1;
}

ValidateWeaponSkill(playerid)
{
	new maxWeaponSkill[] = {
	    899,

	    999,
	    999,

	    999,
	    899,
	    999,

	    899,

		999,
		999,
		999,
		999
	};

	if(weaponskill_pistol[playerid] > maxWeaponSkill[0]) weaponskill_pistol[playerid] = maxWeaponSkill[0];
	if(weaponskill_pistol_silenced[playerid] > maxWeaponSkill[1]) weaponskill_pistol_silenced[playerid] = maxWeaponSkill[1];
	if(weaponskill_desert_eagle[playerid] > maxWeaponSkill[2]) weaponskill_desert_eagle[playerid] = maxWeaponSkill[2];
	if(weaponskill_shotgun[playerid] > maxWeaponSkill[3]) weaponskill_shotgun[playerid] = maxWeaponSkill[3];
	if(weaponskill_sawnoff_shotgun[playerid] > maxWeaponSkill[4]) weaponskill_sawnoff_shotgun[playerid] = maxWeaponSkill[4];
	if(weaponskill_spas12_shotgun[playerid] > maxWeaponSkill[5]) weaponskill_spas12_shotgun[playerid] = maxWeaponSkill[5];
	if(weaponskill_micro_uzi[playerid] > maxWeaponSkill[6]) weaponskill_micro_uzi[playerid] = maxWeaponSkill[6];
	if(weaponskill_mp5[playerid] > maxWeaponSkill[7]) weaponskill_mp5[playerid] = maxWeaponSkill[7];
	if(weaponskill_ak47[playerid] > maxWeaponSkill[8]) weaponskill_ak47[playerid] = maxWeaponSkill[8];
	if(weaponskill_m4[playerid] > maxWeaponSkill[9]) weaponskill_m4[playerid] = maxWeaponSkill[9];
	if(weaponskill_sniperrifle[playerid] > maxWeaponSkill[10]) weaponskill_sniperrifle[playerid] = maxWeaponSkill[10];
	
	if(weaponskill_pistol[playerid] <0 ) weaponskill_pistol[playerid] = 0;
	if(weaponskill_pistol_silenced[playerid] < 0) weaponskill_pistol_silenced[playerid] = 0;
	if(weaponskill_desert_eagle[playerid] < 0) weaponskill_desert_eagle[playerid] = 0;
	if(weaponskill_shotgun[playerid] < 0) weaponskill_shotgun[playerid] = 0;
	if(weaponskill_sawnoff_shotgun[playerid] < 0) weaponskill_sawnoff_shotgun[playerid] = 0;
	if(weaponskill_spas12_shotgun[playerid] < 0) weaponskill_spas12_shotgun[playerid] = 0;
	if(weaponskill_micro_uzi[playerid] < 0) weaponskill_micro_uzi[playerid] = 0;
	if(weaponskill_mp5[playerid] < 0) weaponskill_mp5[playerid] = 0;
	if(weaponskill_ak47[playerid] < 0) weaponskill_ak47[playerid] = 0;
	if(weaponskill_m4[playerid] < 0) weaponskill_m4[playerid] = 0;
	if(weaponskill_sniperrifle[playerid] < 0) weaponskill_sniperrifle[playerid] = 0;
	
	SetPlayerSkillLevel(playerid, 0, weaponskill_pistol[playerid]);
    SetPlayerSkillLevel(playerid, 1, weaponskill_pistol_silenced[playerid]);
    SetPlayerSkillLevel(playerid, 2, weaponskill_desert_eagle[playerid]);
    SetPlayerSkillLevel(playerid, 3, weaponskill_shotgun[playerid]);
    SetPlayerSkillLevel(playerid, 4, weaponskill_sawnoff_shotgun[playerid]);
    SetPlayerSkillLevel(playerid, 5, weaponskill_spas12_shotgun[playerid]);
    SetPlayerSkillLevel(playerid, 6, weaponskill_micro_uzi[playerid]);
    SetPlayerSkillLevel(playerid, 7, weaponskill_mp5[playerid]);
    SetPlayerSkillLevel(playerid, 8, weaponskill_ak47[playerid]);
    SetPlayerSkillLevel(playerid, 9, weaponskill_m4[playerid]);
    SetPlayerSkillLevel(playerid, 10, weaponskill_sniperrifle[playerid]);

	return 1;
}

ShowPlayerSkills(playerid, forplayerid)
{

	SCFM(forplayerid, 0x628C96ff, ":_______ WEAPON SKILLY HRÁÈA %s _______:", GetPlayerNameEx(playerid, NO_MASK));
	SCFM(forplayerid, 0xffffffff, "> Colt .45 (%d/899) - 9mm s tlmièom (%d/999)", weaponskill_pistol[playerid], weaponskill_pistol_silenced[playerid]);
	SCFM(forplayerid, 0xffffffff, "> Desert Eagle (%d/999) - Brokovnica (%d/999)", weaponskill_desert_eagle[playerid], weaponskill_shotgun[playerid]);
	SCFM(forplayerid, 0xffffffff, "> Sawnoff (%d/899) - SPAS12 (%d/999) - Uzi (%d/899)", weaponskill_sawnoff_shotgun[playerid],weaponskill_spas12_shotgun[playerid],weaponskill_micro_uzi[playerid]);
    SCFM(forplayerid, 0xffffffff, "> MP5 (%d/999) - AK47 (%d/999) - M4 (%d/999)", weaponskill_mp5[playerid], weaponskill_ak47[playerid], weaponskill_m4[playerid]);
    SCFM(forplayerid, 0xffffffff, "> Puka s ïalekoh¾adom (%d/999)", weaponskill_sniperrifle[playerid]);
	return 1;
}

ShowPlayerMoney(playerid, forplayerid)
{

	new
		S_string[ 512],
		Float:overall = ex_GetPlayerMoney(playerid),
		shouldhave = 0;
		
	shouldhave = (money_work[playerid] + money_accepted[playerid] + money_admin[playerid] - money_givenby[playerid] - money_spent[playerid]);

	format(
		S_string, sizeof S_string,
		"{FFFFFF}Záznamy o peniazoch hráèa %s:\n\nMal by ma: %d$\nMá: %.1f$\nCelkovo zarobil: %d$\nZarobil prácou: %d$\nZarobil/vyhral/bolo givnuté: %d$\nPrijal: %d$\nOdoslal iným: %d$\nMinul: %d$",
		GetPlayerNameEx(playerid, NO_MASK),
		
		shouldhave,
		overall,
		
		money_work[playerid]+money_admin[playerid]+money_accepted[playerid],
		
		money_work[playerid],
		money_admin[playerid],
		money_accepted[playerid],
		money_givenby[playerid],
		money_spent[playerid]
	);

	ShowPlayerDialog(forplayerid, did_Null, DIALOG_STYLE_MSGBOX, "MONEY INFO", S_string, "OK", "");
	return 1;
}

SetPlayerIllegalFaction(playerid, factionId = 0)
{

	new
		Query[256];

	mysql_format(MYSQL, Query, 256, "UPDATE char_main SET Illegal_Faction = '%d', Illegal_Faction_Joined = '%d' WHERE Username = '%e'",
	    factionId,
	    gettime(),
		ReturnName(playerid));

	mysql_tquery(MYSQL, Query);

	g_I_IlPlayerFaction[playerid] = factionId;

	return 1;
}

SetPlayerIllegalFactionRank(playerid, factionRank = 0)
{

	new
		Query[256];

	mysql_format(MYSQL, Query, 256, "UPDATE char_main SET Illegal_FactionRank = '%d' WHERE Username = '%e'",
	    factionRank,
		ReturnName(playerid));

	mysql_tquery(MYSQL, Query);

	g_I_IlPlayerFactionRank[playerid] = factionRank;

	return 1;
}

SetPlayerFaction(playerid, factionId = 0)
{

	new
		Query[256];

	mysql_format(MYSQL, Query, 256, "UPDATE char_main SET Faction = '%d', FactionJoined = '%d' WHERE Username = '%e'",
	    factionId,
	    gettime(),
		ReturnName(playerid));

	mysql_tquery(MYSQL, Query);

	g_I_playerFaction[playerid] = factionId;

	return 1;
}

SetPlayerFactionRank(playerid, factionRank = 0)
{

	new
		Query[256];

	mysql_format(MYSQL, Query, 256, "UPDATE char_main SET FactionRank = '%d' WHERE Username = '%e'",
	    factionRank,
		ReturnName(playerid));

	mysql_tquery(MYSQL, Query);

	g_I_playerFactionRank[playerid] = factionRank;

	return 1;
}

SetPlayerFactionBadge(playerid, factionBadge = 0)
{

	new
		Query[256];

	mysql_format(MYSQL, Query, 256, "UPDATE char_main SET FactionBadge = '%d' WHERE Username = '%e'",
	    factionBadge,
		ReturnName(playerid));

	mysql_tquery(MYSQL, Query);

	g_I_playerFactionBadge[playerid] = factionBadge;

	return 1;
}

SetPlayerFactionTitle(playerid, factionTitle[] = "Nic")
{

	new
		Query[256];

	mysql_format(MYSQL, Query, 256, "UPDATE char_main SET FactionTitle = '%e' WHERE Username = '%e'",
	    factionTitle,
		ReturnName(playerid));

	mysql_tquery(MYSQL, Query);

	format(g_S_playerFactionTitle[playerid], 32, "%s", factionTitle);

	return 1;
}

BubbleChat(playerid, color, text[], time = 15000/*6000*/)
{

   	SetPlayerChatBubble(playerid, text, color, 15, time);
	return 1;
}

ex_GetPlayerHunger(playerid, &Float:health)
{
	health = F_pHunger[playerid];
}

new bool:mh_immunity[MAX_PLAYERS] = false;

function mh_timer_DisableImmunity(playerid)
{
	mh_immunity[playerid] = false;
	return 1;
}

SetPlayerExperience(playerid, xp = 0)
{

	g_I_XP[playerid] = xp;

	return 1;
}

GivePlayerExperience(playerid, xp = 0)
{

	g_I_XP[playerid] += xp;

	return 1;
}
GetWeaponNameEx(weaponid)
{
	new pName[48];
 	switch(weaponid) {
		case 0: format(pName,48,"Past");
		case 1: format(pName,48,"Boxer");
		case 2: format(pName,48,"Golfova palica");
		case 3: format(pName,48,"Obusok");
		case 4: format(pName,48,"Noz");
		case 5: format(pName,48,"Baseballova palka");
		case 6: format(pName,48,"Lopata");
		case 7: format(pName,48,"Biliardova tyc");
		case 8: format(pName,48,"Katana");
		case 9: format(pName,48,"Motorova pila");
		case 10: format(pName,48,"Dildo");
		case 11: format(pName,48,"Dildo");
		case 12: format(pName,48,"Vibrator");
		case 13: format(pName,48,"Vibrator");
		case 14: format(pName,48,"Kvetiny");
		case 15: format(pName,48,"Tyc");
		case 16: format(pName,48,"Granat");
		case 17: format(pName,48,"Slzny granat");
		case 18: format(pName,48,"Molotovov koktejl");
		case 22: format(pName,48,"9mm");
		case 23: format(pName,48,"9mm s tlmicom");
		case 24: format(pName,48,"Desert Eagle");
		case 25: format(pName,48,"Brokovnica");
		case 26: format(pName,48,"Upilovana brokovnica");
		case 27: format(pName,48,"Bojova brokovnica");
		case 28: format(pName,48,"Uzi");
		case 29: format(pName,48,"MP5");
		case 30: format(pName,48,"AK-47");
		case 31: format(pName,48,"M4");
		case 32: format(pName,48,"Tec-9");
		case 33: format(pName,48,"Puka");
		case 34: format(pName,48,"Sniper");
		case 35: format(pName,48,"RPG");
		case 36: format(pName,48,"Raketomet");
		case 37: format(pName,48,"Plamenomet");
		case 38: format(pName,48,"Minigun");
		case 39: format(pName,48,"Vybusnina");
		case 40: format(pName,48,"Detonator");
		case 41: format(pName,48,"Sprej");
		case 42: format(pName,48,"Hasiaci pristroj");
		case 43: format(pName,48,"Kamera");
		case 44: format(pName,48,"Nic");
		case 45: format(pName,48,"Nic");
		case 46: format(pName,48,"Padak");
		case 100: format(pName,48,"Vesta");
		case 101: format(pName,48,"Brokovnica");
		case 102: format(pName,48,"Taser");
		case 103: format(pName,48,"Putá");
		case 104: format(pName,48,"Odobra putá");
		case 105: format(pName,48,"Odobra vestu");
		case 106: format(pName,48,"Odobra zbrane");
		case 150: format(pName, 48, "Light Kevlar");
		case 151: format(pName, 48, "Heavy Kevlar");
		default: format(pName,48,"Nezname");
	}
  	return pName;
}

GetBodyPartName(bodypart)
{
	new
		S_string[64];

	switch(bodypart)
	{
		case 3: strcat(S_string, "Hruï");
		case 4: strcat(S_string, "Rebrá");
		case 5: strcat(S_string, "Lavá ruka");
		case 6: strcat(S_string, "Pravá ruka");
		case 7: strcat(S_string, "Lavá noha");
		case 8: strcat(S_string, "Pravá noha");
		case 9: strcat(S_string, "Hlava");
	}
	return S_string;
}

ShowPlayerDamages(forplayerid, playerid)
{

	new
		S_finalString[1024] = "Typ zranenia\tLokácia\tZbraò\n",
		S_tempString[128];

	for(new i; i < 80; i++)
	{
		if(I_dmg_Damages[playerid][i][1] == -1) continue;

		new S_bodypart[64], S_zbran[64];

		if(I_dmg_Damages[playerid][i][0] != 20)
			strcat(S_bodypart, GetBodyPartName(I_dmg_Damages[playerid][i][0]));
		else
		    strcat(S_bodypart, "n/a"); //pre popaleniny
		strcat(S_zbran, GetWeaponNameEx(I_dmg_Damages[playerid][i][1]));

		S_bodypart[0] = tolower(S_bodypart[0]);

		new
		    typ[64];

		switch(I_dmg_Damages[playerid][i][1])
		{
        	case 0..3, 5..7, 10..15, 43:
			{
				format(typ, 64, "Úder predmetom");
			}
			case 4, 8, 9:
			{
				format(typ, 64, "Rezná rana");
			}
			case 16..18, 36, 37, 39, 40:
			{
				format(typ, 64, "Explózia");
			}
			case 22..34:
			{
				format(typ, 64, "Strelné poranenie");
			}
			case 41, 42:
			{
				format(typ, 64, "Rdúsenie");
			}
			case 101:
			{
				format(typ, 64, "Gumový projektil");
			}
			case 102:
			{
				format(typ, 64, "Paralyzácia");
			}
			case 1000:
			{
			    format(typ, 64, "Obhorenina");
			}
			default:
			{
				format(typ, 64, "Neznáme");
			}
		}

		S_bodypart[0] = toupper(S_bodypart[0]);

		format(S_tempString, sizeof(S_tempString), "%s\t%s\t%s\n", typ, S_bodypart, S_zbran);
		if(i != 0) strins(S_tempString, "\n", 0);
		strcat(S_finalString, S_tempString);
	}

	if(strlen(S_finalString) < 10)
	    return SendError(forplayerid, "Tento hráè nie je zranený!");

	ShowPlayerDialog(forplayerid, did_Damages, DIALOG_STYLE_TABLIST_HEADERS, "ZRANENIA HRÁÈA", S_finalString, "OK", "");
	return 1;
}

PlayerDealDamage(playerid, Float:damage, bodypart, weaponid, killerid = -1)
{

	////////////////////////////////////////////////////////////////////////////
	// nepriestrelne okna
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new vid = GetPlayerVehicleID(playerid);
	    if(vEnum[vid][v_TitWindows]==1)
	    {
	        new o[4];
		    GetVehicleParamsCarWindows(vid, o[0],o[1],o[2],o[3]);
		    
			if(o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0)
			{
			    if(random(13) != 3)
			        damage = 0;
				else
				    damage /= 3.0;
			}
	    }
	}
	////////////////////////////////////////////////////////////////////////////

	// start of (REDUCED SWAT SKIN DAMAGE)
	if(GetPlayerSkin(playerid) == 285)
	{
	    damage = (damage / 2.0);
	}
	// end of (REDUCED SWAT SKIN DAMAGE)

	if(weaponid > 21 || weaponid == 4 || weaponid == 8 && damage > 0.0)
	{
	    if(bodypart == 7 || bodypart == 8)
	    {
	        B_isLegWounded[playerid] = true;
	    }

	    CreateBloodOnGround(playerid);

	    FadeColorForPlayer(playerid,255,0,0,255,0,0,0,0,2,1);
	}

	if(damage > 0.0)
	{
		for(new i; i < 80; i++)
		{
			if(I_dmg_Damages[playerid][i][1] != -1) continue;
			I_dmg_Damages[playerid][i][0] = bodypart;
			I_dmg_Damages[playerid][i][1] = weaponid;
			I_dmg_Damages[playerid][i][2] = floatround(damage, floatround_round);
			break;
		}
	}

	if(B_dmg_IsInDS[playerid] == true) return PutPlayerInDeathScreen(playerid, killerid, weaponid);

    new
		Float: playersHealth,
		Float: playersArmor;

    ahac_GetPlayerHealth(playerid, playersHealth);
    ahac_GetPlayerArmour(playerid, playersArmor);

    if(playersArmor < 1.0 || weaponid == 0)
    {

		if(playersHealth - damage < 10.1)
			return PutPlayerInDeathScreen(playerid, killerid, weaponid);

		if((((bodypart == 3 || bodypart == 4  || bodypart == 9) && (weaponid > 21 && weaponid < 34)) || (weaponid == 4 || weaponid == 8)) && isBleeding[playerid] == false && damage > 0.0)
		{



		    isBleeding[playerid] = true;

		    SetTimerEx("timer_BleedTimer", 7000, false, "i", playerid);

		    SendClientMessage(playerid, /*0xB33C3CFF*/0xD0D0D0FF, "> Tvoj charakter krváca! Bude postupne krváca. Vylieèi sa môe príkazom /bandaz.");
		}

        ahac_SetPlayerHealth(playerid, playersHealth - damage);
    }
    else
    {

        if(bodypart != 3 && bodypart != 4 && GetPlayerCustomSkin(playerid) != 285)
        {
            if(playersHealth - damage < 10.1) return PutPlayerInDeathScreen(playerid, killerid, weaponid);
        	ahac_SetPlayerHealth(playerid, playersHealth - damage);
        	ahac_SetPlayerArmour(playerid, playersArmor);
        }
        else
        {

	        if(playersArmor < damage)
	        {

				if(playersHealth - (damage - playersArmor) < 10.1) return PutPlayerInDeathScreen(playerid, killerid, weaponid);

	            SetPlayerHealth(playerid, playersHealth - (damage - playersArmor));
	            SetPlayerArmour(playerid, 0);
	        }
	        else
	        {
				//if(playersArmor - damage < 15.1) return PutPlayerInDeathScreen(playerid, killerid, weaponid);
	            SetPlayerArmour(playerid, playersArmor - damage);
	        }

        }
    }

    return 1;
}

PutPlayerInDeathScreen(playerid, killerid = -1, weaponid = 0, bool:head = false)
{

    ahac_SetPlayerHealth(playerid, 100);

	new
	    damage;

    for(new i; i < 80; i++)
	{
		if(I_dmg_Damages[playerid][i][0] < 1) continue;
		if(I_dmg_Damages[playerid][i][0] == 9)
		    head = true;

		damage += I_dmg_Damages[playerid][i][2];
	}

    new
		S_string[256];

	if((damage > 160 || head == true) && B_dmg_IsInDS[playerid] == true)
	{

	    isBleeding[playerid] = false;

	    if(B_informDeath[playerid] == false)
	    {
	        SendClientMessage(playerid, /*0xB33C3CFF*/0xD0D0D0FF, "> Tvoj charakter zomrel! Pre viac informácií poui /damages [tvoje id].");
	    }
	    B_informDeath[playerid] = true;
		format(S_string, sizeof(S_string), "{B33C3C}Táto osoba je màtva.\n(( /damages [id] ))");
	}
	else format(S_string, sizeof(S_string), "{B33C3C}Táto osoba je zranená!\n(( /damages [id] ))");

	if(IsValidDynamic3DTextLabel(T3D_dmg_Label[playerid]) && B_dmg_IsInDS[playerid] == true) {
		UpdateDynamic3DTextLabelText(T3D_dmg_Label[playerid], /*0xB33C3CFF*/0xD0D0D0FF, S_string);
	}
	else {
		if(IsValidDynamic3DTextLabel(T3D_dmg_Label[playerid]))
		{
		    DestroyDynamic3DTextLabel(T3D_dmg_Label[playerid]);
		}
		T3D_dmg_Label[playerid] = CreateDynamic3DTextLabel(S_string, /*0xB33C3CFF*/0xD0D0D0FF, 0.0, 0.0, -0.1, 15.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 15.0, -1, 1);
	}

	if(B_dmg_IsInDS[playerid] == false)
	{

	    if(killerid > -1) FormatLog(log_type_deaths, "%s(%s) zomrel - zabil ho %s(%s) zbranou %s.", ReturnName(playerid), ReturnIP(playerid), ReturnName(killerid), ReturnIP(killerid), GetWeaponNameEx(weaponid));
	    else FormatLog(log_type_deaths, "%s(%s) zomrel zbranou %s.", ReturnName(playerid), ReturnIP(playerid), GetWeaponNameEx(weaponid));

	    if(killerid > -1) FormatWarnEx(playerid, 3, "DeathWarn:", COLOR_ADMIN_DEATHWARN, "%s zomrel, zabil ho %s zbranou %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(killerid, USE_PUREIDNAME), GetWeaponNameEx(weaponid));
	    else FormatWarnEx(playerid, 3, "DeathWarn:", COLOR_ADMIN_DEATHWARN, "%s zomrel zbranou %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetWeaponNameEx(weaponid));

	    if((damage > 160 || head == true))
		{
		    if(T_timer_deathTimer[playerid] != -1) KillTimer(T_timer_deathTimer[playerid]);
		    T_timer_deathTimer[playerid] = SetTimerEx("timer_DeathAllow", 30000, false, "i1", playerid);
            B_allowDeath[playerid] = false;
            B_informDeath[playerid] = true;
			SendClientMessage(playerid, /*0xB33C3CFF*/0xD0D0D0FF, "> Tvoj charakter je màtvy! Pre viac informácií poui /damages [tvoje id].");
			SendClientMessage(playerid, /*0xB33C3CFF*/0xD0D0D0FF, "> O 30 sekúnd bude môc poui príkaz /death alebo /accept death.");
		}
	    else
		{
		    if(T_timer_deathTimer[playerid] != -1) KillTimer(T_timer_deathTimer[playerid]);
		    T_timer_deathTimer[playerid] = SetTimerEx("timer_DeathAllow", 60000, false, "i0", playerid);
            B_allowDeath[playerid] = false;
            B_informDeath[playerid] = false;
			SendClientMessage(playerid, /*0xB33C3CFF*/0xD0D0D0FF, "> Tvoj charakter je zranený! Pre viac informácií poui /damages [tvoje id].");
			SendClientMessage(playerid, /*0xB33C3CFF*/0xD0D0D0FF, "> O minútu bude môc poui príkaz /death alebo /accept death.");
		}

	    if(!IsPlayerInAnyVehicle(playerid))
		{
		    TogglePlayerControllable(playerid, 0);
			ClearAnimations(playerid, 1);
			ClearAnimations(playerid, 1);
		    ApplyAnimation(playerid, "PED", "KO_SHOT_STOM", 4.1, false, true, true, true, 0, true);
		    SetTimerEx("setdeadanim", 100, false, "i", playerid);
		    SetTimerEx("setdeadanim", 500, false, "i", playerid);
		    SetTimerEx("setdeadanim", 800, false, "i", playerid);
		    //unStoppableAnim[playerid] = true;
		}
		else
		{
		    TogglePlayerControllable(playerid, 0);
		    ApplyAnimation(playerid, "PED", "CAR_DEAD_RHS", 4.1, true, false, false, false, 0, true);
		    //ApplyAnimation(playerid, "PED", "CAR_DEAD_RHS", 4.1, true, false, false, false, 0, e);
		}
	}

	B_dmg_IsInDS[playerid] = true;
	return 0;
}

function setdeadanim(playerid)
{
    ApplyAnimation(playerid, "PED", "KO_SHOT_STOM", 4.1, false, true, true, true, 0, true);
	return 1;
}

ex_SetPlayerSkin(playerid, skin)
{

	ClearAnimations(playerid, 1);
	SetPlayerSkin(playerid, skin);
	I_pSkin[playerid] = skin;
	return 1;
}

GetPlayerAdminLevel(playerid)
{
	if(B_playerAdminLogged[playerid] == false) return 0;
	return I_playerAdminLevel[playerid];
}

IsPlayerLogged(const playerid)
{

	/*for(new i, x=GetPlayerPoolSize(); i < x; i++)
	{

		if(i >= MAX_PLAYERS)
		    break;

		if(i != playerid)
			continue;

		if(b_playerIsLogged[i] == false)
		{
		    new l = 0;

		    if(b_playerIsLogged[i]) l = 1;
		    printf("b_playerlogged = %d", l);
		    return 1;
		}

		return 1;
	}*/
	if(playerid >= MAX_PLAYERS || playerid < 0) return 0;
	if(!IsPlayerConnected(playerid)) return 0;
	if(b_playerIsLogged[playerid] == true) return 1;
	return 0;
	/*if(b_playerIsLogged[playerid] == false) return 0;
	return 1;*/
}

SendClientCantUseCommand(playerid)
{
	SendError(playerid, "Tento príkaz nemôe poui!");
	return 1;
}

SendError(playerid, text[])
{
	new
		S_finalString[256];

	format(S_finalString, sizeof(S_finalString), "> %s", text);
	SendClientMessage(playerid, 0x79869bff, S_finalString);

	//InfoBox(playerid, INFOBOX_ERROR, text);
	return 1;
}

SendSuccess(playerid, text[], type = 0)
{
	#pragma unused type
	/*if(type == 1)
	{
		new
			S_finalString[256];

		format(S_finalString, sizeof(S_finalString), "> %s", text);
		SendClientMessage(playerid, 0xD0D0D0FF, S_finalString);
	}
	else InfoBox(playerid, INFOBOX_SUCCESS, text);*/
	
	new
		S_finalString[256];

	format(S_finalString, sizeof(S_finalString), "> %s", text);
	SendClientMessage(playerid, 0x9bb4ddff, S_finalString);
	
	return 1;

}

SendClientPlayerOffline(playerid)
{
	SendError(playerid, "Tento hráè nie je online!");
	return 1;
}

SavePlayerData(playerid)
{
    Attachment_Save(playerid);
	SaveCharMain(playerid);
	SaveCharInventory(playerid);
	SaveCharDrugs(playerid);
	SaveCharAlcohol(playerid);
	SaveMasterAcc(playerid);
	SaveCharWeapons(playerid);
	return 1;
}

SaveCharDrugs(playerid)
{
    new
		S_query[1024],
		S_tempQuery[256];

   	mysql_format(MYSQL, S_query, 1024, "UPDATE char_drugs_inv SET ");
	foreach( new i : Drugs )
	{
		mysql_format(MYSQL, S_tempQuery, sizeof(S_tempQuery), "Slot%d = '%d', ", i+1, drug_getPlayerDrug(playerid, i));
		strcat(S_query, S_tempQuery);
	}
	format(S_tempQuery,sizeof(S_tempQuery),"WHERE Username = '%s'",
	    ReturnName(playerid));

	strdel(S_query, strlen(S_query)-2, strlen(S_query));
	strcat(S_query, S_tempQuery);

	mysql_tquery(MYSQL, S_query);
	return 1;
}

SaveCharAlcohol(playerid)
{

	new
		tquery[ 512 ]
	;

	mysql_format(MYSQL, tquery, sizeof tquery, "DELETE FROM char_alcohol_inv WHERE Username = '%e'",
	    ReturnName(playerid)
	);
	mysql_tquery(MYSQL, tquery);

	for(new x; x < MAX_ALCOHOL_INVENTORY; x++)
	{
	    if(Alcohol::inventory[ playerid ][ x ][alcinv_Objem] <= 0)
	        continue;

		mysql_format(MYSQL, tquery, sizeof tquery, "INSERT INTO char_alcohol_inv (Username, Name, ObjectId, Alcohol, Objem, DecreaseBy) VALUES ('%e', '%e', '%d', '%d', '%d', '%d')",
		    ReturnName(playerid),
		    Alcohol::inventory[ playerid ][ x ][alcinv_Name],
		    Alcohol::inventory[ playerid ][ x ][alcinv_Object],
		    Alcohol::inventory[ playerid ][ x ][alcinv_Alcohol],
		    Alcohol::inventory[ playerid ][ x ][alcinv_Objem],
		    Alcohol::inventory[ playerid ][ x ][alcinv_DecreaseBy]
		);

		mysql_tquery(MYSQL, tquery);
	}

	return 1;
}

SaveCharMain(playerid)
{
    new
		S_query[1024],
		Float:F_Health,
		Float:F_Armour,
		Float:F_Hunger,
		Float:F_PosX,
		Float:F_PosY,
		Float:F_PosZ;

    GetPlayerPos(playerid, F_PosX, F_PosY, F_PosZ);

	ahac_GetPlayerHealth(playerid, F_Health);
	ahac_GetPlayerArmour(playerid, F_Armour);
	ex_GetPlayerHunger(playerid, F_Hunger);

	mysql_format(MYSQL, S_query, 1024, "UPDATE char_main SET Money = '%.2f', Gender = '%d', Health = '%f', Armour = '%f', Hunger = '%f', PosX = '%f', PosY = '%f', PosZ = '%f', VirtualWorld = '%d', Interior = '%d', SkinId = '%d', RoleplayLevel = '%d' WHERE Username = '%e'",
		ex_GetPlayerMoney(playerid),
		GetPlayerGender(playerid),
		F_Health,
	    F_Armour,
		F_Hunger,
	    F_PosX,
	    F_PosY,
		F_PosZ,
		GetPlayerVirtualWorld(playerid),
		GetPlayerInterior(playerid),
		ex_GetPlayerSkin(playerid),
		GetPlayerRoleplayLevel(playerid),

		ReturnName(playerid));

	mysql_tquery(MYSQL, S_query);


	//============================================================

	new
	    isCuffed = 0,
		hasVrece = 0,
		hasLano = 0;
    if(IsPlayerCuffed(playerid)) isCuffed = 1;
    if(pVrece[playerid] == true) hasVrece = 1;
    if(pLano[playerid] == true) hasLano = 1;

	mysql_format(MYSQL, S_query, 1024, "UPDATE char_main SET XP = '%d', PlayTimeHour = '%d', PlayTimeMin = '%d', Vyplata = '%d', Vypoved = '%d', LastOn = NOW(), ID_ReleaseDate = '%e', ID_DateOfBirth = '%e', ID_PlaceOfBirth = '%e', ID_Settlement = '%e', ID_CardID = '%d', skin_Civil = '%d', skin_Work = '%d', IsWorking = '%d', IsCuffed = '%d' WHERE Username = '%e'",
		g_I_XP[playerid],
		g_I_playTimeHour[playerid],
		g_I_playTimeMin[playerid],
		g_I_Vyplata[playerid],
		g_I_VypovedUnix[playerid],

		ID_ReleaseDate[playerid],
		ID_DateOfBirth[playerid],
		ID_PlaceOfBirth[playerid],
		ID_Settlement[playerid],
		ID_CardID[playerid],

		I_pSkin_Civil[playerid],
		I_pSkin_Work[playerid],
		IsWorking[playerid],

		isCuffed,

		ReturnName(playerid));

	mysql_tquery(MYSQL, S_query);

	mysql_format(MYSQL, S_query, 1024,
		"UPDATE char_main SET HasVrece = '%d', HasLano = '%d', skinStorage1 = '%d', skinStorage2 = '%d', skinStorage3 = '%d', skinStorage4 = '%d', skinStorage5 = '%d', Popis = '%e', Prizvuk = '%e', IsInJail = '%d', JailTime = '%d', FightStyle = '%d', PayDayTime = '%d',opt_vyppasy='%d',trestnebody='%d',zakazrizeni='%d' WHERE Username = '%e'",
		hasVrece,
		hasLano,

		skinStorage[playerid][0],
    	skinStorage[playerid][1],
    	skinStorage[playerid][2],
    	skinStorage[playerid][3],
    	skinStorage[playerid][4],

    	popis[playerid],
    	prizvuk[playerid],

    	ic_isInJail[playerid],
    	ic_jailTime[playerid],

    	g_I_Fightstyle[playerid],

    	g_I_paydayTime[playerid],
    	
    	opt_vyppasy[playerid],
    	ptrestnebody[playerid],
        zakazrizeni[playerid],

		ReturnName(playerid));

	mysql_tquery(MYSQL, S_query);

	new dmint;
	if(B_isPlayerInDM[playerid] == true) dmint = 1;
	else dmint = 0;

	mysql_format(MYSQL, S_query, 1024, "UPDATE char_main SET Assistances = '%d', VyplataExpire = '%d', Vyplata_TYP = '%d', PHONE_SleepMode = '%d', PHONE_BackGround = '%d', IsInDeathMode = '%d', WalkStyle = '%d', BloodAlcohol = '%d',optShowColor='%d' WHERE Username = '%e'",

		assistCount[playerid],
		g_I_VyplataExpire[playerid],
		Vyplata_TYP[playerid],

		phone_SleepMode[playerid],
		phone_BackgroundScreen[playerid],
		dmint,

		GetPlayerWalkingStyle(playerid),
		Alcohol::inblood[ playerid ],

		opt_ShowColor[playerid],

		ReturnName(playerid));

	mysql_tquery(MYSQL, S_query);
	
	////////////////////////////////////////////////////////////////////////////
	
	mysql_format(MYSQL, S_query, 1024, "UPDATE char_stats SET money_work='%d',money_accepted='%d',money_admin='%d',money_givenby='%d',money_spent='%d' WHERE Username = '%e'",
		money_work[playerid],
		money_accepted[playerid],
		money_admin[playerid],
		money_givenby[playerid],
		money_spent[playerid],

		ReturnName(playerid));

	mysql_tquery(MYSQL, S_query);
	
	////////////////////////////////////////////////////////////////////////////
	
	mysql_format(MYSQL, S_query, 1024,
		"UPDATE char_main SET WEAPONSKILL_PISTOL='%d',WEAPONSKILL_PISTOL_SILENCED='%d',WEAPONSKILL_DESERT_EAGLE='%d',WEAPONSKILL_SHOTGUN='%d',WEAPONSKILL_SAWNOFF_SHOTGUN='%d',WEAPONSKILL_SPAS12_SHOTGUN='%d',WEAPONSKILL_MICRO_UZI='%d',WEAPONSKILL_MP5='%d',WEAPONSKILL_AK47='%d',WEAPONSKILL_M4='%d',WEAPONSKILL_SNIPERRIFLE='%d' WHERE Username = '%e'",
		weaponskill_pistol[playerid],
		weaponskill_pistol_silenced[playerid],
		weaponskill_desert_eagle[playerid],
		weaponskill_shotgun[playerid],
		weaponskill_sawnoff_shotgun[playerid],
		weaponskill_spas12_shotgun[playerid],
		weaponskill_micro_uzi[playerid],
		weaponskill_mp5[playerid],
		weaponskill_ak47[playerid],
		weaponskill_m4[playerid],
		weaponskill_sniperrifle[playerid],

		ReturnName(playerid));

	mysql_tquery(MYSQL, S_query);

	return 1;
}

SaveCharInventory(playerid)
{
    new
		S_query[1024];

	mysql_format(MYSQL, S_query, 1024, "UPDATE char_inventory SET Mask = '%d', BoomBox = '%d', ObcianskyPreukaz = '%d', RybyKG = '%f', pepsiCan = '%d', colaCan = '%d', kitKatChocolate = '%d', pringlesChips = '%d', FishingPermit = '%d' WHERE Username = '%e'",
		I_playerInventory[playerid][inv_mask],
		I_playerInventory[playerid][inv_boomBox],
		I_playerInventory[playerid][inv_idCard],
		I_playerInventory[playerid][inv_rybyKG],
		I_playerInventory[playerid][inv_pepsiCan],
		I_playerInventory[playerid][inv_colaCan],
		I_playerInventory[playerid][inv_kitKatChocolate],
		I_playerInventory[playerid][inv_pringlesChips],
		I_playerInventory[playerid][inv_fishingPermit],
		ReturnName(playerid));

	mysql_query(MYSQL, S_query, false);

	mysql_format(MYSQL, S_query, 1024, "UPDATE char_inventory SET pacidlo = '%d', lano = '%d', puta = '%d', vrece = '%d', kocka = '%d', Blood = '%d', Blood_Owner = '%e', VodicakA = '%d', VodicakB = '%d', VodicakC = '%d', VodicakT = '%d', CreditCard = '%d', KanisterType = '%d', Kanister = '%d' WHERE Username = '%e'",
		I_playerInventory[playerid][inv_pacidlo],
		I_playerInventory[playerid][inv_lano],
		I_playerInventory[playerid][inv_puta],
		I_playerInventory[playerid][inv_vrece],
		I_playerInventory[playerid][inv_kocka],
		I_playerInventory[playerid][inv_blood],

		bloodInventory[playerid],

		I_playerInventory[playerid][inv_vodicakA],
		I_playerInventory[playerid][inv_vodicakB],
		I_playerInventory[playerid][inv_vodicakC],
		I_playerInventory[playerid][inv_vodicakT],

		I_playerInventory[playerid][inv_creditCard],

		kanisterType[playerid],
		I_playerInventory[playerid][inv_kanister],

		ReturnName(playerid));

	mysql_query(MYSQL, S_query, false);

	mysql_format(MYSQL, S_query, 1024, "UPDATE char_inventory SET Marihuana = '%d', Marihuana_Seed = '%d', Cigarety = '%d', Zapalovac = '%d', Telefon = '%d', SimKarta = '%d', Naboje = '%d', Bandaz = '%d', ZbrojnyPreukaz = '%d', LotteryTicket = '%d', CarBattery = '%d', Vysielacka = '%f', VysielackaToggle = '%d', CarOil = '%d', PizzaItem = '%d' WHERE Username = '%e'",
		I_playerInventory[playerid][inv_weed],
		I_playerInventory[playerid][inv_weed_seed],
		I_playerInventory[playerid][inv_cigarety],
		I_playerInventory[playerid][inv_zapalovac],
		I_playerInventory[playerid][inv_telefon],
		I_playerInventory[playerid][inv_simcard],
		I_playerInventory[playerid][inv_naboje],
		I_playerInventory[playerid][inv_bandaz],
		I_playerInventory[playerid][inv_zbrojnyPreukaz],
		I_playerInventory[playerid][inv_lotteryTicket],
		I_playerInventory[playerid][inv_carBattery],
		I_playerInventory[playerid][inv_vysielacka],
		vysielackaToggle[playerid],
		I_playerInventory[playerid][inv_carOil],
		I_playerInventory[playerid][inv_pizza],

		ReturnName(playerid));

	mysql_query(MYSQL, S_query, false);

	mysql_format(MYSQL, S_query, 1024, "UPDATE char_inventory SET Rezerva = '%d', weeds_1 = '%d', weeds_2 = '%d', weeds_3 = '%d', hnojivo = '%d', Sprite = '%d', SpriteLean = '%d', PETCup = '%d', Prometh = '%d', Skateboard = '%d', Katalogy = '%d', PermFly = '%d', PermBoat = '%d' WHERE Username = '%e'",
		I_playerInventory[playerid][inv_rezerva],

		I_playerInventory[playerid][inv_weeds1],
		I_playerInventory[playerid][inv_weeds2],
		I_playerInventory[playerid][inv_weeds3],
		I_playerInventory[playerid][inv_hnojivo],

		I_playerInventory[playerid][inv_sprite],
		I_playerInventory[playerid][inv_spritelean],

		I_playerInventory[playerid][inv_petcup],
		I_playerInventory[playerid][inv_prometh],
		I_playerInventory[playerid][inv_skateboard],
		I_playerInventory[playerid][inv_katalog],

		I_playerInventory[playerid][inv_flyPermit],
		I_playerInventory[playerid][inv_boatPermit],

		ReturnName(playerid));

	mysql_tquery(MYSQL, S_query);
	
	mysql_format(MYSQL, S_query, 1024, "UPDATE char_inventory SET Tree_Sadenice='%d',Tree_Log_Oak='%d',Tree_Log_Birch='%d',Tree_Log_Spruce='%d' WHERE Username = '%e'",
		I_playerInventory[playerid][inv_tree_sadenica],
        I_playerInventory[playerid][inv_tree_log_oak],
        I_playerInventory[playerid][inv_tree_log_birch],
        I_playerInventory[playerid][inv_tree_log_spruce],

		ReturnName(playerid));

	mysql_tquery(MYSQL, S_query);

	return 1;
}

SaveCharWeapons(playerid)
{

    new S_query[1024], wid, ammo;
    
    if(donotsave[playerid]==false)
    {
	    for(new x; x < MAX_WEAPON_SLOTS; x++)
	    {
	        GetPlayerWeaponData(playerid, x, wid, ammo);
	        if(wid <= 0 || ammo <= 0) continue;
			if(playerWeapons[playerid][x][pweapons_WeaponId] == 0 || playerWeapons[playerid][x][pweapons_WeaponId] > BIGGEST_WEAPON_ID || playerWeapons[playerid][x][pweapons_WeaponId] != wid) continue;
	        if(playerWeapons[playerid][x][pweapons_Ammo] <= 0 || ammo <= 0 || ammo > playerWeapons[playerid][x][pweapons_Ammo]) continue;
			if(playerWeapons[playerid][x][pweapons_SerialNumber] <= 0) continue;

			mysql_format(
				MYSQL, S_query, sizeof S_query,
				"INSERT INTO player_weapons (Username,WeaponId,Ammo,AmmoGiven,SerialNumber,IsPermitted,WorkWeapon,Origin) VALUES ('%e','%d','%d','%d','%d','%d','%d','%e')",
				ReturnName(playerid),
				playerWeapons[playerid][x][pweapons_WeaponId],
				playerWeapons[playerid][x][pweapons_Ammo],
				playerWeapons[playerid][x][pweapons_AmmoGiven],
				playerWeapons[playerid][x][pweapons_SerialNumber],
				playerWeapons[playerid][x][pweapons_IsPermit],
				playerWeapons[playerid][x][pweapons_IsWork],
				playerWeapons[playerid][x][pweapons_Origin]
			);

			mysql_tquery(MYSQL, S_query);
	    }
	}

	////////////////////////////////////////////////////////////////////////////

	for(new x; x < 12; x++)
	{
	    if(playerEmptyGuns[playerid][x] < 1)
	        continue;

        mysql_format(MYSQL, S_query, sizeof(S_query), "INSERT INTO char_eweapons (user,weaponid,iswork,isperm,serialnumber,origin) VALUES ('%e','%d','%d','%d','%d','%e')",
			ReturnName(playerid), playerEmptyGuns[playerid][x], playerEmptyGuns_W[playerid][x], playerEmptyGuns_P[playerid][x], playerEmptyGuns_S[playerid][x], playerEmptyGuns_O[playerid][x]);
        mysql_tquery(MYSQL, S_query);
	}

	return 1;
}

SaveMasterAcc(playerid)
{
    new
		S_query[1024];

    new
	    Cache:q;

	mysql_format(MYSQL, S_query, 1024, "UPDATE master_accounts SET AdminLevel = '%d', DonatorLevel = '%d', Kicks = '%d', Bans = '%d', Jails = '%d', isInJail = '%d', jail_Admin = '%e', jail_Reason = '%e', jail_Time_M = '%d', jail_Time_S = '%d', opt_WebTD = '%d', opt_TimeTD = '%d', opt_PM = '%d',PlayTime='%d' WHERE Username = '%e'",
		I_playerAdminLevel[playerid],
		GetPlayerDonatorLevel(playerid),
		stats_Kick[playerid],
		stats_Ban[playerid],
		stats_Jail[playerid],

		isInJail[playerid],
		jail_Admin[playerid],
		jail_Reason[playerid],
		jail_Time[playerid][0],
		jail_Time[playerid][1],

		opt_WebTd[playerid],
		opt_TimeTd[playerid],
		opt_PM[playerid],
		MAPlayTime[playerid],

		S_masterAccount[playerid]);

	q = mysql_query(MYSQL, S_query);
	cache_delete(q);

	//===========================

	mysql_format(MYSQL, S_query, 1024, "UPDATE master_accounts SET opt_Sounds = '%d', opt_VitalTd = '%d', opt_HungerTd = '%d', RenameTicket = '%d', SVO = '%d', DonatorExpireUnix = '%d', opt_ChatAnim = '%d', Mince = '%d', LastChangelog = '%e',LastIP = '%e',opt_tachometer = '%d',opt_centy='%d',MessagesSent='%d',opt_HideMaster='%d' WHERE Username = '%e'",
    	opt_Sounds[playerid],
    	opt_VitalTd[playerid],
    	opt_HungerTd[playerid],

    	RenameTicket[playerid],
    	SVO[playerid],
    	g_I_donatorExpire[playerid],

    	opt_ChatAnim[playerid],

    	g_I_mince[playerid],

    	lastChangelog[playerid],

    	lastIP[playerid],
    	opt_tachometer[playerid],
    	opt_CentTd[playerid],
    	MessagesSent[playerid],

    	opt_HideMaster[playerid],

		S_masterAccount[playerid]);
	q = mysql_query(MYSQL, S_query);
	cache_delete(q);

	return 1;
}

stock GetPlayerWeaponInSlot(playerid, slot)
{
	static
		szWeapon, szAmmo
	;

	GetPlayerWeaponData(playerid, slot, szWeapon, szAmmo);
	#pragma unused szAmmo

	return szWeapon;
}

PlayerReloadVariables_Logout(playerid)
{
    Sweeper::StartJob(playerid, true);
    Pizza::StartJob(playerid, true);
	DisablePlayerCheckpoint(playerid);
    SetPlayerDrunkLevel(playerid, 0);
    isindealship[playerid]=false;
    for(new x; x < MAX_ALCOHOL_INVENTORY; x++)
	{
	    Alcohol::inventory[ playerid ][ x ][alcinv_Object]      = 0;
	    Alcohol::inventory[ playerid ][ x ][alcinv_Alcohol]     = 0;
	    Alcohol::inventory[ playerid ][ x ][alcinv_Objem]       = 0;
	    Alcohol::inventory[ playerid ][ x ][alcinv_DecreaseBy]  = 0;
	}

    audiostream[playerid] 				= 0;
    ambientzone[playerid] 				= 0;
    pohrebnasluzba_isDoing[playerid] 	= false;

    BMap::SwitchTo(playerid, 0);

    for(new x; x < 12; x++)
        playerEmptyGuns[playerid][x] = 0;

	for( new x; x < MAX_DRUGS; x++)
	    drug_playerConsumedDrug[playerid][x] = false,
		drug_setPlayerDrug(playerid, x, 0);

    for(new x; x < MAX_STATIC_DO; x++)
	{
		if(static_do[playerid][x] == -1)
		    continue;

		DestroyDynamicArea(static_doarea[playerid][x]);
		DestroyDynamic3DTextLabel(Text3D:static_do[playerid][x]);
		static_do[playerid][x] = -1;
	}

    playerWaiting[playerid] = false;

    for( new i; i < 10; i++)
	    RemovePlayerAttachedObject(playerid, i);

    hasSeenTD[playerid] = false;
    hasSeenTDHN[playerid] = false;
	hasSeenTDAR[playerid] = false;

	lastPos[playerid][0] = 0.0;
	lastPos[playerid][1] = 0.0;
	lastPos[playerid][2] = 0.0;

	gps_Loaded[playerid] = false;
	gps_TimerOn[playerid] = false;
	gps_On[playerid] = false;

	give_Weapon[playerid][0] = -1;
	give_Weapon[playerid][2] = -1;
	give_Weapon[playerid][1] = -1;

	give_Kevlar[playerid][0] = -1;
	give_Kevlar[playerid][1] = -1;

	give_LegalFaction[playerid] = -1;
	give_NeLegalFaction[playerid] = -1;

    if(IsValidDynamic3DTextLabel(T3D_dmg_Label[playerid]))
	{
		DestroyDynamic3DTextLabel(T3D_dmg_Label[playerid]);
		T3D_dmg_Label[playerid] = Text3D:INVALID_3DTEXT_ID;
	}
    if(IsValidDynamic3DTextLabel(T3D_bubbleChat[playerid])) DestroyDynamic3DTextLabel(T3D_bubbleChat[playerid]);

    if(T3D_nameTag[playerid] != Text3D:INVALID_3DTEXT_ID)
    {
		if(IsValidDynamic3DTextLabel(T3D_nameTag[playerid])) DestroyDynamic3DTextLabel(T3D_nameTag[playerid]);
		T3D_nameTag[playerid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(T3D_descTag[playerid] != Text3D:INVALID_3DTEXT_ID)
    {
		if(IsValidDynamic3DTextLabel(T3D_descTag[playerid])) DestroyDynamic3DTextLabel(T3D_descTag[playerid]);
		T3D_descTag[playerid] = Text3D:INVALID_3DTEXT_ID;
	}

	isDoingDMV[playerid] = false;

    if(T_timer_deathTimer[playerid] != -1) KillTimer(T_timer_deathTimer[playerid]);
    T_timer_deathTimer[playerid] = -1;
    if(T_timer_hungerTimer[playerid] != -1) KillTimer(T_timer_hungerTimer[playerid]);
    T_timer_hungerTimer[playerid] = -1;
	hasBeanBag[playerid] = false;

    Weapons::resetWeapons(playerid);
    g_B_canPickUpPayDay[playerid] = false;
    b_playerIsLogged[playerid] = false;
    return 1;
}

ReloadVariables_Login(playerid)
{
	////////////////////////////////////////////////////////////////////////////
	// funkcie
	Weapons::resetWeapons(playerid);
	SetPlayerDrunkLevel(playerid, 0);
	SetPlayerAdminLevel(playerid, 0);
	SetPlayerRoleplayLevel(playerid, 0);
	SetPlayerCuffed(playerid, false);
	BMap::SwitchTo(playerid, 0);
	////////////////////////////////////////////////////////////////////////////
	// premenne
	format(ID_DateOfBirth[playerid], 12,"0000-00-00");
	format(prizvuk[playerid], 32, 		"");
    format(popis[playerid], 144, 		"");
	
	lastPos[playerid][0] 				= 0.0;
	lastPos[playerid][1] 				= 0.0;
	lastPos[playerid][2] 				= 0.0;
	fstat_CenaZaLiter[playerid] 		= 0.0;
	F_DM_Pos[playerid][0] 				= 0.0;
    F_DM_Pos[playerid][1] 				= 0.0;
    F_DM_Pos[playerid][2] 				= 0.0;
    F_DM_Pos[playerid][3] 				= 0.0;
	ahac_armourState[playerid] 			= 0.0;
	
	ahac_healthState[playerid] 			= 100.0;
	
	topt_ooc[playerid] 					= 0;
	togfchat[playerid]      			= 0;
	tognchat[playerid]      			= 0;
	tstudio_dobject[playerid] 			= 0;
	phone_BackgroundScreen[playerid] 	= 0;
	phone_SleepMode[playerid]           = 0;
	phone_SelectedTile[playerid]        = 0;
	phone_Screen[playerid]              = 0;
	Vyplata_TYP[playerid] 				= 0;
	g_I_paydayTime[playerid] 			= 0;
	weaponWarn[playerid] 				= 0;
	clothingNew_Model[playerid] 		= 0;
	lastWorlds[playerid][0] 			= 0;
	lastWorlds[playerid][1] 			= 0;
	ph_Emergency[playerid] 				= 0;
	ph_PayMode[playerid] 				= 0;
	ph_Credit[playerid] 				= 0;
	fstat_NatankovalLitrov[playerid] 	= 0;
	I_playerSpecAct[playerid] 			= 0;
	IsWorking[playerid] 				= 0;
    buyBusiness[playerid][0]	 		= 0;
    buyBusiness[playerid][1] 			= 0;
    sellBusiness[playerid][0] 			= 0;
    sellBusiness[playerid][1] 			= 0;
    I_DM_Skin[playerid] 				= 0;
    ID_ReleaseDate[playerid][0] 		= 0;
	ID_PlaceOfBirth[playerid][0] 		= 0;
 	ID_Settlement[playerid][0] 			= 0;
	ID_CardID[playerid] 				= 0;
	g_I_Vyplata[playerid] 				= 0;
    g_I_playTimeHour[playerid] 			= 0;
    g_I_playTimeMin[playerid]			= 0;
    g_I_playTimeSecond[playerid] 		= 0;
    g_I_playerCheckpoint[playerid]	 	= 0;
    g_I_playerMoney[playerid] 			= 0;
    g_I_playerGender[playerid] 			= 0;
    I_playerMaskID[playerid] 			= 0;
    upozornenie_SH[playerid]            = 0;
    Tutorial::index[playerid]           = 0;
    Anawalt::workid[playerid]           = 0;
    Anawalt::playerhold[playerid][0]    = 0;
    Anawalt::playerhold[playerid][1]    = 0;
    Anawalt::playerhold[playerid][2]    = 0;
    Trucking::gWorkEnum[playerid][tworkp_Type] = 0;
    Trucking::gWorkType[playerid]       = 0;
    Trucking::gWorkEnum[playerid][tworkp_StartUnix]	= 0;
	Trucking::gWorkEnum[playerid][tworkp_ToUnix]   	= 0;
    Alcohol::inblood[ playerid ]        = 0;
    isuserafk[playerid]                 = 0;
    isuserafk_start[playerid]           = 0;
    g_I_playerFaction[playerid]         = 0;

    charSlot[playerid] 					= -1;
	bb_ballEnumId[playerid]    		 	= -1;
	editingpaskaid{playerid}			= -1;
	adtabula_bizid[playerid] 			= -1;
	adtabula_model[playerid] 			= -1;
	give_Weapon[playerid][0] 			= -1;
	give_Weapon[playerid][1] 			= -1;
	give_Weapon[playerid][2] 			= -1;
    give_Kevlar[playerid][0] 			= -1;
	give_Kevlar[playerid][1] 			= -1;
	give_LegalFaction[playerid] 		= -1;
	give_NeLegalFaction[playerid] 		= -1;
	clothingNew_Index[playerid] 		= -1;
	ph_CallWith[playerid] 				= -1;
	fstat_IDAuta[playerid]	 			= -1;
	fstat_TypPaliva[playerid] 			= -1;
	fstat_BoxID[playerid] 				= -1;
	ph_CallWith[playerid] 				= -1;
	bb_Povolenie[playerid] 				= -1;
	invGive[playerid][0] 				= -1;
	invGive[playerid][1] 				= -1;
    watchCmds[playerid] 				= -1;
    carDeer[playerid] 					= -1;
	
	isdrinking[playerid]    			= false;
	isdrinkinglean[playerid]			= false;
	isdrinkingleanpet[playerid] 		= false;
	bb_playerHasBall[playerid] 			= false;
    hasRezerva[playerid] 				= false;
    isdoingfireext[playerid] 			= false;
    tstudio_dobject[playerid] 			= false;
	bb_cantGet[playerid] 				= false;
	phone_IsOut[playerid]   			= false;
    playerWaiting[playerid] 			= false;
    vysielaniePerm[playerid] 			= false;
	adtabula_placing[playerid] 			= false;
	issnakecam[playerid]                = false;
    vynimkaCK[playerid] 				= false;
    isEntering[playerid] 				= false;
    pLano[playerid] 					= false;
    pVrece[playerid] 					= false;
    pBlindfold[playerid]                = false;
	clothingMenu_Editing[playerid] 		= false;
	ph_TurnedOff[playerid] 				= false;
	ph_IsTalking[playerid] 				= false;
	ph_IsDialing[playerid] 				= false;
	ph_IsWaiting[playerid] 				= false;
	ph_IsCaller[playerid] 				= false;
	fstat_CanTankovat[playerid] 		= false;
	fstat_Tankuje[playerid] 			= false;
	B_isFinallyDead[playerid] 			= false;
	isUsingATM[playerid] 				= false;
	isUsingDialog[playerid] 			= false;
	isDoingDMV[playerid] 				= false;
	B_playerTogGold[playerid] 			= false;
    B_playerTogDonChat[playerid] 		= false;
    hasSeatbelt[playerid] 				= false;
    fstat_CanTankovat[playerid] 		= false;
	fstat_Tankuje[playerid] 			= false;
    isUsingATM[playerid] 				= false;
    ph_IsTalking[playerid] 				= false;
	ph_IsDialing[playerid] 				= false;
	ph_IsWaiting[playerid] 				= false;
	ph_IsCaller[playerid] 				= false;
	ph_CanAccept[playerid] 				= false;
	B_isFinallyDead[playerid] 			= false;
	isAntiVhpUsed[playerid] 			= false;
    spawnCheck[playerid] 				= false;
    pVrece[playerid] 					= false;
    cantManipulate[playerid] 			= false;
    IsEditingSpeedCam[playerid] 		= false;
    IsEditingAdresa[playerid] 			= false;
    B_isPlayerInDM[playerid] 			= false;
    isBleeding[playerid] 				= false;
    nologcmd[playerid] 					= false;
    IsEditingSpike[playerid] 			= false;
    IsEditingBarrier[playerid] 			= false;
	ahac_immunity[playerid] 			= false;
    B_isLegWounded[playerid] 			= false;
    B_playerNos[playerid]				= false;
	ID_Showed[playerid] 				= false;
    canStopAnimation[playerid]	 		= false;
    g_B_canPickUpPayDay[playerid] 		= false;
    B_allowDeath[playerid] 				= false;
    B_informDeath[playerid] 			= false;
    B_playerAllowLocal[playerid] 		= false;
    B_playerAllowGlobal[playerid] 		= false;
	B_playerBlockLocal[playerid] 		= false;
	B_playerBlockGlobal[playerid] 		= false;
    B_playerHasMask[playerid] 			= false;
    unStoppableAnim[playerid] 			= false;
    b_playerSelectChar[playerid] 		= false;
    b_playerIsLogged[playerid] 			= false;
    B_playerAdminDuty[playerid] 		= false;
    B_playerAdminLogged[playerid] 		= false;
    B_playerAdminVanish[playerid] 		= false;
    B_playerAdminSPOT[playerid] 		= false;
	ac_immunity[playerid] 				= false;
	isinforbidden[playerid]             = false;
	InteractiveNPC::talking[playerid]   = false;
	isInLottery[playerid]       		= false;
	b_playerSpawnedF[playerid]          = false;
	Tutorial::ison[playerid]            = false;
	Tutorial::spawning[playerid]        = false;
	isindealship[playerid]              = false;
	Anawalt::isworking[playerid]        = false;
	Anawalt::cutdown_iscutting[playerid]= false;
	Sweeper::DoingJob[playerid]         = false;
    
    lastPm[playerid] 					= playerid;
    
    T3D_dmg_Label[playerid] 			= Text3D:INVALID_3DTEXT_ID;
    T3D_nameTag[playerid] 				= Text3D:INVALID_3DTEXT_ID;
    T3D_descTag[playerid] 				= Text3D:INVALID_3DTEXT_ID;
    
    if(InteractiveNPC::playernpcid[playerid] != INVALID_INTERACTIVE_NPC_ID)
        InteractiveNPC[InteractiveNPC::playernpcid[playerid]][inpc_OccupiedBy] = INVALID_PLAYER_ID;
    InteractiveNPC::playernpcid[playerid]	= INVALID_INTERACTIVE_NPC_ID;
	////////////////////////////////////////////////////////////////////////////
	// ine
	format(srvcharname[playerid],30,"");
	lastkeypressunix[playerid] = gettime();
	//checkpointy
	g_I_playerCheckpoint[playerid] = checkp_none;
	DisablePlayerCheckpoint(playerid);
	////////////////////////////////////////////////////////////////////////////
	// alkohol inventar zmazanie
	for(new x; x < MAX_ALCOHOL_INVENTORY; x++)
	{
	    Alcohol::inventory[ playerid ][ x ][alcinv_Object]      = 0;
	    Alcohol::inventory[ playerid ][ x ][alcinv_Alcohol]     = 0;
	    Alcohol::inventory[ playerid ][ x ][alcinv_Objem]       = 0;
	    Alcohol::inventory[ playerid ][ x ][alcinv_DecreaseBy]  = 0;
	}
	////////////////////////////////////////////////////////////////////////////
	// drogy inventar
	for(new x; x < MAX_DRUGS; x++)
	    drug_playerConsumedDrug[playerid][x] = false,
		drug_setPlayerDrug(playerid, x, 0);
	////////////////////////////////////////////////////////////////////////////
	// static do
	for(new x; x < MAX_STATIC_DO; x++)
        static_do[playerid][x] = -1;
	////////////////////////////////////////////////////////////////////////////
	// blockpm
	foreach ( new i : Player )
    {
        blockPm[playerid][i] = 0;

        if(blockPm[i][playerid] == 1)
            blockPm[i][playerid] = 0;
    }
	////////////////////////////////////////////////////////////////////////////
	// damages
	for(new i; i < 80; i++)
	{
		I_dmg_Damages[playerid][i][0] = -1;
		I_dmg_Damages[playerid][i][1] = -1;
		I_dmg_Damages[playerid][i][2] = -1;
	}
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	// anticheat zbrane
	for(new i; i < 50; i++) ac_playerGuns[playerid][i] = 0;
	////////////////////////////////////////////////////////////////////////////
	// inventar
	for(new i; i < INVENTORY_SIZE; i++) I_playerInventory[playerid][i] = 0;
	////////////////////////////////////////////////////////////////////////////
	// doplnky
	for(new i; i < 50; i++)
	{
		playerAttachments[playerid][i][MODELID] = 0;
		playerAttachments[playerid][i][INDEX] = -1;
		playerAttachments[playerid][i][BONE] = -1;

		playerAttachments[playerid][i][FOFFSETX] = 0.0;
		playerAttachments[playerid][i][FOFFSETY] = 0.0;
		playerAttachments[playerid][i][FOFFSETZ] = 0.0;

		playerAttachments[playerid][i][FROTX] = 0.0;
		playerAttachments[playerid][i][FROTY] = 0.0;
		playerAttachments[playerid][i][FROTZ] = 0.0;

		playerAttachments[playerid][i][FSCALEX] = 0.0;
		playerAttachments[playerid][i][FSCALEY] = 0.0;
		playerAttachments[playerid][i][FSCALEZ] = 0.0;

		playerAttachments[playerid][i][COLOR1] = 0;
		playerAttachments[playerid][i][COLOR2] = 0;
	}
	////////////////////////////////////////////////////////////////////////////
	// command log
	for(new i = MAX_COMMAND_LOG -1; i > 0; i --) format(commandLog[playerid][i], 128, "");
	////////////////////////////////////////////////////////////////////////////
	// attachmenty
	for( new i; i < 10; i++) RemovePlayerAttachedObject(playerid, i);
	////////////////////////////////////////////////////////////////////////////
	//death a hunger timer
	if(T_timer_deathTimer[playerid] != -1) KillTimer(T_timer_deathTimer[playerid]);
    T_timer_deathTimer[playerid] = -1;
    if(T_timer_hungerTimer[playerid] != -1) KillTimer(T_timer_hungerTimer[playerid]);
    T_timer_hungerTimer[playerid] = -1;
    ////////////////////////////////////////////////////////////////////////////
    // docasne zbrane vynulovat
	////////////////////////////////////////////////////////////////////////////
	// char creation actor
	if(CharacterCreate::actor[playerid] != -1)
    {
        DestroyDynamicActor(CharacterCreate::actor[playerid]);
        CharacterCreate::actor[playerid] = -1;
    }
	return 1;
}

BumpPlayerOptions(playerid)
{

	if(!IsPlayerLogged(playerid))
	{
	    // Ak nie je prihlásený, skryjeme vetko.
	    PlayerTextDrawHide(playerid, td_webTD[playerid]);
	    TextDrawHideForPlayer(playerid, td_timeTD1);
	    TextDrawHideForPlayer(playerid, td_timeTD2);

	    return;
	}

	// Textdraw webu
	if(opt_WebTd[playerid] == 0)
	{
	    //Zapnutý, objaví sa
	    PlayerTextDrawShow(playerid, td_webTD[playerid]);
	}
	else
	{
	    //Vypnutý, skryje sa
	    PlayerTextDrawHide(playerid, td_webTD[playerid]);
	}

	// Centy
	if(opt_CentTd[playerid] == 0)
	{
	    new
		    tstr[3]
		;

		format(tstr, sizeof tstr, "%02d", floatround(ex_GetPlayerMoney(playerid)*100, floatround_round) % 100);

		PlayerTextDrawSetString(playerid, PTD_cents[playerid], tstr);
	    PlayerTextDrawShow(playerid, PTD_cents[playerid]);
	}
	else
	    PlayerTextDrawHide(playerid, PTD_cents[playerid]);
	// Koniec centov

	// Textdraw casu
	if(opt_TimeTd[playerid] == 0)
	{
	    //Zapnutý, objaví sa
	    TextDrawShowForPlayer(playerid, td_timeTD1);
	    TextDrawShowForPlayer(playerid, td_timeTD2);
	}
	else
	{
	    //Vypnutý, skryje sa
	    TextDrawHideForPlayer(playerid, td_timeTD1);
	    TextDrawHideForPlayer(playerid, td_timeTD2);
	}
	return;

}

BumpPlayerColor(playerid)
{

	new
	    color = COLOR_PLAYER_LOGGED;

	if(B_playerAdminSPOT[playerid] == true)
	{
	    switch(GetPlayerAdminLevel(playerid))
	    {
	        case 1: color = 0x178C4DFF;
	        case 2: color = 0x732197FF;
	        case 5: color = 0x3D488Fff;
	        case 6: color = 0x5291D7FF;
	        case 7: color = 0xd62a1bFF;
	    }

	    PlayerTextDrawColor(playerid, TD_spot[playerid], color);
        PlayerTextDrawShow(playerid, TD_spot[playerid]);
	}
	else if(B_playerTogGold[playerid] == true)
	{
	    color = 0xf9be34FF;
	}
	else if(IsWorking[playerid] && !opt_ShowColor[playerid])
	{
		switch(GetPlayerFaction(playerid))
		{
		    case 1:
		        color = 0x94a570ff;

			case 2:
			    color = 0xc66b6bff;

			case 6:
			    color = 0x69af9fff;

			case 7:
			    color = 0xaf986eff;
		}
	}

	SetPlayerColor(playerid, color);
	return;
}

/*
	< ENGLISH >
		Loads player's textdraw.


	< SLOVAK >
		Naèíta hráèov textdraw.

*/
LoadLoginScreen(playerid)
{

	td_loginPlayer[playerid][0] = CreatePlayerTextDraw(playerid, 319.444488, 151.629577, "box");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][0], 0.000000, 16.333332);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][0], 0.000000, 455.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][0], 2);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, td_loginPlayer[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, td_loginPlayer[playerid][0], 100);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][0], 255);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][0], 0);

	td_loginPlayer[playerid][1] = CreatePlayerTextDraw(playerid, 319.444488, 137.111022, "box");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][1], 0.000000, 1.166668);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][1], 0.000000, 455.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][1], 2);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, td_loginPlayer[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, td_loginPlayer[playerid][1], 170);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][1], 255);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][1], 0);

	td_loginPlayer[playerid][2] = CreatePlayerTextDraw(playerid, 96.111083, 137.629608, "Vyber alebo vytvor charakter");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][2], 0.246665, 0.894815);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][2], 1);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][2], -1061109505);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][2], 255);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][2], 0);

	td_loginPlayer[playerid][3] = CreatePlayerTextDraw(playerid, 149.444274, 154.222198, "char1bg");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][3], 0.000000, 14.111109);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][3], 0.000000, 107.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][3], 2);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, td_loginPlayer[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, td_loginPlayer[playerid][3], 125);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][3], 255);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, td_loginPlayer[playerid][3], true);

	td_loginPlayer[playerid][4] = CreatePlayerTextDraw(playerid, 263.333374, 154.222244, "char2bg");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][4], 0.000000, 14.111109);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][4], 0.000000, 105.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][4], 2);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, td_loginPlayer[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, td_loginPlayer[playerid][4], 125);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][4], 255);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][4], 0);

	td_loginPlayer[playerid][5] = CreatePlayerTextDraw(playerid, 375.555419, 154.222183, "char3bg");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][5], 0.000000, 14.055555);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][5], 0.000000, 104.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][5], 2);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, td_loginPlayer[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, td_loginPlayer[playerid][5], 125);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][5], 255);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][5], 0);

	td_loginPlayer[playerid][6] = CreatePlayerTextDraw(playerid, 488.888671, 154.222244, "char4bg");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][6], 0.000000, 14.055555);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][6], 0.000000, 107.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][6], 2);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, td_loginPlayer[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, td_loginPlayer[playerid][6], 125);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][6], 255);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][6], 0);

	td_loginPlayer[playerid][7] = CreatePlayerTextDraw(playerid, 248.333404, 288.518585, "SELECT");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][7], 0.223887, 0.697777);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][7], 5.000000, 65.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][7], 2);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][7], -1061109505);
	PlayerTextDrawUseBox(playerid, td_loginPlayer[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, td_loginPlayer[playerid][7], 150);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][7], 255);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, td_loginPlayer[playerid][7], true);

	td_loginPlayer[playerid][8] = CreatePlayerTextDraw(playerid, 321.111114, 288.518554, "DELETE");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][8], 0.223887, 0.697777);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][8], 5.000000, 65.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][8], 2);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][8], -2147483393);
	PlayerTextDrawUseBox(playerid, td_loginPlayer[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, td_loginPlayer[playerid][8], 150);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][8], 255);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, td_loginPlayer[playerid][8], true);

	td_loginPlayer[playerid][9] = CreatePlayerTextDraw(playerid, 391.666778, 288.518554, "QUIT");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][9], 0.223887, 0.697777);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][9], 5.000000, 65.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][9], 2);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][9], -1523963137);
	PlayerTextDrawUseBox(playerid, td_loginPlayer[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, td_loginPlayer[playerid][9], 150);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][9], 255);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid, td_loginPlayer[playerid][9], true);

	td_loginPlayer[playerid][10] = CreatePlayerTextDraw(playerid, 149.444396, 154.222183, "Henio Kozlowski");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][10], 0.274444, 0.894815);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][10], 0.000000, 107.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][10], 2);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][10], -1);
	PlayerTextDrawUseBox(playerid, td_loginPlayer[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, td_loginPlayer[playerid][10], 150);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][10], 255);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][10], 0);

	td_loginPlayer[playerid][11] = CreatePlayerTextDraw(playerid, 263.333343, 154.222106, "Henio Kozlowski");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][11], 0.274444, 0.894815);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][11], 0.000000, 104.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][11], 2);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][11], -1);
	PlayerTextDrawUseBox(playerid, td_loginPlayer[playerid][11], 1);
	PlayerTextDrawBoxColor(playerid, td_loginPlayer[playerid][11], 150);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][11], 255);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][11], 0);

	td_loginPlayer[playerid][12] = CreatePlayerTextDraw(playerid, 375.555541, 153.703598, "Henio Kozlowski");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][12], 0.274444, 0.894815);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][12], 0.000000, 104.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][12], 2);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][12], -1);
	PlayerTextDrawUseBox(playerid, td_loginPlayer[playerid][12], 1);
	PlayerTextDrawBoxColor(playerid, td_loginPlayer[playerid][12], 150);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][12], 255);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][12], 0);

	td_loginPlayer[playerid][13] = CreatePlayerTextDraw(playerid, 488.888824, 154.222122, "Henio Kozlowski");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][13], 0.274444, 0.894815);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][13], 0.000000, 107.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][13], 2);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][13], -1);
	PlayerTextDrawUseBox(playerid, td_loginPlayer[playerid][13], 1);
	PlayerTextDrawBoxColor(playerid, td_loginPlayer[playerid][13], 150);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][13], 255);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][13], 0);

	td_loginPlayer[playerid][14] = CreatePlayerTextDraw(playerid, 101.666664, 167.444458, "");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][14], 97.000000, 110.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][14], 1);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][14], -1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][14], 150);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][14], 5);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][14], 0);
	PlayerTextDrawSetPreviewModel(playerid, td_loginPlayer[playerid][14], 20012);
	PlayerTextDrawSetPreviewRot(playerid, td_loginPlayer[playerid][14], 0.000000, 0.000000, 0.000000, 1.000000);

	td_loginPlayer[playerid][15] = CreatePlayerTextDraw(playerid, 215.555618, 167.444427, "");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][15], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][15], 97.000000, 110.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][15], 1);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][15], -1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][15], 150);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][15], 5);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][15], 0);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][15], 0);
	PlayerTextDrawSetPreviewModel(playerid, td_loginPlayer[playerid][15], 20012);
	PlayerTextDrawSetPreviewRot(playerid, td_loginPlayer[playerid][15], 0.000000, 0.000000, 0.000000, 1.000000);

	td_loginPlayer[playerid][16] = CreatePlayerTextDraw(playerid, 327.777954, 167.962936, "");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][16], 97.000000, 110.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][16], 1);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][16], -1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][16], 150);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][16], 5);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][16], 0);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][16], 0);
	PlayerTextDrawSetPreviewModel(playerid, td_loginPlayer[playerid][16], 20012);
	PlayerTextDrawSetPreviewRot(playerid, td_loginPlayer[playerid][16], 0.000000, 0.000000, 0.000000, 1.000000);

	td_loginPlayer[playerid][17] = CreatePlayerTextDraw(playerid, 440.000122, 176.259201, "");
	PlayerTextDrawLetterSize(playerid, td_loginPlayer[playerid][17], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, td_loginPlayer[playerid][17], 97.000000, 110.000000);
	PlayerTextDrawAlignment(playerid, td_loginPlayer[playerid][17], 1);
	PlayerTextDrawColor(playerid, td_loginPlayer[playerid][17], -1);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, td_loginPlayer[playerid][17], 0);
	PlayerTextDrawBackgroundColor(playerid, td_loginPlayer[playerid][17], 150);
	PlayerTextDrawFont(playerid, td_loginPlayer[playerid][17], 5);
	PlayerTextDrawSetProportional(playerid, td_loginPlayer[playerid][17], 0);
	PlayerTextDrawSetShadow(playerid, td_loginPlayer[playerid][17], 0);
	PlayerTextDrawSetPreviewModel(playerid, td_loginPlayer[playerid][17], 20012);
	PlayerTextDrawSetPreviewRot(playerid, td_loginPlayer[playerid][17], 0.000000, 0.000000, 0.000000, 1.000000);
	return 1;
}

LoadPlayerEnterInfo(playerid)
{
    enterInfoTD[playerid] = CreatePlayerTextDraw(playerid, 319.516723, 380.416656, "Vyber_si_charakter,_prosim!~n~Klikni_na_charakter,_ktory_si_chces_zvolit.");
	PlayerTextDrawLetterSize(playerid, enterInfoTD[playerid], 0.228521, 0.958332);
	PlayerTextDrawAlignment(playerid, enterInfoTD[playerid], 2);
	PlayerTextDrawColor(playerid, enterInfoTD[playerid], -1);
	PlayerTextDrawSetShadow(playerid, enterInfoTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, enterInfoTD[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, enterInfoTD[playerid], 255);
	PlayerTextDrawFont(playerid, enterInfoTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, enterInfoTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, enterInfoTD[playerid], 0);
	return 1;
}

EnterInfo(playerid, string[] = "", time = 3500, priority = 0)
{
	if(I_timer_EnterInfo[playerid] != -1 && priority < I_timer_EnterInfoP[playerid])
	    return 0;

	PlayerTextDrawSetString(playerid, enterInfoTD[playerid], replaceChars(string));
	PlayerTextDrawShow(playerid, enterInfoTD[playerid]);

	KillTimer(I_timer_EnterInfo[playerid]);

    I_timer_EnterInfoP[playerid] = priority;
    I_timer_EnterInfo[playerid] = SetTimerEx("timer_EnterInfo", time, false, "i", playerid);
    return 1;
}

IsAbleToApplyOnFootAnim(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return 0;
	
	if(Anawalt::playerhold[playerid][0] != 0) return 0;

	switch(g_I_playerCheckpoint[playerid])
	{
		case checkp_brigada_krabicePC_1, checkp_brigada_krabicePC_2,
			checkp_brigada_krabiceMG_1, checkp_brigada_krabiceMG_2:

		{
			return 0;
		}
	}

	return 1;
}

LoadPlayerCitizenCard(playerid)
{
    ID_Textdraw0[playerid] = CreatePlayerTextDraw(playerid, 441.472991, 140.916656, "usebox");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw0[playerid], 0.000000, 18.806848);
	PlayerTextDrawTextSize(playerid, ID_Textdraw0[playerid], 195.247451, 15.750018);
	PlayerTextDrawAlignment(playerid, ID_Textdraw0[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw0[playerid], 0);
	PlayerTextDrawUseBox(playerid, ID_Textdraw0[playerid], true);
	PlayerTextDrawBoxColor(playerid, ID_Textdraw0[playerid], -757935416);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw0[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw0[playerid], 0);
	PlayerTextDrawFont(playerid, ID_Textdraw0[playerid], 0);

	ID_Textdraw1[playerid] = CreatePlayerTextDraw(playerid, 441.004364, 140.333343, "usebox");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw1[playerid], 0.000000, 1.822221);
	PlayerTextDrawTextSize(playerid, ID_Textdraw1[playerid], 195.247421, 0.000000);
	PlayerTextDrawAlignment(playerid, ID_Textdraw1[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw1[playerid], 0);
	PlayerTextDrawUseBox(playerid, ID_Textdraw1[playerid], true);
	PlayerTextDrawBoxColor(playerid, ID_Textdraw1[playerid], -1768515876);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw1[playerid], 0);
	PlayerTextDrawFont(playerid, ID_Textdraw1[playerid], 0);

	ID_Textdraw2[playerid] = CreatePlayerTextDraw(playerid, 320.000030, 141.749969, "RED COUNTY CITIZEN CARD");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw2[playerid], 0.346455, 1.372498);
	PlayerTextDrawAlignment(playerid, ID_Textdraw2[playerid], 2);
	PlayerTextDrawColor(playerid, ID_Textdraw2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw2[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw2[playerid], 51);
	PlayerTextDrawFont(playerid, ID_Textdraw2[playerid], 2);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw2[playerid], 1);

	ID_Textdraw3[playerid] = CreatePlayerTextDraw(playerid, 202.869705, 141.166687, "LD_DRV:gold");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw3[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ID_Textdraw3[playerid], 14.524153, 15.166655);
	PlayerTextDrawAlignment(playerid, ID_Textdraw3[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw3[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw3[playerid], 0);
	PlayerTextDrawFont(playerid, ID_Textdraw3[playerid], 4);

	ID_Textdraw4[playerid] = CreatePlayerTextDraw(playerid, 419.858093, 141.583343, "LD_DRV:gold");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw4[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ID_Textdraw4[playerid], 14.524153, 15.166655);
	PlayerTextDrawAlignment(playerid, ID_Textdraw4[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw4[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw4[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw4[playerid], 0);
	PlayerTextDrawFont(playerid, ID_Textdraw4[playerid], 4);

	ID_Textdraw5[playerid] = CreatePlayerTextDraw(playerid, 156.017593, 159.250015, "skin");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw5[playerid], 0.009837, -0.211298);
	PlayerTextDrawTextSize(playerid, ID_Textdraw5[playerid], 150.000000, 139.416687);
	PlayerTextDrawAlignment(playerid, ID_Textdraw5[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw5[playerid], -1);
	//PlayerTextDrawUseBox(playerid, ID_Textdraw5[playerid], true);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw5[playerid], 0);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw5[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw5[playerid], 0);
	PlayerTextDrawFont(playerid, ID_Textdraw5[playerid], 5);

	ID_Textdraw6[playerid] = CreatePlayerTextDraw(playerid, 260.966278, 171.499984, "MENO / FIRST NAME");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw6[playerid], 0.228388, 0.975831);
	PlayerTextDrawAlignment(playerid, ID_Textdraw6[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw6[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw6[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw6[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw6[playerid], 51);
	PlayerTextDrawFont(playerid, ID_Textdraw6[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw6[playerid], 1);

	ID_Textdraw7[playerid] = CreatePlayerTextDraw(playerid, 261.029205, 185.333251, "PRIEZVISKO / SURNAME");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw7[playerid], 0.228388, 0.975831);
	PlayerTextDrawAlignment(playerid, ID_Textdraw7[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw7[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw7[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw7[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw7[playerid], 51);
	PlayerTextDrawFont(playerid, ID_Textdraw7[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw7[playerid], 1);

	ID_Textdraw8[playerid] = CreatePlayerTextDraw(playerid, 261.560668, 197.999877, "DATUM VYDANIA / RELEASE DATE");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw8[playerid], 0.228388, 0.975831);
	PlayerTextDrawAlignment(playerid, ID_Textdraw8[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw8[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw8[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw8[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw8[playerid], 51);
	PlayerTextDrawFont(playerid, ID_Textdraw8[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw8[playerid], 1);

	ID_Textdraw9[playerid] = CreatePlayerTextDraw(playerid, 345.768829, 169.166656, "AMANDA");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw9[playerid], 0.327715, 1.407498);
	PlayerTextDrawAlignment(playerid, ID_Textdraw9[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw9[playerid], 255);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw9[playerid], 1);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw9[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw9[playerid], -1061109505);
	PlayerTextDrawFont(playerid, ID_Textdraw9[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw9[playerid], 1);

	ID_Textdraw10[playerid] = CreatePlayerTextDraw(playerid, 356.607971, 182.416656, "TACKETT");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw10[playerid], 0.327715, 1.407498);
	PlayerTextDrawAlignment(playerid, ID_Textdraw10[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw10[playerid], 255);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw10[playerid], 1);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw10[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw10[playerid], -1061109505);
	PlayerTextDrawFont(playerid, ID_Textdraw10[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw10[playerid], 1);

	ID_Textdraw11[playerid] = CreatePlayerTextDraw(playerid, 265.777526, 207.916625, "2017-8-12");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw11[playerid], 0.327715, 1.407498);
	PlayerTextDrawAlignment(playerid, ID_Textdraw11[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw11[playerid], 255);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw11[playerid], 1);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw11[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw11[playerid], -1061109505);
	PlayerTextDrawFont(playerid, ID_Textdraw11[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw11[playerid], 1);

	ID_Textdraw12[playerid] = CreatePlayerTextDraw(playerid, 262.092132, 221.749862, "DATUM NARODENIA / DATE OF BIRTH");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw12[playerid], 0.228388, 0.975831);
	PlayerTextDrawAlignment(playerid, ID_Textdraw12[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw12[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw12[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw12[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw12[playerid], 51);
	PlayerTextDrawFont(playerid, ID_Textdraw12[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw12[playerid], 1);

	ID_Textdraw13[playerid] = CreatePlayerTextDraw(playerid, 266.308990, 230.499908, "1967-10-12");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw13[playerid], 0.327715, 1.407498);
	PlayerTextDrawAlignment(playerid, ID_Textdraw13[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw13[playerid], 255);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw13[playerid], 1);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw13[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw13[playerid], -1061109505);
	PlayerTextDrawFont(playerid, ID_Textdraw13[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw13[playerid], 1);

	ID_Textdraw14[playerid] = CreatePlayerTextDraw(playerid, 262.155059, 243.749893, "MIESTO NARODENIA / PLACE OF BIRTH");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw14[playerid], 0.228388, 0.975831);
	PlayerTextDrawAlignment(playerid, ID_Textdraw14[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw14[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw14[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw14[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw14[playerid], 51);
	PlayerTextDrawFont(playerid, ID_Textdraw14[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw14[playerid], 1);

	ID_Textdraw15[playerid] = CreatePlayerTextDraw(playerid, 266.840454, 253.083221, "ALASKA, KENTUCKY");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw15[playerid], 0.327715, 1.407498);
	PlayerTextDrawAlignment(playerid, ID_Textdraw15[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw15[playerid], 255);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw15[playerid], 1);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw15[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw15[playerid], -1061109505);
	PlayerTextDrawFont(playerid, ID_Textdraw15[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw15[playerid], 1);

	ID_Textdraw16[playerid] = CreatePlayerTextDraw(playerid, 262.217987, 266.916595, "TRVALE BYDLISKO / SETTLEMENT");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw16[playerid], 0.228388, 0.975831);
	PlayerTextDrawAlignment(playerid, ID_Textdraw16[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw16[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw16[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw16[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw16[playerid], 51);
	PlayerTextDrawFont(playerid, ID_Textdraw16[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw16[playerid], 1);

	ID_Textdraw17[playerid] = CreatePlayerTextDraw(playerid, 266.903381, 276.249908, "13TH BROADWAY STREET, PALOMINO CREEK");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw17[playerid], 0.189033, 1.034165);
	PlayerTextDrawAlignment(playerid, ID_Textdraw17[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw17[playerid], 255);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw17[playerid], 1);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw17[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw17[playerid], -1061109505);
	PlayerTextDrawFont(playerid, ID_Textdraw17[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw17[playerid], 1);

	ID_Textdraw18[playerid] = CreatePlayerTextDraw(playerid, 262.749511, 286.583190, "POHLAVIE / SEX");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw18[playerid], 0.228388, 0.975831);
	PlayerTextDrawAlignment(playerid, ID_Textdraw18[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw18[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw18[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw18[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw18[playerid], 51);
	PlayerTextDrawFont(playerid, ID_Textdraw18[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw18[playerid], 1);

	ID_Textdraw19[playerid] = CreatePlayerTextDraw(playerid, 328.279968, 283.833160, "MUZ");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw19[playerid], 0.327715, 1.407498);
	PlayerTextDrawAlignment(playerid, ID_Textdraw19[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw19[playerid], 255);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw19[playerid], 1);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw19[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw19[playerid], -1061109505);
	PlayerTextDrawFont(playerid, ID_Textdraw19[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw19[playerid], 1);

	ID_Textdraw20[playerid] = CreatePlayerTextDraw(playerid, 216.925247, 301.583282, "CISLO OBCIANSKEHO PREUKAZU / CITIZEN CARD ID");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw20[playerid], 0.160922, 0.865000);
	PlayerTextDrawAlignment(playerid, ID_Textdraw20[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw20[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw20[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw20[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw20[playerid], 51);
	PlayerTextDrawFont(playerid, ID_Textdraw20[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw20[playerid], 1);

	ID_Textdraw21[playerid] = CreatePlayerTextDraw(playerid, 356.922698, 297.666442, "1013421945.");
	PlayerTextDrawLetterSize(playerid, ID_Textdraw21[playerid], 0.286485, 1.430832);
	PlayerTextDrawAlignment(playerid, ID_Textdraw21[playerid], 1);
	PlayerTextDrawColor(playerid, ID_Textdraw21[playerid], 255);
	PlayerTextDrawSetShadow(playerid, ID_Textdraw21[playerid], 1);
	PlayerTextDrawSetOutline(playerid, ID_Textdraw21[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ID_Textdraw21[playerid], -1061109505);
	PlayerTextDrawFont(playerid, ID_Textdraw21[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ID_Textdraw21[playerid], 1);
}

LoadPlayerSpeedoMeter(playerid)
{
    TACHOMETER_TD[playerid][0] = CreatePlayerTextDraw(playerid, 588.666992, 397.786621, "SPEED");
	PlayerTextDrawLetterSize(playerid, TACHOMETER_TD[playerid][0], 0.248380, 1.036800);
	PlayerTextDrawAlignment(playerid, TACHOMETER_TD[playerid][0], 3);
	PlayerTextDrawColor(playerid, TACHOMETER_TD[playerid][0], 1569511679);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][0], 1);
	PlayerTextDrawSetOutline(playerid, TACHOMETER_TD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TACHOMETER_TD[playerid][0], 255);
	PlayerTextDrawFont(playerid, TACHOMETER_TD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TACHOMETER_TD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][0], 1);

	TACHOMETER_TD[playerid][1] = CreatePlayerTextDraw(playerid, 635.524230, 397.786621, "240 MPH");
	PlayerTextDrawLetterSize(playerid, TACHOMETER_TD[playerid][1], 0.248380, 1.036800);
	PlayerTextDrawAlignment(playerid, TACHOMETER_TD[playerid][1], 3);
	PlayerTextDrawColor(playerid, TACHOMETER_TD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][1], 1);
	PlayerTextDrawSetOutline(playerid, TACHOMETER_TD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TACHOMETER_TD[playerid][1], 255);
	PlayerTextDrawFont(playerid, TACHOMETER_TD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TACHOMETER_TD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][1], 1);

	TACHOMETER_TD[playerid][2] = CreatePlayerTextDraw(playerid, 587.524047, 389.679962, "FUEL");
	PlayerTextDrawLetterSize(playerid, TACHOMETER_TD[playerid][2], 0.248380, 1.036800);
	PlayerTextDrawAlignment(playerid, TACHOMETER_TD[playerid][2], 3);
	PlayerTextDrawColor(playerid, TACHOMETER_TD[playerid][2], 1569511679);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][2], 1);
	PlayerTextDrawSetOutline(playerid, TACHOMETER_TD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TACHOMETER_TD[playerid][2], 255);
	PlayerTextDrawFont(playerid, TACHOMETER_TD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, TACHOMETER_TD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][2], 1);

	TACHOMETER_TD[playerid][3] = CreatePlayerTextDraw(playerid, 635.524230, 389.679962, "100 litres");
	PlayerTextDrawLetterSize(playerid, TACHOMETER_TD[playerid][3], 0.248380, 1.036800);
	PlayerTextDrawAlignment(playerid, TACHOMETER_TD[playerid][3], 3);
	PlayerTextDrawColor(playerid, TACHOMETER_TD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][3], 1);
	PlayerTextDrawSetOutline(playerid, TACHOMETER_TD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, TACHOMETER_TD[playerid][3], 255);
	PlayerTextDrawFont(playerid, TACHOMETER_TD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, TACHOMETER_TD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][3], 1);

	TACHOMETER_TD[playerid][4] = CreatePlayerTextDraw(playerid, 635.143493, 406.319946, "SEATBELT");
	PlayerTextDrawLetterSize(playerid, TACHOMETER_TD[playerid][4], 0.160380, 0.708266);
	PlayerTextDrawAlignment(playerid, TACHOMETER_TD[playerid][4], 3);
	PlayerTextDrawColor(playerid, TACHOMETER_TD[playerid][4], -1523963137);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TACHOMETER_TD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, TACHOMETER_TD[playerid][4], 255);
	PlayerTextDrawFont(playerid, TACHOMETER_TD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, TACHOMETER_TD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][4], 0);

	TACHOMETER_TD[playerid][5] = CreatePlayerTextDraw(playerid, 606.952636, 406.319946, "BATTERY");
	PlayerTextDrawLetterSize(playerid, TACHOMETER_TD[playerid][5], 0.160380, 0.708266);
	PlayerTextDrawAlignment(playerid, TACHOMETER_TD[playerid][5], 3);
	PlayerTextDrawColor(playerid, TACHOMETER_TD[playerid][5], -1523963137);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TACHOMETER_TD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, TACHOMETER_TD[playerid][5], 255);
	PlayerTextDrawFont(playerid, TACHOMETER_TD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, TACHOMETER_TD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][5], 0);

	TACHOMETER_TD[playerid][6] = CreatePlayerTextDraw(playerid, 578.761840, 406.319946, "OIL");
	PlayerTextDrawLetterSize(playerid, TACHOMETER_TD[playerid][6], 0.160380, 0.708266);
	PlayerTextDrawAlignment(playerid, TACHOMETER_TD[playerid][6], 3);
	PlayerTextDrawColor(playerid, TACHOMETER_TD[playerid][6], -1523963137);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, TACHOMETER_TD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, TACHOMETER_TD[playerid][6], 255);
	PlayerTextDrawFont(playerid, TACHOMETER_TD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, TACHOMETER_TD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][6], 0);
	
	TACHOMETER_TD[playerid][7] = CreatePlayerTextDraw(playerid, 587.524047, 381.572, "NITROUS");
	PlayerTextDrawLetterSize(playerid, TACHOMETER_TD[playerid][7], 0.248380, 1.036800);
	PlayerTextDrawAlignment(playerid, TACHOMETER_TD[playerid][7], 3);
	PlayerTextDrawColor(playerid, TACHOMETER_TD[playerid][7], 1569511679);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][7], 1);
	PlayerTextDrawSetOutline(playerid, TACHOMETER_TD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, TACHOMETER_TD[playerid][7], 255);
	PlayerTextDrawFont(playerid, TACHOMETER_TD[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, TACHOMETER_TD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][7], 1);

	TACHOMETER_TD[playerid][8] = CreatePlayerTextDraw(playerid, 635.524230, 381.572, "100.0 ccm");
	PlayerTextDrawLetterSize(playerid, TACHOMETER_TD[playerid][8], 0.248380, 1.036800);
	PlayerTextDrawAlignment(playerid, TACHOMETER_TD[playerid][8], 3);
	PlayerTextDrawColor(playerid, TACHOMETER_TD[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][8], 1);
	PlayerTextDrawSetOutline(playerid, TACHOMETER_TD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, TACHOMETER_TD[playerid][8], 255);
	PlayerTextDrawFont(playerid, TACHOMETER_TD[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, TACHOMETER_TD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, TACHOMETER_TD[playerid][8], 1);
	
	return 1;
}

LoadPlayerVitals(playerid)
{
	TD_Vitals0[playerid] = CreatePlayerTextDraw(playerid, 577.218383, 67.083328, "100");
	PlayerTextDrawLetterSize(playerid, TD_Vitals0[playerid], 0.229794, 0.759999);
	PlayerTextDrawAlignment(playerid, TD_Vitals0[playerid], 2);
	PlayerTextDrawColor(playerid, TD_Vitals0[playerid], -16776961);
	PlayerTextDrawSetShadow(playerid, TD_Vitals0[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_Vitals0[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TD_Vitals0[playerid], 51);
	PlayerTextDrawFont(playerid, TD_Vitals0[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_Vitals0[playerid], 1);

	TD_Vitals1[playerid] = CreatePlayerTextDraw(playerid, 577.218383, 56.083328, "100");
	PlayerTextDrawLetterSize(playerid, TD_Vitals1[playerid], 0.229794, 0.759999);
	PlayerTextDrawAlignment(playerid, TD_Vitals1[playerid], 2);
	PlayerTextDrawColor(playerid, TD_Vitals1[playerid], 0xffc81fff);
	PlayerTextDrawSetShadow(playerid, TD_Vitals1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_Vitals1[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TD_Vitals1[playerid], 51);
	PlayerTextDrawFont(playerid, TD_Vitals1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_Vitals1[playerid], 1);

	TD_Vitals2[playerid] = CreatePlayerTextDraw(playerid, 577.218383, 45.083328, "100");
	PlayerTextDrawLetterSize(playerid, TD_Vitals2[playerid], 0.229794, 0.759999);
	PlayerTextDrawAlignment(playerid, TD_Vitals2[playerid], 2);
	PlayerTextDrawColor(playerid, TD_Vitals2[playerid], 0xffffffff);
	PlayerTextDrawSetShadow(playerid, TD_Vitals2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_Vitals2[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TD_Vitals2[playerid], 51);
	PlayerTextDrawFont(playerid, TD_Vitals2[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_Vitals2[playerid], 1);

	TD_vitals2[playerid][0] = CreatePlayerTextDraw(playerid, 619.285827, -0.306656, "");
	PlayerTextDrawLetterSize(playerid, TD_vitals2[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TD_vitals2[playerid][0], 18.000000, 18.000000);
	PlayerTextDrawAlignment(playerid, TD_vitals2[playerid][0], 1);
	PlayerTextDrawColor(playerid, TD_vitals2[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, TD_vitals2[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TD_vitals2[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_vitals2[playerid][0], 16843009);
	PlayerTextDrawFont(playerid, TD_vitals2[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, TD_vitals2[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, TD_vitals2[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, TD_vitals2[playerid][0], 1240);
	PlayerTextDrawSetPreviewRot(playerid, TD_vitals2[playerid][0], 0.000000, 0.000000, 0.000000, 1.000000);

	TD_vitals2[playerid][1] = CreatePlayerTextDraw(playerid, 617.761962, 27.426666, "");
	PlayerTextDrawLetterSize(playerid, TD_vitals2[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TD_vitals2[playerid][1], 20.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, TD_vitals2[playerid][1], 1);
	PlayerTextDrawColor(playerid, TD_vitals2[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TD_vitals2[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TD_vitals2[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_vitals2[playerid][1], 16843009);
	PlayerTextDrawFont(playerid, TD_vitals2[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, TD_vitals2[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, TD_vitals2[playerid][1], 0);
	PlayerTextDrawSetPreviewModel(playerid, TD_vitals2[playerid][1], 1242);
	PlayerTextDrawSetPreviewRot(playerid, TD_vitals2[playerid][1], 0.000000, 0.000000, 0.000000, 1.000000);

	TD_vitals2[playerid][2] = CreatePlayerTextDraw(playerid, 617.761474, 12.920002, "");
	PlayerTextDrawLetterSize(playerid, TD_vitals2[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TD_vitals2[playerid][2], 20.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, TD_vitals2[playerid][2], 1);
	PlayerTextDrawColor(playerid, TD_vitals2[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TD_vitals2[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TD_vitals2[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_vitals2[playerid][2], 16843009);
	PlayerTextDrawFont(playerid, TD_vitals2[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, TD_vitals2[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, TD_vitals2[playerid][2], 0);
	PlayerTextDrawSetPreviewModel(playerid, TD_vitals2[playerid][2], 19580);
	PlayerTextDrawSetPreviewRot(playerid, TD_vitals2[playerid][2], -90.000000, 0.000000, 0.000000, 1.000000);

	TD_vitals2[playerid][3] = CreatePlayerTextDraw(playerid, 628.285949, 5.679961, "100");
	PlayerTextDrawLetterSize(playerid, TD_vitals2[playerid][3], 0.146666, 0.605864);
	PlayerTextDrawAlignment(playerid, TD_vitals2[playerid][3], 2);
	PlayerTextDrawColor(playerid, TD_vitals2[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, TD_vitals2[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TD_vitals2[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, TD_vitals2[playerid][3], 255);
	PlayerTextDrawFont(playerid, TD_vitals2[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, TD_vitals2[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, TD_vitals2[playerid][3], 0);

	TD_vitals2[playerid][4] = CreatePlayerTextDraw(playerid, 627.904968, 21.039991, "100");
	PlayerTextDrawLetterSize(playerid, TD_vitals2[playerid][4], 0.150476, 0.588797);
	PlayerTextDrawAlignment(playerid, TD_vitals2[playerid][4], 2);
	PlayerTextDrawColor(playerid, TD_vitals2[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, TD_vitals2[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TD_vitals2[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, TD_vitals2[playerid][4], 255);
	PlayerTextDrawFont(playerid, TD_vitals2[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, TD_vitals2[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, TD_vitals2[playerid][4], 0);

	TD_vitals2[playerid][5] = CreatePlayerTextDraw(playerid, 627.523925, 35.546646, "100");
	PlayerTextDrawLetterSize(playerid, TD_vitals2[playerid][5], 0.154666, 0.627197);
	PlayerTextDrawAlignment(playerid, TD_vitals2[playerid][5], 2);
	PlayerTextDrawColor(playerid, TD_vitals2[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, TD_vitals2[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TD_vitals2[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, TD_vitals2[playerid][5], 255);
	PlayerTextDrawFont(playerid, TD_vitals2[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, TD_vitals2[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, TD_vitals2[playerid][5], 0);

	return 1;
}

LoadPlayerMaskTD(playerid)
{
    TD_spot[playerid] = CreatePlayerTextDraw(playerid, 519.121337, 12.833334, "SPOT");
	PlayerTextDrawLetterSize(playerid, TD_spot[playerid], 0.326778, 1.150833);
	PlayerTextDrawAlignment(playerid, TD_spot[playerid], 2);
	PlayerTextDrawColor(playerid, TD_spot[playerid], -1523963137);
	PlayerTextDrawSetShadow(playerid, TD_spot[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_spot[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, TD_spot[playerid], 51);
	PlayerTextDrawFont(playerid, TD_spot[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_spot[playerid], 1);
	return 1;
}

LoadPlayerSpectate(playerid)
{
    SpectateTD[playerid][0] = CreatePlayerTextDraw(playerid, 319.333374, 417.413208, "box");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][0], 0.000000, 10.266674);
	PlayerTextDrawTextSize(playerid, SpectateTD[playerid][0], 0.000000, 570.000000);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, SpectateTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, SpectateTD[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][0], 0);

	SpectateTD[playerid][1] = CreatePlayerTextDraw(playerid, 319.333374, 419.119873, "box");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][1], 0.000000, 9.428574);
	PlayerTextDrawTextSize(playerid, SpectateTD[playerid][1], 0.000000, 567.000000);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, SpectateTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, SpectateTD[playerid][1], -1061109505);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][1], 0);

	SpectateTD[playerid][2] = CreatePlayerTextDraw(playerid, 37.190509, 424.226562, "hud:radar_gangb");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpectateTD[playerid][2], 15.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][2], 0);

	SpectateTD[playerid][3] = CreatePlayerTextDraw(playerid, 53.047641, 421.679962, "ROBERT COOKSON (123)~n~ADMINISTRATOR LEVEL 3~n~DONATOR LEVEL 3");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][3], 0.145142, 0.703999);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][3], 255);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][3], 0);

	SpectateTD[playerid][4] = CreatePlayerTextDraw(playerid, 132.809524, 424.226562, "hud:radar_hostpital");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpectateTD[playerid][4], 15.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][4], 0);

	SpectateTD[playerid][5] = CreatePlayerTextDraw(playerid, 150.952438, 424.666503, "100");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][5], 0.244952, 1.169066);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][5], 255);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][5], 0);

	SpectateTD[playerid][6] = CreatePlayerTextDraw(playerid, 166.333358, 418.679901, "");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpectateTD[playerid][6], 26.000000, 26.000000);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][6], 0);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][6], 5);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][6], 0);
	PlayerTextDrawSetPreviewModel(playerid, SpectateTD[playerid][6], 1242);
	PlayerTextDrawSetPreviewRot(playerid, SpectateTD[playerid][6], 0.000000, 0.000000, 0.000000, 1.000000);

	SpectateTD[playerid][7] = CreatePlayerTextDraw(playerid, 188.666687, 424.666503, "100");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][7], 0.244952, 1.169066);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][7], 255);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][7], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][7], 0);

	SpectateTD[playerid][8] = CreatePlayerTextDraw(playerid, 210.523742, 422.946563, "hud:radar_burgerShot");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpectateTD[playerid][8], 15.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][8], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][8], 0);

	SpectateTD[playerid][9] = CreatePlayerTextDraw(playerid, 228.285659, 424.239837, "100");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][9], 0.244952, 1.169066);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][9], 255);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][9], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][9], 0);

	SpectateTD[playerid][10] = CreatePlayerTextDraw(playerid, 293.190277, 421.239898, "hud:radar_cash");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpectateTD[playerid][10], 10.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][10], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][10], 4);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][10], 0);

	SpectateTD[playerid][11] = CreatePlayerTextDraw(playerid, 304.095001, 419.973175, "100.33");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][11], 0.244952, 1.169066);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][11], 1);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][11], 255);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][11], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][11], 2);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][11], 0);

	SpectateTD[playerid][12] = CreatePlayerTextDraw(playerid, 284.809356, 432.333221, "hud:radar_emmetgun");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpectateTD[playerid][12], 10.000000, 10.000000);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][12], -1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][12], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][12], 4);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][12], 0);

	SpectateTD[playerid][13] = CreatePlayerTextDraw(playerid, 297.999786, 432.346496, "desert eagle (1234)");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][13], 0.146666, 0.964266);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][13], 1);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][13], 255);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][13], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][13], 2);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][13], 0);

	SpectateTD[playerid][14] = CreatePlayerTextDraw(playerid, 583.857360, 422.946563, "hud:radar_impound");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpectateTD[playerid][14], 15.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][14], 1);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][14], -1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][14], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][14], 4);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][14], 0);

	SpectateTD[playerid][15] = CreatePlayerTextDraw(playerid, 577.619201, 422.533294, "LANDSTALKER~n~AEO 6723~n~64 MPH");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][15], 0.145142, 0.703999);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][15], 3);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][15], 255);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][15], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][15], 2);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][15], 0);

	SpectateTD[playerid][16] = CreatePlayerTextDraw(playerid, 604.285766, 408.026550, "Inventar otvoris tlacidlom LMB. Statistiky zobrazis tlacidlom RMB. Spectate zatvoris tlacidlom ALT.");
	PlayerTextDrawLetterSize(playerid, SpectateTD[playerid][16], 0.203809, 0.738133);
	PlayerTextDrawAlignment(playerid, SpectateTD[playerid][16], 3);
	PlayerTextDrawColor(playerid, SpectateTD[playerid][16], -1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][16], 1);
	PlayerTextDrawSetOutline(playerid, SpectateTD[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, SpectateTD[playerid][16], 255);
	PlayerTextDrawFont(playerid, SpectateTD[playerid][16], 1);
	PlayerTextDrawSetProportional(playerid, SpectateTD[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, SpectateTD[playerid][16], 1);

	return;
}

//VRECE/VYTAH
LoadPlayerVrece(playerid) {
	vreceTD[playerid] = CreatePlayerTextDraw(playerid,-20.000000,2.000000,"|");
 	PlayerTextDrawUseBox(playerid,vreceTD[playerid],1);
  	PlayerTextDrawBoxColor(playerid,vreceTD[playerid],0x000000ff);
   	PlayerTextDrawTextSize(playerid,vreceTD[playerid],660.000000,22.000000);
   	PlayerTextDrawAlignment(playerid,vreceTD[playerid],0);
    PlayerTextDrawBackgroundColor(playerid,vreceTD[playerid],0x000000ff);
    PlayerTextDrawFont(playerid,vreceTD[playerid],3);
    PlayerTextDrawLetterSize(playerid,vreceTD[playerid],1.000000,52.200000);
    PlayerTextDrawColor(playerid,vreceTD[playerid],0x000000ff);
    PlayerTextDrawSetOutline(playerid,vreceTD[playerid],1);
    PlayerTextDrawSetProportional(playerid,vreceTD[playerid],1);
    PlayerTextDrawSetShadow(playerid,vreceTD[playerid],1);
}

LoadPlayerSkinShop(playerid)
{
    TD_skinShop0[playerid] = CreatePlayerTextDraw(playerid, 398.837921, 133.916656, "pozadie");
	PlayerTextDrawLetterSize(playerid, TD_skinShop0[playerid], 0.000000, 22.987943);
	PlayerTextDrawTextSize(playerid, TD_skinShop0[playerid], 249.127395, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_skinShop0[playerid], 1);
	PlayerTextDrawColor(playerid, TD_skinShop0[playerid], 0);
	PlayerTextDrawUseBox(playerid, TD_skinShop0[playerid], true);
	PlayerTextDrawBoxColor(playerid, TD_skinShop0[playerid], 85);
	PlayerTextDrawSetShadow(playerid, TD_skinShop0[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_skinShop0[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_skinShop0[playerid], -120);
	PlayerTextDrawFont(playerid, TD_skinShop0[playerid], 0);

	TD_skinShop1[playerid] = CreatePlayerTextDraw(playerid, 243.632141, 141.166778, "modelskinu");
	PlayerTextDrawLetterSize(playerid, TD_skinShop1[playerid], 0.343894, 4.958164);
	PlayerTextDrawTextSize(playerid, TD_skinShop1[playerid], 150.000000, 177.333190);
	PlayerTextDrawAlignment(playerid, TD_skinShop1[playerid], 2);
	PlayerTextDrawColor(playerid, TD_skinShop1[playerid], -1);
	PlayerTextDrawUseBox(playerid, TD_skinShop1[playerid], true);
	PlayerTextDrawBoxColor(playerid, TD_skinShop1[playerid], 0xffffff00);
	PlayerTextDrawBackgroundColor(playerid, TD_skinShop1[playerid], 0xffffff00);
	PlayerTextDrawSetShadow(playerid, TD_skinShop1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_skinShop1[playerid], 0);
	PlayerTextDrawFont(playerid, TD_skinShop1[playerid], 5);
	PlayerTextDrawSetSelectable(playerid, TD_skinShop1[playerid], 1);

	TD_skinShop2[playerid] = CreatePlayerTextDraw(playerid, 253.001510, 133.583312, "~w~Pre kupu klikni na skin!");
	PlayerTextDrawLetterSize(playerid, TD_skinShop2[playerid], 0.229325, 0.929166);
	PlayerTextDrawAlignment(playerid, TD_skinShop2[playerid], 1);
	PlayerTextDrawColor(playerid, TD_skinShop2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TD_skinShop2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_skinShop2[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_skinShop2[playerid], 51);
	PlayerTextDrawFont(playerid, TD_skinShop2[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_skinShop2[playerid], 1);

	TD_skinShop3[playerid] = CreatePlayerTextDraw(playerid, 253.001419, 320.250030, "LD_BEAT:left");
	PlayerTextDrawLetterSize(playerid, TD_skinShop3[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TD_skinShop3[playerid], 21.083465, 22.749984);
	PlayerTextDrawAlignment(playerid, TD_skinShop3[playerid], 1);
	PlayerTextDrawColor(playerid, TD_skinShop3[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TD_skinShop3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_skinShop3[playerid], 0);
	PlayerTextDrawFont(playerid, TD_skinShop3[playerid], 4);
	PlayerTextDrawSetSelectable(playerid, TD_skinShop3[playerid], true);

	TD_skinShop4[playerid] = CreatePlayerTextDraw(playerid, 374.411193, 319.500030, "LD_BEAT:right");
	PlayerTextDrawLetterSize(playerid, TD_skinShop4[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TD_skinShop4[playerid], 21.083465, 22.749984);
	PlayerTextDrawAlignment(playerid, TD_skinShop4[playerid], 1);
	PlayerTextDrawColor(playerid, TD_skinShop4[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TD_skinShop4[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_skinShop4[playerid], 0);
	PlayerTextDrawFont(playerid, TD_skinShop4[playerid], 4);
	PlayerTextDrawSetSelectable(playerid, TD_skinShop4[playerid], true);

	TD_skinShop5[playerid] = CreatePlayerTextDraw(playerid, 387.935607, 126.583335, "LD_BEAT:cross");
	PlayerTextDrawLetterSize(playerid, TD_skinShop5[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TD_skinShop5[playerid], 14.524185, 15.750009);
	PlayerTextDrawAlignment(playerid, TD_skinShop5[playerid], 1);
	PlayerTextDrawColor(playerid, TD_skinShop5[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TD_skinShop5[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_skinShop5[playerid], 0);
	PlayerTextDrawFont(playerid, TD_skinShop5[playerid], 4);
	PlayerTextDrawSetSelectable(playerid, TD_skinShop5[playerid], true);

	TD_skinShop6[playerid] = CreatePlayerTextDraw(playerid, 324.216766, 326.666625, "~g~25$");
	PlayerTextDrawLetterSize(playerid, TD_skinShop6[playerid], 0.289297, 1.109998);
	PlayerTextDrawAlignment(playerid, TD_skinShop6[playerid], 2);
	PlayerTextDrawColor(playerid, TD_skinShop6[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TD_skinShop6[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_skinShop6[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_skinShop6[playerid], 153);
	PlayerTextDrawFont(playerid, TD_skinShop6[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_skinShop6[playerid], 1);

	return 1;
}

LoadAutoSkolaTD(playerid)
{
    TD_autoskola0[playerid] = CreatePlayerTextDraw(playerid, 626.413208, 127.166656, "Maximalna rychlost: ~b~~h~40kmh");
	PlayerTextDrawLetterSize(playerid, TD_autoskola0[playerid], 0.286485, 1.080832);
	PlayerTextDrawAlignment(playerid, TD_autoskola0[playerid], 3);
	PlayerTextDrawColor(playerid, TD_autoskola0[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TD_autoskola0[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_autoskola0[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TD_autoskola0[playerid], 51);
	PlayerTextDrawFont(playerid, TD_autoskola0[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_autoskola0[playerid], 1);

	TD_autoskola1[playerid] = CreatePlayerTextDraw(playerid, 626.476196, 137.499938, "Nasledujuca rychlost: ~b~~h~60kmh");
	PlayerTextDrawLetterSize(playerid, TD_autoskola1[playerid], 0.286485, 1.080832);
	PlayerTextDrawAlignment(playerid, TD_autoskola1[playerid], 3);
	PlayerTextDrawColor(playerid, TD_autoskola1[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TD_autoskola1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_autoskola1[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TD_autoskola1[playerid], 51);
	PlayerTextDrawFont(playerid, TD_autoskola1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_autoskola1[playerid], 1);

	TD_autoskola2[playerid] = CreatePlayerTextDraw(playerid, 626.539184, 147.249938, "Trvanie praktickej skusky: ~b~~h~3:52");
	PlayerTextDrawLetterSize(playerid, TD_autoskola2[playerid], 0.286485, 1.080832);
	PlayerTextDrawAlignment(playerid, TD_autoskola2[playerid], 3);
	PlayerTextDrawColor(playerid, TD_autoskola2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TD_autoskola2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_autoskola2[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TD_autoskola2[playerid], 51);
	PlayerTextDrawFont(playerid, TD_autoskola2[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_autoskola2[playerid], 1);

	return 1;
}

new PlayerText:ATM_TD_main0[MAX_PLAYERS];
new PlayerText:ATM_TD_main1[MAX_PLAYERS];
new PlayerText:ATM_TD_main2[MAX_PLAYERS];
new PlayerText:ATM_TD_main3[MAX_PLAYERS];
new PlayerText:ATM_TD_main4[MAX_PLAYERS];
new PlayerText:ATM_TD_main5[MAX_PLAYERS];

new PlayerText:ATM_TD_login6[MAX_PLAYERS];
new PlayerText:ATM_TD_login7[MAX_PLAYERS];
new PlayerText:ATM_TD_login8[MAX_PLAYERS];
new PlayerText:ATM_TD_login9[MAX_PLAYERS];
new PlayerText:ATM_TD_login10[MAX_PLAYERS];
new PlayerText:ATM_TD_login11[MAX_PLAYERS];
new PlayerText:ATM_TD_login12[MAX_PLAYERS];
new PlayerText:ATM_TD_login13[MAX_PLAYERS];
new PlayerText:ATM_TD_login14[MAX_PLAYERS];
new PlayerText:ATM_TD_login15[MAX_PLAYERS];
new PlayerText:ATM_TD_login16[MAX_PLAYERS];
new PlayerText:ATM_TD_login17[MAX_PLAYERS];
new PlayerText:ATM_TD_login18[MAX_PLAYERS];
new PlayerText:ATM_TD_login19[MAX_PLAYERS];
new PlayerText:ATM_TD_login20[MAX_PLAYERS];
new PlayerText:ATM_TD_login21[MAX_PLAYERS];
new PlayerText:ATM_TD_login22[MAX_PLAYERS];
new PlayerText:ATM_TD_login23[MAX_PLAYERS];
new PlayerText:ATM_TD_login24[MAX_PLAYERS];
new PlayerText:ATM_TD_login25[MAX_PLAYERS];
new PlayerText:ATM_TD_login26[MAX_PLAYERS];
new PlayerText:ATM_TD_login27[MAX_PLAYERS];
new PlayerText:ATM_TD_login28[MAX_PLAYERS];
new PlayerText:ATM_TD_login29[MAX_PLAYERS];
new PlayerText:ATM_TD_login30[MAX_PLAYERS];
new PlayerText:ATM_TD_login31[MAX_PLAYERS];
new PlayerText:ATM_TD_menu6[MAX_PLAYERS];
new PlayerText:ATM_TD_menu7[MAX_PLAYERS];
new PlayerText:ATM_TD_menu8[MAX_PLAYERS];
new PlayerText:ATM_TD_menu9[MAX_PLAYERS];
new PlayerText:ATM_TD_menu10[MAX_PLAYERS];
new PlayerText:ATM_TD_menu11[MAX_PLAYERS];
LoadATMTextdraw(playerid)
{
	ATM_TD_main0[playerid] = CreatePlayerTextDraw(playerid, 431.508239, 103.833305, "usebox");
	PlayerTextDrawLetterSize(playerid, ATM_TD_main0[playerid], 0.000000, 24.898115);
	PlayerTextDrawTextSize(playerid, ATM_TD_main0[playerid], 221.771636, 0.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_main0[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_main0[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_main0[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_main0[playerid], -1378294017);
	PlayerTextDrawSetShadow(playerid, ATM_TD_main0[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_main0[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_main0[playerid], 144);
	PlayerTextDrawFont(playerid, ATM_TD_main0[playerid], 0);

	ATM_TD_main1[playerid] = CreatePlayerTextDraw(playerid, 260.029296, 106.166679, "GREENLAKE SAVINGS");
	PlayerTextDrawLetterSize(playerid, ATM_TD_main1[playerid], 0.468740, 2.603332);
	PlayerTextDrawAlignment(playerid, ATM_TD_main1[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_main1[playerid], 255);
	PlayerTextDrawSetShadow(playerid, ATM_TD_main1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_main1[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_main1[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_main1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_main1[playerid], 1);

	ATM_TD_main2[playerid] = CreatePlayerTextDraw(playerid, 260.560760, 124.083358, "BANK WITH REAL BENEFITS.");
	PlayerTextDrawLetterSize(playerid, ATM_TD_main2[playerid], 0.227452, 1.354998);
	PlayerTextDrawAlignment(playerid, ATM_TD_main2[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_main2[playerid], 255);
	PlayerTextDrawSetShadow(playerid, ATM_TD_main2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_main2[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_main2[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_main2[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_main2[playerid], 1);

	ATM_TD_main3[playerid] = CreatePlayerTextDraw(playerid, 256.281219, 109.666641, "LD_DRV:goboat");
	PlayerTextDrawLetterSize(playerid, ATM_TD_main3[playerid], 0.000000, 5.481698);
	PlayerTextDrawTextSize(playerid, ATM_TD_main3[playerid], -26.237205, 27.416656);
	PlayerTextDrawAlignment(playerid, ATM_TD_main3[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_main3[playerid], -1);
	PlayerTextDrawUseBox(playerid, ATM_TD_main3[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_main3[playerid], 0);
	PlayerTextDrawSetShadow(playerid, ATM_TD_main3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_main3[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_main3[playerid], 4);

	ATM_TD_main4[playerid] = CreatePlayerTextDraw(playerid, 423.669128, 147.333343, "usebox");
	PlayerTextDrawLetterSize(playerid, ATM_TD_main4[playerid], 0.000000, 1.368517);
	PlayerTextDrawTextSize(playerid, ATM_TD_main4[playerid], 229.449493, 0.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_main4[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_main4[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_main4[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_main4[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_main4[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_main4[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_main4[playerid], 0);

	ATM_TD_main5[playerid] = CreatePlayerTextDraw(playerid, 236.603179, 148.166625, "> Vitajte! Pre vstup do uctu prosim zadajte Vas PIN kod.");
	PlayerTextDrawLetterSize(playerid, ATM_TD_main5[playerid], 0.169355, 0.993333);
	PlayerTextDrawAlignment(playerid, ATM_TD_main5[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_main5[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_main5[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_main5[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_main5[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_main5[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_main5[playerid], 1);

	/*




		LOGIN




	*/

	ATM_TD_login6[playerid] = CreatePlayerTextDraw(playerid, 354.796478, 178.250000, "PINKOD_BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login6[playerid], 0.000000, 3.053704);
	PlayerTextDrawTextSize(playerid, ATM_TD_login6[playerid], 229.918014, 0.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login6[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_login6[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_login6[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_login6[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login6[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login6[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_login6[playerid], 0);

	ATM_TD_login7[playerid] = CreatePlayerTextDraw(playerid, 423.731994, 178.083312, "LOGIN-BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login7[playerid], 0.000000, 3.053704);
	PlayerTextDrawTextSize(playerid, ATM_TD_login7[playerid], 355.012969, 0.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login7[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_login7[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_login7[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_login7[playerid], 8388863);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login7[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login7[playerid], 0);

	ATM_TD_login8[playerid] = CreatePlayerTextDraw(playerid, 238.477279, 183.749984, "1234");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login8[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login8[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_login8[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login8[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login8[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_login8[playerid], 100);
	PlayerTextDrawFont(playerid, ATM_TD_login8[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_login8[playerid], 1);

	ATM_TD_login9[playerid] = CreatePlayerTextDraw(playerid, 389.404388, 185.916625, "LOG IN");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login9[playerid], 0.261185, 1.162499);
	PlayerTextDrawTextSize(playerid, ATM_TD_login9[playerid], 10.918014, 60.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login9[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_login9[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login9[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login9[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_login9[playerid], 100);
	PlayerTextDrawFont(playerid, ATM_TD_login9[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_login9[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_login9[playerid], true);

	ATM_TD_login10[playerid] = CreatePlayerTextDraw(playerid, 263.903350, 214.416656, "1_BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login10[playerid], 0.000000, 2.924074);
	PlayerTextDrawTextSize(playerid, ATM_TD_login10[playerid], 229.918014, 10.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login10[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_login10[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_login10[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_login10[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login10[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login10[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_login10[playerid], 0);

	ATM_TD_login11[playerid] = CreatePlayerTextDraw(playerid, 300.511169, 214.249969, "2_BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login11[playerid], 0.000000, 2.924074);
	PlayerTextDrawTextSize(playerid, ATM_TD_login11[playerid], 265.525787, 10.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login11[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_login11[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_login11[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_login11[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login11[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login11[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_login11[playerid], 0);

	ATM_TD_login12[playerid] = CreatePlayerTextDraw(playerid, 337.587341, 214.666625, "3_BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login12[playerid], 0.000000, 2.924074);
	PlayerTextDrawTextSize(playerid, ATM_TD_login12[playerid], 301.601959, 10.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login12[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_login12[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_login12[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_login12[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login12[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login12[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_login12[playerid], 0);

	ATM_TD_login13[playerid] = CreatePlayerTextDraw(playerid, 264.560913, 249.499954, "4_BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login13[playerid], 0.000000, 2.924074);
	PlayerTextDrawTextSize(playerid, ATM_TD_login13[playerid], 229.918212, 10.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login13[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_login13[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_login13[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_login13[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login13[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login13[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_login13[playerid], 0);

	ATM_TD_login14[playerid] = CreatePlayerTextDraw(playerid, 301.168762, 249.333297, "5_BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login14[playerid], 0.000000, 2.924074);
	PlayerTextDrawTextSize(playerid, ATM_TD_login14[playerid], 265.525939, 10.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login14[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_login14[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_login14[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_login14[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login14[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login14[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_login14[playerid], 0);

	ATM_TD_login15[playerid] = CreatePlayerTextDraw(playerid, 338.244964, 249.166625, "6_BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login15[playerid], 0.000000, 2.924074);
	PlayerTextDrawTextSize(playerid, ATM_TD_login15[playerid], 301.602142, 10.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login15[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_login15[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_login15[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_login15[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login15[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login15[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_login15[playerid], 0);

	ATM_TD_login16[playerid] = CreatePlayerTextDraw(playerid, 264.281646, 284.583343, "7_BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login16[playerid], 0.000000, 2.736666);
	PlayerTextDrawTextSize(playerid, ATM_TD_login16[playerid], 229.918334, 10.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login16[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_login16[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_login16[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_login16[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login16[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login16[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_login16[playerid], 0);

	ATM_TD_login17[playerid] = CreatePlayerTextDraw(playerid, 300.889495, 284.416656, "8_BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login17[playerid], 0.000000, 2.783518);
	PlayerTextDrawTextSize(playerid, ATM_TD_login17[playerid], 265.526092, 10.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login17[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_login17[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_login17[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_login17[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login17[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login17[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_login17[playerid], 0);

	ATM_TD_login18[playerid] = CreatePlayerTextDraw(playerid, 337.965576, 284.249969, "9_BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login18[playerid], 0.000000, 2.830370);
	PlayerTextDrawTextSize(playerid, ATM_TD_login18[playerid], 301.602233, 10.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login18[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_login18[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_login18[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_login18[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login18[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login18[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_login18[playerid], 0);

	ATM_TD_login19[playerid] = CreatePlayerTextDraw(playerid, 422.830902, 284.666656, "0_BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login19[playerid], 0.000000, 2.783518);
	PlayerTextDrawTextSize(playerid, ATM_TD_login19[playerid], 338.146850, 10.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login19[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_login19[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_login19[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_login19[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login19[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login19[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_login19[playerid], 0);

	ATM_TD_login20[playerid] = CreatePlayerTextDraw(playerid, 342.146423, 280.916687, "DELETE_BOX");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login20[playerid], 0.000000, -7.770371);
	PlayerTextDrawTextSize(playerid, ATM_TD_login20[playerid], 418.263580, 0.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login20[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_login20[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_login20[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_login20[playerid], -1523963137);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login20[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login20[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_login20[playerid], -1523963137);
	PlayerTextDrawFont(playerid, ATM_TD_login20[playerid], 0);

	ATM_TD_login21[playerid] = CreatePlayerTextDraw(playerid, 245.505126, 218.166717, "1");
    PlayerTextDrawLetterSize(playerid, ATM_TD_login21[playerid], 0.449999, 1.600000);
    PlayerTextDrawTextSize(playerid, ATM_TD_login21[playerid], 10.918014, 20.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login21[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_login21[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login21[playerid], 2);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login21[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_login21[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_login21[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_login21[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_login21[playerid], true);

	ATM_TD_login22[playerid] = CreatePlayerTextDraw(playerid, 282.112884, 218.583358, "2");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login22[playerid], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, ATM_TD_login22[playerid], 10.918014, 20.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login22[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_login22[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login22[playerid], 2);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login22[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_login22[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_login22[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_login22[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_login22[playerid], true);

	ATM_TD_login23[playerid] = CreatePlayerTextDraw(playerid, 319.189086, 219.000030, "3");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login23[playerid], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, ATM_TD_login23[playerid], 10.918014, 20.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login23[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_login23[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login23[playerid], 2);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login23[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_login23[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_login23[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_login23[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_login23[playerid], true);

	ATM_TD_login24[playerid] = CreatePlayerTextDraw(playerid, 247.099731, 252.666687, "4");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login24[playerid], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, ATM_TD_login24[playerid], 10.918014, 20.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login24[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_login24[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login24[playerid], 2);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login24[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_login24[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_login24[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_login24[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_login24[playerid], true);

	ATM_TD_login25[playerid] = CreatePlayerTextDraw(playerid, 281.833374, 252.500030, "5");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login25[playerid], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, ATM_TD_login25[playerid], 10.918014, 20.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login25[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_login25[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login25[playerid], 2);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login25[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_login25[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_login25[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_login25[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_login25[playerid], true);

	ATM_TD_login26[playerid] = CreatePlayerTextDraw(playerid, 318.909606, 253.500030, "6");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login26[playerid], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, ATM_TD_login26[playerid], 10.918014, 20.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login26[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_login26[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login26[playerid], 2);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login26[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_login26[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_login26[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_login26[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_login26[playerid], true);

	ATM_TD_login27[playerid] = CreatePlayerTextDraw(playerid, 246.820281, 287.750030, "7");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login27[playerid], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, ATM_TD_login27[playerid], 10.918014, 20.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login27[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_login27[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login27[playerid], 2);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login27[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_login27[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_login27[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_login27[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_login27[playerid], true);

	ATM_TD_login28[playerid] = CreatePlayerTextDraw(playerid, 282.959350, 288.750030, "8");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login28[playerid], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, ATM_TD_login28[playerid], 10.918014, 20.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login28[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_login28[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login28[playerid], 2);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login28[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_login28[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_login28[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_login28[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_login28[playerid], true);

	ATM_TD_login29[playerid] = CreatePlayerTextDraw(playerid, 319.567108, 288.000030, "9");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login29[playerid], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, ATM_TD_login29[playerid], 10.918014, 20.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login29[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_login29[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login29[playerid], 2);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login29[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_login29[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_login29[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_login29[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_login29[playerid], true);

	ATM_TD_login30[playerid] = CreatePlayerTextDraw(playerid, 378.663848, 288.416778, "0");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login30[playerid], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, ATM_TD_login30[playerid], 10.918014, 20.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login30[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_login30[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login30[playerid], 2);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login30[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_login30[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_login30[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_login30[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_login30[playerid], true);

	ATM_TD_login31[playerid] = CreatePlayerTextDraw(playerid, 379.195190, 239.250167, "VYNULOVAT");
	PlayerTextDrawLetterSize(playerid, ATM_TD_login31[playerid], 0.236354, 1.337500);
	PlayerTextDrawTextSize(playerid, ATM_TD_login31[playerid], 10.918014, 80.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_login31[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_login31[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_login31[playerid], 2);
	PlayerTextDrawSetOutline(playerid, ATM_TD_login31[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_login31[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_login31[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_login31[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_login31[playerid], true);

	/*



		MENU



	*/

	ATM_TD_menu6[playerid] = CreatePlayerTextDraw(playerid, 422.732086, 178.833343, "ZOSTATOK_BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_menu6[playerid], 0.000000, 4.155555);
 	PlayerTextDrawTextSize(playerid, ATM_TD_menu6[playerid], 229.449493, 0.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_menu6[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_menu6[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_menu6[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_menu6[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_menu6[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_menu6[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_menu6[playerid], 0);

	ATM_TD_menu7[playerid] = CreatePlayerTextDraw(playerid, 423.263549, 226.500000, "VYBER_BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_menu7[playerid], 0.000000, 4.155555);
	PlayerTextDrawTextSize(playerid, ATM_TD_menu7[playerid], 228.980972, 0.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_menu7[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_menu7[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_menu7[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_menu7[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_menu7[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_menu7[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_menu7[playerid], 0);

	ATM_TD_menu8[playerid] = CreatePlayerTextDraw(playerid, 322.811187, 190.166671, "ZOSTATOK NA UCTE");
	PlayerTextDrawLetterSize(playerid, ATM_TD_menu8[playerid], 0.366602, 1.512499);
	PlayerTextDrawTextSize(playerid, ATM_TD_menu8[playerid], 20.449493, 170.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_menu8[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_menu8[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_menu8[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_menu8[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_menu8[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_menu8[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_menu8[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_menu8[playerid], true);

	ATM_TD_menu9[playerid] = CreatePlayerTextDraw(playerid, 321.936981, 237.250000, "VYBER Z UCTU");
	PlayerTextDrawLetterSize(playerid, ATM_TD_menu9[playerid], 0.366602, 1.512499);
	PlayerTextDrawTextSize(playerid, ATM_TD_menu9[playerid], 20.449493, 170.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_menu9[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_menu9[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_menu9[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_menu9[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_menu9[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_menu9[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_menu9[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_menu9[playerid], true);

	ATM_TD_menu10[playerid] = CreatePlayerTextDraw(playerid, 423.795013, 274.750061, "PIN_BG");
	PlayerTextDrawLetterSize(playerid, ATM_TD_menu10[playerid], 0.000000, 4.155555);
	PlayerTextDrawTextSize(playerid, ATM_TD_menu10[playerid], 228.512451, 0.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_menu10[playerid], 1);
	PlayerTextDrawColor(playerid, ATM_TD_menu10[playerid], 0);
	PlayerTextDrawUseBox(playerid, ATM_TD_menu10[playerid], true);
	PlayerTextDrawBoxColor(playerid, ATM_TD_menu10[playerid], 102);
	PlayerTextDrawSetShadow(playerid, ATM_TD_menu10[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_menu10[playerid], 0);
	PlayerTextDrawFont(playerid, ATM_TD_menu10[playerid], 0);

	ATM_TD_menu11[playerid] = CreatePlayerTextDraw(playerid, 322.874145, 284.500000, "ZMENA PIN KODU");
	PlayerTextDrawLetterSize(playerid, ATM_TD_menu11[playerid], 0.366602, 1.512499);
	PlayerTextDrawTextSize(playerid, ATM_TD_menu11[playerid], 20.449493, 170.000000);
	PlayerTextDrawAlignment(playerid, ATM_TD_menu11[playerid], 2);
	PlayerTextDrawColor(playerid, ATM_TD_menu11[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ATM_TD_menu11[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ATM_TD_menu11[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ATM_TD_menu11[playerid], 51);
	PlayerTextDrawFont(playerid, ATM_TD_menu11[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATM_TD_menu11[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATM_TD_menu11[playerid], true);

	return 1;
}

LoadPDRadar(playerid)
{
   	pdRadar[playerid][0] = CreatePlayerTextDraw(playerid, 558.930847, 205.166702, "box");
	PlayerTextDrawLetterSize(playerid, pdRadar[playerid][0], 0.000000, 9.156661);
	PlayerTextDrawTextSize(playerid, pdRadar[playerid][0], 0.000000, 142.000000);
	PlayerTextDrawAlignment(playerid, pdRadar[playerid][0], 2);
	PlayerTextDrawColor(playerid, pdRadar[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, pdRadar[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, pdRadar[playerid][0], 1620636415);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, pdRadar[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, pdRadar[playerid][0], 255);
	PlayerTextDrawFont(playerid, pdRadar[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, pdRadar[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][0], 0);

	pdRadar[playerid][1] = CreatePlayerTextDraw(playerid, 557.994262, 209.250015, "Recorded vehicle: N/A");
	PlayerTextDrawLetterSize(playerid, pdRadar[playerid][1], 0.251946, 1.226662);
	PlayerTextDrawAlignment(playerid, pdRadar[playerid][1], 2);
	PlayerTextDrawColor(playerid, pdRadar[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][1], 1);
	PlayerTextDrawSetOutline(playerid, pdRadar[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, pdRadar[playerid][1], 255);
	PlayerTextDrawFont(playerid, pdRadar[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, pdRadar[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][1], 1);

	pdRadar[playerid][2] = CreatePlayerTextDraw(playerid, 578.140563, 230.833312, "N/A");
	PlayerTextDrawLetterSize(playerid, pdRadar[playerid][2], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, pdRadar[playerid][2], 2);
	PlayerTextDrawColor(playerid, pdRadar[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][2], 1);
	PlayerTextDrawSetOutline(playerid, pdRadar[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, pdRadar[playerid][2], 255);
	PlayerTextDrawFont(playerid, pdRadar[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, pdRadar[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, pdRadar[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, pdRadar[playerid][2], 0x00000000);

	pdRadar[playerid][3] = CreatePlayerTextDraw(playerid, 559.868347, 268.750061, "Number Plate: N/A");
	PlayerTextDrawLetterSize(playerid, pdRadar[playerid][3], 0.237423, 1.150832);
	PlayerTextDrawAlignment(playerid, pdRadar[playerid][3], 2);
	PlayerTextDrawColor(playerid, pdRadar[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][3], 1);
	PlayerTextDrawSetOutline(playerid, pdRadar[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, pdRadar[playerid][3], 255);
	PlayerTextDrawFont(playerid, pdRadar[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, pdRadar[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][3], 1);

	pdRadar[playerid][4] = CreatePlayerTextDraw(playerid, 518.001464, 227.916671, "LD_DRV:silver");
	PlayerTextDrawLetterSize(playerid, pdRadar[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, pdRadar[playerid][4], 37.000000, 38.000000);
	PlayerTextDrawAlignment(playerid, pdRadar[playerid][4], 1);
	PlayerTextDrawColor(playerid, pdRadar[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, pdRadar[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, pdRadar[playerid][4], 255);
	PlayerTextDrawFont(playerid, pdRadar[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, pdRadar[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][4], 0);

	pdRadar[playerid][5] = CreatePlayerTextDraw(playerid, 484.268249, 202.250015, "LD_DRV:tvcorn");
	PlayerTextDrawLetterSize(playerid, pdRadar[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, pdRadar[playerid][5], 50.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, pdRadar[playerid][5], 1);
	PlayerTextDrawColor(playerid, pdRadar[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, pdRadar[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, pdRadar[playerid][5], 255);
	PlayerTextDrawFont(playerid, pdRadar[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, pdRadar[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][5], 0);

	pdRadar[playerid][6] = CreatePlayerTextDraw(playerid, 635.132202, 202.250061, "LD_DRV:tvcorn");
	PlayerTextDrawLetterSize(playerid, pdRadar[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, pdRadar[playerid][6], -50.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, pdRadar[playerid][6], 1);
	PlayerTextDrawColor(playerid, pdRadar[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, pdRadar[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, pdRadar[playerid][6], 255);
	PlayerTextDrawFont(playerid, pdRadar[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, pdRadar[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][6], 0);

	pdRadar[playerid][7] = CreatePlayerTextDraw(playerid, 483.799804, 292.666656, "LD_DRV:tvcorn");
	PlayerTextDrawLetterSize(playerid, pdRadar[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, pdRadar[playerid][7], 50.000000, -50.000000);
	PlayerTextDrawAlignment(playerid, pdRadar[playerid][7], 1);
	PlayerTextDrawColor(playerid, pdRadar[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, pdRadar[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, pdRadar[playerid][7], 255);
	PlayerTextDrawFont(playerid, pdRadar[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, pdRadar[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][7], 0);

	pdRadar[playerid][8] = CreatePlayerTextDraw(playerid, 635.132141, 293.249908, "LD_DRV:tvcorn");
	PlayerTextDrawLetterSize(playerid, pdRadar[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, pdRadar[playerid][8], -50.000000, -50.000000);
	PlayerTextDrawAlignment(playerid, pdRadar[playerid][8], 1);
	PlayerTextDrawColor(playerid, pdRadar[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, pdRadar[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, pdRadar[playerid][8], 255);
	PlayerTextDrawFont(playerid, pdRadar[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, pdRadar[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][8], 0);

	pdRadar[playerid][9] = CreatePlayerTextDraw(playerid, 533.931152, 202.250061, "LD_DRV:tvbase");
	PlayerTextDrawLetterSize(playerid, pdRadar[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, pdRadar[playerid][9], 52.000000, 4.000000);
	PlayerTextDrawAlignment(playerid, pdRadar[playerid][9], 1);
	PlayerTextDrawColor(playerid, pdRadar[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, pdRadar[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, pdRadar[playerid][9], 255);
	PlayerTextDrawFont(playerid, pdRadar[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, pdRadar[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][9], 0);

	pdRadar[playerid][10] = CreatePlayerTextDraw(playerid, 533.931030, 289.166809, "LD_DRV:tvbase");
	PlayerTextDrawLetterSize(playerid, pdRadar[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, pdRadar[playerid][10], 52.000000, 3.000000);
	PlayerTextDrawAlignment(playerid, pdRadar[playerid][10], 1);
	PlayerTextDrawColor(playerid, pdRadar[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, pdRadar[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, pdRadar[playerid][10], 255);
	PlayerTextDrawFont(playerid, pdRadar[playerid][10], 4);
	PlayerTextDrawSetProportional(playerid, pdRadar[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, pdRadar[playerid][10], 0);
	return 1;
}

LoadSwoopTaxameter(playerid)
{
	swoopTaxameter[playerid][0] = CreatePlayerTextDraw(playerid, 558.930847, 205.166702, "box");
	PlayerTextDrawLetterSize(playerid, swoopTaxameter[playerid][0], 0.000000, 9.156661);
	PlayerTextDrawTextSize(playerid, swoopTaxameter[playerid][0], 0.000000, 142.000000);
	PlayerTextDrawAlignment(playerid, swoopTaxameter[playerid][0], 2);
	PlayerTextDrawColor(playerid, swoopTaxameter[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, swoopTaxameter[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, swoopTaxameter[playerid][0], 1977155583);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, swoopTaxameter[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, swoopTaxameter[playerid][0], 255);
	PlayerTextDrawFont(playerid, swoopTaxameter[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, swoopTaxameter[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][0], 0);

	swoopTaxameter[playerid][1] = CreatePlayerTextDraw(playerid, 557.994262, 209.250015, "Distance travelled: 155.427 MI");
	PlayerTextDrawLetterSize(playerid, swoopTaxameter[playerid][1], 0.219618, 1.238329);
	PlayerTextDrawAlignment(playerid, swoopTaxameter[playerid][1], 2);
	PlayerTextDrawColor(playerid, swoopTaxameter[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][1], 1);
	PlayerTextDrawSetOutline(playerid, swoopTaxameter[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, swoopTaxameter[playerid][1], 255);
	PlayerTextDrawFont(playerid, swoopTaxameter[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, swoopTaxameter[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][1], 1);

	swoopTaxameter[playerid][2] = CreatePlayerTextDraw(playerid, 578.140563, 230.833312, "$1 USD");
	PlayerTextDrawLetterSize(playerid, swoopTaxameter[playerid][2], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, swoopTaxameter[playerid][2], 2);
	PlayerTextDrawColor(playerid, swoopTaxameter[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][2], 1);
	PlayerTextDrawSetOutline(playerid, swoopTaxameter[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, swoopTaxameter[playerid][2], 255);
	PlayerTextDrawFont(playerid, swoopTaxameter[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, swoopTaxameter[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][2], 1);

	swoopTaxameter[playerid][3] = CreatePlayerTextDraw(playerid, 559.868347, 268.750061, "Pricing: $1.55 USD per Mile");
	PlayerTextDrawLetterSize(playerid, swoopTaxameter[playerid][3], 0.237423, 1.150832);
	PlayerTextDrawAlignment(playerid, swoopTaxameter[playerid][3], 2);
	PlayerTextDrawColor(playerid, swoopTaxameter[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][3], 1);
	PlayerTextDrawSetOutline(playerid, swoopTaxameter[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, swoopTaxameter[playerid][3], 255);
	PlayerTextDrawFont(playerid, swoopTaxameter[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, swoopTaxameter[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][3], 1);

	swoopTaxameter[playerid][4] = CreatePlayerTextDraw(playerid, 518.001464, 227.916671, "ld_shtr:ship");
	PlayerTextDrawLetterSize(playerid, swoopTaxameter[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, swoopTaxameter[playerid][4], 37.000000, 38.000000);
	PlayerTextDrawAlignment(playerid, swoopTaxameter[playerid][4], 1);
	PlayerTextDrawColor(playerid, swoopTaxameter[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, swoopTaxameter[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, swoopTaxameter[playerid][4], 255);
	PlayerTextDrawFont(playerid, swoopTaxameter[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, swoopTaxameter[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][4], 0);

	swoopTaxameter[playerid][5] = CreatePlayerTextDraw(playerid, 484.268249, 202.250015, "LD_DRV:tvcorn");
	PlayerTextDrawLetterSize(playerid, swoopTaxameter[playerid][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, swoopTaxameter[playerid][5], 50.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, swoopTaxameter[playerid][5], 1);
	PlayerTextDrawColor(playerid, swoopTaxameter[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, swoopTaxameter[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, swoopTaxameter[playerid][5], 255);
	PlayerTextDrawFont(playerid, swoopTaxameter[playerid][5], 4);
	PlayerTextDrawSetProportional(playerid, swoopTaxameter[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][5], 0);

	swoopTaxameter[playerid][6] = CreatePlayerTextDraw(playerid, 635.132324, 202.250091, "LD_DRV:tvcorn");
	PlayerTextDrawLetterSize(playerid, swoopTaxameter[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, swoopTaxameter[playerid][6], -50.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, swoopTaxameter[playerid][6], 1);
	PlayerTextDrawColor(playerid, swoopTaxameter[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, swoopTaxameter[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, swoopTaxameter[playerid][6], 255);
	PlayerTextDrawFont(playerid, swoopTaxameter[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, swoopTaxameter[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][6], 0);

	swoopTaxameter[playerid][7] = CreatePlayerTextDraw(playerid, 483.799804, 292.666656, "LD_DRV:tvcorn");
	PlayerTextDrawLetterSize(playerid, swoopTaxameter[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, swoopTaxameter[playerid][7], 50.000000, -50.000000);
	PlayerTextDrawAlignment(playerid, swoopTaxameter[playerid][7], 1);
	PlayerTextDrawColor(playerid, swoopTaxameter[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, swoopTaxameter[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, swoopTaxameter[playerid][7], 255);
	PlayerTextDrawFont(playerid, swoopTaxameter[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, swoopTaxameter[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][7], 0);

	swoopTaxameter[playerid][8] = CreatePlayerTextDraw(playerid, 635.132141, 292.666534, "LD_DRV:tvcorn");
	PlayerTextDrawLetterSize(playerid, swoopTaxameter[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, swoopTaxameter[playerid][8], -50.000000, -50.000000);
	PlayerTextDrawAlignment(playerid, swoopTaxameter[playerid][8], 1);
	PlayerTextDrawColor(playerid, swoopTaxameter[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, swoopTaxameter[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, swoopTaxameter[playerid][8], 255);
	PlayerTextDrawFont(playerid, swoopTaxameter[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, swoopTaxameter[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][8], 0);

	swoopTaxameter[playerid][9] = CreatePlayerTextDraw(playerid, 533.931152, 202.250061, "LD_DRV:tvbase");
	PlayerTextDrawLetterSize(playerid, swoopTaxameter[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, swoopTaxameter[playerid][9], 52.000000, 4.000000);
	PlayerTextDrawAlignment(playerid, swoopTaxameter[playerid][9], 1);
	PlayerTextDrawColor(playerid, swoopTaxameter[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, swoopTaxameter[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, swoopTaxameter[playerid][9], 255);
	PlayerTextDrawFont(playerid, swoopTaxameter[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, swoopTaxameter[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][9], 0);

	swoopTaxameter[playerid][10] = CreatePlayerTextDraw(playerid, 533.931030, 289.166809, "LD_DRV:tvbase");
	PlayerTextDrawLetterSize(playerid, swoopTaxameter[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, swoopTaxameter[playerid][10], 52.000000, 3.000000);
	PlayerTextDrawAlignment(playerid, swoopTaxameter[playerid][10], 1);
	PlayerTextDrawColor(playerid, swoopTaxameter[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, swoopTaxameter[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, swoopTaxameter[playerid][10], 255);
	PlayerTextDrawFont(playerid, swoopTaxameter[playerid][10], 4);
	PlayerTextDrawSetProportional(playerid, swoopTaxameter[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, swoopTaxameter[playerid][10], 0);

	return 1;
}

LoadPayDayTD(playerid)
{
	TD_vyplaty[playerid][0] = CreatePlayerTextDraw(playerid, 637.174560, 433.250122, "Cislo seku: ~w~1533");
	PlayerTextDrawLetterSize(playerid, TD_vyplaty[playerid][0], 0.222898, 1.139165);
	PlayerTextDrawAlignment(playerid, TD_vyplaty[playerid][0], 3);
	PlayerTextDrawColor(playerid, TD_vyplaty[playerid][0], 1508348927);
	PlayerTextDrawSetShadow(playerid, TD_vyplaty[playerid][0], 1);
	PlayerTextDrawSetOutline(playerid, TD_vyplaty[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_vyplaty[playerid][0], 255);
	PlayerTextDrawFont(playerid, TD_vyplaty[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TD_vyplaty[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TD_vyplaty[playerid][0], 1);
	return 1;
}

new A_backgroundSprites[][][] = {
	{{0x9fdaecff}, 		"Light Blue"},
	{{0x4daac5ff},  	"Dark Blue"},
	{{0xe36e6eff},      "Light Red"},
	{{0xba3434ff},      "Dark Red"},
	{{0x90ee8dff},      "Light Green"},
	{{0x47bf43ff},      "Dark Green"},
	{{0xdfb786ff},      "Light Orange"},
	{{0xd89411ff},      "Dark Orange"},
	{{0xe7e48fff},      "Light Yellow"},
	{{0xc1bc4bff},      "Dirty Yellow"},
	{{0xecb9e2ff},      "Pink"},
	{{0xc968b6ff},      "Violet"}

	/*{"LD_SPAC:white", 	"Light Blue"},
	{"LD_DUAL:backgnd", "Sky 1"},
	{"ld_grav:sky",     "Sky 2"},
	{"ld_shtr:bstars",  "Sky 3"},
	{"LD_OTB:bckgrnd",  "Forest"},
	{"splash1:splash1", "Vice City 1"},
	{"splash2:splash2", "Vice City 2"}*/
};

phone_refreshTextdraw(playerid)
{

	if(phone_isPhoneTurnedOff(playerid))
	{

	    for(new x; x < 27; x++)
		    PlayerTextDrawHide(playerid, PTD_phone_MAIN[playerid][x]);

		for(new x; x < 5; x++)
  			PlayerTextDrawHide(playerid, PTD_phone_MENU[playerid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(playerid, PTD_phone_MESSAGES[playerid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(playerid, PTD_phone_OPTIONS[playerid][x]);

        for(new x; x < 3; x++)
  			PlayerTextDrawHide(playerid, PTD_phone_EXTRA[playerid][x]);

		phone_SelectedTile[playerid] 	= 0;
  		phone_Screen[playerid] 			= 0;

	    PlayerTextDrawBoxColor(playerid, PTD_phone_MAIN[playerid][1], 0x6b6b6bff);

	    for(new x; x < 27; x ++)
	    {

	        switch(x)
	        {
	        	case 3,4,5,6:
	            	continue;

				default:
				    PlayerTextDrawShow(playerid, PTD_phone_MAIN[playerid][x]);
			}
		}

		return 1;
	}

	// PHONE CONSTRUCTION
	PlayerTextDrawBoxColor(playerid, PTD_phone_MAIN[playerid][1], A_backgroundSprites[phone_BackgroundScreen[playerid]][0][0]);
	//PlayerTextDrawSetString(playerid, PTD_phone_MAIN[playerid][1], A_backgroundSprites[phone_BackgroundScreen[playerid]][1]);

	for(new x; x < 27; x ++)
	    PlayerTextDrawShow(playerid, PTD_phone_MAIN[playerid][x]);
	// END OF PHONE CONSTRUCTION

	// MAIN MENU
	for(new x; x < 5; x++)
		PlayerTextDrawBackgroundColor(playerid, PTD_phone_MENU[playerid][x], 187),
		PlayerTextDrawBoxColor(playerid, PTD_phone_MENU[playerid][x], 153);

	if(phone_SelectedTile[playerid] < 5)
	{
	    PlayerTextDrawBackgroundColor(playerid, PTD_phone_MENU[playerid][phone_SelectedTile[playerid]], 909522687),
		PlayerTextDrawBoxColor(playerid, PTD_phone_MENU[playerid][phone_SelectedTile[playerid]], 909522670);
	}

	if(phone_Screen[playerid] == 0)
	{

		for(new x; x < 5; x++)
     		PlayerTextDrawShow(playerid, PTD_phone_MENU[playerid][x]);

	}
	else
	{

	    for(new x; x < 5; x++)
     		PlayerTextDrawHide(playerid, PTD_phone_MENU[playerid][x]);

	}
	// END OF MAIN MENU

	// MESSAGES
	for(new x; x < 2; x++)
		PlayerTextDrawBackgroundColor(playerid, PTD_phone_MESSAGES[playerid][x], 187),
		PlayerTextDrawBoxColor(playerid, PTD_phone_MESSAGES[playerid][x], 153);

	if(phone_SelectedTile[playerid] < 2)
	{
	    PlayerTextDrawBackgroundColor(playerid, PTD_phone_MESSAGES[playerid][phone_SelectedTile[playerid]], 909522687),
		PlayerTextDrawBoxColor(playerid, PTD_phone_MESSAGES[playerid][phone_SelectedTile[playerid]], 909522670);
	}

	if(phone_Screen[playerid] == 1)
	{

		for(new x; x < 2; x++)
     		PlayerTextDrawShow(playerid, PTD_phone_MESSAGES[playerid][x]);

	}
	else
	{

	    for(new x; x < 2; x++)
     		PlayerTextDrawHide(playerid, PTD_phone_MESSAGES[playerid][x]);

	}
	// END OF MESSAGES

	// OPTIONS

	new
	    S_string[ 128 ];

	//format(S_string, 128, "xOS 1.151.22R1");
	//PlayerTextDrawSetString(playerid, PTD_phone_OPTIONS[playerid][3], S_string);

	format(S_string, 128, "Your phone number~n~_%d", phone_getPlayerNumber(playerid));
	PlayerTextDrawSetString(playerid, PTD_phone_OPTIONS[playerid][2], S_string);

	format(S_string, 128, "Screen background~n~_%s", A_backgroundSprites[phone_BackgroundScreen[playerid]][1]);
	PlayerTextDrawSetString(playerid, PTD_phone_OPTIONS[playerid][1], S_string);

	if(phone_SleepMode[playerid] == 0) format(S_string, 128, "Sleep Mode~n~_Off");
	else format(S_string, 128, "Sleep Mode~n~_On");
	PlayerTextDrawSetString(playerid, PTD_phone_OPTIONS[playerid][0], S_string);

	for(new x; x < 4; x++)
		PlayerTextDrawBackgroundColor(playerid, PTD_phone_OPTIONS[playerid][x], 187),
		PlayerTextDrawBoxColor(playerid, PTD_phone_OPTIONS[playerid][x], 153);

	if(phone_SelectedTile[playerid] < 4)
	{
	    PlayerTextDrawBackgroundColor(playerid, PTD_phone_OPTIONS[playerid][phone_SelectedTile[playerid]], 909522687),
		PlayerTextDrawBoxColor(playerid, PTD_phone_OPTIONS[playerid][phone_SelectedTile[playerid]], 909522670);
	}

	if(phone_Screen[playerid] == 2)
	{

		for(new x; x < 3; x++)
     		PlayerTextDrawShow(playerid, PTD_phone_OPTIONS[playerid][x]);

	}
	else
	{

	    for(new x; x < 4; x++)
     		PlayerTextDrawHide(playerid, PTD_phone_OPTIONS[playerid][x]);

	}
	// END OF OPTIONS

	return 1;

}

LoadPhone(playerid)
{

	// PHONE CONSTRUCTION
	PTD_phone_MAIN[playerid][0] = CreatePlayerTextDraw(playerid, 544.875366, 282.749847, "POZADIE");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][0], 0.000000, 22.415811);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][0], 0.000000, 99.000000);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][0], 2);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_MAIN[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_MAIN[playerid][0], 656877567);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][0], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][0], 0);

	PTD_phone_MAIN[playerid][1] = CreatePlayerTextDraw(playerid, 544.875976, 293.833190, "box");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][1], 0.000000, 10.374816);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][1], 0.000000, 79.000000);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][1], 2);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_MAIN[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_MAIN[playerid][1], 41215);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][1], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][1], 0);

	PTD_phone_MAIN[playerid][2] = CreatePlayerTextDraw(playerid, 544.875427, 380.750274, "LISTA_DOLNA");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][2], 0.000000, 0.723280);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][2], 0.000000, 79.000000);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][2], 2);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_MAIN[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_MAIN[playerid][2], 1229539839);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][2], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][2], 0);

	PTD_phone_MAIN[playerid][3] = CreatePlayerTextDraw(playerid, 544.875488, 293.833343, "LISTA_HORNA");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][3], 0.000000, 0.723280);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][3], 0.000000, 79.000000);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][3], 2);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_MAIN[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_MAIN[playerid][3], 1229539839);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][3], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][3], 0);

	PTD_phone_MAIN[playerid][4] = CreatePlayerTextDraw(playerid, 580.483276, 292.666687, "MON 12:12 PM");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][4], 0.149809, 0.853333);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][4], 3);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][4], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][4], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][4], 0);

	PTD_phone_MAIN[playerid][5] = CreatePlayerTextDraw(playerid, 507.393829, 293.833404, "LA Tel.");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][5], 0.111859, 0.654999);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][5], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][5], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][5], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][5], 0);

	PTD_phone_MAIN[playerid][6] = CreatePlayerTextDraw(playerid, 543.469604, 293.833404, "100%");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][6], 0.111859, 0.654999);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][6], 3);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][6], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][6], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][6], 0);

	PTD_phone_MAIN[playerid][7] = CreatePlayerTextDraw(playerid, 517.701660, 379.583374, "SELECT");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][7], 0.201346, 0.940832);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][7], 6.208076, 8.940832);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][7], 2);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][7], 8388863);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][7], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MAIN[playerid][7], true);

	PTD_phone_MAIN[playerid][8] = CreatePlayerTextDraw(playerid, 570.644470, 379.583404, "BACK");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][8], 0.201346, 0.940832);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][8], 6.208076, 8.940832);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][8], 2);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][8], -1523963137);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][8], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MAIN[playerid][8], true);

	PTD_phone_MAIN[playerid][9] = CreatePlayerTextDraw(playerid, 506.925537, 395.333160, "1");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][9], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][9], 3.400000, 4.600000);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][9], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][9], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][9], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MAIN[playerid][9], true);

	PTD_phone_MAIN[playerid][10] = CreatePlayerTextDraw(playerid, 505.519958, 411.666564, "4");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][10], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][10], 3.400000, 4.600000);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][10], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][10], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][10], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MAIN[playerid][10], true);

	PTD_phone_MAIN[playerid][11] = CreatePlayerTextDraw(playerid, 505.520202, 428.000061, "7");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][11], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][11], 3.400000, 4.600000);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][11], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][11], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][11], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][11], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MAIN[playerid][11], true);

	PTD_phone_MAIN[playerid][12] = CreatePlayerTextDraw(playerid, 532.694641, 395.333343, "2");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][12], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][12], 3.400000, 4.600000);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][12], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][12], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][12], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][12], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][12], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MAIN[playerid][12], true);

	PTD_phone_MAIN[playerid][13] = CreatePlayerTextDraw(playerid, 532.226196, 411.666717, "5");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][13], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][13], 3.400000, 4.600000);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][13], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][13], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][13], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][13], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][13], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MAIN[playerid][13], true);

	PTD_phone_MAIN[playerid][14] = CreatePlayerTextDraw(playerid, 532.226135, 428.000183, "8");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][14], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][14], 3.400000, 4.600000);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][14], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][14], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][14], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][14], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][14], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MAIN[playerid][14], true);

	PTD_phone_MAIN[playerid][15] = CreatePlayerTextDraw(playerid, 562.679870, 395.916839, "3");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][15], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][15], 3.400000, 4.600000);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][15], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][15], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][15], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][15], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][15], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MAIN[playerid][15], true);

	PTD_phone_MAIN[playerid][16] = CreatePlayerTextDraw(playerid, 562.679870, 411.083526, "6");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][16], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][16], 3.400000, 4.600000);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][16], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][16], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][16], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][16], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][16], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MAIN[playerid][16], true);

	PTD_phone_MAIN[playerid][17] = CreatePlayerTextDraw(playerid, 562.211364, 428.000244, "9");
    PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][17], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PTD_phone_MAIN[playerid][17], 3.400000, 4.600000);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][17], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][17], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][17], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][17], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][17], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][17], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MAIN[playerid][17], true);

	PTD_phone_MAIN[playerid][18] = CreatePlayerTextDraw(playerid, 543.470092, 400.583312, "ABC");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][18], 0.144655, 0.649166);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][18], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][18], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][18], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][18], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][18], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][18], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][18], 0);

	PTD_phone_MAIN[playerid][19] = CreatePlayerTextDraw(playerid, 572.050048, 401.166656, "DEF");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][19], 0.144655, 0.649166);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][19], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][19], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][19], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][19], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][19], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][19], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][19], 0);

	PTD_phone_MAIN[playerid][20] = CreatePlayerTextDraw(playerid, 515.827270, 416.333374, "GHI");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][20], 0.144655, 0.649166);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][20], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][20], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][20], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][20], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][20], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][20], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][20], 0);

	PTD_phone_MAIN[playerid][21] = CreatePlayerTextDraw(playerid, 543.470214, 416.333374, "JKL");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][21], 0.144655, 0.649166);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][21], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][21], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][21], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][21], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][21], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][21], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][21], 0);

	PTD_phone_MAIN[playerid][22] = CreatePlayerTextDraw(playerid, 572.050048, 416.333343, "MNO");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][22], 0.144655, 0.649166);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][22], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][22], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][22], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][22], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][22], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][22], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][22], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][22], 0);

	PTD_phone_MAIN[playerid][23] = CreatePlayerTextDraw(playerid, 516.295837, 432.083343, "PQRS");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][23], 0.121698, 0.643333);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][23], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][23], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][23], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][23], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][23], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][23], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][23], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][23], 0);

	PTD_phone_MAIN[playerid][24] = CreatePlayerTextDraw(playerid, 543.470336, 432.666687, "TUV");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][24], 0.144655, 0.649166);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][24], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][24], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][24], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][24], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][24], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][24], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][24], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][24], 0);

	PTD_phone_MAIN[playerid][25] = CreatePlayerTextDraw(playerid, 572.050048, 432.666625, "WXYZ");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][25], 0.118418, 0.666666);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][25], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][25], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][25], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][25], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][25], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][25], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][25], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][25], 0);

	PTD_phone_MAIN[playerid][26] = CreatePlayerTextDraw(playerid, 515.827392, 399.416595, "-");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MAIN[playerid][26], 0.207437, 0.812500);
	PlayerTextDrawAlignment(playerid, PTD_phone_MAIN[playerid][26], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MAIN[playerid][26], -858993409);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][26], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MAIN[playerid][26], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MAIN[playerid][26], 255);
	PlayerTextDrawFont(playerid, PTD_phone_MAIN[playerid][26], 2);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MAIN[playerid][26], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MAIN[playerid][26], 0);
	// END OF PHONE CONSTRUCTION

	// PHONE MAIN MENU
	PTD_phone_MENU[playerid][0] = CreatePlayerTextDraw(playerid, 508.799591, 309.583465, "Dial number");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MENU[playerid][0], 0.213528, 0.917498);
	PlayerTextDrawTextSize(playerid, PTD_phone_MENU[playerid][0], 581.000000, 5.917498);
	PlayerTextDrawAlignment(playerid, PTD_phone_MENU[playerid][0], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MENU[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_MENU[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_MENU[playerid][0], 153);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MENU[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MENU[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MENU[playerid][0], 187);
	PlayerTextDrawFont(playerid, PTD_phone_MENU[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MENU[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MENU[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MENU[playerid][0], true);

	PTD_phone_MENU[playerid][1] = CreatePlayerTextDraw(playerid, 508.799591, 322.416961, "Messages");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MENU[playerid][1], 0.213528, 0.917498);
	PlayerTextDrawTextSize(playerid, PTD_phone_MENU[playerid][1], 581.000000, 5.917498);
	PlayerTextDrawAlignment(playerid, PTD_phone_MENU[playerid][1], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MENU[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_MENU[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_MENU[playerid][1], 153);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MENU[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MENU[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MENU[playerid][1], 187);
	PlayerTextDrawFont(playerid, PTD_phone_MENU[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MENU[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MENU[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MENU[playerid][1], true);

	PTD_phone_MENU[playerid][2] = CreatePlayerTextDraw(playerid, 508.799591, 335.250427, "Contacts");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MENU[playerid][2], 0.213528, 0.917498);
	PlayerTextDrawTextSize(playerid, PTD_phone_MENU[playerid][2], 581.000000, 5.917498);
	PlayerTextDrawAlignment(playerid, PTD_phone_MENU[playerid][2], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MENU[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_MENU[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_MENU[playerid][2], 153);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MENU[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MENU[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MENU[playerid][2], 187);
	PlayerTextDrawFont(playerid, PTD_phone_MENU[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MENU[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MENU[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MENU[playerid][2], true);

	PTD_phone_MENU[playerid][3] = CreatePlayerTextDraw(playerid, 508.799652, 348.083831, "Options");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MENU[playerid][3], 0.213528, 0.917498);
	PlayerTextDrawTextSize(playerid, PTD_phone_MENU[playerid][3], 581.000000, 5.917498);
	PlayerTextDrawAlignment(playerid, PTD_phone_MENU[playerid][3], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MENU[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_MENU[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_MENU[playerid][3], 909522670);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MENU[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MENU[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MENU[playerid][3], 909522687);
	PlayerTextDrawFont(playerid, PTD_phone_MENU[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MENU[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MENU[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MENU[playerid][3], true);

	PTD_phone_MENU[playerid][4] = CreatePlayerTextDraw(playerid, 508.799652, 360.916, "Turn Off");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MENU[playerid][4], 0.213528, 0.917498);
	PlayerTextDrawTextSize(playerid, PTD_phone_MENU[playerid][4], 581.000000, 5.917498);
	PlayerTextDrawAlignment(playerid, PTD_phone_MENU[playerid][4], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MENU[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_MENU[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_MENU[playerid][4], 909522670);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MENU[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MENU[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MENU[playerid][4], 909522687);
	PlayerTextDrawFont(playerid, PTD_phone_MENU[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MENU[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MENU[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MENU[playerid][4], true);
	// END OF PHONE MAIN MENU

	// PHONE MESSAGES
	PTD_phone_MESSAGES[playerid][0] = CreatePlayerTextDraw(playerid, 508.799591, 309.583465, "New message");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MESSAGES[playerid][0], 0.213528, 0.917498);
	PlayerTextDrawTextSize(playerid, PTD_phone_MESSAGES[playerid][0], 581.000000, 5.918);
	PlayerTextDrawAlignment(playerid, PTD_phone_MESSAGES[playerid][0], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MESSAGES[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_MESSAGES[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_MESSAGES[playerid][0], 153);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MESSAGES[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MESSAGES[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MESSAGES[playerid][0], 187);
	PlayerTextDrawFont(playerid, PTD_phone_MESSAGES[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MESSAGES[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MESSAGES[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MESSAGES[playerid][0], true);

	PTD_phone_MESSAGES[playerid][1] = CreatePlayerTextDraw(playerid, 508.799530, 322.416778, "Past messages");
	PlayerTextDrawLetterSize(playerid, PTD_phone_MESSAGES[playerid][1], 0.213528, 0.917498);
	PlayerTextDrawTextSize(playerid, PTD_phone_MESSAGES[playerid][1], 581.000000, 5.918);
	PlayerTextDrawAlignment(playerid, PTD_phone_MESSAGES[playerid][1], 1);
	PlayerTextDrawColor(playerid, PTD_phone_MESSAGES[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_MESSAGES[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_MESSAGES[playerid][1], 153);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MESSAGES[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_MESSAGES[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_MESSAGES[playerid][1], 187);
	PlayerTextDrawFont(playerid, PTD_phone_MESSAGES[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_MESSAGES[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_MESSAGES[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_MESSAGES[playerid][1], true);
	// END OF PHONE MESSAGES

	// PHONE OPTIONS
	PTD_phone_OPTIONS[playerid][0] = CreatePlayerTextDraw(playerid, 508.799591, 309.583465, "Sleep mode~n~ Off");
	PlayerTextDrawLetterSize(playerid, PTD_phone_OPTIONS[playerid][0], 0.213528, 0.917498);
	PlayerTextDrawTextSize(playerid, PTD_phone_OPTIONS[playerid][0], 581.000000, 11.0);
	PlayerTextDrawAlignment(playerid, PTD_phone_OPTIONS[playerid][0], 1);
	PlayerTextDrawColor(playerid, PTD_phone_OPTIONS[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_OPTIONS[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_OPTIONS[playerid][0], 153);
	PlayerTextDrawSetShadow(playerid, PTD_phone_OPTIONS[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_OPTIONS[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_OPTIONS[playerid][0], 187);
	PlayerTextDrawFont(playerid, PTD_phone_OPTIONS[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_OPTIONS[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_OPTIONS[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_OPTIONS[playerid][0], true);

	PTD_phone_OPTIONS[playerid][1] = CreatePlayerTextDraw(playerid, 508.799530, 330.583618, "Ringtone~n~ Diamonds");
	PlayerTextDrawLetterSize(playerid, PTD_phone_OPTIONS[playerid][1], 0.213528, 0.917498);
	PlayerTextDrawTextSize(playerid, PTD_phone_OPTIONS[playerid][1], 581.000000, 11.0);
	PlayerTextDrawAlignment(playerid, PTD_phone_OPTIONS[playerid][1], 1);
	PlayerTextDrawColor(playerid, PTD_phone_OPTIONS[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_OPTIONS[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_OPTIONS[playerid][1], 153);
	PlayerTextDrawSetShadow(playerid, PTD_phone_OPTIONS[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_OPTIONS[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_OPTIONS[playerid][1], 187);
	PlayerTextDrawFont(playerid, PTD_phone_OPTIONS[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_OPTIONS[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_OPTIONS[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_OPTIONS[playerid][1], true);

	PTD_phone_OPTIONS[playerid][2] = CreatePlayerTextDraw(playerid, 508.799652, 351.583892, "Your phone number~n~ %d");
	PlayerTextDrawLetterSize(playerid, PTD_phone_OPTIONS[playerid][2], 0.213528, 0.917498);
	PlayerTextDrawTextSize(playerid, PTD_phone_OPTIONS[playerid][2], 581.000000, 11.0);
	PlayerTextDrawAlignment(playerid, PTD_phone_OPTIONS[playerid][2], 1);
	PlayerTextDrawColor(playerid, PTD_phone_OPTIONS[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_OPTIONS[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_OPTIONS[playerid][2], 909522670);
	PlayerTextDrawSetShadow(playerid, PTD_phone_OPTIONS[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_OPTIONS[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_OPTIONS[playerid][2], 909522687);
	PlayerTextDrawFont(playerid, PTD_phone_OPTIONS[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_OPTIONS[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_OPTIONS[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_OPTIONS[playerid][2], true);

	PTD_phone_OPTIONS[playerid][3] = CreatePlayerTextDraw(playerid, 508.799652, 372.584166, "xOS 1.0");
	PlayerTextDrawLetterSize(playerid, PTD_phone_OPTIONS[playerid][3], 0.213528, 0.917498);
	PlayerTextDrawTextSize(playerid, PTD_phone_OPTIONS[playerid][3], 581.000000, 11.0);
	PlayerTextDrawAlignment(playerid, PTD_phone_OPTIONS[playerid][3], 1);
	PlayerTextDrawColor(playerid, PTD_phone_OPTIONS[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_OPTIONS[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_OPTIONS[playerid][3], 909522670);
	PlayerTextDrawSetShadow(playerid, PTD_phone_OPTIONS[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_OPTIONS[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_OPTIONS[playerid][3], 909522687);
	PlayerTextDrawFont(playerid, PTD_phone_OPTIONS[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_OPTIONS[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_OPTIONS[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_phone_OPTIONS[playerid][3], true);
	// END OF PHONE OPTIONS

	//EXTRA
	PTD_phone_EXTRA[playerid][0] = CreatePlayerTextDraw(playerid, 544.856140, 303.493316, "box");
	PlayerTextDrawLetterSize(playerid, PTD_phone_EXTRA[playerid][0], 0.000000, 8.323801);
	PlayerTextDrawTextSize(playerid, PTD_phone_EXTRA[playerid][0], 0.000000, 79.000000);
	PlayerTextDrawAlignment(playerid, PTD_phone_EXTRA[playerid][0], 2);
	PlayerTextDrawColor(playerid, PTD_phone_EXTRA[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, PTD_phone_EXTRA[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, PTD_phone_EXTRA[playerid][0], -1061109505);
	PlayerTextDrawSetShadow(playerid, PTD_phone_EXTRA[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_EXTRA[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_EXTRA[playerid][0], 255);
	PlayerTextDrawFont(playerid, PTD_phone_EXTRA[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_EXTRA[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_EXTRA[playerid][0], 0);

	PTD_phone_EXTRA[playerid][1] = CreatePlayerTextDraw(playerid, 545.618652, 331.226593, "New message from:~n~123 456 789");
	PlayerTextDrawLetterSize(playerid, PTD_phone_EXTRA[playerid][1], 0.193141, 0.878933);
	PlayerTextDrawAlignment(playerid, PTD_phone_EXTRA[playerid][1], 2);
	PlayerTextDrawColor(playerid, PTD_phone_EXTRA[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_EXTRA[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_EXTRA[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_EXTRA[playerid][1], 255);
	PlayerTextDrawFont(playerid, PTD_phone_EXTRA[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, PTD_phone_EXTRA[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_EXTRA[playerid][1], 0);

	PTD_phone_EXTRA[playerid][2] = CreatePlayerTextDraw(playerid, 490.142883, 259.106628, "LD_chat:badchat");
	PlayerTextDrawLetterSize(playerid, PTD_phone_EXTRA[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PTD_phone_EXTRA[playerid][2], -20.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, PTD_phone_EXTRA[playerid][2], 1);
	PlayerTextDrawColor(playerid, PTD_phone_EXTRA[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, PTD_phone_EXTRA[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PTD_phone_EXTRA[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_phone_EXTRA[playerid][2], 255);
	PlayerTextDrawFont(playerid, PTD_phone_EXTRA[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, PTD_phone_EXTRA[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, PTD_phone_EXTRA[playerid][2], 0);
	//END OF EXTRA
	return 1;
}
/*
	< ENGLISH >
		Shows player textdraw.


	< SLOVAK >
		Naèíta hráèov textdraw.

*/
LoadPlayerTextdraws(playerid)
{

    houseSwitch[playerid] = CreatePlayerTextDraw(playerid, 320.555480, -1.333312, "box");
	PlayerTextDrawLetterSize(playerid, houseSwitch[playerid], 0.000000, 53.944461);
	PlayerTextDrawTextSize(playerid, houseSwitch[playerid], 0.000000, 734.000000);
	PlayerTextDrawAlignment(playerid, houseSwitch[playerid], 2);
	PlayerTextDrawColor(playerid, houseSwitch[playerid], -1);
	PlayerTextDrawUseBox(playerid, houseSwitch[playerid], 1);
	PlayerTextDrawBoxColor(playerid, houseSwitch[playerid], 0x00000066);
	PlayerTextDrawSetShadow(playerid, houseSwitch[playerid], 0);
	PlayerTextDrawSetOutline(playerid, houseSwitch[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, houseSwitch[playerid], 255);
	PlayerTextDrawFont(playerid, houseSwitch[playerid], 1);
	PlayerTextDrawSetProportional(playerid, houseSwitch[playerid], 1);
	PlayerTextDrawSetShadow(playerid, houseSwitch[playerid], 0);

	PTD_achievement[playerid][0] = CreatePlayerTextDraw(playerid, 268.666717, 27.013338, "Rental is for mentals");
	PlayerTextDrawLetterSize(playerid, PTD_achievement[playerid][0], 0.232381, 1.070932);
	PlayerTextDrawTextSize(playerid, PTD_achievement[playerid][0], 386.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PTD_achievement[playerid][0], 1);
	PlayerTextDrawColor(playerid, PTD_achievement[playerid][0], 255);
	PlayerTextDrawUseBox(playerid, PTD_achievement[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, PTD_achievement[playerid][0], -1061109505);
	PlayerTextDrawSetShadow(playerid, PTD_achievement[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PTD_achievement[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_achievement[playerid][0], 255);
	PlayerTextDrawFont(playerid, PTD_achievement[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, PTD_achievement[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PTD_achievement[playerid][0], 0);

	PTD_achievement[playerid][1] = CreatePlayerTextDraw(playerid, 242.762054, 43.653327, "Kup si vozidlo najmenej za 1000000$");
	PlayerTextDrawLetterSize(playerid, PTD_achievement[playerid][1], 0.189714, 0.844799);
	PlayerTextDrawTextSize(playerid, PTD_achievement[playerid][1], 386.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PTD_achievement[playerid][1], 1);
	PlayerTextDrawColor(playerid, PTD_achievement[playerid][1], 255);
	PlayerTextDrawUseBox(playerid, PTD_achievement[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, PTD_achievement[playerid][1], -1061109505);
	PlayerTextDrawSetShadow(playerid, PTD_achievement[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PTD_achievement[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_achievement[playerid][1], 255);
	PlayerTextDrawFont(playerid, PTD_achievement[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, PTD_achievement[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PTD_achievement[playerid][1], 0);

    LoadLoginScreen(playerid);
    LoadPlayerVrece(playerid);
    LoadPlayerSpectate(playerid);
    LoadPlayerMaskTD(playerid);
    LoadPlayerSpeedoMeter(playerid);
    LoadPlayerSkinShop(playerid);
    LoadATMTextdraw(playerid);
    LoadPlayerCitizenCard(playerid);
    LoadPlayerEnterInfo(playerid);
    LoadAutoSkolaTD(playerid);
    LoadPDRadar(playerid);
    LoadSwoopTaxameter(playerid);
    LoadPayDayTD(playerid);

    PTD_cents[playerid] = CreatePlayerTextDraw(playerid, 608.857238, 77.786727, "00");
	PlayerTextDrawLetterSize(playerid, PTD_cents[playerid], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, PTD_cents[playerid], 1);
	PlayerTextDrawColor(playerid, PTD_cents[playerid], -2139094785);
	PlayerTextDrawSetShadow(playerid, PTD_cents[playerid], 0);
	PlayerTextDrawSetOutline(playerid, PTD_cents[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, PTD_cents[playerid], 255);
	PlayerTextDrawFont(playerid, PTD_cents[playerid], 3);
	PlayerTextDrawSetProportional(playerid, PTD_cents[playerid], 1);
	PlayerTextDrawSetShadow(playerid, PTD_cents[playerid], 0);

    gps_TD0[playerid] = CreatePlayerTextDraw(playerid, 318.125854, 182.583343, "TOMTOM");
	PlayerTextDrawLetterSize(playerid, gps_TD0[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, gps_TD0[playerid], 2);
	PlayerTextDrawColor(playerid, gps_TD0[playerid], -1);
	PlayerTextDrawSetShadow(playerid, gps_TD0[playerid], 0);
	PlayerTextDrawSetOutline(playerid, gps_TD0[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, gps_TD0[playerid], 51);
	PlayerTextDrawFont(playerid, gps_TD0[playerid], 1);
	PlayerTextDrawSetProportional(playerid, gps_TD0[playerid], 1);

	gps_TD1[playerid] = CreatePlayerTextDraw(playerid, 285.392303, 194.666656, "LOADING ...");
	PlayerTextDrawLetterSize(playerid, gps_TD1[playerid], 0.217613, 0.987499);
	PlayerTextDrawAlignment(playerid, gps_TD1[playerid], 1);
	PlayerTextDrawColor(playerid, gps_TD1[playerid], -1);
	PlayerTextDrawSetShadow(playerid, gps_TD1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, gps_TD1[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, gps_TD1[playerid], 51);
	PlayerTextDrawFont(playerid, gps_TD1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, gps_TD1[playerid], 1);

	gps_TD2[playerid] = CreatePlayerTextDraw(playerid, 238.945816, 147.583419, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, gps_TD2[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, gps_TD2[playerid], 66.998535, 65.916671);
	PlayerTextDrawAlignment(playerid, gps_TD2[playerid], 1);
	PlayerTextDrawColor(playerid, gps_TD2[playerid], -1);
	PlayerTextDrawUseBox(playerid, gps_TD2[playerid], true);
	PlayerTextDrawBoxColor(playerid, gps_TD2[playerid], 0x00000000);
	PlayerTextDrawBackgroundColor(playerid, gps_TD2[playerid], 0x00000000);
	PlayerTextDrawSetShadow(playerid, gps_TD2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, gps_TD2[playerid], 0);
	PlayerTextDrawFont(playerid, gps_TD2[playerid], 5);
	PlayerTextDrawSetPreviewModel(playerid, gps_TD2[playerid], 3031);

	td_webTD[playerid] = CreatePlayerTextDraw(playerid, 76.222221, 422.462158, " ");
	PlayerTextDrawLetterSize(playerid, td_webTD[playerid], 0.246666, 0.957866);
	PlayerTextDrawAlignment(playerid, td_webTD[playerid], 2);
	PlayerTextDrawColor(playerid, td_webTD[playerid], -1);
	PlayerTextDrawSetShadow(playerid, td_webTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, td_webTD[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, td_webTD[playerid], 255);
	PlayerTextDrawFont(playerid, td_webTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, td_webTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, td_webTD[playerid], 0);

    hungerTD[playerid] = CreatePlayerProgressBar(playerid, 548.000000, 57.40000, 62, 3.6, 0xffc81fff, 100.0, BAR_DIRECTION_RIGHT);
    HidePlayerProgressBar(playerid, hungerTD[playerid]);

    LoadPlayerVitals(playerid);

    PTD_infobox[playerid][0] = CreatePlayerTextDraw(playerid, 553.777770, 103.083343, "Tento prikaz nemozes pouzit!");
	PlayerTextDrawLetterSize(playerid, PTD_infobox[playerid][0], 0.267876, 1.209165);
	PlayerTextDrawTextSize(playerid, PTD_infobox[playerid][0], 0.000000, 151.000000);
	PlayerTextDrawAlignment(playerid, PTD_infobox[playerid][0], 2);
	PlayerTextDrawColor(playerid, PTD_infobox[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, PTD_infobox[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, PTD_infobox[playerid][0], 336860330);
	PlayerTextDrawSetShadow(playerid, PTD_infobox[playerid][0], 1);
	PlayerTextDrawSetOutline(playerid, PTD_infobox[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_infobox[playerid][0], 842150600);
	PlayerTextDrawFont(playerid, PTD_infobox[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, PTD_infobox[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PTD_infobox[playerid][0], 1);

	PTD_infobox[playerid][1] = CreatePlayerTextDraw(playerid, 484.267944, 94.333343, "LD_CHAT:thumbdn");
	PlayerTextDrawLetterSize(playerid, PTD_infobox[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PTD_infobox[playerid][1], -15.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PTD_infobox[playerid][1], 1);
	PlayerTextDrawColor(playerid, PTD_infobox[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, PTD_infobox[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PTD_infobox[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_infobox[playerid][1], 255);
	PlayerTextDrawFont(playerid, PTD_infobox[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, PTD_infobox[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, PTD_infobox[playerid][1], 0);


	// NONONONONO
	PTD_cameras[playerid][0] = CreatePlayerTextDraw(playerid, 605.783386, 411.666717, "SURVEILLANCE CAMERA   11:25 PM   04/12/17");
	PlayerTextDrawLetterSize(playerid, PTD_cameras[playerid][0], 0.345182, 1.553333);
	PlayerTextDrawAlignment(playerid, PTD_cameras[playerid][0], 3);
	PlayerTextDrawColor(playerid, PTD_cameras[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, PTD_cameras[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PTD_cameras[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_cameras[playerid][0], 255);
	PlayerTextDrawFont(playerid, PTD_cameras[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, PTD_cameras[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PTD_cameras[playerid][0], 0);

	PTD_cameras[playerid][1] = CreatePlayerTextDraw(playerid, 4.670588, 1.000016, "LIVE");
	PlayerTextDrawLetterSize(playerid, PTD_cameras[playerid][1], 0.500263, 2.084166);
	PlayerTextDrawAlignment(playerid, PTD_cameras[playerid][1], 1);
	PlayerTextDrawColor(playerid, PTD_cameras[playerid][1], -1523963137);
	PlayerTextDrawSetShadow(playerid, PTD_cameras[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PTD_cameras[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_cameras[playerid][1], -2147483393);
	PlayerTextDrawFont(playerid, PTD_cameras[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, PTD_cameras[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PTD_cameras[playerid][1], 0);

	PTD_cameras[playerid][2] = CreatePlayerTextDraw(playerid, 635.300170, 1.583329, "LEFT ALT to close~n~NUM4 & NUM6 to switch");
	PlayerTextDrawLetterSize(playerid, PTD_cameras[playerid][2], 0.217745, 0.999166);
	PlayerTextDrawAlignment(playerid, PTD_cameras[playerid][2], 3);
	PlayerTextDrawColor(playerid, PTD_cameras[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, PTD_cameras[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PTD_cameras[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, PTD_cameras[playerid][2], 255);
	PlayerTextDrawFont(playerid, PTD_cameras[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, PTD_cameras[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, PTD_cameras[playerid][2], 0);

	// TACHOMETER

	PTD_timeleft[playerid] = CreatePlayerTextDraw(playerid, 314.381195, 12.933340, "Zostavajuci cas ~r~15:31");
	PlayerTextDrawLetterSize(playerid, PTD_timeleft[playerid], 0.185904, 0.942933);
	PlayerTextDrawAlignment(playerid, PTD_timeleft[playerid], 2);
	PlayerTextDrawColor(playerid, PTD_timeleft[playerid], -1);
	PlayerTextDrawSetShadow(playerid, PTD_timeleft[playerid], 0);
	PlayerTextDrawSetOutline(playerid, PTD_timeleft[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, PTD_timeleft[playerid], 255);
	PlayerTextDrawFont(playerid, PTD_timeleft[playerid], 1);
	PlayerTextDrawSetProportional(playerid, PTD_timeleft[playerid], 1);
	PlayerTextDrawSetShadow(playerid, PTD_timeleft[playerid], 0);

	breakin_td[playerid][0] = CreatePlayerTextDraw(playerid, 38.872631, 316.583312, "box");
	PlayerTextDrawLetterSize(playerid, breakin_td[playerid][0], 0.000000, 0.629575);
	PlayerTextDrawTextSize(playerid, breakin_td[playerid][0], 103.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, breakin_td[playerid][0], 1);
	PlayerTextDrawColor(playerid, breakin_td[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, breakin_td[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, breakin_td[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, breakin_td[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, breakin_td[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, breakin_td[playerid][0], 255);
	PlayerTextDrawFont(playerid, breakin_td[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, breakin_td[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, breakin_td[playerid][0], 0);

	breakin_td[playerid][1] = CreatePlayerTextDraw(playerid, 40.746715, 318.916656, "box");
	PlayerTextDrawLetterSize(playerid, breakin_td[playerid][1], 0.000000, 0.114201);
	PlayerTextDrawTextSize(playerid, breakin_td[playerid][1], 101.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, breakin_td[playerid][1], 1);
	PlayerTextDrawColor(playerid, breakin_td[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, breakin_td[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, breakin_td[playerid][1], -1061109505);
	PlayerTextDrawSetShadow(playerid, breakin_td[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, breakin_td[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, breakin_td[playerid][1], -1378294017);
	PlayerTextDrawFont(playerid, breakin_td[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, breakin_td[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, breakin_td[playerid][1], 0);

	breakin_td[playerid][2] = CreatePlayerTextDraw(playerid, 40.746715, 318.916656, "box");
	PlayerTextDrawLetterSize(playerid, breakin_td[playerid][2], 0.000000, 0.114201);
	PlayerTextDrawTextSize(playerid, breakin_td[playerid][2], 37.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, breakin_td[playerid][2], 1);
	PlayerTextDrawColor(playerid, breakin_td[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, breakin_td[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, breakin_td[playerid][2], 0xFFFFFFFF);
	PlayerTextDrawSetShadow(playerid, breakin_td[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, breakin_td[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, breakin_td[playerid][2], -1378294017);
	PlayerTextDrawFont(playerid, breakin_td[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, breakin_td[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, breakin_td[playerid][2], 0);

	ps_td[playerid][0] = CreatePlayerTextDraw(playerid, 38.872631, 316.583312, "box");
	PlayerTextDrawLetterSize(playerid, ps_td[playerid][0], 0.000000, 0.629575);
	PlayerTextDrawTextSize(playerid, ps_td[playerid][0], 103.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, ps_td[playerid][0], 1);
	PlayerTextDrawColor(playerid, ps_td[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, ps_td[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, ps_td[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, ps_td[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, ps_td[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, ps_td[playerid][0], 255);
	PlayerTextDrawFont(playerid, ps_td[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, ps_td[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, ps_td[playerid][0], 0);

	ps_td[playerid][1] = CreatePlayerTextDraw(playerid, 40.746715, 318.916656, "box");
	PlayerTextDrawLetterSize(playerid, ps_td[playerid][1], 0.000000, 0.114201);
	PlayerTextDrawTextSize(playerid, ps_td[playerid][1], 101.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, ps_td[playerid][1], 1);
	PlayerTextDrawColor(playerid, ps_td[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, ps_td[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, ps_td[playerid][1], -1061109505);
	PlayerTextDrawSetShadow(playerid, ps_td[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, ps_td[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, ps_td[playerid][1], -1378294017);
	PlayerTextDrawFont(playerid, ps_td[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, ps_td[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, ps_td[playerid][1], 0);

	ps_td[playerid][2] = CreatePlayerTextDraw(playerid, 40.746715, 318.916656, "box");
	PlayerTextDrawLetterSize(playerid, ps_td[playerid][2], 0.000000, 0.114201);
	PlayerTextDrawTextSize(playerid, ps_td[playerid][2], 37.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, ps_td[playerid][2], 1);
	PlayerTextDrawColor(playerid, ps_td[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, ps_td[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, ps_td[playerid][2], 0xFFFFFFFF);
	PlayerTextDrawSetShadow(playerid, ps_td[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, ps_td[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, ps_td[playerid][2], -1378294017);
	PlayerTextDrawFont(playerid, ps_td[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, ps_td[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, ps_td[playerid][2], 0);

	return 1;

}

// SKIN SYSTEM

ShowSkinShop(playerid)
{

	switch(GetPlayerGender(playerid))
	{
		case 1:
		{
			new bool:isValidSkin = false;

			currSkinModel[playerid] = buyableMaleSkins[0];
			currSkinIndex[playerid] = 0;

			while(isValidSkin == false)
			{

				currSkinIndex[playerid] ++;
				currSkinModel[playerid] = buyableMaleSkins[currSkinIndex[playerid]];

				if(currSkinIndex[playerid] >= sizeof(buyableMaleSkins))
					return SendError(playerid, "Vyskytla sa závaná chyba v systéme, iadne skiny nie sú k dispozícii!");

				isValidSkin = true;
			}

			new
				dollarText[12];

			format(dollarText, 12, "_");

			PlayerTextDrawSetString(playerid, TD_skinShop6[playerid], dollarText);
			PlayerTextDrawSetPreviewModel(playerid, TD_skinShop1[playerid], currSkinModel[playerid]);
		}

		case 2:
		{
			new bool:isValidSkin = false;

			currSkinModel[playerid] = buyableFemaleSkins[0];
			currSkinIndex[playerid] = -1;

			while(isValidSkin == false)
			{

				currSkinIndex[playerid] ++;
				currSkinModel[playerid] = buyableFemaleSkins[currSkinIndex[playerid]];

				if(currSkinIndex[playerid] >= sizeof(buyableFemaleSkins))
					return SendError(playerid, "Vyskytla sa závaná chyba v systéme, iadne skiny nie sú k dispozícii!");

				isValidSkin = true;
			}

			new
				dollarText[12];

            format(dollarText, 12, "_");

			PlayerTextDrawSetString(playerid, TD_skinShop6[playerid], dollarText);
			PlayerTextDrawSetPreviewModel(playerid, TD_skinShop1[playerid], currSkinModel[playerid]);
		}
	}

	PlayerTextDrawShow(playerid, TD_skinShop0[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop1[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop2[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop3[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop4[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop5[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop6[playerid]);

	SelectTextDraw(playerid, 0x949494ff);

	return 1;
}

NextSkinPage(playerid)
{
	switch(GetPlayerGender(playerid))
	{
		case 1:
		{
			if(currSkinIndex[playerid] + 1 >= sizeof(buyableMaleSkins))
				currSkinIndex[playerid] = 0;
			else
				currSkinIndex[playerid] ++;

			new
				bool:isValidSkin = false,
				count = 0;

			currSkinModel[playerid] = buyableMaleSkins[currSkinIndex[playerid]];

			while(isValidSkin == false)
			{

				count ++;

				if(count == 500)
				{
					isValidSkin = true;
					continue;
				}

				isValidSkin = true;
			}

			new
				dollarText[12];

			format(dollarText, 12, "_");

			PlayerTextDrawSetString(playerid, TD_skinShop6[playerid], dollarText);
			PlayerTextDrawSetPreviewModel(playerid, TD_skinShop1[playerid], currSkinModel[playerid]);
		}

		case 2:
		{
			if(currSkinIndex[playerid] + 1 >= sizeof(buyableFemaleSkins))
				currSkinIndex[playerid] = 0;
			else
				currSkinIndex[playerid] ++;

			new
				bool:isValidSkin = false,
				count = 0;

			currSkinModel[playerid] = buyableFemaleSkins[currSkinIndex[playerid]];

			while(isValidSkin == false)
			{

				count ++;

				if(count == 500)
				{
					isValidSkin = true;
					continue;
				}


				isValidSkin = true;
			}

			new
				dollarText[12];

			format(dollarText, 12, "_");

			PlayerTextDrawSetString(playerid, TD_skinShop6[playerid], dollarText);
			PlayerTextDrawSetPreviewModel(playerid, TD_skinShop1[playerid], currSkinModel[playerid]);
		}
	}

	PlayerTextDrawShow(playerid, TD_skinShop0[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop1[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop2[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop3[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop4[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop5[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop6[playerid]);

}

PreviousSkinPage(playerid)
{
	switch(GetPlayerGender(playerid))
	{
		case 1:
		{
			if(currSkinIndex[playerid] - 1 < 0)
				currSkinIndex[playerid] = sizeof(buyableMaleSkins)-1;
			else
				currSkinIndex[playerid] --;

			new
				bool:isValidSkin = false,
				count = 0;

			currSkinModel[playerid] = buyableMaleSkins[currSkinIndex[playerid]];

			while(isValidSkin == false)
			{

				count ++;

				if(count == 500)
				{
					isValidSkin = true;
					continue;
				}

				isValidSkin = true;
			}

			new
				dollarText[12];

			format(dollarText, 12, "_");

			PlayerTextDrawSetString(playerid, TD_skinShop6[playerid], dollarText);
			PlayerTextDrawSetPreviewModel(playerid, TD_skinShop1[playerid], currSkinModel[playerid]);
		}

		case 2:
		{
			if(currSkinIndex[playerid] - 1 < 0)
				currSkinIndex[playerid] = sizeof(buyableFemaleSkins)-1;
			else
				currSkinIndex[playerid] --;

			new
				bool:isValidSkin = false,
				count = 0;

			currSkinModel[playerid] = buyableFemaleSkins[currSkinIndex[playerid]];

			while(isValidSkin == false)
			{

				count ++;

				if(count == 500)
				{
					isValidSkin = true;
					continue;
				}

				isValidSkin = true;
			}

			new
				dollarText[12];

			format(dollarText, 12, "_");

			PlayerTextDrawSetString(playerid, TD_skinShop6[playerid], dollarText);
			PlayerTextDrawSetPreviewModel(playerid, TD_skinShop1[playerid], currSkinModel[playerid]);
		}
	}

	PlayerTextDrawShow(playerid, TD_skinShop0[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop1[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop2[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop3[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop4[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop5[playerid]);
	PlayerTextDrawShow(playerid, TD_skinShop6[playerid]);

}

BuyPlayerActualSkin(playerid)
{

	CancelSelectTextDraw(playerid);

	if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    return SendError(playerid, "Tento biznis ma prazdny sklad!");

    DecrBizTovar(GetPlayerBusiness(playerid));

	AddBusinessCash(GetPlayerBusiness(playerid), 10);


	ex_SetPlayerSkin(playerid, currSkinModel[playerid]);
	if(!IsPlayerWorking(playerid))
		I_pSkin_Civil[playerid] = currSkinModel[playerid];

	SCFM(playerid, 0xD0D0D0FF, "> Vybral si si nové aty, ak ich chce uloi, vyber si slot!");

	new
		finalString[256],
		tempString[128];

	if(skinStorage[playerid][0] < 1) format(tempString, 128, "[#1] Klikni pre výber\n{ffffff}");
	else format(tempString, 128, "{d64d4d}[#1] Skin ID: %d\n{ffffff}", skinStorage[playerid][0]);

	strcat(finalString, tempString);

	if(skinStorage[playerid][1] < 1) format(tempString, 128, "[#2] Klikni pre výber\n{ffffff}");
	else format(tempString, 128, "{d64d4d}[#2] Skin ID: %d\n{ffffff}", skinStorage[playerid][1]);

	strcat(finalString, tempString);

	if(GetPlayerDonatorLevel(playerid) < 1)
	{
		if(skinStorage[playerid][2] < 1) format(tempString, 128, "{e7b310}[#3] Iba pre Donator Level 1 a vyie\n{ffffff}");
		else format(tempString, 128, "{d64d4d}[#3] Skin ID: %d\n{ffffff}", skinStorage[playerid][2]);
	}
	else
	{
		if(skinStorage[playerid][2] < 1) format(tempString, 128, "[#3] Klikni pre výber\n{ffffff}");
		else format(tempString, 128, "{d64d4d}[#3] Skin ID: %d\n{ffffff}", skinStorage[playerid][2]);
	}

	strcat(finalString, tempString);

	if(GetPlayerDonatorLevel(playerid) < 2)
	{
		if(skinStorage[playerid][3] < 1) format(tempString, 128, "{e7b310}[#4] Iba pre Donator Level 2 a vyie\n{ffffff}");
		else format(tempString, 128, "{d64d4d}[#4] Skin ID: %d\n{ffffff}", skinStorage[playerid][3]);
	}
	else
	{
		if(skinStorage[playerid][3] < 1) format(tempString, 128, "[#4] Klikni pre výber\n{ffffff}");
		else format(tempString, 128, "{d64d4d}[#4] Skin ID: %d\n{ffffff}", skinStorage[playerid][3]);
	}

	strcat(finalString, tempString);

	if(GetPlayerDonatorLevel(playerid) < 3)
	{
		if(skinStorage[playerid][4] < 1) format(tempString, 128, "{e7b310}[#5] Iba pre Donator Level 3\n{ffffff}");
		else format(tempString, 128, "{d64d4d}[#5] Skin ID: %d\n{ffffff}", skinStorage[playerid][4]);
	}
	else
	{
		if(skinStorage[playerid][4] < 1) format(tempString, 128, "[#5] Klikni pre výber{ffffff}");
		else format(tempString, 128, "{d64d4d}[#5] Skin ID: %d{ffffff}", skinStorage[playerid][4]);
	}

	strcat(finalString, tempString);

	ShowPlayerDialog(playerid, did_skinstorage_buy, DIALOG_STYLE_LIST, "ULOI SKIN", finalString, "ULOI", "PRESKOÈI");

	return 1;
}

WrongPassword(playerid)
{

	login_Pokus[playerid] --;
	if(login_Pokus[playerid] <= 0)
		return ex_KickPlayer(playerid, KICK_TYPE_SYSTEM, "Zadal si zlé heslo.");

    new
	    S_message[256];

	format(S_message, sizeof(S_message),
		"{FFFFFF}Vitaj, {e34f4f}%s{FFFFFF}!\n\nPred vstupom do hry sa musí prihlási!\nZadaj prosím Tvoje heslo do pola niie.\n{FF6347}CHYBA: Zadal si zlé heslo!{FFFFFF}\nPOZOR: Má ete %d pokus(y).",
		ReturnName(playerid), login_Pokus[playerid]);

	ShowPlayerDialog(playerid, did_Login, DIALOG_STYLE_PASSWORD, "LOGIN", S_message, "LOGIN", "ODPOJI");

	return 1;

}

/*
	< ENGLISH >
		Shows dialog window - or kicks player.


	< SLOVAK >
		Otvorí login dialóg alebo vyhodí hráèa.

*/

function OnPlayerMasterAccountLoad(playerid)
{

    foreach( new i : Player)
	{
	    if(!IsPlayerConnected(i)) continue;
	    if(i == playerid) continue;
	    if(IsPlayerLogged(i))
	    {
	        if(strcmp(ReturnName(playerid), S_masterAccount[i], true)) continue;

	        ex_KickPlayer(playerid, KICK_TYPE_SYSTEM, "Hráè s týmto menom u je online!");
	        return 0;
	    }
	}

    if(cache_num_rows() == 0) {

        ex_KickPlayer(playerid, KICK_TYPE_SYSTEM, "Pre hranie sa prosím zaregistruj na www.countyliferoleplay.eu!");
	    return 1;
	}

	new
		I_activated;

	cache_get_value_name_int(0,"Activated",I_activated);
	cache_get_value_name_int(0,"RenameTicket",RenameTicket[playerid]);
	cache_get_value_name_int(0,"id", masterId[playerid]);
	cache_get_value_name(0,"RegIP", regIP[playerid]);

	//GetPlayerIp(playerid, regIP[playerid], 20);
 	GetPlayerIp(playerid, lastIP[playerid], 20);

	if(I_activated == 0 || I_activated == 3)
	{

	    SCFM(playerid, COLOR_COMMANDUSE, "Vitaj! Bohuial, úèet, s ktorým si sa pripojil nie je na whiteliste!");
	    SCFM(playerid, COLOR_COMMANDUSE, "Prihlás sa prosím do UCP na www.countyliferoleplay.eu a podaj si iados!");
	    SCFM(playerid, COLOR_COMMANDUSE, " ");

	    ex_KickPlayer(playerid);
	    return 0;
	}
	else if(I_activated == -1)
	{

	    SCFM(playerid, COLOR_COMMANDUSE, "Vitaj! Bohuial, úèet, s ktorým si sa pripojil si neaktivoval!");
	    SCFM(playerid, COLOR_COMMANDUSE, "Úèet aktivuje kliknutím na odkaz ktorý ti priiel do e-mailu!");
	    SCFM(playerid, COLOR_COMMANDUSE, " ");

	    ex_KickPlayer(playerid);
	    return 0;
	}
	else if(I_activated == 2)
	{

	    SCFM(playerid, COLOR_COMMANDUSE, "Vitaj! Bohuial, úèet, s ktorým si sa pripojil nie je na whiteliste!");
	    SCFM(playerid, COLOR_COMMANDUSE, "iados o pridanie si u pridal, poèkaj kým ti ju èlen tímu skontroluje!");
	    SCFM(playerid, COLOR_COMMANDUSE, " ");

	    ex_KickPlayer(playerid);
	    return 0;
	}



	new
	    S_message[256];

	format(S_message, sizeof(S_message),
		"{FFFFFF}Vitaj, {e34f4f}%s{FFFFFF}!\n\nPred vstupom do hry sa musí prihlási!\nZadaj prosím Tvoje heslo do pola niie.\n\nPOZOR: Má ete %d pokus(y).",
		ReturnName(playerid), login_Pokus[playerid]);

	ShowPlayerDialog(playerid, did_Login, DIALOG_STYLE_PASSWORD, "LOGIN", S_message, "LOGIN", "ODPOJI");

	return 1;
}

ShowLoginDialogForPlayer(playerid)
{

    new
		S_query[128];

	#if defined CLOSED_BETA
	    mysql_format(MYSQL, S_query, 128, "SELECT * FROM web_betatest WHERE username = '%e'", ReturnName(playerid));
	    new Cache:cache = mysql_query(MYSQL, S_query);

	    if(cache_num_rows() > 0)
	    {
	        new approved = -1;

	        cache_get_value_name_int(0, "approved", approved);
	        cache_delete(cache);

	        if(approved != 1)
	        {
	            SCFM(playerid, COLOR_COMMANDUSE, "Vitaj! Bohuial, nie si èlenom Closed Bety a preto nemôe vstúpi!");
			    SCFM(playerid, COLOR_COMMANDUSE, " ");

			    ex_KickPlayer(playerid);
			    return 0;
			}
	    }
	    else
	    {
	        SCFM(playerid, COLOR_COMMANDUSE, "Vitaj! Bohuial, nie si èlenom Closed Bety a preto nemôe vstúpi!");
		    SCFM(playerid, COLOR_COMMANDUSE, " ");

		    ex_KickPlayer(playerid);

		    cache_delete(cache);
		    return 0;
	    }
	#endif

	mysql_format(MYSQL, S_query, 128, "SELECT * FROM master_accounts WHERE Username = '%e'", ReturnName(playerid));
	mysql_tquery(MYSQL, S_query, "OnPlayerMasterAccountLoad", "i", playerid);
	return 1;

}


/*
	< ENGLISH >
		Returns player's name.


	< SLOVAK >
		Vracia hráèovo meno.

*/
ReturnName(playerid)
{
	new
		S_pName[25];

	GetPlayerName(playerid, S_pName, sizeof(S_pName));

	return S_pName;
}

ReturnIP(playerid)
{
	new
		S_ip[25];

	GetPlayerIp(playerid, S_ip, sizeof(S_ip));

	return S_ip;
}

/*
	< ENGLISH >
		Returns player's roleplay
		name without underscore and
		just his pure name or mask
		name and identification #.


	< SLOVAK >
		Vracia hráèovo roleplay meno
		bez podtrítka, vráti iba jeho
		meno alebo masku a jej èíslo.

*/
GetPlayerNameEx(playerid, UseMask)
{
    new
		S_pName[25] = " ";

	if(!IsPlayerConnected(playerid)) return S_pName;

	if(UseMask == 0)
	{

	    /*
			< ENGLISH >
			    Stores player's name and
			    then removes the underscore.


			< SLOVAK >
			    Získa meno hráèa a
			    potom zmae podtrítko.

		*/

	    GetPlayerName(playerid, S_pName, sizeof(S_pName));
	    format(S_pName, sizeof(S_pName), str_replace("_", " ", S_pName));

	}
	else if(UseMask == 1)
	{
	    /*
	        < ENGLISH >
	            Formats string with mask
	            and player's mask number.


			< SLOVAK >
			    Naformátuje string s textom
			    masky a èíslom masky hráèa.

		*/

		if(B_playerHasMask[playerid] == true)
			format(S_pName, sizeof(S_pName), "%s (%d)", MASK_TEXT, I_playerMaskID[playerid]);
		else
		{
		    GetPlayerName(playerid, S_pName, sizeof(S_pName));
	    	format(S_pName, sizeof(S_pName), str_replace("_", " ", S_pName));
		}

	}
	else if(UseMask == 2)
	{

	    if(B_playerHasMask[playerid] == false)
	    {
		    GetPlayerName(playerid, S_pName, sizeof(S_pName));
		    format(S_pName, sizeof(S_pName), "%s (%d)", str_replace("_", " ", S_pName),playerid);
		}
		else
		{
		    format(S_pName, sizeof(S_pName), "%s (%d)", MASK_TEXT, I_playerMaskID[playerid]);
		}
	}
	else if(UseMask == 3)
	{

		GetPlayerName(playerid, S_pName, sizeof(S_pName));
  		format(S_pName, sizeof(S_pName), "%s(%d)", str_replace("_", " ", S_pName),playerid);
	}

	return S_pName;
}

/*
	< ENGLISH >
		Syntax player message function.


	< SLOVAK >
		Funkcia pole správu syntaxy pre hráèa.

*/

SendClientSyntax(playerid, text[], prefix[] = "SYNTAX:")
{

	if(!IsPlayerConnected(playerid))
		return 0;

	new
		S_finalString[180];

	format(S_finalString, sizeof(S_finalString), "%s {FFFFFF}%s", prefix, text);

	SendClientMessage(playerid, COLOR_SYNTAX, S_finalString);

	return 1;

}


/*
	< ENGLISH >
		Kick function.


	< SLOVAK >
		Funkcia kicku.

*/

ex_KickPlayer(playerid, kickType = 0, reason[] = "", adminId = -1)
{
	switch(kickType)
	{
	    case KICK_TYPE_NOMSG:
		{

			SetKickTimer(playerid);
			return 1;

		}
	    case KICK_TYPE_SYSTEM:
	    {

	        SetKickTimer(playerid);

	        new S_string[128];

	        format(S_string, sizeof(S_string), "> Bol si vyhodený zo serveru, dôvod: %s", reason);
	        SendClientMessage(playerid, COLOR_ADMINCMD, S_string);
	        return 1;

	    }
	    case KICK_TYPE_ADMIN:
	    {

	        SetKickTimer(playerid);

	        new S_string[512], S_title[24+1];

	        switch(GetPlayerAdminLevel(adminId)) {
	            case 1:
					strcat(S_title, "Helper");
	            case 2:
					strcat(S_title, "Moderátor");
				default:
					strcat(S_title, "Administrator");
	        }

	        format(S_string, sizeof(S_string), "> %s %s vyhodil hráèa %s. Dôvod: %s", S_title, GetPlayerNameEx(adminId, NO_MASK), GetPlayerNameEx(playerid, NO_MASK), reason);
  			SendLocalMessage(playerid,50.0,COLOR_SERVER,S_string);

  			FormatWarn(-1, "AdmWarn:", COLOR_ADMINCMD, "%s %s vyhodil hráèa %s. Dôvod: %s", S_title, GetPlayerNameEx(adminId, NO_MASK), GetPlayerNameEx(playerid, NO_MASK), reason);


            mysql_format(MYSQL, S_string, sizeof S_string,
				"INSERT INTO punishlist (MasterAcc, Username, AdminMACC, Date, Reason, Type) VALUES ('%e', '%e', '%e', NOW(), '%e', '1')",
                ReturnMaster(playerid), ReturnName(playerid), ReturnMaster(adminId), reason
			);

			mysql_tquery(MYSQL, S_string);
		}
		case KICK_TYPE_ANTIHACK:
	    {

	        SetKickTimer(playerid);

	        new S_string[512];

	        format(S_string, sizeof(S_string), "> Systém vyhodil hráèa %s, je podozrivý z pouívania cheatu: %s", GetPlayerNameEx(playerid, NO_MASK), reason);

            SendClientMessageToAll(COLOR_ADMINCMD, S_string);

            mysql_format(MYSQL, S_string, sizeof S_string,
				"INSERT INTO punishlist (MasterAcc, Username, AdminMACC, Date, Reason, Type) VALUES ('%e', '%e', 'Anticheat', NOW(), '%e', '1')",
                ReturnMaster(playerid), ReturnName(playerid), reason
			);

			mysql_tquery(MYSQL, S_string);
		}
	}
	
	web_LatestFormat("%s byl vyhozen ze serveru", GetPlayerNameEx(playerid, NO_MASK));

	return 0;
}

/*
	< ENGLISH >
		Check if player's name
		is a valid roleplay name.

	< SLOVAK >
		Kontroluje, èi je hráèovo
		meno správne roleplay meno.

*/

PlayLocalSound(nearPlayerid, soundid, Float:distance = 12.0, Float:X = 0.0, Float:Y = 0.0, Float:Z = 0.0)
{
	foreach( new i : Player )
	{
	    if(!IsPlayerNearPlayer(nearPlayerid, i, distance))
	        continue
		;

		PlayerPlaySound(i, soundid, X, Y, Z);
	}
	return 1;
}

/*
	< ENGLISH >
		Sends message to all players
		in chosed range.


	< SLOVAK >
		Odole správu vetkým hráèom
		vo vybranej vzdialenosti.

*/

SendLocalMessage(playerid, Float:range = LOCAL_CHAT_RANGE, color, text[])
{

	if(!IsPlayerConnected(playerid))
	    return 0;

	new
		Float:F_playerPos[3];

	GetPlayerPos(playerid, F_playerPos[0], F_playerPos[1], F_playerPos[2]);

	foreach(new i : Player)
	{

		if(i > GetPlayerPoolSize()) break;
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerInRangeOfPoint(i, range, F_playerPos[0], F_playerPos[1], F_playerPos[2])) continue;
		if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != GetPlayerInterior(i)) continue;

		SendClientMessage(i, color, text);

	}
	return 1;

}

/*
	< ENGLISH >
		Used in Local chats, makes
		message which is near lighter,
		and far message will be darker.


	< SLOVAK >
		Pouíva sa v lokálnych chatoch,
		robí správy ktoré sú blízko svetlé,
		a ïaleké robí farebne tmavými.

*/
ProxDetector(playerid, Float:max_range, color, string[], Float:max_ratio = 1.6, bool:checkCar = false, bool:isOOC = false)
{
	new
		Float:pos_x,
		Float:pos_y,
		Float:pos_z,
		Float:range,
		Float:range_ratio,
		Float:range_with_ratio,
		clr_r, clr_g, clr_b,
		Float:color_r, Float:color_g, Float:color_b,
		tooc = 0;

	if (!GetPlayerPos(playerid, pos_x, pos_y, pos_z)) {
		return 0;
	}

	color_r = float(color >> 24 & 0xFF);
	color_g = float(color >> 16 & 0xFF);
	color_b = float(color >> 8 & 0xFF);
	range_with_ratio = max_range * max_ratio;

	foreach( new i : Player ) {
		if (!IsPlayerStreamedIn(i, playerid) && isSpectating[i] == false) {
			continue;
		}

		if(isSpectating[i] == true && i == playerid)
		    continue;

		if(GetPlayerAdminLevel(playerid) < 1 && topt_ooc[i] == 1 && isOOC == true)
		    continue;

		if(checkCar == true)
		{
			if(IsPlayerInAnyVehicle(i))
			{
			    new
			        win[4];

				GetVehicleParamsCarWindows(GetPlayerVehicleID(i), win[0], win[1], win[2], win[3]);

				if(win[0] != 0 && win[1] != 0 && win[2] != 0 && win[3] != 0)
				{
				    switch(GetVehicleModel(GetPlayerVehicleID(i))) {
					    case
							424,
							439,
							446,
							448,
							449,
							452,
							453,
							454,
							457,
							461,
							462,
							463,
							468,
							471,
							472,
							473,
							480,
							481,
							484,
							485,
							486,
							493,
							500,
							504,
							509,
							510,
							521,
							522,
							523,
							530,
							531,
							533,
							536,
							539,
							567,
							568,
							571,
							572,
							586,
							595:
						{

					    }
					    default: {
					        continue;
					    }
					}
				}
			}
		}

		range = GetPlayerDistanceFromPoint(i, pos_x, pos_y, pos_z);
		if (range > max_range) {
			continue;
		}

		range_ratio = (range_with_ratio - range) / range_with_ratio;
		clr_r = floatround(range_ratio * color_r);
		clr_g = floatround(range_ratio * color_g);
		clr_b = floatround(range_ratio * color_b);

		tooc ++;
		SendClientMessage(i, (color & 0xFF) | (clr_b << 8) | (clr_g << 16) | (clr_r << 24), string);
	}

	SendClientMessage(playerid, color, string);

	if(tooc == 0 && isOOC == true)
	    InfoBox(playerid, INFOBOX_INFO, "Zprávu kterou jsi napsal nevidí nikdo krom tebe!");

	return 1;
}

/*
	< ENGLISH >
	    Loads whole server mapping.


	< SLOVAK >
	    Naèíta vetok servervoý mapping.

*/

new BuckCoffeeDoorO[2];
new bool:BuckCoffeeDoor[2];

LoadDefaultObjects() {
    BuckCoffeeDoorO[0] = CreateDynamicObject(2948, 2333.686767, 7.179112, 25.484375, 0.000000, 0.000000, 360.000000);
    //0 - OPEN: 2333.686767, 7.179112, 25.484375, 0.000000, 0.000000, 190.000000
    //0 - CLOSED: 2333.686767, 7.179112, 25.484375, 0.000000, 0.000000, 360.000000
	BuckCoffeeDoorO[1] = CreateDynamicObject(2948, 2333.696289, 5.249108, 25.484375, 0.000000, 0.000000, 900.000000);
	//0 - OPEN: 2333.696289, 5.249108, 25.484375, 0.000000, 0.000000, 1003.000000
    //0 - CLOSED: 2333.696289, 5.249108, 25.484375, 0.000000, 0.000000, 900.000000
	return 1;
}

LoadMapping()
{
	LoadDefaultObjects();
    return 1;
}

LoadFuelStations() {
    new mql_query[128];
	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_business_fuel");
	mysql_tquery(MYSQL, mql_query, "OnFuelStationsLoad");
	return 1;
}

function OnFuelStationsLoad() {
	new
		Float:Pos[3],
		AssignedBiz,
		Float:Price[4],
		Storage[4],
		IsUsing[4],
		CisloBoxu[32];

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name_float(i, "X", Pos[0]);
	    cache_get_value_name_float(i, "Y", Pos[1]);
	    cache_get_value_name_float(i, "Z", Pos[2]);
	    cache_get_value_name_int(i, "AssignedBusiness", AssignedBiz);

	    cache_get_value_name_float(i, "Price_Benzin", Price[0]);
	    cache_get_value_name_float(i, "Price_Diesel", Price[1]);
	    cache_get_value_name_float(i, "Price_Kerosin", Price[2]);
	    cache_get_value_name_float(i, "Price_LPG", Price[3]);

	    if(Price[0] > 106732000)
	   	{
     		Price[0] = 1.234;
     		Price[1] = 1.234;
     		Price[2] = 1.234;
     		Price[3] = 1.234;
		}

	    cache_get_value_name_int(i, "Storage_Benzin", Storage[0]);
	    cache_get_value_name_int(i, "Storage_Diesel", Storage[1]);
	    cache_get_value_name_int(i, "Storage_Kerosin", Storage[2]);
	    cache_get_value_name_int(i, "Storage_LPG", Storage[3]);

	    cache_get_value_name_int(i, "IsUsing_Benzin", IsUsing[0]);
	    cache_get_value_name_int(i, "IsUsing_Diesel", IsUsing[1]);
	    cache_get_value_name_int(i, "IsUsing_Kerosin", IsUsing[2]);
	    cache_get_value_name_int(i, "IsUsing_LPG", IsUsing[3]);

	    cache_get_value_name(i, "CisloBoxu", CisloBoxu);

	    if(Storage[0] > 500)
	        Storage[0] = 500;

        if(Storage[1] > 500)
	        Storage[1] = 500;

        if(Storage[2] > 500)
	        Storage[2] = 500;

        if(Storage[3] > 500)
	        Storage[3] = 500;


		CreateDynamicFuelStation(
			Pos[0],
			Pos[1],
			Pos[2],
			AssignedBiz,
			CisloBoxu,
			Price,
			Storage,
			IsUsing
		);
	}
	return 1;
}

CreateDynamicFuelStation( const Float:x, const Float:y, const Float:z, const assigned_biz, const cisloboxu[], Float:price[], storage[], isusing[])
{

	new id = -1;

	for( new i; i < MAX_FUEL_STATIONS; i++ )
	{
	    if(fuelEnum[i][fuel_assig_biz] != 0)
	        continue;

		id = i;
		break;
	}

	if(id == -1)
	    return 0;

	fuelEnum[id][fuel_X] = x;
	fuelEnum[id][fuel_Y] = y;
	fuelEnum[id][fuel_Z] = z;

	fuelEnum[id][fuel_assig_biz] = assigned_biz;

	fuelEnum[id][fuel_pr_benzin] = price[0];
	fuelEnum[id][fuel_pr_diesel] = price[1];
	fuelEnum[id][fuel_pr_kerosin] = price[2];
	fuelEnum[id][fuel_pr_lpg] = price[3];

	fuelEnum[id][fuel_st_benzin] = storage[0];
	fuelEnum[id][fuel_st_diesel] = storage[1];
	fuelEnum[id][fuel_st_kerosin] = storage[2];
	fuelEnum[id][fuel_st_lpg] = storage[3];

	fuelEnum[id][fuel_is_benzin] = isusing[0];
	fuelEnum[id][fuel_is_diesel] = isusing[1];
	fuelEnum[id][fuel_is_kerosin] = isusing[2];
	fuelEnum[id][fuel_is_lpg] = isusing[3];

	format(fuelEnum[id][fuel_cislo_boxu], 30, cisloboxu);

	new
	    labelString[256];

	format(labelString, sizeof labelString, "{ececec}[ %s ]\n\n", cisloboxu);

	for ( new i; i < 4; i++)
	{
	    if(isusing[i] == 0)
	        continue;

		new
		    prefix[10],
			tstring[128];

		switch ( i )
		{
		    case 0:
		        format(prefix, sizeof prefix, "Benzín");

            case 1:
		        format(prefix, sizeof prefix, "Diesel");

            case 2:
		        format(prefix, sizeof prefix, "Kerosín");

            case 3:
		        format(prefix, sizeof prefix, "LPG");
		}

		format(tstring, sizeof tstring, "{ececec}%s $%.3f/L {898989}[%d/%dL]\n", prefix, price[i], storage[i], 500);

		strcat(labelString, tstring);
	}

	fuelEnum[id][fuel_Label] = CreateDynamic3DTextLabel( labelString, 0xECECECFF, x, y, z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 15, -1, 0);
    fuelEnum[id][fuel_AreaID] = CreateDynamicSphere(x, y, z, 3.0, 0, 0, -1);

	return 1;
}

LoadArrows() {
    new mql_query[128];
	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_arrows");
	mysql_tquery(MYSQL, mql_query, "OnArrowsLoad");
}

function OnArrowsLoad() {
	new
		Float:Pos[7],
		Worlds[4],
		Text_Label[256],
		Faction;

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;
	    cache_get_value_name_float(i, "X", Pos[0]);
	    cache_get_value_name_float(i, "Y", Pos[1]);
	    cache_get_value_name_float(i, "Z", Pos[2]);

	    cache_get_value_name_float(i, "ToX", Pos[3]);
	    cache_get_value_name_float(i, "ToY", Pos[4]);
	    cache_get_value_name_float(i, "ToZ", Pos[5]);
	    cache_get_value_name_float(i, "ToAngle", Pos[6]);

	    cache_get_value_name_int(i, "VW", Worlds[0]);
	    cache_get_value_name_int(i, "INTERIOR", Worlds[1]);

	    cache_get_value_name_int(i, "Faction", Faction);

	    cache_get_value_name_int(i, "ToVW", Worlds[2]);
	    cache_get_value_name_int(i, "ToINTERIOR", Worlds[3]);

	    cache_get_value_name(i, "Label", Text_Label);

		CreateDynamicArrow(
			Pos[0],
			Pos[1],
			Pos[2],
			Worlds[0],
			Worlds[1],
			Pos[3],
			Pos[4],
			Pos[5],
			Pos[6],
			Worlds[2],
			Worlds[3],
			Text_Label,
			Faction
		);
	}
	return 1;
}

GetPlayerDynamicMenu(playerid) {
	for(new i; i < MAX_MENUS_EX; i++) {
	    if(menuEnum[i][menu_X] == 0 && menuEnum[i][menu_Y] == 0 && menuEnum[i][menu_Z] == 0) continue;
	    if(menuEnum[i][menu_VW] != -1 && menuEnum[i][menu_VW] != GetPlayerVirtualWorld(playerid)) continue;
	    if(menuEnum[i][menu_INT] != -1 && menuEnum[i][menu_INT] != GetPlayerInterior(playerid)) continue;
	    if(!IsPlayerInDynamicArea(playerid, menuEnum[i][menu_AREA])) continue;
	    return i;
	}
	return -1;
}

CreateDynamicArrow(Float:x, Float:y, Float:z, vw, interior, Float:tox, Float:toy, Float:toz, Float:toangle, tovw, tointerior, label[], factionid=0) {
	new id = -1;
	for(new i; i < MAX_ARROWS; i++) {
	    if(arrowEnum[i][arr_X] == 0 && arrowEnum[i][arr_Y] == 0 && arrowEnum[i][arr_Z] == 0) { id = i; break; }
	}
	if(id == -1) return -1;

	new stringg[256];

    format(stringg,256, str_replace("\n", "\n", label));

    arrowEnum[id][arr_PickupID] = CreateDynamicPickup(1318, 1, x, y, z, vw, interior, -1, 20.0, -1, 0);

    arrowEnum[id][arr_X] = x;
    arrowEnum[id][arr_Y] = y;
    arrowEnum[id][arr_Z] = z;
    arrowEnum[id][arr_VW] = vw;
    arrowEnum[id][arr_INTERIOR] = interior;

    arrowEnum[id][arr_FactionId] = factionid;

    arrowEnum[id][arr_ToX] = tox;
    arrowEnum[id][arr_ToY] = toy;
    arrowEnum[id][arr_ToZ] = toz;
    arrowEnum[id][arr_ToAngle] = toangle;
    arrowEnum[id][arr_ToVW] = tovw;
    arrowEnum[id][arr_ToINTERIOR] = tointerior;

    arrowEnum[id][arr_AreaID] = CreateDynamicSphere(x, y, z, 2.0, vw, interior, -1);

    if(strlen(stringg) > 0) {
        arrowEnum[id][arr_LabelID] = CreateDynamic3DTextLabel(stringg, 0xffffffff, x,y,z, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, vw, interior, -1, 15.0, -1, 0);
    }

    return id;
}

LoadFarms()
{
    new mql_query[48];
	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_farms");
	mysql_tquery(MYSQL, mql_query, "farm_LoadFarms");
	return 1;
}

function farm_LoadFarms ()
{

	new
	    tName[ MAX_FARM_NAME_LEN ],
	    tOwner[ MAX_PLAYER_NAME + 1],
	    
	    tBuyPrice,
	    
		Float:tX, Float:tY, Float:tZ,
		
		Float:tMinX, Float:tMinY,
		Float:tMaxX, Float:tMaxY
	;

	for( new x, y = cache_num_rows(); x < y; x++ )
	{
	
	    cache_get_value_name( x, "name", tName );
	    cache_get_value_name( x, "owner", tOwner );
	    
	    cache_get_value_name_int( x, "buyprice", tBuyPrice );
	    
	    cache_get_value_name_float( x, "x", tX);
	    cache_get_value_name_float( x, "y", tY);
	    cache_get_value_name_float( x, "z", tZ);
	    
	    cache_get_value_name_float( x, "pminx", tMinX);
	    cache_get_value_name_float( x, "pminy", tMinY);
	    cache_get_value_name_float( x, "pmaxx", tMaxX);
	    cache_get_value_name_float( x, "pmaxy", tMaxY);
	    
	    Farm::CreateProperty(
			tName, tOwner,
			tBuyPrice,
			tX, tY, tZ,
			tMinX, tMinY, tMaxX, tMaxY
		);
	
	}

	return (1);
}

LoadTrees() {
    new mql_query[128];
	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM anawalt_trees");
	mysql_tquery(MYSQL, mql_query, "anawalt_LoadTrees");
	return 1;

}

LoadMenus() {

	//DEFAULT MENUS
    CreateDynamicMenu(1247, 2323.810, 60.239, 26.492, 0, 0, "{ffe805}Prenáanie krabíc\n{ffffff}/brigada", menut_brigada_krabice);
    CreateDynamicMenu(1247, 1299.758, 214.515, 19.554, 0, 0,"{ffe805}Prenáanie krabíc\n{ffffff}/brigada", menut_brigada_krabice_mg);

    CreateDynamicMenu(1247, 847.889, -601.088, 18.421,0, 0, "{b2b2b2}Zametanie ulíc\n{ffffff}\n/zamestnat\n/vypoved\n/pracovat", menut_zamestnat_sweeper);
    //CreateDynamicMenu(1247, 216.748, 16.485, 2.57,0, 0, "{268d3d}Smetiar\n{ffffff}\n/zamestnat\n/vypoved\n/pracovat", menut_zamestnat_smetiar);
    CreateDynamicMenu(1247, 1368.104, 250.416, 19.566,0, 0, "{e34545}Rozvoz pizze\n{ffffff}\n/zamestnat\n/vypoved\n/pracovat", menut_zamestnat_pizzaman);
    //CreateDynamicMenu(1247, -49.856, -271.415, 6.633,0, 0, "{e34545}Prepravná spoloènos\n{ffffff}\n/zamestnat\n/vypoved\n/pracovat", menut_zamestnat_preprava);

	//CUSTOM, DATABASE MENUS
    new mql_query[128];
	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_menu");
	mysql_tquery(MYSQL, mql_query, "OnMenusLoad");
	return 1;

}

LoadDealership() {
	//CUSTOM, DATABASE MENUS
    new mql_query[128];
	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM dealership_places");
	mysql_tquery(MYSQL, mql_query, "dealership_LoadData");
	return 1;

}

function tim_FixEditObject(playerid, objectid)
    return EditDynamicObject(playerid, objectid);

LoadFireExtinguishers()
{
    new mql_query[128];
	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_hasicaky");
	mysql_tquery(MYSQL, mql_query, "OnHasicakyLoad");
	return 1;
}

function OnHasicakyLoad() {
	new
		Float:Pos[6],
		Worlds[2],
		SPOTREBA,
		PKONTROLA,
		STOLEN;

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;
	    cache_get_value_name_float(i, "X", Pos[0]);
	    cache_get_value_name_float(i, "Y", Pos[1]);
	    cache_get_value_name_float(i, "Z", Pos[2]);
	    cache_get_value_name_float(i, "RX", Pos[3]);
	    cache_get_value_name_float(i, "RY", Pos[4]);
	    cache_get_value_name_float(i, "RZ", Pos[5]);
	    cache_get_value_name_int(i, "VW", Worlds[0]);
	    cache_get_value_name_int(i, "INTERIOR", Worlds[1]);
	    cache_get_value_name_int(i, "PKONTROLA", PKONTROLA);
	    cache_get_value_name_int(i, "SPOTREBA", SPOTREBA);
        cache_get_value_name_int(i, "STOLEN", STOLEN);

		CreateDynamicFireExt(
		    Pos[0], Pos[1], Pos[2], Pos[3], Pos[4], Pos[5],
		    Worlds[0], Worlds[1],
		    SPOTREBA,
		    PKONTROLA,
		    STOLEN
		);
	}
	return 1;
}

function OnMenusLoad() {
	new
		Float:Pos[3],
		Worlds[2],
		Float:Draw_Distance,
		Menu_Type,
		Pickup_Model,
		Text_Label[256],
		Text_Info[256],
		storage;

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;
	    cache_get_value_name_float(i, "posX", Pos[0]);
	    cache_get_value_name_float(i, "posY", Pos[1]);
	    cache_get_value_name_float(i, "posZ", Pos[2]);
	    cache_get_value_name_float(i, "draw_distance", Draw_Distance);
	    cache_get_value_name_int(i, "virtualWorld", Worlds[0]);
	    cache_get_value_name_int(i, "interiorID", Worlds[1]);
	    cache_get_value_name_int(i, "menu_type", Menu_Type);
	    cache_get_value_name_int(i, "pickup_model", Pickup_Model);
	    cache_get_value_name(i, "text_label", Text_Label);
	    cache_get_value_name(i, "text_info", Text_Info);

	    cache_get_value_name_int(i, "storage_CAR_PARTS", storage);

		CreateDynamicMenu(
			Pickup_Model,
			Pos[0],
			Pos[1],
			Pos[2],
			Worlds[0],
			Worlds[1],
			Text_Label,
			Menu_Type,
			Draw_Distance,
			storage
		);
	}
	return 1;
}

getdateunixfireex(timestamp)
{
	new
	    string[64],
		tm <tmTime>;

	localtime(Time:timestamp, tmTime);

	strftime(string, 64, "%d/%m/%Y", tmTime);

	return string;
}

GetPlayerDynamicFireExt(playerid) {
	for(new i; i < MAX_FIRE_EXTINGUISHERS; i++) {
	    if(fireExt[i][firee_X] == 0 && fireExt[i][firee_Y] == 0 && fireExt[i][firee_Z] == 0) continue;
	    if(fireExt[i][firee_VW] != -1 && fireExt[i][firee_VW] != GetPlayerVirtualWorld(playerid)) continue;
	    if(fireExt[i][firee_INTERIOR] != -1 && fireExt[i][firee_INTERIOR] != GetPlayerInterior(playerid)) continue;
	    if(!IsPlayerInRangeOfPoint(playerid, 2.5, fireExt[i][firee_X], fireExt[i][firee_Y], fireExt[i][firee_Z])) continue;
	    return i;
	}
	return -1;
}

CreateDynamicFireExt(Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, vw, interior, spotreba, pkontrola, stolen) {
	new id = -1;
	for(new i; i < MAX_FIRE_EXTINGUISHERS; i++) {
	    if(fireExt[i][firee_X] == 0 && fireExt[i][firee_Y] == 0 && fireExt[i][firee_Z] == 0) { id = i; break; }
	}
	if(id == -1) return -1;

	new str[256*2];

	if(stolen != 1)
	{
		format(str, sizeof str,
				"{eaeaea}HASIACI PRÍSTROJ\n{5a5a5a}DÁTUM SPOTREBY: {eaeaea}%s\n{5a5a5a}POSLEDNÁ KONTROLA: {eaeaea}%s\n/zobrathasicak",
				getdateunixfireex(spotreba), getdateunixfireex(pkontrola)
		);
	}
	else
	{
	    format(str, sizeof str,
				"{eaeaea}DRIAK NA HASIACI PRÍSTROJ"
		);
	}

    fireExt[id][firee_X] = x;
    fireExt[id][firee_Y] = y;
    fireExt[id][firee_Z] = z;
    fireExt[id][firee_RX] = rx;
    fireExt[id][firee_RY] = ry;
    fireExt[id][firee_RZ] = rz;
    fireExt[id][firee_VW] = vw;
    fireExt[id][firee_STOLEN] = stolen;
    fireExt[id][firee_INTERIOR] = interior;
    fireExt[id][firee_SPOTREBA] = spotreba;
    fireExt[id][firee_PKONTROLA] = pkontrola;

    if(stolen != 1)
    {
	    fireExt[id][firee_OBJECT] = CreateDynamicObject(
			2690,
			x,y,z,rx,ry,rz,vw,interior,-1,
			30, 30, -1, 1
		);
	}

	fireExt[id][firee_LABEL] = CreateDynamic3DTextLabel(
		str, 0xFFFFFFFF, x,y,z, 2.0,
		INVALID_PLAYER_ID,
		INVALID_VEHICLE_ID,
		0,vw,interior,-1,10.0, -1, 0
	);

    Iter_Add(FireExtinguisher, id);

    return id;
}

DestroyDynamicFireExt(id)
{
	DestroyDynamicObject(fireExt[id][firee_OBJECT]);
	DestroyDynamic3DTextLabel(fireExt[id][firee_LABEL]);
	fireExt[id][firee_X] = 0.0;
	fireExt[id][firee_Y] = 0.0;
	fireExt[id][firee_Z] = 0.0;

	Iter_Remove(FireExtinguisher, id);
}

CreateDynamicMenu(pickup_model = 0, Float:x, Float:y, Float:z, vw, interior, text_label[] = "", menuType, &Float:dd = 15.0, storage1=0) {
	new id = -1, Float:ddex = dd;
	for(new i; i < MAX_MENUS_EX; i++) {
	    if(menuEnum[i][menu_TYPE] <= 0) { id = i; break; }
	}
	if(id == -1) return printf("nepodarilo sa vytvorit menu %d!", id);

	new stringg[512];

    switch(menuType)
	{
	    case menut_sd_lab:
	    {
            format(stringg,512, "{c9c9c9}[ Laboratórium {c9c9c9}]{ffffff}\n\n\n\n/vlozitkrv");
	    }
	    default:
	    {
    		format(stringg,512, str_replace("\n", "\n", text_label));
	    }
	}

    if(pickup_model != 0) menuEnum[id][menu_PICKUPID] = CreateDynamicPickup(pickup_model, 1, x, y, z, vw, interior, -1, dd*2, -1, 0);

    menuEnum[id][menu_X] = x;
    menuEnum[id][menu_Y] = y;
    menuEnum[id][menu_Z] = z;
    menuEnum[id][menu_VW] = vw;
    menuEnum[id][menu_INT] = interior;
    menuEnum[id][menu_TYPE] = menuType;
    menuEnum[id][menu_MODEL] = pickup_model;

 	A_cargoStorage[_:id][ 0 ] = 0;
 	A_cargoStorage[_:id][ 1 ] = storage1;

    if(menuEnum[id][menu_TYPE] == 6)
    	menuEnum[id][menu_AREA] = CreateDynamicSphere(x,y,z, 15.0, vw, interior, -1);
	else if(menuEnum[id][menu_TYPE] == 44)
	    menuEnum[id][menu_AREA] = CreateDynamicSphere(x,y,z, 15.0, vw, interior, -1);
	else if(menuEnum[id][menu_TYPE] == _:menut_rybar_brana)
	{

	    menuEnum[id][menu_AREA] = CreateDynamicSphere(x,y,z, 3.0, vw, interior, -1);
	    format(stringg, 512, "{59d454}[ ZÁVORA ]\n{FFFFFF}Poplatok 50$\n\n/toll");
	}
	else if(menuEnum[id][menu_TYPE] == _:menut_autodielna)
	{
	    menuEnum[id][menu_AREA] = CreateDynamicSphere(x,y,z, dd, vw, interior, -1);
	    format(stringg, 512, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", storage1);
	}
	else
	    menuEnum[id][menu_AREA] = CreateDynamicSphere(x,y,z, 2.0, vw, interior, -1);

    if(strlen(stringg) > 0) {
        if(menuEnum[id][menu_TYPE] == _:menut_autodielna)
            menuEnum[id][menu_LABEL] = CreateDynamic3DTextLabel(stringg, 0xffffffff, x,y,z, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, vw, interior, -1, 8.0, -1, 0);
        else
        	menuEnum[id][menu_LABEL] = CreateDynamic3DTextLabel(stringg, 0xffffffff, x,y,z, ddex, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, vw, interior, -1, ddex, -1, 0);
    }

    return id;
}

IsPlayerInDynamicMenu(playerid, menuType = -1) {
	for(new i; i < MAX_MENUS_EX; i++) {
	    if(menuEnum[i][menu_X] == 0 && menuEnum[i][menu_Y] == 0 && menuEnum[i][menu_Z] == 0) continue;
	    if((menuType != -1) && menuEnum[i][menu_TYPE] != menuType) continue;
	    if(menuEnum[i][menu_VW] != -1 && menuEnum[i][menu_VW] != GetPlayerVirtualWorld(playerid)) continue;
	    if(menuEnum[i][menu_INT] != -1 && menuEnum[i][menu_INT] != GetPlayerInterior(playerid)) continue;
	    if(!IsPlayerInDynamicArea(playerid, menuEnum[i][menu_AREA])) continue;
	    return 1;
	}
	return 0;
}

IsPlayerInDynamicMenuEx(playerid, menuType = -1) {
	for(new i; i < MAX_MENUS_EX; i++) {
	    if(menuEnum[i][menu_X] == 0 && menuEnum[i][menu_Y] == 0 && menuEnum[i][menu_Z] == 0) continue;
	    if(menuEnum[i][menu_TYPE] != menuType) continue;
	    if(menuEnum[i][menu_VW] != -1 && menuEnum[i][menu_VW] != GetPlayerVirtualWorld(playerid)) continue;
	    if(menuEnum[i][menu_INT] != -1 && menuEnum[i][menu_INT] != GetPlayerInterior(playerid)) continue;
	    if(!IsPlayerInDynamicArea(playerid, menuEnum[i][menu_AREA])) continue;
	    return i;
	}
	return -1;
}

GetPlayerDynamicArrow(playerid) {
	for(new i; i < MAX_ARROWS; i++) {
	    if(arrowEnum[i][arr_X] == 0 && arrowEnum[i][arr_Y] == 0 && arrowEnum[i][arr_Z] == 0) continue;
	    if(arrowEnum[i][arr_VW] != -1 && arrowEnum[i][arr_VW] != GetPlayerVirtualWorld(playerid)) continue;
	    if(arrowEnum[i][arr_INTERIOR] != -1 && arrowEnum[i][arr_INTERIOR] != GetPlayerInterior(playerid)) continue;
	    if(!IsPlayerInDynamicArea(playerid, arrowEnum[i][arr_AreaID])) continue;
	    return i;
	}
	return -1;
}

/*
	< ENGLISH >
	    Loads server remove buildings for player.


	< SLOVAK >
	    Naèíta vetky serverové remove buidlings pre hráèa.

*/
LoadRemoveBuildingsForPlayer(playerid)
{
	#pragma unused playerid
    return 1;
}

//==============================MAIN GAMEMODE FUNCTIONS=========================

func_OnPlayerText(playerid, text[])
{
    lastkeypressunix[playerid] = gettime();
    if(isuserafk[playerid] != 0)
	{
	    SCError(playerid, "Vrátil si sa do hry po %d minútach!", floatround((gettime()-isuserafk_start[playerid])/60,floatround_round));
	    isuserafk[playerid] = 0;
	    isuserafk_start[playerid] = 0;
	}

	if(!IsPlayerLogged(playerid))
	{
	    SendClientMessage(playerid, COLOR_ADMINCMD, "> Nemôe písa do chatu, keï nie si prihlásený!");
	    return 0;
	}

	MessagesSent[playerid]++;
	Achievement::Reward(playerid, ACHIEVEMENT_FIRST_MESSAGE);

	if(MessagesSent[playerid] >= 1000)
	    Achievement::Reward(playerid, ACHIEVEMENT_1000_MESSAGES);
	if(MessagesSent[playerid] >= 1000000)
	    Achievement::Reward(playerid, ACHIEVEMENT_MILL_MESSAGES);
    if(MessagesSent[playerid] >= 10000000)
	    Achievement::Reward(playerid, ACHIEVEMENT_10MIL_MESSAGES);

	if(B_dmg_IsInDS[playerid] == true)
	{
	    new
		    damage,
		    bool:head = false;

	    for(new i; i < 80; i++)
		{
			if(I_dmg_Damages[playerid][i][0] < 1) continue;
			if(I_dmg_Damages[playerid][i][0] == 9)
			    head = true;

			damage += I_dmg_Damages[playerid][i][2];
		}

		if((damage > 160 || head == true))
		{
		    SendError(playerid, "Nemôe chatova keï si màtvy!");
		    return 0;
		}
	}

	FormatLog(log_type_other, "%s (%s - %s) hovori: %s", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), text);
	printf("[CHAT] %s hovori: %s", ReturnName(playerid), text);
	AddToCommandLog(playerid, text);

	if(ph_IsTalking[playerid] == true)
	{
	    PhoneMessage(playerid, text, 0);
		return 0;
	}

	if(!IsPlayerInAnyVehicle(playerid) && !canStopAnimation[playerid] && opt_ChatAnim[playerid] == 0 && unStoppableAnim[playerid]==false)
	{
	    ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
		SetTimerEx("timer_StopChatAnim", strlen(text) * 100, false, "i", playerid);
	}

	new o[4];
    GetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), o[0],o[1],o[2],o[3]);
    if(IsPlayerInAnyVehicle(playerid) && o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0) {

        new S_string[144];
		if(strlen(prizvuk[playerid]) > 0)
		    format(S_string, sizeof(S_string), "%s hovorí: (%s prízvuk) %s", GetPlayerNameEx(playerid, USE_MASK), prizvuk[playerid], text);
		else
		    format(S_string, sizeof(S_string), "%s hovorí: %s", GetPlayerNameEx(playerid, USE_MASK), text);

		switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
		    case 424,439,446,448,449,452,453,454,457,461,462,463,468,471,472,473,480,481,484,485,486,493,500,504,509,510,521,522,523,530,531,533,536,539,567,568,571,572,586,595: {}
		    default: {
		        foreach(new i : Player) {
		            if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i)) {
						SendClientMessage(i,0xFFFFFFff,S_string);
					}
		        }
		        return 0;
		    }
		}
    }

	new S_string[144];

	if(strlen(prizvuk[playerid]) > 0)
 		format(S_string, sizeof(S_string), "%s hovorí: (%s prízvuk) %s", GetPlayerNameEx(playerid, USE_MASK), prizvuk[playerid], text);
	else
	    format(S_string, sizeof(S_string), "%s hovorí: %s", GetPlayerNameEx(playerid, USE_MASK), text);

	ProxDetector(playerid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, S_string, 1.6, true);

	if(GetPlayerVirtualWorld(playerid) != 0)
	{
		format(S_string, sizeof(S_string), "%s", text);
		BubbleChat(playerid, COLOR_LOCAL_CHAT_TEXT, S_string);
	}
	return 0;
}

func_OnPlayerConnect(playerid)
{

    if(IsPlayerNPC(playerid))
	    return 1;

	new pcount = 0;
	foreach( new x : Player )
	{
		if(IsPlayerNPC(x))
		    continue;

        pcount ++;
	}

	if(pcount > I_gm_playerRecord)
	{
	    I_gm_playerRecord = pcount;

	    if(I_gm_playerRecord % 5 == 0)
		{
		    new S_finalString[128];
		    format(S_finalString, sizeof(S_finalString), "[ SERVER ]: Dosiahli sme rekord %d hráèov!", I_gm_playerRecord);
			SendClientMessageToAll(COLOR_LOTTERY, S_finalString);
		}
	}

    SetPlayerColor(playerid, 0xC0C0C0FF);

    ReloadVariables_Login(playerid);

	if(strfind(ReturnName(playerid), "_", false) != -1)
	{
	    return ex_KickPlayer(playerid, KICK_TYPE_SYSTEM, "Úèet na ktorý sa prihlasuje, neexistuje! Prosím, nepouívaj pri prihlasovaní podtrítko!");
	}

    if(gSnowParticles) CreateSnow(playerid);

	InitFly(playerid);

    format(S_masterAccount[playerid], 48, ReturnName(playerid));

    PlayAudioStreamForPlayerEx(playerid, "http://countyliferoleplay.eu/INTRO.mp3", .ambient = true);

    SetPlayerLoginCamera(playerid);

	for(new i; i < 100; i++) SendClientMessage(playerid, COLOR_WHITE, " ");
	//TextDrawShowForPlayer(playerid, blackTD);
	for(new i; i < sizeof(textdraw_LoginTD); i++) TextDrawShowForPlayer(playerid, textdraw_LoginTD[i]);

    FadePlayerConnect(playerid);
    LoadPlayerTextdraws(playerid);

    Streamer_Update(playerid);

	SetTimerEx("timer_proceedLogin",1500,false,"ii",playerid, 0);
	return 1;
}

function timer_proceedLogin(playerid, isLogged)
{

    if(isLogged == 0) for(new i; i < 100; i++) SendClientMessage(playerid, COLOR_WHITE, " ");

    TextDrawHideForPlayer(playerid, blackTD);

	if(isLogged == 0)
	{
		login_Pokus[playerid] = 3;

		ShowLoginDialogForPlayer(playerid);
	}
	return 1;
}

forward BB_CanGet(playerid);
public BB_CanGet(playerid)
{
    bb_cantGet[playerid] = false;
    return 1;
}

function rentalb_Destroy(vehicleid, time)
{
	if(vEnum[vehicleid][v_rentalb_IsRental] != 1)
	    return 0;
	    
	if(vEnum[vehicleid][v_rentalb_LastUnix] > time)
		return 0;
		
    vEnum[vehicleid][v_rentalb_IsRental] = 0;
    vEnum[vehicleid][v_rentalb_LastUnix] = 0;
    format(vEnum[vehicleid][v_rentalb_RentedBy], MAX_PLAYER_NAME+1, "");
    
    UpdateFactionVehicleUnit(vehicleid, "", false, false, .windshield=false);
    DestroyVehicle(vehicleid);
	    
	return 1;
}

func_OnPlayerDisconnect(playerid, reason)
{

	new vehicleid = rentalbike_HasRentalBike(playerid);

	if(vehicleid != 0)
	{
		vEnum[vehicleid][v_rentalb_LastUnix] = gettime();
	    SetTimerEx("rentalb_Destroy", 1000*60*5, false, "ii", vehicleid, vEnum[vehicleid][v_rentalb_LastUnix]);
	}

    CallRemoteFunction("corpse_OnPlayerDisconnect", "id", playerid, reason);

	if(IsPlayerNPC(playerid))
	{
	    DestroyDynamic3DTextLabel(T3D_nameTag[playerid]);
	    DestroyDynamic3DTextLabel(T3D_descTag[playerid]);
	    return 1;
	}

	if(pohrebnasluzba_isDoing[playerid]==true)
	{
	    foreach( new x : Vehicle )
	    {
	        if(GetVehicleFaction(x) == 54)
	        {
	            // je to pohrebak

	            RepairVehicle(x);
	            SetVehicleToRespawn(x);
	            vhac_healthState[x] = 1000.0;
	        }
	    }
	}

	if(IsPlayerInAnyVehicle(playerid))
	{
	    switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
	    {
	        case 481,509,510:
				SavePlayerVehicle(GetPlayerVehicleID(playerid),1);
	    }
	}

    if(bb_playerHasBall[playerid])
	{

	    ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);

	    new
			Float:X, Float:Y, Float:Z, Float:A;

		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);

		X += 1.5 * floatsin(-A, degrees);
		Y += 1.5 * floatcos(-A, degrees);

        bballEnum[bb_ballEnumId[playerid]][benum_holder] = INVALID_PLAYER_ID;

		StopObject(bballEnum[bb_ballEnumId[playerid]][benum_objectId]);
		disablePhysics(bballEnum[bb_ballEnumId[playerid]][benum_objectId]);
		MoveObject(bballEnum[bb_ballEnumId[playerid]][benum_objectId], X, Y, Z - 0.8, 5.5);

		bballEnum[bb_ballEnumId[playerid]][benum_ballState] = BALL_STATE_NONE;

		bb_ballEnumId[playerid] = -1;
		bb_playerHasBall[playerid] = false;
	}

    if(snowOn{playerid})
   	{
    	for(new i = 0; i < gSnowParticles_X; i++) DestroyDynamicObject(snowObject[playerid][i]);

   		snowOn{playerid} = false;
   		KillTimer(updateTimer{playerid});
	}

	ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, " - ", " ", " - ", " ");

	if(IsPlayerInAnyVehicle(playerid))
	{
	    if(!strcmp(ReturnName(playerid), vEnum[GetPlayerVehicleID(playerid)][v_Owner], false) || !strcmp(ReturnName(playerid), vEnum[GetPlayerVehicleID(playerid)][v_SecOwner], false))
	    {

	        new
	            i = GetPlayerVehicleID(playerid);

            SetVehicleParams(i, 	VEHICLE_TYPE_ENGINE, 	0);
            SetVehicleParams(i, 	VEHICLE_TYPE_LIGHTS, 	0);
            SetVehicleParams(i, 	VEHICLE_TYPE_DOORS, 	0);

	    }
	}

    new
	    S_msg[144],
		S_reason[64];

	switch(reason)
	{
	    case 0: strcat(S_reason, "Pád hry");
	    case 1: strcat(S_reason, "Odpojenie");
	    case 2: strcat(S_reason, "Kick");
	}

	if(B_dmg_IsInDS[playerid] == true)
	{
        if(IsValidDynamic3DTextLabel(T3D_dmg_Label[playerid]))
		{
			DestroyDynamic3DTextLabel(T3D_dmg_Label[playerid]);
			T3D_dmg_Label[playerid] = Text3D:INVALID_3DTEXT_ID;
		}
	}

	if(IsWorking[playerid] && GetPlayerFactionType(playerid) == FACTION_TYPE_TAXI)
	{
	    IsWorking[playerid] = 0;
	}

	if(bb_Placed[playerid] == true)
	{
	    DestroyBoombox(playerid);
	}

	bb_Povolenie[playerid] = -1;


	format(S_msg, 144, "> %s (%d) sa práve odpojil z hry! (%s) [%d / %d]", GetPlayerNameEx(playerid, NO_MASK), playerid, S_reason, GetOnlinePlayers()-1, MAX_PLAYERS-1);
	SendLocalMessage(playerid,30.0,COLOR_GREY,S_msg);

	format(S_msg, 144, "%s sa práve odpojil zo serveru! (%s) [%d / %d]", GetPlayerNameEx(playerid, USE_PUREIDNAME), S_reason, GetOnlinePlayers()-1, MAX_PLAYERS-1);
	AdminWarn(playerid, "LoginWarn:", COLOR_YELLOW, S_msg);

    web_LatestFormat("%s se prave odpojil ze hry", GetPlayerNameEx(playerid, NO_MASK));

	if(GetPVarInt(playerid,"haskrabica"))
	{
		new Float:pos[3];

		GetPlayerPos(playerid, pos[0],pos[1],pos[2]);

        CreateDynamicDrop(1005, GetPVarInt(playerid,"krtyp"), 1, pos[0],pos[1],pos[2], 0.0, GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), ReturnName(playerid));

        DeletePVar(playerid, "krtyp");
        DeletePVar(playerid, "haskrabica");
	}

	if(hasConv[playerid] == true)
	{
		FormatWarn(-1, "ASSIST -", COLOR_PURPLE, "{ffffff}ID %d sa odpojilo poèas konverzácie s %s!", playerid, ReturnMaster(dotaz_Conv[playerid]));
		FormatLog(log_type_assist, "%s((%d) %s - %s) sa odpojil pocas konverzacie s %s((%d) %s - %s)", ReturnName(playerid), playerid, ReturnMaster(playerid), ReturnIP(playerid), ReturnName(dotaz_Conv[playerid]), dotaz_Conv[playerid], ReturnMaster(dotaz_Conv[playerid]), ReturnIP(dotaz_Conv[playerid]));

		SCFM(dotaz_Conv[playerid], COLOR_PURPLE, "[ ASSIST ] {ffffff}%s(%s) sa odpojil poèas konverzácie s tebou!", ReturnName(playerid), ReturnMaster(playerid));

		hasConv[dotaz_Conv[playerid]] = false;
		dotaz_Conv[dotaz_Conv[playerid]] = 0;
		hasConv[playerid] = false;
		dotaz_Conv[playerid] = 0;
	}

	if(hasDotaz[playerid] == true)
	{
	    FormatWarn(-1, "ASSIST -", COLOR_PURPLE, "{ffffff}ID %d zruil assist: %s", playerid, dotaz_String[playerid]);
		FormatLog(log_type_assist, "%s((%d) %s - %s) zrusil otazku: %s",ReturnName(playerid), playerid, ReturnMaster(playerid), ReturnIP(playerid), dotaz_String[playerid]);

		hasDotaz[playerid] = false;
		dotaz_Time[playerid] = 0;
		dotaz_Conv[playerid] = 0;

		format(dotaz_String[playerid], 128, "");

		new
			ac = GetAssistCount(),
			str[128];

		format(str, 128, "%d ziadosti", ac);
		TextDrawSetString(TD_ziadosti, str);

		if(ac > 0)
		{
			foreach(new i : Player)
			{
				if(GetPlayerAdminLevel(i) < 1)
					continue;

				if(B_playerAdminDuty[i] == false)
					continue;

				TextDrawShowForPlayer(i, TD_ziadosti);
			}
		}
		else
		{
		    foreach(new i : Player)
			{
				if(GetPlayerAdminLevel(i) < 1)
					continue;

				if(B_playerAdminDuty[i] == false)
					continue;

				TextDrawHideForPlayer(i, TD_ziadosti);
			}
		}
	}

	if(isDoingDMV[playerid] == true)
	{
	    SetTimerEx("timer_DestroyLearnerVehicle", 500, false, "ii", playerid, DMV_vehicleID[playerid]);
	}

	FadePlayerDisconnect(playerid);

	if(IsPlayerLogged(playerid) && b_playerSelectChar[playerid] == false)
	{

		SavePlayerData(playerid);
		SetPlayerName(playerid, S_masterAccount[playerid]);

	}

	PlayerReloadVariables_Logout(playerid);
	return 1;
}

new trunkitemid[MAX_PLAYERS];

new gRequire[MAX_PLAYERS];

function GEOIP_HTTPREQUEST_REGISTER(playerid, response_code, location[]) // The GEO-IP Callback.
{

	gRequire[playerid] = 1;

    if(strfind(location, "(SK)", false) == -1 && strfind(location, "(CZ)", false) == -1)
		gRequire[ playerid ] = 0;
	else
		gRequire[ playerid ] = 1;

	new
		Query[ 1024 ],
		pocetip,
		Cache:cache
	;

	mysql_format(MYSQL, Query, sizeof Query, "SELECT * FROM master_accounts WHERE RegIP = '%e' OR LastIP = '%e'", regIP[playerid], regIP[playerid]);
	cache = mysql_query(MYSQL, Query);

	pocetip = cache_num_rows();

	cache_delete(cache);

	if(pocetip > 0 && gRequire[ playerid ] == 1)
	    gRequire[ playerid ] = 0;

	mysql_format(
 		MYSQL,
   		Query,
    	sizeof Query,
	    "INSERT INTO master_accounts (Username, Password, Activated, Registered, RegIP, LastIP, Activated_IPFrom) VALUES ('%e', md5('%e'), '%d', NOW(), '%e', '%e', '%e')",

		ReturnName(playerid),
		ppass[playerid],
		gRequire[playerid],

		regIP[playerid],
		lastIP[playerid],

		location
	);

	mysql_query(
 		MYSQL,
   		Query,
	    false
	);

	mysql_format(MYSQL, Query, sizeof Query, "SELECT * FROM master_accounts WHERE Username = '%e'", ReturnName(playerid));
	cache = mysql_query(MYSQL, Query);

	cache_get_value_name_int(0, "id", masterId[playerid]);

	cache_delete(cache);

	if(gRequire[ playerid ] == 1)
	{
		format(
  			Query,
	    	sizeof Query,
		    "Zaregistroval si nový úèet '%s', vitaj!",

			ReturnName(playerid)
		);

		SendSuccess(playerid, Query);

		StopAudioStreamForPlayerEx(playerid);
	}
	else
	{
 		format(
  			Query,
	    	sizeof Query,
		    "Zaregistroval si nový úèet '%s', vitaj!",

			ReturnName(playerid)
		);

		SendSuccess(playerid, Query);
		SendSuccess(playerid, "Tvoja IP adresa je u v databáze alebo je zo zahranièia, bude musie vyèka na aktiváciu úètu!");
		SendSuccess(playerid, "Môe èaka, alebo sa pripoj neskôr!");
		SendError(playerid, " ");

	    new
	        String[ 144 ],
			admincount = 0;

		foreach(new i : Player)
		{
		    if(GetPlayerAdminLevel(i) > 0)
		        admincount ++;
		}

		format(String, sizeof String, "Práve je online %d ¾udí, ktorí ti môu skontrolova iados!", admincount);
		SendSuccess(playerid, String);

		playerWaiting[playerid] = true;

		FormatWarn(-1, "WhitelistWarn:", 0x9aec97ff, "Nový hráè si podal iados o aktivovanie úètu! (%s, ID %d, /whitelist)", ReturnName(playerid), playerid);
	}

    return 0;

}

forward tag_ReopenMenu(playerid);
public tag_ReopenMenu(playerid)
    return ShowPlayerGraffitiMenu(playerid, playerEditingTagId[playerid]);

new tdrugid[MAX_PLAYERS char];
new mdc_tmppokuta[MAX_PLAYERS];
new emptyguntmp[MAX_PLAYERS];
new unimpoundDbId[MAX_PLAYERS];
func_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	watchCmds[playerid] = -1;

	corpse_OnDialogResponse(playerid, dialogid, response, listitem);

	switch(dialogid) {
	
	    case did_anawalt_kontrakt_detail:
	    {
	        Anawalt_ShowContracts(playerid);
	    }
	
	    case did_anawalt_kontrakty:
	    {
	        if(!response)
	            return 1;
	            
			Anawalt_ShowContract(playerid,listitem);
	    }
	
	    case did_anawalt_storage_manip:
	    {
	        if(isnull(inputtext))
	            return Anawalt_ShowStorage(playerid);

			if(!IsNumeric(inputtext) || strval(inputtext) < 1)
			    return Anawalt_ShowDetail(playerid);
			    
			if(response)
			{
			    if(GetPlayerInventoryItem(playerid, anawalt_itemid[playerid]) < strval(inputtext))
			        return SendError(playerid, "To¾ko toho nemá!"), Anawalt_ShowDetail(playerid);
			        
				new pocet = strval(inputtext), odmena = -1;
			        
                SetPlayerInventoryItem(playerid, anawalt_itemid[playerid], GetPlayerInventoryItem(playerid, anawalt_itemid[playerid])-pocet);
                
                if(anawalt_itemid[playerid] >= 50 && anawalt_itemid[playerid] <= 52)
                {
                	odmena = pocet*Economy::GetPrice(23+(50-anawalt_itemid[playerid]));
				}
                
                if(odmena != -1)
                {
	                for(new f; f < MAX_FACTIONS; f++)
				 	{
				  		if(strlen(factEnum[f][fact_Name]) < 3) continue;
					    if(factEnum[f][fact_Type] == FACTION_TYPE_WOODCUTTER) {
				     		if(factEnum[f][fact_Cash]<odmena)
				     		{
				     		    odmena = 0;
				     		}
				     		else
				     		{
                                factEnum[f][fact_Cash] -= odmena;
				     		}
				       		break;
					    }
				    }
				}
                
                new tquery[128*2];
                mysql_format(MYSQL, tquery, sizeof tquery, "UPDATE anawalt_sklad SET itemcount = itemcount+'%d' WHERE itemtype = '%d'", pocet, anawalt_itemid[playerid]);
				mysql_query(MYSQL, tquery, false);
				
				FormatLog(log_type_player, "%s(%s) vlozil do skladu ALC %s (%dks)!", ReturnName(playerid), ReturnIP(playerid), itemname[anawalt_itemid[playerid]], pocet);
				
				SCSuccess(playerid, "Vloil si %d kusov danej poloky do skladu!", pocet);
				if(odmena == 0) SCError(playerid, "Bohuia¾, firma nemá peniaze na vyplatenie.");
				else if(odmena > 0)
				{
					SCError(playerid, "Bolo ti vyplatených %d$.", odmena);
					ex_GivePlayerMoney(playerid,odmena);
					money_work[playerid]+=floatround(odmena,floatround_round);
				}
				
   			    Anawalt_ShowStorage(playerid);
			}
			else
			{
			
			    if(anawalt_itemid[playerid] >= 50 && anawalt_itemid[playerid] <= 52 && GetPlayerFactionRank(playerid) < 9)
			        return SendError(playerid, "Túto poloku nemôe vybra!"), Anawalt_ShowDetail(playerid);
			
			    new tquery[128*2], Cache:cache, vsklade = 0;
			    mysql_format(MYSQL, tquery, sizeof tquery, "SELECT * FROM anawalt_sklad WHERE itemtype='%d'", anawalt_itemid[playerid]);
			    cache=mysql_query(MYSQL, tquery);
			    cache_get_value_name_int(0, "itemcount", vsklade);
			    cache_delete(cache);
			    
			    if(vsklade < strval(inputtext) || ((anawalt_itemid[playerid] >= 50 && anawalt_itemid[playerid] <= 52) && strval(inputtext) > 20))
			        return SendError(playerid, "To¾ko tam toho nie je! Nemôe vybra viac ako 20 dreva naraz!"), Anawalt_ShowDetail(playerid);
			    
			    if(anawalt_itemid[playerid] >= 50 && anawalt_itemid[playerid] <= 52)
			    {
			        Anawalt::playerhold[playerid][0] = 1;
					Anawalt::playerhold[playerid][1] = anawalt_itemid[playerid]-49;
					Anawalt::playerhold[playerid][2] = strval(inputtext);

					SetPlayerSpecialAction(playerid, 25);
					SetPlayerAttachedObject(playerid, 9, 1463, 6, 0.021, 0.104, -0.226, 66.6999, -171.2, -109.6, 0.28, 0.31, 0.457);
			    }
			    else
					SetPlayerInventoryItem(playerid, anawalt_itemid[playerid], GetPlayerInventoryItem(playerid, anawalt_itemid[playerid])+strval(inputtext));

                mysql_format(MYSQL, tquery, sizeof tquery, "UPDATE anawalt_sklad SET itemcount = itemcount-'%d' WHERE itemtype = '%d'", strval(inputtext), anawalt_itemid[playerid]);
				mysql_query(MYSQL, tquery, false);

				FormatLog(log_type_player, "%s(%s) vybral zo skladu ALC %s (%dks)!", ReturnName(playerid), ReturnIP(playerid), itemname[anawalt_itemid[playerid]], strval(inputtext));

				SendSuccess(playerid, "Itemy vybrané!");
   			    Anawalt_ShowStorage(playerid);
			}
	    }
	
	    case did_anawalt_storage:
	    {
	        if(!response)
				return 1;
				
			Anawalt_ShowDetail(playerid, listitem);
	    }
	
	    case did_mdc_pokuta_add_reas:
	    {
	        if(!response)
	            return ShowPlayerMDC_DetailPerson(playerid, mdc_Username[playerid]);

			if(isnull(inputtext) || strlen(inputtext) > 64)
			{
			    ShowPlayerDialog(
					playerid,
					did_mdc_pokuta_add_reas, DIALOG_STYLE_INPUT,
					"PRIDA POKUTU",
					"{FFFFFF}> Zadaj prosím dôvod pokuty!",
					"UDELI", "SPA"
				);
			    return SendError(playerid, "Zadal si neplatný dôvod, musí by kratí ako 65 znakov!");
			}
			
			new
			    target = -1;

			foreach( new i : Player )
			{
				if(!IsPlayerLogged(i))
				    continue;

				if(strcmp(ReturnName(i), mdc_Username[playerid], true))
				    continue;

				target = i;
				break;
			}

			if(target == -1)
			{
			    ShowPlayerMDC_DetailPerson(playerid, mdc_Username[playerid]);
				return SendError(playerid, "Pre udelenie pokuty musí by hráè online!");
			}
			
			SCFM(target, 0xD0D0D0FF, "> %s ti udelil pokutu cez databázu v hodnote %d$ za '%s'!", GetPlayerNameEx(playerid, NO_MASK), mdc_tmppokuta[playerid],inputtext);
			web_LatestFormat("%s dostal pokutu", GetPlayerNameEx(target, NO_MASK));
			GivePlayerFine(ReturnName(target), mdc_tmppokuta[playerid],inputtext, ReturnName(playerid));

		    foreach( new x : Player )
			{
			    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
			        continue;

				if(!IsPlayerWorking(x) && GetPlayerAdminLevel(playerid) < 4)
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s dal pokutu cez MDC v hodnote %d$, dôvodom '%s' hráèovi %s!", GetPlayerNameEx(playerid, NO_MASK), mdc_tmppokuta[playerid],inputtext, GetPlayerNameEx(target, NO_MASK));
			}
	    }
	
	    case did_mdc_pokuta_add:
	    {
	        if(!response)
	            return ShowPlayerMDC_DetailPerson(playerid, mdc_Username[playerid]);
	            
			if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1 || strval(inputtext) > 20000)
			{
			    ShowPlayerDialog(
					playerid,
					did_mdc_pokuta_add, DIALOG_STYLE_INPUT,
					"PRIDA POKUTU",
					"{FFFFFF}> Zadaj prosím sumu pokuty v rozmedzí 1-20000$!",
					"ÏALEJ", "SPA"
				);
			    return SendError(playerid, "Zadal si neplatnú sumu!");
			}
			
			mdc_tmppokuta[playerid] = strval(inputtext);
			
			ShowPlayerDialog(
				playerid,
				did_mdc_pokuta_add_reas, DIALOG_STYLE_INPUT,
				"PRIDA POKUTU",
				"{FFFFFF}> Zadaj prosím dôvod pokuty!",
				"UDELI", "SPA"
			);
	    }
	
	    case did_anawalt_work_detail:
	    {
	        return Anawalt::ShowWorkDialog(playerid);
	    }
	
	    case did_anawalt_work:
	    {
	        if(!response)
	            return 1;
	            
			switch(listitem)
			{
			    case 0:
			    {
			        ShowPlayerDialog(
						playerid, did_anawalt_work_detail, DIALOG_STYLE_MSGBOX,
						"DETAIL PRÁCE",
						"{ffffff}> Sadenie stromov je najdôleitejiou prácou celej korporácie,\npretoe bez stromov nebude èo káca a nebude s èím obchodova. Kúp si\nlopatu a sadenicu a zasaï stromy v areáli Anawalt Lumber príkazom /zasaditstrom.",
						"OK", ""
					);
			    }
			    
			    case 1:
			    {
			        if(GetPlayerFactionRank(playerid)<CUT_DOWN_TREES_RANK)
			        {
			            SendError(playerid, "Na vykonanie tejto práce nemá potrebný rank!");
			            return Anawalt::ShowWorkDialog(playerid);
			        }
					Anawalt::Cutdown_StartWork(playerid);
			    }
			    
			    case 2:
			    {
			        if(GetPlayerFactionRank(playerid)<CUT_UP_TREES_RANK)
			        {
			            SendError(playerid, "Na vykonanie tejto práce nemá potrebný rank!");
			            return Anawalt::ShowWorkDialog(playerid);
			        }
					Anawalt::Cutup_StartWork(playerid);
			    }
			}
	    }
	
	    case did_dealership_confirm_credits:
	    {
	        if(!response)
	        {
	            Dealership::Proceed(playerid);
	            return 1;
	        }

	        new
				id = tmp_dealershipedit[playerid]
			;

	        if(g_I_mince[playerid] < dealshvehicles[id][dealshipIndex[playerid]][dealveh_PriceKr])
	        {
	            SendError(playerid, "Nemá dos kreditov!");
	            Dealership::Proceed(playerid);
	            return 1;
	        }

	        g_I_mince[playerid] -= dealshvehicles[id][dealshipIndex[playerid]][dealveh_PriceKr];

	        new
			    S_string[144];

			format(S_string, 144, "> Zakúpil si si vozidlo %s za %d kreditov v predajni %s!", VehicleNames[dealshvehicles[id][dealshipIndex[playerid]][dealveh_Model]-400], dealshvehicles[id][dealshipIndex[playerid]][dealveh_PriceKr], dealershipenum[id][dealsh_Name]);
			SCFM(playerid, COLOR_COMMANDUSE, S_string);
        	SCFM(playerid, 0xD0D0D0FF, "> Ak sa odpája, zaparkuj ho, /veh park. Parkovacie miesto si vie kdeko¾vek kúpi za 500$ - /veh buypark.");

			Achievement::Reward(playerid, ACHIEVEMENT_FIRST_VEHICLE);
			Achievement::Reward(playerid, ACHIEVEMENT_VEHICLE_KREDITY);

			FormatLog(log_type_buythings, "%s(%s - %s) si zakupil vozidlo %s za %d kreditov v %s.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), VehicleNames[dealshvehicles[id][dealshipIndex[playerid]][dealveh_Model]-400], dealshvehicles[id][dealshipIndex[playerid]][dealveh_PriceKr], dealershipenum[id][dealsh_Name]);
            Dealership::Buy(playerid);
            Dealership::Close(playerid);
	    }
	    
	    case did_dealership_confirm_money:
	    {
	        if(!response)
	        {
	            Dealership::Proceed(playerid);
	            return 1;
	        }

	        new
				id = tmp_dealershipedit[playerid]
			;

	        if(ex_GetPlayerMoney(playerid) < dealshvehicles[id][dealshipIndex[playerid]][dealveh_Price])
	        {
	            SendError(playerid, "Nemá dos peòazí!");
	            Dealership::Proceed(playerid);
	            return 1;
	        }

	        ex_GivePlayerMoney(playerid, -dealshvehicles[id][dealshipIndex[playerid]][dealveh_Price]);

	        new
			    S_string[144];

			format(S_string, 144, "> Zakúpil si si vozidlo %s za %d$ v predajni %s!", VehicleNames[dealshvehicles[id][dealshipIndex[playerid]][dealveh_Model]-400], dealshvehicles[id][dealshipIndex[playerid]][dealveh_Price], dealershipenum[id][dealsh_Name]);
			SCFM(playerid, COLOR_COMMANDUSE, S_string);
        	SCFM(playerid, 0xD0D0D0FF, "> Ak sa odpája, zaparkuj ho, /veh park. Parkovacie miesto si vie kdeko¾vek kúpi za 500$ - /veh buypark.");
			Achievement::Reward(playerid, ACHIEVEMENT_FIRST_VEHICLE);
			if(dealshvehicles[id][dealshipIndex[playerid]][dealveh_Price] >= 50000)
			    Achievement::Reward(playerid, ACHIEVEMENT_VEHICLE_50000);
			if(dealshvehicles[id][dealshipIndex[playerid]][dealveh_Price] >= 150000)
			    Achievement::Reward(playerid, ACHIEVEMENT_VEHICLE_150000);

			FormatLog(log_type_buythings, "%s(%s - %s) si zakupil vozidlo %s za %d$ v %s.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), VehicleNames[dealshvehicles[id][dealshipIndex[playerid]][dealveh_Model]-400], dealshvehicles[id][dealshipIndex[playerid]][dealveh_Price], dealershipenum[id][dealsh_Name]);
            Dealership::Buy(playerid);
            Dealership::Close(playerid);
	    }
	    
	    case did_dealership_confirm_money_ex:
	    {
	        if(!response)
	        {
	            dealshnoresponse[playerid] = false;
	            SelectTextDraw(playerid, 0x78AD69FF);
	            return 1;
	        }

	        new
				id = tmp_dealershipedit[playerid]
			;

	        if(ex_GetPlayerMoney(playerid) < dealshvehicles[id][dealshipIndex[playerid]][dealveh_Price])
	        {
	            SendError(playerid, "Nemá dos peòazí!");
                Dealership::Proceed(playerid);
	            return 1;
	        }

	        ex_GivePlayerMoney(playerid, -dealshvehicles[id][dealshipIndex[playerid]][dealveh_Price]);

	        new
			    S_string[144];

			format(S_string, 144, "> Zakúpil si si vozidlo %s za %d$ v predajni %s!", VehicleNames[dealshvehicles[id][dealshipIndex[playerid]][dealveh_Model]-400], dealshvehicles[id][dealshipIndex[playerid]][dealveh_Price], dealershipenum[id][dealsh_Name]);
			SCFM(playerid, COLOR_COMMANDUSE, S_string);
        	SCFM(playerid, 0xD0D0D0FF, "> Ak sa odpája, zaparkuj ho, /veh park. Parkovacie miesto si vie kdeko¾vek kúpi za 500$ - /veh buypark.");
        	
			Achievement::Reward(playerid, ACHIEVEMENT_FIRST_VEHICLE);
			if(dealshvehicles[id][dealshipIndex[playerid]][dealveh_Price] >= 50000)
			    Achievement::Reward(playerid, ACHIEVEMENT_VEHICLE_50000);
			if(dealshvehicles[id][dealshipIndex[playerid]][dealveh_Price] >= 150000)
			    Achievement::Reward(playerid, ACHIEVEMENT_VEHICLE_150000);

			FormatLog(log_type_buythings, "%s(%s - %s) si zakupil vozidlo %s za %d$ v %s.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), VehicleNames[dealshvehicles[id][dealshipIndex[playerid]][dealveh_Model]-400], dealshvehicles[id][dealshipIndex[playerid]][dealveh_Price], dealershipenum[id][dealsh_Name]);
            Dealership::Buy(playerid);
            Dealership::Close(playerid);
	    }
	
	    case did_dealership_confirm:
	    {
	        if(!response)
	        {
	            dealshnoresponse[playerid] = false;
	            SelectTextDraw(playerid, 0x78AD69FF);
	            return 1;
	        }

	        if(listitem == 0)
	        {
	            Dealership::ShowMoneyConfirm(playerid);
	        }
			else if(listitem == 1)
			{
			    Dealership::ShowCreditConfirm(playerid);
			}
			else
			{
			    dealshnoresponse[playerid] = false;
	            SelectTextDraw(playerid, 0x78AD69FF);
	            return 1;
			}
	    }
	
	    case did_dealership_vehicle_faction:
	    {
	        if(!response)
	            return Dealership::VehicleDetail(playerid, dealshcount[playerid]);

			if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 0 || strval(inputtext) >= sizeof(factionTypes))
			    return SendError(playerid, "Zadaj spravne ID frakcie!"), Dealership::ShowEdit(playerid,D_EDIT_TYPE_FACTION);

            Dealership::SetFaction(playerid, strval(inputtext));
	    }
	
	    case did_dealership_vehicle_price:
	    {
	        if(!response)
	            return Dealership::VehicleDetail(playerid, dealshcount[playerid]);

			if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 0)
			    return SendError(playerid, "Zadaj spravnu cenu!"), Dealership::ShowEdit(playerid,D_EDIT_TYPE_PRICE);

            Dealership::SetPrice(playerid, strval(inputtext));
	    }
	    
	    case did_dealership_vehicle_credits:
	    {
	        if(!response)
	            return Dealership::VehicleDetail(playerid, dealshcount[playerid]);

			if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 0)
			    return SendError(playerid, "Zadaj spravnu cenu v kreditoch!"), Dealership::ShowEdit(playerid,D_EDIT_TYPE_CREDITS);

            Dealership::SetKredity(playerid, strval(inputtext));
	    }
	    
	    case did_dealership_vehicle_recolour:
	    {
	        if(!response)
	            return Dealership::VehicleDetail(playerid, dealshcount[playerid]);
	            
            Dealership::SetRecolorable(playerid, !strval(inputtext));
	    }
	    
	    case did_dealership_vehicle_donator:
	    {
	        if(!response)
	            return Dealership::VehicleDetail(playerid, dealshcount[playerid]);

			if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 0 || strval(inputtext) > 3)
			    return SendError(playerid, "Zadaj hodnotu 0-3!"), Dealership::ShowEdit(playerid,D_EDIT_TYPE_DONATOR);

            Dealership::SetDonator(playerid, strval(inputtext));
	    }
	
	    case did_dealership_vehicle:
	    {
	        if(!response)
	            return Dealership::ShowVehicles(playerid);
	            
			switch(listitem)
			{
			    case 1:
			    {
			        // donator
					Dealership::ShowEdit(playerid,D_EDIT_TYPE_DONATOR);
			    }
			    
			    case 3:
			    {
			        // cena
					Dealership::ShowEdit(playerid,D_EDIT_TYPE_PRICE);
			    }
			    
			    case 4:
			    {
			        // kredity
					Dealership::ShowEdit(playerid,D_EDIT_TYPE_CREDITS);
			    }
			    
			    case 6:
			    {
			        // colour
					Dealership::ShowEdit(playerid,D_EDIT_TYPE_RECOLOUR);
			    }
			    
			    case 8:
			        Dealership::ShowEdit(playerid,D_EDIT_TYPE_FACTION, 0);
			        
                case 9:
			        Dealership::ShowEdit(playerid,D_EDIT_TYPE_FACTION, 1);
			        
                case 10:
			        Dealership::ShowEdit(playerid,D_EDIT_TYPE_FACTION, 2);
			        
                case 11:
			        Dealership::ShowEdit(playerid,D_EDIT_TYPE_FACTION, 3);
			        
                case 12:
			        Dealership::ShowEdit(playerid,D_EDIT_TYPE_FACTION, 4);
			        
				case 14:
				    Dealership::RemoveVehicle(playerid);
			    
			    default:
			    {
			        // neklikatelne
			        SendError(playerid, "Táto hodnota sa nedá upravi!");
			        return Dealership::VehicleDetail(playerid, dealshcount[playerid]);
			    }
			}
	    }
	
	    case did_dealership_detail_veh_new:
	    {
	        if(!response)
	            return Dealership::ShowVehicles(playerid);
	            
			if(isnull(inputtext))
			    return SendError(playerid, "Takýto model neexistuje!"), Dealership::AddNewVeh(playerid);
			    
			new model = 0;
			    
            if(!IsNumeric(inputtext))
			    model = ReturnVehicleID(inputtext);
			else
			   	model = strval(inputtext);

			if(model < 400 || model > 611 || model == INVALID_VEHICLE_ID)
				return SendError(playerid, "Takýto model neexistuje!"), Dealership::AddNewVeh(playerid);

			if(model < 400 || model > 611)
			    return SendError(playerid, "Model musí by v rozmedzí 400 - 611!"), Dealership::AddNewVeh(playerid);
			    
			Dealership::AddNewVeh_internal(playerid,model);
	    }
	
	    case did_dealership_detail_vehs:
	    {
	        if(!response)
	            return Dealership::ShowDetail(playerid);

			if(listitem == 0)
			{
			    //add new
			    Dealership::AddNewVeh(playerid);
			}
			else
			{
			    // list
			    Dealership::VehicleDetail(playerid, listitem-1);
			}
	    }

	    case did_dealership_detail_multiplie:
	    {
	        if(!response)
	            return Dealership::ShowDetail(playerid);

			if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1)
			{
				SendError(playerid, "Nový multiplier nie je platný!");
			    Dealership::ShowEditMultiplier(playerid);
			    return 1;
			}

			Dealership::EditMultiplier(playerid, strval(inputtext));
	    }
	    
	    case did_dealership_detail_rename:
	    {
	        if(!response)
	            return Dealership::ShowDetail(playerid);

			if(isnull(inputtext) || strlen(inputtext) > 60)
			{
				SendError(playerid, "Nový názov je moc krátky alebo moc dlhý!");
			    Dealership::ShowRename(playerid);
			    return 1;
			}

			Dealership::Rename(playerid, inputtext);
	    }
	
	    case did_dealership_detail:
	    {
	        if(!response)
	            return Dealership::ShowAllDealerships(playerid);
	            
			switch(listitem)
			{
			    case 0:
			    {
					// názov
					Dealership::ShowRename(playerid);
			        return 1;
			    }
			    
			    case 1:
			    {
			        // multiplier
			        Dealership::ShowEditMultiplier(playerid);
			        return 1;
			    }
			    
			    case 6:
			    {
			        // pos1
			        if(IsPlayerInAnyVehicle(playerid))
			        {
			            SendError(playerid, "Nesmie sedie v aute!");
			        	Dealership::ShowDetail(playerid);
			        	return 1;
			        }
			        
			        Dealership::SaveOnfoot(playerid);
			    }
			    
			    case 7:
			    {
			        // pos2
			        if(!IsPlayerInAnyVehicle(playerid))
			        {
			            SendError(playerid, "Musí sedie v aute!");
			        	Dealership::ShowDetail(playerid);
			        	return 1;
			        }
			        
			        Dealership::SaveIncar(playerid);
			    }
			    
			    case 9:
			    {
			        return Dealership::ShowVehicles(playerid);
			    }
			    
			    case 11:
			    {
			        return Dealership::Remove(playerid);
			    }
			    
			    default:
			    {
			        SendError(playerid, "Táto funkcia je vypnutá, alebo nefunkèná!");
			        Dealership::ShowDetail(playerid);
			        return 1;
			    }
			}
	    }

	    case did_dealership:
	    {
	        if(!response)
	            return 1;
	            
			if(listitem == 0)
			{
			    Dealership::CreateNew(playerid);
			}
			else
			{
			    Dealership::Select(playerid, listitem);
			}
	    }
	
	    case did_econ_edit_value_to:
	    {
	    	if(!response)
	        {
	            Economy::EditList(playerid);
	            return 0;
	        }

	        if(isnull(inputtext) || strlen(inputtext) < 1 || strlen(inputtext) > 9)
	        {
	            Economy::EditName(playerid);
	            SendError(playerid, "Nova zadana hodnota premennej je neplatna!");
	            return 1;
	        }

	        Economy::UpdateValueTo(playerid, strval(inputtext));
			Economy::EditList(playerid);

			SendSuccess(playerid, "Hodnota premennej bola uspesne upravena!");
		}
		
		case did_econ_edit_value_from:
	    {
	    	if(!response)
	        {
	            Economy::EditList(playerid);
	            return 0;
	        }

	        if(isnull(inputtext) || strlen(inputtext) < 1 || strlen(inputtext) > 9)
	        {
	            Economy::EditName(playerid);
	            SendError(playerid, "Nova zadana hodnota premennej je neplatna!");
	            return 1;
	        }

	        Economy::UpdateValueFrom(playerid, strval(inputtext));
			Economy::EditList(playerid);

			SendSuccess(playerid, "Hodnota premennej bola uspesne upravena!");
		}
		
		case did_econ_edit_category:
		{
            if(!response)
	        {
	            Economy::EditList(playerid);
	            return 0;
	        }
	        
            Economy::UpdateCategory(playerid, strval(inputtext)+1);
			Economy::EditList(playerid);

			SendSuccess(playerid, "Kategoria premennej bola uspesne upravena!");
		}
	
	    case did_econ_edit_name:
	    {
	        if(!response)
	        {
	            Economy::EditList(playerid);
	            return 0;
	        }
	        
	        if(isnull(inputtext) || strlen(inputtext) < 1 || strlen(inputtext) > MAX_LIST_NAME-1)
	        {
	            Economy::EditName(playerid);
	            SendError(playerid, "Nove zadane meno premennej je neplatne!");
	            return 1;
	        }
	        
	        Economy::UpdateName(playerid, inputtext);
			Economy::EditList(playerid);

			SendSuccess(playerid, "Meno premennej bolo uspesne upravene!");
		}
	
	    case did_econ_list:
	    {
	        if(!response)
			{
			    Economy::ShowList(playerid);
			    return 0;
			}
			
			switch(listitem)
			{
			    case 1:
			    {
			        // meno
			        Economy::EditName(playerid);
			    }
			    
			    case 2:
			    {
			        // meno
			        Economy::EditCategory(playerid);
			    }
			    
			    case 5:
			    {
			        // hodnota od
			        Economy::EditValueFrom(playerid);
			    }
			    
			    case 6:
			    {
			        // hodnota do
			        Economy::EditValueTo(playerid);
			    }
			    
			    default:
			    {
			        //neklikatelne
			        return Economy::EditList(playerid);
			    }
			}
			
			return 1;
	    }
	
	    case did_econ_lists:
	    {
	        if(!response)
	        {
	            Economy::ShowCategories(playerid);
	            return 0;
			}
			
			Economy::currentlist[playerid] = listitem + 1;
			Economy::EditList(playerid, true);
			
			return 1;
	    }
	
	    case did_econ_categories:
	    {
	        if(!response)
	            return 0;
	            
            Economy::currentcat[playerid] = listitem + 1;
            
			Economy::ShowList(playerid);
			
			return 1;
	    }
	
	    case did_char_multiple:
	    {
	        Character::noresponse[playerid] = false;
	        if(!response)
	            return 1;
	            
			SendSuccess(playerid, "Poplatok ti bude strhnutý po vytvorení postavy!");
	            
            Character::ischarpaid[playerid] = true;
			CharacterCreate::StartCreation(playerid);
			
	        return 1;
	    }
	
	    case did_char_create_skin:
	    {
	        if(!response)
	        {
	            Character::noresponse[playerid] = false;
	            SelectTextDraw(playerid, 0x78AD69FF);
				return 1;
			}
			
			Character::noresponse[playerid] = false;
			
			if(isnull(inputtext) || !IsNumeric(inputtext))
			{
			    SendError(playerid, "Musí zada validné ID skinu!");
				return 1;
			}
			
			CharacterCreate::UpdateSkin(playerid, .skinid = strval(inputtext));
			SelectTextDraw(playerid, 0x78AD69FF);
	    }
	
	    case did_char_cre_name:
	    {
	        if(!response)
	        {
	            Character::noresponse[playerid] = false;
	            SelectTextDraw(playerid, 0x78AD69FF);
	            return 0;
			}
	            
			if(isnull(inputtext) || strlen(inputtext) < 6 || strlen(inputtext) >= MAX_PLAYER_NAME-2)
			{
			    SendError(playerid, "Meno musi mat od 6 do 20 znakov.");
			    CharacterCreate::ChooseName(playerid);
			    return 1;
			}
			
			if(strfind(inputtext, "_", true) == -1)
			{
			    SendError(playerid, "Meno musi obsahovat aj podtrznik.");
			    CharacterCreate::ChooseName(playerid);
			    return 1;
			}
			
			new
			    bool:error = true,
				name[ 35 ];

			format(name, sizeof name, "%s", inputtext);

			for( new i; i<strlen(name); i++)
			{

			    if(
					(name[i] >= 'a' && name[i] <= 'z')
					|| name[i] == '_'
					||
					(name[i] >= 'A' && name[i] <= 'Z'))
					error = false;
			    else
			    {
			        error = true;
			        break;
			    }

			}

			if(error == true)
			{
			    SendError(playerid, "Meno obsahuje nepovolené znaky!");
				CharacterCreate::ChooseName(playerid);
				return 1;
			}

			if(strfind(name, "_", false) == -1)
			    error = true;

			if(name[0] == '_' || name[strlen(name)-1] == '_')
			    error = true;
			    
            if(error == true)
			{
			    SendError(playerid, "Meno obsahuje nepovolené znaky!");
				CharacterCreate::ChooseName(playerid);
				return 1;
			}
			
			new
			    string[144];

			mysql_format(MYSQL, string, sizeof string, "SELECT * FROM char_main WHERE Username = '%e'", name);
			new Cache:cache = mysql_query(MYSQL, string);

			if(cache_num_rows() != 0)
			    error = true;

			cache_delete(cache);

			if(error == true)
			{
			    SendError(playerid, "Charakter s týmto menom u existuje");
                CharacterCreate::ChooseName(playerid);
				return 1;
			}
			
			format(CharacterCreate::name[playerid], MAX_PLAYER_NAME+1, "%s", inputtext);
			
			CharacterCreate::Refresh(playerid);
			
			Character::noresponse[playerid] = false;
 			SelectTextDraw(playerid, 0x78AD69FF);
			return 1;
		}

	    case did_impound_add_select:
	    {
	        if(!response)
	        {
	            InteractiveNPC::Response_Pulaski(playerid, InteractiveNPC::playernpcid[playerid], INPC_PULASKI_R_ADD_NO_RESPONSE);
	            unimpoundDbId[playerid] = 0;
	            return 1;
	        }

	        impound_selcar[playerid] = impound_veharr[playerid][listitem+1];

	        ShowPlayerDialog(playerid, did_impound_add_fine, DIALOG_STYLE_INPUT, "IMPOUND BOOKING #1", "{FFFFFF}> Zadaj prosím pokutu v dolároch, ko¾ko bude musie majite¾ pri vyzdvihnutí zaplati.\n> Pre iadnu pokutu napí 0.", "ÏALEJ", "ZRUI");

	        return 1;
	    }

	    case did_impound_add_fine:
	    {
	        if(!response)
	        {
	            InteractiveNPC::Response_Pulaski(playerid, InteractiveNPC::playernpcid[playerid], INPC_PULASKI_R_ADD_NO_RESPONSE);
	            unimpoundDbId[playerid] = 0;
	            return 1;
	        }

	        if(!IsNumeric(inputtext) || strval(inputtext) < 0 || strval(inputtext) > 10000)
	        {
	            SendError(playerid, "Pokuta musi byt v rozmedzi 0-10000$!");
	            ShowPlayerDialog(playerid, did_impound_add_fine, DIALOG_STYLE_INPUT, "IMPOUND BOOKING #1", "{FFFFFF}> Zadaj prosím pokutu v dolároch, ko¾ko bude musie majite¾ pri vyzdvihnutí zaplati.\n> Pre iadnu pokutu napí 0.", "ÏALEJ", "ZRUI");
				return 1;
	        }

	        impound_fine[playerid] = strval(inputtext);

	        ShowPlayerDialog(
				playerid, did_impound_add_time, DIALOG_STYLE_INPUT, "IMPOUND BOOKING #2",
				"{FFFFFF}> Zadaj prosím èas, o ko¾ko hodín bude môc majite¾ auto vybra.\n> Pre okamité vybratie zadaj 0.",
				"ÏALEJ", "ZRUI"
			);
	        return 1;
	    }

	    case did_impound_add_time:
	    {
	        if(!response)
	        {
	            InteractiveNPC::Response_Pulaski(playerid, InteractiveNPC::playernpcid[playerid], INPC_PULASKI_R_ADD_NO_RESPONSE);
	            unimpoundDbId[playerid] = 0;
	            return 1;
	        }

	        if(!IsNumeric(inputtext) || strval(inputtext) < 0 || strval(inputtext) > 240)
	        {
	            SendError(playerid, "Cas musi byt v rozmedzi 0-240 hodin!");
	            ShowPlayerDialog(
					playerid, did_impound_add_time, DIALOG_STYLE_INPUT, "IMPOUND BOOKING #2",
					"{FFFFFF}> Zadaj prosím èas, o ko¾ko hodín bude môc majite¾ auto vybra.\n> Pre okamité vybratie zadaj 0.",
					"ÏALEJ", "ZRUI"
				);
				return 1;
	        }

	        impound_time[playerid] = strval(inputtext);

	        ShowPlayerDialog(
				playerid, did_impound_add_reason, DIALOG_STYLE_INPUT, "IMPOUND BOOKING #3",
				"{FFFFFF}> Zadaj prosím dôvod zabavenia vozidla.",
				"ÏALEJ", "ZRUI"
			);
	        return 1;
	    }

	    case did_impound_add_reason:
	    {
	        if(!response)
	        {
	            InteractiveNPC::Response_Pulaski(playerid, InteractiveNPC::playernpcid[playerid], INPC_PULASKI_R_ADD_NO_RESPONSE);
	            unimpoundDbId[playerid] = 0;
	            return 1;
	        }

	        if(isnull(inputtext) || strlen(inputtext) > 80 || strlen(inputtext) < 3)
	        {
	            SendError(playerid, "Dovod musi mat 3-80 znakov!");
	            ShowPlayerDialog(
					playerid, did_impound_add_reason, DIALOG_STYLE_INPUT, "IMPOUND BOOKING #3",
					"{FFFFFF}> Zadaj prosím dôvod zabavenia vozidla.",
					"ÏALEJ", "ZRUI"
				);
				return 1;
	        }
	        format(impound_reason[playerid], 82, inputtext);

			new vyzdvihnutie[24];
			if(impound_time[playerid] == 0)
	            strcat(vyzdvihnutie, "okamite");
			else
			    format(vyzdvihnutie, 24, "%s", getdateunix(gettime()+(3600*impound_time[playerid])));
			new finalstr[1024];
	        format(
				finalstr, sizeof finalstr,
				"{FFFFFF}Model vozidla: {65aa53}%s\n{ffffff}SPZ vozidla: {65aa53}%s\n{ffffff}Majite¾: {65aa53}%s\n\n{ffffff}Pokuta: {65aa53}%d$\n{FFFFFF}Vyzdvihnutie moné: {65aa53}%s\n{ffffff}Dôvod zabavenia: {65aa53}%s\n\n{ffffff}Podpísaný: {65aa53}%s",
	            GetVehicleName(impound_selcar[playerid]), vEnum[impound_selcar[playerid]][v_SPZ], str_replace("_", " ", vEnum[impound_selcar[playerid]][v_Owner]),
	            impound_fine[playerid], vyzdvihnutie, impound_reason[playerid], str_replace("_", " ", ReturnName(playerid))
			);
			
	        ShowPlayerDialog(
				playerid, did_impound_add_recap, DIALOG_STYLE_MSGBOX, "IMPOUND BOOKING FINAL",
				finalstr,
				"ZABAVI", "ZRUI"
			);
	        return 1;
	    }

	    case did_impound_add_recap:
	    {
	        if(!response)
	        {
	            InteractiveNPC::Response_Pulaski(playerid, InteractiveNPC::playernpcid[playerid], INPC_PULASKI_R_ADD_NO_RESPONSE);
	            unimpoundDbId[playerid] = 0;
	            return 1;
	        }

	        InteractiveNPC::Response_Pulaski(playerid, InteractiveNPC::playernpcid[playerid], INPC_PULASKI_R_ADD_DONE);
	       	unimpoundDbId[playerid] = 0;

	       	foreach( new x : Player )
			{
		 		if(GetPlayerFactionType(x) != FACTION_TYPE_LAW)
		   			continue;

				if(GetPlayerFactionType(x) == FACTION_TYPE_LAW && !IsPlayerWorking(x))
		  			continue;
		  			
				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s zabavil vozidlo %s (%s) na %d hodín!", GetPlayerNameEx(playerid, NO_MASK), GetVehicleName(impound_selcar[playerid]),vEnum[impound_selcar[playerid]][v_SPZ],impound_time[playerid]);
                SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] Dôvod zabavenia: %s", impound_reason[playerid]);

			}

			FormatWarnEx(playerid, 2, "AdmCmd:", COLOR_ADMINCMD, "%s zabavil vozidlo %s (%s) na %d hodín! (pokuta %d$)", GetPlayerNameEx(playerid, NO_MASK), GetVehicleName(impound_selcar[playerid]),vEnum[impound_selcar[playerid]][v_SPZ],impound_time[playerid],impound_fine[playerid]);
	        FormatLog(log_type_player, "%s(%s) zabavil vozidlo %s(%s) (hodiny: %d, pokuta: %d, dovod: %e).", ReturnName(playerid), ReturnIP(playerid), GetVehicleName(impound_selcar[playerid]),vEnum[impound_selcar[playerid]][v_SPZ],impound_time[playerid],impound_fine[playerid],impound_reason[playerid]);

	        ////////////////////////////////////////////////////////////////////////

	        new tquery[1024];
	        mysql_format(
				MYSQL, tquery, sizeof tquery,
				"UPDATE char_vehicles SET Impounded='1',Impounded_By='%e',Impounded_Date='%d',Impounded_Unix='%d',Impounded_Fine='%d',Impounded_Reason='%e' WHERE SPZ = '%e'",
				str_replace("_"," ",ReturnName(playerid)),gettime(),gettime()+(3600*impound_time[playerid]),impound_fine[playerid],impound_reason[playerid],vEnum[impound_selcar[playerid]][v_SPZ]
			);

			SavePlayerVehicle(impound_selcar[playerid], 1);
			mysql_tquery(MYSQL, tquery);
			
			foreach( new x : Player )
			{
			    if(strcmp(ReturnName(x),vEnum[impound_selcar[playerid]][v_Owner],false)) continue;
				new reason[64];
				format(reason, sizeof reason, "~w~Jedno z tvojich vozidiel bolo odtiahnute!");
		 		EnterInfo(playerid, reason);
		 		break;
			}
	        return 1;
	    }

	    case did_impound_check:
	    {
	        if(!response)
	        {
	            InteractiveNPC::Response_Pulaski(playerid, InteractiveNPC::playernpcid[playerid], INPC_PULASKI_R_NOT_ANYMORE);
	            unimpoundDbId[playerid] = 0;
	            return 1;
	        }

	        new mql_query[128];
			mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM char_vehicles WHERE id = %d", unimpoundDbId[playerid]);
			new Cache:cache = mysql_query(MYSQL, mql_query);

			new
			    Impounded_Fine;

			cache_get_value_name_int(0, "Impounded_Fine", Impounded_Fine);

			if(Impounded_Fine > ex_GetPlayerMoney(playerid))
			{
			    InteractiveNPC::Response_Pulaski(playerid, InteractiveNPC::playernpcid[playerid], INPC_PULASKI_R_NO_MONEY);
	            unimpoundDbId[playerid] = 0;
			    cache_delete(cache);
			    return 1;
			}

			new
			    Impounded_Unix;

			cache_get_value_name_int(0, "Impounded_Unix", Impounded_Unix);

			if(Impounded_Unix > gettime())
			{
			    InteractiveNPC::Response_Pulaski(playerid, InteractiveNPC::playernpcid[playerid], INPC_PULASKI_R_CANT_TAKE);
	            unimpoundDbId[playerid] = 0;
			    cache_delete(cache);
			    return 1;
			}

			cache_get_value_name(0, "SPZ", vehicleOperation[playerid]);
			cache_delete(cache);

			ex_GivePlayerMoney(playerid, -Impounded_Fine);
			money_spent[playerid] += floatround(Impounded_Fine,floatround_round);
			SpawnPlayerVehicle(playerid, true);

			InteractiveNPC::Response_Pulaski(playerid, InteractiveNPC::playernpcid[playerid], INPC_PULASKI_R_CAR_TAKEN);
	       	unimpoundDbId[playerid] = 0;
	    }

	    case did_impound_get:
	    {
	        if(!response)
	        {
	            InteractiveNPC::Response_Pulaski(playerid, InteractiveNPC::playernpcid[playerid], INPC_PULASKI_R_NOT_ANYMORE);
	            return 1;
	        }

	        new mql_query[128];
			mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM char_vehicles WHERE Owner = '%e' OR SecondOwner = '%e'", ReturnName(playerid), ReturnName(playerid));

			new
			    Cache:query = mysql_query(MYSQL, mql_query),

			    SPZ[30],
			    Model,

				Impounded,
				Impounded_By[25],
				Impounded_Date,
				Impounded_Unix,
				Impounded_Fine,
				Impounded_Reason[256],

				takeit_date[ 64 ],

				finalString[ 2048 ],

				x = 0
			;

			for(new i; i < cache_num_rows(); i++) {
			    if(i == cache_num_rows()) break;

			    cache_get_value_name_int(i, "Impounded", Impounded);

			    if(Impounded != 1) continue;
			    x++;
				if(x-1 != listitem) continue;

				x = -256;

				cache_get_value_name_int(i, "id", unimpoundDbId[playerid]);
		     	cache_get_value_name(i, "SPZ", SPZ);
		     	cache_get_value_name_int(i, "Model", Model);

		     	cache_get_value_name(i, "Impounded_By", Impounded_By);
		     	cache_get_value_name_int(i, "Impounded_Date", Impounded_Date);
		     	cache_get_value_name_int(i, "Impounded_Unix", Impounded_Unix);
		     	cache_get_value_name_int(i, "Impounded_Fine", Impounded_Fine);
		     	cache_get_value_name(i, "Impounded_Reason", Impounded_Reason);

		     	if(Impounded_Unix > gettime()+59 && Impounded_Unix < gettime()+3601)
		     		format(takeit_date, sizeof takeit_date, "O %d minút", floatround((Impounded_Unix-gettime()) % 60, floatround_floor)); // je to vacsia a je to viac min o minutu, ale mensia ako hodina
				else if(Impounded_Unix > gettime()+3600)
				    format(takeit_date, sizeof takeit_date, "O %d hodín", floatround( ((Impounded_Unix-gettime()) / 3600), floatround_floor)); // je to vacsia ako hodina
                else if(Impounded_Unix > gettime() && Impounded_Date < gettime()+60)
				    format(takeit_date, sizeof takeit_date, "O %d sekúnd", Impounded_Unix-gettime()); // je to mensie ako minuta
				else if(Impounded_Unix < gettime())
				    format(takeit_date, sizeof takeit_date, "Pripravené ...", Impounded_Date-gettime()); // je to mozne vyzdvihnut
				else
				    format(takeit_date, sizeof takeit_date, "Neznáme ...", Impounded_Date-gettime()); // je to mozne vyzdvihnut

		     	format(
				 	finalString, sizeof finalString,
				 	"{FFFFFF}Model vozidla: {65aa53}%s\n{FFFFFF}SPZ vozidla: {65aa53}%s\n\n{FFFFFF}Dátum odtiahnutia: {65aa53}%s\n{FFFFFF}Monos vyzdvihnutia: {65aa53}%s\n\n{FFFFFF}Dôvod odtiahnutia: {65aa53}%s\n{FFFFFF}Nezaplatená pokuta: {65aa53}%d$\n{ffffff}Podpísaný: {65aa53}%s",
				 	VehicleNames[Model-400], SPZ, getdateunix(Impounded_Date), takeit_date, Impounded_Reason, Impounded_Fine, str_replace("_", " ", Impounded_By)
				);

				ShowPlayerDialog(playerid, did_impound_check, DIALOG_STYLE_MSGBOX, "VYZDVIHNÚ VOZIDLO", finalString, "VYZDVIHNÚ", "SPA");

		     	break;
			}

			cache_delete(query);

			if(x != -256)
			{
			    InteractiveNPC::Response_Pulaski(playerid, InteractiveNPC::playernpcid[playerid], INPC_PULASKI_R_NOT_IMPOUNDED);
	            return 1;
			}
	    }

	    case did_achievements:
	        return 1;

	    case did_bmap_maps:
	    {
			if(!response)
			    return 1;

            BMap::SwitchTo(playerid, listitem);
	    }

	    case did_emptygun_reload:
	    {
	        if(!response)
	        {
	            return 1;
	        }

	        if(strlen(inputtext) < 1 || !IsNumeric(inputtext))
	        {
	            SendError(playerid, "Zadaj prosím poèet nábojov!");
	            ShowPlayerDialog(playerid, did_emptygun_reload, DIALOG_STYLE_INPUT, "NABI PRÁZDNU ZBRAÒ", "{FFFFFF}Aby si z tejto zbrane mohol striela, musí ju nabi! Zadaj poèet nábojov, ko¾ko chce nabi.", "OK", "ZRUI");
				return 1;
	        }

	        new ammo = strval(inputtext);

	        if(ammo > GetPlayerInventoryItem(playerid, inv_naboje) || ammo < 1)
	        {
	            SendError(playerid, "To¾ko nábojov nemá!");
	            ShowPlayerDialog(playerid, did_emptygun_reload, DIALOG_STYLE_INPUT, "NABI PRÁZDNU ZBRAÒ", "{FFFFFF}Aby si z tejto zbrane mohol striela, musí ju nabi! Zadaj poèet nábojov, ko¾ko chce nabi.", "OK", "ZRUI");
				return 1;
	        }

	        new
				MaxAmmo = 500000;

	        new
				slot,
				gun
			;

			for(new x, y = 0; x < 12; x++)
			{
			    if(playerEmptyGuns[playerid][x] < 1)
			        continue;

				if(emptyguntmp[playerid] != y)
				{
				    y++;
				    continue;
				}

				gun = playerEmptyGuns[playerid][x];
				slot = x;
				break;
			}

			new
			    wid,
			    ammox
			;

			GetPlayerWeaponData(playerid, slot, wid, ammox);

			if(wid > 0 && ammox > 0)
			{
			    SendError(playerid, "U má jednu zbraò podobného typu, zbav sa jej!");
	            ShowPlayerDialog(playerid, did_emptygun_reload, DIALOG_STYLE_INPUT, "NABI PRÁZDNU ZBRAÒ", "{FFFFFF}Aby si z tejto zbrane mohol striela, musí ju nabi! Zadaj poèet nábojov, ko¾ko chce nabi.", "OK", "ZRUI");
				return 1;
			}

			for( new i; i < sizeof maxWeaponAmmo; i++)
			{

			    if(maxWeaponAmmo[i][0] != gun)
			        continue;

				MaxAmmo = maxWeaponAmmo[i][1];

				break;
			}

			if(ammo > MaxAmmo)
			{
			    SendError(playerid, "To¾ko nábojov nemôe nabi!");
	            ShowPlayerDialog(playerid, did_emptygun_reload, DIALOG_STYLE_INPUT, "NABI PRÁZDNU ZBRAÒ", "{FFFFFF}Aby si z tejto zbrane mohol striela, musí ju nabi! Zadaj poèet nábojov, ko¾ko chce nabi.", "OK", "ZRUI");
				return 1;
			}

			SetPlayerInventoryItem(playerid, inv_naboje, GetPlayerInventoryItem(playerid, inv_naboje)-ammo);
			Weapons::GivePlayerNewWeapon(playerid, playerEmptyGuns[playerid][slot], ammo, !!playerEmptyGuns_W[playerid][slot], !!playerEmptyGuns_P[playerid][slot], playerEmptyGuns_O[playerid][slot], false, playerEmptyGuns_S[playerid][slot]);
			FormatWeaponLog(playerid, "[give] Nabitie prazdnej zbrane %s %d nabojmi.", GetWeaponNameEx(gun), ammo);

			playerEmptyGuns[playerid][slot] = 0;

			SendSuccess(playerid, "Zbraò nabitá!");
	    }

	    case did_emptygun_menu:
	    {
	        if(!response)
	            return 1;

            if(listitem == 0)
                ShowPlayerDialog(playerid, did_emptygun_reload, DIALOG_STYLE_INPUT, "NABI PRÁZDNU ZBRAÒ", "{FFFFFF}Aby si z tejto zbrane mohol striela, musí ju nabi! Zadaj poèet nábojov, ko¾ko chce nabi.", "OK", "ZRUI");
			else if(listitem == 1)
			{

			    new
					slot,
					gun
				;

				for(new x, y = 0; x < 12; x++)
				{
				    if(playerEmptyGuns[playerid][x] < 1)
				        continue;

					if(emptyguntmp[playerid] != y)
					{
					    y++;
					    continue;
					}

					gun = playerEmptyGuns[playerid][x];
					slot = x;
					break;
				}
				
				if(gun < 1) return 1;

			    new
			        Float:X, Float:Y, Float:Z,
			        Float:Angle,

			        date[32],
					ex_date[3],
					ex_time[3],

					dropfact
				;

				if(IsPlayerWorking(playerid))
			    	dropfact = GetPlayerFaction(playerid);

				GetPlayerPos(playerid, X, Y, Z);
				GetPlayerFacingAngle(playerid, Angle);

				getdate(ex_date[0], ex_date[1], ex_date[2]);
				gettime(ex_time[0], ex_time[1], ex_time[2]);
				format(date, 32, "%d/%d/%d %d:%d:%d", ex_date[2], ex_date[1], ex_date[0], ex_time[0], ex_time[1], ex_time[2]);

			    CreateDynamicDrop(
					1, gun, 0,
					X, Y, Z, Angle, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid),
					ReturnName(playerid), date, dropfact, "Prázdná zbraò", 1,
					
					.w_serialnum = playerEmptyGuns_S[playerid][slot],
					.w_origin = playerEmptyGuns_O[playerid][slot],
					.w_iswork = !!playerEmptyGuns_W[playerid][slot],
					.w_ispermit = !!playerEmptyGuns_P[playerid][slot]
				);
				
			    FormatLog(log_type_player, "%s(%s) polozil prazdnu zbran ID %d!", ReturnName(playerid), ReturnIP(playerid), gun);

			    playerEmptyGuns[playerid][slot] = 0;

			    SendSuccess(playerid, "Zbraò poloená!");
			}
		}

	    case did_emptygun:
	    {
	        if(!response)
	            return 1;

            emptyguntmp[playerid] = listitem;

            ShowPlayerDialog(playerid, did_emptygun_menu, DIALOG_STYLE_LIST, "VÝBER AKCIE", "Nabi zbraò\nPoloi zbraò", "VYBRA", "ZRUI");

		}

	    case did_transfer_house:
	    {
	        if(!response)
			{
			    SendError(prepis_ID[playerid], "Ponuka na prepis odmietnutá!");
			    SendError(playerid, "Ponuka na prepis odmietnutá!");

				prepis_ID[playerid] = 0;
				prepistmpvar[playerid] = 0;
			}
			else
			{
			    new
				    string[128];

			    FormatLog(log_type_admin, "%s(%s) prepisal majitela domu (adresa: %s (%d) - %s) na %s", ReturnName(prepis_ID[playerid]), ReturnIP(prepis_ID[playerid]), houseEnum[prepistmpvar[playerid]][ho_Street], houseEnum[prepistmpvar[playerid]][ho_Number], houseEnum[prepistmpvar[playerid]][ho_City], ReturnName(playerid));

				format(string, 128, "> Prepísal si dom na %s! (adresa: %s (%d) - %s)", ReturnName(playerid), houseEnum[prepistmpvar[playerid]][ho_Street], houseEnum[prepistmpvar[playerid]][ho_Number], houseEnum[prepistmpvar[playerid]][ho_City]);
				SCFM(prepis_ID[playerid], COLOR_GREY, string);

				format(string, 128, "> %s na teba prepísal dom! (adresa: %s (%d) - %s)", ReturnName(prepis_ID[playerid]), houseEnum[prepistmpvar[playerid]][ho_Street], houseEnum[prepistmpvar[playerid]][ho_Number], houseEnum[prepistmpvar[playerid]][ho_City]);
				SCFM(playerid, COLOR_GREY, string);

				format(houseEnum[prepistmpvar[playerid]][ho_Owner], 30, ReturnName(playerid));
				format(houseEnum[prepistmpvar[playerid]][ho_SecOwner], 30, "");

				ReloadHouseLabel(prepistmpvar[playerid]);

				prepis_ID[playerid] = 0;
				prepistmpvar[playerid] = 0;
			}
	    }

	    case did_transfer_garage:
	    {
	        if(!response)
			{
			    SendError(prepis_ID[playerid], "Ponuka na prepis odmietnutá!");
			    SendError(playerid, "Ponuka na prepis odmietnutá!");

				prepis_ID[playerid] = 0;
				prepistmpvar[playerid] = 0;
			}
			else
			{
			    new
				    string[128];

			    FormatLog(log_type_admin, "%s(%s) prepisal majitela gará (adresa: %s (%d) - %s) na %s", ReturnName(prepis_ID[playerid]), ReturnIP(prepis_ID[playerid]), garageEnum[prepistmpvar[playerid]][ga_Street], garageEnum[prepistmpvar[playerid]][ga_Number], garageEnum[prepistmpvar[playerid]][ga_City], ReturnName(playerid));

				format(string, 128, "> Prepísal si gará na %s! (adresa: %s (%d) - %s)", ReturnName(playerid), garageEnum[prepistmpvar[playerid]][ga_Street], garageEnum[prepistmpvar[playerid]][ga_Number], garageEnum[prepistmpvar[playerid]][ga_City]);
				SCFM(prepis_ID[playerid], COLOR_GREY, string);

				format(string, 128, "> %s na teba prepísal gará! (adresa: %s (%d) - %s)", ReturnName(prepis_ID[playerid]), garageEnum[prepistmpvar[playerid]][ga_Street], garageEnum[prepistmpvar[playerid]][ga_Number], garageEnum[prepistmpvar[playerid]][ga_City]);
				SCFM(playerid, COLOR_GREY, string);

				format(garageEnum[prepistmpvar[playerid]][ga_Owner], 30, ReturnName(playerid));
				format(garageEnum[prepistmpvar[playerid]][ga_SecOwner], 30, "");

				ReloadGarageLabel(prepistmpvar[playerid]);

				prepis_ID[playerid] = 0;
				prepistmpvar[playerid] = 0;
			}
	    }

	    case did_transfer_business:
	    {
	        if(!response)
			{
			    SendError(prepis_ID[playerid], "Ponuka na prepis odmietnutá!");
			    SendError(playerid, "Ponuka na prepis odmietnutá!");

				prepis_ID[playerid] = 0;
				prepistmpvar[playerid] = 0;
			}
			else
			{
			    new
				    string[128];

			    FormatLog(log_type_admin, "%s(%s) prepisal majitela biznisu (%s) na %s", ReturnName(prepis_ID[playerid]), ReturnIP(prepis_ID[playerid]), businessEnum[prepistmpvar[playerid]][bz_Name], ReturnName(playerid));

				format(string, 128, "> Prepísal si biznis na %s! (%s)", ReturnName(playerid), businessEnum[prepistmpvar[playerid]][bz_Name]);
				SCFM(prepis_ID[playerid], COLOR_GREY, string);

				format(string, 128, "> %s na teba prepísal biznis! (%s)", ReturnName(prepis_ID[playerid]), businessEnum[prepistmpvar[playerid]][bz_Name]);
				SCFM(playerid, COLOR_GREY, string);

				format(businessEnum[prepistmpvar[playerid]][bz_Owner], 30, ReturnName(playerid));
				format(businessEnum[prepistmpvar[playerid]][bz_SecOwner], 30, "");

				prepis_ID[playerid] = 0;
				prepistmpvar[playerid] = 0;
			}
	    }

	    case did_prepravca_info:
	    {
			return Trucking::ShowWorkOffering(playerid, GetPlayerFactionRank(playerid));
	    }

	    case did_preprevca_offer_detail:
	    {
	        if(!response)
	            return Trucking::ShowWorkOffering(playerid, GetPlayerFactionRank(playerid));

			Trucking::StartWork(playerid);
	    }

	    case did_prepravca_offer:
	    {
	        if(!response)
	            return 1;

			switch(listitem)
			{
			    case 0:
			    {
			        // info
			        ShowPlayerDialog(
						playerid, did_prepravca_info, DIALOG_STYLE_MSGBOX,
						"INFORMÁCIE O ZAKÁZKACH",
						"Za kadú úspene dokonèenú zakázku postúpi o jeden level. Zaèiatoèná výplata je 200$, s kadým ïalím levelom sa ti pridá 24$,\navak maximálna výplata je 1700$ za hodinu, take od levelu 63 je výplata kontantná.\nAk zakázku nedokonèí (odpojí sa, zruí ju), bude ti jeden level odobraný!",
						"OK", "OK"
					);
			    }

			    default:
			    {
			        // klikol na vyber jobu

			        if(listitem >= TRANSPORT_TYPE_FUEL)
			        {
			            if(Trucking::TransportTypeData[listitem-1][0] > GetPlayerFactionRank(playerid))
			            {
						    SendError(playerid, "Na túto zakázku nemá dostatoèný level!");
						    Trucking::ShowWorkOffering(playerid, GetPlayerFactionRank(playerid));
						    return 1;
						}
			        }
			        else
			        {
			            if(Trucking::TransportTypeData[listitem][0] > GetPlayerFactionRank(playerid))
						{
						    SendError(playerid, "Na túto zakázku nemá dostatoèný level!");
						    Trucking::ShowWorkOffering(playerid, GetPlayerFactionRank(playerid));
						    return 1;
						}
			        }

					Trucking::ShowWorkOfferDetail(playerid, listitem >= TRANSPORT_TYPE_FUEL ? (listitem - 1) : listitem);

			    }
			}
	    }

	    case did_phonebooth:
        {

            if(!response)
                return 1;

            format(phoneboinput[playerid], 166, inputtext);

            CallRemoteFunction("PhoneBooth_OnPlayerDial", "i", playerid);

            return 1;
        }


	    case did_trucker_buyfuel_c:
	    {
	        if(!response)
	            return ShowPlayerDialog(
						playerid, did_trucker_buyfuel, DIALOG_STYLE_INPUT, "SKLAD  KÚPI",
						"{FFFFFF}> Zadaj poèet litrov od 100-4000, ko¾ko chce naloi!",
						"OK","SPA"
					);

            new
			    Float:f_cena,
			    cena,

			    pocet = GetPVarInt(playerid,"pocetlitrs")
			;

	        f_cena = ( float(pocet) * REFILL_FUEL_PRICE );
			cena = floatround(f_cena, floatround_ceil);

			if(cena < 1)
			    cena = 1;

            if(ex_GetPlayerMoney(playerid) < cena)
			    return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerDialog(
						playerid, did_trucker_buyfuel, DIALOG_STYLE_INPUT, "SKLAD  KÚPI",
						"{FFFFFF}> Zadaj poèet litrov od 100-4000, ko¾ko chce naloi!",
						"OK","SPA"
					);

			ex_GivePlayerMoney(playerid, -cena);
			money_spent[playerid] += floatround(cena,floatround_round);

			new
			    Float:p[4];

			GetVehiclePos(GetPlayerVehicleID(playerid),p[0],p[1],p[2]);
			GetVehicleZAngle(GetPlayerVehicleID(playerid),p[3]);

			p[0] -= (4.0 * floatsin(-p[3], degrees));
			p[1] -= (4.0 * floatcos(-p[3], degrees));

			new vha = CreateVehicle(584,p[0],p[1],p[2]+3.0,0.0, 1, 1, -1, 0);
			format(vEnum[vha][v_SPZ], 24, "TAHAC");

			SetTimerEx("atve", 800, false, "ii", GetPlayerVehicleID(playerid),vha);
			SetTimerEx("fpaliv", 30000, false, "ii", playerid,GetPlayerVehicleID(playerid));

			format(cistvod[vha], 26, "%s",ReturnName(playerid));

			palivocisterna[GetPlayerVehicleID(playerid)] += pocet;

			TogglePlayerControllable(playerid, 0);
			SendSuccess(playerid, "Poèkaj 30 sekúnd kým sa ti naloí palivo!");
	    }

	    case did_trucker_buyfuel:
	    {
	        if(!response)
	            return 1;

			if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 100 || strval(inputtext) > 4000)
			    return SendError(playerid, "Zlý poèet litrov!");

			if(strval(inputtext)+palivocisterna[GetPlayerVehicleID(playerid)] > 4000)
			    return SendError(playerid, "Maximálne môe ma 4000 litrov!");

            new
			    Float:f_cena,
			    cena,

			    string[512]
			;

	        f_cena = ( float(strval(inputtext)) * REFILL_FUEL_PRICE );
			cena = floatround(f_cena, floatround_ceil);

			if(cena < 1)
			    cena = 1;

			format(string, sizeof string, "{ffffff}> Skutoène chce kúpi %dL paliva za %d$?!", strval(inputtext), cena);

			SetPVarInt(playerid, "pocetlitrs", strval(inputtext));

			ShowPlayerDialog(playerid, did_trucker_buyfuel_c, DIALOG_STYLE_MSGBOX, "SKLAD  PALIVO", string, "ANO","NIE");
	    }

	    case did_trucker_buy:
	    {
	        if(!response)
	            return 1;

			if(ex_GetPlayerMoney(playerid) < A_cargoPrice[listitem+1])
			    return SendError(playerid, "Nemas dost penazi!");

			SetPVarInt(playerid,"haskrabica",1);
			SetPVarInt(playerid,"krtyp",listitem+1);

			GivePlayerMoney(playerid, -A_cargoPrice[listitem+1]);
			SCFM(playerid, COLOR_ADMINCMD, "[tovar]; Kúpil si krabicu typu %s za %d$! Manipuluje s òou príkazom /krabica", A_cargoTypes[listitem+1], A_cargoPrice[listitem+1]);
	    }

	    case did_vattach_menuex:
	    {
			if(!response)
			    return showallvattachmenuedit(playerid);

			if(listitem == 0)
			{
			    new xslot = GetPVarInt(playerid, "pvadiel");
			    //xslot = SearchForSlot(pvehicleid[playerid], xslot);
			    DeletePVar(playerid, "pvadiel");
			    SetPVarInt(playerid, "vattacheditslot", xslot+1);

				SCFM(playerid, COLOR_ADMINCMD, "[vattach]; Upravuje objekt na auto! Môe ho upravova príkazmi /vax, /vay, /vaz, /vrx, /vry, /vrz, /vcolor, /vtext! Pre skonèenie editácie daj /vexit.");
			}
			else if(listitem == 1)
			{
			    new xslot = GetPVarInt(playerid, "pvadiel");
			    //xslot = SearchForSlot(pvehicleid[playerid], xslot);
			    //DeletePVar(playerid, "pvadiel");

			    new
			        query[144]
				;

				mysql_format(MYSQL, query, sizeof query, "DELETE FROM vehicle_objects WHERE SPZ ='%e' AND Slot='%d'", vEnum[pvehicleid[playerid]][v_SPZ],xslot);
				mysql_tquery(MYSQL, query);

				DestroyDynamicObject(vattachobj[pvehicleid[playerid]][xslot]);
				vattachobj[pvehicleid[playerid]][xslot] = 0;

				SendSuccess(playerid, "Objekt zmazany!");
			}
	    }

	    case did_vattach_menu:
	    {
	        if(!response)
	            return 1;

            new
				query[ 144 ],
				Cache:cache,

				xslot
			;

			mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_objects WHERE SPZ='%e' ORDER BY Slot",vEnum[pvehicleid[playerid]][v_SPZ]);
			cache = mysql_query(MYSQL, query);
		    cache_get_value_name_int(listitem, "Slot", xslot);
			cache_delete(cache);

			SetPVarInt(playerid, "pvadiel", xslot);

			ShowPlayerDialog(playerid, did_vattach_menuex, DIALOG_STYLE_LIST, "TUNING  AKCIA", "Upravi\nZmaza tuning", "VYBRA", "ZRUI");
	    }

	    case did_vattach_kata:
	    {
	        return 1;
	    }

	    case did_vattach:
	    {
	        if(!response)
	            return 1;

            new
				query[ 256 ],
				Cache:cache,

				model,
				xslot = GetVehicleFreeAttachSlot(pvehicleid[playerid]),
				name[ 48 ]
			;

			mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_attachable");
			cache = mysql_query(MYSQL, query);
		    cache_get_value_name_int(listitem, "Model", model);
		    cache_get_value_name(listitem, "Name", name);
			cache_delete(cache);

			mysql_format(MYSQL, query, sizeof query, "INSERT INTO vehicle_objects (SPZ, Slot, Name, Model) VALUES ('%e', '%d', '%e', '%d')", vEnum[pvehicleid[playerid]][v_SPZ], xslot, name, model);
			mysql_tquery(MYSQL, query);

			vattachobj[pvehicleid[playerid]][xslot] = CreateDynamicObject(model, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1,-1, 300.0, 300.0, -1);
			AttachDynamicObjectToVehicle(vattachobj[pvehicleid[playerid]][xslot], pvehicleid[playerid], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

			SetPVarInt(playerid, "vattacheditslot", xslot+1);

			new zzz=IsPlayerInDynamicMenuEx(playerid,menut_autodielna);

			if(zzz != -1)
			{
				new str[1024],id=zzz;
				A_cargoStorage[zzz][1]--;
		    	format(str, 1024, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", A_cargoStorage[zzz][1]);
				UpdateDynamic3DTextLabelText(menuEnum[id][menu_LABEL], 0xffffffff, str);
				mysql_format(MYSQL, str, sizeof str, "UPDATE gm_menu SET storage_CAR_PARTS = '%d' WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
				    A_cargoStorage[zzz][1],menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
				    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);
				mysql_tquery(MYSQL, str);
			}

			SCFM(playerid, COLOR_ADMINCMD, "[vattach]; Pridal si nový objekt na auto! Môe ho upravova príkazmi /vax, /vay, /vaz, /vrx, /vry, /vrz, /vcolor, /vtext! Pre skonèenie editácie daj /vexit.");
	    }

	    case did_vattach_adm_rem:
	    {
	        if(!response)
	            return 1;

            new
				query[ 64 ],
				Cache:cache,
				idx,
				name[48]
			;

			mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_attachable");
			cache = mysql_query(MYSQL, query);
		    cache_get_value_name_int(listitem, "ID", idx);
		    cache_get_value_name(listitem, "Name", name);
			cache_delete(cache);

			mysql_format(MYSQL, query, sizeof query, "DELETE FROM vehicle_attachable WHERE ID = '%d'", idx);
			mysql_tquery(MYSQL, query);

			SCFM(playerid, COLOR_ADMINCMD, "[vattach]; Zmazal si objekt! meno: %s, id: %d", name, idx);
	    }

	    case did_vattach_adm_add:
	    {
	        if(!response)
	            return 1;

			if(isnull(inputtext) || !IsNumeric(inputtext))
			    return SendError(playerid, "Zadal si zle ID objektu!"), ShowPlayerDialog(playerid, did_vattach_adm_add, DIALOG_STYLE_INPUT, "TUNING  PRIDA NOVÝ OBJEKT", "{FFFFFF}> Zadaj prosím ID objektu, ktoré chce prida!", "ÏALEJ", "SPA");

			SetPVarInt(playerid, "vattach_temp", strval(inputtext));
			ShowPlayerDialog(playerid, did_vattach_adm_add_name, DIALOG_STYLE_INPUT, "TUNING  PRIDA NOVÝ OBJEKT", "{FFFFFF}> Zadaj prosím meno objektu, ktoré chce prida!", "PRIDA", "SPA");
	    }

	    case did_vattach_adm_add_name:
	    {
	        if(!response)
	            return ShowPlayerDialog(playerid, did_vattach_adm_add, DIALOG_STYLE_INPUT, "TUNING  PRIDA NOVÝ OBJEKT", "{FFFFFF}> Zadaj prosím ID objektu, ktoré chce prida!", "ÏALEJ", "SPA");

			if(isnull(inputtext))
			    return SendError(playerid, "Zadal si zle meno objektu!"), ShowPlayerDialog(playerid, did_vattach_adm_add_name, DIALOG_STYLE_INPUT, "TUNING  PRIDA NOVÝ OBJEKT", "{FFFFFF}> Zadaj prosím meno objektu, ktoré chce prida!", "PRIDA", "SPA");

			new
			    query[144];

			mysql_format(MYSQL, query, sizeof query, "INSERT INTO vehicle_attachable (Name, Model) VALUES ('%e', '%d')", inputtext, GetPVarInt(playerid, "vattach_temp"));
			mysql_tquery(MYSQL, query);

			SCFM(playerid, COLOR_ADMINCMD, "[vattach]; Pridal si nový objekt -> meno: %s, model: %d. Poui /vattach pre jeho pridanie na vozidlo!", inputtext, GetPVarInt(playerid, "vattach_temp"));
	    }

	    case did_map_newmap:
	    {
	        if(!response)
	            return 1;

			if(isnull(inputtext) || strlen(inputtext) <= 3 || strlen(inputtext) >= 64)
				return ShowPlayerDialog(playerid, did_map_newmap, DIALOG_STYLE_INPUT, "BMAP  NOVÁ MAPA", "{FFFFFF}> Zadaj prosím meno mapy, ktorú chce vytvori!\n\tZadaj meno mapy dlhie ako tri a kratie ako 64 znakov!", "VYTVORI", "ZRUI");

			new
			    query[ 192 ],
			    id,
			    Cache:cache
			;

			mysql_format(MYSQL, query, sizeof query, "SELECT id FROM maps_names WHERE name = '%e'", inputtext);
			cache = mysql_query(MYSQL, query);

			if(cache_num_rows() != 0)
			{
			    cache_delete(cache);
			    return ShowPlayerDialog(playerid, did_map_newmap, DIALOG_STYLE_INPUT, "BMAP  NOVÁ MAPA", "{FFFFFF}> Zadaj prosím meno mapy, ktorú chce vytvori!\n\tMapa s týmto menom u existuje!", "VYTVORI", "ZRUI");
			}

			cache_delete(cache);

			mysql_format(MYSQL, query, sizeof query, "INSERT INTO maps_names (name, createdby, date) VALUES ('%e','%e',NOW());", inputtext, ReturnName(playerid));
			mysql_tquery(MYSQL, query);

			///////////
			mysql_format(MYSQL, query, sizeof query, "SELECT id FROM maps_names WHERE name = '%e'", inputtext);
			cache = mysql_query(MYSQL, query);

			cache_get_value_name_int(0, "id", id);

			cache_delete(cache);
			///////////

			FormatLog(log_type_map, "%s(%s-%s) vytvoril mapu %s (id: %d)!", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), inputtext, id);
            FormatWarnEx(playerid, 5, "AdmCmd:", COLOR_ADMINCMD, "%s vytvoril novú mapu s názvom %s (id: %d).", GetPlayerNameEx(playerid, USE_PUREIDNAME), inputtext, id);

            SCFM(playerid, COLOR_MAP_SUCCESS, "[bmap]; Vytvoril si novú mapu s menom %s! Bola ti automaticky oznaèená ako aktívna.", inputtext);

            BMap::SwitchTo(playerid, id);
	    }

	    case did_map_deletemap:
	    {
	        if(!response)
	            return 1;

			bmap_tempMap[playerid] = listitem;

			ShowPlayerDialog(
				playerid, did_map_deletemap_c, DIALOG_STYLE_MSGBOX,
				"BMAP  ZMAZA MAPU",
				"{FFFFFF}> Si si istý, e chce túto mapu zmaza?!",
				"ÁNO", "NIE"
			);
	    }

	    case did_map_deletemap_c:
	    {
	        if(!response)
				return BMap::ShowAllMaps(playerid, did_map_deletemap, "BMAP  ZMAZA MAPU", "ZMAZA");

            new
				query[ 90 ],
				Cache:cache,

				mapname[ 64 ],
				id = -1
			;

			/////////////////////////////////////////////////////////////////////////////////
			mysql_format(MYSQL, query, sizeof query, "SELECT * FROM maps_names");
			cache = mysql_query(MYSQL, query);
		    cache_get_value_name_int(bmap_tempMap[playerid], "id", id);
		    cache_get_value_name(bmap_tempMap[playerid], "name", mapname);
			cache_delete(cache);
			/////////////////////////////////////////////////////////////////////////////////

			mysql_format(MYSQL, query, sizeof query, "DELETE FROM maps_names WHERE id='%d'",id);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, sizeof query, "DELETE FROM maps_objects WHERE mapid='%d'", id);
			mysql_query(MYSQL, query, false);

			FormatLog(log_type_map, "%s(%s-%s) zmazal mapu %s (id: %d)!", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), mapname, id);
            FormatWarnEx(playerid, 5, "AdmCmd:", COLOR_ADMINCMD, "%s zmazal mapu s názvom %s (id: %d).", GetPlayerNameEx(playerid, USE_PUREIDNAME), mapname, id);

            SCFM(playerid, COLOR_MAP_SUCCESS, "[bmap]; Zmazal si mapu s menom %s! Ak si ju mal oznaèenú, bol ti vypnutý mapping mód.", mapname);

			if(BMap::GetMap(playerid) == bmap_tempMap[playerid])
            	BMap::SwitchTo(playerid, 0);

	    }

	    case did_selldrugs:
	    {
	        if(!response)
	            return ShowPlayerMenu(playerid, menut_selldrugs);

			if(strval(inputtext) > drug_getPlayerDrug(playerid, tdrugid{playerid}) || strval(inputtext) < 50)
			    return SendError(playerid, "Nemá dostatoèný poèet dávok tejto drogy!"),
			            ShowPlayerDialog(playerid, did_selldrugs, DIALOG_STYLE_INPUT, "PREDAJ DROG", "{ffffff}> Zadaj prosím poèet dávok, ktorý chce preda! (musí by väèí alebo rovný minimálnemu mnostvu)", "PREDA", "ZRUI");

			new cena;

			switch(tdrugid{playerid})
			{
			    case 0: cena = 20;
			    case 1: cena = 60;
			    case 2: cena = 210;
			}

			drug_givePlayerDrug(playerid, tdrugid{playerid}, -strval(inputtext));
			ex_GivePlayerMoney(playerid, strval(inputtext)*cena);
			money_work[playerid] += floatround(strval(inputtext)*cena,floatround_round);

			ShowPlayerMenu(playerid, menut_selldrugs);

			SCFM(playerid, COLOR_GREY, "> Predal si %d %s drogy %s za %d$!", strval(inputtext), drug_getUnderName(tdrugid{playerid}), drug_getName(tdrugid{playerid}), strval(inputtext)*cena);
			FormatLog(log_type_player, "%s(%s) predal %d %s drogy %s za %d$!", ReturnName(playerid), ReturnIP(playerid), strval(inputtext), drug_getUnderName(tdrugid{playerid}), drug_getName(tdrugid{playerid}), strval(inputtext)*cena);

	    }

	    case menut_selldrugs:
	    {
	        if(!response)
	            return 1;

			tdrugid{playerid} = listitem;

			if(listitem == 0 && drug_getPlayerDrug(playerid, listitem) < 50)
			    return SendError(playerid, "Nemá dostatoèný poèet dávok tejto drogy!"), ShowPlayerMenu(playerid, menut_selldrugs);
			else if(listitem == 1 && drug_getPlayerDrug(playerid, listitem) < 70)
			    return SendError(playerid, "Nemá dostatoèný poèet dávok tejto drogy!"), ShowPlayerMenu(playerid, menut_selldrugs);
			else if(listitem == 2 && drug_getPlayerDrug(playerid, listitem) < 100)
			    return SendError(playerid, "Nemá dostatoèný poèet dávok tejto drogy!"), ShowPlayerMenu(playerid, menut_selldrugs);

			ShowPlayerDialog(playerid, did_selldrugs, DIALOG_STYLE_INPUT, "PREDAJ DROG", "{ffffff}> Zadaj prosím poèet dávok, ktorý chce preda! (musí by väèí alebo rovný minimálnemu mnostvu)", "PREDA", "ZRUI");

	    }

	    case did_goldmenu_1:
	    {
	        if(!response)
	            return ShowPlayerGoldMenu(playerid);

			if(isnull(inputtext) || strlen(inputtext) < 2 || strlen(inputtext) > 9)
			{
			    SendError(playerid, "Táto SPZ nie je platná!");
			    return ShowPlayerGoldMenu_1(playerid);
			}

			new
			    Query[128],
			    Cache:cache,
			    isfound = 0
			;

			mysql_format(MYSQL, Query, sizeof Query, "SELECT * FROM char_vehicles WHERE SPZ = '%e'", inputtext);
			cache = mysql_query(MYSQL, Query);
			isfound += cache_num_rows();
			cache_delete(cache);
			mysql_format(MYSQL, Query, sizeof Query, "SELECT * FROM faction_vehicles WHERE SPZ = '%e'", inputtext);
			cache = mysql_query(MYSQL, Query);
			isfound += cache_num_rows();
			cache_delete(cache);

			if(isfound > 0)
			{
			    SendError(playerid, "Táto SPZ nie je volná!");
			    return ShowPlayerGoldMenu_1(playerid);
			}

			new
			    finspz[25];

			format(finspz, sizeof finspz, "%s", inputtext);

			for(new x; x < sizeof(finspz); x ++)
			{
			    if(finspz[x] < 'A' && finspz[x] > 'Z' && finspz[x] < '0' && finspz[x] > '9' && finspz[x] != ' ' && finspz[x] != '_' && finspz[x] != '$')
			    {
			        SendError(playerid, "Táto SPZ nie je platná!");
			    	return ShowPlayerGoldMenu_1(playerid);
			    }
			}

			mysql_format(MYSQL, Query, sizeof Query, "UPDATE faction_vehicles SET SPZ = '%e' WHERE SPZ = '%e'", finspz, vEnum[GetPlayerVehicleID(playerid)][v_SPZ]);
			mysql_query(MYSQL, Query, false);

			mysql_format(MYSQL, Query, sizeof Query, "UPDATE char_vehicles SET SPZ = '%e' WHERE SPZ = '%e'", finspz, vEnum[GetPlayerVehicleID(playerid)][v_SPZ]);
			mysql_query(MYSQL, Query, false);

			SetVehicleNumberPlate(GetPlayerVehicleID(playerid), finspz);
			format(vEnum[GetPlayerVehicleID(playerid)][v_SPZ], 24, finspz);

			foreach( new i : Player )
			{
			    if(!IsPlayerInAnyVehicle(i))
			        continue;

				if(GetPlayerVehicleID(i) != GetPlayerVehicleID(playerid))
				    continue;

				RemovePlayerFromVehicle(i);
			}

			new
			    Float:X, Float:Y, Float:Z;

			GetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
			SetTimerEx("PushVehicleBack", 1000, false, "ifffd", GetPlayerVehicleID(playerid), 1087.955, 1924.28, 10.81, 354);
    		SetTimerEx("PushVehicleBack", 3050, false, "ifffd", GetPlayerVehicleID(playerid), X, Y, Z, GetVehicleVirtualWorld(GetPlayerVehicleID(playerid)));


            FormatLog(log_type_buythings, "%s(%s-%s) si kúpil novú SPZ (%s) za 50 kreditov z KREDITMENU!", ReturnName(playerid), ReturnIP(playerid), ReturnMaster(playerid), finspz);

			new
			    S_string[128];

			format(
			    S_string,
			    sizeof S_string,
			    "Zmenil si si SPZ %s za 50 kreditov!",
			    finspz
			);

			SendSuccess(playerid, S_string);

			g_I_mince[playerid] -= 50;

			ShowPlayerGoldMenu(playerid);
	    }

	    case did_goldmenu_2:
	    {
	        if(!response)
	            return ShowPlayerGoldMenu(playerid);

			if(isnull(inputtext) || !IsNumeric(inputtext) || strlen(inputtext) < 5 || strlen(inputtext) > 9)
			{
			    SendError(playerid, "Toto èíslo nie je platné!");
			    return ShowPlayerGoldMenu_2(playerid);
			}

			new
			    cislo = strval(inputtext),
			    Query[128],
			    Cache:cache
			;

			mysql_format(MYSQL, Query, sizeof Query, "SELECT * FROM char_inventory WHERE SimKarta = '%d'", cislo);
			cache = mysql_query(MYSQL, Query);

			new pocet = cache_num_rows();

			cache_delete(cache);

			if(pocet > 0)
			{
			    SendError(playerid, "Toto èíslo u niekto má!");
			    return ShowPlayerGoldMenu_2(playerid);
			}

			SetPlayerInventoryItem(playerid, inv_simcard, cislo);

			mysql_format(MYSQL, Query, 128, "UPDATE char_inventory SET SimKarta = '%d' WHERE Username = '%e'",
			    cislo, ReturnName(playerid));

			mysql_query(MYSQL, Query, false);

            FormatLog(log_type_buythings, "%s(%s-%s) si kúpil nové tel. è. (%d) za 200 kreditov z KREDITMENU!", ReturnName(playerid), ReturnIP(playerid), ReturnMaster(playerid), cislo);

			new
			    S_string[128];

			format(
			    S_string,
			    sizeof S_string,
			    "Zmenil si si telefónne èíslo na %d za 200 kreditov!",
			    cislo
			);

			SendSuccess(playerid, S_string);

			g_I_mince[playerid] -= 200;

			ShowPlayerGoldMenu(playerid);
	    }

	    case did_goldmenu_4:
	    {
	        if(!response)
	            return ShowPlayerGoldMenu(playerid);

            FormatLog(log_type_buythings, "%s(%s-%s) si vymenil %d kreditov za %d$ v KREDITMENU!", ReturnName(playerid), ReturnIP(playerid), ReturnMaster(playerid), g_I_mince[playerid], g_I_mince[playerid] * Economy::GetPrice(ECONOMY_LIST_GOLDS));

			new
			    S_string[128];

			format(
			    S_string,
			    sizeof S_string,
			    "Vymenil si %d kreditov za %d$!",
			    g_I_mince[playerid], g_I_mince[playerid] * Economy::GetPrice(ECONOMY_LIST_GOLDS)
			);

			SendSuccess(playerid, S_string);

			ex_GivePlayerMoney(playerid, g_I_mince[playerid]*Economy::GetPrice(ECONOMY_LIST_GOLDS));
			money_admin[playerid] += floatround(g_I_mince[playerid]*Economy::GetPrice(ECONOMY_LIST_GOLDS),floatround_round);
			g_I_mince[playerid] = 0;

			ShowPlayerGoldMenu(playerid);
	    }

	    case did_goldmenu_donor:
	    {
	        if(!response)
	            return ShowPlayerGoldMenu(playerid);

			if(!IsNumeric(inputtext) || strval(inputtext) < 1)
			    return SendError(playerid, "Zadaj prosím poèet dní!"), ShowPlayerGoldMenu_Lease(playerid);

			new
			    cena = 0 // per day
			;

			switch(GetPlayerDonatorLevel(playerid))
			{
			    case 1:
					cena = 50;

				case 2:
				    cena = 75;

				case 3:
				    cena = 100;
			}

			if(cena*strval(inputtext) > g_I_mince[playerid])
			{
			    return SendError(playerid, "Nemá dos kreditov!"), ShowPlayerGoldMenu_Lease(playerid);
			}

			g_I_donatorExpire[playerid] += (86400 * strval(inputtext));

			SCFM(playerid, COLOR_LIGHTGREEN, "> Donator predåený o %d dní, platí Ti do %s!", strval(inputtext), getdateunix(g_I_donatorExpire[playerid]));
	    }

	    case did_goldmenu:
	    {
	        if(!response)
	            return 1;

			switch(listitem)
			{

			    case 0:
			    {
			        if(GetPlayerDonatorLevel(playerid) < 1)
			            return SendError(playerid, "Nemá Donator Level!"), ShowPlayerGoldMenu(playerid);

			        return ShowPlayerGoldMenu_Lease(playerid);
			    }

			    case 1:
			    {
			        if(g_I_mince[playerid] < 150)
			            return SendError(playerid, "Nemá dos kreditov na kúpu rename ticketu!"), ShowPlayerGoldMenu(playerid);

                    g_I_mince[playerid] -= 150;
                    RenameTicket[playerid] ++;

                    FormatLog(log_type_buythings, "%s(%s-%s) si kúpil 1 rename ticket za 150 kreditov v KREDITMENU!", ReturnName(playerid), ReturnIP(playerid), ReturnMaster(playerid));

					SendSuccess(playerid, "Vymenil si 150 kreditov za 1 rename ticket!");

					ShowPlayerGoldMenu(playerid);
			    }

			    case 2:
			    {
			        if(g_I_mince[playerid] < 50)
			            return SendError(playerid, "Nemá dos kreditov na kúpu XP!"), ShowPlayerGoldMenu(playerid);

                    g_I_mince[playerid] -= 50;
                    g_I_XP[playerid] ++;

                    FormatLog(log_type_buythings, "%s(%s-%s) si kúpil 1XP za 50 kreditov v KREDITMENU!", ReturnName(playerid), ReturnIP(playerid), ReturnMaster(playerid));

					SendSuccess(playerid, "Vymenil si 50 kreditov za 1 XP!");

                    if(g_I_XP[playerid] > (6 + (2 * GetPlayerRoleplayLevel(playerid))))
					{
					    SCFM(playerid, 0xD0D0D0FF, "> Má dos XP bodov, aby si si mohol kúpi upgrade na roleplay level %d! Poui /levelup, bude a to stá %d XP.", GetPlayerRoleplayLevel(playerid) + 1, (6 + 2*GetPlayerRoleplayLevel(playerid)));
					}

					ShowPlayerGoldMenu(playerid);
			    }

			    case 3:
			    {

                    if(strcmp(vEnum[GetPlayerVehicleID(playerid)][v_Owner], ReturnName(playerid), false))
                        return SendError(playerid, "Toto vozidlo nevlastní!"), ShowPlayerGoldMenu(playerid);

			        if(g_I_mince[playerid] < 50)
			            return SendError(playerid, "Nemá dos kreditov na zmenu SPZ!"), ShowPlayerGoldMenu(playerid);

			        return ShowPlayerGoldMenu_1(playerid);
			    }

			    case 4:
			    {
			        if(g_I_mince[playerid] < 200)
			            return SendError(playerid, "Nemá dos kreditov na zmenu èísla!"), ShowPlayerGoldMenu(playerid);

			        return ShowPlayerGoldMenu_2(playerid);
			    }

			    case 5:
			    {
			        if(g_I_mince[playerid] < 1)
			            return SendError(playerid, "Nemá dos kreditov aby si ich mohol rozmeni!"), ShowPlayerGoldMenu(playerid);

			        return ShowPlayerGoldMenu_4(playerid);
			    }

			}
	    }

	    case did_tuning_main:
	    {
	        if(!response)
	        {
	            return SetCameraBehindPlayer(playerid);
	        }

	        if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:// Paintjobs
	        	    {
	                	ShowPlayerDialog(playerid, did_tuning_paintjobs, DIALOG_STYLE_LIST, "PAINTJOBS", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
					case 1: // Wheels
	        	    {
	     				ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
					case 2: // Hydraulics
	        	    {
	 					ShowPlayerDialog(playerid, did_tuning_hydraulics, DIALOG_STYLE_LIST, "HYDRAULIKA", "Hydaulics\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
					case 3: // Nitrous Oxide
	        	    {
						ShowPlayerDialog(playerid, did_tuning_nitro, DIALOG_STYLE_LIST, "NITRO",  "Nitro\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
					case 4: // Zmaza picovinu
	        	    {
					 	ShowPlayerDialog(playerid, did_tuning_remove, DIALOG_STYLE_LIST, "ZMAZAT TUNING", "Zmaza predný nárazník\nZmaza zadný nárazník\nZmaza spojler\nZmaza boèný prah\nZmaza prieduchy a odsávanie\nZmaza osvetlenie\nZmaza výfuky\nZmaza kolesá\nZmaza nitro\nZmaza hydrauliku\nZmazat strechu\n \nSpä", "VYBRA", "ZAVRIE");
	    				return 1;
	        	    }
				}
			}
		}
		case did_tuning_paintjobs:
		{
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
		    if(response)
		    {
				switch(listitem)// Checking which list item was selected
				{
	                case 0:// Paintjobs
	        	    {
	        	        if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 560 ||
					pmodelid[playerid] == 575 ||
					pmodelid[playerid] == 534 || // Broadway
					pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536 ||
					pmodelid[playerid] == 535 ||
					pmodelid[playerid] == 576 ||
					pmodelid[playerid] == 558)
			        {
						new carVar = pvehicleid[playerid];
						ChangeVehiclePaintjob(carVar,0);
						SendSuccess(playerid, "Paintjob pridaný!");
						ShowPlayerDialog(playerid, did_tuning_paintjobs, DIALOG_STYLE_LIST, "PAINTJOBS", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nSpä", "PRIDA", "ZAVRIE");
						PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
					}
						else
					{
					   SendError(playerid, "Na toto vozidlo nemôe prida paintjob!");
				       ShowPlayerDialog(playerid, did_tuning_paintjobs, DIALOG_STYLE_LIST, "PAINTJOBS", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
	        	    case 1: // Colors
	        	    {
	        	        if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 560 ||
					pmodelid[playerid] == 575 ||
					pmodelid[playerid] == 534 || // Broadway
					pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536 ||
					pmodelid[playerid] == 535 ||
					pmodelid[playerid] == 576 ||
					pmodelid[playerid] == 558)
				    {
		                new carVar = pvehicleid[playerid];
						ChangeVehiclePaintjob(carVar,1);
      					SendSuccess(playerid, "Komponent pridaný!");
						ShowPlayerDialog(playerid, did_tuning_paintjobs, DIALOG_STYLE_LIST, "PAINTJOBS", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nSpä", "PRIDA", "ZAVRIE");
						PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
					}
						else
					{
					    SendError(playerid, "Na toto vozidlo nejde paintjob!");
					    ShowPlayerDialog(playerid, did_tuning_paintjobs, DIALOG_STYLE_LIST, "PAINTJOBS", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
	        	    case 2: // Exhausts
	        	    {
	        	        if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 560 ||
					pmodelid[playerid] == 575 ||
					pmodelid[playerid] == 534 || // Broadway
					pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536 ||
					pmodelid[playerid] == 535 ||
					pmodelid[playerid] == 576 ||
					pmodelid[playerid] == 558)
				    {
		                new carVar = pvehicleid[playerid];
						ChangeVehiclePaintjob(carVar,2);
      					SendSuccess(playerid, "Komponent pridaný!");
						ShowPlayerDialog(playerid, did_tuning_paintjobs, DIALOG_STYLE_LIST, "PAINTJOBS", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nSpä", "PRIDA", "ZAVRIE");
						PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
					}
						else
					{
					    SendError(playerid, "Na toto vozidlo nejde paintjob!");
					    ShowPlayerDialog(playerid, did_tuning_paintjobs, DIALOG_STYLE_LIST, "PAINTJOBS", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 3: // Front Bumpers
	        	    {
	        	        if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 560 ||
					pmodelid[playerid] == 575 ||
					pmodelid[playerid] == 534 || // Broadway
					pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536 ||
					pmodelid[playerid] == 535 ||
					pmodelid[playerid] == 576 ||
					pmodelid[playerid] == 558)
				    {
		                new carVar = pvehicleid[playerid];
						ChangeVehiclePaintjob(carVar,3);
      					SendSuccess(playerid, "Komponent pridaný!");
						ShowPlayerDialog(playerid, did_tuning_paintjobs, DIALOG_STYLE_LIST, "PAINTJOBS", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nSpä", "PRIDA", "ZAVRIE");
						PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
					}
						else
					{
		       			SendError(playerid, "Na toto vozidlo nejde paintjob!");
					    ShowPlayerDialog(playerid, did_tuning_paintjobs, DIALOG_STYLE_LIST, "PAINTJOBS", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 4: // Rear Bumpers
	        	    {
	        	        if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 560 ||
					pmodelid[playerid] == 575 ||
					pmodelid[playerid] == 534 || // Broadway
					pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536 ||
					pmodelid[playerid] == 535 ||
					pmodelid[playerid] == 576 ||
					pmodelid[playerid] == 558)
				    {
		                new carVar = pvehicleid[playerid];
						ChangeVehiclePaintjob(carVar,4);
      					SendSuccess(playerid, "Komponent pridaný!");
						ShowPlayerDialog(playerid, did_tuning_paintjobs, DIALOG_STYLE_LIST, "PAINTJOBS", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nSpä", "PRIDA", "ZAVRIE");
						PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
					}
						else
					{
		            	SendError(playerid, "Na toto vozidlo nejde paintjob!");
					    ShowPlayerDialog(playerid, did_tuning_paintjobs, DIALOG_STYLE_LIST, "PAINTJOBS", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 5:
	        	    {
	        	        ShowPlayerDialog(playerid, did_tuning_paintjobs, DIALOG_STYLE_LIST, "PAINTJOBS", "Paint Job 1\nPaint Job 2\nPaint Job 3\nPaint Job 4\nPaint Job 5\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
					case 6:
	        	    {
            	 		ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
				}
			}
		}
		case did_tuning_remove:
		{
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
		    if(response)
		    {

		        new tempCar[MAX_PLAYERS];
				tempCar[playerid] = pvehicleid[playerid];

		        switch(listitem) {
		            //PREDNY NARAZNIK - 10
		            case 0: {
		                new comp;
		                comp = GetVehicleComponentInSlot(tempCar[playerid], 10);
	          		  	RemoveVehicleComponent(tempCar[playerid], comp);
		            }
		            //ZADNY NARAZNIK - 11
		            case 1: {
		                new comp;
		                comp = GetVehicleComponentInSlot(tempCar[playerid], 11);
	          		  	RemoveVehicleComponent(tempCar[playerid], comp);
		            }
		            //SPOJLER - 0
		            case 2: {
		                new comp;
		                comp = GetVehicleComponentInSlot(tempCar[playerid], 0);
	          		  	RemoveVehicleComponent(tempCar[playerid], comp);
		            }
		            //SIDE SKIRT - 3
		            case 3:{
		                new comp;
		                comp = GetVehicleComponentInSlot(tempCar[playerid], 3);
	          		  	RemoveVehicleComponent(tempCar[playerid], comp);
		            }
					//PRIEDUCHY A ODSÁVANIE - 1, 2, 12, 13
		            case 4: {
		                new comp[4];
		                comp[0] = GetVehicleComponentInSlot(tempCar[playerid], 1);
		                comp[1] = GetVehicleComponentInSlot(tempCar[playerid], 2);
		                comp[2] = GetVehicleComponentInSlot(tempCar[playerid], 12);
		                comp[3] = GetVehicleComponentInSlot(tempCar[playerid], 13);
		                RemoveVehicleComponent(tempCar[playerid], comp[0]);
	             		RemoveVehicleComponent(tempCar[playerid], comp[1]);
	          		 	RemoveVehicleComponent(tempCar[playerid], comp[2]);
	          		  	RemoveVehicleComponent(tempCar[playerid], comp[3]);
		            }
		            //OSVETLENIE - 4
		            case 5: {
		                new comp;
		                comp = GetVehicleComponentInSlot(tempCar[playerid], 4);
	          		  	RemoveVehicleComponent(tempCar[playerid], comp);
		            }
		            //VÝFUKY
		            case 6: {
		                new comp;
		                comp = GetVehicleComponentInSlot(tempCar[playerid], 6);
	          		  	RemoveVehicleComponent(tempCar[playerid], comp);
		            }
		            //KOLESÁ
		            case 7: {
		                new comp;
		                comp = GetVehicleComponentInSlot(tempCar[playerid], 7);
	          		  	RemoveVehicleComponent(tempCar[playerid], comp);
		            }
		            //NITRO
		            case 8: {
		                new comp;
		                comp = GetVehicleComponentInSlot(tempCar[playerid], 5);
	          		  	RemoveVehicleComponent(tempCar[playerid], comp);
		            }
		            //HYDRAULIKA
		            case 9: {
		                RemoveVehicleComponent(tempCar[playerid], 1087);
		            }
		            case 10: {
		                new comp;
		                comp = GetVehicleComponentInSlot(tempCar[playerid], 2);
	          		  	RemoveVehicleComponent(tempCar[playerid], comp);
		            }

		            case 11:
		            {
		                return ShowPlayerDialog(playerid, did_tuning_remove, DIALOG_STYLE_LIST, "ZMAZAT TUNING", "Zmaza predný nárazník\nZmaza zadný nárazník\nZmaza spojler\nZmaza boèný prah\nZmaza prieduchy a odsávanie\nZmaza osvetlenie\nZmaza výfuky\nZmaza kolesá\nZmaza nitro\nZmaza hydrauliku\nZmazat strechu\n \nSpä", "VYBRA", "ZAVRIE");
		            }

		            default:
		            {
		                return ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
		            }

		        }

		        PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		        SendSuccess(playerid, "Komponent odobraný!");

			}
		}
		case did_tuning_exhausts:
	    {
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
	        if(response)
	        {
	           	switch(listitem)
	        	{
	        	    case 0:
	        	    {
	                 if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 560)
			        {
			            new carVar = pvehicleid[playerid];
			            if(pmodelid[playerid] == 562)
			            {
			            	AddVehicleComponent(carVar,1034);
			            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            	SendSuccess(playerid, "Komponent pridaný!");
			            	ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 565)
						{
						    AddVehicleComponent(carVar,1046);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 559)
						{
						    AddVehicleComponent(carVar,1065);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 561)
						{
						    AddVehicleComponent(carVar,1064);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 560)
						{
						    AddVehicleComponent(carVar,1028);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 558)
						{
						    AddVehicleComponent(carVar,1089);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					 	    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
		    			}
						}
		  			 	else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 1:
	        	    {
	                 if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)

				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 562)
				        {
				            AddVehicleComponent(carVar,1037);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 565)
						{
						    AddVehicleComponent(carVar,1045);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 559)
						{
						    AddVehicleComponent(carVar,1066);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 561)
						{
						    AddVehicleComponent(carVar,1059);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 560)
						{
						    AddVehicleComponent(carVar,1029);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 558)
						{
						    AddVehicleComponent(carVar,1092);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 2:
	        	    {
	                 if(pmodelid[playerid] == 575 ||
					pmodelid[playerid] == 534 ||
					pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536 ||
					pmodelid[playerid] == 576 ||
					pmodelid[playerid] == 535)

				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 575) // Brodway
				        {
				            AddVehicleComponent(carVar,1044);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			             	SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 534)// Remington
						{
						    AddVehicleComponent(carVar,1126);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 567)// Savanna
						{
						    AddVehicleComponent(carVar,1129);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		                    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 536) // Blade
						{
						    AddVehicleComponent(carVar,1104);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 535) // Slamvan
						{
	 						AddVehicleComponent(carVar,1113);
	 						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 576) // Tornado
						{
						    AddVehicleComponent(carVar,1136);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						   	SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 3:
	        	    {
	                 if(pmodelid[playerid] == 575 ||
					pmodelid[playerid] == 534 ||
					pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536 ||
					pmodelid[playerid] == 576 ||
					pmodelid[playerid] == 535)
				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 575) // Brodway
				        {
				            AddVehicleComponent(carVar,1043);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 534)// Remington
						{
						    AddVehicleComponent(carVar,1127);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 567)// Savanna
						{
						    AddVehicleComponent(carVar,1132);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 536) // Blade
						{
						    AddVehicleComponent(carVar,1105);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}

						else if(pmodelid[playerid] == 535) // Slamvan
						{
						    AddVehicleComponent(carVar,1114);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}

						else if(pmodelid[playerid] == 576) // Tornado
						{
						    AddVehicleComponent(carVar,1135);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}

						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 4:// Large
	        	    {
	     				if(
						pmodelid[playerid] == 401 ||//bravura
						pmodelid[playerid] == 518 ||//buccaneer
						pmodelid[playerid] == 527 ||//cadrona
						pmodelid[playerid] == 542 ||//clover
						pmodelid[playerid] == 589 ||//club
						pmodelid[playerid] == 400 ||//landstalker
						pmodelid[playerid] == 517 ||//majestic
						pmodelid[playerid] == 603 ||//phoenix
						pmodelid[playerid] == 426 ||//premier
						pmodelid[playerid] == 547 ||//primo
						pmodelid[playerid] == 405 ||//sentinel
						pmodelid[playerid] == 580 ||//stafford
						pmodelid[playerid] == 550 ||//sunrise
						pmodelid[playerid] == 549 ||//tampa
						pmodelid[playerid] == 477)//zr-350
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 401) // bravura
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 518) // buccaneer
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 527) // cadrona
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 542) // clover
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 589) // club
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 400) // landstalker
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 603) // phoenix
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 436) // previon
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 547) // primo
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 405) // sentinel
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 580) // stafford
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 550) // sunrise
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 549) // tampa
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 477) // zr-350
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 517) // majestic
				        	{
				            AddVehicleComponent(carVar,1020);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    	else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
					}
	        	    case 5: // Medium
	        	    {
	                        if(
						pmodelid[playerid] == 527 ||//cadrona
						pmodelid[playerid] == 542 ||//clover
						pmodelid[playerid] == 400 ||//landstalker
						pmodelid[playerid] == 426 ||//premier
						pmodelid[playerid] == 436 ||//previon
						pmodelid[playerid] == 547 ||//primo
						pmodelid[playerid] == 405 ||//sentinel
						pmodelid[playerid] == 477)//zr-350
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 527) // cadrona
				        	{
				            AddVehicleComponent(carVar,1021);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 542) // clover
				        	{
				            AddVehicleComponent(carVar,1021);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 400) // landstalker
				        	{
				            AddVehicleComponent(carVar,1021);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 426) // premier
				        	{
				            AddVehicleComponent(carVar,1021);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 436) // previon
				        	{
				            AddVehicleComponent(carVar,1021);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 547) // primo
				        	{
				            AddVehicleComponent(carVar,1021);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 405) // sentinel
				        	{
				            AddVehicleComponent(carVar,1021);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 477) // zr350
				        	{
				            AddVehicleComponent(carVar,1021);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    		else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
	        	    case 6: // Small
	        	    {
	                        if(
						pmodelid[playerid] == 436)//previon
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 436) // previon
				        	{
				            AddVehicleComponent(carVar,1022);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    		else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
	        	    case 7: // Twin
	        	    {
	                        if(
						pmodelid[playerid] == 518 ||//buccaneer
						pmodelid[playerid] == 415 ||//cheetah
						pmodelid[playerid] == 542 ||//clover
						pmodelid[playerid] == 546 ||//intruder
						pmodelid[playerid] == 400 ||//landstalker
						pmodelid[playerid] == 517 ||//majestic
						pmodelid[playerid] == 603 ||//phoenix
						pmodelid[playerid] == 426 ||//premier
						pmodelid[playerid] == 436 ||//previon
						pmodelid[playerid] == 547 ||//primo
						pmodelid[playerid] == 405 ||//sentinel
						pmodelid[playerid] == 550 ||//sunrise
						pmodelid[playerid] == 549 ||//tampa
						pmodelid[playerid] == 477)//zr-350
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 518) // buccaneer
				        	{
				            AddVehicleComponent(carVar,1019);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 415) // cheetah
				        	{
				            AddVehicleComponent(carVar,1019);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 542) // clover
				        	{
				            AddVehicleComponent(carVar,1019);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 546) // intruder
				        	{
				            AddVehicleComponent(carVar,1019);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 400) // landstalker
				        	{
				            AddVehicleComponent(carVar,1019);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 517) // majestic
				        	{
				            AddVehicleComponent(carVar,1019);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 603) // phoenix
				        	{
				            AddVehicleComponent(carVar,1019);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 426) // premier
				        	{
				            AddVehicleComponent(carVar,1019);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 436) // previon
				        	{
				            AddVehicleComponent(carVar,1019);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 547) // primo
				        	{
				            AddVehicleComponent(carVar,1019);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 405 ) // sentinel
				        	{
				            AddVehicleComponent(carVar,1019);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 550) // sunrise
				        	{
				            AddVehicleComponent(carVar,1019);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 549) // tampa
				        	{
				            AddVehicleComponent(carVar,1019);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 477) // zr-350
				        	{
				            AddVehicleComponent(carVar,1019);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    		else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
	        	    case 8: // Upswept
	        	    {
	                        if(
	                    pmodelid[playerid] == 401 ||//bravura
						pmodelid[playerid] == 518 ||//buccaneer
						pmodelid[playerid] == 415 ||//cheetah
						pmodelid[playerid] == 542 ||//clover
						pmodelid[playerid] == 546 ||//intruder
						pmodelid[playerid] == 400 ||//landstalker
						pmodelid[playerid] == 517 ||//majestic
						pmodelid[playerid] == 603 ||//phoenix
						pmodelid[playerid] == 426 ||//premier
						pmodelid[playerid] == 415 ||//cheetah
						pmodelid[playerid] == 547 ||//primo
						pmodelid[playerid] == 405 ||//sentinel
						pmodelid[playerid] == 550 ||//sunrise
						pmodelid[playerid] == 549 ||//tampa
						pmodelid[playerid] == 477)//zr-350
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 415) // cheetah
				        	{
				            AddVehicleComponent(carVar,1018);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 518) // buccaneer
				        	{
				            AddVehicleComponent(carVar,1018);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 527) // cadrona
				        	{
				            AddVehicleComponent(carVar,1018);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 542) // clover
				        	{
				            AddVehicleComponent(carVar,1018);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 589) // club
				        	{
				            AddVehicleComponent(carVar,1018);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 400) // landstalker
				        	{
				            AddVehicleComponent(carVar,1018);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 603) // phoenix
				        	{
				            AddVehicleComponent(carVar,1018);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 546) // intruder
				        	{
				            AddVehicleComponent(carVar,1018);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 547) // primo
				        	{
				            AddVehicleComponent(carVar,1018);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 405) // sentinel
				        	{
				            AddVehicleComponent(carVar,1018);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 580) // stafford
				        	{
				            AddVehicleComponent(carVar,1018);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 550) // sunrise
				        	{
				            AddVehicleComponent(carVar,1018);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 549) // tampa
				        	{
				            AddVehicleComponent(carVar,1018);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 477) // zr-350
				        	{
				            AddVehicleComponent(carVar,1018);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 517) // majestic
				        	{
				            AddVehicleComponent(carVar,1018);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    		else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
					case 9: // _
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_exhausts, DIALOG_STYLE_LIST, "VÝFUKY", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
	        	    case 10: // Back
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
				}
			}
		}
		case did_tuning_fbumps:
	    {
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
	        if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:
	        	    {
	                 if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
					{
			            new carVar = pvehicleid[playerid];
			            if(pmodelid[playerid] == 562) // Elegy
			            {
			            	AddVehicleComponent(carVar,1171);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		              		SendSuccess(playerid, "Komponent pridaný!");
			            	ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
						    AddVehicleComponent(carVar,1153);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 559) // Jester
						{
						    AddVehicleComponent(carVar,1160);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
						    AddVehicleComponent(carVar,1155);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
						    AddVehicleComponent(carVar,1169);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 558) // Uranus
						{
						    AddVehicleComponent(carVar,1166);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					 	    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 1:
	        	    {
	                 if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
			        {

				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 562) // Elegy
				        {
				            AddVehicleComponent(carVar,1172);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
						    AddVehicleComponent(carVar,1152);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 559) // Jetser
						{
						    AddVehicleComponent(carVar,1173);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
						    AddVehicleComponent(carVar,1157);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
						    AddVehicleComponent(carVar,1170);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 558)  // Uranus
						{
						    AddVehicleComponent(carVar,1165);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 2:
	        	    {
	                 if(pmodelid[playerid] == 575 ||
					pmodelid[playerid] == 534 ||
					pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536 ||
					pmodelid[playerid] == 576 ||
					pmodelid[playerid] == 535)
					{
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 575) // Brodway
				        {
				            AddVehicleComponent(carVar,1174);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 534)// Remington
						{
						    AddVehicleComponent(carVar,1179);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 567)// Savanna
						{
						    AddVehicleComponent(carVar,1189);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 536) // Blade
						{
						    AddVehicleComponent(carVar,1182);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 535) // Slamvan
						{
						    AddVehicleComponent(carVar,1115);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 576) // Tornado
						{
						    AddVehicleComponent(carVar,1191);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 3:
	        	    {
	                 if(pmodelid[playerid] == 575 ||
					pmodelid[playerid] == 534 ||
					pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 535 ||
					pmodelid[playerid] == 536 ||
		            pmodelid[playerid] == 576 ||
					pmodelid[playerid] == 576)
				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 575) // Brodway
				        {
				            AddVehicleComponent(carVar,1175);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 534)// Remington
						{
						    AddVehicleComponent(carVar,1185);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 567)// Savanna
						{
						    AddVehicleComponent(carVar,1188);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 536) // Blade
						{
						    AddVehicleComponent(carVar,1181);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}

					    else if(pmodelid[playerid] == 535) // Slamvan
						{
						    AddVehicleComponent(carVar,1116);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 576) // Tornado
						{
						    AddVehicleComponent(carVar,1190);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}

						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 4:
	        	    {
	             	ShowPlayerDialog(playerid, did_tuning_fbumps, DIALOG_STYLE_LIST, "PREDNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
					case 5:
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
				}
			}
		}
		case did_tuning_rbumps:
	    {
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
	        if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:
	        	    {
	                 if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
			        {

			            new carVar = pvehicleid[playerid];
			            if(pmodelid[playerid] == 562) // Elegy
			            {
			            	AddVehicleComponent(carVar,1149);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		              		SendSuccess(playerid, "Komponent pridaný!");
			            	ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
						    AddVehicleComponent(carVar,1150);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 559) // Jester
						{
						    AddVehicleComponent(carVar,1159);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
						    AddVehicleComponent(carVar,1154);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
						    AddVehicleComponent(carVar,1141);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 558) // Uranus
						{
						    AddVehicleComponent(carVar,1168);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					 	    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 1:
	        	    {
	                 if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
			        {


				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 562) // Elegy
				        {
				            AddVehicleComponent(carVar,1148);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
						    AddVehicleComponent(carVar,1151);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 559) // Jetser
						{
						    AddVehicleComponent(carVar,1161);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
						    AddVehicleComponent(carVar,1156);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
						    AddVehicleComponent(carVar,1140);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 558)  // Uranus
						{
						    AddVehicleComponent(carVar,1167);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 2:
	        	    {
	                 if(pmodelid[playerid] == 575 ||
					pmodelid[playerid] == 534 ||
					pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536 ||
					pmodelid[playerid] == 576 ||
					pmodelid[playerid] == 535)
			        {


	              		new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 575) // Brodway
				        {
				            AddVehicleComponent(carVar,1176);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 534)// Remington
						{
						    AddVehicleComponent(carVar,1180);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 567)// Savanna
						{
						    AddVehicleComponent(carVar,1187);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 536) // Blade
						{
						    AddVehicleComponent(carVar,1184);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 535) // Slamvan
						{
						    AddVehicleComponent(carVar,1109);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 576) // Tornado
						{
						    AddVehicleComponent(carVar,1192);
						    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
	     }
							else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 3:
	        	    {
	                 if(pmodelid[playerid] == 575 ||
					pmodelid[playerid] == 534 ||
					pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536 ||
					pmodelid[playerid] == 576 ||
					pmodelid[playerid] == 535)
				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 575) // Brodway
				        {
				            AddVehicleComponent(carVar,1177);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
							else if(pmodelid[playerid] == 534)// Remington
						{
						    AddVehicleComponent(carVar,1178);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
							else if(pmodelid[playerid] == 567)// Savanna
						{
						    AddVehicleComponent(carVar,1186);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
							else if(pmodelid[playerid] == 536) // Blade
						{
						    AddVehicleComponent(carVar,1183);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}

							else if(pmodelid[playerid] == 535) // Slamvan
						{
						    AddVehicleComponent(carVar,1110);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}

							else if(pmodelid[playerid] == 576) // Tornado
						{
						    AddVehicleComponent(carVar,1193);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}

						}
							else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 4:
	        	    {
	            	    ShowPlayerDialog(playerid, did_tuning_rbumps, DIALOG_STYLE_LIST, "ZADNÉ NÁRAZNÍKY", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
					case 5:
	        	    {
	     				ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
	 			}
			}
		}
		case did_tuning_roofs:
	    {
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
	        if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:
	        	    {
	                 if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
			        {

			            new carVar = pvehicleid[playerid];
			            if(pmodelid[playerid] == 562) // Elegy
			            {
			            	AddVehicleComponent(carVar,1038);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		              		SendSuccess(playerid, "Komponent pridaný!");
			            	ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
							else if(pmodelid[playerid] == 565) // Flash
						{
						    AddVehicleComponent(carVar,1054);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
							else if(pmodelid[playerid] == 559) // Jester
						{
						    AddVehicleComponent(carVar,1067);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
							else if(pmodelid[playerid] == 561) // Stratum
						{
						    AddVehicleComponent(carVar,1055);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
							else if(pmodelid[playerid] == 560) // Sultan
						{
						    AddVehicleComponent(carVar,1032);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
							else if(pmodelid[playerid] == 558) // Uranus
						{
						    AddVehicleComponent(carVar,1088);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					 	    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
							else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 1:
	        	    {
	                 if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
			        {


				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 562) // Elegy
				        {
				            AddVehicleComponent(carVar,1035);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
							else if(pmodelid[playerid] == 565) // Flash
						{
						    AddVehicleComponent(carVar,1053);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
							else if(pmodelid[playerid] == 559) // Jetser
						{
						    AddVehicleComponent(carVar,1068);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
							else if(pmodelid[playerid] == 561) // Stratum
						{
						    AddVehicleComponent(carVar,1061);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
							else if(pmodelid[playerid] == 560) // Sultan
						{
						    AddVehicleComponent(carVar,1033);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
							else if(pmodelid[playerid] == 558)  // Uranus
						{
						    AddVehicleComponent(carVar,1091);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
							else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 2:
	        	    {
	                 if(pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536)
				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 567) // Savanna
				        {
				            AddVehicleComponent(carVar,1130);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
		   					else if(pmodelid[playerid] == 536) // Blade
						{
						    AddVehicleComponent(carVar,1128);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
							else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 3:
	        	    {
	                 if(pmodelid[playerid] == 567 ||
					pmodelid[playerid] == 536)
				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 567) // Savanna
				        {
				            AddVehicleComponent(carVar,1131);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
		   					else if(pmodelid[playerid] == 536) // Blade
						{
						    AddVehicleComponent(carVar,1103);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
							else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 4:
	        	    {
	                 if(
						pmodelid[playerid] == 401 ||
						pmodelid[playerid] == 518 ||
						pmodelid[playerid] == 589 ||
						pmodelid[playerid] == 492 ||
						pmodelid[playerid] == 546 ||
						pmodelid[playerid] == 603 ||
						pmodelid[playerid] == 426 ||
						pmodelid[playerid] == 436 ||
						pmodelid[playerid] == 580 ||
						pmodelid[playerid] == 550||
						pmodelid[playerid] == 477)
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 401)
				        	{
				            AddVehicleComponent(carVar,1006);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 518)
				        	{
				            AddVehicleComponent(carVar,1006);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 589)
				        	{
				            AddVehicleComponent(carVar,1006);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 492)
				        	{
				            AddVehicleComponent(carVar,1006);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 546)
				        	{
				            AddVehicleComponent(carVar,1006);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 603)
				        	{
				            AddVehicleComponent(carVar,1006);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 426)
				        	{
				            AddVehicleComponent(carVar,1006);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 436)
				        	{
				            AddVehicleComponent(carVar,1006);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 580)
				        	{
				            AddVehicleComponent(carVar,1006);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 550)
				        	{
				            AddVehicleComponent(carVar,1006);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 477)
				        	{
				            AddVehicleComponent(carVar,1006);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    		else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
					case 5:
	        	    {
	                 ShowPlayerDialog(playerid, did_tuning_roofs, DIALOG_STYLE_LIST, "STRECHY", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
					case 6:
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
	 			}
			}
		}
		case did_tuning_spoilers:
	    {
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
	        if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:
	        	    {
	                if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
			        {

			            new carVar = pvehicleid[playerid];
			            if(pmodelid[playerid] == 562) // Elegy
			            {
			            	AddVehicleComponent(carVar,1147);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		              		SendSuccess(playerid, "Komponent pridaný!");
			            	ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
						    AddVehicleComponent(carVar,1049);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 559) // Jester
						{
						    AddVehicleComponent(carVar,1162);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
						    AddVehicleComponent(carVar,1158);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
						    AddVehicleComponent(carVar,1138);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 558) // Uranus
						{
						    AddVehicleComponent(carVar,1164);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					 	    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 1:
	        	    {
	                if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
			        {


				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 562) // Elegy
				        {
				            AddVehicleComponent(carVar,1146);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
						    AddVehicleComponent(carVar,1150);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 559) // Jetser
						{
						    AddVehicleComponent(carVar,1158);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
						    AddVehicleComponent(carVar,1060);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
						    AddVehicleComponent(carVar,1139);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 558)  // Uranus
						{
						    AddVehicleComponent(carVar,1163);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 2:// Win
	        	    {
	                if(
	                    pmodelid[playerid] == 401 ||//bravura
						pmodelid[playerid] == 518 ||//buccaneer
						pmodelid[playerid] == 527 ||//cadrona
						pmodelid[playerid] == 415 ||//cheetah
						pmodelid[playerid] == 546 ||//intruder
						pmodelid[playerid] == 603 ||//phoenix
						pmodelid[playerid] == 426 ||//premier
						pmodelid[playerid] == 436 ||//previon
						pmodelid[playerid] == 405 ||//sentinel
						pmodelid[playerid] == 477 ||//stallion
						pmodelid[playerid] == 580 ||//stafford
						pmodelid[playerid] == 550 ||//sunrise
						pmodelid[playerid] == 549)//tampa
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 401) // bravura
				        	{
				            AddVehicleComponent(carVar,1001);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 518) // buccaneer
				        	{
				            AddVehicleComponent(carVar,1001);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 527) // cadrona
				        	{
				            AddVehicleComponent(carVar,1001);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 415) // cheetah
				        	{
				            AddVehicleComponent(carVar,1001);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 546) // intruder
				        	{
				            AddVehicleComponent(carVar,1001);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 603) // phoenix
				        	{
				            AddVehicleComponent(carVar,1001);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 426) // premier
				        	{
				            AddVehicleComponent(carVar,1001);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 436) // previon
				        	{
				            AddVehicleComponent(carVar,1001);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 405) // sentinel
				        	{
				            AddVehicleComponent(carVar,1001);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 477) // stallion
				        	{
				            AddVehicleComponent(carVar,1001);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 580) // stafford
				        	{
				            AddVehicleComponent(carVar,1001);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 550) // sunrise
				        	{
				            AddVehicleComponent(carVar,1001);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 549) // tampa
				        	{
				            AddVehicleComponent(carVar,1001);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    		else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
	        	    case 3: // Fury
	        	    {
	                        if(
						pmodelid[playerid] == 518 ||//buccaneer
						pmodelid[playerid] == 415 ||//cheetah
						pmodelid[playerid] == 546 ||//intruder
						pmodelid[playerid] == 517 ||//majestic
						pmodelid[playerid] == 603 ||//phoenix
						pmodelid[playerid] == 405 ||//sentinel
						pmodelid[playerid] == 477 ||//stallion
						pmodelid[playerid] == 580 ||//stafford
						pmodelid[playerid] == 550 ||//sunrise
						pmodelid[playerid] == 549)//tampa
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 518) // buccaneer
				        	{
				            AddVehicleComponent(carVar,1023);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 415) // cheetah
				        	{
				            AddVehicleComponent(carVar,1023);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 546) // intruder
				        	{
				            AddVehicleComponent(carVar,1023);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 517) // majestic
				        	{
				            AddVehicleComponent(carVar,1023);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 603) // phoenix
				        	{
				            AddVehicleComponent(carVar,1023);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 405) // sentinel
				        	{
				            AddVehicleComponent(carVar,1023);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 477) // stallion
				        	{
				            AddVehicleComponent(carVar,1023);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 580) // stafford
				        	{
				            AddVehicleComponent(carVar,1023);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 550) // sunrise
				        	{
				            AddVehicleComponent(carVar,1023);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 549) // tampa
				        	{
				            AddVehicleComponent(carVar,1023);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    		else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
	        	    case 4: // Alpha
	        	    {
	                        if(
						pmodelid[playerid] == 518 ||//buccaneer
						pmodelid[playerid] == 415 ||//cheetah
						pmodelid[playerid] == 401 ||//bravura
						pmodelid[playerid] == 517 ||//majestic
						pmodelid[playerid] == 426 ||//premier
						pmodelid[playerid] == 436 ||//previon
						pmodelid[playerid] == 477 ||//stallion
						pmodelid[playerid] == 547 ||//primo
						pmodelid[playerid] == 550 ||//sunrise
						pmodelid[playerid] == 549)//tampa
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 518) // buccaneer
				        	{
				            AddVehicleComponent(carVar,1003);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 415) // cheetah
				        	{
				            AddVehicleComponent(carVar,1003);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 401) // bravura
				        	{
				            AddVehicleComponent(carVar,1003);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 517) // majestic
				        	{
				            AddVehicleComponent(carVar,1003);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 426) // premier
				        	{
				            AddVehicleComponent(carVar,1003);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 436) // previon
				        	{
				            AddVehicleComponent(carVar,1003);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 477) // stallion
				        	{
				            AddVehicleComponent(carVar,1003);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 547) // primo
				        	{
				            AddVehicleComponent(carVar,1003);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 550) // sunrise
				        	{
				            AddVehicleComponent(carVar,1003);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 549) // tampa
				        	{
				            AddVehicleComponent(carVar,1003);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    		else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
	        	    case 5: // Pro
	        	    {
	                        if(
						pmodelid[playerid] == 589 ||//club
						pmodelid[playerid] == 492 ||//greenwood
						pmodelid[playerid] == 547 ||//primo
						pmodelid[playerid] == 405)//sentinel
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 518) // club
				        	{
				            AddVehicleComponent(carVar,1000);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 492) // greenwood
				        	{
				            AddVehicleComponent(carVar,1000);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 547) // primo
				        	{
				            AddVehicleComponent(carVar,1000);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 405) // sentinel
				        	{
	        				AddVehicleComponent(carVar,1000);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    		else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
					case 6: // Champ
	        	    {
	                        if(
						pmodelid[playerid] == 527 ||//cadrona
						pmodelid[playerid] == 542 ||//clover
						pmodelid[playerid] == 405)//sentinel
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 527) // cadrona
				        	{
				            AddVehicleComponent(carVar,1014);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 542) // clover
				        	{
				            AddVehicleComponent(carVar,1014);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 405) // sentinel
				        	{
	        				AddVehicleComponent(carVar,1014);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    		else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
	        	    case 7: // Race
	        	    {
	                if(
						pmodelid[playerid] == 527 ||//cadrona
						pmodelid[playerid] == 542)//clover
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 527) // cadrona
				        	{
				            AddVehicleComponent(carVar,1014);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 542) // clover
				        	{
				            AddVehicleComponent(carVar,1014);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    		else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
					case 8: // Drag
	        	    {
	                if(
						pmodelid[playerid] == 546 ||//intruder
						pmodelid[playerid] == 517)//majestic
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 546) // intruder
				        	{
				            AddVehicleComponent(carVar,1002);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 517) // majestic
				        	{
				            AddVehicleComponent(carVar,1002);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    		else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
	        	    case 9:
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_spoilers, DIALOG_STYLE_LIST, "SPOILERY", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
					case 10:
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
	 			}
			}
		}
		case did_tuning_sideskirts:
	    {
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
	        if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:
	        	    {
	                if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
			        {

			            new carVar = pvehicleid[playerid];
			            if(pmodelid[playerid] == 562) // Elegy
			            {
			            	AddVehicleComponent(carVar,1036);
			            	AddVehicleComponent(carVar,1040);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		              		SendSuccess(playerid, "Komponent pridaný!");
			            	ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
						    AddVehicleComponent(carVar,1047);
						    AddVehicleComponent(carVar,1051);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 559) // Jester
						{
						    AddVehicleComponent(carVar,1069);
						    AddVehicleComponent(carVar,1071);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
						    AddVehicleComponent(carVar,1056);
						    AddVehicleComponent(carVar,1062);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
						    AddVehicleComponent(carVar,1026);
						    AddVehicleComponent(carVar,1027);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 558) // Uranus
						{
						    AddVehicleComponent(carVar,1090);
						    AddVehicleComponent(carVar,1094);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					 	    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 1:
	        	    {
	                if(pmodelid[playerid] == 562 ||
					pmodelid[playerid] == 565 ||
					pmodelid[playerid] == 559 ||
					pmodelid[playerid] == 561 ||
					pmodelid[playerid] == 558 ||
					pmodelid[playerid] == 560)
			        {


				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 562) // Elegy
				        {
				            AddVehicleComponent(carVar,1039);
				            AddVehicleComponent(carVar,1041);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 565) // Flash
						{
						    AddVehicleComponent(carVar,1048);
						    AddVehicleComponent(carVar,1052);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 559) // Jetser
						{
						    AddVehicleComponent(carVar,1070);
						    AddVehicleComponent(carVar,1072);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 561) // Stratum
						{
						    AddVehicleComponent(carVar,1057);
						    AddVehicleComponent(carVar,1063);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 560) // Sultan
						{
						    AddVehicleComponent(carVar,1031);
						    AddVehicleComponent(carVar,1030);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						else if(pmodelid[playerid] == 558)  // Uranus
						{
						    AddVehicleComponent(carVar,1093);
						    AddVehicleComponent(carVar,1095);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
						    ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 2:
	        	    {
	                if(pmodelid[playerid] == 575 ||
		               pmodelid[playerid] == 536 ||
		               pmodelid[playerid] == 576 ||
			 	       pmodelid[playerid] == 567)
		               {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 575) // Brodway
				        {
		       		        AddVehicleComponent(carVar,1042);
		       		        AddVehicleComponent(carVar,1099);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
		   				else if(pmodelid[playerid] == 567) // Savanna
						{
						    AddVehicleComponent(carVar,1102);
						    AddVehicleComponent(carVar,1133);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
		    		        ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
		                }
		                else if(pmodelid[playerid] == 576) // Tornado
						{
						    AddVehicleComponent(carVar,1134);
						    AddVehicleComponent(carVar,1137);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
		    		        ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
		                }
		                else if(pmodelid[playerid] == 536) // Blade
						{
						    AddVehicleComponent(carVar,1108);
						    AddVehicleComponent(carVar,1107);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						    SendSuccess(playerid, "Komponent pridaný!");
		                    ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
		                }
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 3:
	        	    {
	                if(pmodelid[playerid] == 534 ||
					pmodelid[playerid] == 534)
				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 534) // Remington
				        {
				            AddVehicleComponent(carVar,1122);
				            AddVehicleComponent(carVar,1101);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 4:
	        	    {
	                if(pmodelid[playerid] == 534 ||
					pmodelid[playerid] == 534)
				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 534) // Remington
				        {
				            AddVehicleComponent(carVar,1106);
				            AddVehicleComponent(carVar,1124);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 5:
	        	    {
	                if(pmodelid[playerid] == 535)

				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 535) // Slamvan
				        {
				            AddVehicleComponent(carVar,1118);
				            AddVehicleComponent(carVar,1120);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 6:
	        	    {
					if(pmodelid[playerid] == 535)

				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 535) // Slamvan
				        {
				            AddVehicleComponent(carVar,1119);
				            AddVehicleComponent(carVar,1121);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 7:
	        	    {
					if(
						pmodelid[playerid] == 401 ||
						pmodelid[playerid] == 518 ||
						pmodelid[playerid] == 527 ||
						pmodelid[playerid] == 415 ||
						pmodelid[playerid] == 589 ||
						pmodelid[playerid] == 546 ||
						pmodelid[playerid] == 517 ||
						pmodelid[playerid] == 603 ||
						pmodelid[playerid] == 436 ||
						pmodelid[playerid] == 439 ||
						pmodelid[playerid] == 580 ||
						pmodelid[playerid] == 549 ||
						pmodelid[playerid] == 477)
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 401)
				        	{
				            AddVehicleComponent(carVar,1007);
				            AddVehicleComponent(carVar,1017);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 518)
				        	{
				            AddVehicleComponent(carVar,1007);
				            AddVehicleComponent(carVar,1017);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 527)
				        	{
				            AddVehicleComponent(carVar,1007);
				            AddVehicleComponent(carVar,1017);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 415)
				        	{
				            AddVehicleComponent(carVar,1007);
				            AddVehicleComponent(carVar,1017);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 589)
				        	{
				            AddVehicleComponent(carVar,1007);
				            AddVehicleComponent(carVar,1017);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 546)
				        	{
				            AddVehicleComponent(carVar,1007);
				            AddVehicleComponent(carVar,1017);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 517)
				        	{
				            AddVehicleComponent(carVar,1007);
				            AddVehicleComponent(carVar,1017);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 603)
				        	{
				            AddVehicleComponent(carVar,1007);
				            AddVehicleComponent(carVar,1017);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 436)
				        	{
				            AddVehicleComponent(carVar,1007);
				            AddVehicleComponent(carVar,1017);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 439)
				        	{
				            AddVehicleComponent(carVar,1007);
				            AddVehicleComponent(carVar,1017);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 580)
				        	{
				            AddVehicleComponent(carVar,1007);
				            AddVehicleComponent(carVar,1017);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 549)
				        	{
				            AddVehicleComponent(carVar,1007);
				            AddVehicleComponent(carVar,1017);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 477)
				        	{
				            AddVehicleComponent(carVar,1007);
				            AddVehicleComponent(carVar,1017);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    		else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
					case 8:
	        	    {
					ShowPlayerDialog(playerid, did_tuning_sideskirts, DIALOG_STYLE_LIST, "BOÈNÉ PRAHY", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
					case 9:
	        	    {
	    			ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
	 			}
			}
		}
		case did_tuning_bullbars:
	    {
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
	        if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:
	        	    {
	                if(pmodelid[playerid] == 534)

				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 534) // Remington
				        {
				            AddVehicleComponent(carVar,1100);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_bullbars, DIALOG_STYLE_LIST, "BULLBARY", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nSpä", "PRIDA", "ZAVRIE");
				        }
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_bullbars, DIALOG_STYLE_LIST, "BULLBARY", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 1:
	        	    {
	                if(pmodelid[playerid] == 534)

				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 534) // Remington
				        {
				            AddVehicleComponent(carVar,1123);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_bullbars, DIALOG_STYLE_LIST, "BULLBARY", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_bullbars, DIALOG_STYLE_LIST, "BULLBARY", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 2:
	        	    {
	                if(pmodelid[playerid] == 534)

				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 534) // Remington
				        {
				            AddVehicleComponent(carVar,1125);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_bullbars, DIALOG_STYLE_LIST, "BULLBARY", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_bullbars, DIALOG_STYLE_LIST, "BULLBARY", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 3:
	        	    {
	                if(pmodelid[playerid] == 535)

				    {
				        new carVar = pvehicleid[playerid];
				        if(pmodelid[playerid] == 535) // Slamvan
				        {
				            AddVehicleComponent(carVar,1117);
				            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				            ShowPlayerDialog(playerid, did_tuning_bullbars, DIALOG_STYLE_LIST, "BULLBARY", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nSpä", "PRIDA", "ZAVRIE");
						}
						}
						else
						{
					    SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_bullbars, DIALOG_STYLE_LIST, "BULLBARY", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 4:
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_bullbars, DIALOG_STYLE_LIST, "BULLBARY", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
					case 5:
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
	 			}
			}
		}
		case did_tuning_wheels:
	    {
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
	        if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:
	        	    {
	                if(ASLDAPLPAS == 0)
			        {
			            new carVar = pvehicleid[playerid];
			            AddVehicleComponent(carVar,1025);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

			            ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
					else
					{
		       			SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
	        	    case 1:
	        	    {
	                if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
				        AddVehicleComponent(carVar,1074);
	           			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
					else
					{
		       			SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
	        	    case 2:
	        	    {
	                if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
		                AddVehicleComponent(carVar,1076);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
					else
					{
		       			SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 3:
	        	    {
	                if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
				        AddVehicleComponent(carVar,1078);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
					else
					{
		      		 	SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 4:
	        	    {
	                if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
				        AddVehicleComponent(carVar,1081);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
					else
					{
		       			SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 5:
	        	    {
	                if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
		                AddVehicleComponent(carVar,1082);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
					else
					{
					    SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 6:
	        	    {
					if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
				        AddVehicleComponent(carVar,1085);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
					else
					{
					    SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 7:
	        	    {
					if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
				        AddVehicleComponent(carVar,1096);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
					else
					{
					    SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 8:
	        	    {
					if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
				        AddVehicleComponent(carVar,1097);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
					else
					{
					    SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 9:
	        	    {
	     			if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
				        AddVehicleComponent(carVar,1098);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
					else
					{
					    SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 10:
	        	    {
					if(ASLDAPLPAS == 0)
			        {
			            new carVar = pvehicleid[playerid];
			            AddVehicleComponent(carVar,1084);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

			            ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
					else
					{
		       			SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 11:
	        	    {
	 				if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
				        AddVehicleComponent(carVar,1073);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
					else
					{
		       			SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 12:
	        	    {
						if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
		                AddVehicleComponent(carVar,1075);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
						else
					{
		      	 		SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 13:
	        	    {
						if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
				        AddVehicleComponent(carVar,1077);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
						else
					{
		       			SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 14:
	        	    {
						if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
				        AddVehicleComponent(carVar,1079);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
						else
					{
		       			SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 15:
	        	    {
						if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
		                AddVehicleComponent(carVar,1080);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
						else
					{
					    SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 16:
	        	    {
						if(ASLDAPLPAS == 0)
				    {
				        new carVar = pvehicleid[playerid];
				        AddVehicleComponent(carVar,1083);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				        SendSuccess(playerid, "Komponent pridaný!");
				        ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
						else
					{
					    SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
					}
	        	    }
					case 17:
	        	    {
						ShowPlayerDialog(playerid, did_tuning_wheels, DIALOG_STYLE_LIST, "KOLESÁ", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
					case 18:
	        	    {
	     			ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
	 			}
			}
		}
		case did_tuning_cstereo:
	    {
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
	        if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:
	        	    {
	                if(ASLDAPLPAS == 0)
			        {
			            new carVar = pvehicleid[playerid];
			            AddVehicleComponent(carVar,1086);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendSuccess(playerid, "Komponent pridaný!");
			            ShowPlayerDialog(playerid, did_tuning_cstereo, DIALOG_STYLE_LIST, "STEREO", "Bass Boost\n \nSpä", "PRIDA", "ZAVRIE");
					}
					else
					{
		                SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_cstereo, DIALOG_STYLE_LIST, "STEREO", "Bass Boost\n \nSpä", "PRIDA", "ZAVRIE");
				    }
	        	    }
	        	    case 1:
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_cstereo, DIALOG_STYLE_LIST, "STEREO", "Bass Boost\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
	        	    case 2:
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
	 			}
			}
		}
		case did_tuning_hydraulics:
	    {
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
	        if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:
	        	    {
	                if(ASLDAPLPAS == 0)
			        {
			            new carVar = pvehicleid[playerid];
			            AddVehicleComponent(carVar,1087);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendSuccess(playerid, "Komponent pridaný!");
			            ShowPlayerDialog(playerid, did_tuning_hydraulics, DIALOG_STYLE_LIST, "HYDRAULIKA", "Hydaulics\n \nSpä", "PRIDA", "ZAVRIE");
					}
					else
					{
		                SendError(playerid, "Nemá dos peòazí!");
					    ShowPlayerDialog(playerid, did_tuning_hydraulics, DIALOG_STYLE_LIST, "HYDRAULIKA", "Hydaulics\n \nSpä", "PRIDA", "ZAVRIE");
				    }
	        	    }
	        	    case 1:
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_hydraulics, DIALOG_STYLE_LIST, "HYDRAULIKA", "Hydaulics\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
	        	    case 2:
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
	 			}
			}
		}
		case did_tuning_nitro:
	    {
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
	        if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:
	        	    {
	                	new carVar = pvehicleid[playerid];
			            vEnum[carVar][v_Nitrous] = 60.0;
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendSuccess(playerid, "Komponent pridaný!");
	           			ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
	        	    case 1:
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_nitro, DIALOG_STYLE_LIST, "NITRO", "Nitro\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
	        	    case 2:
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
	 			}
			}
		}
		case did_tuning_hoods:// HOODS
	    {
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
	        if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:// fury
	        	    {
	                	if(
						pmodelid[playerid] == 401 ||
						pmodelid[playerid] == 518 ||
						pmodelid[playerid] == 589 ||
						pmodelid[playerid] == 492 ||
						pmodelid[playerid] == 426 ||
						pmodelid[playerid] == 550)
				    	{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 401) // bravura
				        	{
				            AddVehicleComponent(carVar,1005);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 518) // buccaneer
				        	{
				            AddVehicleComponent(carVar,1005);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 589) // club
				        	{
				            AddVehicleComponent(carVar,1005);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 492) // greenwood
				        	{
				            AddVehicleComponent(carVar,1005);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 426) // premier
				        	{
				            AddVehicleComponent(carVar,1005);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 550) // sunrise
				        	{
				            AddVehicleComponent(carVar,1005);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
							}
						}
						else
						{
						SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
						}
		    		}
	        	    case 1: // Champ
	        	    {
	                if(
						pmodelid[playerid] == 401 ||
						pmodelid[playerid] == 492 ||
						pmodelid[playerid] == 546 ||
						pmodelid[playerid] == 426 ||
						pmodelid[playerid] == 550)
				    	{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 401) // bravura
				        	{
				            AddVehicleComponent(carVar,1004);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 546) // intruder
				        	{
				            AddVehicleComponent(carVar,1004);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 492) // greenwood
				        	{
				            AddVehicleComponent(carVar,1004);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 426) // premier
				        	{
				            AddVehicleComponent(carVar,1004);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 550) // sunrise
				        	{
				            AddVehicleComponent(carVar,1004);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
							}
						}
						else
						{
						SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 2: // Race
	        	    {
	                if(
						pmodelid[playerid] == 549)
				    	{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 549) // tampa
				        	{
				            AddVehicleComponent(carVar,1011);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
							}
						}
						else
						{
						SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
	        	    case 3: // Worx
	        	    {
	                if(
						pmodelid[playerid] == 549)
				    	{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 549) // tampa
				        	{
				            AddVehicleComponent(carVar,1012);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
							}
						}
						else
						{
						SendError(playerid, "Tento komponent nemôe prida na toto auto!");
						ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
						}
	        	    }
					case 4:
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_hoods, DIALOG_STYLE_LIST, "KAPOTY", "Fury\nChamp\nRace\nWorx\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
					case 5: // Back
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
				}
			}
		}
		////////////////////////////////////////end of hoods///////////
	    case did_tuning_vents://////////////////VENTS//////////////////
	    {
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
	        if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:// Oval
	        	    {
	     				if(
						pmodelid[playerid] == 401 ||//bravura
						pmodelid[playerid] == 518 ||//buccaneer
						pmodelid[playerid] == 546 ||//intruder
						pmodelid[playerid] == 517 ||//majestic
						pmodelid[playerid] == 603 ||//phoenix
						pmodelid[playerid] == 547 ||//primo
						pmodelid[playerid] == 439 ||//stallion
						pmodelid[playerid] == 550 ||//sunrise
						pmodelid[playerid] == 549)//tampa
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 401) // bravura
				        	{
				            AddVehicleComponent(carVar,1142);
				            AddVehicleComponent(carVar,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 518) // buccaneer
				        	{
				            AddVehicleComponent(carVar,1142);
				            AddVehicleComponent(carVar,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 546) // intruder
				        	{
				            AddVehicleComponent(carVar,1142);
				            AddVehicleComponent(carVar,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 517) // majestic
				        	{
				            AddVehicleComponent(carVar,1142);
				            AddVehicleComponent(carVar,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 603) // phoenix
				        	{
				            AddVehicleComponent(carVar,1142);
				            AddVehicleComponent(carVar,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 547) // primo
				        	{
				            AddVehicleComponent(carVar,1142);
				            AddVehicleComponent(carVar,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 439) // stallion
				        	{
				            AddVehicleComponent(carVar,1142);
				            AddVehicleComponent(carVar,1143);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 550) // sunrise
				        	{
				            AddVehicleComponent(carVar,1142);
				            AddVehicleComponent(carVar,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 549) // tampa
				        	{
				            AddVehicleComponent(carVar,1142);
				            AddVehicleComponent(carVar,1143);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    	else
							{
								SendError(playerid, "Tento komponent nemôe prida na toto auto!");
								ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
					}
	        	    case 1: // Square
	        	    {
	                if(
						pmodelid[playerid] == 401 ||//bravura
						pmodelid[playerid] == 518 ||//buccaneer
						pmodelid[playerid] == 589 ||//club
						pmodelid[playerid] == 546 ||//intruder
						pmodelid[playerid] == 517 ||//majestic
						pmodelid[playerid] == 603 ||//phoenix
						pmodelid[playerid] == 439 ||//stallion
						pmodelid[playerid] == 550 ||//sunrise
						pmodelid[playerid] == 549)//tampa
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 401) // bravura
				        	{
				            AddVehicleComponent(carVar,1144);
				            AddVehicleComponent(carVar,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 518) // buccaneer
				        	{
				            AddVehicleComponent(carVar,1144);
				            AddVehicleComponent(carVar,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 589) // club
				        	{
				            AddVehicleComponent(carVar,1144);
				            AddVehicleComponent(carVar,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 546) // intruder
				        	{
				            AddVehicleComponent(carVar,1144);
				            AddVehicleComponent(carVar,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 517) // majestic
				        	{
				            AddVehicleComponent(carVar,1144);
				            AddVehicleComponent(carVar,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 603) // phoenix
				        	{
				            AddVehicleComponent(carVar,1144);
				            AddVehicleComponent(carVar,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 439) // stallion
				        	{
				            AddVehicleComponent(carVar,1144);
				            AddVehicleComponent(carVar,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 550) // sunrise
				        	{
				            AddVehicleComponent(carVar,1144);
				            AddVehicleComponent(carVar,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 549) // tampa
				        	{
				            AddVehicleComponent(carVar,1144);
				            AddVehicleComponent(carVar,1145);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	              			else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
					case 2: // _
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
	        	    case 3: // Back
	        	    {
	                ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
				}
			}
		}


		///////////END OF VENTS///////////
		case did_tuning_lights://////////////////LIGTS//////////////////
	    {
	        if(!response)
	        {
	            SetCameraBehindPlayer(playerid);
	        }
	        if(response)
	        {
	           	switch(listitem)// Checking which list item was selected
	        	{
	        	    case 0:// round
	        	    {
	     				if(
						pmodelid[playerid] == 401 ||//bravura
						pmodelid[playerid] == 518 ||//buccaneer
						pmodelid[playerid] == 589 ||//club
						pmodelid[playerid] == 400 ||//landstalker
						pmodelid[playerid] == 436 ||//previon
						pmodelid[playerid] == 439)//stallion
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 401) // bravura
				        	{
	               			AddVehicleComponent(carVar,1013);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	               			ShowPlayerDialog(playerid, did_tuning_lights, DIALOG_STYLE_LIST, "SVETLÁ", "Round\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 518) // buccaneer
				        	{
				            AddVehicleComponent(carVar,1013);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	               			ShowPlayerDialog(playerid, did_tuning_lights, DIALOG_STYLE_LIST, "SVETLÁ", "Round\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 589) // club
				        	{
				            AddVehicleComponent(carVar,1013);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_lights, DIALOG_STYLE_LIST, "SVETLÁ", "Round\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 400) // landstalker
				        	{
				            AddVehicleComponent(carVar,1013);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	           			 	ShowPlayerDialog(playerid, did_tuning_lights, DIALOG_STYLE_LIST, "SVETLÁ", "Round\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 436) // previon
				        	{
				            AddVehicleComponent(carVar,1013);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_lights, DIALOG_STYLE_LIST, "SVETLÁ", "Round\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 439) // stallion
				        	{
				            AddVehicleComponent(carVar,1013);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_lights, DIALOG_STYLE_LIST, "SVETLÁ", "Round\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	                    else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_lights, DIALOG_STYLE_LIST, "SVETLÁ", "Round\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
					}
	        	    case 1: // Square
	        	    {
	                if(
						pmodelid[playerid] == 589 ||//club
						pmodelid[playerid] == 603 ||//phoenix
						pmodelid[playerid] == 400)//landstalker
						{
				        	new carVar = pvehicleid[playerid];
				        	if(pmodelid[playerid] == 589) // club
				        	{
				            AddVehicleComponent(carVar,1024);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 603) // phoenix
				        	{
				            AddVehicleComponent(carVar,1024);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
				            ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
				        	if(pmodelid[playerid] == 400) // landstalker
				        	{
				            AddVehicleComponent(carVar,1024);
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            SendSuccess(playerid, "Komponent pridaný!");
	                        ShowPlayerDialog(playerid, did_tuning_vents, DIALOG_STYLE_LIST, "VETRANIA", "Oval\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    	}
	        	    	else
							{
							SendError(playerid, "Tento komponent nemôe prida na toto auto!");
							ShowPlayerDialog(playerid, did_tuning_lights, DIALOG_STYLE_LIST, "SVETLÁ", "Round\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
							}
	        	    }
					case 2: // _
	        	    {
	                	ShowPlayerDialog(playerid, did_tuning_lights, DIALOG_STYLE_LIST, "SVETLÁ", "Round\nSquare\n \nSpä", "PRIDA", "ZAVRIE");
	        	    }
	        	    case 3: // Back
	        	    {
	                	ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	        	    }
				}
			}
		}

	    case did_whitelist_reason:
	    {
	        if(!response)
	            return ShowPlayerWhitelistDetail(playerid, wl_count[playerid]);

			if(strlen(inputtext) < 1)
			    return ShowPlayerDialog(playerid, did_whitelist_reason, DIALOG_STYLE_INPUT, "WHITELIST (VERDIKT)", "> Zadaj dôvod, preèo chce iados schváli!", "OK", "SPA");

			new
			    activated = 0,
				query[ 1024 ];

			if(wl_verdikt[playerid] == true)
			    activated = 1;
			else
			    activated = 2;

			mysql_format(MYSQL, query, sizeof query, "UPDATE master_accounts SET Activated = '%d', Activated_Admin = '%e', Activated_Reason = '%e' WHERE Username = '%e'",
			    activated, ReturnMaster(playerid), inputtext, wl_editname[playerid]);

			mysql_query(MYSQL, query, false);

			if(activated == 1)
				format(query, sizeof query, "Schválil si úèet '%s' s dôvodom: %s", wl_editname[playerid], inputtext),
				FormatLog(log_type_admin, "%s(%s) schvalil ucet '%s' s dovodom: %s", ReturnName(playerid), ReturnIP(playerid), wl_editname[playerid], inputtext);
			else
			    format(query, sizeof query, "Zamietol si úèet '%s' s dôvodom: %s", wl_editname[playerid], inputtext),
			    FormatLog(log_type_admin, "%s(%s) zamietol ucet '%s' s dovodom: %s", ReturnName(playerid), ReturnIP(playerid), wl_editname[playerid], inputtext);

			SendSuccess(playerid, query);

			ShowPlayerWhitelist(playerid);

			foreach( new i : Player )
			{

			    if(playerWaiting[i] == false)
			        continue;

				if(strcmp(ReturnName(i), wl_editname[playerid], true))
				    continue;

			    playerWaiting[i] = false;

			    login_Pokus[i] = 3;
				ShowLoginDialogForPlayer(i);
			}
	    }

	    case did_whitelist_detail:
	    {
	        if(!response)
	            return ShowPlayerWhitelist(playerid);

			if(listitem < 2)
			    return ShowPlayerWhitelistDetail(playerid, wl_count[playerid]);

			if(listitem == 2)
                wl_verdikt[playerid] = true;
			else
			    wl_verdikt[playerid] = false;

   			ShowPlayerDialog(playerid, did_whitelist_reason, DIALOG_STYLE_INPUT, "WHITELIST (VERDIKT)", "> Zadaj dôvod, preèo chce iados schváli!", "OK", "SPA");
	    }

	    case did_whitelist:
	    {
	        if(!response)
	            return 1;

			ShowPlayerWhitelistDetail(playerid, listitem);
	    }

	    case did_graffiti_menu:
	    {
	        if(!response)
	        {

	            ShowPlayerGraffitiMenu(playerid, playerEditingTagId[playerid]);

			    return 1;
	        }

	        new
        		tagId = playerEditingTagId[playerid];

	        switch(listitem)
	        {

	            case 0:
	            {
	                return ShowPlayerDialog(playerid, did_graffiti_input_text, DIALOG_STYLE_INPUT, "TVORBA SPRAY TAGU",
	                    "{FFFFFF}> Zadaj prosím text tagu!\nFarbu zadá tak, e pouije hranaté zátvorky {dfae51}[] {ffffff}a medzi ne vloí esmiestny HEX kód. Nový riadok tak, e napíe {dfae51}[LINE]{ffffff}\nNapríklad, {dfae51}[FF0000] {ffffff}bude èervená farba.\nNa zistenie hex kódu poui napríklad stránku {dfae51}www.color-hex.com{ffffff}!",
						"OK", "SPA"
					);
	            }

	            case 1:
	            {
	                new
	                    arrayid = -1;

					for( new i; i < sizeof(stag_fontArray); i++)
					{
					    if(strcmp(stag_fontArray[i], graffitiEnum[tagId][graffiti_Font], true))
					        continue;

						arrayid = i;
						break;
					}

					if(arrayid + 1 >= sizeof(stag_fontArray))
					    arrayid = 0;
					else
					    arrayid++;

					format(graffitiEnum[tagId][graffiti_Font], 32, "%s", stag_fontArray[arrayid]);
					RefreshGraffitiTag(tagId);
	                ShowPlayerGraffitiMenu(playerid, playerEditingTagId[playerid]);
	            }

	            case 2:
	            {
	                return ShowPlayerDialog(playerid, did_graffiti_input_fontsize, DIALOG_STYLE_INPUT, "TVORBA SPRAY TAGU",
	                    "{FFFFFF}> Zadaj prosím ve¾kos písma, ktorou bude text v tagu napísaný!\nMinimálna hodnota je 8, maximálna 32!",
						"OK", "SPA"
					);
	            }

	            case 3:
	            {
	                graffitiEnum[tagId][graffiti_Bold] = !graffitiEnum[tagId][graffiti_Bold];
	                RefreshGraffitiTag(tagId);
	                ShowPlayerGraffitiMenu(playerid, playerEditingTagId[playerid]);
	            }

	            case 4:
	            {
	                graffitiEnum[tagId][graffiti_MatSize] += 10;
	                if(graffitiEnum[tagId][graffiti_MatSize] > 140)
	                    graffitiEnum[tagId][graffiti_MatSize] = 40;

	                RefreshGraffitiTag(tagId);
	                ShowPlayerGraffitiMenu(playerid, playerEditingTagId[playerid]);
	            }

	            case 5:
	            {
	                SendClientMessage(playerid, 0xdfae51ff, "[ SPRAY TAG ]; {FFFFFF}Prezri si, ako bude tag vyzera, o 6 sekúnd sa ti menu znova otvorí!");
					SetTimerEx("tag_ReopenMenu", 6000, false, "i", playerid);
				}

				case 6:
				{
				    // Uloi tag
				    isPlayerEditingTag[playerid] = false;
				    playerEditingTagId[playerid] = -1;

				    SendClientMessage(playerid, 0xdfae51ff, "[ SPRAY TAG ]; {FFFFFF}Uloil si nový spray tag!");

				    new
				        Float:fX, Float:fY, Float:fZ,
				        Float:fRX, Float:fRY, Float:fRZ,

				        query[ 1024 ];

					GetDynamicObjectPos(graffitiEnum[tagId][graffiti_ObjectId], fX, fY, fZ);
					GetDynamicObjectRot(graffitiEnum[tagId][graffiti_ObjectId], fRX, fRY, fRZ);

					graffitiEnum[tagId][graffiti_IsBeingEdited] = false;
					graffitiEnum[tagId][graffiti_EditedBy]     = -1;
					format(graffitiEnum[tagId][graffiti_Owner], 32, ReturnName(playerid));

					mysql_format(MYSQL, query, sizeof query,
						"INSERT INTO gm_graffiti (Text, MatSize, Font, FontSize, Bold, X, Y, Z, RX, RY, RZ, VW, INTERIOR, Owner) VALUES ('%e', '%d', '%e', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%e')",
						graffitiEnum[tagId][graffiti_Text],
						graffitiEnum[tagId][graffiti_MatSize],
						graffitiEnum[tagId][graffiti_Font], graffitiEnum[tagId][graffiti_FontSize],
						graffitiEnum[tagId][graffiti_Bold],

						fX, fY, fZ,
						fRX, fRY, fRZ,

						GetPlayerVirtualWorld(playerid),
						GetPlayerInterior(playerid),

						ReturnName(playerid)
					);

					mysql_query(MYSQL, query, false);

				}

				case 7:
				{
				    isPlayerEditingTag[playerid] = false;
				    playerEditingTagId[playerid] = -1;

				    DestroyDynamicObject(graffitiEnum[tagId][graffiti_ObjectId]);

				    Iter_Remove(Graffiti, tagId);

				    SendClientMessage(playerid, 0xdfae51ff, "[ SPRAY TAG ]; {FFFFFF}Zmazal si spray tag!");
				}

				default:
				{
				    ShowPlayerGraffitiMenu(playerid, playerEditingTagId[playerid]);
				}
	        }
		}

		case did_graffiti_input_fontsize:
		{
		    if(!response)
		        return ShowPlayerGraffitiMenu(playerid, playerEditingTagId[playerid]);

			if(strlen(inputtext) < 1 || strval(inputtext) < 8 || strval(inputtext) > 32)
			{
			    SendClientMessage(playerid, 0xdfae51ff, "[ SPRAY TAG ]; {FFFFFF}Prosím, zadaj ve¾kos písma od 8 po 32!");

			    return ShowPlayerDialog(playerid, did_graffiti_input_fontsize, DIALOG_STYLE_INPUT, "TVORBA SPRAY TAGU",
       				"{FFFFFF}> Zadaj prosím ve¾kos písma, ktorou bude text v tagu napísaný!\nMinimálna hodnota je 8, maximálna 32!",
					"OK", "SPA"
				);
			}

			new
        		tagId = playerEditingTagId[playerid];

            graffitiEnum[tagId][graffiti_FontSize] = strval(inputtext);
            RefreshGraffitiTag(tagId);

            ShowPlayerGraffitiMenu(playerid, playerEditingTagId[playerid]);
		}

		case did_graffiti_input_text:
		{
		    if(!response)
		        return ShowPlayerGraffitiMenu(playerid, playerEditingTagId[playerid]);

			if(strlen(inputtext) < 1)
			{
			    SendClientMessage(playerid, 0xdfae51ff, "[ SPRAY TAG ]; {FFFFFF}Prosím, zadaj text!");

			    return ShowPlayerDialog(playerid, did_graffiti_input_text, DIALOG_STYLE_INPUT, "TVORBA SPRAY TAGU",
       				"{FFFFFF}> Zadaj prosím text tagu!\nFarbu zadá tak, e pouije hranaté zátvorky {dfae51}[] {ffffff}a medzi ne vloí esmiestny HEX kód. Nový riadok tak, e napíe {dfae51}[LINE]{ffffff}.\nNapríklad, {dfae51}[FF0000] {ffffff}bude èervená farba.\nNa zistenie hex kódu poui napríklad stránku {dfae51}www.color-hex.com{ffffff}!",
					"OK", "SPA"
				);
			}

			new
        		tagId = playerEditingTagId[playerid],
				_tmpstring[256];

			format(_tmpstring, sizeof _tmpstring, "%s", str_replace("[", "{", inputtext));
			format(_tmpstring, sizeof _tmpstring, "%s", str_replace("]", "}", _tmpstring));
			format(_tmpstring, sizeof _tmpstring, "%s", str_replace("{LINE}", "\n", _tmpstring));

            format(graffitiEnum[tagId][graffiti_Text], 1024, _tmpstring);
            RefreshGraffitiTag(tagId);

            ShowPlayerGraffitiMenu(playerid, playerEditingTagId[playerid]);
		}
		case did_register:
		{

		    if(!response)
				return ex_KickPlayer(playerid, KICK_TYPE_SYSTEM, "Nezadal si nové heslo, bude vyhodený z bezpeènostných dôvodov!");

		    if(isnull(inputtext) || strlen(inputtext) < 6 || strlen(inputtext) > 32)
		    {
		        SendError(playerid, "Zadaj prosím heslo ktoré bude mat od 6 do 32 znakov!");

		        new
				    String[ 1024 ];

			    format(String, sizeof String,
				    "{FFFFFF}Vitaj na {e34f4f}%s{FFFFFF}!\nAby si mohol vstúpi, musí sa zaregistrova. Zadaj svoje heslo, no dvakrát si ho skontroluj!\n\nPrihlasovacie meno: {e34f4f}%s{FFFFFF}",
						"County Life: Roleplay", ReturnName(playerid)
				);

				return ShowPlayerDialog(playerid, did_register, DIALOG_STYLE_PASSWORD, "REGISTER", String, "REGISTER", "ODPOJI");
		    }

		    format(ppass[playerid], 256, inputtext);

		    new req[256];
		    new IP[16];
      		GetPlayerIp(playerid,IP,sizeof(IP));

		    if(strlen(IP)<1) return 1;
		    format(req, sizeof(req),"geoip.cybernieve.com/?IP=%s",IP); //// Replace the address (geoip.cybernieve.com) if you've setup your own GEO-IP Server

			HTTP(playerid, HTTP_GET, req, "", "GEOIP_HTTPREQUEST_REGISTER");

		}

	    case did_adtable_new_text:
	    {
	        if(!response || isnull(inputtext))
        	{
        	    adtabula_bizid[playerid] = -1;
        	    adtabula_model[playerid] = -1;
        	    adtabula_objectid[playerid] = -1;
        	    adtabula_editingid[playerid] = -1;
				return SendSuccess(playerid, "Tabula uloená!");
			}

			format(adTableEnum[adtabula_editingid[playerid]][adt_Text], 256, "%s", str_replace("=", "\n", inputtext));

			new
			    query[ 1024 ];

			mysql_format(MYSQL, query, sizeof query, "UPDATE gm_adtabula SET LABEL = '%e' WHERE AssignedBiz = '%d'",
			    adTableEnum[adtabula_editingid[playerid]][adt_Text], adtabula_bizid[playerid]);

			UpdateDynamic3DTextLabelText(adTableEnum[adtabula_editingid[playerid]][adt_LabelID], 0xFFFFFFFF, adTableEnum[adtabula_editingid[playerid]][adt_Text]);

			adtabula_bizid[playerid] = -1;
   			adtabula_model[playerid] = -1;
       	    adtabula_objectid[playerid] = -1;
       	    adtabula_editingid[playerid] = -1;

            SendSuccess(playerid, "Tabula uloená s vlastným textom!");
	    }

	    case did_adtable_text:
	    {
	        if(!response || isnull(inputtext))
        	{
        	    adtabula_bizid[playerid] = -1;
        	    adtabula_model[playerid] = -1;
        	    adtabula_objectid[playerid] = -1;
        	    adtabula_editingid[playerid] = -1;
				return SendSuccess(playerid, "Editácia zruená!");
			}

			format(adTableEnum[adtabula_editingid[playerid]][adt_Text], 256, "%s", str_replace("=", "\n", inputtext));

			new
			    query[ 1024 ];

			mysql_format(MYSQL, query, sizeof query, "UPDATE gm_adtabula SET LABEL = '%e' WHERE AssignedBiz = '%d'",
			    str_replace("=", "\n", inputtext), adtabula_bizid[playerid]);
			mysql_query(MYSQL, query, false);

			UpdateDynamic3DTextLabelText(adTableEnum[adtabula_editingid[playerid]][adt_LabelID], 0xFFFFFFFF, adTableEnum[adtabula_editingid[playerid]][adt_Text]);

			adtabula_bizid[playerid] = -1;
   			adtabula_model[playerid] = -1;
       	    adtabula_objectid[playerid] = -1;
       	    adtabula_editingid[playerid] = -1;

            SendSuccess(playerid, "Tabula uloená!");
	    }

	    case did_advert:
	    {
	        if(!response || isnull(inputtext) || strlen(inputtext) < 3)
	            return 1;
	            
			if(strlen(inputtext) > 92)
			{
			    SendError(playerid, "Advert nemôe by dlhí, ako 92 znakov.");
			    return ShowPlayerDialog(playerid, did_advert, DIALOG_STYLE_INPUT, "ADVERT", "{ffffff}> Zadaj text tvojej reklamy! Za kadý znak zaplatí 1$ ak nie si Donator Level 2+.",
	        		"PUBLIKUJ", "SPA");
			}

			new cena = strlen(inputtext);
			if(GetPlayerDonatorLevel(playerid) < 2)
			{
				if(ex_GetPlayerMoney(playerid) < cena)
				    return SendError(playerid, "Nemá dos peòazí!");

				ex_GivePlayerMoney(playerid, -cena);
				money_spent[playerid] += floatround(cena,floatround_round);
			}

			for(new f; f < MAX_FACTIONS; f++)
		    {
		        if(strlen(factEnum[f][fact_Name]) < 3) continue;
			    if(factEnum[f][fact_Type] == FACTION_TYPE_MEDIA) {
		            factEnum[f][fact_Cash] += cena;
		            break;
			    }
		    }

			new
			    str[ 256 ];

			if(phone_getPlayerNumber(playerid) == -1 || !phone_playerHasPhone(playerid))
			    format(str, 256, "[Advert] %s [%s]", replaceChars(inputtext), GetPlayerNameEx(playerid, NO_MASK));
			else
                format(str, 256, "[Advert] %s [%d]", replaceChars(inputtext), phone_getPlayerNumber(playerid));
                
			SendClientMessageToAll(0x5eb04cff, str);
	    }

		case did_zosrotovat:
		{

			if(!response)
			    return 1;

		    if(!IsPlayerInAnyVehicle(playerid))
		   		return SendError(playerid, "Nesedí v iadnom vozidle!");

			if(GetPlayerVehicleSeat(playerid) != 0)
		 		return SendError(playerid, "Aby si mohol otvori zorotovanie vozidla, musí by ofér!");

			new
		 		vid = GetPlayerVehicleID(playerid);

			if(strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
		 		return SendError(playerid, "Toto vozidlo nepatrí tebe!");

		    FormatLog(log_type_buythings, "%s(%s - %s) zosrotoval vozidlo so SPZ %s.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), vEnum[vid][v_SPZ]);

		    new mysql[90];

		    mysql_format(MYSQL, mysql, sizeof mysql, "DELETE FROM char_vehicles WHERE SPZ = '%e'", vEnum[vid][v_SPZ]);
		    mysql_query(MYSQL, mysql, false);
		    
            RemoveAttachObj(vid);
			DestroyVehicle(vid);

		    return 1;
		}

	    case did_fdhq_patro:
	    {
	        if(!response)
	            return SetPlayerPos(playerid, 53.199, 1667.297, 1222.087);
			else
			    return SetPlayerPos(playerid, 53.625, 1667.373, 1217.996);
	    }

	    case did_pdhq_garaz:
	    {
	        if(!response)
        	{
				return 1;
			}
			
			if(listitem == 0)
			{
                SetPlayerPos(playerid, 618.8087,-566.8553,26.1432);
			    SetPlayerFacingAngle(playerid, 90.0);
			    SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);

				TogglePlayerControllable(playerid, 0);
		    	SetTimerEx("UnFreezePlayer", 2000, false, "i", playerid);
			    //strecha
			}
			else if(listitem == 1)
			{
			    SetPlayerPos(playerid, 136.168, 1932.535, 646.211);
			    SetPlayerFacingAngle(playerid, 180.0);
			    SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 12347);

				TogglePlayerControllable(playerid, 0);
		    	SetTimerEx("UnFreezePlayer", 2000, false, "i", playerid);
		    	//stanice
			}
			else if(listitem == 2)
			{
			    SetPlayerPos(playerid, 611.026, -584.004, 17.972);
			    SetPlayerFacingAngle(playerid, 180.0);
			    SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);

				TogglePlayerControllable(playerid, 0);
		    	SetTimerEx("UnFreezePlayer", 2000, false, "i", playerid);
		    	//zadny vchod
			}
			else
			{
			    SetPlayerPos(playerid, 282.3517,-1513.8715,24.9219);
				SetPlayerFacingAngle(playerid, 232.2680);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 10);

				TogglePlayerControllable(playerid, 0);
		    	SetTimerEx("UnFreezePlayer", 2000, false, "i", playerid);
		    	//garaz
			}
	    }

	    case did_buy_ammo:
		{
			if(!response)
			    return 1;

			new
			    cena = 0,
			    pocetnabojov = 0;

			switch(listitem)
			{
			    case 0:
			    {
			        cena = 40;
			        pocetnabojov = 10;
			    }

			    case 1:
			    {
			        cena = 114;
			        pocetnabojov = 30;
			    }

			    case 2:
			    {
			        cena = 175;
			        pocetnabojov = 50;
			    }

			    case 3:
			    {
			        cena = 340;
			        pocetnabojov = 100;
			    }

			    case 4:
			    {
			        cena = 480;
			        pocetnabojov = 150;
			    }

			    case 5:
			    {
			        cena = 1500;
			        pocetnabojov = 500;
			    }
			}

			if(cena > ex_GetPlayerMoney(playerid))
			    SendError(playerid, "Nemá dos peòazí!");
			else
			{
			    ex_GivePlayerMoney(playerid, -cena);
			    money_spent[playerid] += floatround(cena,floatround_round);
			    SetPlayerInventoryItem(playerid, inv_naboje, GetPlayerInventoryItem(playerid, inv_naboje) + pocetnabojov);

			    FormatLog(log_type_buythings, "%s(%s - %s) si zakupil %d nabojov za %d$", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), pocetnabojov, cena);

			    SendSuccess(playerid, "Zakúpil si náboje!");
			}

			ShowPlayerAmmoShop(playerid);

			return 1;

		}

	    // Zobrazuje si zoznam svojich doplnkov
	    case did_clothing:
	    {

	        if(!response)
	            return 1;

			switch(listitem)
			{

				case 0:
				{
				    // Chce prida nový doplnok

				    Attachment_AddNew(playerid);

				}

				default:
				{
				    // Klikol na u existujúci doplnok

				    Attachment_ShowItem(playerid, listitem - 1);
				}

			}
	    }

	    // Pokúa sa vytvori nový doplnok
	    case did_clothing_new_model:
	    {

	        if(!response)
	            return Attachment_Show(playerid);
	            
            new x = -1;

			for (new i; i < sizeof attachmentModels; i++)
			{
				if(attachmentModels[i][1]!=0 && (GetPlayerAdminLevel(playerid) < 3 && attachmentModels[i][1] != GetPlayerFactionType(playerid)))
					continue;

				x ++;
				if(x != listitem) continue;
				listitem = i;
				break;
			}

			clothingNew_Index[ playerid ] = listitem;
			clothingNew_Model[ playerid ] = attachmentModels[listitem][0];

	        SendSuccess(playerid, "Vybral si si doplnok! Zvol prosím kos, na ktorú chce objekt nastavi.");
	        SendSuccess(playerid, "Poznámka: Chrbát = Záda (høbet).");

	        Attachment_AddNew_Bone(playerid);
	    }

	    case did_clothing_new_bone:
	    {

	        if(!response)
	            return Attachment_AddNew(playerid);

			new
			    bone = listitem + 1,
			    freeslot = -1;

            for ( new i; i < ATTACH_MAX_CLOTHING.[playerid]; i++)
			{

			    // Kontroluje èi doplnok neexistuje
			    if(playerAttachments[playerid][i][MODELID] != 0)
			        continue;

				freeslot = i;
				break;
			}

			if(freeslot == -1)
			    return
			        SendError(playerid, "Nemá volný slot na nový doplnok!"),
			        Attachment_AddNew_Bone(playerid);

			playerAttachments[playerid][freeslot][MODELID] 	= clothingNew_Model[playerid];
			playerAttachments[playerid][freeslot][ACTIVE] 	= false;
			playerAttachments[playerid][freeslot][INDEX]    = -1;
			playerAttachments[playerid][freeslot][BONE]     = bone;
			playerAttachments[playerid][freeslot][COLOR1]   = CLOTHING_USE_DEFAULT_COLOR;
			playerAttachments[playerid][freeslot][COLOR2]   = CLOTHING_USE_DEFAULT_COLOR;

			playerAttachments[playerid][freeslot][FOFFSETX] = 0.0;
			playerAttachments[playerid][freeslot][FOFFSETY] = 0.0;
			playerAttachments[playerid][freeslot][FOFFSETZ] = 0.0;

			playerAttachments[playerid][freeslot][FROTX] = 0.0;
			playerAttachments[playerid][freeslot][FROTY] = 0.0;
			playerAttachments[playerid][freeslot][FROTZ] = 0.0;

			playerAttachments[playerid][freeslot][FSCALEX] = 1.0;
			playerAttachments[playerid][freeslot][FSCALEY] = 1.0;
			playerAttachments[playerid][freeslot][FSCALEZ] = 1.0;

			SendSuccess(playerid, "Nový doplnok úspene pridaný do zoznamu, môe ho nasadi!");

			Attachment_Show(playerid);
	    }

	    // Menu s konkrétnym doplnokm
	    case did_clothing_menu:
	    {

	        if(!response)
	            return Attachment_Show(playerid);

			switch(listitem)
			{

			    case 0:
			    {

			        // Nasadi / skry

			        if(playerAttachments[playerid][ clothingMenu_Edit[playerid] ][ACTIVE] == true)
			        {
			            // Skry doplnok

			            RemovePlayerAttachedObject(playerid, playerAttachments[playerid][ clothingMenu_Edit[playerid] ][INDEX]);

                        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][INDEX] = -1;
                        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][ACTIVE] = false;

                        SendError(playerid, "Doplnok skrytý!");

                        Attachment_ShowItem(playerid, -1, clothingMenu_Edit[playerid] );

			        }
			        else
			        {
			            // Nasadi doplnok

			            new
			                index = -1;

					    for ( new i; i < ATTACH_MAX_SLOTS; i++)
					    {

					        if(IsPlayerAttachedObjectSlotUsed(playerid, i))
					            continue;

							index = i;

							break;
					    }

					    if(index == -1)
					        return
					            SendError(playerid, "Nemá volný slot na nasadenie doplnku, najprv nejaký skry!"),
					            Attachment_ShowItem(playerid, -1, clothingMenu_Edit[playerid] );


					    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][INDEX] = index;
					    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][ACTIVE] = true;

					    SetPlayerAttachedObject(playerid, index,
					        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][MODELID],
					        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][BONE],
					        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETX],
					        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETY],
					        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETZ],
					        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTX],
					        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTY],
					        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTZ],
					        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEX],
					        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEY],
					        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEZ],
					        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][COLOR1],
					        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][COLOR2]
						);

					    SendSuccess(playerid, "Doplnok nasadený!");

					    Attachment_ShowItem(playerid, -1, clothingMenu_Edit[playerid] );
			        }
			    }

			    case 2:
			    {
					// Upravi pozíciu

					if(playerAttachments[playerid][ clothingMenu_Edit[playerid] ][ACTIVE] == false)
					    return
					        SendError(playerid, "Ak chce upravi pozíciu doplnku, musí by nasadený!"),
					        Attachment_ShowItem(playerid, -1, clothingMenu_Edit[playerid] );

					clothingMenu_Editing[ playerid ] = true;
					EditAttachedObject(playerid, playerAttachments[playerid][ clothingMenu_Edit[playerid] ][INDEX]);

					return 1;

			    }

			    case 3:
			    {
			        // Upravi kos

			        return Attachment_EditBone(playerid);
			    }

			    case 5:
			    {
			        // Prefarbi doplnok

			        return
			            ShowPlayerDialog(playerid, did_clothing_menu_color_menu, DIALOG_STYLE_LIST, "PREFARBI DOPLNOK",
							"Prefarbi farbu na slote 1\nPrefarbi farbu na slote 2",
							"VYBRA", "ZRUI");
			    }

			    case 7:
			    {
			        // Zmaza doplnok

			        if(playerAttachments[playerid][ clothingMenu_Edit[playerid] ][ACTIVE] == true)
						RemovePlayerAttachedObject(playerid, playerAttachments[playerid][ clothingMenu_Edit[playerid] ][INDEX]);

                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][ACTIVE] 		= false;
                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][INDEX] 		= -1;
                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][BONE]    	= 0;
                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][MODELID] 	= 0;

                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETX]    = 0.0;
                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETY]    = 0.0;
                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETZ]    = 0.0;

                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTX]    	= 0.0;
                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTY]    	= 0.0;
                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTZ]    	= 0.0;

                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEX]    	= 0.0;
                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEY]    	= 0.0;
                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEZ]    	= 0.0;

                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][COLOR1]     	= 0;
                    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][COLOR2]     	= 0;

                    SendError(playerid, "Doplnok úspene zmazaný!");

                    Attachment_Show(playerid);
				}

			    default:
			        return
			            Attachment_ShowItem(playerid, -1, clothingMenu_Edit[playerid] );

			}

	    }

	    case did_clothing_menu_bone:
	    {

	        if(!response)
	            return
	                Attachment_ShowItem(playerid, -1, clothingMenu_Edit[playerid] );

            playerAttachments[playerid][ clothingMenu_Edit[playerid] ][BONE] = listitem + 1;

            if(playerAttachments[playerid][ clothingMenu_Edit[playerid] ][ACTIVE] == true)
            {
	            SetPlayerAttachedObject(playerid, playerAttachments[playerid][ clothingMenu_Edit[playerid] ][INDEX],
		        	playerAttachments[playerid][ clothingMenu_Edit[playerid] ][MODELID],
	     			playerAttachments[playerid][ clothingMenu_Edit[playerid] ][BONE],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETX],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETY],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETZ],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTX],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTY],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTZ],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEX],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEY],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEZ],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][COLOR1],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][COLOR2]
				);
			}

			SendSuccess(playerid, "Kos doplnku úspene upravená!");

			Attachment_ShowItem(playerid, -1, clothingMenu_Edit[playerid] );

			return 1;
	    }

	    case did_clothing_menu_color_menu:
	    {

	        if(!response)
	            return Attachment_ShowItem(playerid, -1, clothingMenu_Edit[playerid] );

            clothingColor_Slot[ playerid ] = listitem + 1;

			Attachment_ShowColorPalette(playerid);
	    }

	    case did_clothing_menu_color:
	    {
	        if(!response)
	            return
	            	ShowPlayerDialog(playerid, did_clothing_menu_color_menu, DIALOG_STYLE_LIST, "PREFARBI DOPLNOK",
						"Prefarbi farbu na slote 1\nPrefarbi farbu na slote 2",
						"VYBRA", "ZRUI");

			if(clothingColor_Slot[ playerid ] == 1)
			    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][COLOR1] = attachmentPallete[listitem][1][0];
			else if(clothingColor_Slot[ playerid ] == 2)
			    playerAttachments[playerid][ clothingMenu_Edit[playerid] ][COLOR2] = attachmentPallete[listitem][1][0];

            if(playerAttachments[playerid][ clothingMenu_Edit[playerid] ][ACTIVE] == true)
            {
	            SetPlayerAttachedObject(playerid, playerAttachments[playerid][ clothingMenu_Edit[playerid] ][INDEX],
		        	playerAttachments[playerid][ clothingMenu_Edit[playerid] ][MODELID],
	     			playerAttachments[playerid][ clothingMenu_Edit[playerid] ][BONE],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETX],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETY],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETZ],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTX],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTY],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTZ],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEX],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEY],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEZ],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][COLOR1],
			        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][COLOR2]
				);
			}

			SendSuccess(playerid, "Farba doplnku úspene upravená!");

            return Attachment_ShowColorPalette(playerid);
	    }
	    
		case did_fos:
	    {
			if(!response)
			    return 0;

			switch(listitem)
			{

				case 0:
				{
			        // Posledné hovory
			        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);

			        return ShowPlayerLastCallsFD(playerid);
				}

			    case 1:
			    {

			        // Stránici v slube
			        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
			        new
			            string[2048] = "{60a5f2}Zamestnanci v slube:\n{ffffff}";

					foreach ( new i : Player )
					{
					    if(!IsPlayerLogged(i))
					        continue;

						if(GetPlayerFactionType(i) != FACTION_TYPE_FIRE)
						    continue;

						if(!IsPlayerWorking(i))
						    continue;

						format(string, 2048, "%s\n\r\t%s %s (%d/10, bdg.: %d)",
						    string, GetPlayerFactionTitle(i), GetPlayerNameEx(i, NO_MASK),
						    GetPlayerFactionRank(i), GetPlayerFactionBadge(i));
					}

					return ShowPlayerDialog(playerid, did_fos_online, DIALOG_STYLE_MSGBOX, "FIRE OPERATING SYSTEM",
					    string, "OK", "");

			    }

			    case 2:
			    {
			        ShowPlayerCCTVMenuFD(playerid);
			    }

				default:
			    {
			        return ShowPlayerFOS(playerid);
			    }

			}
	    }

	    case did_fos_online:
	    {
	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	        return ShowPlayerFOS(playerid);
	    }

	    case did_fos_calls:
	    {
	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);

	        if(!response)
	            return ShowPlayerFOS(playerid);

            ShowFDCallDetails(playerid, listitem);
	    }

	    case did_fos_call:
	    {

	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	        if(!response)
	            return ShowPlayerLastCallsFD(playerid);

	        ShowPlayerDialog(playerid, did_fos_call_menu, DIALOG_STYLE_LIST, "FIRE OPERATING SYSTEM",
	            "Kontaktova volajúceho\nVymaza z databáze",
	            "VYBRA", "SPA");
	    }

	    case did_fos_call_menu:
	    {

	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	        if(!response)
	            return ShowFDCallDetails(playerid, mdc_CALL[playerid]);

			switch(listitem)
			{

				case 0:
				{

				    ProceedDial(playerid, mdc_CALLNUM[playerid]);

				    return 1;
				}

				case 1:
				{

				    if(GetPlayerFactionRank(playerid) < 4)
				        return SendError(playerid, "Pre zmazanie záznamu musí by aspoò rank 4!"), ShowPlayerDialog(playerid, did_fos_call_menu, DIALOG_STYLE_LIST, "FIRE OPERATING SYSTEM",
					            "Kontaktova volajúceho\nVymaza z databáze",
					            "VYBRA", "SPA");

				    new
				        query[90];

					mysql_format(MYSQL, query, sizeof query, "DELETE FROM gm_calls WHERE id = '%d'", mdc_CALLID[playerid]);
					mysql_query(MYSQL, query);

					SendError(playerid, "Záznam hovoru zmazaný!");

				    ShowPlayerLastCallsFD(playerid);
				}
			}
	    }

	    case did_mdc_cctv:
	    {
	        if(!response) return ShowPlayerMDC(playerid);
	        if(CCTVInfo[listitem][cctv_IsBroken] == 1) return SendError(playerid, "Táto kamera je znièená!"), ShowPlayerCCTVMenu(playerid);
	        PlayerViewCCTV(playerid, listitem);
	    }

	    case did_fos_cctv:
	    {
	        if(!response) return ShowPlayerFOS(playerid);
	        if(CCTVInfo[listitem][cctv_IsBroken] == 1) return SendError(playerid, "Táto kamera je znièená!"), ShowPlayerCCTVMenuFD(playerid);
	        PlayerViewCCTV(playerid, listitem);
	    }

	    case did_cctv:
	    {
	        if(!response) return 0;
	        if(CCTVInfo[listitem][cctv_IsBroken] == 1) SendError(playerid, "Táto kamera je znièená, nesmie slúi na IC úèely!");
	        PlayerViewCCTV(playerid, listitem);
	    }

	    case did_mdc:
	    {
			if(!response)
			    return 0;

			switch(listitem)
			{

			    case 0:
			    {
			        // Vyh¾ada obèana
			        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
			        return ShowPlayerMDC_SearchPerson(playerid);
			    }

			    case 1:
			    {
			        // Vyh¾ada vozidlo
			        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
			        return ShowPlayerMDC_SearchVehicle(playerid);
			    }
			    
			    case 2:
			    {
			        // Vystopova èíslo
			        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
			        return ShowPlayerMDC_TraceNumber(playerid);
			    }

			    case 3:
			    {

			        // Stránici v slube
			        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
			        new
			            string[2048] = "{60a5f2}Stránici v slube:\n{ffffff}";

					foreach ( new i : Player )
					{
					    if(!IsPlayerLogged(i))
					        continue;

						if(GetPlayerFactionType(i) != FACTION_TYPE_LAW)
						    continue;

						if(!IsPlayerWorking(i))
						    continue;

						format(string, 2048, "%s\n\r\t%s %s (%d/10, bdg.: %d)",
						    string, GetPlayerFactionTitle(i), GetPlayerNameEx(i, NO_MASK),
						    GetPlayerFactionRank(i), GetPlayerFactionBadge(i));
					}

					return ShowPlayerDialog(playerid, did_mdc_online, DIALOG_STYLE_MSGBOX, "MOBILE DATABASE COMPUTER",
					    string, "OK", "");

			    }

			    case 4:
			    {
			        // Posledné hovory
			        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);

			        return ShowPlayerLastCallsPD(playerid);
			    }

			    case 5:
			    {
			        // H¾adané vozidlá
			        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);

			        new
			            string[2048] = "{60a5f2}Daòové úniky:\n",
						query[256],
						Cache:cache;

					mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_pokuty WHERE (Date + 604800) < %d AND Paid = 0", gettime());
					cache = mysql_query(MYSQL, query);

					for(new i; i < cache_num_rows(); i++)
					{

					    new
					        Username[ 30 ],
					        Suma;

     					cache_get_value_name(i, "Username", Username);
     					cache_get_value_name_int(i, "Suma", Suma);

						format(string, 2048, "%s{ffffff}%s [ {7a96f9}$ %d {ffffff}]\n",
						    string,str_replace("_", " ", Username), Suma);
					}

					cache_delete(cache);

					return ShowPlayerDialog(playerid, did_mdc_wanted_cars, DIALOG_STYLE_MSGBOX, "MOBILE DATABASE COMPUTER",
					    string, "OK", "");
			    }

			    case 6:
			    {

			        // H¾adané vozidlá
			        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);

			        new
			            string[2048] = "{60a5f2}H¾adané vozidlá:\n",
						query[256],
						Cache:cache;

					mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_vehicles WHERE IsWanted = '1'");
					cache = mysql_query(MYSQL, query);

					for(new i; i < cache_num_rows(); i++)
					{

					    new
					        SPZ[ 30 ],
					        Model;

     					cache_get_value_name(i, "SPZ", SPZ);
     					cache_get_value_name_int(i, "Model", Model);

						format(string, 2048, "%s{ffffff}%s [ {7a96f9}%s {ffffff}]\n",
						    string,VehicleNames[Model - 400], SPZ);
					}

					cache_delete(cache);

					return ShowPlayerDialog(playerid, did_mdc_wanted_cars, DIALOG_STYLE_MSGBOX, "MOBILE DATABASE COMPUTER",
					    string, "OK", "");
			    }

			    case 7:
			    {
			        ShowPlayerCCTVMenu(playerid);
			    }
			    
			    case 8:
			    {
			        SendError(playerid, "Databáze zbraní není zapojena do sítì! ((tba))");
			        return ShowPlayerMDC(playerid);
			        //ShowPlayerWDBMenu(playerid);
			    }

			    default:
			    {
			        return ShowPlayerMDC(playerid);
			    }

			}
	    }

	    case did_mdc_call:
	    {

	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	        if(!response)
	            return ShowPlayerLastCallsPD(playerid);

	        ShowPlayerDialog(playerid, did_mdc_call_menu, DIALOG_STYLE_LIST, "MOBILE DATABASE COMPUTER",
	            "Kontaktova volajúceho\nOznaèi ako reagujúci\nOznaèi ako vyrieené\nVymaza z databáze",
	            "VYBRA", "SPA");
	    }

	    case did_mdc_call_menu:
	    {

	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	        if(!response)
	            return ShowPDCallDetails(playerid, mdc_CALL[playerid]);

			switch(listitem)
			{

				case 0:
				{

				    ProceedDial(playerid, mdc_CALLNUM[playerid]);

				    return 1;
				}

				case 1:
				{

				    if(!IsPlayerInAnyVehicle(playerid) || vEnum[GetPlayerVehicleID(playerid)][v_unit_isUsed] == false)
				        return SendError(playerid, "Pre reagovanie musí sedie v aute s nastaveným /unit!"), ShowPlayerDialog(playerid, did_mdc_call_menu, DIALOG_STYLE_LIST, "MOBILE DATABASE COMPUTER",
					            "Kontaktova volajúceho\nOznaèi ako reagujúci\nOznaèi ako vyrieené\nVymaza z databáze",
					            "VYBRA", "SPA");

                    if(mdc_HANDLED[playerid] == 2)
				        return SendError(playerid, "Tento hovor u je vyrieený!"), ShowPlayerLastCallsPD(playerid);

				    new
				        query[256],
				        responding[258],
				        Cache:cache
					;

					mysql_format(MYSQL, query, sizeof query, "SELECT * FROM gm_calls WHERE id = '%d'", mdc_CALLID[playerid]);
					cache = mysql_query(MYSQL, query);

					cache_get_value_name(0, "Handlers", responding);

					cache_delete(cache);


					if(strlen(responding) > 0)
					{
					    strcat(responding, ", ");
					    strcat(responding, vEnum[GetPlayerVehicleID(playerid)][v_unit_text]);
					}
					else
					{
					    strcat(responding, vEnum[GetPlayerVehicleID(playerid)][v_unit_text]);
					}

					mysql_format(MYSQL, query, sizeof query, "UPDATE gm_calls SET Handlers = '%e', Handled = '1' WHERE id = '%d'", responding, mdc_CALLID[playerid]);
					mysql_query(MYSQL, query, false);

					SendError(playerid, "Nastavil si stav reagovania!");

					foreach( new x : Player )
					{
				 		if(GetPlayerFactionType(x) != FACTION_TYPE_LAW)
				   			continue;

						if(GetPlayerFactionType(x) == FACTION_TYPE_LAW && !IsPlayerWorking(x))
				  			continue;

						SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] Jednotka %s reaguje na hovor #%04d!", vEnum[GetPlayerVehicleID(playerid)][v_unit_text], mdc_CALLID[playerid]);
					}

				    ShowPlayerLastCallsPD(playerid);
				}

				case 2:
				{

				    if(mdc_HANDLED[playerid] == 2)
				        return SendError(playerid, "Tento hovor u je vyrieený!"), ShowPlayerLastCallsPD(playerid);

				    new
				        query[128];

					mysql_format(MYSQL, query, sizeof query, "UPDATE gm_calls SET Handled = 2 WHERE id = '%d'", mdc_CALLID[playerid]);
					mysql_query(MYSQL, query);

					SendSuccess(playerid, "Hovor oznaèený ako vyrieený!");

                    foreach( new x : Player )
					{
				 		if(GetPlayerFactionType(x) != FACTION_TYPE_LAW)
				   			continue;

						if(GetPlayerFactionType(x) == FACTION_TYPE_LAW && !IsPlayerWorking(x))
				  			continue;

						SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s oznaèil hovor #%04d ako vyrieený!", GetPlayerNameEx(playerid, NO_MASK), mdc_CALLID[playerid]);
					}

				    ShowPlayerLastCallsPD(playerid);
				}

				case 3:
				{

				    if(GetPlayerFactionRank(playerid) < 9)
				        return SendError(playerid, "Pre zmazanie záznamu musí by aspoò rank 9!"), ShowPlayerDialog(playerid, did_mdc_call_menu, DIALOG_STYLE_LIST, "MOBILE DATABASE COMPUTER",
					            "Kontaktova volajúceho\nOznaèi ako reagujúci\nOznaèi ako vyrieené\nVymaza z databáze",
					            "VYBRA", "SPA");

				    new
				        query[128];

					mysql_format(MYSQL, query, sizeof query, "DELETE FROM gm_calls WHERE id = '%d'", mdc_CALLID[playerid]);
					mysql_query(MYSQL, query);

					SendError(playerid, "Záznam hovoru zmazaný!");

					foreach( new x : Player )
					{
				 		if(GetPlayerFactionType(x) != FACTION_TYPE_LAW)
				   			continue;

						if(GetPlayerFactionType(x) == FACTION_TYPE_LAW && !IsPlayerWorking(x))
				  			continue;

						SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s zmazal hovor #%04d z databáze!", GetPlayerNameEx(playerid, NO_MASK), mdc_CALLID[playerid]);
					}

				    ShowPlayerLastCallsPD(playerid);
				}
			}
	    }

	    case did_mdc_calls:
	    {
	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);

	        if(!response)
	            return ShowPlayerMDC(playerid);

            ShowPDCallDetails(playerid, listitem);
	    }
	    
	    case did_mdc_trace_number:
	    {

	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);

	        if(!response)
	            return ShowPlayerMDC(playerid);

			if(isnull(inputtext) || !IsNumeric(inputtext))
				return ShowPlayerMDC_TraceNumber(playerid);
				
            ShowPlayerMDC_TraceNumber(playerid);

			new I_var = phone_getPlayerFromNumber(strval(inputtext));

			if(I_var == INVALID_PHONE_PLAYER)
			    return SendError(playerid, "iadny online hráè s týmto èíslom neexistuje!");

			SCFM(playerid, 0xD0D0D0FF, "> Toto telefónne èíslo vlastní tento hráè: %s", GetPlayerNameEx(I_var, USE_PUREIDNAME));
		    
		    foreach( new x : Player )
			{
		 		if(GetPlayerFactionType(x) != FACTION_TYPE_LAW)
		   			continue;

				if(GetPlayerFactionType(x) == FACTION_TYPE_LAW && !IsPlayerWorking(x))
		  			continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s vystopoval majite¾a telefónneho èísla %d!", GetPlayerNameEx(playerid, NO_MASK), strval(inputtext));
			}
		    
	        return 1;
	    }

	    case did_mdc_search_vehicle:
	    {

	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);

	        if(!response)
	            return ShowPlayerMDC(playerid);

			if(isnull(inputtext))
				return ShowPlayerMDC_SearchVehicle(playerid);

			new
				Query[128],
				Cache:cache,
				pocet = 0,model;

			mysql_format( MYSQL, Query, sizeof Query, "SELECT * FROM char_vehicles WHERE SPZ = '%e'", inputtext);
	        cache = mysql_query( MYSQL, Query );

	        pocet = cache_num_rows();

	        cache_get_value_name_int(0, "Model", model);

	        if(model == 482 || model == 510 || model == 511)
	            pocet = 0;

	        cache_delete(cache);

	        if(pocet == 0)
	        {
	            SendError(playerid, "Nebola nájdená iadna zhoda!");
			    return ShowPlayerMDC_SearchVehicle(playerid);
	        }

	        ShowPlayerMDC_DetailVehicle(playerid, inputtext);

	        return 1;
	    }

	    case did_mdc_vehicle_detail_info:
	    {
	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	        return ShowPlayerMDC_DetailVehicle(playerid, mdc_SPZ[playerid]);
	    }

	    case did_mdc_vehicle_detail_want:
	    {
	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	        if(!response)
	        	return ShowPlayerMDC_DetailVehicle(playerid, mdc_SPZ[playerid]);

			if(isnull(inputtext) || strlen(inputtext) > 110)
			    return ShowPlayerDialog(playerid, did_mdc_vehicle_detail_want, DIALOG_STYLE_INPUT, "MOBILE DATABASE COMPUTER",
	    			"{ffffff}> Zadajte prosím, zaèo je toto vozidlo hladané!", "OK", "SPA");

			new
			    query[256];

			mysql_format(MYSQL, query, sizeof query, "UPDATE char_vehicles SET IsWanted = '1', IsWantedFor = '%e' WHERE SPZ = '%e'",
			    inputtext, mdc_SPZ[playerid]);

			mysql_query(MYSQL, query, false);

			SendSuccess(playerid, "Vozidlo pridané do hladaných!");

			return ShowPlayerMDC_DetailVehicle(playerid, mdc_SPZ[playerid]);
	    }

	    case did_mdc_person_info:
	    {
	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	        return ShowPlayerMDC_DetailPerson(playerid, mdc_Username[playerid]);
	    }

	    case did_mdc_person_majetok:
	    {
	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	        return ShowPlayerMDC_DetailPerson(playerid, mdc_Username[playerid]);
	    }

	    case did_mdc_search_person:
	    {

	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);

	        if(!response)
	            return ShowPlayerMDC(playerid);

			if(isnull(inputtext))
				return ShowPlayerMDC_SearchPerson(playerid);

			if(strfind(inputtext, "_", true) == -1 && strfind(inputtext, " ", true) == -1)
			{
			    SendError(playerid, "Nebola nájdená iadna zhoda!");
			    return ShowPlayerMDC_SearchPerson(playerid);
			}

			new
			    Username[ MAX_PLAYER_NAME + 1],
				Query[128],
				Cache:cache,
				pocet = 0;

			format(Username, sizeof Username, str_replace(" ", "_", inputtext));

			mysql_format( MYSQL, Query, sizeof Query, "SELECT * FROM char_main WHERE Username = '%e'", Username);
	        cache = mysql_query( MYSQL, Query );

	        pocet = cache_num_rows();

	        cache_delete(cache);

	        if(pocet == 0)
	        {
	            SendError(playerid, "Nebola nájdená iadna zhoda!");
			    return ShowPlayerMDC_SearchPerson(playerid);
	        }

	        ShowPlayerMDC_DetailPerson(playerid, Username);

	        return 1;
	    }

	    case did_mdc_vehicle_detail:
	    {
	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);

	        if(!response)
	            return ShowPlayerMDC_SearchVehicle(playerid);

			switch(listitem)
			{
			    case 0:
			    {
			        // Zobrazi informácie
			        return ShowPlayerMDC_DetailVeh_Info(playerid);
			    }

				case 2:
				{
				    // Hladanos

					if(GetPlayerFactionRank(playerid) < 4)
					    return SendError(playerid, "Musí by aspoò rank 4 aby si mohol nastavi hladanos!"), ShowPlayerMDC_DetailVehicle(playerid, mdc_SPZ[playerid]);

				    return ShowPlayerMDC_DetailVeh_Want(playerid);
				}

				default:
				{
				    return ShowPlayerMDC_DetailVehicle(playerid, mdc_SPZ[playerid]);
				}
			}
	    }

	    case did_mdc_person:
	    {

	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);

	        if(!response)
	            return ShowPlayerMDC_SearchPerson(playerid);

			switch(listitem)
			{
				case 0:
				    return ShowPlayerMDC_DetailPerson_Info(playerid);

                case 1:
				    return ShowPlayerMDC_DetailPerson_Maje(playerid);

				case 2:
				    return ShowPlayerMDC_DetailPerson_Cont(playerid);

                case 3:
				    return ShowPlayerMDC_DetailPerson_Trac(playerid);

                case 5:
				    return ShowPlayerMDC_DetailPerson_LFin(playerid);

                case 6:
				    return ShowPlayerMDC_DetailPerson_LCin(playerid);

                case 8:
				    return ShowPlayerMDC_DetailPerson_AFin(playerid);

                case 9:
				    return ShowPlayerMDC_DetailPerson_ACin(playerid);

				case 4, 7:
				{
				    return ShowPlayerMDC_DetailPerson(playerid, mdc_Username[playerid]);
				}
			}
	    }

	    case did_mdc_online:
	    {
	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	        return ShowPlayerMDC(playerid);
	    }

	    case did_mdc_wanted_cars:
	    {
	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	        return ShowPlayerMDC(playerid);
		}

	    case did_mdc_add_cin:
	    {
	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	        if(!response)
	            return ShowPlayerMDC_DetailPerson(playerid, mdc_Username[playerid]);

			if(isnull(inputtext) || strlen(inputtext) > 40)
			    return SendError(playerid, "Zadaný text je moc krátky alebo moc dlhý!"), ShowPlayerMDC_DetailPerson(playerid, mdc_Username[playerid]);

			new
			    query[512];

			mysql_format(MYSQL, query, sizeof query, "INSERT INTO char_trestneciny (Username, Cin, Udelil, Datum) VALUES ('%e', '%e', '%e', '%d')",
			    mdc_Username[playerid], inputtext, ReturnName(playerid), gettime());

			mysql_query(MYSQL, query);

			SendSuccess(playerid, "Trestný èin zapísaný!");

			foreach( new x : Player )
			{
		 		if(GetPlayerFactionType(x) != FACTION_TYPE_LAW)
		   			continue;

				if(GetPlayerFactionType(x) == FACTION_TYPE_LAW && !IsPlayerWorking(x))
		  			continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s pridal trestný èin '%s' hráèovi %s!", GetPlayerNameEx(playerid, NO_MASK), inputtext, mdc_Username[playerid]);
			}

			return ShowPlayerMDC_DetailPerson_LCin(playerid);

		}

	    case did_mdc_ciny:
	    {
	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	        if(!response)
	            return ShowPlayerMDC_DetailPerson(playerid, mdc_Username[playerid]);

            new
				query[256],
				Cache:cache,

				finalString[2048] = "Trestný èin\tDátum\tUdelil\n",
				tempString[128];

			mysql_format(MYSQL, query, 256, "SELECT * FROM char_trestneciny WHERE Username = '%e' ORDER BY Datum", mdc_Username[playerid]);
			cache = mysql_query(MYSQL, query);

			new
			    Cin[64],
   				Udelil[25],
   				Datum,

   				Cine[64],
   				Udelile[25];

		    cache_get_value_name(listitem, "Cin", Cine);
		    cache_get_value_name(listitem, "Udelil", Udelile);
		    cache_get_value_name_int(listitem, "Datum", Datum);

		    if(GetPlayerFactionRank(playerid) < 5)
		    {
		        SendError(playerid, "Nemá právo zmaza tento trestný èin!");
		        return ShowPlayerMDC_DetailPerson_LCin(playerid);
		    }

			cache = mysql_query(MYSQL, query);

			mysql_format(MYSQL, query, sizeof query, "DELETE FROM char_trestneciny WHERE Username = '%e' AND Datum = '%d'", mdc_Username[playerid], Datum);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, 256, "SELECT * FROM char_trestneciny WHERE Username = '%e' ORDER BY Datum", mdc_Username[playerid]);
			cache = mysql_query(MYSQL, query);

			for( new i; i < cache_num_rows(); i++)
			{
			    if(i > cache_num_rows())
					break;

			    cache_get_value_name(i, "Cin", Cin);
			    cache_get_value_name(i, "Udelil", Udelil);
			    cache_get_value_name_int(i, "Datum", Datum);

				format(tempString, 128, "%s\t%s\t%s\n", Cin, getdateunix(Datum), Udelil);
				strcat(finalString, tempString);
			}

			cache_delete(cache);

			SendError(playerid, "Trestný èin zmazaný!");

			ShowPlayerDialog(playerid, did_mdc_ciny, DIALOG_STYLE_TABLIST_HEADERS, "TRESTNÉ ÈINY", finalString, "VYMAZA", "ZRUI");

			foreach( new x : Player )
			{
		 		if(GetPlayerFactionType(x) != FACTION_TYPE_LAW)
		   			continue;

				if(GetPlayerFactionType(x) == FACTION_TYPE_LAW && !IsPlayerWorking(x))
		  			continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s vymazal trestný èin '%s' hráèovi %s!", GetPlayerNameEx(playerid, NO_MASK), Cine, mdc_Username[playerid]);
			}
	    }

	    case did_mdc_fines:
	    {
	        PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	        if(!response)
	            return ShowPlayerMDC_DetailPerson(playerid, mdc_Username[playerid]);

            new
				query[256],
				Cache:cache,

				finalString[2048] = "Suma\tDôvod\tDátum udelenia\tZaplatená\n",
				tempString[128];

			mysql_format(MYSQL, query, 256, "SELECT * FROM char_pokuty WHERE Username = '%e' ORDER BY Paid, Date DESC", mdc_Username[playerid]);
			cache = mysql_query(MYSQL, query);

			new
   				Suma,
   				Sumae,
			    Dovode[128],
			    Dovod[128],
			    Date,
			    Officer[64],
			    Paid;

			cache_get_value_name_int(listitem, "Suma", Sumae);
		    cache_get_value_name(listitem, "Dovod", Dovode);
		    cache_get_value_name_int(listitem, "Date", Date);
		    cache_get_value_name(listitem, "Officer", Officer);
		    cache_get_value_name_int(listitem, "Paid", Paid);

		    if(strcmp(Officer, ReturnName(playerid), false) && GetPlayerFactionRank(playerid) < 5)
		    {
		        SendError(playerid, "Nemá právo zmaza túto pokutu!");
		        return ShowPlayerMDC_DetailPerson_LFin(playerid);
		    }

			cache = mysql_query(MYSQL, query);

			mysql_format(MYSQL, query, sizeof query, "DELETE FROM char_pokuty WHERE Username = '%e' AND Date = '%d'", mdc_Username[playerid], Date);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, 256, "SELECT * FROM char_pokuty WHERE Username = '%e' ORDER BY Paid, Date DESC", mdc_Username[playerid]);
			cache = mysql_query(MYSQL, query);

			for( new i; i < cache_num_rows(); i++)
			{
			    if(i > cache_num_rows())
					break;

			    cache_get_value_name_int(i, "Suma", Suma);
			    cache_get_value_name(i, "Dovod", Dovod);
			    cache_get_value_name_int(i, "Date", Date);
			    cache_get_value_name(i, "Officer", Officer);
			    cache_get_value_name_int(i, "Paid", Paid);

			    new
			        paidstr[15];

				switch(Paid)
				{
				    case 0:
				        format(paidstr, 15, "{e17070}Nie");

					default:
					    format(paidstr, 15, "{8be183}Áno");

				}

				format(tempString, 128, "{548555}%d${ffffff}\t%s\t%s\t%s\n", Suma, Dovod, getdateunix(Date), paidstr);
				strcat(finalString, tempString);
			}

			cache_delete(cache);

			SendError(playerid, "Pokuta zmazaná!");

			ShowPlayerDialog(playerid, did_mdc_fines, DIALOG_STYLE_TABLIST_HEADERS, "POKUTY", finalString, "VYMAZA", "ZRUI");

			foreach( new x : Player )
			{
		 		if(GetPlayerFactionType(x) != FACTION_TYPE_LAW)
		   			continue;

				if(GetPlayerFactionType(x) == FACTION_TYPE_LAW && !IsPlayerWorking(x))
		  			continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s vymazal pokutu '%s' v hodnote %d$ hráèovi %s!", GetPlayerNameEx(playerid, NO_MASK), Dovode, Sumae, mdc_Username[playerid]);
			}
	    }

		case did_phone:
		{

		    if(!response)
		        return 0;

			switch(listitem)
			{
				case 0:
				{
					// Vytoèi èíslo
                    if(phone_isPhoneTurnedOff(playerid))
                        return SendError(playerid, "Má vypnutý telefón!");

                    if(GetPlayerInventoryItem(playerid, inv_simcard) < 10)
                        return SendError(playerid, "Nemá SIM kartu!");

					return ShowPlayerPhoneDial(playerid);
				}

				case 1:
				{
					// Zasla SMS správu

					if(GetPlayerInventoryItem(playerid, inv_simcard) < 10)
                        return SendError(playerid, "Nemá SIM kartu!");

					return ShowPlayerPhoneSendMsg(playerid);
				}

				case 2:
				{
					// Posledné SMS správy

					if(GetPlayerInventoryItem(playerid, inv_simcard) < 10)
                        return SendError(playerid, "Nemá SIM kartu!");

					return ShowPlayerPhoneMessages(playerid);
				}

				case 4:
				{
					// Kontakty
					return ShowPlayerPhoneContacts(playerid);
				}

				case 6:
				{
					// Nastavenia

					return ShowPlayerPhoneOptions(playerid);
				}

				case 8:
				{
					// Vypnú / zapnú mobil

					if(phone_isPhoneTurnedOff(playerid))
					{
						// Telefón je vypnutý

						phone_setPlayerPhoneState(playerid, 1);

						SendPlayerAction(playerid, "si vyberá telefón a zapína ho.");
					}
					else
					{
						// Telefón je zapnutý

						phone_setPlayerPhoneState(playerid, 0);

						SendPlayerAction(playerid, "si vyberá telefón a vypína ho.");
					}

					return 1;
				}

				case 3, 5, 7:
				{
					// Prázdne polia
					return 1;
				}
			}
		}

		case did_phone_options:
		{

		    if(!response)
		        return 1;

		    if(listitem == 0)
		    {
		        SCFM(playerid, 0xD0D0D0FF, "> Tvoje telefónne èíslo je %d!", phone_getPlayerNumber(playerid));
		        return ShowPlayerPhoneOptions(playerid);
		    }

			return ShowPlayerPhoneMenu(playerid);
		}

		case did_phone_dial:
		{
			if(!response)
				return 1;

			if(isnull(inputtext))
				return ShowPlayerPhoneDial(playerid);

			ProceedDial(playerid, inputtext);
		}

		case did_phone_last_msg:
		{
		    if(!response)
		        return 1;

            new
			    query[256],
			    Cache:c,

				finalString[ 1024 ] = "Od/Pre\tText\tDátum\n";

			mysql_format(MYSQL, query, 256, "SELECT * FROM phone_list WHERE DisplayFor = '%e' AND (FromNumber = '%d' OR ToNumber = '%d') ORDER BY Date DESC LIMIT 30",
				ReturnName(playerid), phone_getPlayerNumber(playerid), phone_getPlayerNumber(playerid));

			c = mysql_query(MYSQL, query);

			new
    			to,
			    from,
       			text[256],
		        date;

			cache_get_value_name_int(listitem, "ToNumber", to);
   			cache_get_value_name_int(listitem, "FromNumber", from);
		    cache_get_value_name(listitem, "Text", text);
      		cache_get_value_name_int(listitem, "Date", date);

			if(to == phone_getPlayerNumber(playerid))
  				format(finalString, sizeof finalString, "\tOd: %s, dátum: %s\n\n\r%s",
			    	phone_getPlayerContact(playerid, from), getdateunix(date), text);
			else
				format(finalString, sizeof finalString, "\tPre: %s, dátum: %s\n\n\r%s",
			    	phone_getPlayerContact(playerid, to), getdateunix(date), text);

			cache_delete(c);

			ShowPlayerDialog(playerid, did_phone_last_msg_detail, DIALOG_STYLE_MSGBOX, "TELEFÓN - SPRÁVA", finalString, "OK", "");
		}

		case did_phone_last_msg_detail:
		{
		    return ShowPlayerPhoneMessages(playerid);
		}

		case did_phone_msg_1:
		{
		    if(!response)
		        return 1;

			if(isnull(inputtext))
				return 1;

			format(ph_SendMsg_To[playerid], 30, inputtext);

			ShowPlayerPhoneSendMsgText(playerid);
		}

		case did_phone_msg_2:
		{
		    if(!response)
		        return ShowPlayerPhoneSendMsg(playerid);

			if(isnull(inputtext))
			    return ShowPlayerPhoneSendMsgText(playerid);

			SendMessage(playerid, ph_SendMsg_To[playerid], inputtext);
		}

	    case did_phone_sms_last:
	    {
	        if(!response)
	            return 0;

            new
			    query[256],
			    Cache:c;

			mysql_format(MYSQL, query, 256, "SELECT * FROM phone_list WHERE DisplayFor = '%e' AND (FromNumber = '%d' OR ToNumber = '%d') ORDER BY Date DESC LIMIT 1",
				ReturnName(playerid), phone_getPlayerNumber(playerid), phone_getPlayerNumber(playerid));

			c = mysql_query(MYSQL, query);

			new
				from;

		 	cache_get_value_name_int(0, "FromNumber", from);

		 	cache_delete(c);

		 	format(ph_SendMsg_To[playerid], 30, "%d", from);

			ShowPlayerDialog(playerid, did_phone_sms_last_od, DIALOG_STYLE_INPUT, "TELEFÓN - NOVÁ SPRÁVA",
	    		"{ffffff}> Zadajte prosím text, aký chcete na èíslo odosla!", "ODOSLA", "SPA");

	    }

	    case did_phone_sms_last_od:
		{
		    if(!response)
		    {
		        new
				    query[256],
				    Cache:c,

					finalString[ 4096 ];

				mysql_format(MYSQL, query, 256, "SELECT * FROM phone_list WHERE DisplayFor = '%e' AND (FromNumber = '%d' OR ToNumber = '%d') ORDER BY Date DESC LIMIT 1",
					ReturnName(playerid), phone_getPlayerNumber(playerid), phone_getPlayerNumber(playerid));

				c = mysql_query(MYSQL, query);

				new
					to,
			  		from,
			    	text[256],
			     	date;

				cache_get_value_name_int(0, "ToNumber", to);
			 	cache_get_value_name_int(0, "FromNumber", from);
			  	cache_get_value_name(0, "Text", text);
			   	cache_get_value_name_int(0, "Date", date);

			    if(to == phone_getPlayerNumber(playerid))
					format(finalString, sizeof finalString, "\tOd: %s, dátum: %s\n\n\r%s",
			 			phone_getPlayerContact(playerid, from), getdateunix(date), text);
				else
					format(finalString, sizeof finalString, "\tOd: %s, dátum: %s\n\n\r%s",
			 			phone_getPlayerContact(playerid, to), getdateunix(date), text);

				cache_delete(c);

				ShowPlayerDialog(playerid, did_phone_sms_last, DIALOG_STYLE_MSGBOX, "TELEFÓN - SPRÁVA", finalString, "ODPOVEÏ", "OK");
		        return 0;
		    }

			if(isnull(inputtext))
			    return ShowPlayerDialog(playerid, did_phone_sms_last_od, DIALOG_STYLE_INPUT, "TELEFÓN - NOVÁ SPRÁVA",
	    			"{ffffff}> Zadajte prosím text, aký chcete na èíslo odosla!", "ODOSLA", "SPA");

			SendMessage(playerid, ph_SendMsg_To[playerid], inputtext);
		}

		case did_phone_contacts:
		{
		    if(!response)
		        return 1;

			if(listitem == 0)
			{
			    new
				    query[256],
				    Cache:c;

				mysql_format(MYSQL, query, 256, "SELECT * FROM phone_contacts WHERE Username = '%e' ORDER BY ContactName",
					ReturnName(playerid));

				c = mysql_query(MYSQL, query);

				new pocet = cache_num_rows();

				cache_delete(c);

				if(pocet >= 30)
				    return SendError(playerid, "V tomto zariadení nie je viac miesta!"), ShowPlayerPhoneContacts(playerid);

                ShowPlayerDialog(playerid, did_phone_contact_new, DIALOG_STYLE_INPUT, "TELEFÓN - NOVÝ KONTAKT",
	    			"{ffffff}> Zadajte prosím meno nového kontaktu, ktorý chcete prida!", "PRIDA", "SPA");
			}
			else
			{
			    listitem --;

			    temp_contactid[playerid] = listitem;

			    return ShowPlayerDialog(playerid, did_phone_contact_menu, DIALOG_STYLE_LIST, "TELEFÓN - KONTAKT",
			        "Zavola kontaktu\nZasla SMS správu\nVymaza",
			        "ZVOLI", "SPA");
			}
		}

		case did_phone_contact_menu:
		{
		    if(!response)
		        return ShowPlayerPhoneContacts(playerid);

		    new
		    	query[256],
			    Cache:c;

			mysql_format(MYSQL, query, 256, "SELECT * FROM phone_contacts WHERE Username = '%e' ORDER BY ContactName",
				ReturnName(playerid));

			c = mysql_query(MYSQL, query);

			new
			    contactnumber[64],
			    contactname[64];

            cache_get_value_name(temp_contactid[playerid], "ContactName", contactname);
            cache_get_value_name(temp_contactid[playerid], "ContactNumber", contactnumber);

			cache_delete(c);

			if(listitem == 0)
			{
			    ProceedDial(playerid, contactnumber);
			    return 1;
			}
			else if(listitem == 1)
			{
			    format(ph_SendMsg_To[playerid], 30, "%s", contactnumber);

				return ShowPlayerDialog(playerid, did_phone_sms_contact, DIALOG_STYLE_INPUT, "TELEFÓN - NOVÁ SPRÁVA",
		    		"{ffffff}> Zadajte prosím text, aký chcete na toto èíslo odosla!", "ODOSLA", "SPA");
			}
			else
			{
			    mysql_format(MYSQL, query, 256, "DELETE FROM phone_contacts WHERE Username = '%e' AND ContactName = '%e' AND ContactNumber = '%e' LIMIT 1",
					ReturnName(playerid), contactname, contactnumber);

				mysql_query(MYSQL, query, false);

				SendError(playerid, "Kontakt zmazaný!");

				return ShowPlayerPhoneContacts(playerid);
			}
		}

		case did_phone_sms_contact:
		{
		    if(!response)
		    	return ShowPlayerDialog(playerid, did_phone_contact_menu, DIALOG_STYLE_LIST, "TELEFÓN - KONTAKT",
			        "Zavola kontaktu\nZasla SMS správu\nVymaza",
			        "ZVOLI", "SPA");

			if(isnull(inputtext))
			    return ShowPlayerDialog(playerid, did_phone_sms_contact, DIALOG_STYLE_INPUT, "TELEFÓN - NOVÁ SPRÁVA",
		    		"{ffffff}> Zadajte prosím text, aký chcete na toto èíslo odosla!", "ODOSLA", "SPA");

			SendMessage(playerid, ph_SendMsg_To[playerid], inputtext);
		}

		case did_phone_contact_new:
		{
		    if(!response)
				return ShowPlayerPhoneContacts(playerid);

			if(isnull(inputtext))
			    return ShowPlayerDialog(playerid, did_phone_contact_new, DIALOG_STYLE_INPUT, "TELEFÓN - NOVÝ KONTAKT",
	    			"{ffffff}> Zadajte prosím meno nového kontaktu, ktorý chcete prida!", "PRIDA", "SPA");

            format(ph_SendMsg_To[playerid], 30, "%s", inputtext);

            return ShowPlayerDialog(playerid, did_phone_contact_new_2, DIALOG_STYLE_INPUT, "TELEFÓN - NOVÝ KONTAKT",
	    		"{ffffff}> Zadajte prosím èíslo nového kontaktu, ktorý chcete prida!", "PRIDA", "SPA");
		}

		case did_phone_contact_new_2:
		{
		    if(!response)
				return ShowPlayerDialog(playerid, did_phone_contact_new, DIALOG_STYLE_INPUT, "TELEFÓN - NOVÝ KONTAKT",
	    			"{ffffff}> Zadajte prosím meno nového kontaktu, ktorý chcete prida!", "PRIDA", "SPA");

			if(isnull(inputtext) || strlen(inputtext) > 14)
			    return ShowPlayerDialog(playerid, did_phone_contact_new_2, DIALOG_STYLE_INPUT, "TELEFÓN - NOVÝ KONTAKT",
	    		"{ffffff}> Zadajte prosím èíslo nového kontaktu, ktorý chcete prida!", "PRIDA", "SPA");

			new
				query[512];

			mysql_format(MYSQL, query, 1024, "INSERT INTO phone_contacts (Username, ContactName, ContactNumber) VALUES ('%e', '%e', '%e')",
			    ReturnName(playerid), ph_SendMsg_To[playerid], inputtext);

            mysql_query(MYSQL, query, false);

            return ShowPlayerPhoneContacts(playerid);
		}

	    case did_trunk:
	    {

			if(!response)
			    return 0;

			#define veh pvehinv[playerid]
			    
            trunkitemid[playerid] = listitem;

		    return ShowPlayerDialog(playerid, did_trunk_add, DIALOG_STYLE_INPUT,
		        "VLOI/VYBRA ITEM",
		        "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce vybra alebo vloi!\n\nAk nechce niè robi, nechaj prázdne pole a stlaè akéko¾vek tlaèidlo.",
		        "VLOI", "VYBRA");

			#undef veh
	    }

	    case did_trunk_add:
	    {

	        #define veh pvehinv[playerid]
	        #define item trunkitemid[playerid]

	        if(isnull(inputtext))
	            return ShowPlayerVehicleInventory(playerid, veh);

			if(!IsNumeric(inputtext) || strval(inputtext) < 1)
			    return ShowPlayerDialog(playerid, did_trunk_add, DIALOG_STYLE_INPUT,
			        "VLOI/VYBRA ITEM",
			        "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce vybra alebo vloi!\n\nAk nechce niè robi, nechaj prázdne pole a stlaè akéko¾vek tlaèidlo.\nZadal si nesprávny poèet.",
			        "VLOI", "VYBRA");

			new invid;

			switch(item)
			{
			    case 0:
			        invid = 0;

				case 1:
				    invid = _:inv_naboje;

				case 2:
				    invid = _:inv_pacidlo;

				case 3:
				    invid = _:inv_lano;

				case 4:
				    invid = _:inv_vrece;

				case 5:
				    invid = _:inv_puta;

                case 6:
				    invid = _:inv_rezerva;
			}

			if(response && ((invid != 0 && strval(inputtext) > GetPlayerInventoryItem(playerid, invid)) || (invid == 0 && strval(inputtext) > ex_GetPlayerMoney(playerid))))
	            return SendError(playerid, "To¾ko toho nemá!"), ShowPlayerDialog(playerid, did_trunk_add, DIALOG_STYLE_INPUT,
			        "VLOI/VYBRA ITEM",
			        "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce vybra alebo vloi!\n\nAk nechce niè robi, nechaj prázdne pole a stlaè akéko¾vek tlaèidlo.",
			        "VLOI", "VYBRA");

			else if(!response && strval(inputtext) > vehicleInventory[veh][item])
			    return SendError(playerid, "To¾ko tam toho nie je!"), ShowPlayerDialog(playerid, did_trunk_add, DIALOG_STYLE_INPUT,
			        "VLOI/VYBRA ITEM",
			        "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce vybra alebo vloi!\n\nAk nechce niè robi, nechaj prázdne pole a stlaè akéko¾vek tlaèidlo.",
			        "VLOI", "VYBRA");
			        
			if(response)
			{
			    if(invid == 0)
			    {
			        if(strval(inputtext) > ex_GetPlayerMoney(playerid))
			        {
			            return SendError(playerid, "To¾ko toho nemá!"), ShowPlayerDialog(playerid, did_trunk_add, DIALOG_STYLE_INPUT,
					        "VLOI/VYBRA ITEM",
					        "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce vybra alebo vloi!\n\nAk nechce niè robi, nechaj prázdne pole a stlaè akéko¾vek tlaèidlo.",
					        "VLOI", "VYBRA");
			        }
			    }
			}

			if(response)
			{
   				FormatLog(log_type_trunk, "%s(%s - %s) vklada do kufra vozidla %s (%s) item %s (%d)", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), GetVehicleName(veh), vEnum[veh][v_SPZ], GetTrunkItemName(item), strval(inputtext));

				new
					S_finalString[128 + 25 + 5];

				new S_first[25];
				if(B_playerHasMask[playerid] == false) {
				    strcat(S_first, ReturnName(playerid));
				    strdel(S_first,strfind(S_first,"_",true),25);
				} else {
				    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
				}

			    format(S_finalString, sizeof(S_finalString), "AME: * %s nieèo vkladá do úloného priestoru ...", S_first);
			    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

				format(S_finalString, sizeof(S_finalString), "* %s nieèo vkladá do úloného priestoru ...", S_first);
			 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

			 	if(invid == 0)
			 	{
					ex_GivePlayerMoney(playerid, -strval(inputtext));
					money_givenby[playerid] += floatround(strval(inputtext),floatround_round);
				}
				else
			 		SetPlayerInventoryItem(playerid, invid, GetPlayerInventoryItem(playerid, invid) - strval(inputtext));

		        vehicleInventory[veh][item] += strval(inputtext);

		        ShowPlayerVehicleInventory(playerid, veh);
			}
			else
			{
			    FormatLog(log_type_trunk, "%s(%s - %s) vybera z kufra vozidla %s (%s) item %s (%d)", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), GetVehicleName(veh), vEnum[veh][v_SPZ], GetTrunkItemName(item), strval(inputtext));

				new
					S_finalString[128 + 25 + 5];

				new S_first[25];
				if(B_playerHasMask[playerid] == false) {
				    strcat(S_first, ReturnName(playerid));
				    strdel(S_first,strfind(S_first,"_",true),25);
				} else {
				    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
				}

			    format(S_finalString, sizeof(S_finalString), "AME: * %s nieèo vyberá z úloného priestoru ...", S_first);
			    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

				format(S_finalString, sizeof(S_finalString), "* %s nieèo vyberá z úloného priestoru ...", S_first);
			 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

                if(invid == 0)
                {
					ex_GivePlayerMoney(playerid, strval(inputtext));
					money_accepted[playerid] += floatround(strval(inputtext),floatround_round);
				}
				else
			 		SetPlayerInventoryItem(playerid, invid, GetPlayerInventoryItem(playerid, invid) + strval(inputtext));

		        vehicleInventory[veh][item] -= strval(inputtext);

		        ShowPlayerVehicleInventory(playerid, veh);
			}

			#undef veh
			#undef item
	    }

		case did_upgrade_shop:
		{
			if(!response)
			    return 1;

			if(listitem == 0)
			{
				new
				    Float:VHP, repPrice, Float:fullhp,
					vid = GetPlayerVehicleID(playerid);

				vhac_GetVehicleHealth(vid, VHP);

				if(vEnum[vid][v_def_Health] > 1000.0)
				    fullhp = vEnum[vid][v_def_Health];
				else
					fullhp = 1000.0;


				repPrice = floatround((VHP - fullhp) * -1 * 2.2, floatround_round);

                if(GetVehicleFactionType(vid) != FACTION_TYPE_LAW && GetVehicleFactionType(vid) != FACTION_TYPE_FIRE)
                {
					if(ex_GetPlayerMoney(playerid) < repPrice)
					    return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerUpgradeShop(playerid);

					ex_GivePlayerMoney(playerid, -repPrice);
					money_spent[playerid] += floatround(repPrice,floatround_round);
				}

				RepairVehicle(vid);

				SendSuccess(playerid, "Vozidlo opravené!");

				ShowPlayerUpgradeShop(playerid);

			    return 1;
			}
			else if(listitem == 1)
			{
			    if(vEnum[GetPlayerVehicleID(playerid)][v_CarRadio] == 1)
			        return SendError(playerid, "Toto vozidlo u má rádio!"), ShowPlayerUpgradeShop(playerid);

				if(ex_GetPlayerMoney(playerid) < 320)
				    return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerUpgradeShop(playerid);

				ex_GivePlayerMoney(playerid, -320);
				money_spent[playerid] += floatround(320,floatround_round);

				vEnum[GetPlayerVehicleID(playerid)][v_CarRadio] = 1;

				SendSuccess(playerid, "Zakúpené rádio!");

				ShowPlayerUpgradeShop(playerid);

			    return 1;
			}
			else if(listitem == 2)
			{

			    new
			        vid = GetPlayerVehicleID(playerid);

			    if(GetVehicleFaction(vid) != 0 && GetVehicleFaction(vid) != GetPlayerFaction(playerid))
			        return SendError(playerid, "Toto vozidlo nemôe prelakova!"), ShowPlayerUpgradeShop(playerid);

                if(GetVehicleFaction(vid) != 0 && GetPlayerFactionRank(playerid) < 10)
			        return SendError(playerid, "Toto vozidlo nemôe prelakova!"), ShowPlayerUpgradeShop(playerid);

				ShowPlayerDialog(playerid, did_upgrade_shop_col, DIALOG_STYLE_INPUT, "PREFARBENIE",
				    "{FFFFFF}> Zadaj prosím nové ID farieb tvojho vozidla v týle 'ID1 ID2' bez kvoèiek.\n\nNapríklad: '16 1' bez kvoèiek.",
				    "OK", "ZRUI");
			}
		}

		case did_upgrade_shop_col:
		{
		    if(!response)
		        return ShowPlayerUpgradeShop(playerid);

            if(isnull(inputtext))
			    ShowPlayerDialog(playerid, did_upgrade_shop_col, DIALOG_STYLE_INPUT, "PREFARBENIE",
				    "{FFFFFF}> Zadaj prosím nové ID farieb tvojho vozidla v týle 'ID1 ID2' bez kvoèiek.\n\nNapríklad: '16 1' bez kvoèiek.",
				    "OK", "ZRUI");

			new col[2][5], count, fincol[2];

			count = strexplode(col, inputtext, " ");

			if(count != 2)
			    return ShowPlayerDialog(playerid, did_upgrade_shop_col, DIALOG_STYLE_INPUT, "PREFARBENIE",
				    "{FFFFFF}> Zadaj prosím nové ID farieb tvojho vozidla v týle 'ID1 ID2' bez kvoèiek.\n\nNapríklad: '16 1' bez kvoèiek.",
				    "OK", "ZRUI");

			fincol[0] = strval(col[0]);
			fincol[1] = strval(col[1]);

			if(fincol[0] < 0 || fincol[0] > 255 || fincol[1] < 0 || fincol[1] > 255)
			{
			    return ShowPlayerDialog(playerid, did_upgrade_shop_col, DIALOG_STYLE_INPUT, "PREFARBENIE",
				    "{FFFFFF}> Zadaj prosím nové ID farieb tvojho vozidla v týle 'ID1 ID2' bez kvoèiek.\n\nNapríklad: '16 1' bez kvoèiek.\nZlé ID farieb!",
				    "OK", "ZRUI");
			}

			ChangeVehicleColor(GetPlayerVehicleID(playerid), fincol[0], fincol[1]);

			//vEnum[GetPlayerVehicleID(playerid)][v_Color_1] = fincol[0];
			//vEnum[GetPlayerVehicleID(playerid)][v_Color_2] = fincol[1];

			upgradeShop_carColor[GetPlayerVehicleID(playerid)][0] = fincol[0];
			upgradeShop_carColor[GetPlayerVehicleID(playerid)][1] = fincol[1];

			SCFM(playerid, 0xD0D0D0FF, "> Vozidlo prefarbené! Pre potvrdenie nákupu ($%d) poui príkaz /mods buy!", GetPlayerUpgradePrice(GetPlayerVehicleID(playerid)));

			ShowPlayerUpgradeShop(playerid);
		}

		case did_gpsex_add:
		{
		    if(!response)
		        return CallRemoteFunction("gps_OpenGPSEx", "i", playerid);

			if(strlen(inputtext) < 5 || strlen(inputtext) > 120)
			    return ShowPlayerDialog(playerid, did_gpsex_add, DIALOG_STYLE_INPUT, "GPS - PRIDA", "{FFFFFF}> Zadaj meno novej destinácie, ktorá bude tu!\n\tZadaj text dlhí ako 5 a kratí ako 120 znakov!", "OK", "SPA");

			new Float:Pos[3];

			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

			new str[ 255 ];

			mysql_format(MYSQL, str, sizeof str, "INSERT INTO gm_gps (X,Y,Z,Name) VALUES ('%f','%f','%f','%e')",Pos[0], Pos[1], Pos[2],inputtext);
			mysql_query(MYSQL, str);

			for(new x; x < MAX_GPS_DESTS; x++)
			{
	        	A_gpsLocation[x][0][0] = 0.0;
			}

	        LoadGPS();

	        SendSuccess(playerid, "Destinácia pridaná!");


         	SetTimerEx("gps_OpenGPSEx", 150, false, "i", playerid);
		}

	    case did_gpsex:
		{

		    if(!response)
		        return 0;

		    if(listitem == 0)
			{
			    // Vypnú GPS

			    ShowPlayerDialog(playerid, did_gpsex_add, DIALOG_STYLE_INPUT, "GPS - PRIDA", "{FFFFFF}> Zadaj meno novej destinácie, ktorá bude tu!", "OK", "SPA");

				return 1;
			}
			else
		    {
		        // Zvolil destináciu

		        new str[ 168 ];

		        mysql_format(MYSQL, str, sizeof str, "DELETE FROM gm_gps WHERE Name = '%e'", A_gpsLocation[listitem-1][3]);
		        mysql_query(MYSQL, str);

		        for(new x; x < MAX_GPS_DESTS; x++)
				{
		        	A_gpsLocation[x][0][0] = 0.0;
				}

		        LoadGPS();

		        SendSuccess(playerid, "Destinácia zmazaná!");


		        SetTimerEx("gps_OpenGPSEx", 150, false, "i", playerid);

		        return 1;
		    }
		}

		case did_gps:
		{

		    if(!response)
		        return 0;

		    if(listitem == 0)
			{
			    // Vypnú GPS

			    if(gps_On[playerid] == false)
			        return SendError(playerid, "GPS nie je zapnutá!"), CallRemoteFunction("gps_OpenGPS", "i", playerid);

	          	gps_On[playerid] = false;
		        g_I_playerCheckpoint[playerid] = checkp_none;

				DisablePlayerCheckpoint(playerid);

				SendSuccess(playerid, "Destinácia odznaèená!");

                CallRemoteFunction("gps_OpenGPS", "i", playerid);

				return 1;
			}
			else if(listitem == 1)
			{

			    if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "> Nedokáem vás lokalizova!!!");
					return CallRemoteFunction("gps_OpenGPS", "i", playerid);
				}

			    new strofpos[144], Float:x, Float:y, Float:z;

			    GetPlayerPos(playerid, x,y,z);

			    format(strofpos, 144, "> Vaa pozícia je (X '%.2f', Y '%.2f', Z '%.2f')", x,y,z);
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, strofpos);

			    CallRemoteFunction("gps_OpenGPS", "i", playerid);
			    return 1;
			}
			else if(listitem == 2)
			{
			    // Vlastné súrodnice

			    return ShowPlayerDialog(playerid, did_gps_custom, DIALOG_STYLE_INPUT, "GPS",
					"{ffffff}> Zadaj prosím vlastné súradnice v týle 'X.0 Y.0 Z.0' bez ''\nMedzi èíslami musia by medzery a èísla musia ma desatinnú BODKU, nie èiarku.", "OK", "SPA");
			}
			else if(listitem == 3)
			{
			    new id = GetPlayerNearestATM(playerid);
			    if(id == -1)
			    {
			        SendError(playerid, "iadny bankomat nie je v dosahu!");
			        CallRemoteFunction("gps_OpenGPS", "i", playerid);
			        return 1;
			    }

			    gps_On[playerid] = true;
		        g_I_playerCheckpoint[playerid] = checkp_gps;
		        fix_SetPlayerCheckpoint(playerid, atmEnum[id][atm_posX], atmEnum[id][atm_posY], atmEnum[id][atm_posZ], 2.0);
		        SendSuccess(playerid, "Destinácia oznaèená na minimape!");
		        CallRemoteFunction("gps_OpenGPS", "i", playerid);
			    return 1;

			}
			else if(listitem == 4)
			{
			    ShowPlayerDialog(playerid, did_gps_cust, DIALOG_STYLE_INPUT, "VYH¼ADA NEHNUTE¼NOS", "{ffffff}> Zadajte prosím adresu nehnute¾nosti, ktorú chcete vyh¾ada!", "OK", "SPA");
			    return 1;

			}
			else
		    {
		        // Zvolil destináciu

		        if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0 || g_I_playerCheckpoint[playerid] != 0)
		            return SendError(playerid, "Miesto sa nepodarilo lokalizova!"), CallRemoteFunction("gps_OpenGPS", "i", playerid);

		        gps_On[playerid] = true;
		        g_I_playerCheckpoint[playerid] = checkp_gps;

		        new
		            Float:x = Float:A_gpsLocation[listitem-5][0][0],
		            Float:y = Float:A_gpsLocation[listitem-5][1][0],
		            Float:z = Float:A_gpsLocation[listitem-5][2][0];

		        fix_SetPlayerCheckpoint(playerid, x, y, z, 2.0);

		        SendSuccess(playerid, "Destinácia oznaèená na minimape!");

		        CallRemoteFunction("gps_OpenGPS", "i", playerid);

		        return 1;
		    }
		}

		case did_gps_custom:
		{
			if(!response)
			    return CallRemoteFunction("gps_OpenGPS", "i", playerid);

			if(isnull(inputtext))
			    ShowPlayerDialog(playerid, did_gps_custom, DIALOG_STYLE_INPUT, "GPS",
					"{ffffff}> Zadaj prosím vlastné súradnice v týle 'X.0 Y.0 Z.0' bez ''\nMedzi èíslami musia by medzery a èísla musia ma desatinnú BODKU, nie èiarku.", "OK", "SPA");

			new pos[3][15], count, Float:finpos[3];

			count = strexplode(pos, inputtext, " ");

			if(count != 3)
			    return ShowPlayerDialog(playerid, did_gps_custom, DIALOG_STYLE_INPUT, "GPS",
		 			"{ffffff}> Zadaj prosím vlastné súradnice v týle 'X.0 Y.0 Z.0' bez ''\nMedzi èíslami musia by medzery a èísla musia ma desatinnú BODKU, nie èiarku.", "OK", "SPA");

			finpos[0] = floatstr(pos[0]);
			finpos[1] = floatstr(pos[1]);
			finpos[2] = floatstr(pos[2]);

			gps_On[playerid] = true;
	  		g_I_playerCheckpoint[playerid] = checkp_gps;

	    	fix_SetPlayerCheckpoint(playerid, finpos[0], finpos[1], finpos[2], 2.0);

			SendSuccess(playerid, "Destinácia oznaèená na minimape!");

			CallRemoteFunction("gps_OpenGPS", "i", playerid);

		}

		case did_gps_cust:
		{
			if(!response)
			    return CallRemoteFunction("gps_OpenGPS", "i", playerid);

			if(isnull(inputtext))
			    return ShowPlayerDialog(playerid, did_gps_cust, DIALOG_STYLE_INPUT, "VYH¼ADA NEHNUTE¼NOS", "{ffffff}> Zadajte prosím adresu nehnute¾nosti, ktorú chcete vyh¾ada!", "OK", "SPA");

			new count, tstr[64];

			foreach( new i : Houses )
			{
				if(count >= 35)
				    break;

			    if(houseEnum[i][ho_PosVirtualWorld] != 0)
			        continue;

				if(houseEnum[i][ho_Number] < 1)
				    continue;

				format(tstr, 64, "%d%s %s, %s", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City]);

				if(strfind(tstr, inputtext, true) == -1)
				    continue;

				gpscust[playerid][count] = houseEnum[i][ho_PSC];
				count ++;

				continue;
			}

			foreach( new i : Garages )
			{
				if(count >= 35)
				    break;

			    if(garageEnum[i][ga_PosVirtualWorld] != 0)
			        continue;

				format(tstr, 64, "%d%s %s, %s", garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City]);

				if(strfind(tstr, inputtext, true) == -1)
				    continue;

				gpscust[playerid][count] = garageEnum[i][ga_PSC];
				count ++;
				continue;
			}

			foreach( new i : Businesses )
			{
				if(count >= 35)
				    break;

			    if(businessEnum[i][bz_PosVirtualWorld] != 0)
			        continue;

				if(strfind(businessEnum[i][bz_Name], inputtext, true) == -1)
				    continue;

				gpscust[playerid][count] = businessEnum[i][bz_Address];
				count ++;
				continue;
			}

			if(count == 0)
			    return SendError(playerid, "Táto nehnute¾nos nebola nájdená!"), ShowPlayerDialog(playerid, did_gps_cust, DIALOG_STYLE_INPUT, "VYH¼ADA NEHNUTE¼NOS", "{ffffff}> Zadajte prosím adresu nehnute¾nosti, ktorú chcete vyh¾ada!", "OK", "SPA");

			new finstr[1024];
			for(new i; i < count; i++)
			{
			    if(gpscust[playerid][i] <= MAX_HOUSE_ADDRESS && gpscust[playerid][i] >= MIN_HOUSE_ADDRESS)
			    {
			        new hid = searchhousebypsc(gpscust[playerid][i]);
			        if(hid == -1)
			            continue;

			    	format(tstr, 64, "%d%s %s, %s\n", houseEnum[hid][ho_Number], returnOrdinal(houseEnum[hid][ho_Number]), houseEnum[hid][ho_Street], houseEnum[hid][ho_City]);
				}
				else if(gpscust[playerid][i] <= MAX_GARAGE_ADDRESS && gpscust[playerid][i] >= MIN_GARAGE_ADDRESS)
			    {
			        new hid = searchgaragebypsc(gpscust[playerid][i]);
			        if(hid == -1)
			            continue;

			    	format(tstr, 64, "%d%s %s, %s\n", garageEnum[hid][ga_Number], returnOrdinal(garageEnum[hid][ga_Number]), garageEnum[hid][ga_Street], garageEnum[hid][ga_City]);
				}
				else
			    {
			        new hid = searchbizzbypsc(gpscust[playerid][i]);
			        if(hid == -1)
			            continue;

			    	format(tstr, 64, "%s\n", businessEnum[hid][bz_Name]);
				}

				strcat(finstr, tstr);
			}

			ShowPlayerDialog(playerid, did_gps_custchoose, DIALOG_STYLE_LIST, "VYH¼ADA NEHNUTE¼NOS", finstr, "VYBRA", "SPA");
		}

		case did_gps_custchoose:
		{

		    if(!response)
		          return ShowPlayerDialog(playerid, did_gps_cust, DIALOG_STYLE_INPUT, "VYH¼ADA NEHNUTE¼NOS", "{ffffff}> Zadajte prosím adresu nehnute¾nosti, ktorú chcete vyh¾ada!", "OK", "SPA");

            if(gpscust[playerid][listitem] <= MAX_HOUSE_ADDRESS && gpscust[playerid][listitem] >= MIN_HOUSE_ADDRESS)
			{
		        new hid = searchhousebypsc(gpscust[playerid][listitem]);
		        if(hid == -1)
		            return ShowPlayerDialog(playerid, did_gps_cust, DIALOG_STYLE_INPUT, "VYH¼ADA NEHNUTE¼NOS", "{ffffff}> Zadajte prosím adresu nehnute¾nosti, ktorú chcete vyh¾ada!", "OK", "SPA");

		    	gps_On[playerid] = true;
		  		g_I_playerCheckpoint[playerid] = checkp_gps;
		    	fix_SetPlayerCheckpoint(playerid, houseEnum[hid][ho_PosX], houseEnum[hid][ho_PosY], houseEnum[hid][ho_PosZ], 2.0);
				SendSuccess(playerid, "Destinácia oznaèená na minimape!");
				CallRemoteFunction("gps_OpenGPS", "i", playerid);
			}
			else if(gpscust[playerid][listitem] <= MAX_GARAGE_ADDRESS && gpscust[playerid][listitem] >= MIN_GARAGE_ADDRESS)
		    {
		        new hid = searchgaragebypsc(gpscust[playerid][listitem]);
		        if(hid == -1)
		            return ShowPlayerDialog(playerid, did_gps_cust, DIALOG_STYLE_INPUT, "VYH¼ADA NEHNUTE¼NOS", "{ffffff}> Zadajte prosím adresu nehnute¾nosti, ktorú chcete vyh¾ada!", "OK", "SPA");

		    	gps_On[playerid] = true;
		  		g_I_playerCheckpoint[playerid] = checkp_gps;
		    	fix_SetPlayerCheckpoint(playerid, garageEnum[hid][ga_pX], garageEnum[hid][ga_pY], garageEnum[hid][ga_pZ], 2.0);
				SendSuccess(playerid, "Destinácia oznaèená na minimape!");
				CallRemoteFunction("gps_OpenGPS", "i", playerid);
			}
			else
		    {
	        	new hid = searchbizzbypsc(gpscust[playerid][listitem]);
		        if(hid == -1)
		            return ShowPlayerDialog(playerid, did_gps_cust, DIALOG_STYLE_INPUT, "VYH¼ADA NEHNUTE¼NOS", "{ffffff}> Zadajte prosím adresu nehnute¾nosti, ktorú chcete vyh¾ada!", "OK", "SPA");

   			    gps_On[playerid] = true;
		  		g_I_playerCheckpoint[playerid] = checkp_gps;
		    	fix_SetPlayerCheckpoint(playerid, businessEnum[hid][bz_PosX], businessEnum[hid][bz_PosY], businessEnum[hid][bz_PosZ], 2.0);
				SendSuccess(playerid, "Destinácia oznaèená na minimape!");
				CallRemoteFunction("gps_OpenGPS", "i", playerid);
			}

		}

	    case did_illegal_store:
	    {
	        if(!response)
	            return 0;

			switch(listitem)
			{
			    case 0..4:
			    {

			        new index = 0;

					for(new x; x < sizeof illegal_AllowedItems; x++)
		   			{
        				if(illegal_AllowedItems[x][0] == store_weapons[playerid][listitem])
					    {
							index = x;
							break;
					    }
					}

					if(index + 1 >= sizeof(illegal_AllowedItems) || illegal_AllowedItems[index +1 ][0] > CRATE_KEVLAR_LIGHT_ID - 1)
					    index = 0;
					else
					    index ++;

					store_weapons[playerid][listitem] = illegal_AllowedItems[index][0];
			    }

			    case 6..8:
			    {

			        new index = 0;

			        for(new x; x < sizeof illegal_AllowedItems; x++)
		   			{
        				if(illegal_AllowedItems[x][0] == store_kevlar[playerid][listitem - 6])
					    {
							index = x;
							break;
					    }
					}

                    for(new x; x < sizeof illegal_AllowedItems; x++)
                    {
                        if(index + 1 >= sizeof illegal_AllowedItems)
						{
                            index = 0;
                            break;
						}

						if(x > index && (illegal_AllowedItems[x][0] == CRATE_KEVLAR_LIGHT_ID || illegal_AllowedItems[x][0] == CRATE_KEVLAR_HEAVY_ID))
						{
						    index = x;
						    break;
						}
                    }

					store_kevlar[playerid][listitem-6] = illegal_AllowedItems[index][0];
			    }

			    case 11:
			    {
			        new
					    cena;

				    for(new i; i < 5; i++)
					{
					    for(new x; x < sizeof illegal_AllowedItems; x++)
				     	{
				      		if(store_weapons[playerid][i] == illegal_AllowedItems[x][0])
							{
				   				cena += illegal_AllowedItems[x][1];
							    break;
							}
				   		}
					}

				    for(new i; i < 3; i++)
					{
					    for(new x; x < sizeof illegal_AllowedItems; x++)
				     	{
				      		if(store_kevlar[playerid][i] == illegal_AllowedItems[x][0])
							{
				   				cena += illegal_AllowedItems[x][1];
							    break;
							}
				   		}
					}

					cena += ILLEGAL_STORE_SHIPPING;

					if(ex_GetPlayerMoney(playerid) < cena)
					    return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerIllegalStore(playerid);

					ex_GivePlayerMoney(playerid, -cena);
					money_spent[playerid] += floatround(cena,floatround_round);

					new
						query[1024],
						datum = gettime() + ((3 + random(8)) * 3600);

					mysql_format(MYSQL, query, sizeof query, "INSERT INTO gm_crates (UnixOrder, UnixArrive, Weapon_1, Weapon_2, Weapon_3, Weapon_4, Weapon_5, Kevlar_1, Kevlar_2, Kevlar_3, Owner) VALUES ('%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%e')",
					    gettime(), datum,
						store_weapons[playerid][0],
                        store_weapons[playerid][1],
                        store_weapons[playerid][2],
                        store_weapons[playerid][3],
                        store_weapons[playerid][4],

                        store_kevlar[playerid][0],
                        store_kevlar[playerid][1],
                        store_kevlar[playerid][2],

                        ReturnName(playerid)
					);

					mysql_query(MYSQL, query, false);

					SCFM(playerid, 0xD0D0D0FF, "> Objednal si si dodávku za %d$, bude doruèená OKOLO %s!", cena, getdateunix(datum));
					SCFM(playerid, 0xD0D0D0FF, "> Ak bude poèas doruèenia offline, doruèí sa a keï príde!");
					FormatLog(log_type_admin, "%s(%s) si objednal dodavku za %d$, dorucena bude okolo %s", ReturnName(playerid), ReturnMaster(playerid),cena,getdateunix(datum));

			        return 1;
			    }
			}

			ShowPlayerIllegalStore(playerid);
	    }

	    case did_crate:
	    {
	        if(!response)
		        return 0;

			new
			    crateid = GetPlayerNearestCrate(playerid);

			switch(listitem)
			{
			    case 0:
			    {
			        if(crateEnum[crateid][crate_Weapon_Slot_1] == 0)
						return ShowPlayerCrateInventory(playerid, crateid);

                    if(canHaveLargeWeapon(playerid, crateEnum[crateid][crate_Weapon_Slot_1])== 0)
			   	    	return SendError(playerid, "Uz mas jednu velku zbran!"), ShowPlayerCrateInventory(playerid, crateid);

					new origin[128];
					format(origin,128,"Weapon Crate (%s)", crateEnum[crateid][crate_Owner]);
					Weapons::GivePlayerNewWeapon(playerid, crateEnum[crateid][crate_Weapon_Slot_1], 3,false,false,origin,true);
					
					FormatWeaponLog(playerid, "[give] Vyber zbrane %s s %d nabojmi z WEAPON CRATE.", GetWeaponNameEx(crateEnum[crateid][crate_Weapon_Slot_1]), 3);
					FormatLog(log_type_admin, "%s(%s) vybral z WEAPON CRATE zbran ID %d", ReturnName(playerid), ReturnMaster(playerid),crateEnum[crateid][crate_Weapon_Slot_1]);
                    crateEnum[crateid][crate_Weapon_Slot_1] = 0;

			    }
			    case 1:
			    {
			        if(crateEnum[crateid][crate_Weapon_Slot_2] == 0)
						return ShowPlayerCrateInventory(playerid, crateid);

                    if(canHaveLargeWeapon(playerid, crateEnum[crateid][crate_Weapon_Slot_2]) == 0)
			   	    	return SendError(playerid, "Uz mas jednu velku zbran!"), ShowPlayerCrateInventory(playerid, crateid);

					new origin[128];
					format(origin,128,"Weapon Crate (%s)", crateEnum[crateid][crate_Owner]);
					Weapons::GivePlayerNewWeapon(playerid, crateEnum[crateid][crate_Weapon_Slot_2], 3,false,false,origin,true);
					
					FormatWeaponLog(playerid, "[give] Vyber zbrane %s s %d nabojmi z WEAPON CRATE.", GetWeaponNameEx(crateEnum[crateid][crate_Weapon_Slot_2]), 3);
					FormatLog(log_type_admin, "%s(%s) vybral z WEAPON CRATE zbran ID %d", ReturnName(playerid), ReturnMaster(playerid),crateEnum[crateid][crate_Weapon_Slot_2]);
                    crateEnum[crateid][crate_Weapon_Slot_2] = 0;
			    }
			    case 2:
			    {
			        if(crateEnum[crateid][crate_Weapon_Slot_3] == 0)
						return ShowPlayerCrateInventory(playerid, crateid);

                    if(canHaveLargeWeapon(playerid, crateEnum[crateid][crate_Weapon_Slot_3]) == 0)
			   	    	return SendError(playerid, "Uz mas jednu velku zbran!"), ShowPlayerCrateInventory(playerid, crateid);

					new origin[128];
					format(origin,128,"Weapon Crate (%s)", crateEnum[crateid][crate_Owner]);
					Weapons::GivePlayerNewWeapon(playerid, crateEnum[crateid][crate_Weapon_Slot_3], 3,false,false,origin,true);
					
					FormatWeaponLog(playerid, "[give] Vyber zbrane %s s %d nabojmi z WEAPON CRATE.", GetWeaponNameEx(crateEnum[crateid][crate_Weapon_Slot_3]), 3);
					FormatLog(log_type_admin, "%s(%s) vybral z WEAPON CRATE zbran ID %d", ReturnName(playerid), ReturnMaster(playerid),crateEnum[crateid][crate_Weapon_Slot_3]);
                    crateEnum[crateid][crate_Weapon_Slot_3] = 0;
			    }
			    case 3:
			    {
			        if(crateEnum[crateid][crate_Weapon_Slot_4] == 0)
						return ShowPlayerCrateInventory(playerid, crateid);

                    if(canHaveLargeWeapon(playerid, crateEnum[crateid][crate_Weapon_Slot_4]) == 0)
			   	    	return SendError(playerid, "Uz mas jednu velku zbran!"), ShowPlayerCrateInventory(playerid, crateid);

					new origin[128];
					format(origin,128,"Weapon Crate (%s)", crateEnum[crateid][crate_Owner]);
					Weapons::GivePlayerNewWeapon(playerid, crateEnum[crateid][crate_Weapon_Slot_4], 3,false,false,origin,true);
					
					FormatWeaponLog(playerid, "[give] Vyber zbrane %s s %d nabojmi z WEAPON CRATE.", GetWeaponNameEx(crateEnum[crateid][crate_Weapon_Slot_4]), 3);
					FormatLog(log_type_admin, "%s(%s) vybral z WEAPON CRATE zbran ID %d", ReturnName(playerid), ReturnMaster(playerid),crateEnum[crateid][crate_Weapon_Slot_4]);
                    crateEnum[crateid][crate_Weapon_Slot_4] = 0;
			    }
			    case 4:
			    {
			        if(crateEnum[crateid][crate_Weapon_Slot_5] == 0)
						return ShowPlayerCrateInventory(playerid, crateid);

                    if(canHaveLargeWeapon(playerid, crateEnum[crateid][crate_Weapon_Slot_5]) == 0)
			   	    	return SendError(playerid, "Uz mas jednu velku zbran!"), ShowPlayerCrateInventory(playerid, crateid);

					new origin[128];
					format(origin,128,"Weapon Crate (%s)", crateEnum[crateid][crate_Owner]);
					Weapons::GivePlayerNewWeapon(playerid, crateEnum[crateid][crate_Weapon_Slot_5], 3,false,false,origin,true);
					
					FormatWeaponLog(playerid, "[give] Vyber zbrane %s s %d nabojmi z WEAPON CRATE.", GetWeaponNameEx(crateEnum[crateid][crate_Weapon_Slot_5]), 3);
					FormatLog(log_type_admin, "%s(%s) vybral z WEAPON CRATE zbran ID %d", ReturnName(playerid), ReturnMaster(playerid),crateEnum[crateid][crate_Weapon_Slot_5]);
                    crateEnum[crateid][crate_Weapon_Slot_5] = 0;
			    }
			    case 5: return ShowPlayerCrateInventory(playerid, crateid);
			    case 6:
			    {
			        if(crateEnum[crateid][crate_Kevlar_Slot_1] == 0)
						return ShowPlayerCrateInventory(playerid, crateid);

					new ar = crateEnum[crateid][crate_Kevlar_Slot_1] == CRATE_KEVLAR_LIGHT_ID ? 25 : 50;

					SetPlayerArmour(playerid, ar);
					FormatLog(log_type_admin, "%s(%s) vybral z WEAPON CRATE %d vesty", ReturnName(playerid), ReturnMaster(playerid),ar);
                    crateEnum[crateid][crate_Kevlar_Slot_1] = 0;
			    }
			    case 7:
			    {
			        if(crateEnum[crateid][crate_Kevlar_Slot_2] == 0)
						return ShowPlayerCrateInventory(playerid, crateid);

					new ar = crateEnum[crateid][crate_Kevlar_Slot_2] == CRATE_KEVLAR_LIGHT_ID ? 25 : 50;

					SetPlayerArmour(playerid, ar);
					FormatLog(log_type_admin, "%s(%s) vybral z WEAPON CRATE %d vesty", ReturnName(playerid), ReturnMaster(playerid),ar);
                    crateEnum[crateid][crate_Kevlar_Slot_2] = 0;
			    }
			    case 8:
			    {
			        if(crateEnum[crateid][crate_Kevlar_Slot_3] == 0)
						return ShowPlayerCrateInventory(playerid, crateid);

					new ar = crateEnum[crateid][crate_Kevlar_Slot_3] == CRATE_KEVLAR_LIGHT_ID ? 25 : 50;

					SetPlayerArmour(playerid, ar);
					FormatLog(log_type_admin, "%s(%s) vybral z WEAPON CRATE %d vesty", ReturnName(playerid), ReturnMaster(playerid),ar);
                    crateEnum[crateid][crate_Kevlar_Slot_3] = 0;
			    }
			}

			new str[256];
			format(str,256,"* %s nieèo vyberá z drevenej krabice.",GetPlayerNameEx(playerid, USE_MASK));
		   	SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, str);

		   	ApplyAnimation(playerid, "BOMBER", "BOM_PLANT", 4.1, false, true, true, false, 0, true); // /polozit

			if(crateEnum[crateid][crate_Kevlar_Slot_1] == 0 &&
			    crateEnum[crateid][crate_Kevlar_Slot_2] == 0 &&
			    crateEnum[crateid][crate_Kevlar_Slot_3] == 0 &&
			    crateEnum[crateid][crate_Weapon_Slot_1] == 0 &&
			    crateEnum[crateid][crate_Weapon_Slot_2] == 0 &&
			    crateEnum[crateid][crate_Weapon_Slot_3] == 0 &&
			    crateEnum[crateid][crate_Weapon_Slot_4] == 0 &&
			    crateEnum[crateid][crate_Weapon_Slot_5] == 0)
			    DestroyCrate(crateid);

			return 0;
	    }

	    case did_technicak:
		{
			return 0;
		}

	    case did_atm_vyber:
	    {

	        isUsingDialog[playerid] = false;

	        if(!response)
	            return 0;

			new query[128];
			mysql_format(MYSQL, query, 128, "SELECT * FROM gm_bankaccs WHERE AccID = '%d'",
				GetPlayerInventoryItem(playerid, inv_creditCard));
			new Cache:c = mysql_query(MYSQL, query);

			new
			    Float:Cash;

	        cache_get_value_name_float(0, "Cash", Cash);

			new string[128];
			format(string, 128, "{ffffff}> Zostatok na úète je {e34f4f}%.2${ffffff}.\n\nKo¾ko dolárov chce vybra?", Cash);


			cache_delete(c);

			if(isnull(inputtext) || !IsNumeric(inputtext) || floatstr(inputtext) < 1.00 || floatstr(inputtext) > Cash)
			    return isUsingDialog[playerid] = true, ShowPlayerDialog(playerid, did_atm_vyber, DIALOG_STYLE_INPUT, "ATM", string, "VYBRA", "ZRUI");

			ex_GivePlayerMoney(playerid, strval(inputtext));
			money_accepted[playerid] += floatround(strval(inputtext),floatround_round);

			mysql_format(MYSQL, query, 128, "UPDATE gm_bankaccs SET Cash = '%.2f' WHERE AccID = '%d'",
				Cash - floatstr(inputtext), GetPlayerInventoryItem(playerid, inv_creditCard));

			mysql_query(MYSQL, query, false);

			SCFM(playerid, 0xD0D0D0FF, "> Vybral si %.2f$ z konta %d.", floatstr(inputtext), GetPlayerInventoryItem(playerid, inv_creditCard));

			FormatLog(log_type_player, "%s(%s - %s) vybera %d$ z bankomatu z konta %d.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), strval(inputtext), GetPlayerInventoryItem(playerid, inv_creditCard));

			return 1;
		}

		case did_atm_pin:
	    {

	        isUsingDialog[playerid] = false;

	        if(!response)
	            return 0;

			new string[128];
			format(string, 128, "{ffffff}> Aký chce nový PIN kód?");

			if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 0 || strval(inputtext) > 9999)
			    return isUsingDialog[playerid] = false, ShowPlayerDialog(playerid, did_atm_pin, DIALOG_STYLE_INPUT, "ATM", string, "POTVRDI", "ZRUI");

			new query[128];
			mysql_format(MYSQL, query, 128, "UPDATE gm_bankaccs SET PIN = '%d' WHERE AccID = '%d'",
				strval(inputtext), GetPlayerInventoryItem(playerid, inv_creditCard));

			mysql_query(MYSQL, query, false);

			SCFM(playerid, 0xD0D0D0FF, "> Nastavil si PIN %04d kontu %d.", strval(inputtext), GetPlayerInventoryItem(playerid, inv_creditCard));

			FormatLog(log_type_player, "%s(%s - %s) nastavil PIN %04d kontu %d.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), strval(inputtext), GetPlayerInventoryItem(playerid, inv_creditCard));

			return 1;
		}

		case did_atm_zostatok:
		{
		    isUsingDialog[playerid] = false;
		}

	    case did_banka:
	    {
	        if(!response)
	            return 0;

			if(listitem == 0)
			{
			    if(ex_GetPlayerMoney(playerid) < 50)
			        return SendError(playerid, "Nemá 50$ dolárov na vytvorenie bankového konta!"), ShowPlayerBank(playerid);

				if(!HasFreeBankSlot(playerid))
				    return SendError(playerid, "Nemá volný slot na nové bankové konto!"), ShowPlayerBank(playerid);

                ex_GivePlayerMoney(playerid, -50);
                money_spent[playerid] += floatround(50,floatround_round);

				new
				    accid = rand(100000000, 999999999),
				    pin = rand(0, 9999),
					query[256];

				mysql_format(MYSQL, query, 256, "INSERT INTO gm_bankaccs (AccID, Owner , PIN, Cash, Block) VALUES ('%d', '%e', '%d', '0', '0')",
					accid, ReturnName(playerid), pin);
				mysql_query(MYSQL, query, false);

				SCFM(playerid, 0xD0D0D0FF, "> Vytvoril si si bankové konto (úèet: %d, pin: %04d) za 75$!", accid, pin);

				ShowPlayerBank(playerid);
			}
			else if(listitem == 1)
			{
			    AddPlayerBankDollar(playerid);
			}
			else if(listitem == 2)
			{
			    PlayerBankCard(playerid);
			}
			else if(listitem == 3)
			{

				DeletePlayerBankAccounts(playerid);
			}
	    }

	    case did_banka_card:
	    {
	        if(!response)
	            return ShowPlayerBank(playerid);

            bank_editid[playerid] = listitem;

            new
			    S_query[256],
				Cache:C_q;

			mysql_format(MYSQL, S_query, 256, "SELECT * FROM gm_bankaccs WHERE Owner = '%e'", ReturnName(playerid));
			C_q = mysql_query(MYSQL, S_query);

			new
				accid;

			cache_get_value_name_int(bank_editid[playerid], "AccID", accid);

		    cache_delete(C_q);

			SetPlayerInventoryItem(playerid, inv_creditCard, accid);

			SendError(playerid, "Získal si novú kreditnú kartu! Ale pozor, môe ma iba jednu, ak si mal predtým inú, prepísala sa ti.");

			ShowPlayerBank(playerid);
	    }

	    case did_banka_add:
	    {
			if(!response)
	            return ShowPlayerBank(playerid);

            bank_editid[playerid] = listitem;

            new
			    S_query[256],
				Cache:C_q,

				S_finalString[2048];

			mysql_format(MYSQL, S_query, 256, "SELECT * FROM gm_bankaccs WHERE Owner = '%e'", ReturnName(playerid));
			C_q = mysql_query(MYSQL, S_query);

			new
				accid,
				pin,
				Float:cash;

			cache_get_value_name_int(listitem, "AccID", accid);
		    cache_get_value_name_int(listitem, "PIN", pin);
		    cache_get_value_name_float(listitem, "Cash", cash);

			format(S_finalString, 1024, "{FFFFFF}> Zadaj prosím, ko¾ko dolárov chce vloi na toto konto.\n\nÈíslo úètu: {e34f4f}%d\n{ffffff}PIN kód: {e34f4f}****\n{ffffff}Stav úètu: {e34f4f}%.2f$\n{ffffff}Poplatok za zruenie: {e34f4f}%d$", accid, cash, 150 - floatround(cash / 10000, floatround_round));

			cache_delete(C_q);

			ShowPlayerDialog(playerid, did_banka_add_count, DIALOG_STYLE_INPUT, "VLOI NA KONTO", S_finalString, "VLOI", "SPA");

	    }

	    case did_banka_add_count:
	    {
	        if(!response)
	            return AddPlayerBankDollar(playerid);

			if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1 || ex_GetPlayerMoney(playerid) < strval(inputtext))
			    return SendError(playerid, "To¾ko peòazí nemá!"), AddPlayerBankDollar(playerid);

            new
			    S_query[256],
				Cache:C_q;

			mysql_format(MYSQL, S_query, 256, "SELECT * FROM gm_bankaccs WHERE Owner = '%e'", ReturnName(playerid));
			C_q = mysql_query(MYSQL, S_query);

			new
				accid,
				pin,
				Float:cash,
				block;

			cache_get_value_name_int(bank_editid[playerid], "AccID", accid);
		    cache_get_value_name_int(bank_editid[playerid], "PIN", pin);
		    cache_get_value_name_float(bank_editid[playerid], "Cash", cash);
		    cache_get_value_name_int(bank_editid[playerid], "Block", block);

		    cache_delete(C_q);
		    
		    if(block == 1)
		        return SendError(playerid, "Toto bankové konto je zablokované!"), ShowPlayerBank(playerid);
		        
            ex_GivePlayerMoney(playerid, -floatstr(inputtext));
			money_givenby[playerid] += floatround(floatstr(inputtext),floatround_round);

		    mysql_format(MYSQL, S_query, 256, "UPDATE gm_bankaccs SET Cash = '%.2f' WHERE AccID = '%d'", cash + floatstr(inputtext), accid);
			mysql_query(MYSQL, S_query, false);

			FormatLog(log_type_player, "%s(%s - %s) vlozil %.2f$ na svoje bankove konto %d.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), floatstr(inputtext), accid);

			SCFM(playerid, 0xD0D0D0FF, "> Vloil si %.2f$ do tvojho konta! (vklad: %.2f$, zostatok: %.2f$)", floatstr(inputtext), floatstr(inputtext), cash + floatstr(inputtext));

            for(new f; f < MAX_FACTIONS; f++)
		    {
		    	if(strlen(factEnum[f][fact_Name]) < 3) continue;
			    if(factEnum[f][fact_Type] == FACTION_TYPE_GOV) {
		     		factEnum[f][fact_Cash] += floatround(floatstr(inputtext) / 100 * 5, floatround_floor);
				}
	    	}

	    	ShowPlayerBank(playerid);
		}

	    case did_banka_accs:
	    {
	        if(!response)
	            return ShowPlayerBank(playerid);

            if(ex_GetPlayerMoney(playerid) < 150)
			        return SendError(playerid, "Nemá 150$ dolárov na zruenie bankového konta!"), ShowPlayerBank(playerid);

            bank_editid[playerid] = listitem;

            new
			    S_query[256],
				Cache:C_q,

				S_finalString[2048];

			mysql_format(MYSQL, S_query, 256, "SELECT * FROM gm_bankaccs WHERE Owner = '%e'", ReturnName(playerid));
			C_q = mysql_query(MYSQL, S_query);

			new
				accid,
				pin,
				Float:cash,
				block;

			cache_get_value_name_int(listitem, "AccID", accid);
		    cache_get_value_name_int(listitem, "PIN", pin);
		    cache_get_value_name_float(listitem, "Cash", cash);
		    cache_get_value_name_int(listitem, "Block", block);
		    
		    if(block == 1)
		        return SendError(playerid, "Toto bankové konto je zablokované!"), ShowPlayerBank(playerid);

			format(S_finalString, 1024, "{FFFFFF}> Skutoène chcete vymaza toto bankové konto?\n\nÈíslo úètu: {e34f4f}%d\n{ffffff}PIN kód: {e34f4f}****\n{ffffff}Stav úètu: {e34f4f}%.2f$\n{ffffff}Poplatok za zruenie: {e34f4f}%d$", accid, cash, 150 - floatround(cash / 10000, floatround_round));

			cache_delete(C_q);

			ShowPlayerDialog(playerid, did_banka_accs_rem, DIALOG_STYLE_MSGBOX, "ZMAZA KONTO", S_finalString, "ÁNO", "NIE");


	    }

	    case did_banka_accs_rem:
	    {
	        if(!response)
	            return DeletePlayerBankAccounts(playerid);

            new
			    S_query[256],
				Cache:C_q;

			mysql_format(MYSQL, S_query, 256, "SELECT * FROM gm_bankaccs WHERE Owner = '%e'", ReturnName(playerid));
			C_q = mysql_query(MYSQL, S_query);

			new
				accid,
				pin,
				Float:cash;

			cache_get_value_name_int(bank_editid[playerid], "AccID", accid);
		    cache_get_value_name_int(bank_editid[playerid], "PIN", pin);
		    cache_get_value_name_float(bank_editid[playerid], "Cash", cash);

		    cache_delete(C_q);

			if(ex_GetPlayerMoney(playerid) < 150 - floatround(cash / 10000, floatround_round))
				return SendError(playerid, "Nemá dos peòazí na zruenie konta!"), DeletePlayerBankAccounts(playerid);

            mysql_format(MYSQL, S_query, 256, "UPDATE gm_bankaccs SET Owner = '%e-DELETED' WHERE Owner = '%e' AND AccID = '%d' AND PIN = '%d'", ReturnName(playerid), ReturnName(playerid), accid, pin);
			mysql_query(MYSQL, S_query, false);

			ex_GivePlayerMoney(playerid, -150 - floatround(cash / 10000, floatround_round));
			money_spent[playerid] += floatround(150 + floatround(cash / 10000, floatround_round),floatround_round);

			SendError(playerid, "Bankové konto bolo zruené!");

			ShowPlayerBank(playerid);

			FormatLog(log_type_player, "%s(%s - %s) zmazal bankove konto %d s %d$ na ucte.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), accid, cash);
	    }

	    case did_vehinfo:
	    {
	        return 0;
	    }

	    case did_boombox:
	    {
	        if(!response)
	            return 0;
			if(listitem == 0)
			{
			    format(bb_Url[boomzal[playerid]], 256, "");
			    RefreshBoombox(boomzal[playerid]);

			    new
					S_finalString[128 + 25 + 5];

				new S_first[25];
				if(B_playerHasMask[playerid] == false) {
				    strcat(S_first, ReturnName(playerid));
				    strdel(S_first,strfind(S_first,"_",true),25);
				} else {
				    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
				}

			    format(S_finalString, sizeof(S_finalString), "AME: * %s vypína rádio.", S_first);
			    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

				format(S_finalString, sizeof(S_finalString), "* %s vypína rádio", S_first);
			 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

			 	return ShowBoomboxMenu(boomzal[playerid], playerid);
			}
			else if(listitem == 1)
			{
			    return ShowPlayerDialog(playerid, did_boombox_custom, DIALOG_STYLE_INPUT, "BOOMBOX", "{ffffff}> Zadaj URL vlastnej hudobnej stanice!", "OK", "ZRUI");
			}
			else if(listitem == 2)
			{
			    return ShowPlayerDialog(playerid, did_boombox_add_1, DIALOG_STYLE_INPUT, "BOOMBOX", "{ffffff}> Zadaj meno novej stanice!", "ÏALEJ", "SPA");
			}
			else
			{
				return ShowBoomboxDetail(playerid, listitem - 3);
			}
	    }

	    case did_boombox_add_1:
	    {
	        if(!response)
	            return ShowBoomboxMenu(boomzal[playerid], playerid);

			if(isnull(inputtext) || strlen(inputtext) > 35)
			    return
					SendError(playerid, "Meno stanice musí ma od 1 do 35 znakov!"),
					ShowPlayerDialog(playerid, did_boombox_add_1, DIALOG_STYLE_INPUT, "BOOMBOX", "{ffffff}> Zadaj meno novej stanice!", "ÏALEJ", "SPA");

			format(bbAdd_NAME[playerid], 64, "%s", inputtext);

			ShowPlayerDialog(playerid, did_boombox_add_2, DIALOG_STYLE_INPUT, "BOOMBOX", "{ffffff}> Zadaj URL tejto novej stanice novej stanice!", "ÏALEJ", "ZRUI");
		}

	    case did_boombox_add_2:
	    {
	        if(!response)
	            return ShowBoomboxMenu(boomzal[playerid], playerid);

            if(isnull(inputtext))
			    return
					SendError(playerid, "Zadaj prosím URL adresu tejto stanice!"),
					ShowPlayerDialog(playerid, did_boombox_add_2, DIALOG_STYLE_INPUT, "BOOMBOX", "{ffffff}> Zadaj URL tejto novej stanice novej stanice!", "ÏALEJ", "ZRUI");

			new
			    query[512];

			mysql_format(MYSQL, query, sizeof query, "INSERT INTO char_radios (Username, NAME, URL) VALUES ('%e', '%e', '%e')", ReturnName(playerid), bbAdd_NAME[playerid], inputtext);
			mysql_query(MYSQL, query, false);

			SendSuccess(playerid, "Rádio stanica pridaná!");

			ShowBoomboxMenu(boomzal[playerid], playerid);
		}

		case did_boombox_menu:
		{
			if(!response)
			    return ShowBoomboxMenu(boomzal[playerid], playerid);

			if(listitem == 0)
			{
			    format(bb_Url[boomzal[playerid]], 256, bbTemp_URL[playerid]);
	   			RefreshBoombox(boomzal[playerid]);

			    new
					S_finalString[128 + 25 + 5];

				new S_first[25];
				if(B_playerHasMask[playerid] == false) {
				    strcat(S_first, ReturnName(playerid));
				    strdel(S_first,strfind(S_first,"_",true),25);
				} else {
				    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
				}

			    format(S_finalString, sizeof(S_finalString), "AME: * %s ladí rádio.", S_first);
			    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

				format(S_finalString, sizeof(S_finalString), "* %s ladí rádio", S_first);
			 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

			 	return ShowBoomboxMenu(boomzal[playerid], playerid);
			}
			else
			{
			    new
			        query[512];

				mysql_format(MYSQL, query, sizeof query, "DELETE FROM char_radios WHERE Username = '%e' AND NAME = '%e' AND URL = '%e' LIMIT 1",
				    ReturnName(playerid), bbTemp_NAME[playerid], bbTemp_URL[playerid]);

				mysql_query(MYSQL, query, false);

				return ShowBoomboxMenu(boomzal[playerid], playerid);
			}
		}

	    case did_boombox_custom:
	    {
	        if(!response)
	            return ShowBoomboxMenu(boomzal[playerid], playerid);

			if(isnull(inputtext))
			    return ShowPlayerDialog(playerid, did_boombox_custom, DIALOG_STYLE_INPUT, "BOOMBOX", "{ffffff}> Zadaj URL vlastnej hudobnej stanice!", "OK", "ZRUI");

            format(bb_Url[boomzal[playerid]], 256, inputtext);
   			RefreshBoombox(boomzal[playerid]);

		    new
				S_finalString[128 + 25 + 5];

			new S_first[25];
			if(B_playerHasMask[playerid] == false) {
			    strcat(S_first, ReturnName(playerid));
			    strdel(S_first,strfind(S_first,"_",true),25);
			} else {
			    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

		    format(S_finalString, sizeof(S_finalString), "AME: * %s ladí rádio.", S_first);
		    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

			format(S_finalString, sizeof(S_finalString), "* %s ladí rádio", S_first);
		 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

		 	return ShowBoomboxMenu(boomzal[playerid], playerid);
	    }

	    case did_carradio:
	    {
	        if(!response)
	            return 0;

			if(listitem == 0)
			{

				format(vEnum[GetPlayerVehicleID(playerid)][v_RadioURL], 256, "");
			    RefreshCarRadio(GetPlayerVehicleID(playerid));

			    new
					S_finalString[128 + 25 + 5];

				new S_first[25];
				if(B_playerHasMask[playerid] == false) {
				    strcat(S_first, ReturnName(playerid));
				    strdel(S_first,strfind(S_first,"_",true),25);
				} else {
				    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
				}

			    format(S_finalString, sizeof(S_finalString), "AME: * %s vypína rádio.", S_first);
			    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

				format(S_finalString, sizeof(S_finalString), "* %s vypína rádio", S_first);
			 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

			 	return ShowCarRadioMenu(playerid);
			}
			else if(listitem == 1)
			    return ShowPlayerDialog(playerid, did_carradio_custom, DIALOG_STYLE_INPUT, "AUTORÁDIO", "{ffffff}> Zadaj URL vlastnej hudobnej stanice!", "OK", "ZRUI");
			else if(listitem == 2)
			{
			    return ShowPlayerDialog(playerid, did_carradio_add_1, DIALOG_STYLE_INPUT, "AUTORÁDIO", "{ffffff}> Zadaj meno novej stanice!", "ÏALEJ", "SPA");
			}
			else
			{
				return ShowCarRadioDetail(playerid, listitem - 3);
			}
	    }

	    case did_carradio_custom:
	    {
	        if(!response)
	            return ShowCarRadioMenu(playerid);

			if(isnull(inputtext))
			    return ShowPlayerDialog(playerid, did_carradio_custom, DIALOG_STYLE_INPUT, "AUTORÁDIO", "{ffffff}> Zadaj URL vlastnej hudobnej stanice!", "OK", "ZRUI");

            format(vEnum[GetPlayerVehicleID(playerid)][v_RadioURL], 256, inputtext);
   			RefreshCarRadio(GetPlayerVehicleID(playerid));

		    new
				S_finalString[128 + 25 + 5];

			new S_first[25];
			if(B_playerHasMask[playerid] == false) {
			    strcat(S_first, ReturnName(playerid));
			    strdel(S_first,strfind(S_first,"_",true),25);
			} else {
			    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

		    format(S_finalString, sizeof(S_finalString), "AME: * %s ladí rádio.", S_first);
		    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

			format(S_finalString, sizeof(S_finalString), "* %s ladí rádio", S_first);
		 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

		 	return ShowCarRadioMenu(playerid);
	    }

	    case did_carradio_add_1:
	    {
	        if(!response)
	            return ShowCarRadioMenu(playerid);

			if(isnull(inputtext) || strlen(inputtext) > 35)
			    return
					SendError(playerid, "Meno stanice musí ma od 1 do 35 znakov!"),
					ShowPlayerDialog(playerid, did_carradio_add_1, DIALOG_STYLE_INPUT, "AUTORÁDIO", "{ffffff}> Zadaj meno novej stanice!", "ÏALEJ", "SPA");

			format(bbAdd_NAME[playerid], 64, "%s", inputtext);

			ShowPlayerDialog(playerid, did_carradio_add_2, DIALOG_STYLE_INPUT, "AUTORÁDIO", "{ffffff}> Zadaj URL tejto novej stanice novej stanice!", "ÏALEJ", "ZRUI");
		}

	    case did_carradio_add_2:
	    {
	        if(!response)
	            return ShowCarRadioMenu(playerid);

            if(isnull(inputtext))
			    return
						SendError(playerid, "Zadaj prosím URL adresu tejto stanice!"),
						ShowPlayerDialog(playerid, did_carradio_add_2, DIALOG_STYLE_INPUT, "AUTORÁDIO", "{ffffff}> Zadaj URL tejto novej stanice novej stanice!", "ÏALEJ", "ZRUI");

			new
			    query[512];

			mysql_format(MYSQL, query, sizeof query, "INSERT INTO char_radios (Username, NAME, URL) VALUES ('%e', '%e', '%e')", ReturnName(playerid), bbAdd_NAME[playerid], inputtext);
			mysql_query(MYSQL, query, false);

			SendSuccess(playerid, "Rádio stanica pridaná!");

			ShowCarRadioMenu(playerid);
		}

		case did_carradio_menu:
		{
			if(!response)
			    return ShowCarRadioMenu(playerid);

			if(listitem == 0)
			{
				format(vEnum[GetPlayerVehicleID(playerid)][v_RadioURL], 256, bbTemp_URL[playerid]);
				RefreshCarRadio(GetPlayerVehicleID(playerid));

				new
					S_finalString[128 + 25 + 5];

				new S_first[25];
				if(B_playerHasMask[playerid] == false) {
					strcat(S_first, ReturnName(playerid));
					strdel(S_first,strfind(S_first,"_",true),25);
				} else {
					format(S_first,25,"(%d)",I_playerMaskID[playerid]);
				}

				format(S_finalString, sizeof(S_finalString), "AME: * %s ladí rádio.", S_first);
				SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

				format(S_finalString, sizeof(S_finalString), "* %s ladí rádio", S_first);
				BubbleChat(playerid, COLOR_VIOLET, S_finalString);

				return ShowCarRadioMenu(playerid);
			}
			else
			{
			    new
			        query[512];

				mysql_format(MYSQL, query, sizeof query, "DELETE FROM char_radios WHERE Username = '%e' AND NAME = '%e' AND URL = '%e' LIMIT 1",
				    ReturnName(playerid), bbTemp_NAME[playerid], bbTemp_URL[playerid]);

				mysql_query(MYSQL, query, false);

				return ShowCarRadioMenu(playerid);
			}
		}

	    case did_dmv_info:
	    {
	        if(!response)
	            return ShowDMV(playerid);

            StartDMV(playerid);
		}

	    case did_dmv:
	    {
	        if(!response)
	            return 0;

	        ShowDMVInfo(playerid, listitem);
	    }

	    case menut_armyshop:
	    {
	        if(!response)
	            return 1;

            if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    		return SendError(playerid, "Tento biznis ma prazdny sklad!");


	        if(ex_GetPlayerMoney(playerid) < armyshop_items[listitem][1][0])
	            return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerMenu(playerid, menut_armyshop);

            DecrBizTovar(GetPlayerBusiness(playerid));

            new
			    S_string[256];

			format(S_string, 256, "~w~Zakupil si si produkt za ~g~%d$~w~.", armyshop_items[listitem][1][0]);

			new origin[128], bid = GetPlayerBusiness(playerid);
			if(bid != -1) format(origin,128,"Army Shop %s (%s)", businessEnum[bid][bz_Name], GetPlayerNameEx(playerid, NO_MASK));
			else format(origin,128,"Army Shop Exterier (%s)", GetPlayerNameEx(playerid, NO_MASK));
			Weapons::GivePlayerNewWeapon(playerid, armyshop_items[listitem][2][0], 1, false,false,origin,true);
			
			FormatWeaponLog(playerid, "[give] Kupa %s s %d nabojmi z ARMY SHOPu.", GetWeaponNameEx(armyshop_items[listitem][2][0]), 1);

			ex_GivePlayerMoney(playerid, -armyshop_items[listitem][1][0]);
			money_spent[playerid] += floatround(armyshop_items[listitem][1][0],floatround_round);

			AddBusinessCash(GetPlayerBusiness(playerid), armyshop_items[listitem][1][0]);

			EnterInfo(playerid, S_string, 5000, 1);

            ShowPlayerMenu(playerid, menut_armyshop);
	    }

	    case menut_grow_shop:
	    {
	        if(!response)
	            return 1;

            if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    		return SendError(playerid, "Tento biznis ma prazdny sklad!");

	        if(ex_GetPlayerMoney(playerid) < menuitem_growshop[listitem][1][0])
	            return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerMenu(playerid, menut_grow_shop);

            DecrBizTovar(GetPlayerBusiness(playerid));

            new
			    S_string[256];

			format(S_string, 256, "~w~Zakupil si si produkt za ~g~%d$~w~.", menuitem_growshop[listitem][1][0]);

			SetPlayerInventoryItem(playerid, menuitem_growshop[listitem][2][0], GetPlayerInventoryItem(playerid, menuitem_growshop[listitem][2][0]) + 1);

			ex_GivePlayerMoney(playerid, -menuitem_growshop[listitem][1][0]);
			money_spent[playerid] +=floatround(menuitem_growshop[listitem][1][0],floatround_round);

			AddBusinessCash(GetPlayerBusiness(playerid), menuitem_growshop[listitem][1][0]);

			EnterInfo(playerid, S_string, 5000, 1);

            ShowPlayerMenu(playerid, menut_grow_shop);
	    }

	    case menut_gym:
	    {
	        if(!response)
	            return 1;

	        if(g_I_XP[playerid] < menuitem_fightstyle[listitem][1][0])
	            return SendError(playerid, "Nemá dos XP!"), ShowPlayerMenu(playerid, menut_gym);

            new
			    S_string[256];

			format(S_string, 256, "~w~Zakupil si si novy bojovy styl za ~y~%d XP~w~.", menuitem_fightstyle[listitem][1][0]);

			SetPlayerFightingStyle(playerid, menuitem_fightstyle[listitem][2][0]);
			g_I_Fightstyle[playerid] = menuitem_fightstyle[listitem][2][0];

			g_I_XP[playerid] -= menuitem_fightstyle[listitem][1][0];

			AddBusinessCash(GetPlayerBusiness(playerid), menuitem_fightstyle[listitem][1][0] * 500);

			FormatLog(log_type_buythings, "%s(%s) si kupil bojovy styl %s za %d XP!", ReturnName(playerid), ReturnIP(playerid), menuitem_fightstyle[listitem][0], menuitem_fightstyle[listitem][1][0]);

			EnterInfo(playerid, S_string, 5000, 1);

            ShowPlayerMenu(playerid, menut_gym);
	    }

	    case menut_shop_hardware:
	    {
	        if(!response)
	            return 1;

            if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    		return SendError(playerid, "Tento biznis ma prazdny sklad!");

	        if(ex_GetPlayerMoney(playerid) < menuitem_hardware[listitem][1][0])
	            return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerMenu(playerid, menut_shop_hardware);

            DecrBizTovar(GetPlayerBusiness(playerid));

            new
			    S_string[256];

			format(S_string, 256, "~w~Zakupil si si produkt za ~g~%d$~w~.", menuitem_hardware[listitem][1][0]);

			if(menuitem_hardware[listitem][2][0] == 123568)
			{
				new origin[128], bid = GetPlayerBusiness(playerid);
				if(bid != -1) format(origin,128,"Hardware Shop %s (%s)", businessEnum[bid][bz_Name], GetPlayerNameEx(playerid, NO_MASK));
				else format(origin,128,"Hardware Shop Exterier (%s)", GetPlayerNameEx(playerid, NO_MASK));
				Weapons::GivePlayerNewWeapon(playerid, 41, 300, false,false,origin,true);
				
				FormatWeaponLog(playerid, "[give] Kupa %s s %d nabojmi z HARDWARE SHOPu.", GetWeaponNameEx(41), 300);
			}
			else if(menuitem_hardware[listitem][2][0] == 123567)
			{
				new origin[128], bid = GetPlayerBusiness(playerid);
				if(bid != -1) format(origin,128,"Hardware Shop %s (%s)", businessEnum[bid][bz_Name], GetPlayerNameEx(playerid, NO_MASK));
				else format(origin,128,"Hardware Shop Exterier (%s)", GetPlayerNameEx(playerid, NO_MASK));
				Weapons::GivePlayerNewWeapon(playerid, 9, 1, false,false,origin,true);
				
				FormatWeaponLog(playerid, "[give] Kupa %s s %d nabojmi z HARDWARE SHOPu.", GetWeaponNameEx(9), 1);
			}
			else
				SetPlayerInventoryItem(playerid, menuitem_hardware[listitem][2][0], GetPlayerInventoryItem(playerid, menuitem_hardware[listitem][2][0]) + 1);

			ex_GivePlayerMoney(playerid, -menuitem_hardware[listitem][1][0]);
			money_spent[playerid] +=floatround(menuitem_hardware[listitem][1][0],floatround_round);

			AddBusinessCash(GetPlayerBusiness(playerid), menuitem_hardware[listitem][1][0]);

			EnterInfo(playerid, S_string, 5000, 1);

            ShowPlayerMenu(playerid, menut_shop_hardware);
	    }

	    case menut_car_tools:
	    {
	        if(!response)
	            return 1;

            if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    		return SendError(playerid, "Tento biznis ma prazdny sklad!");

	        if(ex_GetPlayerMoney(playerid) < menuitem_car_tools[listitem][1][0])
	            return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerMenu(playerid, menut_car_tools);

            DecrBizTovar(GetPlayerBusiness(playerid));

            new
			    S_string[256];

			format(S_string, 256, "~w~Zakupil si si produkt za ~g~%d$~w~.", menuitem_car_tools[listitem][1][0]);

			SetPlayerInventoryItem(playerid, menuitem_car_tools[listitem][2][0], GetPlayerInventoryItem(playerid, menuitem_car_tools[listitem][2][0]) + 1);

			ex_GivePlayerMoney(playerid, -menuitem_car_tools[listitem][1][0]);
			money_spent[playerid] +=floatround(menuitem_car_tools[listitem][1][0],floatround_round);

			AddBusinessCash(GetPlayerBusiness(playerid), menuitem_car_tools[listitem][1][0]);

			EnterInfo(playerid, S_string, 5000, 1);

            ShowPlayerMenu(playerid, menut_car_tools);
	    }

	    case did_kupit_kredit_electro:
	    {

	        if(!response)
	            return ShowPlayerMenu(playerid, menut_electro_shop);

            if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    		return SendError(playerid, "Tento biznis ma prazdny sklad!");

			new
			    cena = 0;

			switch(listitem)
			{
			    case 0:
			    {
			        cena = 5;
			    }

			    case 1:
			    {
			        cena = 10;
			    }

			    case 2:
			    {
					cena = 20;
			    }
			}

			if(ex_GetPlayerMoney(playerid) < cena)
	            return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerDialog(playerid, did_kupit_kredit_electro, DIALOG_STYLE_TABLIST, "DOBI KREDIT",
			        "{FFFFFF}5 USD\t{2fb838}$5\n{FFFFFF}10 USD\t{2fb838}$10\n{FFFFFF}20 USD\t{2fb838}$20",
			        "VYBRA", "SPA");

            DecrBizTovar(GetPlayerBusiness(playerid));

			ph_Credit[playerid] += cena;
			ex_GivePlayerMoney(playerid, -cena);
			money_spent[playerid] += floatround(cena,floatround_round);

			AddBusinessCash(GetPlayerBusiness(playerid), cena);

			SCFM(playerid, COLOR_COMMANDUSE, "[ TELEFÓN ] {ffffff}Doplnil si kredit %d USD pre èíslo %d za %d$!", cena, phone_getPlayerNumber(playerid), cena);

			return ShowPlayerDialog(playerid, did_kupit_kredit_electro, DIALOG_STYLE_TABLIST, "DOBI KREDIT",
   				"{FFFFFF}5 USD\t{2fb838}$5\n{FFFFFF}10 USD\t{2fb838}$10\n{FFFFFF}20 USD\t{2fb838}$20",
			    "VYBRA", "SPA");
	    }

	    case menut_electro_shop:
	    {
	        if(!response)
	            return 1;

            if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    		return SendError(playerid, "Tento biznis ma prazdny sklad!");

            if(menuitem_electro[listitem][2][0] == 51561561561)
			{

			    if(GetPlayerInventoryItem(playerid, inv_telefon) != 1)
				    return SendError(playerid, "Nemôe si doplni kredit!"), ShowPlayerMenu(playerid, menut_electro_shop);

                if(GetPlayerInventoryItem(playerid, inv_simcard) == 1)
				    return SendError(playerid, "Nemôe si doplni kredit!"), ShowPlayerMenu(playerid, menut_electro_shop);

				if(ph_PayMode[playerid] != 1)
				    return SendError(playerid, "Nemôe si doplni kredit!"), ShowPlayerMenu(playerid, menut_electro_shop);

			    return ShowPlayerDialog(playerid, did_kupit_kredit_electro, DIALOG_STYLE_TABLIST, "DOBI KREDIT",
			        "{FFFFFF}5 USD\t{2fb838}$5\n{FFFFFF}10 USD\t{2fb838}$10\n{FFFFFF}20 USD\t{2fb838}$20",
			        "VYBRA", "SPA");
			}

	        if(ex_GetPlayerMoney(playerid) < menuitem_electro[listitem][1][0])
	            return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerMenu(playerid, menut_electro_shop);

            if(menuitem_electro[listitem][2][0] == _:inv_simcard)
			{
			    return ShowPlayerDialog(playerid, did_kupit_sim_kartu, DIALOG_STYLE_LIST, "VYBER SI",
			        "Chcem pouíva kredit\nChcem strhávanie z výplaty",
			        "VYBRA", "SPA");
			}

            new
			    S_string[256];

			format(S_string, 256, "~w~Zakupil si si produkt za ~g~%d$~w~.", menuitem_electro[listitem][1][0]);

			DecrBizTovar(GetPlayerBusiness(playerid));

            if(menuitem_electro[listitem][2][0] == 43)
            {
                new origin[128], bid = GetPlayerBusiness(playerid);
				if(bid != -1) format(origin,128,"Electro Shop %s (%s)", businessEnum[bid][bz_Name], GetPlayerNameEx(playerid, NO_MASK));
				else format(origin,128,"Electro Shop Exterier (%s)", GetPlayerNameEx(playerid, NO_MASK));
				Weapons::GivePlayerNewWeapon(playerid, 43, 50, false,false,origin,true);
                
                FormatWeaponLog(playerid, "[give] Kupa %s s %d nabojmi z ELECTRO SHOPu.", GetWeaponNameEx(43), 50);
			}
			else if(menuitem_electro[listitem][2][0] == _:inv_vysielacka)
			    SetPlayerInventoryItem(playerid, inv_vysielacka, 1.0);
            else
				SetPlayerInventoryItem(playerid, menuitem_electro[listitem][2][0], 1);

			ex_GivePlayerMoney(playerid, -menuitem_electro[listitem][1][0]);
			money_spent[playerid] += floatround(menuitem_electro[listitem][1][0],floatround_round);

			AddBusinessCash(GetPlayerBusiness(playerid), menuitem_electro[listitem][1][0]);

			EnterInfo(playerid, S_string, 5000, 1);

            ShowPlayerMenu(playerid, menut_electro_shop);
	    }

	    case did_kupit_sim_kartu:
	    {
	        if(!response)
	            return ShowPlayerDialog(playerid, did_kupit_sim_kartu, DIALOG_STYLE_LIST, "VYBER SI",
			        "Chcem pouíva kredit\nChcem strhávanie z výplaty",
			        "VYBRA", "SPA");

			new
   				randNumber = rand(100000000, 999999999),
				Query[128]
			;

			SetPlayerInventoryItem(playerid, inv_simcard, randNumber);

			mysql_format(MYSQL, Query, 128, "UPDATE char_inventory SET SimKarta = '%d' WHERE Username = '%e'",
			    randNumber, ReturnName(playerid));

			mysql_query(MYSQL, Query, false);

			ph_PayMode[playerid] = listitem + 1;
			if(ph_Credit[playerid] < 20 && listitem == 0)
			    ph_Credit[playerid] = 20;

			if(listitem == 0)
			{
			    // Kúpil si na kredit
			    SCFM(playerid, COLOR_COMMANDUSE, "[ TELEFÓN ] {ffffff}Zakúpil si si novú SIM kartu s èíslom %d!", randNumber);
			    SCFM(playerid, COLOR_COMMANDUSE, "[ TELEFÓN ] {ffffff}Spôsobom platby je kredit, môe si ho dobi v kadom Elektro Shope alebo General Store.");
		     	SCFM(playerid, COLOR_COMMANDUSE, "[ TELEFÓN ] {ffffff}Na zaèiatok sme ti nabili kredit na 20 USD, ui si volanie!");
			}
			else
			{
			    // Kúpil si na pauál
			    SCFM(playerid, COLOR_COMMANDUSE, "[ TELEFÓN ] {ffffff}Zakúpil si si novú SIM kartu s èíslom %d!", randNumber);
			    SCFM(playerid, COLOR_COMMANDUSE, "[ TELEFÓN ] {ffffff}Spôsobom platby je pauál, po kadom volaní sa ti úèet strhne z výplaty.");
			}

			ShowPlayerMenu(playerid, menut_electro_shop);
	    }

	    case menut_general_store:
	    {
	        if(!response)
	            return 1;

            if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    		return SendError(playerid, "Tento biznis ma prazdny sklad!");

	        if(ex_GetPlayerMoney(playerid) < menuitem_general[listitem][1][0])
	            return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerMenu(playerid, menut_general_store);

            DecrBizTovar(GetPlayerBusiness(playerid));

            new
			    S_string[256];

			format(S_string, 256, "~w~Zakupil si si produkt za ~g~%d$~w~.", menuitem_general[listitem][1][0]);

			if(menuitem_general[listitem][2][0] != _:inv_cigarety && menuitem_general[listitem][2][0] != _:inv_zapalovac)
				SetPlayerInventoryItem(playerid, menuitem_general[listitem][2][0], GetPlayerInventoryItem(playerid, menuitem_general[listitem][2][0]) + 1);
			else
			    SetPlayerInventoryItem(playerid, menuitem_general[listitem][2][0], GetPlayerInventoryItem(playerid, menuitem_general[listitem][2][0]) + 20);

			ex_GivePlayerMoney(playerid, -menuitem_general[listitem][1][0]);
			money_spent[playerid] +=floatround(menuitem_general[listitem][1][0],floatround_round);

			AddBusinessCash(GetPlayerBusiness(playerid), menuitem_general[listitem][1][0]);

			EnterInfo(playerid, S_string, 5000, 1);

            ShowPlayerMenu(playerid, menut_general_store);
	    }

	    case did_vehicle_spawn_confirm:
	    {
			if(!response)
			    return ShowPlayerVehicleGet(playerid);

            SpawnPlayerVehicle(playerid);
	    }

	    case did_vehicle_spawn:
	    {
			if(!response)
			    return 0;

            ShowPlayerVehicleGetConfirm(playerid, listitem);
	    }

	    case did_skinstorage_choose:
	    {
	        if(!response)
	            return 0;

			if(skinStorage[playerid][listitem] < 1)
			    return SendError(playerid, "Na tomto slote nie je iadny skin!"), ShowPlayerSkinStorage(playerid);

			ex_SetPlayerSkin(playerid, skinStorage[playerid][listitem]);
			if(!IsPlayerWorking(playerid))
				I_pSkin_Civil[playerid] = skinStorage[playerid][listitem];
			else
			    I_pSkin_Work[playerid] = skinStorage[playerid][listitem];

			SendSuccess(playerid, "Skin zmenený!");
	    }

	    case did_skinstorage_buy:
		{

		    if(!response)
		        return 0;

			if(listitem < 2)
			{
			    skinStorage[playerid][listitem] = currSkinModel[playerid];
			    SendSuccess(playerid, "aty uloené do atníku!");
			}
			else
			{
			    if(listitem == 2)
				{
				    if(GetPlayerDonatorLevel(playerid) > 0 || skinStorage[playerid][2] > 0)
				    {
				        skinStorage[playerid][listitem] = currSkinModel[playerid];
			    		SendSuccess(playerid, "aty uloené do atníku!");

			    		return 1;
				    }

				    new
						finalString[256],
						tempString[128];

					if(skinStorage[playerid][0] < 1) format(tempString, 128, "[#1] Klikni pre výber\n{ffffff}");
					else format(tempString, 128, "{d64d4d}[#1] Skin ID: %d\n{ffffff}", skinStorage[playerid][0]);

					strcat(finalString, tempString);

					if(skinStorage[playerid][1] < 1) format(tempString, 128, "[#2] Klikni pre výber\n{ffffff}");
					else format(tempString, 128, "{d64d4d}[#2] Skin ID: %d\n{ffffff}", skinStorage[playerid][1]);

					strcat(finalString, tempString);

					if(GetPlayerDonatorLevel(playerid) < 1)
					{
						if(skinStorage[playerid][2] < 1) format(tempString, 128, "{e7b310}[#3] Iba pre Donator Level 1 a vyie\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#3] Skin ID: %d\n{ffffff}", skinStorage[playerid][2]);
					}
					else
					{
						if(skinStorage[playerid][2] < 1) format(tempString, 128, "[#3] Klikni pre výber\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#3] Skin ID: %d\n{ffffff}", skinStorage[playerid][2]);
					}

					strcat(finalString, tempString);

					if(GetPlayerDonatorLevel(playerid) < 2)
					{
						if(skinStorage[playerid][3] < 1) format(tempString, 128, "{e7b310}[#4] Iba pre Donator Level 2 a vyie\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#4] Skin ID: %d\n{ffffff}", skinStorage[playerid][3]);
					}
					else
					{
						if(skinStorage[playerid][3] < 1) format(tempString, 128, "[#4] Klikni pre výber\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#4] Skin ID: %d\n{ffffff}", skinStorage[playerid][3]);
					}

					strcat(finalString, tempString);

					if(GetPlayerDonatorLevel(playerid) < 3)
					{
						if(skinStorage[playerid][4] < 1) format(tempString, 128, "{e7b310}[#5] Iba pre Donator Level 3\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#5] Skin ID: %d\n{ffffff}", skinStorage[playerid][4]);
					}
					else
					{
						if(skinStorage[playerid][4] < 1) format(tempString, 128, "[#5] Klikni pre výber{ffffff}");
						else format(tempString, 128, "{d64d4d}[#5] Skin ID: %d{ffffff}", skinStorage[playerid][4]);
					}

					strcat(finalString, tempString);

					ShowPlayerDialog(playerid, did_skinstorage_buy, DIALOG_STYLE_LIST, "ULOI SKIN", finalString, "ULOI", "PRESKOÈI");

					return SendError(playerid, "Nie si donator!");
				}

				if(listitem == 3)
				{

				    if(GetPlayerDonatorLevel(playerid) > 1 || skinStorage[playerid][3] > 0)
				    {
				        skinStorage[playerid][listitem] = currSkinModel[playerid];
			    		SendSuccess(playerid, "aty uloené do atníku!");

			    		return 1;
				    }

					new
						finalString[256],
						tempString[128];

					if(skinStorage[playerid][0] < 1) format(tempString, 128, "[#1] Klikni pre výber\n{ffffff}");
					else format(tempString, 128, "{d64d4d}[#1] Skin ID: %d\n{ffffff}", skinStorage[playerid][0]);

					strcat(finalString, tempString);

					if(skinStorage[playerid][1] < 1) format(tempString, 128, "[#2] Klikni pre výber\n{ffffff}");
					else format(tempString, 128, "{d64d4d}[#2] Skin ID: %d\n{ffffff}", skinStorage[playerid][1]);

					strcat(finalString, tempString);

					if(GetPlayerDonatorLevel(playerid) < 1)
					{
						if(skinStorage[playerid][2] < 1) format(tempString, 128, "{e7b310}[#3] Iba pre Donator Level 1 a vyie\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#3] Skin ID: %d\n{ffffff}", skinStorage[playerid][2]);
					}
					else
					{
						if(skinStorage[playerid][2] < 1) format(tempString, 128, "[#3] Klikni pre výber\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#3] Skin ID: %d\n{ffffff}", skinStorage[playerid][2]);
					}

					strcat(finalString, tempString);

					if(GetPlayerDonatorLevel(playerid) < 2)
					{
						if(skinStorage[playerid][3] < 1) format(tempString, 128, "{e7b310}[#4] Iba pre Donator Level 2 a vyie\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#4] Skin ID: %d\n{ffffff}", skinStorage[playerid][3]);
					}
					else
					{
						if(skinStorage[playerid][3] < 1) format(tempString, 128, "[#4] Klikni pre výber\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#4] Skin ID: %d\n{ffffff}", skinStorage[playerid][3]);
					}

					strcat(finalString, tempString);

					if(GetPlayerDonatorLevel(playerid) < 3)
					{
						if(skinStorage[playerid][4] < 1) format(tempString, 128, "{e7b310}[#5] Iba pre Donator Level 3\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#5] Skin ID: %d\n{ffffff}", skinStorage[playerid][4]);
					}
					else
					{
						if(skinStorage[playerid][4] < 1) format(tempString, 128, "[#5] Klikni pre výber{ffffff}");
						else format(tempString, 128, "{d64d4d}[#5] Skin ID: %d{ffffff}", skinStorage[playerid][4]);
					}

					strcat(finalString, tempString);

					ShowPlayerDialog(playerid, did_skinstorage_buy, DIALOG_STYLE_LIST, "ULOI SKIN", finalString, "ULOI", "PRESKOÈI");

					return SendError(playerid, "Nie si donator!");
				}

				if(listitem == 4)
			    {

			        if(GetPlayerDonatorLevel(playerid) >= 3 || skinStorage[playerid][4] > 0)
				    {
				        skinStorage[playerid][listitem] = currSkinModel[playerid];
			    		SendSuccess(playerid, "aty uloené do atníku!");

			    		return 1;
				    }

			        new
						finalString[256],
						tempString[128];

					if(skinStorage[playerid][0] < 1) format(tempString, 128, "[#1] Klikni pre výber\n{ffffff}");
					else format(tempString, 128, "{d64d4d}[#1] Skin ID: %d\n{ffffff}", skinStorage[playerid][0]);

					strcat(finalString, tempString);

					if(skinStorage[playerid][1] < 1) format(tempString, 128, "[#2] Klikni pre výber\n{ffffff}");
					else format(tempString, 128, "{d64d4d}[#2] Skin ID: %d\n{ffffff}", skinStorage[playerid][1]);

					strcat(finalString, tempString);

					if(GetPlayerDonatorLevel(playerid) < 1)
					{
						if(skinStorage[playerid][2] < 1) format(tempString, 128, "{e7b310}[#3] Iba pre Donator Level 1 a vyie\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#3] Skin ID: %d\n{ffffff}", skinStorage[playerid][2]);
					}
					else
					{
						if(skinStorage[playerid][2] < 1) format(tempString, 128, "[#3] Klikni pre výber\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#3] Skin ID: %d\n{ffffff}", skinStorage[playerid][2]);
					}

					strcat(finalString, tempString);

					if(GetPlayerDonatorLevel(playerid) < 2)
					{
						if(skinStorage[playerid][3] < 1) format(tempString, 128, "{e7b310}[#4] Iba pre Donator Level 2 a vyie\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#4] Skin ID: %d\n{ffffff}", skinStorage[playerid][3]);
					}
					else
					{
						if(skinStorage[playerid][3] < 1) format(tempString, 128, "[#4] Klikni pre výber\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#4] Skin ID: %d\n{ffffff}", skinStorage[playerid][3]);
					}

					strcat(finalString, tempString);

					if(GetPlayerDonatorLevel(playerid) < 3)
					{
						if(skinStorage[playerid][4] < 1) format(tempString, 128, "{e7b310}[#5] Iba pre Donator Level 3\n{ffffff}");
						else format(tempString, 128, "{d64d4d}[#5] Skin ID: %d\n{ffffff}", skinStorage[playerid][4]);
					}
					else
					{
						if(skinStorage[playerid][4] < 1) format(tempString, 128, "[#5] Klikni pre výber{ffffff}");
						else format(tempString, 128, "{d64d4d}[#5] Skin ID: %d{ffffff}", skinStorage[playerid][4]);
					}

					strcat(finalString, tempString);

					ShowPlayerDialog(playerid, did_skinstorage_buy, DIALOG_STYLE_LIST, "ULOI SKIN", finalString, "ULOI", "PRESKOÈI");

					return SendError(playerid, "Nie si donator!");
				}
			}
		}

	    case did_afkpls:
	    {
	        return 0;
	    }

		case did_menuList:
		{
		    return 0;
		}

		case did_charkill_rename:
		{
			if(!response)
			{
	            return SelectTextDraw(playerid, 0x494949FF);
			}

			if(isnull(inputtext) || strlen(inputtext) < 6 || strlen(inputtext) >= MAX_PLAYER_NAME-2)
			{
			    Character::noresponse[playerid]=false;
				return SendError(playerid, "Zadal si neplatné meno!");
			}

			if(strfind(inputtext, "_", true) == -1)
			{
			    Character::noresponse[playerid]=false;
				return SendError(playerid, "Zadal si neplatné meno!");
			}

			new
			    bool:error = true,
				name[ 35 ];

			format(name, sizeof name, "%s", inputtext);

			for( new i; i<strlen(name); i++)
			{

			    if(
					(name[i] >= 'a' && name[i] <= 'z')
					|| name[i] == '_'
					||
					(name[i] >= 'A' && name[i] <= 'Z'))
					error = false;
			    else
			    {
			        error = true;
			        break;
			    }

			}

			if(error == true)
			{
			    Character::noresponse[playerid]=false;
				return SendError(playerid, "Zadal si neplatné meno!");
			}

			if(strfind(name, "_", false) == -1)
			    error = true;

			if(name[0] == '_' || name[strlen(name)-1] == '_')
			    error = true;

            if(error == true)
			{
			    Character::noresponse[playerid]=false;
				return SendError(playerid, "Zadal si neplatné meno!");
			}

			new
			    string[144];

			mysql_format(MYSQL, string, sizeof string, "SELECT * FROM char_main WHERE Username = '%e'", name);
			new Cache:cache = mysql_query(MYSQL, string);

			if(cache_num_rows() != 0)
			    error = true;

			cache_delete(cache);

			if(error == true)
			{
			    Character::noresponse[playerid]=false;
				return SendError(playerid, "Zadal si neplatné meno!");
			}

			RenameTicket[playerid] --;

			new query[128];
			mysql_format(MYSQL, query, 128, "UPDATE master_accounts SET RenameTicket = '%d' WHERE Username = '%e'", RenameTicket[playerid], ReturnMaster(playerid));
			mysql_tquery(MYSQL, query);

			renameCharacter(charnametmp[playerid], inputtext);

			SendSuccess(playerid, "Charakter premenovaný!");

			Character::noresponse[playerid] = false;

			FormatLog(log_type_player, "%s(%s) si premenoval charakter %s na %s (CK)", ReturnMaster(playerid), ReturnIP(playerid), charnametmp[playerid], inputtext);

			Character::DestroyTextdraws(playerid);
	    	Character::ShowSelection(playerid);

			return 0;

		}

		case did_charkill_rem_confirm:
		{
			if(!response)
			{
	            return SelectTextDraw(playerid, 0x494949FF);
			}

			new
			    query[144];

			foreach( new i : Houses ) {
			    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;

				if(strcmp(houseEnum[i][ho_Owner], charnametmp[playerid], false))
				    continue;

				format(houseEnum[i][ho_Owner], 30, "_");
				ReloadHouseLabel(i);
			}

			foreach( new i : Garages ) {
			    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;

				if(strcmp(garageEnum[i][ga_Owner], charnametmp[playerid], false))
				    continue;

				format(garageEnum[i][ga_Owner], 30, "_");

				ReloadGarageLabel(i);
			}

			foreach( new i : Businesses ) {
			    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;

			    if(strcmp(businessEnum[i][bz_Owner], charnametmp[playerid], false))
			        continue;

				format(businessEnum[i][bz_Owner], 30, "_");

				ReloadBusinessLabel(i);
				return 1;
			}

			foreach( new i : Drops ) {
			    if(strlen(dropEnum[i][drop_PlacedBy]) < 2) continue;

				if(strcmp(dropEnum[i][drop_PlacedBy], charnametmp[playerid], false))
				    continue;

				DestroyDynamicDrop(i);
			    break;
			}

			foreach ( new i : Vehicle )
			{
			    if(strlen(vEnum[i][v_Owner]) < 2)
			        continue;

				if(strcmp(vEnum[i][v_Owner], charnametmp[playerid], false))
				    continue;

				format(vEnum[i][v_Owner], 30, "DELETE");
				SavePlayerVehicle(i, 2);
			}

			mysql_format(MYSQL, query, 1024, "DELETE FROM char_inventory WHERE Username = '%e'", charnametmp[playerid]);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, 1024, "DELETE FROM char_main WHERE Username = '%e'", charnametmp[playerid]);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, 1024, "DELETE FROM player_weapons WHERE Username = '%e'", charnametmp[playerid]);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, 1024, "DELETE FROM char_clothing WHERE Username = '%e'", charnametmp[playerid]);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, 1024, "DELETE FROM char_pokuty WHERE Username = '%e'", charnametmp[playerid]);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, 1024, "DELETE FROM char_trestneciny WHERE Username = '%e'", charnametmp[playerid]);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, 1024, "DELETE FROM char_radios WHERE Username = '%e'", charnametmp[playerid]);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, 1024, "DELETE FROM char_vehicles WHERE Owner = '%e'", charnametmp[playerid]);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, 1024, "DELETE FROM gm_bankaccs WHERE Owner = '%e'", charnametmp[playerid]);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, 1024, "DELETE FROM gm_crates WHERE Owner = '%e'", charnametmp[playerid]);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, 1024, "DELETE FROM gm_weed WHERE Owner = '%e'", charnametmp[playerid]);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, 1024, "DELETE FROM phone_contacts WHERE Username = '%e'", charnametmp[playerid]);
			mysql_query(MYSQL, query, false);

			mysql_format(MYSQL, query, 1024, "DELETE FROM phone_list WHERE DisplayFor = '%e'", charnametmp[playerid]);
			mysql_query(MYSQL, query, false);

			SendSuccess(playerid, "Charakter natrvalo zmazaný!");
			
			Character::noresponse[playerid] = true;

			FormatLog(log_type_player, "%s(%s) si zmazal charakter %s (CK)", ReturnMaster(playerid), ReturnIP(playerid), charnametmp[playerid]);

			Character::DestroyTextdraws(playerid);
	    	Character::ShowSelection(playerid);

			return 0;

		}

		case did_options_pwd:
		{
		    if(!response)
		        return ShowPlayerOptions(playerid);

			if(isnull(inputtext) || strlen(inputtext) < 6 || strlen(inputtext) > 32)
			{
			    SendError(playerid, "Heslo musi mat od 6 do 32 znakov!");
			    return ShowPlayerDialog(playerid, did_options_pwd, DIALOG_STYLE_INPUT, "ZMENA HESLA", "{FFFFFF}> Zadaj prosím svoje nové heslo! Musí ma od 6 do 32 znakov.", "ZMENI", "SPA");
			}

			new query[255];
			mysql_format(MYSQL, query, sizeof query, "UPDATE master_accounts SET Password = md5('%e') WHERE Username = '%e'", inputtext, ReturnMaster(playerid));
			mysql_query(MYSQL, query, false);

			SendSuccess(playerid, "Heslo zmenené!");

			FormatLog(log_type_player, "%s(%s) si zmenil heslo!!!", ReturnMaster(playerid), ReturnIP(playerid));

			ShowPlayerOptions(playerid);
		}

	    case did_options:
	    {

	        if(!response)
	            return 0;

			if(listitem == 0)
			{
				return ShowPlayerDialog(playerid, did_options_pwd, DIALOG_STYLE_INPUT, "ZMENA HESLA", "{FFFFFF}> Zadaj prosím svoje nové heslo! Musí ma od 6 do 32 znakov.", "ZMENI", "SPA");
			}
	        else if(listitem == 1)
	        {
	            if(opt_TimeTd[playerid] == 1)
	                opt_TimeTd[playerid] = 0, PlayerPlaySound(playerid,1052,0.0,0.0,0.0);
				else
				    opt_TimeTd[playerid] = 1, PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
	        }
	        else if(listitem == 2)
	        {
	            if(opt_WebTd[playerid] == 1)
	                opt_WebTd[playerid] = 0, PlayerPlaySound(playerid,1052,0.0,0.0,0.0);
				else
				    opt_WebTd[playerid] = 1, PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
	        }
	        else if(listitem == 3)
	        {
	            if(opt_CentTd[playerid] == 1)
	                opt_CentTd[playerid] = 0, PlayerPlaySound(playerid,1052,0.0,0.0,0.0);
				else
				    opt_CentTd[playerid] = 1, PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
	        }
	        else if(listitem == 4)
	        {
	            if(opt_PM[playerid] == 1)
	                opt_PM[playerid] = 0, PlayerPlaySound(playerid,1052,0.0,0.0,0.0);
				else
				    opt_PM[playerid] = 1, PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
	        }
	        else if(listitem == 5)
	        {
	            if(opt_Sounds[playerid] == 1)
	                opt_Sounds[playerid] = 0, PlayerPlaySound(playerid,1052,0.0,0.0,0.0);
				else
				    opt_Sounds[playerid] = 1, PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
	        }
	        else if(listitem == 6)
	        {
	            opt_VitalTd[playerid] ++;
	            if(opt_VitalTd[playerid] > 2)
	                opt_VitalTd[playerid] = 0;

				PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
	        }
	        else if(listitem == 7)
	        {
	            //PRÍZVUK

	            new
	                S_string[128*2];

				if(strlen(prizvuk[playerid]) > 0)
				    format(S_string, sizeof(S_string), "{FFFFFF}> Zadaj nový prízvuk tvojho charakteru!\n\nMaximálne 20 znakov.\nAktuálny prízvuk: %s\n\nPre vypnutie zadaj 'off'.", prizvuk[playerid]);
				else
				    format(S_string, sizeof(S_string), "{FFFFFF}> Zadaj nový prízvuk tvojho charakteru!\n\nMaximálne 20 znakov.\nAktuálny prízvuk: NIE JE\n\nPre vypnutie zadaj 'off'.");

	            return ShowPlayerDialog(playerid, did_options_prizvuk, DIALOG_STYLE_INPUT, "ZMENA PRÍZVUKU", S_string, "OK", "ZRUI");
	        }
	        else if(listitem == 8)
	        {
	            //POPIS

	            new
	                S_string[128*2];

				if(strlen(popis[playerid]) > 0)
				    format(S_string, sizeof(S_string), "{FFFFFF}> Zadaj nový popis tvojho charakteru!\n\nMaximálne 120 znakov.\nAktuálny popis: %s\n\nPre vypnutie zadaj 'off'.", popis[playerid]);
				else
				    format(S_string, sizeof(S_string), "{FFFFFF}> Zadaj nový popis tvojho charakteru!\n\nMaximálne 120 znakov.\nAktuálny popis: NIE JE\n\nPre vypnutie zadaj 'off'.");

	            return ShowPlayerDialog(playerid, did_options_popis, DIALOG_STYLE_INPUT, "ZMENA POPISU", S_string, "OK", "ZRUI");
	        }
	        else if(listitem == 9)
	        {
	            opt_ChatAnim[playerid] ++;
	            if(opt_ChatAnim[playerid] > 1)
	                opt_ChatAnim[playerid] = 0;

				PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
	        }
	        else if(listitem == 10)
	        {
	            if(Vyplata_TYP[playerid] != 0)
	                Vyplata_TYP[playerid] = 0;
				else
				    return ShowPlayerDialog(playerid, did_options_bankacc, DIALOG_STYLE_INPUT, "VÝPLATA NA ÚÈET", "{ffffff}> Zadaj prosím èíslo úètu, na ktorý chce výplatu posiela!", "OK", "ZRUI");
	        }
	        else if(listitem == 11)
	        {
	            opt_tachometer[playerid] ++;
	            if(opt_tachometer[playerid] > 1)
	                opt_tachometer[playerid] = 0;

				PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
	        }
	        else if(listitem == 12)
	        {
	            opt_ShowColor[playerid] ++;
	            if(opt_ShowColor[playerid] > 1)
	                opt_ShowColor[playerid] = 0;

				PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
	        }
	        else if(listitem == 13)
	        {
	            opt_HideMaster[playerid] ++;
	            if(opt_HideMaster[playerid] > 1)
	                opt_HideMaster[playerid] = 0;

				PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
	        }
	        else if(listitem == 14)
	        {
	            opt_vyppasy[playerid] ++;
	            if(opt_vyppasy[playerid] > 1)
	                opt_vyppasy[playerid] = 0;

				PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
	        }

	        BumpPlayerOptions(playerid);
	        BumpPlayerColor(playerid);
	        ShowPlayerOptions(playerid);
	        return 0;
	    }

	    case did_options_bankacc:
	    {
	        if(!response)
	            return ShowPlayerOptions(playerid);

			if(isnull(inputtext) || !IsNumeric(inputtext))
			    return ShowPlayerDialog(playerid, did_options_bankacc, DIALOG_STYLE_INPUT, "VÝPLATA NA ÚÈET", "{ffffff}> Zadaj prosím èíslo úètu, na ktorý chce výplatu posiela!", "OK", "ZRUI");

			new
			    Query[90],
			    Cache:cache;

			mysql_format(MYSQL, Query, sizeof Query, "SELECT * FROM gm_bankaccs WHERE AccID = '%d'", strval(inputtext));
			cache = mysql_query(MYSQL, Query);

			new pocet = cache_num_rows();

			cache_delete(cache);

			if(pocet == 0)
				return SendError(playerid, "Takýto úèet neexistuje!"),
				    ShowPlayerDialog(playerid, did_options_bankacc, DIALOG_STYLE_INPUT, "VÝPLATA NA ÚÈET", "{ffffff}> Zadaj prosím èíslo úètu, na ktorý chce výplatu posiela!", "OK", "ZRUI");

			SendSuccess(playerid, "Èíslo úètu úspene aktualizované!");

			Vyplata_TYP[playerid] = strval(inputtext);

			ShowPlayerOptions(playerid);
	    }

	    case did_options_prizvuk:
	    {
	        if(!response)
	            return ShowPlayerOptions(playerid);

			if(isnull(inputtext) || strlen(inputtext) > 20)
			{
			    new
	                S_string[128*2];

				if(strlen(prizvuk[playerid]) > 0)
				    format(S_string, sizeof(S_string), "{FFFFFF}> Zadaj nový prízvuk tvojho charakteru!\n\nMaximálne 20 znakov.\nAktuálny prízvuk: %s\n\nPre vypnutie zadaj 'off'.", prizvuk[playerid]);
				else
				    format(S_string, sizeof(S_string), "{FFFFFF}> Zadaj nový prízvuk tvojho charakteru!\n\nMaximálne 20 znakov.\nAktuálny prízvuk: NIE JE\n\nPre vypnutie zadaj 'off'.");

	           	return ShowPlayerDialog(playerid, did_options_prizvuk, DIALOG_STYLE_INPUT, "ZMENA PRÍZVUKU", S_string, "OK", "ZRUI");
			}

			format(prizvuk[playerid], 32, inputtext);

			if(!strcmp(prizvuk[playerid], "off", false))
			    format(prizvuk[playerid], 32, "");

			SendSuccess(playerid, "Prízvuk bol úspene aktualizovaný!");

			ShowPlayerOptions(playerid);
	    }

	    case did_options_popis:
	    {
	        if(!response)
	            return ShowPlayerOptions(playerid);

			if(isnull(inputtext) || strlen(inputtext) > 120)
			{
			    new
	                S_string[128*2];

				if(strlen(popis[playerid]) > 0)
				    format(S_string, sizeof(S_string), "{FFFFFF}> Zadaj nový popis tvojho charakteru!\n\nMaximálne 120 znakov.\nAktuálny popis: %s\n\nPre vypnutie zadaj 'off'.", popis[playerid]);
				else
				    format(S_string, sizeof(S_string), "{FFFFFF}> Zadaj nový popis tvojho charakteru!\n\nMaximálne 120 znakov.\nAktuálny popis: NIE JE\n\nPre vypnutie zadaj 'off'.");

	            return ShowPlayerDialog(playerid, did_options_popis, DIALOG_STYLE_INPUT, "ZMENA POPISU", S_string, "OK", "ZRUI");
			}
			
			if(!strcmp(inputtext,"off",true))
				updateppopis(playerid,""), format(popis[playerid], 128, "");
			else
			    updateppopis(playerid,inputtext), format(popis[playerid], 128, inputtext);

			SendSuccess(playerid, "Popis bol úspene aktualizovaný!");

			ShowPlayerOptions(playerid);
	    }

	    case did_newbies:
	    {
	        return 0;
	    }

	    case did_changelog:
	    {
	        return 0;
	    }

	    case did_posledneprikazy:
	    {
	         watchCmds[playerid] = -1;
	         return 0;
	    }

	    case did_locker_sd_skin_m:
	    {
	        if(!response)
	            return ShowPlayerSDLocker(playerid);

			I_pSkin_Work[playerid] = lockerSkin_SD_m[listitem];

			if(IsPlayerWorking(playerid))
			    SetPlayerSkin(playerid, I_pSkin_Work[playerid]);

			SendSuccess(playerid, "Zmenil si si pracovnú uniformu!");

			ShowPlayerSDLocker(playerid);
	    }

	    case did_locker_sd_skin_f:
	    {
	        if(!response)
	            return ShowPlayerSDLocker(playerid);

			I_pSkin_Work[playerid] = lockerSkin_SD_f[listitem];

			if(IsPlayerWorking(playerid))
			    SetPlayerSkin(playerid, I_pSkin_Work[playerid]);

			SendSuccess(playerid, "Zmenil si si pracovnú uniformu!");

			ShowPlayerSDLocker(playerid);
	    }

	    case did_locker_fd_skin_m:
	    {
	        if(!response)
	            return ShowPlayerFDLocker(playerid);

			I_pSkin_Work[playerid] = lockerSkin_FD_m[listitem];

			if(IsPlayerWorking(playerid))
			    SetPlayerSkin(playerid, I_pSkin_Work[playerid]);

			SendSuccess(playerid, "Zmenil si si pracovnú uniformu!");

			ShowPlayerFDLocker(playerid);
	    }

	    case did_locker_fd_skin_f:
	    {
	        if(!response)
	            return ShowPlayerFDLocker(playerid);

			I_pSkin_Work[playerid] = lockerSkin_FD_f[listitem];

			if(IsPlayerWorking(playerid))
			    SetPlayerSkin(playerid, I_pSkin_Work[playerid]);

			SendSuccess(playerid, "Zmenil si si pracovnú uniformu!");

			ShowPlayerFDLocker(playerid);
	    }

	    case did_barriers:
	    {
	        if(!response)
	            return 0;

            new
			    Float:X,
			    Float:Y,
			    Float:Z,
			    Float:A;

			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);

			//A += 90.0;

			Z -= 0.5;

			GetXYInFrontOfPlayer(playerid, X, Y, 3.0);

			new
				objectid = CreateDynamicObject(BARRIERS_LIST[listitem][E_BARRIERS_LISTITEM_MODEL], X, Y, Z, 0.0, 0.0, A, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 50.0, 25.0, -1);

			Streamer_Update(playerid);

			IsEditingBarrier[playerid] = true;
			SpikeModel[playerid] = BARRIERS_LIST[listitem][E_BARRIERS_LISTITEM_MODEL];

			SetTimerEx("tim_FixEditObject", 700, false, "ii", playerid, objectid);
	    }

	    case did_locker_sd:
	    {
	        if(!response)
	            return 0;

			if(listitem == 0)
			{

			    if(IsPlayerWorking(playerid))
				{

			        ex_SetPlayerSkin(playerid, I_pSkin_Civil[playerid]);

			        Weapons::resetWeapons(playerid);

			        SetPlayerArmour(playerid, 0.0);

			        new
			            radioString[128];

					if(strlen(GetPlayerFactionTitle(playerid)) < 1 || !strcmp(GetPlayerFactionTitle(playerid), "Nic", false))
						format(radioString, 128, "[ Radio - 9112 MHz ] Dispeèer: %s je na stanici a hlási sa mimo sluby.", GetPlayerNameEx(playerid, NO_MASK));
					else
					    format(radioString, 128, "[ Radio - 9112 MHz ] Dispeèer: %s %s je na stanici a hlási sa mimo sluby.", GetPlayerFactionTitle(playerid), GetPlayerNameEx(playerid, NO_MASK));

					foreach( new i : Player )
					{
					    if(GetPlayerFaction(i) != GetPlayerFaction(playerid))
					        continue;

						if(!IsPlayerWorking(i))
						    continue;

						SendClientMessage(i, COLOR_RADIO, radioString);
					}

					IsWorking[playerid] = false;

                    BumpPlayerColor(playerid);
					ShowPlayerSDLocker(playerid);
				}
				else
				{
				    if(I_pSkin_Work[playerid] < 1)
						return SendError(playerid, "Najprv si vyber uniformu!"), ShowPlayerSDLocker(playerid);

                    IsWorking[playerid] = true;

			        ex_SetPlayerSkin(playerid, I_pSkin_Work[playerid]);

			        new
			            radioString[128];

					if(strlen(GetPlayerFactionTitle(playerid)) < 1 || !strcmp(GetPlayerFactionTitle(playerid), "Nic", false))
						format(radioString, 128, "[ Radio - 9112 MHz ] Dispeèer: %s je na stanici a hlási sa do sluby.", GetPlayerNameEx(playerid, NO_MASK));
					else
					    format(radioString, 128, "[ Radio - 9112 MHz ] Dispeèer: %s %s je na stanici a hlási sa do sluby.", GetPlayerFactionTitle(playerid), GetPlayerNameEx(playerid, NO_MASK));

					foreach( new i : Player )
					{
					    if(GetPlayerFaction(i) != GetPlayerFaction(playerid))
					        continue;

						if(!IsPlayerWorking(i))
						    continue;

						SendClientMessage(i, COLOR_RADIO, radioString);
					}

                    BumpPlayerColor(playerid);
					ShowPlayerSDLocker(playerid);
				}

			}
			else if(listitem == 1)
			{
			    if(GetPlayerGender(playerid) == 1)
			    {
			        new string[sizeof lockerSkin_SD_m * 8];
				    for (new i; i < sizeof lockerSkin_SD_m; i++)
				    {
				        format(string, sizeof string, "%s%i\n", string, lockerSkin_SD_m[i]);
				    }
				    return ShowPlayerDialog(playerid, did_locker_sd_skin_m, DIALOG_STYLE_PREVIEW_MODEL, "VYBER UNIFORMY", string, "VYBRAT", "SPAT");

				}
				else if(GetPlayerGender(playerid) == 2)
				{
				    new string[sizeof lockerSkin_SD_f * 8];
				    for (new i; i < sizeof lockerSkin_SD_f; i++)
				    {
				        format(string, sizeof string, "%s%i\n", string, lockerSkin_SD_f[i]);
				    }
				    return ShowPlayerDialog(playerid, did_locker_sd_skin_f, DIALOG_STYLE_PREVIEW_MODEL, "VYBER UNIFORMY", string, "VYBRAT", "SPAT");

				}
				else
				{
					SendError(playerid, "Mal si nastavené chybné pohlavie, bolo ti automaticky nastavené na MU!");
					g_I_playerGender[playerid] = 1;

					new string[sizeof lockerSkin_SD_m * 8];
				    for (new i; i < sizeof lockerSkin_SD_m; i++)
				    {
				        format(string, sizeof string, "%s%i\n", string, lockerSkin_SD_m[i]);
				    }
				    return ShowPlayerDialog(playerid, did_locker_sd_skin_m, DIALOG_STYLE_PREVIEW_MODEL, "VYBER UNIFORMY", string, "VYBRAT", "SPAT");

				}
			}
			else if(listitem == 2)
			{
			    if(!IsPlayerWorking(playerid))
			        return SendError(playerid, "Nie si v slube!"), ShowPlayerSDLocker(playerid);
				ShowPlayerSDLocker_Guns(playerid);
			}
			else if(listitem == 3)
			{
			    ShowPlayerSDLocker(playerid);
			}
			else if(listitem == 4)
			{
			    //Výpoveï
			    if(g_I_VypovedUnix[playerid] > 10)
			    {
			        new
						price = 5000;

					if(GetPlayerDonatorLevel(playerid) == 0) price = 5000;
					else if(GetPlayerDonatorLevel(playerid) == 1) price = 2500;
					else if(GetPlayerDonatorLevel(playerid) == 2) price = 1200;
					else if(GetPlayerDonatorLevel(playerid) == 3) price = 500;

					new
						string[256];

            		format(string, 256, "{FFFFFF}> Bohuial, u si raz podal výpoveï!\n\nAutomaticky bude prepustený {e34f4f}%s {ffffff}!\nChce výpoveï stornova? Môe tak uèini za %d$.\nNÁPOVEDA: Zakúpením tatútu donator sa skráti èas na èakanie na výpoveï!",
						/*hour, minute,*/ getdateunix(g_I_VypovedUnix[playerid]), price);

			        return ShowPlayerDialog(playerid, did_locker_sd_vypoved, DIALOG_STYLE_MSGBOX, "VYPOVED", string, "ANO", "NIE");
			    }
			    else
			    {
			        new
			            hodina = 24,
			        	unixtime = gettime() + (3600 * 24); // 24 hodin

	                if(GetPlayerDonatorLevel(playerid) == 0) hodina = 24, unixtime = gettime() + (3600 * 24); // 24 hodin
					else if(GetPlayerDonatorLevel(playerid) == 1) hodina = 16, unixtime = gettime() + (3600 * 16); // 16 hodin
					else if(GetPlayerDonatorLevel(playerid) == 2) hodina = 8, unixtime = gettime() + (3600 * 8); // 8 hodin
					else if(GetPlayerDonatorLevel(playerid) == 3) hodina = 3, unixtime = gettime() + (3600 * 3); // 3 hodiny

			        new
						string[256];

            		format(string, 256,
						"{FFFFFF}> Ak podá výpoveï, bude automaticky prepustený {e34f4f}%s{ffffff} (o %d hodín)!\nChce výpoveï skutoène poda?\nNÁPOVEDA: Zakúpením tatútu donator sa skráti èas na èakanie na výpoveï!",
						getdateunix(unixtime), hodina);

			        return ShowPlayerDialog(playerid, did_locker_sd_vypoved, DIALOG_STYLE_MSGBOX, "VYPOVED", string, "ANO", "NIE");
			    }
			}

	    }

	    case did_locker_sd_guns:
	    {

	        if(!response)
	            return ShowPlayerSDLocker(playerid);

			if(guns_locker_SD[listitem][0] == 100)
			{
			    SetPlayerArmour(playerid, guns_locker_SD[listitem][1]);
			}
			else if(guns_locker_SD[listitem][0] == 103)
			{
			    if(GetPlayerInventoryItem(playerid, inv_puta) >= 2)
				{
				    ShowPlayerSDLocker_Guns(playerid);
					return SendError(playerid, "Viac pút neunesie!");
				}
			    SetPlayerInventoryItem(playerid, inv_puta, GetPlayerInventoryItem(playerid, inv_puta)+guns_locker_SD[listitem][1]);
			}
			else if(guns_locker_SD[listitem][0] == 104)
			{
			    SetPlayerInventoryItem(playerid, inv_puta, 0);
			    SCFM(playerid, 0xD0D0D0FF, "> Putá odobrané!");
			    return ShowPlayerSDLocker_Guns(playerid);
			}
			else if(guns_locker_SD[listitem][0] == 105)
			{
			    SetPlayerArmour(playerid, 0.0);
			    SCFM(playerid, 0xD0D0D0FF, "> Vesta odobraná!");
			    return ShowPlayerSDLocker_Guns(playerid);
			}
			else if(guns_locker_SD[listitem][0] == 106)
			{
			    Weapons::resetWeapons(playerid);
			    SCFM(playerid, 0xD0D0D0FF, "> Zbrane odobrané!");
			    return ShowPlayerSDLocker_Guns(playerid);
			}
			else
			{

			   	if(canHaveLargeWeapon(playerid, guns_locker_SD[listitem][0]) == 0)
			   	    return SendError(playerid, "Uz mas jednu velku zbran!"), ShowPlayerSDLocker_Guns(playerid);

			    new origin[128], bid = GetPlayerBusiness(playerid);
				if(bid != -1) format(origin,128,"SD Zbrojnica %s (%s)", businessEnum[bid][bz_Name], GetPlayerNameEx(playerid, NO_MASK));
				else format(origin,128,"SD Zbrojnica Neznama (%s)", GetPlayerNameEx(playerid, NO_MASK));
				Weapons::GivePlayerNewWeapon(playerid, guns_locker_SD[listitem][0], guns_locker_SD[listitem][1], true, false, origin,true);
			    
			    FormatWeaponLog(playerid, "[give] Vzal %s s %d nabojmi zo SD zbrojnice.", GetWeaponNameEx(guns_locker_SD[listitem][0]), guns_locker_SD[listitem][1]);
			}

			SCFM(playerid, 0xD0D0D0FF, "> Vzal si si zo zbrojnice %s!", GetWeaponNameEx(guns_locker_SD[listitem][0]));

			ShowPlayerSDLocker_Guns(playerid);

	    }

	    case did_locker_sd_vypoved:
	    {
	        if(!response)
	            return ShowPlayerSDLocker(playerid);

			if(g_I_VypovedUnix[playerid] > 10)
			{

			    new
					price = 5000;

				if(GetPlayerDonatorLevel(playerid) == 0) price = 5000;
				else if(GetPlayerDonatorLevel(playerid) == 1) price = 2500;
				else if(GetPlayerDonatorLevel(playerid) == 2) price = 1200;
				else if(GetPlayerDonatorLevel(playerid) == 3) price = 500;

			    if(ex_GetPlayerMoney(playerid) < price)
			    {
			        SendError(playerid, "Nemá dostatoèný poèet peòazí!");
			        return ShowPlayerSDLocker(playerid);
			    }
			    ex_GivePlayerMoney(playerid, -price);
			    money_spent[playerid] += floatround(price,floatround_round);
			    g_I_VypovedUnix[playerid] = 0;
			    SendError(playerid, "Stornoval si výpoveï za poplatok! Nebude prepustený.");
			    FormatLog(log_type_player, "%s(%s) stornoval vypoved z frakcie %s za %d$!", ReturnName(playerid), ReturnIP(playerid), factEnum[GetPlayerFaction(playerid)][fact_Name], price);
			    return ShowPlayerSDLocker(playerid);
			}
			else
			{

			    new
					hodina = 24,
					unixtime = gettime() + (3600 * 24); // 24 hodin

                if(GetPlayerDonatorLevel(playerid) == 0) hodina = 24, unixtime = gettime() + (3600 * 24); // 24 hodin
				else if(GetPlayerDonatorLevel(playerid) == 1) hodina = 16, unixtime = gettime() + (3600 * 16); // 16 hodin
				else if(GetPlayerDonatorLevel(playerid) == 2) hodina = 8, unixtime = gettime() + (3600 * 8); // 8 hodin
				else if(GetPlayerDonatorLevel(playerid) == 3) hodina = 3, unixtime = gettime() + (3600 * 3); // 3 hodiny

			    g_I_VypovedUnix[playerid] = unixtime;

			    new
			        S_string[144];

				format(S_string, 144, "Podal si výpoveï! Bude prepustený o %d hodín. Výpoveï môe stornova opätovným podaním výpovede.", hodina);
				SendSuccess(playerid, S_string);

				FormatLog(log_type_player, "%s(%s) podal ziadost o vypoved z frakcie %s. Bude prepusteny o %d hodin!", ReturnName(playerid), ReturnIP(playerid), factEnum[GetPlayerFaction(playerid)][fact_Name], hodina);

				return ShowPlayerSDLocker(playerid);
			}
	    }

		case did_locker_fd:
	    {
	        if(!response)
	            return 0;

			if(listitem == 0)
			{

			    if(IsPlayerWorking(playerid))
				{

			        SetPlayerSkin(playerid, I_pSkin_Civil[playerid]);

			        Weapons::resetWeapons(playerid);

			        new
			            radioString[128];

					if(strlen(GetPlayerFactionTitle(playerid)) < 1 || !strcmp(GetPlayerFactionTitle(playerid), "Nic", false))
						format(radioString, 128, "[ Radio - 9112 MHz ] Dispeèer: %s je na stanici a hlási sa mimo sluby.", GetPlayerNameEx(playerid, NO_MASK));
					else
					    format(radioString, 128, "[ Radio - 9112 MHz ] Dispeèer: %s %s je na stanici a hlási sa mimo sluby.", GetPlayerFactionTitle(playerid), GetPlayerNameEx(playerid, NO_MASK));

					foreach( new i : Player )
					{
					    if(GetPlayerFaction(i) != GetPlayerFaction(playerid))
					        continue;

						if(!IsPlayerWorking(i))
						    continue;

						SendClientMessage(i, COLOR_RADIO, radioString);
					}

					IsWorking[playerid] = false;

                    BumpPlayerColor(playerid);
					ShowPlayerFDLocker(playerid);
				}
				else
				{
				    if(I_pSkin_Work[playerid] < 1)
						return SendError(playerid, "Najprv si vyber uniformu!"), ShowPlayerFDLocker(playerid);

                    IsWorking[playerid] = true;

			        SetPlayerSkin(playerid, I_pSkin_Work[playerid]);

			        new
			            radioString[128];

					if(strlen(GetPlayerFactionTitle(playerid)) < 1 || !strcmp(GetPlayerFactionTitle(playerid), "Nic", false))
						format(radioString, 128, "[ Radio - 9112 MHz ] Dispeèer: %s je na stanici a hlási sa do sluby.", GetPlayerNameEx(playerid, NO_MASK));
					else
					    format(radioString, 128, "[ Radio - 9112 MHz ] Dispeèer: %s %s je na stanici a hlási sa do sluby.", GetPlayerFactionTitle(playerid), GetPlayerNameEx(playerid, NO_MASK));

					foreach( new i : Player )
					{
					    if(GetPlayerFaction(i) != GetPlayerFaction(playerid))
					        continue;

						if(!IsPlayerWorking(i))
						    continue;

						SendClientMessage(i, COLOR_RADIO, radioString);
					}

                    BumpPlayerColor(playerid);
					ShowPlayerFDLocker(playerid);
				}

			}
			else if(listitem == 1)
			{
			    if(GetPlayerGender(playerid) == 1)
			    {
			        new string[sizeof lockerSkin_FD_m * 8];
				    for (new i; i < sizeof lockerSkin_FD_m; i++)
				    {
				        format(string, sizeof string, "%s%i\n", string, lockerSkin_FD_m[i]);
				    }
				    return ShowPlayerDialog(playerid, did_locker_fd_skin_m, DIALOG_STYLE_PREVIEW_MODEL, "VYBER UNIFORMY", string, "VYBRAT", "SPAT");
				}
				else if(GetPlayerGender(playerid) == 2)
				{
    				new string[sizeof lockerSkin_FD_f * 8];
				    for (new i; i < sizeof lockerSkin_FD_f; i++)
				    {
				        format(string, sizeof string, "%s%i\n", string, lockerSkin_FD_f[i]);
				    }
				    return ShowPlayerDialog(playerid, did_locker_fd_skin_f, DIALOG_STYLE_PREVIEW_MODEL, "VYBER UNIFORMY", string, "VYBRAT", "SPAT");


				}
				else
				{
					SendError(playerid, "Mal si nastavené chybné pohlavie, bolo ti automaticky nastavené na MU!");
					g_I_playerGender[playerid] = 1;
				 	new string[sizeof lockerSkin_FD_m * 8];
				    for (new i; i < sizeof lockerSkin_FD_m; i++)
				    {
				        format(string, sizeof string, "%s%i\n", string, lockerSkin_FD_m[i]);
				    }
				    return ShowPlayerDialog(playerid, did_locker_fd_skin_m, DIALOG_STYLE_PREVIEW_MODEL, "VYBER UNIFORMY", string, "VYBRAT", "SPAT");

				}
			}
			else if(listitem == 2)
			{
			    if(!IsPlayerWorking(playerid))
			        return SendError(playerid, "Nie si v slube!"), ShowPlayerFDLocker(playerid);
				ShowPlayerFDLocker_Guns(playerid);
			}
			else if(listitem == 3)
			{
			    ShowPlayerFDLocker(playerid);
			}
			else if(listitem == 4)
			{
			    //Výpoveï
			    if(g_I_VypovedUnix[playerid] > 10)
			    {
			        new
						price = 5000;

					if(GetPlayerDonatorLevel(playerid) == 0) price = 5000;
					else if(GetPlayerDonatorLevel(playerid) == 1) price = 2500;
					else if(GetPlayerDonatorLevel(playerid) == 2) price = 1200;
					else if(GetPlayerDonatorLevel(playerid) == 3) price = 500;

       				new
						string[256];

            		format(string, 256, "{FFFFFF}> Bohuial, u si raz podal výpoveï!\n\nAutomaticky bude prepustený {e34f4f}%s{ffffff}!\nChce výpoveï stornova? Môe tak uèini za %d$.\nNÁPOVEDA: Zakúpením tatútu donator sa skráti èas na èakanie na výpoveï!",
						getdateunix(g_I_VypovedUnix[playerid]), price);

			        return ShowPlayerDialog(playerid, did_locker_fd_vypoved, DIALOG_STYLE_MSGBOX, "VYPOVED", string, "ANO", "NIE");
			    }
			    else
			    {
			        new
			            hodina = 24,
			        	unixtime = gettime() + (3600 * 24); // 24 hodin

	                if(GetPlayerDonatorLevel(playerid) == 0) hodina = 24, unixtime = gettime() + (3600 * 24); // 24 hodin
					else if(GetPlayerDonatorLevel(playerid) == 1) hodina = 16, unixtime = gettime() + (3600 * 16); // 16 hodin
					else if(GetPlayerDonatorLevel(playerid) == 2) hodina = 8, unixtime = gettime() + (3600 * 8); // 8 hodin
					else if(GetPlayerDonatorLevel(playerid) == 3) hodina = 3, unixtime = gettime() + (3600 * 3); // 3 hodiny

			        new
						string[256];

            		format(string, 256,
						"{FFFFFF}> Ak podá výpoveï, bude automaticky prepustený {e34f4f}%s{ffffff} (o %d hodín)!\nChce výpoveï skutoène poda?\nNÁPOVEDA: Zakúpením tatútu donator sa skráti èas na èakanie na výpoveï!",
						getdateunix(unixtime), hodina);

			        return ShowPlayerDialog(playerid, did_locker_fd_vypoved, DIALOG_STYLE_MSGBOX, "VYPOVED", string, "ANO", "NIE");
			    }
			}

	    }

	    case did_locker_fd_guns:
	    {

	        if(!response)
	            return ShowPlayerFDLocker(playerid);

			if(guns_locker_FD[listitem][0] == 100)
			{
			    SetPlayerArmour(playerid, guns_locker_FD[listitem][1]);
			}
			else
			{
			    new origin[128], bid = GetPlayerBusiness(playerid);
				if(bid != -1) format(origin,128,"FD Zbrojnica %s (%s)", businessEnum[bid][bz_Name], GetPlayerNameEx(playerid, NO_MASK));
				else format(origin,128,"FD Zbrojnica Neznama (%s)", GetPlayerNameEx(playerid, NO_MASK));
				Weapons::GivePlayerNewWeapon(playerid, guns_locker_FD[listitem][0], guns_locker_FD[listitem][1], true,false,origin,true);
			    
			    FormatWeaponLog(playerid, "[give] Vzal %s s %d nabojmi z FD zbrojnice.", GetWeaponNameEx(guns_locker_FD[listitem][0]), guns_locker_FD[listitem][1]);
			}

			SCFM(playerid, 0xD0D0D0FF, "> Vzal si si zo zbrojnice %s!", GetWeaponNameEx(guns_locker_FD[listitem][0]));

			ShowPlayerFDLocker_Guns(playerid);

	    }

	    case did_locker_fd_vypoved:
	    {
	        if(!response)
	            return ShowPlayerFDLocker(playerid);

			if(g_I_VypovedUnix[playerid] > 10)
			{

			    new
					price = 5000;

				if(GetPlayerDonatorLevel(playerid) == 0) price = 5000;
				else if(GetPlayerDonatorLevel(playerid) == 1) price = 2500;
				else if(GetPlayerDonatorLevel(playerid) == 2) price = 1200;
				else if(GetPlayerDonatorLevel(playerid) == 3) price = 500;

			    if(ex_GetPlayerMoney(playerid) < price)
			    {
			        SendError(playerid, "Nemá dostatoèný poèet peòazí!");
			        return ShowPlayerFDLocker(playerid);
			    }
			    ex_GivePlayerMoney(playerid, -price);
			    money_spent[playerid] += floatround(price,floatround_round);
			    g_I_VypovedUnix[playerid] = 0;
			    SendError(playerid, "Stornoval si výpoveï za poplatok! Nebude prepustený.");
			    FormatLog(log_type_player, "%s(%s) stornoval vypoved z frakcie %s za %d$!", ReturnName(playerid), ReturnIP(playerid), factEnum[GetPlayerFaction(playerid)][fact_Name], price);
			    return ShowPlayerFDLocker(playerid);
			}
			else
			{

			    new
					hodina = 24,
					unixtime = gettime() + (3600 * 24); // 24 hodin

                if(GetPlayerDonatorLevel(playerid) == 0) hodina = 24, unixtime = gettime() + (3600 * 24); // 24 hodin
				else if(GetPlayerDonatorLevel(playerid) == 1) hodina = 16, unixtime = gettime() + (3600 * 16); // 16 hodin
				else if(GetPlayerDonatorLevel(playerid) == 2) hodina = 8, unixtime = gettime() + (3600 * 8); // 8 hodin
				else if(GetPlayerDonatorLevel(playerid) == 3) hodina = 3, unixtime = gettime() + (3600 * 3); // 3 hodiny

			    g_I_VypovedUnix[playerid] = unixtime;

			    new
			        S_string[144];

				format(S_string, 144, "Podal si výpoveï! Bude prepustený o %d hodín. Výpoveï môe stornova opätovným podaním výpovede.", hodina);
				SendSuccess(playerid, S_string);

				FormatLog(log_type_player, "%s(%s) podal ziadost o vypoved z frakcie %s. Bude prepusteny o %d hodin!", ReturnName(playerid), ReturnIP(playerid), factEnum[GetPlayerFaction(playerid)][fact_Name], hodina);

				return ShowPlayerFDLocker(playerid);
			}
	    }

	    case did_I_Frakcia_Own:
	    {
	        if(!response)
	            return 0;

			if(listitem == 0 || listitem == 1)
			{
			    return ShowPlayerOwnIFaction(playerid);
			}
			else if(listitem == 2)
			{
			    //Kasa
			    ShowPlayerIFactionCasa(playerid);

			}
			else if(listitem == 3)
			{
			    //Èlenovia
			    ShowPlayerIFactionMemb(playerid);
			}
			else if(listitem == 4)
			{

		        return ShowPlayerDialog(playerid, did_I_Frakcia_Own_Vypoved, DIALOG_STYLE_MSGBOX, "ODCHOD", "{FFFFFF}> Chce skutoène odís z tejto frakcie?!", "ANO", "NIE");
		    }
	    }
		case did_I_Frakcia_Own_Kasa:
		{

			if(strlen(inputtext) == 0)
			{
			    return ShowPlayerOwnIFaction(playerid);
			}


			if(!IsNumeric(inputtext) || strval(inputtext) < 1)
			{
			    SendError(playerid, "Suma nie je validná!");
			    return ShowPlayerIFactionCasa(playerid);
			}

			if(!response && GetPlayerIllegalFactionRank(playerid) < 10)
			{
			    SendError(playerid, "Nemá oprávnenie vybra peniaze z frakènej kasy!");
			    return ShowPlayerIFactionCasa(playerid);
			}

			if(!response && GetPlayerIllegalFactionRank(playerid) > 9)
			{
			    g_I_tempInt[playerid] = (strval(inputtext) * -1);

			    new
			        S_string[144];

				format(S_string, 144, "{FFFFFF}> Chce z kasy vybra {e34f4f}%d${ffffff}.\nSi si istý, e chce túto akciu vykona?",
					strval(inputtext));

				return ShowPlayerDialog(playerid, did_I_Frakcia_Own_KasaC, DIALOG_STYLE_MSGBOX, "FRAKCNA KASA", S_string, "ANO", "NIE");
			}

			if(response)
			{
			    g_I_tempInt[playerid] = strval(inputtext);

			    new
			        S_string[144];

				format(S_string, 144, "{FFFFFF}> Chce do kasy vloi {e34f4f}%d${ffffff}.\nSi si istý, e chce túto akciu vykona?",
					strval(inputtext));

				ShowPlayerDialog(playerid, did_I_Frakcia_Own_KasaC, DIALOG_STYLE_MSGBOX, "FRAKCNA KASA", S_string, "ANO", "NIE");
			}
		}
		case did_I_Frakcia_Own_KasaC:
		{
		    if(!response)
		    {
		        return ShowPlayerIFactionCasa(playerid);
			}

			if(g_I_tempInt[playerid] < 0)
			{
			    // VYBERÁ PENIAZE

			    new
			        I_pocet = (g_I_tempInt[playerid] * -1);

				if(i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Cash] < I_pocet)
				{
				    SendError(playerid, "Tolko peòazí v kase nie je!");
				    return ShowPlayerIFactionCasa(playerid);
				}

				i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Cash] -= I_pocet;

				ex_GivePlayerMoney(playerid, I_pocet);
				money_accepted[playerid] += floatround(I_pocet,floatround_round);

				FormatLog(log_type_kasa, "%s(%s) vybral z kasy nelegalnej frakcie %s %d$ (novy zostatok; %d$ | stary zostatok; %d$)!", ReturnName(playerid), ReturnIP(playerid), i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Name], I_pocet, i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Cash], i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Cash]+I_pocet);

				if(GetPlayerFactionType(playerid) == 12)
				{
				    FormatBazarLog(playerid, "[kasa] Vyber z frakcnej kasy -> %d$ (zostatok: %d$).", I_pocet, i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Cash]);
				}

				SCFM(playerid, 0xD0D0D0FF, "> Vybral si z frakènej kasy %d$!", I_pocet);

				new
				    S_query[256];

				mysql_format(MYSQL, S_query, sizeof(S_query), "UPDATE gm_ifactions SET Cash = '%d' WHERE ID = '%d'", i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Cash], GetPlayerIllegalFaction(playerid));
				mysql_query(MYSQL, S_query, false);

                return ShowPlayerOwnIFaction(playerid);
			}
			else
			{
			    // VKLADÁ PENIAZE

			    new
			        I_pocet = g_I_tempInt[playerid];

				if(ex_GetPlayerMoney(playerid) < I_pocet)
				{
				    SendError(playerid, "Tolko peòazí nemá!");
				    return ShowPlayerIFactionCasa(playerid);
				}

				i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Cash] += I_pocet;

				ex_GivePlayerMoney(playerid, -I_pocet);
				money_givenby[playerid] += floatround(I_pocet,floatround_round);

				if(I_pocet > 999) FormatLog(log_type_kasa, "%s(%s) vlozil do kasy nelegalnej frakcie %s %d$ (novy zostatok; %d$ | stary zostatok; %d$)!", ReturnName(playerid), ReturnIP(playerid), i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Name], I_pocet, i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Cash], i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Cash]-I_pocet);

				SCFM(playerid, 0xD0D0D0FF, "> Vloil si do frakènej kasy %d$!", I_pocet);
				
				if(GetPlayerFactionType(playerid) == 12)
				{
				    FormatBazarLog(playerid, "[kasa] Vklad do frakcnej kasy -> %d$ (zostatok: %d$).", I_pocet, i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Cash]);
				}

				new
				    S_query[256];

				mysql_format(MYSQL, S_query, sizeof(S_query), "UPDATE gm_ifactions SET Cash = '%d' WHERE ID = '%d'", i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Cash], GetPlayerIllegalFaction(playerid));
				mysql_query(MYSQL, S_query, false);
                return ShowPlayerOwnIFaction(playerid);
			}
		}
		case did_I_Frakcia_Own_Vypoved:
	    {
	        if(!response)
	            return ShowPlayerOwnIFaction(playerid);

			new
			    S_string[144];

			format(S_string, 144, "Odiiel si z ilegálnej frakcie.");
			SendSuccess(playerid, S_string);

			FormatLog(log_type_player, "%s(%s) odisiel z nelegalnej frakcie %s!", ReturnName(playerid), ReturnIP(playerid), i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Name]);

			SetPlayerIllegalFaction(playerid, 0);
			SetPlayerIllegalFactionRank(playerid, 0);

			return 0;
	    }

	    case did_inv_drugs_ex_throw:
	    {

	        if(!response)
	        {
	            ShowPlayerDialog(
				    playerid,
				    did_inv_drugs_action,
				    DIALOG_STYLE_LIST,
				    "VYBER AKCIU",
					"Skonzumova/poui drogu\nPoda drogu hráèovi\nPoloi drogu na zem\n{d44848}Nevratne zahodi",
					"VYBRA",
					"SPA"
				);
	            return 1;
	        }

	        if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1 || strval(inputtext) > drug_getPlayerDrug(playerid, invEditItem[playerid]))
	        {
				SendError(playerid, "Zadaj prosím správny poèet ko¾ko toho chce zahodi!");

	            new
	            	finstr[128]
				;

				format(finstr, sizeof finstr, "{FFFFFF}> Zadaj prosím poèet, ko¾ko %s drogy %s chce zahodi! (max %d)", drug_getUnderName(invEditItem[playerid]), drug_getName(invEditItem[playerid]), drug_getPlayerDrug(playerid, invEditItem[playerid]));

				// zahodi
    			ShowPlayerDialog(
				    playerid,
				    did_inv_drugs_ex_throw,
				    DIALOG_STYLE_INPUT,
				    "ZADAJ POÈET",
					finstr,
					"VYBRA",
					"SPA"
				);

				return 1;
	        }

	        drug_givePlayerDrug(playerid, invEditItem[playerid], -strval(inputtext));

	        SendSuccess(playerid, "Zahodil si drogu!");

	        drug_showPlayerDrugInv(playerid, playerid);

	    }

	    case did_inv_drugs_ex_give1:
	    {

	        if(!response)
	        {
	            ShowPlayerDialog(
				    playerid,
				    did_inv_drugs_action,
				    DIALOG_STYLE_LIST,
				    "VYBER AKCIU",
					"Skonzumova/poui drogu\nPoda drogu hráèovi\nPoloi drogu na zem\n{d44848}Nevratne zahodi",
					"VYBRA",
					"SPA"
				);
	            return 1;
	        }

	        if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1 || strval(inputtext) > drug_getPlayerDrug(playerid, invEditItem[playerid]))
	        {
				SendError(playerid, "Zadaj prosím správny poèet ko¾ko toho chce poda!");

	            new
	            	finstr[128]
				;

				format(finstr, sizeof finstr, "{FFFFFF}> Zadaj prosím poèet, ko¾ko %s drogy %s chce poda inému hráèovi! (max %d)", drug_getUnderName(invEditItem[playerid]), drug_getName(invEditItem[playerid]), drug_getPlayerDrug(playerid, invEditItem[playerid]));

				// podat
    			ShowPlayerDialog(
				    playerid,
				    did_inv_drugs_ex_give1,
				    DIALOG_STYLE_INPUT,
				    "ZADAJ POÈET",
					finstr,
					"VYBRA",
					"SPA"
				);

				return 1;
	        }

	        invGive[playerid][0] = strval(inputtext);
			invGive[playerid][2] = invEditItem[playerid];

	        new
        		finstr[128]
			;

			format(finstr, sizeof finstr, "{FFFFFF}> Zadaj prosím id hráèa, ktorému chce poda %d %s drogy %s!", strval(inputtext), drug_getUnderName(invEditItem[playerid]), drug_getName(invEditItem[playerid]));

			// podat
    		ShowPlayerDialog(
			    playerid,
			    did_inv_drugs_ex_give2,
			    DIALOG_STYLE_INPUT,
			    "ZADAJ POÈET",
				finstr,
				"VYBRA",
				"SPA"
			);

	    }

	    case did_inv_drugs_ex_give2:
	    {

	        if(!response)
	        {
	            new
	            	finstr[128]
				;

				format(finstr, sizeof finstr, "{FFFFFF}> Zadaj prosím poèet, ko¾ko %s drogy %s chce poda inému hráèovi! (max %d)", drug_getUnderName(invEditItem[playerid]), drug_getName(invEditItem[playerid]), drug_getPlayerDrug(playerid, invEditItem[playerid]));

				// podat
    			ShowPlayerDialog(
				    playerid,
				    did_inv_drugs_ex_give1,
				    DIALOG_STYLE_INPUT,
				    "ZADAJ POÈET",
					finstr,
					"VYBRA",
					"SPA"
				);

	            return 1;
	        }

	        new id = strval(inputtext);
			MaskToId(id);

	        if(isnull(inputtext) || !IsNumeric(inputtext) || !IsPlayerLogged(id))
	        {
				SendError(playerid, "Tento hráè nie je v hre!");

	            new
	        		finstr[128]
				;

				format(finstr, sizeof finstr, "{FFFFFF}> Zadaj prosím id hráèa, ktorému chce poda %d %s drogy %s!", strval(inputtext), drug_getUnderName(invEditItem[playerid]), drug_getName(invEditItem[playerid]));

				// podat
	    		ShowPlayerDialog(
				    playerid,
				    did_inv_drugs_ex_give2,
				    DIALOG_STYLE_INPUT,
				    "ZADAJ POÈET",
					finstr,
					"VYBRA",
					"SPA"
				);

				return 1;
	        }

	        if(!IsPlayerNearPlayer(playerid, id, 2.5))
	        {
				SendError(playerid, "Tento hráè je moc ïaleko!");

	            new
	        		finstr[128]
				;

				format(finstr, sizeof finstr, "{FFFFFF}> Zadaj prosím id hráèa, ktorému chce poda %d %s drogy %s!", strval(inputtext), drug_getUnderName(invEditItem[playerid]), drug_getName(invEditItem[playerid]));

				// podat
	    		ShowPlayerDialog(
				    playerid,
				    did_inv_drugs_ex_give2,
				    DIALOG_STYLE_INPUT,
				    "ZADAJ POÈET",
					finstr,
					"VYBRA",
					"SPA"
				);

				return 1;
	        }

	        invGive[playerid][1] = id;

            new
   				string[128]
			;

			format(string, 128, "> Odoslal si ponuku hráèovi %s na podanie drogy %s (%d %s)! Ponuka uplynie za 15 sekúnd.", GetPlayerNameEx(id, USE_MASK), drug_getName(invEditItem[playerid]), drug_getPlayerDrug(playerid, invEditItem[playerid]), drug_getUnderName(invEditItem[playerid]));
		    SCFM(playerid, COLOR_GREY, string);

		    format(string, 128, "> %s ti chce poda drogu %s (%d %s)!", GetPlayerNameEx(playerid, USE_MASK), drug_getName(invEditItem[playerid]), drug_getPlayerDrug(playerid, invEditItem[playerid]), drug_getUnderName(invEditItem[playerid]));
		    SCFM(id, COLOR_GREY, string);

		    format(string, 128, "> Pre prijatie ponuky poui príkaz /accept drug <%d>! Ponuka uplynie za 15 sekúnd.", ReturnID(playerid));
		    SCFM(id, COLOR_GREY, string);

		    cantManipulate[playerid] = true;

		    SetTimerEx("timer_StopDrugPonuka", 15*1000, false, "iiii", playerid, id, invEditItem[playerid], invGive[playerid][0]);

	    }

	    case did_inv_drugs_ex_drop:
	    {

	        if(!response)
	        {
	            ShowPlayerDialog(
				    playerid,
				    did_inv_drugs_action,
				    DIALOG_STYLE_LIST,
				    "VYBER AKCIU",
					"Skonzumova/poui drogu\nPoda drogu hráèovi\nPoloi drogu na zem\n{d44848}Nevratne zahodi",
					"VYBRA",
					"SPA"
				);
	            return 1;
	        }

	        if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1 || strval(inputtext) > drug_getPlayerDrug(playerid, invEditItem[playerid]))
	        {
				SendError(playerid, "Zadaj prosím správny poèet ko¾ko toho chce poda!");

	            // drop
             	new
	           		finstr[128]
				;

				format(finstr, sizeof finstr, "{FFFFFF}> Zadaj prosím poèet, ko¾ko %s drogy %s chce poloi na zem! (max %d)", drug_getUnderName(invEditItem[playerid]), drug_getName(invEditItem[playerid]), drug_getPlayerDrug(playerid, invEditItem[playerid]));

				// podat
    			ShowPlayerDialog(
			    	playerid,
				    did_inv_drugs_ex_drop,
				    DIALOG_STYLE_INPUT,
				    "ZADAJ POÈET",
					finstr,
					"VYBRA",
					"SPA"
				);

				return 1;
	        }

	        new dropid = -1;

			for( new i; i < MAX_DROPS; i++ )
			{
			    if(strlen(dropEnum[i][drop_PlacedBy]) > 0)
			        continue;

				dropid = i;
				break;
			}

			if(dropid == -1)
			    return SendError(playerid, "Nie je volný slot na drop!");

			new
			    dropfact = 0,
				Float:Pos[4],
				date[32],

				ex_date[3],
				ex_time[3]
			;

			drug_givePlayerDrug(playerid, invEditItem[playerid], -strval(inputtext));

		    getdate(ex_date[0], ex_date[1], ex_date[2]);
			gettime(ex_time[0], ex_time[1], ex_time[2]);
			format(date, 32, "%d/%d/%d %d:%d:%d", ex_date[2], ex_date[1], ex_date[0], ex_time[0], ex_time[1], ex_time[2]);

			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			GetPlayerFacingAngle(playerid, Pos[3]);

			if(IsPlayerWorking(playerid))
			    dropfact = GetPlayerFaction(playerid);

		    new
				S_finalString[128 + 25 + 5];

			new S_first[25];
			if(B_playerHasMask[playerid] == false) {
			    strcat(S_first, ReturnName(playerid));
			    strdel(S_first,strfind(S_first,"_",true),25);
			} else {
			    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

			format(S_finalString, sizeof(S_finalString), "AME: * %s pokláda na zem %s.", S_first, drug_getName(invEditItem[playerid]));
		 	SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

			format(S_finalString, sizeof(S_finalString), "* %s pokláda na zem %s.", S_first, drug_getName(invEditItem[playerid]));
			BubbleChat(playerid, COLOR_VIOLET, S_finalString);

			ApplyAnimation(playerid, "BOMBER", "BOM_PLANT", 4.1, false, true, true, false, 0, true); // /polozit

			FormatLog(log_type_player, "%s(%s - %s) poklada na drogu %s ( %d %s ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), drug_getName(invEditItem[playerid]), drug_getUnderName(invEditItem[playerid]));

		    CreateDynamicDrop(1000, invEditItem[playerid], strval(inputtext), Pos[0], Pos[1], Pos[2], Pos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), ReturnName(playerid), date, dropfact, "", 1);


	    }

	    case did_inv_drugs_action:
	    {
	        if(!response)
	            return drug_playerShowMenu(playerid);

			switch(listitem)
			{
			    case 0:
			    {
					// konzumácia

					CallRemoteFunction("OnPlayerPreConsumeDrug", "ii", playerid, invEditItem[playerid]);
			    }

			    case 1:
			    {
			        // giving
                    new
			            finstr[128]
					;

					format(finstr, sizeof finstr, "{FFFFFF}> Zadaj prosím poèet, ko¾ko %s drogy %s chce poda inému hráèovi! (max %d)", drug_getUnderName(invEditItem[playerid]), drug_getName(invEditItem[playerid]), drug_getPlayerDrug(playerid, invEditItem[playerid]));

			        // podat
			        ShowPlayerDialog(
					    playerid,
					    did_inv_drugs_ex_give1,
					    DIALOG_STYLE_INPUT,
					    "ZADAJ POÈET",
						finstr,
						"VYBRA",
						"SPA"
					);
			    }

			    case 2:
			    {
			        // drop
                    new
			            finstr[128]
					;

					format(finstr, sizeof finstr, "{FFFFFF}> Zadaj prosím poèet, ko¾ko %s drogy %s chce poloi na zem! (max %d)", drug_getUnderName(invEditItem[playerid]), drug_getName(invEditItem[playerid]), drug_getPlayerDrug(playerid, invEditItem[playerid]));

			        // podat
			        ShowPlayerDialog(
					    playerid,
					    did_inv_drugs_ex_drop,
					    DIALOG_STYLE_INPUT,
					    "ZADAJ POÈET",
						finstr,
						"VYBRA",
						"SPA"
					);
			    }

			    case 3:
			    {

			        new
			            finstr[128]
					;

					format(finstr, sizeof finstr, "{FFFFFF}> Zadaj prosím poèet, ko¾ko dávok drogy %s chce zahodi! (max %d)", drug_getUnderName(invEditItem[playerid]), drug_getName(invEditItem[playerid]), drug_getPlayerDrug(playerid, invEditItem[playerid]));

			        // zahodi
			        ShowPlayerDialog(
					    playerid,
					    did_inv_drugs_ex_throw,
					    DIALOG_STYLE_INPUT,
					    "ZADAJ POÈET",
						finstr,
						"VYBRA",
						"SPA"
					);
			    }
			}
	    }

	    case did_inv_drugs_menu:
	    {
	        if(!response)
	            return drug_showPlayerDrugInv(playerid, playerid);

            invEditItem[playerid] = invItem[playerid][listitem];

            new
                smallstr[64]
			;

			format(smallstr, sizeof smallstr, "Vybral si drogu %s, vyber akciu!", drug_getName(invEditItem[playerid]));
			SendSuccess(playerid, smallstr);

			ShowPlayerDialog(
			    playerid,
			    did_inv_drugs_action,
			    DIALOG_STYLE_LIST,
			    "VYBER AKCIU",
				"Skonzumova/poui drogu\nPoda drogu hráèovi\nPoloi drogu na zem\n{d44848}Nevratne zahodi",
				"VYBRA",
				"SPA"
			);
	    }

	    case did_inv_drugs:
	    {
	        if(!response || invfor[playerid]!=playerid)
	            return ShowPlayerInventory(invfor[playerid], playerid);

			drug_playerShowMenu(playerid);

			return 1;
	    }

	    case did_inv_alcohol:
	    {
	        if(!response || invfor[playerid]!=playerid)
	            return ShowPlayerInventory(invfor[playerid], playerid);

			Alcohol::ShowInventoryMenu(playerid);

			return 1;
	    }

	    case did_inv_alcohol_action:
	    {
	        if(!response)
	            return Alcohol::ShowInventoryMenu(playerid);

			switch(listitem)
			{
			    case 0:
			    {
					// konzumácia
					if(hasRezerva[playerid] == true || pVrece[playerid] == true)
					{
					    SendError(playerid, "Teraz nemôe konzumova alkohol!");
	                    ShowPlayerDialog(
						    playerid,
						    did_inv_alcohol_action,
						    DIALOG_STYLE_LIST,
						    "VYBER AKCIU",
							"Zobra do ruky\nPoloi f¾au na zem\n{d44848}Nevratne zahodi",
							"VYBRA",
							"SPA"
						);
					    return 1;
					}

					SCFM(playerid, COLOR_LIGHTBLUE, "> Zaèal si konzumova alkohol! Napije sa pravým tlaèidlom myi.");
					SCFM(playerid, COLOR_LIGHTBLUE, "> F¾au schová tlaèidlom /hbottle, podá príkazom /pbottle a nevratne zahodí /dbottle.");

					Alcohol::SetHolding(playerid, true, Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Alcohol], Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_DecreaseBy], Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Objem], Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Object], invEditItem[playerid]);
			    }

			    case 1:
			    {
			        // drop
                    new dropid = -1;

					for( new i; i < MAX_DROPS; i++ )
					{
					    if(strlen(dropEnum[i][drop_PlacedBy]) > 0)
					        continue;

						dropid = i;
						break;
					}

					if(dropid == -1)
					    return SendError(playerid, "Nie je volný slot na drop!");

					new
					    dropfact = 0,
						Float:Pos[4],
						date[32],

						ex_date[3],
						ex_time[3]
					;

				    getdate(ex_date[0], ex_date[1], ex_date[2]);
					gettime(ex_time[0], ex_time[1], ex_time[2]);
					format(date, 32, "%d/%d/%d %d:%d:%d", ex_date[2], ex_date[1], ex_date[0], ex_time[0], ex_time[1], ex_time[2]);

					GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
					GetPlayerFacingAngle(playerid, Pos[3]);

					if(IsPlayerWorking(playerid))
					    dropfact = GetPlayerFaction(playerid);

				    new
						S_finalString[128 + 25 + 5];

					new S_first[25];
					if(B_playerHasMask[playerid] == false) {
					    strcat(S_first, ReturnName(playerid));
					    strdel(S_first,strfind(S_first,"_",true),25);
					} else {
					    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
					}

					format(S_finalString, sizeof(S_finalString), "AME: * %s pokláda na zem %s.", S_first, Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Name]);
				 	SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

					format(S_finalString, sizeof(S_finalString), "* %s pokláda na zem %s.", S_first, Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Name]);
					BubbleChat(playerid, COLOR_VIOLET, S_finalString);

					ApplyAnimation(playerid, "BOMBER", "BOM_PLANT", 4.1, false, true, true, false, 0, true); // /polozit

					FormatLog(log_type_player, "%s(%s - %s) poklada na alkohol %s ( %d %%% ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Name], Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Alcohol]);

				    CreateDynamicDrop(
									1200 + Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Alcohol], Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_DecreaseBy], Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Objem],
									Pos[0], Pos[1], Pos[2] - 1.0, Pos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid),
									ReturnName(playerid), date, dropfact, Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Name], 1, Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Object]
					);

                    Alcohol::ShowInventoryMenu(playerid);

			        Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Alcohol] 	= 0;
			        Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Objem]   	= 0;
			        Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Object]      = 0;
			        Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_DecreaseBy]  = 0;

			    }

			    case 2:
			    {

					SCFM(playerid, COLOR_DARKBROWN, "> Zahodil si f¾au %s! Dúfam, e bola prázdna ...", Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Name]);

			        Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Alcohol] 	= 0;
			        Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Objem]   	= 0;
			        Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Object]      = 0;
			        Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_DecreaseBy]  = 0;

			        Alcohol::ShowInventoryMenu(playerid);
			    }
			}
	    }

	    case did_inv_alcohol_menu:
	    {
	        if(!response)
	            return Alcohol::ShowInventory(playerid, playerid);

            invEditItem[playerid] = invItem[playerid][listitem];

            new
                smallstr[64]
			;

			format(smallstr, sizeof smallstr, "Vybral si f¾au %s, vyber akciu!", Alcohol::inventory[playerid][invEditItem[playerid]][alcinv_Name]);
			SendSuccess(playerid, smallstr);

			ShowPlayerDialog(
			    playerid,
			    did_inv_alcohol_action,
			    DIALOG_STYLE_LIST,
			    "VYBER AKCIU",
				"Zobra do ruky\nPoloi f¾au na zem\n{d44848}Nevratne zahodi",
				"VYBRA",
				"SPA"
			);
	    }

	    case did_Inventory:
	    {

	        if(!response)
	            return 0;

			if(listitem == 0)
			{
			    return drug_showPlayerDrugInv(invfor[playerid], playerid);
			}
			else if(listitem == 1)
			{
			    if(Alcohol::Holding(invfor[playerid]))
			    {
			        SendError(playerid, "Najprv schovaj flasu co drzis prikazom /hbottle!");
			        ShowPlayerInventory(invfor[playerid], playerid);
			        return 1;
			    }
			    return Alcohol::ShowInventory(invfor[playerid], playerid);
			}

			if(Inv[playerid][1] != playerid)
			    return 0;

			new
				finalString[90];

			#define invitem invItem[playerid][listitem-1]

			if(invitem == 151515151)
			{
			    return ShowPlayerInventory(invfor[playerid], playerid);
			}

			//Dajú sa poloi, zahodi, givnú hráèovi
			if(invitem == 0 || invitem == _:inv_pacidlo || invitem == _:inv_lano || invitem == _:inv_vrece || invitem == _:inv_puta || invitem == _:inv_weed || invitem == _:inv_weed_seed || invitem == _:inv_naboje || invitem == _:inv_bandaz
			|| invitem == _:inv_rezerva|| invitem == _:inv_weeds1|| invitem == _:inv_weeds2|| invitem == _:inv_weeds3|| invitem == _:inv_hnojivo||invitem==_:inv_spritelean||invitem==_:inv_prometh)
			{
			    strcat(finalString, "Poda item hráèovi\n");
			    strcat(finalString, "Poloi item na zem\n");
			    strcat(finalString, "{ea5959}Zahodi item\n");
			}

			//Dajú sa givnú, zahodi
			else if(invitem == _:inv_pepsiCan || invitem == _:inv_colaCan || invitem == _:inv_kitKatChocolate || invitem == _:inv_pringlesChips || invitem == _:inv_petcup || invitem == _:inv_skateboard || invitem == _:inv_katalog ||
				invitem==_:inv_tree_sadenica||invitem==_:inv_tree_log_oak||invitem==_:inv_tree_log_birch||invitem==_:inv_tree_log_spruce||
   				invitem == _:inv_kocka || invitem == _:inv_mask || invitem == _:inv_cigarety || invitem == _:inv_zapalovac || invitem == _:inv_carBattery || invitem == _:inv_carOil || invitem == _:inv_pizza||invitem == _:inv_sprite)
			{
			    strcat(finalString, "Poda item hráèovi\n");
			    strcat(finalString, "{ea5959}Zahodi item\n");
			}
			//Dajú sa zahodi
			else if(invitem == _:inv_boomBox || invitem == _:inv_idCard || invitem == _:inv_blood || invitem == _:inv_creditCard || invitem == _:inv_simcard || invitem == _:inv_telefon || invitem == _:inv_vysielacka || invitem == _:inv_kanister)
			{
			    strcat(finalString, "{ea5959}Zahodi item\n");
			}
			else
			    return SendError(playerid, "S týmto itemom nemôe niè robi!"), ShowPlayerInventory(Inv[playerid][1], playerid);

			invEditItem[playerid] = invitem;

			#undef invitem

			ShowPlayerDialog(playerid, did_InventoryMenu, DIALOG_STYLE_LIST, "INVENTÁR > MENU", finalString, "VYBRA", "SPA");

			return 1;
	    }

	    case did_InventoryMenu:
	    {
	        if(!response)
	            return ShowPlayerInventory(Inv[playerid][1], playerid);

			#define invitem invEditItem[playerid]
			if(invitem == _:inv_skateboard && InfoSkate[playerid][sActive] == 1)
			{
			    return SendError(playerid, "Odlo skateboard príkazom /skate!");
			}
			if(listitem == 0)
			{
			    if(invitem == 0 || invitem == _:inv_pacidlo || invitem == _:inv_lano || invitem == _:inv_vrece || invitem == _:inv_puta || invitem == _:inv_weed || invitem == _:inv_weed_seed || invitem == _:inv_naboje
				|| invitem == _:inv_bandaz || invitem == _:inv_rezerva || invitem == _:inv_weeds1 || invitem == _:inv_weeds2 || invitem == _:inv_weeds3 || invitem == _:inv_hnojivo||invitem==_:inv_spritelean||invitem==_:inv_prometh)
				{
					//Poda item hráèovi
					ShowPlayerDialog(playerid, did_InventoryGive1, DIALOG_STYLE_INPUT, "INVENTÁR > PODA", "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce poda inému hráèovi!", "ÏALEJ", "SPA");
				}
				else if(invitem == _:inv_pepsiCan || invitem == _:inv_colaCan || invitem == _:inv_kitKatChocolate || invitem == _:inv_pringlesChips ||invitem == _:inv_skateboard ||invitem == _:inv_katalog ||
					invitem==_:inv_tree_sadenica||invitem==_:inv_tree_log_oak||invitem==_:inv_tree_log_birch||invitem==_:inv_tree_log_spruce||
			    	invitem == _:inv_kocka || invitem == _:inv_mask || invitem == _:inv_cigarety || invitem == _:inv_zapalovac || invitem == _:inv_carBattery || invitem == _:inv_carOil || invitem == _:inv_pizza||invitem == _:inv_petcup ||invitem == _:inv_sprite)
			    {
			        //Poda item hráèovi
			        ShowPlayerDialog(playerid, did_InventoryGive1, DIALOG_STYLE_INPUT, "INVENTÁR > PODA", "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce poda inému hráèovi!", "ÏALEJ", "SPA");
			    }
			    else if(invitem == _:inv_boomBox || invitem == _:inv_idCard || invitem == _:inv_blood || invitem == _:inv_creditCard || invitem == _:inv_simcard || invitem == _:inv_telefon || invitem == _:inv_vysielacka || invitem == _:inv_kanister)
			    {
			        //Zahodi item

			        if(invitem == _:inv_kanister)
			        {
						SetPlayerInventoryItem(playerid, inv_kanister, 0);
						kanisterType[playerid] = 0;
						SendSuccess(playerid, "Zahodil si kanister!");
						return ShowPlayerInventory(playerid, playerid);
			        }

			        ShowPlayerDialog(playerid, did_InventoryZahodit, DIALOG_STYLE_INPUT, "INVENTÁR > ZAHODI", "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce zahodi!\n\nTáto akcia je nevratná!", "ZAHODI", "SPA");
			    }
			}
			else if(listitem == 1)
			{
			    if(invitem == 0 || invitem == _:inv_pacidlo || invitem == _:inv_lano || invitem == _:inv_vrece || invitem == _:inv_puta || invitem == _:inv_weed || invitem == _:inv_weed_seed || invitem == _:inv_naboje
				|| invitem == _:inv_bandaz || invitem == _:inv_rezerva || invitem == _:inv_weeds1 || invitem == _:inv_weeds2 || invitem == _:inv_weeds3 || invitem == _:inv_hnojivo||invitem==_:inv_spritelean||invitem==_:inv_prometh)
				{
					//Poloi item na zem
					ShowPlayerDialog(playerid, did_InventoryPolozit, DIALOG_STYLE_INPUT, "INVENTÁR > POLOI", "{ffffff}> Zadaj prosím poèet (alebo objem), ko¾ko toho chce poloi!", "POLOI", "SPA");
				}
				else if(invitem == _:inv_pepsiCan || invitem == _:inv_colaCan || invitem == _:inv_kitKatChocolate || invitem == _:inv_pringlesChips||invitem == _:inv_skateboard || invitem == _:inv_katalog||
					invitem==_:inv_tree_sadenica||invitem==_:inv_tree_log_oak||invitem==_:inv_tree_log_birch||invitem==_:inv_tree_log_spruce
			    	|| invitem == _:inv_kocka || invitem == _:inv_mask || invitem == _:inv_cigarety || invitem == _:inv_zapalovac || invitem == _:inv_carBattery || invitem == _:inv_carOil || invitem == _:inv_pizza ||invitem == _:inv_petcup ||invitem == _:inv_sprite)
			    {
			        //Zahodi item na zem
			        if(invitem == _:inv_rezerva)
			        {
						SetPlayerInventoryItem(playerid, inv_rezerva, 0);
						SendSuccess(playerid, "Zahodil si rezervu!");
						return ShowPlayerInventory(playerid, playerid);
			        }

			        ShowPlayerDialog(playerid, did_InventoryZahodit, DIALOG_STYLE_INPUT, "INVENTÁR > ZAHODI", "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce zahodi!\n\nTáto akcia je nevratná!", "ZAHODI", "SPA");
			    }
			}
			else if(listitem == 2)
			{
			    if(invitem == 0 || invitem == _:inv_pacidlo || invitem == _:inv_lano || invitem == _:inv_vrece || invitem == _:inv_puta || invitem == _:inv_weed || invitem == _:inv_weed_seed||invitem==_:inv_prometh
				|| invitem == _:inv_naboje || invitem == _:inv_bandaz || invitem == _:inv_rezerva || invitem == _:inv_weeds1 || invitem == _:inv_weeds2 || invitem == _:inv_weeds3 || invitem == _:inv_hnojivo||invitem==_:inv_spritelean)
				{
					//Zahodi item
					ShowPlayerDialog(playerid, did_InventoryZahodit, DIALOG_STYLE_INPUT, "INVENTÁR > ZAHODI", "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce zahodi!\n\nTáto akcia je nevratná!", "ZAHODI", "SPA");
				}
			}
			#undef invitem
	    }

	    case did_InventoryPolozit:
	    {
			if(!response)
			{
			    new
					finalString[90];

				#define invitem invItem[playerid][listitem]
				//Dajú sa poloi, zahodi, givnú hráèovi
				if(invitem == 0 || invitem == _:inv_pacidlo || invitem == _:inv_lano || invitem == _:inv_vrece || invitem == _:inv_puta || invitem == _:inv_weed || invitem == _:inv_weed_seed || invitem == _:inv_naboje
				|| invitem == _:inv_bandaz || invitem == _:inv_rezerva|| invitem == _:inv_weeds1|| invitem == _:inv_weeds2|| invitem == _:inv_weeds3|| invitem == _:inv_hnojivo||invitem==_:inv_spritelean||invitem==_:inv_prometh)
				{
				    strcat(finalString, "Poda item hráèovi\n");
				    strcat(finalString, "Poloi item na zem\n");
				    strcat(finalString, "{ea5959}Zahodi item\n");
				}

				//Dajú sa givnú, zahodi
				else if(invitem == _:inv_pepsiCan || invitem == _:inv_colaCan || invitem == _:inv_kitKatChocolate || invitem == _:inv_pringlesChips ||invitem == _:inv_skateboard ||invitem == _:inv_katalog ||
					invitem==_:inv_tree_sadenica||invitem==_:inv_tree_log_oak||invitem==_:inv_tree_log_birch||invitem==_:inv_tree_log_spruce||
				    invitem == _:inv_kocka || invitem == _:inv_mask || invitem == _:inv_cigarety || invitem == _:inv_zapalovac || invitem == _:inv_carBattery || invitem == _:inv_carOil || invitem == _:inv_pizza||invitem == _:inv_petcup ||invitem == _:inv_sprite)
				{
				    strcat(finalString, "Poda item hráèovi\n");
				    strcat(finalString, "{ea5959}Zahodi item\n");
				}
				//Dajú sa zahodi
				else if(invitem == _:inv_boomBox || invitem == _:inv_idCard || invitem == _:inv_blood || invitem == _:inv_creditCard || invitem == _:inv_simcard || invitem == _:inv_telefon || invitem == _:inv_vysielacka || invitem == _:inv_kanister)
				{
				    strcat(finalString, "{ea5959}Zahodi item\n");
				}
				else
				    return SendError(playerid, "S týmto itemom nemôe niè robi!"), ShowPlayerInventory(Inv[playerid][1], playerid);

				invEditItem[playerid] = invitem;

				#undef invitem

				ShowPlayerDialog(playerid, did_InventoryMenu, DIALOG_STYLE_LIST, "INVENTÁR > MENU", finalString, "VYBRA", "SPA");
				return 0;
			}

			if(isnull(inputtext) || !IsNumeric(inputtext) || (invEditItem[playerid] != 0 && strval(inputtext) < 1) || (invEditItem[playerid] == 0 && floatstr(inputtext) < 0.01))
			    return ShowPlayerDialog(playerid, did_InventoryPolozit, DIALOG_STYLE_INPUT, "INVENTÁR > POLOI", "{ffffff}> Zadaj prosím poèet (alebo objem), ko¾ko toho chce poloi!", "POLOI", "SPA");

			if(invEditItem[playerid] == 0 && (ex_GetPlayerMoney(playerid) < floatstr(inputtext) || floatstr(inputtext) < 1.0))
                return ShowPlayerDialog(playerid, did_InventoryPolozit, DIALOG_STYLE_INPUT, "INVENTÁR > POLOI", "{ffffff}> Zadaj prosím poèet (alebo objem), ko¾ko toho chce poloi!\n{ea5959}Nemôe toho vyhodi viac, ako má!\nNemôe tie poloi menej ako 1$!", "POLOI", "SPA");

    		if(invEditItem[playerid] > 0 && GetPlayerInventoryItem(playerid, invEditItem[playerid]) < strval(inputtext))
                return ShowPlayerDialog(playerid, did_InventoryPolozit, DIALOG_STYLE_INPUT, "INVENTÁR > POLOI", "{ffffff}> Zadaj prosím poèet (alebo objem), ko¾ko toho chce poloi!\n{ea5959}Nemôe toho vyhodi viac, ako má!", "POLOI", "SPA");

			if(invEditItem[playerid] == 0)
			{
			    ex_GivePlayerMoney(playerid, -floatstr(inputtext));
			    money_givenby[playerid] += floatround(floatstr(inputtext),floatround_round);
			}
			else
			{
			    SetPlayerInventoryItem(playerid, invEditItem[playerid], GetPlayerInventoryItem(playerid, invEditItem[playerid])-strval(inputtext));
			}

			new
   				string[128],
				item[32];

			strcat(item, GetItemName(invEditItem[playerid]));
			item[0] = tolower(item[0]);

			if(invEditItem[playerid] == 0)
			    format(string, 128, "Polozil si %.2f$!", floatstr(inputtext));
			else
			    format(string, 128, "Polozil si %s (%d)!", item, strval(inputtext));

		    SendSuccess(playerid, string);

		    new
				S_finalString[128 + 25 + 5];

			new
				S_first[25],
				droptype;

			if(invEditItem[playerid] == 0)
			    droptype = 2;
            else if(invEditItem[playerid] == _:inv_pacidlo)
			    droptype = 4;
           	else if(invEditItem[playerid] == _:inv_lano)
			    droptype = 5;
   			else if(invEditItem[playerid] == _:inv_vrece)
			    droptype = 6;
            else if(invEditItem[playerid] == _:inv_puta)
			    droptype = 7;
            else if(invEditItem[playerid] == _:inv_weed)
			    droptype = 8;
            else if(invEditItem[playerid] == _:inv_weed_seed)
			    droptype = 9;
            else if(invEditItem[playerid] == _:inv_naboje)
			    droptype = 10;
			else if(invEditItem[playerid] == _:inv_bandaz)
			    droptype = 11;
            else if(invEditItem[playerid] == _:inv_rezerva)
			    droptype = 12;
   			else if(invEditItem[playerid] == _:inv_weeds1)
			    droptype = 13;
            else if(invEditItem[playerid] == _:inv_weeds2)
			    droptype = 14;
            else if(invEditItem[playerid] == _:inv_weeds3)
			    droptype = 15;
            else if(invEditItem[playerid] == _:inv_hnojivo)
			    droptype = 16;
            else if(invEditItem[playerid] == _:inv_spritelean)
			    droptype = 17;
            else if(invEditItem[playerid] == _:inv_prometh)
			    droptype = 18;

			if(B_playerHasMask[playerid] == false) {
			    strcat(S_first, ReturnName(playerid));
			    strdel(S_first,strfind(S_first,"_",true),25);
			} else {
			    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

			format(S_finalString, sizeof(S_finalString), "AME: * %s pokláda na zem %s.", S_first, GetDropTypeName(droptype));
		 	SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

			format(S_finalString, sizeof(S_finalString), "* %s pokláda na zem %s.", S_first, GetDropTypeName(droptype));
			BubbleChat(playerid, COLOR_VIOLET, S_finalString);

			FormatLog(log_type_player, "%s(%s - %s) poklada na zem %s ( %d ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), GetDropTypeName(droptype), strval(inputtext));

            ApplyAnimation(playerid, "BOMBER", "BOM_PLANT", 4.1, false, true, true, false, 0, true); // /polozit

			new
			    Float:Pos[4],

            	date[32],

				ex_date[3],
				ex_time[3];

		    getdate(ex_date[0], ex_date[1], ex_date[2]);
			gettime(ex_time[0], ex_time[1], ex_time[2]);
			format(date, 32, "%d/%d/%d %d:%d:%d", ex_date[2], ex_date[1], ex_date[0], ex_time[0], ex_time[1], ex_time[2]);

			GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			GetPlayerFacingAngle(playerid, Pos[3]);

			if(invEditItem[playerid] == 0)
		    	CreateDynamicDrop(droptype, 0, floatround(floatstr(inputtext) * 100.0, floatround_round), Pos[0], Pos[1], Pos[2], Pos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), ReturnName(playerid), date, 0, "", 1);
			else
			    CreateDynamicDrop(droptype, 0, strval(inputtext), Pos[0], Pos[1], Pos[2], Pos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), ReturnName(playerid), date, 0, "", 1);

			return ShowPlayerInventory(Inv[playerid][1], playerid);

		}

		case did_InventoryZahodit:
	    {
			if(!response)
			{
			    new
					finalString[90];

				#define invitem invItem[playerid][listitem]
				//Dajú sa poloi, zahodi, givnú hráèovi
				if(invitem == 0 || invitem == _:inv_pacidlo || invitem == _:inv_lano || invitem == _:inv_vrece || invitem == _:inv_puta || invitem == _:inv_weed || invitem == _:inv_weed_seed || invitem == _:inv_naboje
				|| invitem == _:inv_bandaz || invitem == _:inv_rezerva|| invitem == _:inv_weeds1|| invitem == _:inv_weeds2|| invitem == _:inv_weeds3|| invitem == _:inv_hnojivo||invitem==_:inv_spritelean||invitem==_:inv_prometh)
				{
				    strcat(finalString, "Poda item hráèovi\n");
				    strcat(finalString, "Poloi item na zem\n");
				    strcat(finalString, "{ea5959}Zahodi item\n");
				}

				//Dajú sa givnú, zahodi
				else if(invitem == _:inv_pepsiCan || invitem == _:inv_colaCan || invitem == _:inv_kitKatChocolate || invitem == _:inv_pringlesChips ||invitem == _:inv_skateboard ||invitem == _:inv_katalog ||
					invitem==_:inv_tree_sadenica||invitem==_:inv_tree_log_oak||invitem==_:inv_tree_log_birch||invitem==_:inv_tree_log_spruce||
				    invitem == _:inv_kocka || invitem == _:inv_mask || invitem == _:inv_cigarety || invitem == _:inv_zapalovac || invitem == _:inv_carBattery || invitem == _:inv_carOil || invitem == _:inv_pizza||invitem == _:inv_petcup ||invitem == _:inv_sprite)
				{
				    strcat(finalString, "Poda item hráèovi\n");
				    strcat(finalString, "{ea5959}Zahodi item\n");
				}
				//Dajú sa zahodi
				else if(invitem == _:inv_boomBox || invitem == _:inv_idCard || invitem == _:inv_blood || invitem == _:inv_creditCard || invitem == _:inv_simcard || invitem == _:inv_telefon || invitem == _:inv_vysielacka || invitem == _:inv_kanister)
				{
				    strcat(finalString, "{ea5959}Zahodi item\n");
				}
				else
				    return SendError(playerid, "S týmto itemom nemôe niè robi!"), ShowPlayerInventory(Inv[playerid][1], playerid);

				invEditItem[playerid] = invitem;

				#undef invitem

				ShowPlayerDialog(playerid, did_InventoryMenu, DIALOG_STYLE_LIST, "INVENTÁR > MENU", finalString, "VYBRA", "SPA");
				return 0;
			}

			if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1)
			    return ShowPlayerDialog(playerid, did_InventoryZahodit, DIALOG_STYLE_INPUT, "INVENTÁR > ZAHODI", "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce zahodi!\n\nTáto akcia je nevratná!", "ZAHODI", "SPA");

			if(invEditItem[playerid] == 0 && ex_GetPlayerMoney(playerid) < strval(inputtext))
                return ShowPlayerDialog(playerid, did_InventoryZahodit, DIALOG_STYLE_INPUT,
				"INVENTÁR > ZAHODI", "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce zahodi!\n\nTáto akcia je nevratná!\n{ea5959}Nemôe toho vyhodi viac, ako má!", "ZAHODI", "SPA");

    		if(invEditItem[playerid] > 0 && GetPlayerInventoryItem(playerid, invEditItem[playerid]) < strval(inputtext))
                return ShowPlayerDialog(playerid, did_InventoryZahodit, DIALOG_STYLE_INPUT,
				"INVENTÁR > ZAHODI", "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce zahodi!\n\nTáto akcia je nevratná!\n{ea5959}Nemôe toho vyhodi viac, ako má!", "ZAHODI", "SPA");

			if(invEditItem[playerid] == 0)
			{
			    ex_GivePlayerMoney(playerid, -strval(inputtext));
			    money_spent[playerid] += floatround(strval(inputtext),floatround_round);
			}
			else
			{
			    SetPlayerInventoryItem(playerid, invEditItem[playerid], GetPlayerInventoryItem(playerid, invEditItem[playerid])-strval(inputtext));
			}

			new
   				string[128],
				item[32];

			strcat(item, GetItemName(invEditItem[playerid]));
			item[0] = tolower(item[0]);

			format(string, 128, "Zahodil si %s (%d)!", item, strval(inputtext));

		    SendSuccess(playerid, string);

			return ShowPlayerInventory(Inv[playerid][1], playerid);

		}

		case did_InventoryGive1:
	    {
			if(!response)
			{

			    invGive[playerid][0] = -1;
			    invGive[playerid][1] = -1;

       			new
					finalString[90];

				#define invitem invEditItem[playerid]
				//Dajú sa poloi, zahodi, givnú hráèovi
				if(invitem == 0 || invitem == _:inv_pacidlo || invitem == _:inv_lano || invitem == _:inv_vrece || invitem == _:inv_puta || invitem == _:inv_weed || invitem == _:inv_weed_seed||invitem==_:inv_prometh
				|| invitem == _:inv_naboje || invitem == _:inv_bandaz || invitem == _:inv_rezerva|| invitem == _:inv_weeds1|| invitem == _:inv_weeds2|| invitem == _:inv_weeds3|| invitem == _:inv_hnojivo||invitem==_:inv_spritelean)
				{
				    strcat(finalString, "Poda item hráèovi\n");
				    strcat(finalString, "Poloi item na zem\n");
				    strcat(finalString, "{ea5959}Zahodi item\n");
				}

				//Dajú sa givnú, zahodi
				else if(invitem == _:inv_pepsiCan || invitem == _:inv_colaCan || invitem == _:inv_kitKatChocolate || invitem == _:inv_pringlesChips ||invitem == _:inv_skateboard ||invitem == _:inv_katalog ||
					invitem==_:inv_tree_sadenica||invitem==_:inv_tree_log_oak||invitem==_:inv_tree_log_birch||invitem==_:inv_tree_log_spruce||
				    invitem == _:inv_kocka || invitem == _:inv_mask || invitem == _:inv_cigarety || invitem == _:inv_zapalovac || invitem == _:inv_carBattery || invitem == _:inv_carOil || invitem == _:inv_pizza||invitem == _:inv_petcup ||invitem == _:inv_sprite)
				{
				    strcat(finalString, "Poda item hráèovi\n");
				    strcat(finalString, "{ea5959}Zahodi item\n");
				}
				//Dajú sa zahodi
				else if(invitem == _:inv_boomBox || invitem == _:inv_idCard || invitem == _:inv_blood || invitem == _:inv_creditCard || invitem == _:inv_simcard || invitem == _:inv_telefon || invitem == _:inv_vysielacka)
				{
				    strcat(finalString, "{ea5959}Zahodi item\n");
				}
				else
				    return SendError(playerid, "S týmto itemom nemôe niè robi!"), ShowPlayerInventory(Inv[playerid][1], playerid);

				invEditItem[playerid] = invitem;

				#undef invitem

				ShowPlayerDialog(playerid, did_InventoryMenu, DIALOG_STYLE_LIST, "INVENTÁR > MENU", finalString, "VYBRA", "SPA");
				return 0;
			}

			if(isnull(inputtext) || !IsNumeric(inputtext) || (invEditItem[playerid] != 0 && strval(inputtext) < 1))
			    return ShowPlayerDialog(playerid, did_InventoryGive1, DIALOG_STYLE_INPUT, "INVENTÁR > PODA", "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce poda inému hráèovi!", "ÏALEJ", "SPA");

			if(invEditItem[playerid] == 0 && (ex_GetPlayerMoney(playerid) < floatstr(inputtext) || floatstr(inputtext) < 0.01))
                return ShowPlayerDialog(playerid, did_InventoryGive1, DIALOG_STYLE_INPUT, "INVENTÁR > PODA", "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce poda inému hráèovi!\nNemôe poda menej ako 1 cent alebo viac ako má!", "ÏALEJ", "SPA");

    		if(invEditItem[playerid] > 0 && GetPlayerInventoryItem(playerid, invEditItem[playerid]) < strval(inputtext))
                return ShowPlayerDialog(playerid, did_InventoryGive1, DIALOG_STYLE_INPUT, "INVENTÁR > PODA", "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce poda inému hráèovi!", "ÏALEJ", "SPA");

			if(invEditItem[playerid] == 0)
				invGive[playerid][0] = floatround(floatstr(inputtext) * 100, floatround_round);
			else
			    invGive[playerid][0] = strval(inputtext);

			invGive[playerid][2] = invEditItem[playerid];

			return ShowPlayerDialog(playerid, did_InventoryGive2, DIALOG_STYLE_INPUT, "INVENTÁR > PODA", "{ffffff}> Zadaj prosím ID hráèa, ktorému chce tento item da!", "ÏALEJ", "SPA");

		}

		case did_InventoryGive2:
	    {
			if(!response)
			{
			    invGive[playerid][1] = -1;
				return ShowPlayerDialog(playerid, did_InventoryGive1, DIALOG_STYLE_INPUT, "INVENTÁR > PODA", "{ffffff}> Zadaj prosím poèet, ko¾ko toho chce poda inému hráèovi!", "ÏALEJ", "SPA");
			}

			new id = strval(inputtext);
			MaskToId(id);

			if(isnull(inputtext) || !IsNumeric(inputtext) || !IsPlayerLogged(strval(inputtext)))
			    return SendError(playerid, "Tento hráè nie je v hre!"), ShowPlayerDialog(playerid, did_InventoryGive2, DIALOG_STYLE_INPUT, "INVENTÁR > PODA", "{ffffff}> Zadaj prosím ID hráèa, ktorému chce tento item da!", "ÏALEJ", "SPA");

			if(!IsPlayerNearPlayer(playerid, strval(inputtext), 2.5))
                return ShowPlayerDialog(playerid, did_InventoryGive2, DIALOG_STYLE_INPUT, "INVENTÁR > PODA", "{ffffff}> Zadaj prosím ID alebo meno hráèa, ktorému chce tento item da!", "ÏALEJ", "SPA");

			invGive[playerid][1] = id;

            new
   				string[128],
				item[32],
				itemchar[8];

			strcat(item, GetItemName(invEditItem[playerid]));
			item[0] = tolower(item[0]);

			switch(_:invEditItem[playerid])
			{
			    case 0:
			        format(itemchar, 8, "$");

				case 8:
				    format(itemchar, 8, " kg");

                case 41:
				    format(itemchar, 8, " ml");

				default:
				    format(itemchar, 8, " ks");
			}

			if(invEditItem[playerid] == 0)
			{
				format(string, 128, "> Odoslal si ponuku hráèovi %s na podanie %s (%s%.2f)! Ponuka uplynie za 15 sekúnd.", GetPlayerNameEx(id, USE_MASK), item, itemchar, float(invGive[playerid][0]) / 100.0);
			}
			else
			    format(string, 128, "> Odoslal si ponuku hráèovi %s na podanie %s (%d%s)! Ponuka uplynie za 15 sekúnd.", GetPlayerNameEx(id, USE_MASK), item, invGive[playerid][0], itemchar);

		    SCFM(playerid, COLOR_GREY, string);

            if(invEditItem[playerid] == 0)
		    	format(string, 128, "> %s ti chce poda item %s (%s%.2f)!", GetPlayerNameEx(playerid, USE_MASK), item, itemchar, float(invGive[playerid][0]) / 100.0);
			else
			    format(string, 128, "> %s ti chce poda item %s (%d%s)!", GetPlayerNameEx(playerid, USE_MASK), item, invGive[playerid][0], itemchar);

		    SCFM(id, COLOR_GREY, string);

		    format(string, 128, "> Pre prijatie ponuky poui príkaz /accept item <%d>! Ponuka uplynie za 15 sekúnd.", ReturnID(playerid));
		    SCFM(id, COLOR_GREY, string);

		    cantManipulate[playerid] = true;

		    SetTimerEx("timer_StopItemPonuka", 15*1000, false, "iiii", playerid, id, invEditItem[playerid], invGive[playerid][0]);

		}

	    case did_Damages:
	    {
     		return 0;
	    }

	    case menut_automat_chocolate:
	    {
	        if(!response)
	            return 1;

	        if(ex_GetPlayerMoney(playerid) < buyfood_fastfood_mat_items[listitem][1][0])
	            return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerBuyFoodMenu(playerid, menut_automat_chocolate);

            new
			    S_string[256];

			format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.", buyfood_fastfood_mat_items[listitem][1][0]);

			SetPlayerInventoryItem(playerid, buyfood_fastfood_mat_items[listitem][2][0], GetPlayerInventoryItem(playerid, buyfood_fastfood_mat_items[listitem][2][0]) + 1);

			ex_GivePlayerMoney(playerid, -buyfood_fastfood_mat_items[listitem][1][0]);
			money_spent[playerid]+=floatround(buyfood_fastfood_mat_items[listitem][1][0],floatround_round);

			EnterInfo(playerid, S_string, 5000, 1);

            AddBusinessCash(GetPlayerBusiness(playerid), buyfood_fastfood_mat_items[listitem][1][0]);

            ShowPlayerBuyFoodMenu(playerid, menut_automat_chocolate);
	    }

	    case menut_pizza_stack:
	    {
            if(!response)
	            return 1;

            if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    		return SendError(playerid, "Tento biznis ma prazdny sklad!");

	        if(ex_GetPlayerMoney(playerid) < buyfood_pizzastack_items[listitem][1][0])
	            return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerBuyFoodMenu(playerid, menut_pizza_stack);

            DecrBizTovar(GetPlayerBusiness(playerid));

            new
			    I_fill = buyfood_pizzastack_items[listitem][2][0],
			    I_counted,
			    Float:HP_count,
			    Float:HUNGER;

            new
			    S_string[256];

			ex_GetPlayerHunger(playerid, HUNGER);
			GetPlayerHealth(playerid, HP_count);

			I_counted = (floatround(HUNGER, floatround_round) + I_fill);

			new HLAD = buyfood_pizzastack_items[listitem][2][0];

			if(floatround(HUNGER, floatround_round) + HLAD > 100)
			{
			    HLAD = -1 * ( floatround(HUNGER, floatround_round) - 100 );
			}

			if(I_counted >= 100)
			{
			    ex_SetPlayerHunger(playerid, 100.0);

				new
				    Float:PridatHP = 100.0 - floatround(HP_count, floatround_round);

				if(PridatHP >= 20.0)
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu a ~b~20%% ~w~zivota.", buyfood_pizzastack_items[listitem][1][0], HLAD);
					SetPlayerHealth(playerid, HP_count + 20.0);
				}
				else if(PridatHP > 0.0 && PridatHP < 20.0)
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu a ~b~%d%% ~w~zivota.", buyfood_pizzastack_items[listitem][1][0], HLAD, floatround(PridatHP, floatround_round));
				    SetPlayerHealth(playerid, 100.0);
				}
				else
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu.", buyfood_burgershot_items[listitem][1][0], HLAD);
				}

			}
			else
			{
			    ex_SetPlayerHunger(playerid, HUNGER + I_fill);
			}

			ex_GivePlayerMoney(playerid, -buyfood_pizzastack_items[listitem][1][0]);
			money_spent[playerid]+=floatround(buyfood_pizzastack_items[listitem][1][0],floatround_round);
			AddBusinessCash(GetPlayerBusiness(playerid), buyfood_pizzastack_items[listitem][1][0]);

			EnterInfo(playerid, S_string, 5000, 1);

            ShowPlayerBuyFoodMenu(playerid, menut_pizza_stack);
	    }

	    case menut_burgershot, menut_burgershot_drive:
	    {
	        if(!response)
	            return 1;

            if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    		return SendError(playerid, "Tento biznis ma prazdny sklad!");

	        if(ex_GetPlayerMoney(playerid) < buyfood_burgershot_items[listitem][1][0])
	            return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerBuyFoodMenu(playerid, menut_burgershot);

            DecrBizTovar(GetPlayerBusiness(playerid));

            new
			    I_fill = buyfood_burgershot_items[listitem][2][0],
			    I_counted,
			    Float:HP_count,
			    Float:HUNGER;

            new
			    S_string[256];

			ex_GetPlayerHunger(playerid, HUNGER);
			GetPlayerHealth(playerid, HP_count);

			I_counted = (floatround(HUNGER, floatround_round) + I_fill);

			new HLAD = buyfood_burgershot_items[listitem][2][0];

			if(floatround(HUNGER, floatround_round) + HLAD > 100)
			{
			    HLAD = -1 * ( floatround(HUNGER, floatround_round) - 100 );
			}

			if(I_counted >= 100)
			{
			    ex_SetPlayerHunger(playerid, 100.0);

				new
				    Float:PridatHP = 100.0 - floatround(HP_count, floatround_round);

				if(PridatHP >= 20.0)
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu a ~b~20%% ~w~zivota.", buyfood_burgershot_items[listitem][1][0], HLAD);
					SetPlayerHealth(playerid, HP_count + 20.0);
				}
				else if(PridatHP > 0.0 && PridatHP < 20.0)
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu a ~b~%d%% ~w~zivota.", buyfood_burgershot_items[listitem][1][0], HLAD, floatround(PridatHP, floatround_round));
				    SetPlayerHealth(playerid, 100.0);
				}
				else
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu.", buyfood_burgershot_items[listitem][1][0], HLAD);
				}

			}
			else
			{
			    ex_SetPlayerHunger(playerid, HUNGER + I_fill);
			}

			ex_GivePlayerMoney(playerid, -buyfood_burgershot_items[listitem][1][0]);
			money_spent[playerid]+=floatround(buyfood_burgershot_items[listitem][1][0],floatround_round);
			AddBusinessCash(GetPlayerBusiness(playerid), buyfood_burgershot_items[listitem][1][0]);

			EnterInfo(playerid, S_string, 5000, 1);

            ShowPlayerBuyFoodMenu(playerid, menut_burgershot);
	    }

    	case menut_foodshop_hotdog:
	    {

	        if(!response)
	            return 1;

            if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    		return SendError(playerid, "Tento biznis ma prazdny sklad!");

	        if(ex_GetPlayerMoney(playerid) < buyfood_hotdog_items[listitem][1][0])
	            return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerBuyFoodMenu(playerid, menut_foodshop_hotdog);

            DecrBizTovar(GetPlayerBusiness(playerid));

			new
			    I_fill = buyfood_hotdog_items[listitem][2][0],
			    I_counted,
			    Float:HP_count,
			    Float:HUNGER;

            new
			    S_string[256];

			ex_GetPlayerHunger(playerid, HUNGER);
			GetPlayerHealth(playerid, HP_count);

			I_counted = (floatround(HUNGER, floatround_round) + I_fill);

			new HLAD = buyfood_hotdog_items[listitem][2][0];

			if(floatround(HUNGER, floatround_round) + HLAD > 100)
			{
			    HLAD = -1 * ( floatround(HUNGER, floatround_round) - 100 );
			}

			if(I_counted >= 100)
			{
			    ex_SetPlayerHunger(playerid, 100.0);

				new
				    Float:PridatHP = 100.0 - floatround(HP_count, floatround_round);

				if(PridatHP >= 20.0)
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu a ~b~20%% ~w~zivota.", buyfood_hotdog_items[listitem][1][0], HLAD);
					SetPlayerHealth(playerid, HP_count + 20.0);
				}
				else if(PridatHP > 0.0 && PridatHP < 20.0)
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu a ~b~%d%% ~w~zivota.", buyfood_hotdog_items[listitem][1][0], HLAD, floatround(PridatHP, floatround_round));
				    SetPlayerHealth(playerid, 100.0);
				}
				else
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu.", buyfood_hotdog_items[listitem][1][0], HLAD);
				}

			}
			else
			{
			    ex_SetPlayerHunger(playerid, HUNGER + I_fill);
			}

			ex_GivePlayerMoney(playerid, -buyfood_hotdog_items[listitem][1][0]);
			money_spent[playerid]+=floatround(buyfood_hotdog_items[listitem][1][0],floatround_round);
			AddBusinessCash(GetPlayerBusiness(playerid), buyfood_hotdog_items[listitem][1][0]);

			EnterInfo(playerid, S_string, 5000, 1);

            ShowPlayerBuyFoodMenu(playerid, menut_foodshop_hotdog);
	    }

	    case menut_marcosbistro:
	    {

	        if(!response)
	            return 1;

            if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    		return SendError(playerid, "Tento biznis ma prazdny sklad!");

	        if(ex_GetPlayerMoney(playerid) < buyfood_marcobistro_items[listitem][1][0])
	            return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerBuyFoodMenu(playerid, menut_marcosbistro);

            DecrBizTovar(GetPlayerBusiness(playerid));

			new
			    I_fill = buyfood_hotdog_items[listitem][2][0],
			    I_counted,
			    Float:HP_count,
			    Float:HUNGER;

            new
			    S_string[256];

			ex_GetPlayerHunger(playerid, HUNGER);
			GetPlayerHealth(playerid, HP_count);

			I_counted = (floatround(HUNGER, floatround_round) + I_fill);

			new HLAD = buyfood_hotdog_items[listitem][2][0];

			if(floatround(HUNGER, floatround_round) + HLAD > 100)
			{
			    HLAD = -1 * ( floatround(HUNGER, floatround_round) - 100 );
			}

			if(I_counted >= 100)
			{
			    ex_SetPlayerHunger(playerid, 100.0);

				new
				    Float:PridatHP = 100.0 - floatround(HP_count, floatround_round);

				if(PridatHP >= 20.0)
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu a ~b~20%% ~w~zivota.", buyfood_marcobistro_items[listitem][1][0], HLAD);
					SetPlayerHealth(playerid, HP_count + 20.0);
				}
				else if(PridatHP > 0.0 && PridatHP < 20.0)
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu a ~b~%d%% ~w~zivota.", buyfood_marcobistro_items[listitem][1][0], HLAD, floatround(PridatHP, floatround_round));
				    SetPlayerHealth(playerid, 100.0);
				}
				else
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu.", buyfood_marcobistro_items[listitem][1][0], HLAD);
				}

			}
			else
			{
			    ex_SetPlayerHunger(playerid, HUNGER + I_fill);
			}

			ex_GivePlayerMoney(playerid, -buyfood_marcobistro_items[listitem][1][0]);
			money_spent[playerid]+=floatround(buyfood_marcobistro_items[listitem][1][0],floatround_round);
			AddBusinessCash(GetPlayerBusiness(playerid), buyfood_marcobistro_items[listitem][1][0]);

			EnterInfo(playerid, S_string, 5000, 1);

            ShowPlayerBuyFoodMenu(playerid, menut_marcosbistro);
	    }

	    case menut_welcome_pump:
	    {

	        if(!response)
	            return 1;

            if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    		return SendError(playerid, "Tento biznis ma prazdny sklad!");

	        if(ex_GetPlayerMoney(playerid) < buyfood_welcomepump_items[listitem][1][0])
	            return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerBuyFoodMenu(playerid, menut_welcome_pump);

            DecrBizTovar(GetPlayerBusiness(playerid));

			new
			    I_fill = buyfood_welcomepump_items[listitem][2][0],
			    I_counted,
			    Float:HP_count,
			    Float:HUNGER;

            new
			    S_string[256];

			ex_GetPlayerHunger(playerid, HUNGER);
			GetPlayerHealth(playerid, HP_count);

			I_counted = (floatround(HUNGER, floatround_round) + I_fill);

			new HLAD = buyfood_welcomepump_items[listitem][2][0];

			if(floatround(HUNGER, floatround_round) + HLAD > 100)
			{
			    HLAD = -1 * ( floatround(HUNGER, floatround_round) - 100 );
			}

			if(I_counted >= 100)
			{
			    ex_SetPlayerHunger(playerid, 100.0);

				new
				    Float:PridatHP = 100.0 - floatround(HP_count, floatround_round);

				if(PridatHP >= 20.0)
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu a ~b~20%% ~w~zivota.", buyfood_welcomepump_items[listitem][1][0], HLAD);
					SetPlayerHealth(playerid, HP_count + 20.0);
				}
				else if(PridatHP > 0.0 && PridatHP < 20.0)
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu a ~b~%d%% ~w~zivota.", buyfood_welcomepump_items[listitem][1][0], HLAD, floatround(PridatHP, floatround_round));
				    SetPlayerHealth(playerid, 100.0);
				}
				else
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu.", buyfood_welcomepump_items[listitem][1][0], HLAD);
				}

			}
			else
			{
			    ex_SetPlayerHunger(playerid, HUNGER + I_fill);
			}

			ex_GivePlayerMoney(playerid, -buyfood_welcomepump_items[listitem][1][0]);
			money_spent[playerid]+=floatround(buyfood_welcomepump_items[listitem][1][0],floatround_round);
			AddBusinessCash(GetPlayerBusiness(playerid), buyfood_welcomepump_items[listitem][1][0]);

			EnterInfo(playerid, S_string, 5000, 1);

            ShowPlayerBuyFoodMenu(playerid, menut_welcome_pump);
	    }

	    case menut_foodshop_buckscoffee:
	    {

	        if(!response)
	            return 1;

            if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    		return SendError(playerid, "Tento biznis ma prazdny sklad!");

	        if(ex_GetPlayerMoney(playerid) < buyfood_buckscoffee_items[listitem][1][0])
	            return SendError(playerid, "Nemá dos peòazí!"), ShowPlayerBuyFoodMenu(playerid, menut_foodshop_buckscoffee);

            DecrBizTovar(GetPlayerBusiness(playerid));

			new
			    I_fill = buyfood_buckscoffee_items[listitem][2][0],
			    I_counted,
			    Float:HP_count,
			    Float:HUNGER;

            new
			    S_string[256];

			ex_GetPlayerHunger(playerid, HUNGER);
			GetPlayerHealth(playerid, HP_count);

			I_counted = (floatround(HUNGER, floatround_round) + I_fill);

			new HLAD = buyfood_buckscoffee_items[listitem][2][0];

			if(floatround(HUNGER, floatround_round) + HLAD > 100)
			{
			    HLAD = -1 * ( floatround(HUNGER, floatround_round) - 100 );
			}

			if(I_counted >= 100)
			{
			    ex_SetPlayerHunger(playerid, 100.0);

				new
				    Float:PridatHP = 100.0 - floatround(HP_count, floatround_round);

				if(PridatHP >= 20.0)
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu a ~b~20%% ~w~zivota.", buyfood_buckscoffee_items[listitem][1][0], HLAD);
					SetPlayerHealth(playerid, HP_count + 20.0);
				}
				else if(PridatHP > 0.0 && PridatHP < 20.0)
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu a ~b~%d%% ~w~zivota.", buyfood_buckscoffee_items[listitem][1][0], HLAD, floatround(PridatHP, floatround_round));
				    SetPlayerHealth(playerid, 100.0);
				}
				else
				{
				    format(S_string, 256, "~w~Zakupil si si jedlo za ~g~%d$~w~.~n~Doplnilo ti ~b~%d%% ~w~hladu.", buyfood_buckscoffee_items[listitem][1][0], HLAD);
				}

			}
			else
			{
			    ex_SetPlayerHunger(playerid, HUNGER + I_fill);
			}

			ex_GivePlayerMoney(playerid, -buyfood_buckscoffee_items[listitem][1][0]);
			money_spent[playerid]+=floatround(buyfood_buckscoffee_items[listitem][1][0],floatround_round);
			AddBusinessCash(GetPlayerBusiness(playerid), buyfood_buckscoffee_items[listitem][1][0]);

			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
			{
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}

			EnterInfo(playerid, S_string, 5000, 1);

            ShowPlayerBuyFoodMenu(playerid, menut_foodshop_buckscoffee);
	    }

	    case did_CityHall_id:
		{
			if(!response) return ShowCityHallMenu(playerid);
			if(listitem == 0) {
			    if(GetPlayerInventoryItem(playerid, inv_idCard)) return ShowPlayerIDCreateMenu(playerid);
				return ShowPlayerIDYear(playerid);
			}
			else if(listitem == 1) {
			    if(GetPlayerInventoryItem(playerid, inv_idCard)) return ShowPlayerIDCreateMenu(playerid);
				return ShowPlayerIDMonth(playerid);
			}
			else if(listitem == 2) {
			    if(GetPlayerInventoryItem(playerid, inv_idCard)) return ShowPlayerIDCreateMenu(playerid);
				return ShowPlayerIDDay(playerid);
			}
			else if(listitem == 3) {
			    if(GetPlayerInventoryItem(playerid, inv_idCard)) return ShowPlayerIDCreateMenu(playerid);
				return ShowPlayerIDPoB(playerid);
			}
			else if(listitem == 4) return ShowPlayerIDSettlm(playerid);
			else if(listitem == 5)
			{
			    if(t_ID_Date[playerid][0] == 0 || t_ID_Date[playerid][1] == 0 || t_ID_Date[playerid][2] == 0 || (!GetPlayerInventoryItem(playerid, inv_idCard) && strlen(t_ID_Place[playerid]) < 3) || strlen(t_ID_Settlement[playerid]) < 2) return ShowPlayerIDCreateMenu(playerid);
			    else
			    {
			        new year,month,day; getdate(year,month,day);
					if(!GetPlayerInventoryItem(playerid, inv_idCard)) format(ID_DateOfBirth[playerid], 12, "%04d-%02d-%02d", t_ID_Date[playerid][2], t_ID_Date[playerid][1], t_ID_Date[playerid][0]);
					format(ID_ReleaseDate[playerid], 12, "%04d-%02d-%02d", year,month,day);
					if(!GetPlayerInventoryItem(playerid, inv_idCard)) format(ID_PlaceOfBirth[playerid], 32, "%s", t_ID_Place[playerid]);
					format(ID_Settlement[playerid], 64, "%s", t_ID_Settlement[playerid]);
					ID_CardID[playerid] = 100000000+random(99999999);

					ex_GivePlayerMoney(playerid, -15);
					money_spent[playerid]+=floatround(15,floatround_round);

					SetPlayerInventoryItem(playerid, inv_idCard, 1);

					SendSuccess(playerid, "Vybavil si si nový obèiansky preukaz za 15$! Otvorí ho príkazom /obcianka a ukáe /uo [id].");
			        //success//
			    }
			}
			return 0;
		}

		case did_CityHall_idy:
	 	{
			if(!response) return ShowPlayerIDCreateMenu(playerid);
			if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) > 2001 || strval(inputtext) < 1917)
			{
				SendError(playerid, "Zadaj prosím správny rok narodenia.");
				return ShowPlayerIDYear(playerid);
			}
			t_ID_Date[playerid][2] = strval(inputtext);
			SendSuccess(playerid, "Rok narodenia úspene zmenený!");
			ShowPlayerIDCreateMenu(playerid);
			return 0;
		}

		case did_CityHall_idm:
		{
			if(!response) return ShowPlayerIDCreateMenu(playerid);
			t_ID_Date[playerid][1] = listitem+1;

			if(listitem+1 == 2 && ((!IsLeapYear(t_ID_Date[playerid][2]) && t_ID_Date[playerid][0] > 28) || t_ID_Date[playerid][0] > 29))
			{
				t_ID_Date[playerid][0] = 0;
			}
			else if(listitem+1 == 4 && t_ID_Date[playerid][0] > 30)
			{
				t_ID_Date[playerid][0] = 30;
			}
			else if(listitem+1 == 6 && t_ID_Date[playerid][0] > 30)
			{
				t_ID_Date[playerid][0] = 30;
			}
			else if(listitem+1 == 9 && t_ID_Date[playerid][0] > 30)
			{
				t_ID_Date[playerid][0] = 30;
			}
			else if(listitem+1 == 11 && t_ID_Date[playerid][0] > 30)
			{
				t_ID_Date[playerid][0] = 30;
			}
			SendSuccess(playerid, "Mesiac narodenia úspene zmenený!");
			ShowPlayerIDCreateMenu(playerid);
			return 0;
		}

		case did_CityHall_idd:
		{
			if(!response) return ShowPlayerIDCreateMenu(playerid);
			t_ID_Date[playerid][0] = listitem+1;

			SendSuccess(playerid, "Deò narodenia úspene zmenený!");
			ShowPlayerIDCreateMenu(playerid);
			return 0;
		}

		case did_CityHall_idp:
		{
			if(!response) return ShowPlayerIDCreateMenu(playerid);
			if(isnull(inputtext) || strlen(inputtext) < 5 || strlen(inputtext) > 30)
			{
				SendError(playerid, "Dodr prosím podmienky miesta narodenia!");
				return ShowPlayerIDPoB(playerid);
			}

			format(t_ID_Place[playerid], 32, inputtext);

			SendSuccess(playerid, "Miesto narodenia úspene zmenené!");
			ShowPlayerIDCreateMenu(playerid);
			return 0;
		}

		case did_CityHall_ids:
		{
			if(!response) return ShowPlayerIDCreateMenu(playerid);

			if(listitem == 0) format(t_ID_Settlement[playerid], 64, "Palomino Creek Town Hall");
			else
			{
			    new
			        pocet = 0;

                format(t_ID_Settlement[playerid], 64, "Palomino Creek Town Hall");

                foreach( new i : Houses )
				{

				    if(houseEnum[i][ho_Number] < 1)
				        continue;

					if(strcmp(houseEnum[i][ho_Owner], ReturnName(playerid), false) && strcmp(houseEnum[i][ho_SecOwner], ReturnName(playerid), false))
					    continue;

					pocet ++;

					if(pocet != listitem)
					    continue;

                    format(t_ID_Settlement[playerid], 64, "%d%s %s", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street]);

					break;

				}
			}

			SendSuccess(playerid, "Trvalé bydlisko úspene zmenené!");
			ShowPlayerIDCreateMenu(playerid);
			return 0;
		}

	    case did_Frakcia_Own:
	    {
	        if(!response)
	            return 0;

			if(listitem == 0 || listitem == 1 || listitem == 2)
			{
			    return ShowPlayerOwnFaction(playerid);
			}
			else if(listitem == 3)
			{
			    //Kasa
			    ShowPlayerFactionCasa(playerid);

			}
			else if(listitem == 4)
			{
			    //Èlenovia
			    ShowPlayerFactionMemb(playerid);
			}
			else if(listitem == 5)
			{
			    //Výpoveï
			    if(g_I_VypovedUnix[playerid] > 10)
			    {
			        new
						price = 5000;

					if(GetPlayerDonatorLevel(playerid) == 0) price = 5000;
					else if(GetPlayerDonatorLevel(playerid) == 1) price = 2500;
					else if(GetPlayerDonatorLevel(playerid) == 2) price = 1200;
					else if(GetPlayerDonatorLevel(playerid) == 3) price = 500;

       				new
						string[256];

            		format(string, 256, "{FFFFFF}> Bohuial, u si raz podal výpoveï!\n\nAutomaticky bude prepustený {e34f4f}%s{ffffff}!\nChce výpoveï stornova? Môe tak uèini za %d$.\nNÁPOVEDA: Zakúpením tatútu donator sa skráti èas na èakanie na výpoveï!",
					 	getdateunix(g_I_VypovedUnix[playerid]), price);

			        return ShowPlayerDialog(playerid, did_Frakcia_Own_Vypoved, DIALOG_STYLE_MSGBOX, "VYPOVED", string, "ANO", "NIE");
			    }
			    else
			    {
			        new
			            hodina = 24,
			        	unixtime = gettime() + (3600 * 24); // 24 hodin

	                if(GetPlayerDonatorLevel(playerid) == 0) hodina = 24, unixtime = gettime() + (3600 * 24); // 24 hodin
					else if(GetPlayerDonatorLevel(playerid) == 1) hodina = 16, unixtime = gettime() + (3600 * 16); // 16 hodin
					else if(GetPlayerDonatorLevel(playerid) == 2) hodina = 8, unixtime = gettime() + (3600 * 8); // 8 hodin
					else if(GetPlayerDonatorLevel(playerid) == 3) hodina = 3, unixtime = gettime() + (3600 * 3); // 3 hodiny

			        new
						string[256];

            		format(string, 256,
						"{FFFFFF}> Ak podá výpoveï, bude automaticky prepustený {e34f4f}%s{ffffff} (o %d hodín)!\nChce výpoveï skutoène poda?\nNÁPOVEDA: Zakúpením tatútu donator sa skráti èas na èakanie na výpoveï!",
						getdateunix(unixtime), hodina);

			        return ShowPlayerDialog(playerid, did_Frakcia_Own_Vypoved, DIALOG_STYLE_MSGBOX, "VYPOVED", string, "ANO", "NIE");
			    }
			}
	    }
	    case did_Faction_Members:
	    {
	        if(!response)
	            return ShowPlayerOwnFaction(playerid);

			if(GetPlayerFactionRank(playerid) < 8 && GetPlayerAdminLevel(playerid) < 4)
			    return SendError(playerid, "Nemá oprávnenie na úpravu èlena!"), ShowPlayerFactionMemb(playerid);

			ShowPlayerFactionMember(playerid, listitem);
	    }
	    case did_Faction_Member:
	    {
	        if(!response)
	            return ShowPlayerFactionMemb(playerid);

			if(listitem == 0 || listitem == 1 || listitem == 5)
			    return ShowPlayerFactionMember(playerid, lastFacMemb[playerid]);
   			else if(listitem == 2)
			{
			    return ShowPlayerDialog(playerid, did_Faction_Set_Hodnost, DIALOG_STYLE_INPUT, "UPRAVI HRÁÈA", "{ffffff}> Zadaj prosím novú hodnos hráèa, musí ma od 4 do 30 znakov.", "OK", "SPA");
			}
			else if(listitem == 3)
			{
			    return ShowPlayerDialog(playerid, did_Faction_Set_Rank, DIALOG_STYLE_INPUT, "UPRAVI HRÁÈA", "{ffffff}> Zadaj prosím nový rank (1 - 10) tohoto hráèa.", "OK", "SPA");
			}
			else if(listitem == 4)
			{
       			return ShowPlayerDialog(playerid, did_Faction_Set_Badge, DIALOG_STYLE_INPUT, "UPRAVI HRÁÈA", "{ffffff}> Zadaj prosím nové èíslo odznaku.", "OK", "SPA");
			}
			else if(listitem == 6)
			{
	       		new
				    S_query[256],
					Cache:C_q;

				mysql_format(MYSQL, S_query, 256, "SELECT * FROM char_main WHERE Faction = '%d'", GetPlayerFaction(playerid));
				C_q = mysql_query(MYSQL, S_query);

				new
					Username[25],
					P_wasFound = 0;

				cache_get_value_name(lastFacMemb[playerid], "Username", Username);
				cache_delete(C_q);
				foreach( new id : Player )
			 	{
			  		if(!IsPlayerLogged(id))
						continue;

					if(strcmp(ReturnName(id), Username, false))
			  			continue;

					P_wasFound = 1;
					SetPlayerFaction(id, 0);

					SCFM(id, 0xD0D0D0FF, "> %s a vyhodil z frakcie!", GetPlayerNameEx(playerid, NO_MASK));

					if(id != playerid)
						ShowPlayerFactionMemb(playerid);

	    			break;
				}

				if(P_wasFound == 0)
				{
				    mysql_format(MYSQL, S_query, 256, "UPDATE char_main SET Faction = '0' WHERE Username = '%e'", Username);
					mysql_query(MYSQL, S_query, false);
				}

				SendSuccess(playerid, "Hráè vyhodený!");

				FormatLog(log_type_player, "%s(%s - %s) vyhodil %s z frackie %s.", ReturnName(playerid), ReturnIP(playerid), ReturnMaster(playerid), Username, factEnum[GetPlayerFaction(playerid)][fact_Name]);
			}
	    }
	    case did_Faction_Set_Hodnost:
	    {
	        if(!response)
	            return ShowPlayerFactionMember(playerid, lastFacMemb[playerid]);

			if(isnull(inputtext) || strlen(inputtext) < 4 || strlen(inputtext) > 30)
       			return ShowPlayerDialog(playerid, did_Faction_Set_Hodnost, DIALOG_STYLE_INPUT, "UPRAVI HRÁÈA", "{ffffff}> Zadaj prosím novú hodnos hráèa, musí ma od 4 do 30 znakov.", "OK", "SPA");

		    new
			    S_query[256],
				Cache:C_q;

			mysql_format(MYSQL, S_query, 256, "SELECT * FROM char_main WHERE Faction = '%d'", GetPlayerFaction(playerid));
			C_q = mysql_query(MYSQL, S_query);

			new
				Username[25],
				P_wasFound = 0;

			cache_get_value_name(lastFacMemb[playerid], "Username", Username);
			cache_delete(C_q);
			foreach( new id : Player )
		 	{
		  		if(!IsPlayerLogged(id))
					continue;

				if(strcmp(ReturnName(id), Username, false))
		  			continue;

				P_wasFound = 1;
				SetPlayerFactionTitle(id, inputtext);
				SCFM(id, 0xD0D0D0FF, "> %s ti zmenil hodnos na %s!", GetPlayerNameEx(playerid, NO_MASK), inputtext);
    			break;
			}

			if(P_wasFound == 0)
			{
			    mysql_format(MYSQL, S_query, 256, "UPDATE char_main SET FactionTitle = '%e' WHERE Username = '%e'", inputtext, Username);
				mysql_query(MYSQL, S_query, false);
			}

			SendSuccess(playerid, "Hodnos upravená!");

			ShowPlayerFactionMember(playerid, lastFacMemb[playerid]);
		}
		case did_Faction_Set_Rank:
	    {

	        if(!response)
	            return ShowPlayerFactionMember(playerid, lastFacMemb[playerid]);

			if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1 || strval(inputtext) > 55555)
			    return ShowPlayerDialog(playerid, did_Faction_Set_Rank, DIALOG_STYLE_INPUT, "UPRAVI HRÁÈA", "{ffffff}> Zadaj prosím nový rank (1 - 10) tohoto hráèa.", "OK", "SPA");

			if(strval(inputtext) > GetPlayerFactionRank(playerid) && GetPlayerAdminLevel(playerid) < 4)
			    return SendError(playerid, "Nemôe nastavi väèí rank ako má ty!"), ShowPlayerDialog(playerid, did_Faction_Set_Hodnost, DIALOG_STYLE_INPUT, "UPRAVI HRÁÈA", "{ffffff}> Zadaj prosím novú hodnos hráèa, musí ma od 4 do 30 znakov.", "OK", "SPA");

		    new
			    S_query[256],
				Cache:C_q;

			mysql_format(MYSQL, S_query, 256, "SELECT * FROM char_main WHERE Faction = '%d'", GetPlayerFaction(playerid));
			C_q = mysql_query(MYSQL, S_query);

			new
				Username[25],
				P_wasFound = 0;

			cache_get_value_name(lastFacMemb[playerid], "Username", Username);
			cache_delete(C_q);
			foreach( new id : Player )
		 	{
		  		if(!IsPlayerLogged(id))
					continue;

				if(strcmp(ReturnName(id), Username, false))
		  			continue;

				P_wasFound = 1;
				SetPlayerFactionRank(id, strval(inputtext));
				SCFM(id, 0xD0D0D0FF, "> %s ti zmenil rank na %d!", GetPlayerNameEx(playerid, NO_MASK), strval(inputtext));
    			break;
			}

			if(P_wasFound == 0)
			{
			    mysql_format(MYSQL, S_query, 256, "UPDATE char_main SET FactionRank = '%d' WHERE Username = '%e'", strval(inputtext), Username);
				mysql_query(MYSQL, S_query, false);
			}

			SendSuccess(playerid, "Rank upravený!");

			ShowPlayerFactionMember(playerid, lastFacMemb[playerid]);
		}
		case did_Faction_Set_Badge:
	    {

	        if(!response)
	            return ShowPlayerFactionMember(playerid, lastFacMemb[playerid]);

			if(isnull(inputtext) || !IsNumeric(inputtext))
			    return ShowPlayerDialog(playerid, did_Faction_Set_Badge, DIALOG_STYLE_INPUT, "UPRAVI HRÁÈA", "{ffffff}> Zadaj prosím nové èíslo odznaku.", "OK", "SPA");

		    new
			    S_query[256],
				Cache:C_q;

			mysql_format(MYSQL, S_query, 256, "SELECT * FROM char_main WHERE Faction = '%d'", GetPlayerFaction(playerid));
			C_q = mysql_query(MYSQL, S_query);

			new
				Username[25],
				P_wasFound = 0;

			cache_get_value_name(lastFacMemb[playerid], "Username", Username);
			cache_delete(C_q);
			foreach( new id : Player )
		 	{
		  		if(!IsPlayerLogged(id))
					continue;

				if(strcmp(ReturnName(id), Username, false))
		  			continue;

				P_wasFound = 1;
				SetPlayerFactionBadge(id, strval(inputtext));
				SCFM(id, 0xD0D0D0FF, "> %s ti zmenil èíslo odznaku na %d!", GetPlayerNameEx(playerid, NO_MASK), strval(inputtext));
    			break;
			}

			if(P_wasFound == 0)
			{
			    mysql_format(MYSQL, S_query, 256, "UPDATE char_main SET FactionBadge = '%d' WHERE Username = '%e'", strval(inputtext), Username);
				mysql_query(MYSQL, S_query, false);
			}

			SendSuccess(playerid, "Odznak upravený!");

			ShowPlayerFactionMember(playerid, lastFacMemb[playerid]);
		}
		case did_I_Faction_Members:
	    {
	        if(!response)
	            return ShowPlayerOwnIFaction(playerid);

			if(GetPlayerIllegalFactionRank(playerid) < 8 && GetPlayerAdminLevel(playerid) < 4)
			    return SendError(playerid, "Nemá oprávnenie na úpravu èlena!"), ShowPlayerIFactionMemb(playerid);

			ShowPlayerIFactionMember(playerid, listitem);
	    }
		case did_I_Faction_Member:
	    {
	        if(!response)
	            return ShowPlayerIFactionMemb(playerid);

			if(listitem == 0 || listitem == 1 || listitem == 3)
			    return ShowPlayerIFactionMember(playerid, lastFacMemb[playerid]);
   			else if(listitem == 2)
			{
			    return ShowPlayerDialog(playerid, did_I_Faction_Set_Rank, DIALOG_STYLE_INPUT, "UPRAVI HRÁÈA", "{ffffff}> Zadaj prosím nový rank (1 - 10) tohoto hráèa.", "OK", "SPA");
			}
			else if(listitem == 4)
			{
	       		new
				    S_query[256],
					Cache:C_q;

				mysql_format(MYSQL, S_query, 256, "SELECT * FROM char_main WHERE Illegal_Faction = '%d' ORDER BY Username", GetPlayerIllegalFaction(playerid));
				C_q = mysql_query(MYSQL, S_query);

				new
					Username[25],
					P_wasFound = 0;

				cache_get_value_name(lastFacMemb[playerid], "Username", Username);
				cache_delete(C_q);
				foreach( new id : Player )
			 	{
			  		if(!IsPlayerLogged(id))
						continue;

					if(strcmp(ReturnName(id), Username, false))
			  			continue;

					P_wasFound = 1;
					SetPlayerIllegalFaction(id, 0);

					SCFM(id, 0xD0D0D0FF, "> %s a vyhodil z ilegálnej frakcie!", GetPlayerNameEx(playerid, NO_MASK));

                    if(id != playerid)
						ShowPlayerIFactionMemb(playerid);

	    			break;
				}

				if(P_wasFound == 0)
				{
				    mysql_format(MYSQL, S_query, 256, "UPDATE char_main SET Illegal_Faction = '0', Illegal_FactionRank = '0' WHERE Username = '%e'", Username);
					mysql_query(MYSQL, S_query, false);
				}

				SendSuccess(playerid, "Hráè vyhodený!");

				FormatLog(log_type_player, "%s(%s - %s) vyhodil %s z nelegalnej frackie %s.", ReturnName(playerid), ReturnIP(playerid), ReturnMaster(playerid), Username, i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Name]);
			}
	    }
		case did_I_Faction_Set_Rank:
	    {

	        if(!response)
	            return ShowPlayerIFactionMember(playerid, lastFacMemb[playerid]);

			if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1 || strval(inputtext) > 10)
			    return ShowPlayerDialog(playerid, did_I_Faction_Set_Rank, DIALOG_STYLE_INPUT, "UPRAVI HRÁÈA", "{ffffff}> Zadaj prosím nový rank (1 - 10) tohoto hráèa.", "OK", "SPA");

			if(strval(inputtext) > GetPlayerIllegalFactionRank(playerid) && GetPlayerAdminLevel(playerid) < 4)
			    return SendError(playerid, "Nemôe nastavi väèí rank ako má ty!"), ShowPlayerDialog(playerid, did_I_Faction_Set_Rank, DIALOG_STYLE_INPUT, "UPRAVI HRÁÈA", "{ffffff}> Zadaj prosím nový rank hráèa.", "OK", "SPA");

		    new
			    S_query[256],
				Cache:C_q;

			mysql_format(MYSQL, S_query, 256, "SELECT * FROM char_main WHERE Illegal_Faction = '%d' ORDER BY Username", GetPlayerIllegalFaction(playerid));
			C_q = mysql_query(MYSQL, S_query);

			new
				Username[25],
				P_wasFound = 0;

			cache_get_value_name(lastFacMemb[playerid], "Username", Username);
			cache_delete(C_q);
			foreach( new id : Player )
		 	{
		  		if(!IsPlayerLogged(id))
					continue;

				if(strcmp(ReturnName(id), Username, false))
		  			continue;

				P_wasFound = 1;
				SetPlayerIllegalFactionRank(id, strval(inputtext));
				SCFM(id, 0xD0D0D0FF, "> %s ti zmenil rank na %d!", GetPlayerNameEx(playerid, NO_MASK), strval(inputtext));
    			break;
			}

			if(P_wasFound == 0)
			{
			    mysql_format(MYSQL, S_query, 256, "UPDATE char_main SET Illegal_FactionRank = '%d' WHERE Username = '%e'", strval(inputtext), Username);
				mysql_query(MYSQL, S_query, false);
			}

			SendSuccess(playerid, "Rank upravený!");

			ShowPlayerIFactionMember(playerid, lastFacMemb[playerid]);
		}

		case did_Frakcia_Own_Kasa:
		{

			if(strlen(inputtext) < 1)
			{
			    return ShowPlayerOwnFaction(playerid);
			}

			if(!IsNumeric(inputtext) || strval(inputtext) < 1)
			{
			    SendError(playerid, "Suma nie je validná!");
			    return ShowPlayerFactionCasa(playerid);
			}

			if(!response && GetPlayerFactionRank(playerid) < 10)
			{
			    SendError(playerid, "Nemá oprávnenie vybra peniaze z frakènej kasy!");
			    return ShowPlayerFactionCasa(playerid);
			}
			else if(!response && GetPlayerFactionRank(playerid) > 9)
			{
			    g_I_tempInt[playerid] = (strval(inputtext) * -1);

			    new
			        S_string[256];

				format(S_string, 256, "{FFFFFF}> Chce z kasy vybra {e34f4f}%d${ffffff}.\nSi si istý, e chce túto akciu vykona?",
					strval(inputtext));

				ShowPlayerDialog(playerid, did_Frakcia_Own_KasaC, DIALOG_STYLE_MSGBOX, "FRAKCNA KASA", S_string, "ANO", "NIE");
			}

			if(response)
			{
			    g_I_tempInt[playerid] = strval(inputtext);

			    new
			        S_string[256];

				format(S_string, 256, "{FFFFFF}> Chce do kasy vloi {e34f4f}%d${ffffff}.\nSi si istý, e chce túto akciu vykona?",
					strval(inputtext));

				ShowPlayerDialog(playerid, did_Frakcia_Own_KasaC, DIALOG_STYLE_MSGBOX, "FRAKCNA KASA", S_string, "ANO", "NIE");
			}
		}
		case did_Frakcia_Own_KasaC:
		{
		    if(!response)
		    {
		        return ShowPlayerFactionCasa(playerid);
			}

			if(g_I_tempInt[playerid] < 0)
			{
			    // VYBERÁ PENIAZE
			    
			    if(GetPlayerFactionType(playerid) == FACTION_TYPE_GOV && GetPlayerAdminLevel(playerid) < 6 && GetPlayerFactionRank(playerid) < 10)
			    {
			        SendError(playerid, "Na výber peòazí z tejto kasy potrebuje rank 10!");
				    return ShowPlayerIFactionCasa(playerid);
			    }

			    new
			        I_pocet = (g_I_tempInt[playerid] * -1);

				if(factEnum[GetPlayerFaction(playerid)][fact_Cash] < I_pocet)
				{
				    SendError(playerid, "Tolko peòazí v kase nie je!");
				    return ShowPlayerFactionCasa(playerid);
				}

				factEnum[GetPlayerFaction(playerid)][fact_Cash] -= I_pocet;

				ex_GivePlayerMoney(playerid, I_pocet);
				money_accepted[playerid] += floatround(I_pocet,floatround_round);

				FormatLog(log_type_kasa, "%s(%s) vybral z kasy frakcie %s %d$ (novy zostatok; %d$ | stary zostatok; %d$)!", ReturnName(playerid), ReturnIP(playerid), factEnum[GetPlayerFaction(playerid)][fact_Name], I_pocet, factEnum[GetPlayerFaction(playerid)][fact_Cash], factEnum[GetPlayerFaction(playerid)][fact_Cash]+I_pocet);

                new
				    S_query[256];

				mysql_format(MYSQL, S_query, sizeof(S_query), "UPDATE gm_factions SET Cash = '%d' WHERE ID = '%d'", factEnum[GetPlayerFaction(playerid)][fact_Cash], GetPlayerFaction(playerid));
				mysql_query(MYSQL, S_query, false);

				SCFM(playerid, 0xD0D0D0FF, "> Vybral si z frakènej kasy %d$!", I_pocet);
                return ShowPlayerOwnFaction(playerid);
			}
			else
			{
			    // VKLADÁ PENIAZE

			    new
			        I_pocet = g_I_tempInt[playerid];

				if(ex_GetPlayerMoney(playerid) < I_pocet)
				{
				    SendError(playerid, "Tolko peòazí nemá!");
				    return ShowPlayerFactionCasa(playerid);
				}

				factEnum[GetPlayerFaction(playerid)][fact_Cash] += I_pocet;

				ex_GivePlayerMoney(playerid, -I_pocet);
				money_givenby[playerid] += floatround(I_pocet,floatround_round);

				if(I_pocet > 999) FormatLog(log_type_kasa, "%s(%s) vlozil do kasy frakcie %s %d$ (novy zostatok; %d$ | stary zostatok; %d$)!", ReturnName(playerid), ReturnIP(playerid), factEnum[GetPlayerFaction(playerid)][fact_Name], I_pocet, factEnum[GetPlayerFaction(playerid)][fact_Cash], factEnum[GetPlayerFaction(playerid)][fact_Cash]-I_pocet);

				SCFM(playerid, 0xD0D0D0FF, "> Vloil si do frakènej kasy %d$!", I_pocet);

				new
				    S_query[256];

				mysql_format(MYSQL, S_query, sizeof(S_query), "UPDATE gm_factions SET Cash = '%d' WHERE ID = '%d'", factEnum[GetPlayerFaction(playerid)][fact_Cash], GetPlayerFaction(playerid));
				mysql_query(MYSQL, S_query, false);

                return ShowPlayerOwnFaction(playerid);
			}
		}
	    case did_Frakcia_Own_Vypoved:
	    {
	        if(!response)
	            return ShowPlayerOwnFaction(playerid);

			if(g_I_VypovedUnix[playerid] > 10)
			{

			    new
					price = 5000;

				if(GetPlayerDonatorLevel(playerid) == 0) price = 5000;
				else if(GetPlayerDonatorLevel(playerid) == 1) price = 2500;
				else if(GetPlayerDonatorLevel(playerid) == 2) price = 1200;
				else if(GetPlayerDonatorLevel(playerid) == 3) price = 500;

			    if(ex_GetPlayerMoney(playerid) < price)
			    {
			        SendError(playerid, "Nemá dostatoèný poèet peòazí!");
			        return ShowPlayerOwnFaction(playerid);
			    }
			    ex_GivePlayerMoney(playerid, -price);
			    money_spent[playerid]+=floatround(price,floatround_round);
			    g_I_VypovedUnix[playerid] = 0;
			    SendError(playerid, "Stornoval si výpoveï za poplatok! Nebude prepustený.");
			    FormatLog(log_type_player, "%s(%s) stornoval vypoved z frakcie %s za %d$!", ReturnName(playerid), ReturnIP(playerid), factEnum[GetPlayerFaction(playerid)][fact_Name], price);
			    return ShowPlayerOwnFaction(playerid);
			}
			else
			{

			    new
					hodina = 24,
					unixtime = gettime() + (3600 * 24); // 24 hodin

                if(GetPlayerDonatorLevel(playerid) == 0) hodina = 24, unixtime = gettime() + (3600 * 24); // 24 hodin
				else if(GetPlayerDonatorLevel(playerid) == 1) hodina = 16, unixtime = gettime() + (3600 * 16); // 16 hodin
				else if(GetPlayerDonatorLevel(playerid) == 2) hodina = 8, unixtime = gettime() + (3600 * 8); // 8 hodin
				else if(GetPlayerDonatorLevel(playerid) == 3) hodina = 3, unixtime = gettime() + (3600 * 3); // 3 hodiny

			    g_I_VypovedUnix[playerid] = unixtime;

			    new
			        S_string[144];

				format(S_string, 144, "Podal si výpoveï! Bude prepustený o %d hodín. Výpoveï môe stornova opätovným podaním výpovede.", hodina);
				SendSuccess(playerid, S_string);

				FormatLog(log_type_player, "%s(%s) podal ziadost o vypoved z frakcie %s. Bude prepusteny o %d hodin!", ReturnName(playerid), ReturnIP(playerid), factEnum[GetPlayerFaction(playerid)][fact_Name], hodina);

				return ShowPlayerOwnFaction(playerid);
			}
	    }

	    case did_fine:
	    {
			if(fine_ispaid[playerid] == 1 || !response)
			    return ShowPlayerFines(playerid);

			PayPlayerFine(playerid);
	    }

	    case did_fines:
	    {
	        if(!response)
	            return ShowCityHallMenu(playerid);

			ShowPlayerFineDetail(playerid, listitem);
	    }

	    case did_CityHall:
	    {
	        if(!response)
	            return 0;

			if(listitem == 0)
			{
			    if(ex_GetPlayerMoney(playerid) < 15)
			    {
					SendError(playerid, "Nemá 15$ na vybavenie obèianskeho preukazu!");
			        return ShowCityHallMenu(playerid);
			    }
			    if(GetPlayerInventoryItem(playerid, inv_idCard))
			    {
			        t_ID_Date[playerid][0] = -1;
				    t_ID_Date[playerid][1] = -1;
				    t_ID_Date[playerid][2] = -1;
				    format(t_ID_Place[playerid], 32, "Vybrané ...");
				    t_ID_Settlement[playerid][0] = 0;
			    } else {
			        t_ID_Date[playerid][0] = 0;
				    t_ID_Date[playerid][1] = 0;
				    t_ID_Date[playerid][2] = 0;
				    format(t_ID_Place[playerid], 32, "");
				    t_ID_Settlement[playerid][0] = 0;
			    }
			   	return ShowPlayerIDCreateMenu(playerid);
			}
			else if(listitem == 1)
			{

			    if(GetPlayerInventoryItem(playerid, inv_fishingPermit) > 0)
			    {

					SendError(playerid, "U má rybárske oprávnenie!");

			    }
				else
				{

					if(ex_GetPlayerMoney(playerid) < 700)
					    return SendError(playerid, "Nemá dostatok peòazí!"), ShowCityHallMenu(playerid);

					ex_GivePlayerMoney(playerid, -700);
					money_spent[playerid]+=floatround(700,floatround_round);

					SetPlayerInventoryItem(playerid, inv_fishingPermit, 1);

				    SendSuccess(playerid, "Zakúpil si si rybárske povolenie!");

				}

			    return ShowCityHallMenu(playerid);
			}
			else if(listitem == 2)
			{
				return ShowPlayerFines(playerid);
			}
			else if(listitem == 3)
			{
			    return ShowPlayerDialog(playerid, did_CityHall_veh_1, DIALOG_STYLE_INPUT, "PREPIS VOZIDLA",
					"{ffffff}> Zadaj prosím SPZ vozidla, ktoré chce prepísa!", "ÏALEJ", "ZRUI");
			}
	    }

	    case did_CityHall_veh_1:
	    {
	        if(!response)
	            return ShowCityHallMenu(playerid);

			if(isnull(inputtext))
			    return ShowPlayerDialog(playerid, did_CityHall_veh_1, DIALOG_STYLE_INPUT, "PREPIS VOZIDLA",
					"{ffffff}> Zadaj prosím SPZ vozidla, ktoré chce prepísa!", "ÏALEJ", "ZRUI");

			new
			    vid = -1;

			foreach( new i : Vehicle )
			{
			    if(strcmp(vEnum[i][v_SPZ], inputtext, false))
			        continue;

				if(strcmp(vEnum[i][v_Owner], ReturnName(playerid), false))
				    continue;

				vid = i;
				break;
			}

			if(vid == -1)
			    return
					SendError(playerid, "Vozidlo s touto SPZ neexistuje alebo ho nevlastní! (Nesmie by zaparkované!)"),
					ShowPlayerDialog(playerid, did_CityHall_veh_1, DIALOG_STYLE_INPUT, "PREPIS VOZIDLA",
					"{ffffff}> Zadaj prosím SPZ vozidla, ktoré chce prepísa!", "ÏALEJ", "ZRUI");

			format(prepis_SPZ[playerid], 30, "%s", inputtext);

			ShowPlayerDialog(playerid, did_CityHall_veh_2, DIALOG_STYLE_INPUT, "PREPIS VOZIDLA",
				"{ffffff}> Zadaj prosím ID hráèa, na ktorého chce toto vozidlo prepísa!", "ÏALEJ", "ZRUI");
	    }

	    case did_CityHall_veh_2:
	    {

	        if(!response)
	            return ShowPlayerDialog(playerid, did_CityHall_veh_1, DIALOG_STYLE_INPUT, "PREPIS VOZIDLA",
					"{ffffff}> Zadaj prosím SPZ vozidla, ktoré chce prepísa!", "ÏALEJ", "ZRUI");

			if(isnull(inputtext) || !IsNumeric(inputtext) || playerid == strval(inputtext) || !IsPlayerLogged(strval(inputtext)) )
				return
					SendError(playerid, "Prosím, zadaj ID online hráèa!"),
				    ShowPlayerDialog(playerid, did_CityHall_veh_2, DIALOG_STYLE_INPUT, "PREPIS VOZIDLA",
						"{ffffff}> Zadaj prosím ID hráèa, na ktorého chce toto vozidlo prepísa!", "ÏALEJ", "ZRUI");

	        prepis_ID[playerid] = strval(inputtext);
	        prepis_ID[prepis_ID[playerid]] = playerid;

	        SCFM(playerid, COLOR_GREY, "> Ponuka na prepísanie vozidla %s zaslaná hráèovi %s!", prepis_SPZ[playerid], prepis_ID[playerid]);

	        new
	            Sstring[144];

			format(Sstring, sizeof Sstring, "{ffffff}> %s na teba chce prepísa vozidlo so SPZ %s, súhlasí?", GetPlayerNameEx(playerid, NO_MASK), prepis_SPZ[playerid]);

			ShowPlayerDialog(prepis_ID[playerid], did_CityHall_veh_c, DIALOG_STYLE_INPUT, "PREPIS VOZIDLA",
				Sstring, "ANO", "NIE");
	    }

	    case did_CityHall_veh_c:
	    {
	        if(!response)
			{
			    SCFM(playerid, COLOR_GREY, "> Ponuka na prepis odmietnutá!");
                SCFM(prepis_ID[playerid], COLOR_GREY, "> Ponuka na prepis odmietnutá!");
			    prepis_ID[prepis_ID[playerid]] = -1;
			    format(prepis_SPZ[prepis_ID[playerid]], 30, "");
			    prepis_ID[playerid] = -1;
			    return 1;
			}

	        new
	            vid = -1;

			foreach( new i : Vehicle )
			{
			    if(strcmp(vEnum[i][v_SPZ], prepis_SPZ[prepis_ID[playerid]], false))
			        continue;

				vid=i;
				break;
			}

			if(vid == -1)
			{
			    SCFM(playerid, COLOR_GREY, "> Ponuka na prepis odmietnutá!");
                SCFM(prepis_ID[playerid], COLOR_GREY, "> Ponuka na prepis odmietnutá!");
			    prepis_ID[prepis_ID[playerid]] = -1;
			    format(prepis_SPZ[prepis_ID[playerid]], 30, "");
			    prepis_ID[playerid] = -1;
			    return 1;
			}

			format(vEnum[vid][v_Owner], 30, "%s", ReturnName(playerid));

			FormatLog(log_type_other, "%s(%s - %s) prepisal vozidlo %s na hraca %s(%s - %s)", ReturnName(prepis_ID[playerid]), ReturnMaster(prepis_ID[playerid]), ReturnIP(prepis_ID[playerid]), vEnum[vid][v_SPZ], ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid));

			new
			    str[256];

			mysql_format(MYSQL, str, sizeof str, "UPDATE char_vehicles SET Owner = '%e' WHERE SPZ = '%e'", ReturnName(playerid), vEnum[vid][v_SPZ]);
			mysql_query(MYSQL, str, false);

            SCFM(playerid, COLOR_GREY, "> Ponuka na prepis prijatá!");
            SCFM(prepis_ID[playerid], COLOR_GREY, "> Ponuka na prepis prijatá!");

            prepis_ID[prepis_ID[playerid]] = -1;
   			format(prepis_SPZ[prepis_ID[playerid]], 30, "");
		    prepis_ID[playerid] = -1;
	    }

        case did_Frakcie_EditCash:
	    {
	        if(!response)
	            return ShowPlayerEditFactionMenu(playerid, g_I_listItem[playerid]);

			if(!strlen(inputtext) || !IsNumeric(inputtext))
			{
			    SendError(playerid, "Hodnota kasy je neplatná!");
			    new
				    S_string[144];
				format(S_string, 144, "{FFFFFF}> Mení hodnotu kasy frakcie {e34f4f}%s{FFFFFF}.\n\nZadaj prosím novú hodnotu kasy tejto frakcie!\n\n", factEnum[g_I_editFaction[playerid]][fact_Name]);
				return ShowPlayerDialog(playerid, did_Frakcie_EditCash, DIALOG_STYLE_INPUT, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}

			factEnum[g_I_editFaction[playerid]][fact_Cash] = strval(inputtext);

			new
			    S_query[144];

			mysql_format(MYSQL, S_query, sizeof(S_query), "UPDATE gm_factions SET Cash = '%d' WHERE ID = '%d'", strval(inputtext), g_I_editFaction[playerid]);

			new
			    Cache:q = mysql_query(MYSQL, S_query);

			cache_delete(q);

			ShowPlayerEditFactionMenu(playerid, g_I_listItem[playerid]);
	    }
	    case did_I_Frakcie_EditCash:
	    {
	        if(!response)
	            return ShowPlayerEditIFactionMenu(playerid, g_I_listItem[playerid]);

			if(!strlen(inputtext) || !IsNumeric(inputtext))
			{
			    SendError(playerid, "Hodnota kasy je neplatná!");
			    new
				    S_string[144];
				format(S_string, 144, "{FFFFFF}> Mení hodnotu kasy frakcie {e34f4f}%s{FFFFFF}.\n\nZadaj prosím novú hodnotu kasy tejto frakcie!\n\n", i_factEnum[g_I_editFaction[playerid]][ifact_Name]);
				return ShowPlayerDialog(playerid, did_I_Frakcie_EditCash, DIALOG_STYLE_INPUT, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}

			i_factEnum[g_I_editFaction[playerid]][ifact_Cash] = strval(inputtext);

			new
			    S_query[144];

			mysql_format(MYSQL, S_query, sizeof(S_query), "UPDATE gm_ifactions SET Cash = '%d' WHERE ID = '%d'", strval(inputtext), g_I_editFaction[playerid]);

			new
			    Cache:q = mysql_query(MYSQL, S_query);

			cache_delete(q);

			ShowPlayerEditIFactionMenu(playerid, g_I_listItem[playerid]);
	    }
	    case did_Frakcie_EditType:
	    {
	        if(!response)
	            return ShowPlayerEditFactionMenu(playerid, g_I_listItem[playerid]);

			if(!strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 0 || strval(inputtext) >= sizeof(factionTypes))
			{
			    SendError(playerid, "ID typu je neplatné!");
			    new
				    S_string[512],
					S_tempString[64];
				format(S_string, 512, "{FFFFFF}> Mení typ frakcie {e34f4f}%s{FFFFFF}.\n\nZadaj prosím nové ID typu tejto frakcie!\n\n", factEnum[g_I_editFaction[playerid]][fact_Name]);
    			for(new i; i < sizeof(factionTypes); i++)
				{
				    format(S_tempString, 64, "[ID: %d] %s\n", i, factionTypes[i]);
				    strcat(S_string,S_tempString);
				}
				return ShowPlayerDialog(playerid, did_Frakcie_EditType, DIALOG_STYLE_INPUT, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}

			factEnum[g_I_editFaction[playerid]][fact_Type] = strval(inputtext);

			new
			    S_query[128];

			mysql_format(MYSQL, S_query, sizeof(S_query), "UPDATE gm_factions SET Type = '%d' WHERE ID = '%d'", strval(inputtext), g_I_editFaction[playerid]);

			new
			    Cache:q = mysql_query(MYSQL, S_query);

			cache_delete(q);

			ShowPlayerEditFactionMenu(playerid, g_I_listItem[playerid]);
	    }
		case did_Frakcie_EditID:
	    {
	        if(!response)
	            return ShowPlayerEditFactionMenu(playerid, g_I_listItem[playerid]);

			if(!strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1 || strval(inputtext) > MAX_FACTIONS-1 || factEnum[strval(inputtext)][fact_Type] > 0)
			{
			    SendError(playerid, "ID frakcie musí by èíslo a musí by platné, taktie nesmie by zabrané!");
			    new
				    S_string[256];
				format(S_string, 256, "{FFFFFF}> Mení ID frakcie {e34f4f}%s{FFFFFF}.\n\nZadaj prosím nové ID tejto frakcie!", factEnum[g_I_editFaction[playerid]][fact_Name]);
				return ShowPlayerDialog(playerid, did_Frakcie_EditID, DIALOG_STYLE_INPUT, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}

			format(factEnum[strval(inputtext)][fact_Name], 64, factEnum[g_I_editFaction[playerid]][fact_Name]);
			factEnum[strval(inputtext)][fact_Type] = factEnum[g_I_editFaction[playerid]][fact_Type];
			factEnum[strval(inputtext)][fact_Cash] = factEnum[g_I_editFaction[playerid]][fact_Cash];

			format(factEnum[g_I_editFaction[playerid]][fact_Name], 64, "");
			factEnum[g_I_editFaction[playerid]][fact_Type] = 0;
			factEnum[g_I_editFaction[playerid]][fact_Cash] = 0;

			new
			    S_query[144];

			mysql_format(MYSQL, S_query, sizeof(S_query), "UPDATE gm_factions SET ID = '%d' WHERE ID = '%d'", strval(inputtext), g_I_editFaction[playerid]);

			new
			    Cache:q = mysql_query(MYSQL, S_query);

			cache_delete(q);

			g_I_editFaction[playerid] = strval(inputtext);

			ShowPlayerFactionList(playerid);
	    }

	    case did_Frakcie_EditName:
	    {
	        if(!response)
	            return ShowPlayerEditFactionMenu(playerid, g_I_listItem[playerid]);

			if(strlen(inputtext) < 5 || strlen(inputtext) > 60)
			{
			    SendError(playerid, "Meno frakcie musí by minimálne 5 a maximálne 60 znakov dlhé!");
			    new
				    S_string[256];
				format(S_string, 256, "{FFFFFF}> Mení meno frakcie {e34f4f}%s{FFFFFF}.\n\nZadaj prosím nové meno tejto frakcie!\nMôe ma maximálne 60 znakov.", factEnum[g_I_editFaction[playerid]][fact_Name]);
				return ShowPlayerDialog(playerid, did_Frakcie_EditName, DIALOG_STYLE_INPUT, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}

			format(factEnum[g_I_editFaction[playerid]][fact_Name], 64, inputtext);

			new
			    S_query[144];

			mysql_format(MYSQL, S_query, sizeof(S_query), "UPDATE gm_factions SET Name = '%e' WHERE ID = '%d'", inputtext, g_I_editFaction[playerid]);

			new
			    Cache:q = mysql_query(MYSQL, S_query);

			cache_delete(q);

			ShowPlayerEditFactionMenu(playerid, g_I_listItem[playerid]);
	    }
	    case did_Frakcie_EditDel:
	    {
	        if(!response)
	            return ShowPlayerEditFactionMenu(playerid, g_I_listItem[playerid]);

			new
			    S_query[144];

			mysql_format(MYSQL, S_query, sizeof(S_query), "DELETE FROM gm_factions WHERE ID = '%d'", g_I_editFaction[playerid]);

			new
			    Cache:q = mysql_query(MYSQL, S_query);

			cache_delete(q);

			format(factEnum[g_I_editFaction[playerid]][fact_Name], 64, "");
			factEnum[g_I_editFaction[playerid]][fact_Type] = 0;
			factEnum[g_I_editFaction[playerid]][fact_Cash] = 0;

			ShowPlayerFactionList(playerid);
	    }
	    case did_Frakcie_EditEx:
	    {
	        if(!response)
	            return ShowPlayerFactionList(playerid);

			if(listitem == 0)
			{
			    new
				    S_string[256];
				format(S_string, 256, "{FFFFFF}> Mení ID frakcie {e34f4f}%s{FFFFFF}.\n\nZadaj prosím nové ID tejto frakcie!", factEnum[g_I_editFaction[playerid]][fact_Name]);
				return ShowPlayerDialog(playerid, did_Frakcie_EditID, DIALOG_STYLE_INPUT, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}
			else if(listitem == 1)
			{
				new
				    S_string[256];

				format(S_string, 256, "{FFFFFF}> Mení meno frakcie {e34f4f}%s{FFFFFF}.\n\nZadaj prosím nové meno tejto frakcie!\nMôe ma maximálne 60 znakov.", factEnum[g_I_editFaction[playerid]][fact_Name]);

				return ShowPlayerDialog(playerid, did_Frakcie_EditName, DIALOG_STYLE_INPUT, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}
			else if(listitem == 2)
			{
			    new
				    S_string[512],
					S_tempString[64];
				format(S_string, 512, "{FFFFFF}> Mení typ frakcie {e34f4f}%s{FFFFFF}.\n\nZadaj prosím nové ID typu tejto frakcie!\n\n", factEnum[g_I_editFaction[playerid]][fact_Name]);
				for(new i; i < sizeof(factionTypes); i++)
				{
				    format(S_tempString, 64, "[ID: %d] %s\n", i, factionTypes[i]);
				    strcat(S_string,S_tempString);
				}
				return ShowPlayerDialog(playerid, did_Frakcie_EditType, DIALOG_STYLE_INPUT, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}
			else if(listitem == 3)
			{
			    new
				    S_string[144];
				format(S_string, 144, "{FFFFFF}> Mení hodnotu kasy frakcie {e34f4f}%s{FFFFFF}.\n\nZadaj prosím novú hodnotu kasy tejto frakcie!", factEnum[g_I_editFaction[playerid]][fact_Name]);
				return ShowPlayerDialog(playerid, did_Frakcie_EditCash, DIALOG_STYLE_INPUT, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}
			else if(listitem == 4)
			{
			    new
				    S_string[256];
				format(S_string, 256, "{FFFFFF}> Skutoène chce vymaza frakciu {e34f4f}%s{FFFFFF}?!\n\nDobre si to premysli, tento krok je nevratný! Frakcia bude zmazaná z databáze.", factEnum[g_I_editFaction[playerid]][fact_Name]);
				return ShowPlayerDialog(playerid, did_Frakcie_EditDel, DIALOG_STYLE_MSGBOX, "VYMAZA FRAKCIU", S_string, "ANO", "NIE");
			}
	    }

	    case did_Frakcie_Edit:
	    {
	        if(!response)
				return 0;

			if(response && GetPlayerAdminLevel(playerid) < 5)
			    return ShowPlayerFactionList(playerid), SendError(playerid, "Nemôe manipulova s frakciami!");

			ShowPlayerEditFactionMenu(playerid, listitem);
	        return 0;
		}

		case did_I_Frakcie_Edit:
	    {
	        if(!response)
				return 0;

			if(response && GetPlayerAdminLevel(playerid) < 5)
			    return ShowPlayerIllegalFactionList(playerid), SendError(playerid, "Nemôe manipulova s frakciami!");

			ShowPlayerEditIFactionMenu(playerid, listitem);
	        return 0;
		}

		case did_I_Frakcie_EditEx:
	    {
	        if(!response)
	            return ShowPlayerIllegalFactionList(playerid);

			if(listitem == 0)
			{
			    new
				    S_string[256];
				format(S_string, 256, "{FFFFFF}> Mení ID frakcie {e34f4f}%s{FFFFFF}.\n\nZadaj prosím nové ID tejto frakcie!", i_factEnum[g_I_editFaction[playerid]][ifact_Name]);
				return ShowPlayerDialog(playerid, did_I_Frakcie_EditID, DIALOG_STYLE_INPUT, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}
			else if(listitem == 1)
			{
				new
				    S_string[256];

				format(S_string, 256, "{FFFFFF}> Mení meno frakcie {e34f4f}%s{FFFFFF}.\n\nZadaj prosím nové meno tejto frakcie!\nMôe ma maximálne 60 znakov.", i_factEnum[g_I_editFaction[playerid]][ifact_Name]);

				return ShowPlayerDialog(playerid, did_I_Frakcie_EditName, DIALOG_STYLE_INPUT, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}
			else if(listitem == 2)
			{
			    new
				    S_string[144];

				format(S_string, 144, "{ee5555} {ffffff}Kupovanie semienok marihuany: %s\n{ee5555} {ffffff}Dovoz zbraní: %s\n{ee5555} {ffffff}Sprejovanie: %s",
					retBoolStringFromInt(i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Drug_Marijuana]),
					retBoolStringFromInt(i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Guns]),
					retBoolStringFromInt(i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Graffitis]));

				return ShowPlayerDialog(playerid, did_I_Frakcie_EditPerms, DIALOG_STYLE_LIST, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}
			else if(listitem == 3)
			{
			    new
				    S_string[144];
				format(S_string, 144, "{FFFFFF}> Mení hodnotu kasy frakcie {e34f4f}%s{FFFFFF}.\n\nZadaj prosím novú hodnotu kasy tejto frakcie!\n\n", i_factEnum[g_I_editFaction[playerid]][ifact_Name]);
				return ShowPlayerDialog(playerid, did_I_Frakcie_EditCash, DIALOG_STYLE_INPUT, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}
			else if(listitem == 4)
			{
			    new
				    S_string[144];
				format(S_string, 144, "{FFFFFF}> Skutoène chce vymaza frakciu {e34f4f}%s{FFFFFF}?!\n\nDobre si to premysli, tento krok je nevratný! Frakcia bude zmazaná z databáze.", i_factEnum[g_I_editFaction[playerid]][ifact_Name]);
				return ShowPlayerDialog(playerid, did_I_Frakcie_EditDel, DIALOG_STYLE_MSGBOX, "VYMAZA FRAKCIU", S_string, "ANO", "NIE");
			}
	    }

	    case did_I_Frakcie_EditPerms:
	    {
	        if(!response)
	            return ShowPlayerEditIFactionMenu(playerid, g_I_listItem[playerid]);

			if(listitem == 0)
			    i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Drug_Marijuana] = !i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Drug_Marijuana];

			else if(listitem == 1)
			    i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Guns] = !i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Guns];
			else if(listitem == 2)
			    i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Graffitis] = !i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Graffitis];

            new
		    	S_string[256];

			mysql_format(MYSQL, S_string, 1024, "UPDATE gm_ifactions SET Perm_Drug_Marijuana = '%d', Perm_Guns = '%d', Perm_Graffitis = '%d' WHERE ID = '%d'",
			    i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Drug_Marijuana],
				i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Guns],
				i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Graffitis],
				g_I_editFaction[playerid]);

			mysql_query(MYSQL, S_string, false);

			format(S_string, 256, "{ee5555} {ffffff}Kupovanie semienok marihuany: %s\n{ee5555} {ffffff}Dovoz zbraní: %s\n{ee5555} {ffffff}Sprejovanie: %s",
					retBoolStringFromInt(i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Drug_Marijuana]),
					retBoolStringFromInt(i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Guns]),
					retBoolStringFromInt(i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Graffitis]));

			return ShowPlayerDialog(playerid, did_I_Frakcie_EditPerms, DIALOG_STYLE_LIST, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
	    }

	    case did_I_Frakcie_EditID:
	    {
	        if(!response)
	            return ShowPlayerEditIFactionMenu(playerid, g_I_listItem[playerid]);

			if(!strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1 || strval(inputtext) > MAX_ILLEGAL_FACTIONS-1 || strlen(i_factEnum[strval(inputtext)][ifact_Name]) > 3)
			{
			    SendError(playerid, "ID frakcie musí by èíslo a musí by platné, taktie nesmie by zabrané!");
			    new
				    S_string[256];
				format(S_string, 256, "{FFFFFF}> Mení ID frakcie {e34f4f}%s{FFFFFF}.\n\nZadaj prosím nové ID tejto frakcie!", i_factEnum[g_I_editFaction[playerid]][ifact_Name]);
				return ShowPlayerDialog(playerid, did_I_Frakcie_EditID, DIALOG_STYLE_INPUT, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}

			format(i_factEnum[strval(inputtext)][ifact_Name], 64, i_factEnum[g_I_editFaction[playerid]][ifact_Name]);
			i_factEnum[strval(inputtext)][ifact_Perm_Drug_Marijuana] = i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Drug_Marijuana];
			i_factEnum[strval(inputtext)][ifact_Perm_Guns] = i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Guns];
			i_factEnum[strval(inputtext)][ifact_Perm_Graffitis] = i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Graffitis];
			i_factEnum[strval(inputtext)][ifact_Chat] = i_factEnum[g_I_editFaction[playerid]][ifact_Chat];
			i_factEnum[strval(inputtext)][ifact_Cash] = i_factEnum[g_I_editFaction[playerid]][ifact_Cash];

			format(i_factEnum[g_I_editFaction[playerid]][ifact_Name], 64, "");
			i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Drug_Marijuana] = 0;
			i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Guns] = 0;
			i_factEnum[g_I_editFaction[playerid]][ifact_Perm_Graffitis] = 0;
			i_factEnum[g_I_editFaction[playerid]][ifact_Chat] = 0;
			i_factEnum[g_I_editFaction[playerid]][ifact_Cash] = 0;

			new
			    S_query[144];

			mysql_format(MYSQL, S_query, sizeof(S_query), "UPDATE gm_ifactions SET ID = '%d' WHERE ID = '%d'", strval(inputtext), g_I_editFaction[playerid]);

			new
			    Cache:q = mysql_query(MYSQL, S_query);

			cache_delete(q);

			g_I_editFaction[playerid] = strval(inputtext);

			ShowPlayerIllegalFactionList(playerid);
	    }

	    case did_I_Frakcie_EditName:
	    {
	        if(!response)
	            return ShowPlayerEditIFactionMenu(playerid, g_I_listItem[playerid]);

			if(strlen(inputtext) < 5 || strlen(inputtext) > 60)
			{
			    SendError(playerid, "Meno frakcie musí by minimálne 5 a maximálne 60 znakov dlhé!");
			    new
				    S_string[256];
				format(S_string, 256, "{FFFFFF}> Mení meno frakcie {e34f4f}%s{FFFFFF}.\n\nZadaj prosím nové meno tejto frakcie!\nMôe ma maximálne 60 znakov.", i_factEnum[g_I_editFaction[playerid]][ifact_Name]);
				return ShowPlayerDialog(playerid, did_I_Frakcie_EditName, DIALOG_STYLE_INPUT, "UPRAVI FRAKCIU", S_string, "OK", "SPA");
			}

			format(i_factEnum[g_I_editFaction[playerid]][ifact_Name], 64, inputtext);

			new
			    S_query[144];

			mysql_format(MYSQL, S_query, sizeof(S_query), "UPDATE gm_ifactions SET Name = '%e' WHERE ID = '%d'", inputtext, g_I_editFaction[playerid]);

			new
			    Cache:q = mysql_query(MYSQL, S_query);

			cache_delete(q);

			ShowPlayerEditIFactionMenu(playerid, g_I_listItem[playerid]);
	    }
	    case did_I_Frakcie_EditDel:
	    {
	        if(!response)
	            return ShowPlayerEditIFactionMenu(playerid, g_I_listItem[playerid]);

			new
			    S_query[144];

			mysql_format(MYSQL, S_query, sizeof(S_query), "DELETE FROM gm_ifactions WHERE ID = '%d'", g_I_editFaction[playerid]);

			new
			    Cache:q = mysql_query(MYSQL, S_query);

			cache_delete(q);

			format(i_factEnum[g_I_editFaction[playerid]][ifact_Name], 64, "");

			ShowPlayerIllegalFactionList(playerid);
	    }

	    case did_ServerStats:
	    {
	        return 0;
	    }
	    case did_Login:
	    {

	        if(!response)
				return ex_KickPlayer(playerid, KICK_TYPE_SYSTEM, "Nabudúce sa prihlás.");

			if(!strlen(inputtext))
	            return WrongPassword(playerid);

			new S_query[144];
			mysql_format(MYSQL, S_query, 144,
				"SELECT * FROM master_accounts WHERE Username = '%e' AND Password = md5('%e')",
			    ReturnName(playerid), inputtext);

			mysql_tquery(MYSQL, S_query, "OnPlayerLogin_CheckPassword", "i", playerid);
	    }
	}

	return 0;

}

function timer_ClickMap(playerid)
{

    TogglePlayerControllable(playerid, 1);

    return;

}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{

    if(GetPlayerAdminLevel(playerid) > 2)
    {
        CA_FindZ_For2DCoord(fX, fY, fZ);

        if(!IsPlayerInAnyVehicle(playerid))
        {
        	SetPlayerPos(playerid, fX, fY, fZ + 0.4);
        }
        else
        {
            SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ + 0.4);
        }

        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerInterior(playerid, 0);
        TogglePlayerControllable(playerid, 0);
        SetTimerEx("timer_ClickMap", 800, false, "i", playerid);
    }

    return 1;
}

public OnPlayerMenuStoreAdd(playerid, item, quantity, type)
{

    if(ms_playerStoreId[playerid] == storeid_ammu)
	{
	    if(type == ITEM_TYPE_WEAPON)
	    {
	        new
			 	lSlot = ac_GetWeaponSlot(item),
				lOld = playerEmptyGuns[playerid][lSlot];

			if(lOld > 0)
			{
			    SendClientMessage(playerid, MS_COLOR_SYSTEM_ERROR, "[obchod]: {FFFFFF}U má v inventári prázdnu zbraò rovnakého typu!");
			    return 0;
			}
	    }
	    if(type != ITEM_TYPE_INVENTORY && GetPlayerInventoryItem(playerid, inv_zbrojnyPreukaz) == 0 && item != 46)
	    {
	        SendClientMessage(playerid, MS_COLOR_SYSTEM_ERROR, "[obchod]: {FFFFFF}Nemôe si kúpi vestu ani zbrane, ak nemá zbrojný preukaz!");
	        return 0;
     	}
	}
	else if(ms_playerStoreId[playerid] == storeid_anawalt)
	{
	    if(type == ITEM_TYPE_INVENTORY && GetPlayerInventoryItem(playerid, inv_tree_sadenica) >= 10 && item == _:inv_tree_sadenica)
	    {
	        SendClientMessage(playerid, MS_COLOR_SYSTEM_ERROR, "[obchod]: {FFFFFF}Nemôe ma naraz viac ako 10 sadeníc!");
	        return 0;
     	}
	}

	return 1;

}

public OnPlayerMenuStoreBuy(playerid, item, quantity, type, count, price, object)
{

    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    return SendError(playerid, "Tento biznis ma prazdny sklad!");

    DecrBizTovar(GetPlayerBusiness(playerid));

	if(type == 0)
	{
	    new origin[128], bid = GetPlayerBusiness(playerid);
		if(bid != -1) format(origin,128,"Ammu Nation %s (%s)", businessEnum[bid][bz_Name], GetPlayerNameEx(playerid, NO_MASK));
		else format(origin,128,"Ammu Nation Neznamy (%s)", GetPlayerNameEx(playerid, NO_MASK));
        EmptyGuns::GiveGun(playerid, item, false, item, Weapons::generateSerialNumber(playerid, true, false), 0, 1, origin);
        SCError(playerid, "Prázdnu zbraò %s nájde v /myguns.", GetWeaponNameEx(item));
        FormatWeaponLog(playerid, "[give] Kupil %s nabojmi v AMMU-NATION.", GetWeaponNameEx(item));
	}
	else if(type == 4)
	{
        new origin[128], bid = GetPlayerBusiness(playerid);
		if(bid != -1) format(origin,128,"Ammu Nation %s (%s)", businessEnum[bid][bz_Name], GetPlayerNameEx(playerid, NO_MASK));
		else format(origin,128,"Ammu Nation Neznamy (%s)", GetPlayerNameEx(playerid, NO_MASK));
		Weapons::GivePlayerNewWeapon(playerid, item, quantity, false,true,origin,true);
				
        FormatWeaponLog(playerid, "[give] Kupil %s s %d nabojmi v AMMU-NATION.", GetWeaponNameEx(item), quantity);
	}
	else if(type == 1)
	{

	    if(item == _:inv_kanister)
	    {
	        kanisterType[playerid] = quantity;
			SetPlayerInventoryItem(playerid, inv_kanister, 5);
	    }
		else if(item == _:5000)
	    {
	        drug_givePlayerDrug(playerid, 3, quantity*count);
	    }
	    else
	    	SetPlayerInventoryItem(playerid, item, GetPlayerInventoryItem(playerid, item) + (quantity*count));
	}
	else if(type == 2)
	{
	    ahac_SetPlayerArmour(playerid, item);
	}
	else if(type == 3)
	{
	    for(new x; x < count; x++)
	    {
		    if(Alcohol::Give(playerid, alcoholItems[item], quantity, alcoholPercentage[item], object) == 0)
		    {
		        SCFM(playerid, 0xf63f3fFF, "[obchod]: {FFFFFF}Nemá volný slot na f¾au alkoholu %s!", alcoholItems[item]);
		        return 0;
			}
		}
	}

	if(item == _:inv_simcard)
	{
	    ShowPlayerDialog(playerid, did_kupit_sim_kartu, DIALOG_STYLE_LIST, "VYBER SI",
     		"Chcem pouíva kredit\nChcem strhávanie z výplaty",
       		"VYBRA", "SPA"
		);
	}

    if(ms_playerStoreId[playerid] == storeid_anawalt)
    {
        ex_GivePlayerMoney(playerid, -price);
		money_spent[playerid]+=floatround(price,floatround_round);
        for(new f; f < MAX_FACTIONS; f++)
	 	{
	  		if(strlen(factEnum[f][fact_Name]) < 3) continue;
		    if(factEnum[f][fact_Type] == FACTION_TYPE_WOODCUTTER) {
	     		factEnum[f][fact_Cash] += floatround( float(price) / 100 * 75, floatround_round);
	       		break;
		    }
	    }
    }
    else
    {
		ex_GivePlayerMoney(playerid, -price);
		money_spent[playerid]+=floatround(price,floatround_round);
		AddBusinessCash(GetPlayerBusiness(playerid), floatround( float(price) / 100 * 70, floatround_round) );
	}
	
	return 1;
}

func_OnPlayerClickTextDraw(playerid, Text:clickedid)
{

	if(clickedid == Text:INVALID_TEXT_DRAW && Anawalt::isworking[playerid] == true && Anawalt::workid[playerid] == ANAWALT_WORK_TYPE_PLANT)
	{
	    Anawalt::Plant_StopPlanting(playerid);
	}

    if(clickedid == Text:INVALID_TEXT_DRAW && isindealship[playerid] == true)
	{
	    Dealership::Close(playerid);
	    return 1;
	}
	
	if(clickedid == Text:INVALID_TEXT_DRAW && Tutorial::ison[playerid] == true)
	{
	    Tutorial::TurnOff(playerid);
	    return 1;
	}

	if(clickedid == Text:INVALID_TEXT_DRAW && Character::isincreation[playerid] && Character::noresponse[playerid]==false)
	{
	    if(CharacterCreate::actor[playerid] != -1)
	    {
	        DestroyDynamicActor(CharacterCreate::actor[playerid]);
	        CharacterCreate::actor[playerid] = -1;
	    }
	
	    CharacterCreate::DestroyTextdraws(playerid);
	    
	    Character::isincreation[playerid] = false;
	    
	    Character::ShowSelection(playerid);
	    return 1;
	}

	if(clickedid == Text:INVALID_TEXT_DRAW && Character::isinselection[playerid] && Character::noresponse[playerid]==false)
	{
	    return ex_KickPlayer(playerid, KICK_TYPE_SYSTEM, "Nabudúce sa prihlás.");
	}

    if(clickedid == Text:INVALID_TEXT_DRAW && isInLottery[playerid] == true)
	{
	    if(lotterio_IsDone[playerid])
	    {
	        isInLottery[playerid] 		= false;
    		lotterio_IsDone[playerid] 	= false;

    		PlayerTextDrawDestroy(playerid, lotterio_TD[playerid][0]);
    		PlayerTextDrawDestroy(playerid, lotterio_TD[playerid][1]);
    		PlayerTextDrawDestroy(playerid, lotterio_TD[playerid][2]);
    		PlayerTextDrawDestroy(playerid, lotterio_TD[playerid][3]);

    		TogglePlayerControllable(playerid, 1);

    		EnterInfo(playerid, "_", 10, 1);
	    }
	    else
	    {
	        SelectTextDraw(playerid, 0xC0C0C0FF);
	    }
	}

    if(clickedid == Text:INVALID_TEXT_DRAW && phone_IsOut[playerid])
    {
		EnterInfo(playerid, "~w~Kurzor mozes znova obnovit prikazom ~b~/pc~w~!");
		return 1;
    }

	if(clickedid == Text:INVALID_TEXT_DRAW)
	{

	    if(isUsingATM[playerid] == true)
		{
            isUsingATM[playerid] = false;
            TogglePlayerControllable(playerid, 1);
            SetCameraBehindPlayer(playerid);

            PlayerTextDrawHide(playerid, ATM_TD_main0[playerid]);
			PlayerTextDrawHide(playerid, ATM_TD_main1[playerid]);
			PlayerTextDrawHide(playerid, ATM_TD_main2[playerid]);
			PlayerTextDrawHide(playerid, ATM_TD_main3[playerid]);
			PlayerTextDrawHide(playerid, ATM_TD_main4[playerid]);
			PlayerTextDrawHide(playerid, ATM_TD_main5[playerid]);

			PlayerTextDrawHide(playerid, ATM_TD_login6[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login7[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login8[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login9[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login10[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login11[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login12[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login13[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login14[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login15[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login16[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login17[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login18[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login19[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login20[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login21[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login22[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login23[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login24[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login25[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login26[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login27[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login28[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login29[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login30[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login31[playerid]);

		    PlayerTextDrawHide(playerid, ATM_TD_menu6[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_menu7[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_menu8[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_menu9[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_menu10[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_menu11[playerid]);

		    return 1;
		}

		// Zatvoríme skin shop
	    PlayerTextDrawHide(playerid, TD_skinShop0[playerid]);
		PlayerTextDrawHide(playerid, TD_skinShop1[playerid]);
		PlayerTextDrawHide(playerid, TD_skinShop2[playerid]);
		PlayerTextDrawHide(playerid, TD_skinShop3[playerid]);
		PlayerTextDrawHide(playerid, TD_skinShop4[playerid]);
		PlayerTextDrawHide(playerid, TD_skinShop5[playerid]);
		PlayerTextDrawHide(playerid, TD_skinShop6[playerid]);

		// Zatvoríme car shop
		PlayerTextDrawHide(playerid, TD_carShop0[playerid]);
		PlayerTextDrawHide(playerid, TD_carShop1[playerid]);
		PlayerTextDrawHide(playerid, TD_carShop2[playerid]);
		PlayerTextDrawHide(playerid, TD_carShop3[playerid]);
		PlayerTextDrawHide(playerid, TD_carShop4[playerid]);
		PlayerTextDrawHide(playerid, TD_carShop5[playerid]);
		PlayerTextDrawHide(playerid, TD_carShop6[playerid]);
		PlayerTextDrawHide(playerid, TD_carShop7[playerid]);
		PlayerTextDrawHide(playerid, TD_carShop8[playerid]);
		PlayerTextDrawHide(playerid, TD_carShop9[playerid]);
	}
	return 1;
}

ATMTextDrawCheck(playerid, PlayerText:i)
{

	if(isUsingDialog[playerid] == true)
	    return 0;

	new
	    addToStr = 0,
	    addToStr_Char,

		reset = 0,

		login = 0,

		zostatok = 0,
		vyber = 0,
		pin = 0;

	if(i == ATM_TD_login21[playerid])
	{
	    addToStr = 1;
	    addToStr_Char = '1';
	}
	else if(i == ATM_TD_login22[playerid])
	{
	    addToStr = 1;
	    addToStr_Char = '2';
	}
	else if(i == ATM_TD_login23[playerid])
	{
	    addToStr = 1;
	    addToStr_Char = '3';
	}
	else if(i == ATM_TD_login24[playerid])
	{
	    addToStr = 1;
	    addToStr_Char = '4';
	}
	else if(i == ATM_TD_login25[playerid])
	{
	    addToStr = 1;
	    addToStr_Char = '5';
	}
	else if(i == ATM_TD_login26[playerid])
	{
	    addToStr = 1;
	    addToStr_Char = '6';
	}
	else if(i == ATM_TD_login27[playerid])
	{
	    addToStr = 1;
	    addToStr_Char = '7';
	}
	else if(i == ATM_TD_login28[playerid])
	{
	    addToStr = 1;
	    addToStr_Char = '8';
	}
	else if(i == ATM_TD_login29[playerid])
	{
	    addToStr = 1;
	    addToStr_Char = '9';
	}
	else if(i == ATM_TD_login30[playerid])
	{
	    addToStr = 1;
	    addToStr_Char = '0';
	}
	else if(i == ATM_TD_login31[playerid])
	{
	    reset = 1;
	}
	else if(i == ATM_TD_login9[playerid])
	{
	    login = 1;
	}
	else if(i == ATM_TD_menu8[playerid])
	{
	    zostatok = 1;
	}
	else if(i == ATM_TD_menu9[playerid])
	{
	    vyber = 1;
	}
	else if(i == ATM_TD_menu11[playerid])
	{
	    pin = 1;
	}

	// JADRO

	if(addToStr == 1)
	{
	    if(strlen(atm_PIN[playerid]) >= 4)
	        return 0;

		if(atm_PIN[playerid][0] == ' ')
		    atm_PIN[playerid][0] = EOS;

		new
		    str[2];

		format(str, 2, "%c", addToStr_Char);

		strins(atm_PIN[playerid], str, strlen(atm_PIN[playerid]));

		PlayerTextDrawSetString(playerid, ATM_TD_login8[playerid], atm_PIN[playerid]);
		PlayerTextDrawShow(playerid, ATM_TD_login8[playerid]);
	}

	if(reset == 1)
	{
	    format(atm_PIN[playerid], 5, " ");
	    PlayerTextDrawSetString(playerid, ATM_TD_login8[playerid], atm_PIN[playerid]);
	    PlayerTextDrawShow(playerid, ATM_TD_login8[playerid]);
	}

	if(zostatok == 1)
	{
	    new query[128];
	    mysql_format(MYSQL, query, 1024, "SELECT * FROM gm_bankaccs WHERE AccID = '%d'",
			GetPlayerInventoryItem(playerid, inv_creditCard));

		new Cache:c = mysql_query(MYSQL, query);

		new
		    Float:Cash;

        cache_get_value_name_float(0, "Cash", Cash);

		format(query, sizeof query, "{ffffff}> Zostatok na úète je {e34f4f}%.2f${ffffff}.", Cash);

		isUsingDialog[playerid] = true;

		ShowPlayerDialog(playerid, did_atm_zostatok, DIALOG_STYLE_MSGBOX, "ATM", query, "OK", "");

		cache_delete(c);
	}

	if(vyber == 1)
	{
		new query[128];
	    mysql_format(MYSQL, query, 128, "SELECT * FROM gm_bankaccs WHERE AccID = '%d'",
			GetPlayerInventoryItem(playerid, inv_creditCard));

		new Cache:c = mysql_query(MYSQL, query);

		new
		    Float:Cash;

        cache_get_value_name_float(0, "Cash", Cash);

        isUsingDialog[playerid] = true;

		format(query, sizeof query, "{ffffff}> Zostatok na úète je {e34f4f}%.2f${ffffff}.\n\nKo¾ko dolárov chce vybra?", Cash);

		ShowPlayerDialog(playerid, did_atm_vyber, DIALOG_STYLE_INPUT, "ATM", query, "VYBRA", "SPA");

		cache_delete(c);
	}

	if(pin == 1)
	{
		isUsingDialog[playerid] = true;

		ShowPlayerDialog(playerid, did_atm_pin, DIALOG_STYLE_INPUT, "ATM", "{ffffff}> Aký chce nový PIN kód?", "VYBRA", "SPA");
	}

	if(login == 1)
	{
	    new
	        query[144];

		mysql_format(MYSQL, query, 144, "SELECT * FROM gm_bankaccs WHERE AccID = '%d' AND PIN = '%d'",
			GetPlayerInventoryItem(playerid, inv_creditCard), strval(atm_PIN[playerid]));

		new Cache:ce = mysql_query(MYSQL, query);

		format(atm_PIN[playerid], 5, " ");

		if(cache_num_rows() < 1)
		{
		    cache_delete(ce);
		    PlayerTextDrawSetString(playerid, ATM_TD_main5[playerid], "> Zadali ste nespravny PIN kod, skuste to znova!");
		    PlayerTextDrawShow(playerid, ATM_TD_main5[playerid]);

		    PlayerTextDrawSetString(playerid, ATM_TD_login8[playerid], atm_PIN[playerid]);
			PlayerTextDrawShow(playerid, ATM_TD_login8[playerid]);
		}
		else
		{
		    cache_delete(ce);

		    PlayerTextDrawHide(playerid, ATM_TD_login6[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login7[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login8[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login9[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login10[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login11[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login12[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login13[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login14[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login15[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login16[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login17[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login18[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login19[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login20[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login21[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login22[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login23[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login24[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login25[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login26[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login27[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login28[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login29[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login30[playerid]);
		    PlayerTextDrawHide(playerid, ATM_TD_login31[playerid]);

		    PlayerTextDrawSetString(playerid, ATM_TD_main5[playerid], "> Prihlasenie bolo uspesne, vyberte si, co mate na mysli!");

		    PlayerTextDrawShow(playerid, ATM_TD_menu6[playerid]);
			PlayerTextDrawShow(playerid, ATM_TD_menu7[playerid]);
			PlayerTextDrawShow(playerid, ATM_TD_menu8[playerid]);
			PlayerTextDrawShow(playerid, ATM_TD_menu9[playerid]);
			PlayerTextDrawShow(playerid, ATM_TD_menu10[playerid]);
			PlayerTextDrawShow(playerid, ATM_TD_menu11[playerid]);

			PlayerTextDrawShow(playerid, ATM_TD_main5[playerid]);
		}

	}

	return 1;
}

function phonetimer_DisableTryRingtone(playerid)
{
	PlayerPlaySound(playerid, 1, 0, 0, 0);
	PlayerPlaySound(playerid, 0, 0, 0, 0);
	return 1;
}

phone_proceedTile(playerid, tileId)
{

    if( phone_Screen[playerid] == 0 )
	{
		switch(tileId)
		{
		    case 0:
		    {
		        // Dial number
		        return ShowPlayerPhoneDial(playerid);
		    }

		    case 1:
		    {
		        // Messages

		        phone_Screen[playerid] 			= 1;
			    phone_SelectedTile[playerid] 	= 0;

			    phone_refreshTextdraw(playerid);
		    }

		    case 2:
		    {
		        // Contacts
		        return ShowPlayerPhoneContacts(playerid);
		    }

		    case 3:
		    {
		        // Options

		        phone_Screen[playerid] 			= 2;
			    phone_SelectedTile[playerid] 	= 0;

			    phone_refreshTextdraw(playerid);
		    }

		    case 4:
		    {
		        // Turn off
		        ph_TurnedOff[playerid] = true;

		        phone_refreshTextdraw(playerid);
		    }
		}
	}
	else if( phone_Screen[playerid] == 1 )
	{
	    switch(tileId)
	    {
	        case 0:
	        {
	            // New message
	            return ShowPlayerPhoneSendMsg(playerid);
	        }

	        case 1:
	        {
	            // Past messages
	            return ShowPlayerPhoneMessages(playerid);
	        }
	    }
	}
	else if( phone_Screen[playerid] == 2 )
	{
	    switch(tileId)
	    {
	        case 0:
	        {
	            // Sleep mode
	            phone_SleepMode[playerid] = !phone_SleepMode[playerid];
	            phone_refreshTextdraw(playerid);
	        }

         	/*case 1:
	        {
	            // Ringtone

	            phone_Ringtone[playerid] ++;
		        if(phone_Ringtone[playerid] >= sizeof(A_ringtones))
		            phone_Ringtone[playerid] = 0;

				PlayerPlaySound(playerid, strval(A_ringtones[phone_Ringtone[playerid]][0]), 0, 0, 0);

				SetTimerEx("phonetimer_DisableTryRingtone", false, 2500, "i", playerid);

		        phone_refreshTextdraw(playerid);
	        }*/

	        case 1:
	        {
	            // Background screen

		        phone_BackgroundScreen[playerid] ++;
		        if(phone_BackgroundScreen[playerid] >= sizeof(A_backgroundSprites))
		            phone_BackgroundScreen[playerid] = 0;

		        phone_refreshTextdraw(playerid);
	        }

	        case 2:
	        {
	            // Your phone number
		        SCFM(playerid, 0xD0D0D0FF, "> Tvoje telefónne èíslo je %d!", phone_getPlayerNumber(playerid));
	        }

	        case 3:
	        {
	            // Credits
		        SCFM(playerid, 0xD0D0D0FF, "> © Pear® - xOS 1.151.22R1, 2017!", phone_getPlayerNumber(playerid));
	        }
	    }
	}

	return 1;

}

phone_clickFunction(playerid, PlayerText:playertextid)
{

	// SELECT BUTTON
	if(playertextid == PTD_phone_MAIN[playerid][7])
	{

        if(phone_isPhoneTurnedOff(playerid))
	    {

	        ph_TurnedOff[playerid] = false;
	        phone_refreshTextdraw(playerid);
	        return 1;

	    }

	    return phone_proceedTile(playerid, phone_SelectedTile[playerid]);

	}

	// BACK BUTTON
	if(playertextid == PTD_phone_MAIN[playerid][8])
	{

	    if(phone_isPhoneTurnedOff(playerid))
	    {

	        ph_TurnedOff[playerid] = false;
	        phone_refreshTextdraw(playerid);
	        return 1;

	    }

	    if(phone_Screen[playerid] == 0)
	    {
		    for(new x; x < 27; x++)
			    PlayerTextDrawHide(playerid, PTD_phone_MAIN[playerid][x]),
			    PlayerTextDrawDestroy(playerid, PTD_phone_MAIN[playerid][x]);

			for(new x; x < 5; x++)
	  			PlayerTextDrawHide(playerid, PTD_phone_MENU[playerid][x]),
	  			PlayerTextDrawDestroy(playerid, PTD_phone_MENU[playerid][x]);

			for(new x; x < 2; x++)
	  			PlayerTextDrawHide(playerid, PTD_phone_MESSAGES[playerid][x]),
	  			PlayerTextDrawDestroy(playerid, PTD_phone_MESSAGES[playerid][x]);

			for(new x; x < 4; x++)
	  			PlayerTextDrawHide(playerid, PTD_phone_OPTIONS[playerid][x]),
	  			PlayerTextDrawDestroy(playerid, PTD_phone_OPTIONS[playerid][x]);

            for(new x; x < 3; x++)
  				PlayerTextDrawHide(playerid, PTD_phone_EXTRA[playerid][x]),
  				PlayerTextDrawDestroy(playerid, PTD_phone_EXTRA[playerid][x]);

			phone_SelectedTile[playerid] 	= 0;
	  		phone_Screen[playerid] 			= 0;
	    	phone_IsOut[playerid] 			= false;

	    	CancelSelectTextDraw(playerid);

		}
		else
		{

		    phone_Screen[playerid] = 0;
		    phone_refreshTextdraw(playerid);

		}
		return 1;
	}

	// MAIN SCREEN
	if( phone_Screen[playerid] == 0 )
	{
	    if(playertextid == PTD_phone_MENU[playerid][0])
		{
		    // Dial Number
			if(phone_SelectedTile[playerid] == 0)
	            return phone_proceedTile(playerid, phone_SelectedTile[playerid]);

	        phone_SelectedTile[playerid] = 0;
		}
		else if(playertextid == PTD_phone_MENU[playerid][1])
		{
		    // Messages
		    if(phone_SelectedTile[playerid] == 1)
	           	return phone_proceedTile(playerid, phone_SelectedTile[playerid]);

	        phone_SelectedTile[playerid] = 1;
		}
		else if(playertextid == PTD_phone_MENU[playerid][2])
		{
		    // Contacts
		    if(phone_SelectedTile[playerid] == 2)
	            return phone_proceedTile(playerid, phone_SelectedTile[playerid]);

	        phone_SelectedTile[playerid] = 2;
		}
		else if(playertextid == PTD_phone_MENU[playerid][3])
		{
		    // Options
		    if(phone_SelectedTile[playerid] == 3)
	            return phone_proceedTile(playerid, phone_SelectedTile[playerid]);

	        phone_SelectedTile[playerid] = 3;
		}
		else if(playertextid == PTD_phone_MENU[playerid][4])
		{
		    // Options
		    if(phone_SelectedTile[playerid] == 4)
	            return phone_proceedTile(playerid, phone_SelectedTile[playerid]);

	        phone_SelectedTile[playerid] = 4;
		}
	}
	// MESSAGES
	else if( phone_Screen[playerid] == 1 )
	{
	    if(playertextid == PTD_phone_MESSAGES[playerid][0])
	    {
	        // New message
	        if(phone_SelectedTile[playerid] == 0)
	            return phone_proceedTile(playerid, phone_SelectedTile[playerid]);

	        phone_SelectedTile[playerid] = 0;
	    }
	    else if(playertextid == PTD_phone_MESSAGES[playerid][1])
	    {
	        // Past messages
	        if(phone_SelectedTile[playerid] == 1)
	            return phone_proceedTile(playerid, phone_SelectedTile[playerid]);

	        phone_SelectedTile[playerid] = 1;
	    }
	}
	// OPTIONS
	else if( phone_Screen[playerid] == 2 )
	{
	    if(playertextid == PTD_phone_OPTIONS[playerid][0])
	    {
	        // Sleep mode
	        if(phone_SelectedTile[playerid] == 0)
	            return phone_proceedTile(playerid, phone_SelectedTile[playerid]);

	        phone_SelectedTile[playerid] = 0;
	    }
	    else if(playertextid == PTD_phone_OPTIONS[playerid][1])
	    {
	        // Ringtone
	        if(phone_SelectedTile[playerid] == 1)
	            return phone_proceedTile(playerid, phone_SelectedTile[playerid]);

	        phone_SelectedTile[playerid] = 1;
	    }
	    else if(playertextid == PTD_phone_OPTIONS[playerid][2])
	    {
	        // Background screen
	        if(phone_SelectedTile[playerid] == 2)
	            return phone_proceedTile(playerid, phone_SelectedTile[playerid]);

	        phone_SelectedTile[playerid] = 2;

	    }
	}

	phone_refreshTextdraw(playerid);

	return 1;

}

fun_OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if(playertextid == plant_clickerTD[playerid] && Anawalt::isworking[playerid] == true && Anawalt::workid[playerid] == ANAWALT_WORK_TYPE_PLANT)
	{
	    Anawalt::Plant_OnClick(playerid);
	}

	if(isindealship[playerid] == true && dealshnoresponse[playerid]!=true)
	{
	    if(playertextid == dealershipTD[playerid][3])
	    {
	        //zatvorit
	        Dealership::Close(playerid);
	    }
	    else if(playertextid == dealershipTD[playerid][8])
	    {
	        Dealership::PrevVehicle(playerid);
	    }
	    else if(playertextid == dealershipTD[playerid][9])
	    {
	        Dealership::NextVehicle(playerid);
	    }
	    else if(playertextid == dealershipTD[playerid][16])
	    {
	        Dealership::PrevColor(playerid, 1);
	    }
	    else if(playertextid == dealershipTD[playerid][17])
	    {
	        Dealership::NextColor(playerid, 1);
	    }
	    else if(playertextid == dealershipTD[playerid][20])
	    {
	        Dealership::PrevColor(playerid, 2);
	    }
	    else if(playertextid == dealershipTD[playerid][21])
	    {
	        Dealership::NextColor(playerid, 2);
	    }
	    else if(playertextid == dealershipTD[playerid][23])
	    {
	        Dealership::Proceed(playerid);
	    }
	}
	
	if(Tutorial::ison[playerid] == true)
	{
	    if(playertextid == TUTORIAL_PTD[playerid][3])
	    {
	        new ret = Tutorial::Update(playerid, -1);

	        switch(ret)
	        {
	            case 0:
	                PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);

				case -1:
				{
				    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					SendError(playerid, "Toto je posledná snímka tutoriálu, ak si skonèil, stlaè ESC!");
				}

				case 1:
				    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	        }
	    }
	    
	    else if(playertextid == TUTORIAL_PTD[playerid][4])
	    {
	        new ret = Tutorial::Update(playerid, 1);

	        switch(ret)
	        {
	            case 0:
	                PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);

				case -1:
				{
				    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					SendError(playerid, "Toto je posledná snímka tutoriálu, ak si skonèil, stlaè ESC!");
				}

				case 1:
				    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	        }
	    }
	    
	    else if(playertextid == TUTORIAL_PTD[playerid][5])
	    {
	        Tutorial::TurnOff(playerid);
	    }
	}
    if(isInLottery[playerid] == true)
	{
	    if(playertextid == lotterio_TD[playerid][4])
	    {
	        lotterio_Zotrete[playerid][0] = true;
	        PlayerTextDrawDestroy(playerid, playertextid);

	        new str[3];
	        format(str,3,"%c",lotterio_Characters[playerid][0]);

	        PlayerTextDrawSetString(playerid, lotterio_TD[playerid][1], str);
	    }

	    if(playertextid == lotterio_TD[playerid][5])
	    {
	        lotterio_Zotrete[playerid][1] = true;
	        PlayerTextDrawDestroy(playerid, playertextid);

	        new str[3];
	        format(str,3,"%c",lotterio_Characters[playerid][1]);

	        PlayerTextDrawSetString(playerid, lotterio_TD[playerid][2], str);
	    }

	    if(playertextid == lotterio_TD[playerid][6])
	    {
	        lotterio_Zotrete[playerid][2] = true;
	        PlayerTextDrawDestroy(playerid, playertextid);

	        PlayerTextDrawSetString(playerid, lotterio_TD[playerid][3], lotterio_Characters[playerid][2]);
	    }

	    if(lotterio_Zotrete[playerid][0] == true && lotterio_Zotrete[playerid][1] == true && lotterio_Zotrete[playerid][2] == true)
	    {
			lotterio_IsDone[playerid] 	= true;

			new
			    char1 = lotterio_Characters[playerid][0],
			    char2 = lotterio_Characters[playerid][1],
			    char3 = lotterio_Characters[playerid][2]
			;

			if(char1 == char2 && char2 == char3)
			{
				//winner
				new money = 0,fstr[256];
				switch(char1)
				{
				    case '1':
				    	money = 200;

				    case '2':
				        money = 400;

					case '3':
					    money = 800;

					case '4':
					    money = 1000;

					case '5':
					    money = 5000;

					case '6':
					    money = 10000;

					case '7':
					    money = 20000;
				}

				if(char1 == '7')
				    format(fstr,sizeof fstr,"~w~Gratulujeme! Vyhral si ~b~hlavnu cenu ~w~ktora cini celkovo ~b~20000$~w~!~n~Pre skrytie stlac ESC.");
				else
				    format(fstr,sizeof fstr,"~w~Gratulujeme! Vyhral si a dostal si ~b~%d$~w~ v hotovosti!~n~Pre skrytie stlac ESC.", money);

				EnterInfo(playerid, fstr, 6000000, -1);
				ex_GivePlayerMoney(playerid,money);
				money_admin[playerid]+=floatround(money,floatround_round);
			}
			else
			{
			    //loser
			    EnterInfo(playerid, "~w~Je mi luto, ale tentokrat si ~r~nic nevyhral~w~!~n~Pre skrytie stlac ESC.", 6000000, -1);
			}
	    }
	}

	if(phone_IsOut[playerid] == true)
	{
		return phone_clickFunction(playerid, playertextid);
	}
	
	/// ATM
	if(isUsingATM[playerid] == true)
	{
	    ATMTextDrawCheck(playerid, playertextid);
	}

	// Obchod so skinmi
	if(playertextid == TD_skinShop1[playerid])
 	{
		BuyPlayerActualSkin(playerid);
  	}
	else if(playertextid == TD_skinShop3[playerid])
 	{
		PreviousSkinPage(playerid);
  	}
	else if(playertextid == TD_skinShop4[playerid])
 	{
		NextSkinPage(playerid);
  	}
	else if(playertextid == TD_skinShop5[playerid])
 	{
		CancelSelectTextDraw(playerid);
	}
	return 1;
}

new bool:shouldBeInDA[MAX_PLAYERS];
new DA[MAX_PLAYERS];
new DA_STRING[MAX_PLAYERS][256];

func_OnPlayerUpdate(playerid)
{

    Weapons::checkCheated(playerid);

	if(isSpectating[playerid] == true)
	{
	    if(GetPlayerState(spec_Player[playerid]) == PLAYER_STATE_SPECTATING)
	    {
	        TogglePlayerSpectating(playerid, false);
	    }
	}
	
	if(carDeer[playerid] != -1)
	{
	    if(Deer::GetSpecialAction(carDeer[playerid]) != DEER_SPECIAL_ACTION_SHOT)
		{
		    new Float:mX, Float:mY, Float:X, Float:Y, Float:Z, Float:Angle, Float:dX, Float:dY, Float:dZ;
		    GetVehicleModelInfo(GetVehicleModel(GetPlayerVehicleID(playerid)), VEHICLE_MODEL_INFO_SIZE, mX, mY, mY);
		    GetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
		    GetVehicleZAngle(GetPlayerVehicleID(playerid), Angle);

		    X += mX * floatsin(-Angle, degrees);
		    Y += mX * floatcos(-Angle, degrees);

		    GetDynamicObjectPos(DeerData[carDeer[playerid]][deerenum_ObjectId], dX, dY, dZ);

		    if(GetDistance(dX, dY, dZ, X, Y, Z) < 1.5)
		    {
		    	OnDeerShot(carDeer[playerid], playerid, 1500);
		    }
		}
	}

	if(GetPlayerFightingStyle(playerid) != I_pFightStyle[playerid])
	    SetPlayerFightingStyle(playerid, I_pFightStyle[playerid]);

	if(GetPlayerVirtualWorld(playerid) != 0)
		GangZoneShowForPlayer(playerid, InteriorGangZone, 0x000000FF);
	else
	    GangZoneHideForPlayer(playerid, InteriorGangZone);

	if(shouldBeInDA[playerid])
	{
	    if(!IsPlayerInDynamicArea(playerid, DA[playerid], 0))
	    {
			shouldBeInDA[playerid] = false;
			EnterInfo(playerid, "_", 1, 100);
	    }
	    else
	    {
	        EnterInfo(playerid, DA_STRING[playerid], 1000, 1);
	    }
	}

    if(g_Count[playerid]) {
		if(--g_Count[playerid] == 0) {
			SetPlayerArmedWeapon(playerid, g_Weapon[playerid]);
		}
	}

	if(GetPlayerVirtualWorld(playerid) != 0 && Streamer_GetVisibleItems(STREAMER_TYPE_OBJECT, playerid) != 2000)
	{
	    Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 2000, playerid);
	}
	else if(GetPlayerVirtualWorld(playerid) == 0 && Streamer_GetVisibleItems(STREAMER_TYPE_OBJECT, playerid) != SVO[playerid])
	{
	    Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, SVO[playerid], playerid);
	}

	//START OF VITALS UPDATE

	//IF HAS VITAL TD ENABLED
	if(opt_VitalTd[playerid] != 2 && IsPlayerLogged(playerid) && spawnCheck[playerid] == false)
	{

	    new
			S_string[6],
			Float:F_Health,
			Float:F_HealthAH,
			Float:F_Armour,
			Float:F_ArmourAH,
			Float:F_Hunger;

        ex_GetPlayerHunger(playerid, F_Hunger);
	    format(S_string, 6, "%d", floatround(F_Hunger,floatround_ceil));
	    PlayerTextDrawSetString(playerid, TD_Vitals1[playerid], S_string);

		GetPlayerHealth(playerid, F_Health);
		GetPlayerArmour(playerid, F_Armour);

		ahac_GetPlayerHealth(playerid, F_HealthAH);

		if(F_Health < F_HealthAH && ahac_immunity[playerid] == false)
		{
		    SetPlayerHealth(playerid, F_Health);
		    F_HealthAH = F_Health;
		}

		ahac_GetPlayerArmour(playerid, F_ArmourAH);

		if(F_Armour < F_ArmourAH && ahac_immunity[playerid] == false)
		{
		    SetPlayerArmour(playerid, F_Armour);
		    F_ArmourAH = F_Armour;
		}

	    format(S_string, 6, "%d", floatround(F_HealthAH,floatround_ceil));

	    if(opt_VitalTd[playerid] == 1)
	    {

	        hasSeenTD[playerid] = false;
	        hasSeenTDHN[playerid] = false;
			hasSeenTDAR[playerid] = false;

			PlayerTextDrawHide(playerid, TD_vitals2[playerid][0]);
			PlayerTextDrawHide(playerid, TD_vitals2[playerid][1]);
			PlayerTextDrawHide(playerid, TD_vitals2[playerid][2]);
			PlayerTextDrawHide(playerid, TD_vitals2[playerid][3]);
			PlayerTextDrawHide(playerid, TD_vitals2[playerid][4]);
			PlayerTextDrawHide(playerid, TD_vitals2[playerid][5]);

		    PlayerTextDrawSetString(playerid, TD_Vitals0[playerid], S_string);
		    PlayerTextDrawShow(playerid, TD_Vitals0[playerid]);
		    PlayerTextDrawShow(playerid, TD_Vitals1[playerid]);

		    ShowPlayerProgressBar(playerid, hungerTD[playerid]);

			if(F_Hunger != GetPlayerProgressBarValue(playerid, hungerTD[playerid]))
			{
		        SetPlayerProgressBarValue(playerid, hungerTD[playerid], F_Hunger);
			}

			if(F_ArmourAH > 0.9)
			{
			    format(S_string, 6, "%d", floatround(F_ArmourAH,floatround_ceil));
			    PlayerTextDrawSetString(playerid, TD_Vitals2[playerid], S_string);
			    PlayerTextDrawShow(playerid, TD_Vitals2[playerid]);
			} else PlayerTextDrawHide(playerid, TD_Vitals2[playerid]);
		}
		else if(opt_VitalTd[playerid] == 0)
		{

		    PlayerTextDrawHide(playerid, TD_Vitals0[playerid]);
		    PlayerTextDrawHide(playerid, TD_Vitals1[playerid]);
		    PlayerTextDrawHide(playerid, TD_Vitals2[playerid]);
		    HidePlayerProgressBar(playerid, hungerTD[playerid]);

		    PlayerTextDrawSetString(playerid, TD_vitals2[playerid][3], S_string);
		    PlayerTextDrawShow(playerid, TD_vitals2[playerid][3]);
		    if(hasSeenTD[playerid] != true) PlayerTextDrawShow(playerid, TD_vitals2[playerid][0]);

		    format(S_string, 6, "%d", floatround(F_Hunger,floatround_ceil));
	    	PlayerTextDrawSetString(playerid, TD_vitals2[playerid][4], S_string);
		    PlayerTextDrawShow(playerid, TD_vitals2[playerid][4]);
		    if(hasSeenTDHN[playerid] != true) PlayerTextDrawShow(playerid, TD_vitals2[playerid][1]);

			format(S_string, 6, "%d", floatround(F_ArmourAH,floatround_ceil));
		    PlayerTextDrawSetString(playerid, TD_vitals2[playerid][5], S_string);
		    PlayerTextDrawShow(playerid, TD_vitals2[playerid][5]);
		    if(hasSeenTDAR[playerid] != true) PlayerTextDrawShow(playerid, TD_vitals2[playerid][2]), hasSeenTDAR[playerid] = true;

			hasSeenTD[playerid] = true;
			hasSeenTDHN[playerid] = true;
 		}
	}
	else
	{
	    PlayerTextDrawHide(playerid, TD_Vitals0[playerid]);
	    PlayerTextDrawHide(playerid, TD_Vitals1[playerid]);
	    PlayerTextDrawHide(playerid, TD_Vitals2[playerid]);

	    PlayerTextDrawHide(playerid, TD_vitals2[playerid][0]);
	    PlayerTextDrawHide(playerid, TD_vitals2[playerid][1]);
	    PlayerTextDrawHide(playerid, TD_vitals2[playerid][2]);
	    PlayerTextDrawHide(playerid, TD_vitals2[playerid][3]);
	    PlayerTextDrawHide(playerid, TD_vitals2[playerid][4]);
	    PlayerTextDrawHide(playerid, TD_vitals2[playerid][5]);

	    HidePlayerProgressBar(playerid, hungerTD[playerid]);

	    hasSeenTD[playerid] = false;
		hasSeenTDAR[playerid] = false;
	}
	//END OF VITALS UPDATE

	//IF HAS HUNGER TD ENABLED
	/*if(opt_HungerTd[playerid] == 0 && IsPlayerLogged(playerid) && spawnCheck[playerid] == false && 515 == 1)
	{

	    new
			S_string[6],
			Float:F_Hunger;

        ex_GetPlayerHunger(playerid, F_Hunger);
	    format(S_string, 6, "%d", floatround(F_Hunger,floatround_ceil));
	    PlayerTextDrawSetString(playerid, TD_Vitals1[playerid], S_string);
	    PlayerTextDrawShow(playerid, TD_Vitals1[playerid]);

    	ShowPlayerProgressBar(playerid, hungerTD[playerid]);

		if(F_Hunger != GetPlayerProgressBarValue(playerid, hungerTD[playerid]))
		{
	        SetPlayerProgressBarValue(playerid, hungerTD[playerid], F_Hunger);
		}
	}
	else if(opt_HungerTd[playerid] == 1 && IsPlayerLogged(playerid) && spawnCheck[playerid] == false)
	{
	    PlayerTextDrawHide(playerid, TD_Vitals1[playerid]);
	}
	else
	{
	    PlayerTextDrawHide(playerid, TD_Vitals1[playerid]);
	    HidePlayerProgressBar(playerid, hungerTD[playerid]);
	}*/
	//END OF HIUNGER UPDATE

	/*if(B_dmg_IsInDS[playerid] == true && !IsPlayerInAnyVehicle(playerid) && (GetTickCount() - lastTickAnim[playerid]) > 999)
	{
	    new animlib[32];
        new animname[32];
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);

        lastTickAnim[playerid] = GetTickCount();

        if(strcmp(animlib, "PED", true) || (strcmp(animname, "KO_SHOT_STOM", true) && strcmp(animname, "FLOOR_HIT_F", true)))
        {
            ClearAnimations(playerid, 1);
		    ApplyAnimation(playerid, "PED", "FLOOR_HIT_F", 4.1, false, true, true, true, 0, true);
		    unStoppableAnim[playerid] = true;

		    format(unStopLib[playerid], 32, "PED");
		    format(unStopName[playerid], 32, "FLOOR_HIT_F");
        }
	}
	else if(unStoppableAnim[playerid] == true && (GetTickCount() - lastTickAnim[playerid]) > 499)
	{
	    new animlib[32];
        new animname[32];
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);

        lastTickAnim[playerid] = GetTickCount();

        if(strcmp(unStopLib[playerid], animlib, true) || strcmp(unStopName[playerid], animname, true))
        {
            ClearAnimations(playerid, 1);
		    ApplyAnimation(playerid, unStopLib[playerid], unStopName[playerid], 4.1, false, 0, 0, 0, 0, true);
        }
	}*/

	if(B_dmg_IsInDS[playerid] == true)
   	{
   	    new Float:pHP;
		ahac_GetPlayerHealth(playerid, pHP);
		if(pHP < 30.0) SetPlayerHealth(playerid, 30.0);
  	}

    SetPVarInt(playerid, "afk_check", 0);
	SetPVarInt(playerid, "afk", 0);
	SetPVarInt(playerid, "afk_secs", 0);
	SetPVarInt(playerid, "afk_mins", 0);

	if(!IsPlayerLogged(playerid)) return 1;
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
    // Check if it moved far


    /*if(!IsPlayerInAnyVehicle(playerid))
	{

		new
		    Float:old_x, Float:old_y, Float:old_z
		;

		GetVehiclePos(vehicleid, old_x, old_y, old_z);

		if(GetVehicleDistanceFromPoint(vehicleid, old_x, old_y, old_z) <= 1.5 && GetPlayerDistanceFromPoint(playerid, new_x, new_y, new_z) < 3.5)
    	{

			SetVehiclePos(vehicleid, old_x, old_y, old_z);
			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);

	        return 0;
		}
    }*/

    return 1;
}

function SpawnAttachments(playerid)
{
    Attachment_Spawn(playerid);
    return 1;
}

Character_Spawn(playerid)
{

	new tmpid;

	if(Character::selected[playerid]-1 == 0)
	    tmpid = ( 3*(Character::currentpage[playerid]+1) ) - 3;
	else if(Character::selected[playerid]-1 == 1)
	    tmpid = ( 3*(Character::currentpage[playerid]+1) ) - 2;
    else if(Character::selected[playerid]-1 == 2)
	    tmpid = ( 3*(Character::currentpage[playerid]+1) ) - 1;

    new
		querys[94],
		Cache:cache,
		charid = Character::ids[playerid][ tmpid ],
		charname[MAX_PLAYER_NAME+1],
		ispkd
	;
	
	mysql_format(MYSQL, querys, sizeof querys, "SELECT * FROM char_main WHERE id = '%d'", charid);
	cache = mysql_query(MYSQL, querys);
	cache_get_value_name(0, "Username", charname);
	cache_get_value_name_int(0, "isPKed", ispkd);
	cache_delete(cache);
	
	if(ispkd > 0)
	{
	    SendError(playerid, "Táto postava má Character Kill!");
		return 1;
	}

	SetPlayerName(playerid, charname);
	format(srvcharname[playerid],30,"%s",charname);
    b_playerSelectChar[playerid] = false;
	b_playerIsLogged[playerid] = true;
	b_playerSpawnedF[playerid]  = false;
	Character::isinselection[playerid] = false;

	TogglePlayerSpectating(playerid, false);
	loginTickCount[playerid] = gettime();
	ahac_SetPlayerHealth(playerid, 100.0);
	SetTimerEx("timer_LoadPlayerAfterSpawn", 250, false, "i", playerid);
	spawnCheck[playerid] = true;
	SetPlayerColor(playerid, COLOR_PLAYER_LOGGED);
	StopAudioStreamForPlayerEx(playerid);
	
	Character::DestroyTextdraws(playerid);

    for( new i; i < 100; i++ )
		SendClientMessage(playerid, -1, " ");
		
	TextDrawHideForPlayer(playerid, textdraw_LoginTD[0]);
	TextDrawHideForPlayer(playerid, textdraw_LoginTD[1]);
	TextDrawHideForPlayer(playerid, textdraw_LoginTD[2]);
	
	CancelSelectTextDraw(playerid);

	return 1;
}

Character_Rename(playerid)
{
    new tmpid;

	if(Character::selected[playerid]-1 == 0)
	    tmpid = ( 3*(Character::currentpage[playerid]+1) ) - 3;
	else if(Character::selected[playerid]-1 == 1)
	    tmpid = ( 3*(Character::currentpage[playerid]+1) ) - 2;
    else if(Character::selected[playerid]-1 == 2)
	    tmpid = ( 3*(Character::currentpage[playerid]+1) ) - 1;

    new
		querys[94],
		Cache:cache,
		charid = Character::ids[playerid][ tmpid ],
		charname[MAX_PLAYER_NAME+1]
	;

	mysql_format(MYSQL, querys, 94, "SELECT * FROM char_main WHERE id = '%d'", charid);
	cache = mysql_query(MYSQL, querys);

	new
		active,
		userID,
		isPKed
	;
	if(cache_num_rows() != 0)
	{
	    cache_get_value_name(0, "Username", charname);
		cache_get_value_name_int(0, "isPKed", isPKed);
		cache_get_value_name_int(0, "active", active);
		cache_get_value_name_int(0, "userID", userID);
	}
	cache_delete(cache);
	
	format(charnametmp[playerid], MAX_PLAYER_NAME+1, charname);
	
	if((isPKed == 1 || I_playerAdminLevel[playerid] >= 4))
	{
	    if(RenameTicket[playerid] < 1)
		    return SendError(playerid, "Nemá iadny rename ticket!");

        new
	        string[144];

		format(string, 144, "{ffffff}> Zvol prosím nové meno charakteru {e34f4f}%s{ffffff}\n\nMusí obsahovat podtrník.\nMajetok sa presunie, trestný register sa zmae.", charname);
        Character::noresponse[playerid] = true;
		return ShowPlayerDialog(playerid, did_charkill_rename, DIALOG_STYLE_INPUT, "CHARACTER-KILL", string, "RENAME", "SPAT");
	}
	else if((isPKed == 2))
	{
	    SendError(playerid, "Tento charakter nemôe premenova!");
	}
	else
	{
	    SendError(playerid, "Charakter môe premenova iba ak má Character Kill!");
	}

	return 1;
}

Character_Remove(playerid)
{

	new tmpid;
	
	if(Character::selected[playerid]-1 == 0)
	    tmpid = ( 3*(Character::currentpage[playerid]+1) ) - 3;
	else if(Character::selected[playerid]-1 == 1)
	    tmpid = ( 3*(Character::currentpage[playerid]+1) ) - 2;
    else if(Character::selected[playerid]-1 == 2)
	    tmpid = ( 3*(Character::currentpage[playerid]+1) ) - 1;

    new
		querys[94],
		Cache:cache,
		charid = Character::ids[playerid][ tmpid ],
		charname[MAX_PLAYER_NAME+1]
	;
	
	mysql_format(MYSQL, querys, 94, "SELECT * FROM char_main WHERE id = '%d'", charid);
	cache = mysql_query(MYSQL, querys);

	new
		active,
		userID,
		isPKed
	;
	if(cache_num_rows() != 0)
	{
	    cache_get_value_name(0, "Username", charname);
		cache_get_value_name_int(0, "isPKed", isPKed);
		cache_get_value_name_int(0, "active", active);
		cache_get_value_name_int(0, "userID", userID);
	}
	cache_delete(cache);
	
	format(charnametmp[playerid], MAX_PLAYER_NAME+1, charname);

	if((isPKed || I_playerAdminLevel[playerid] >= 4))
	{
	    new
  			string[256];

		format(string, 256, "{ffffff}> Si si istý, e chce NENÁVRATNE zmaza charakter {e34f4f}%s{ffffff}\n\nCharakter bude navdy vymazaný z naej databáze a nebude ho moné\nu nikdy navrátit. (Navdy je fakt dlhý cas.)", charname);
		ShowPlayerDialog(playerid, did_charkill_rem_confirm, DIALOG_STYLE_MSGBOX, "CHARACTER-KILL", string, "ZMAZAT", "SPAT");
		
		Character::noresponse[playerid] = true;
	}
	else
	{
	    SendError(playerid, "Charakter môe zmaza iba ak má Character Kill!");
	}

	return 1;
}

func_OnPlayerSpawn(playerid)
{

	if(IsPlayerNPC(playerid))
	{
	    if(!strcmp(ReturnName(playerid), "BOT_train_ls1", false))
	    {

	        SetPlayerSkin(playerid, 61);
	        ChangeVehicleColor(NPCVehicle, 1, 8);

	        T3D_nameTag[playerid] = CreateDynamic3DTextLabel("Martin Zahorsky (0)", 0xFFFFFFFF, 0.0, 0.0, 0.075, 15.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 10000.0, -1, 1);

	    	return PutPlayerInVehicle(playerid, NPCVehicle, 0);

		}
	}

    for(new i; i < 10; i++)
	    RemovePlayerAttachedObject(playerid, i);

    ahac_immunity[playerid] = true;
    SetTimerEx("ahac_timer_DisableImmunity", 1000, false, "i", playerid);

	ac_immunity[playerid] = true;
    SetTimerEx("ac_timer_DisableImmunity", 1000, false, "i", playerid);


    if(T3D_nameTag[playerid] != Text3D:INVALID_3DTEXT_ID)
	{
	    if(IsValidDynamic3DTextLabel(T3D_nameTag[playerid])) DestroyDynamic3DTextLabel(T3D_nameTag[playerid]);
		T3D_nameTag[playerid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(T3D_descTag[playerid] != Text3D:INVALID_3DTEXT_ID)
	{
	    if(IsValidDynamic3DTextLabel(T3D_descTag[playerid])) DestroyDynamic3DTextLabel(T3D_descTag[playerid]);
		T3D_descTag[playerid] = Text3D:INVALID_3DTEXT_ID;
 }

	T3D_nameTag[playerid] = CreateDynamic3DTextLabel(ReturnName(playerid), 0xFFFFFFFF, 0.0, 0.0, 0.075, 15.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 10000.0, -1, 1);
    createppopis(playerid);

    SetPlayerSkillLevel(playerid, 0, weaponskill_pistol[playerid]);
    SetPlayerSkillLevel(playerid, 1, weaponskill_pistol_silenced[playerid]);
    SetPlayerSkillLevel(playerid, 2, weaponskill_desert_eagle[playerid]);
    SetPlayerSkillLevel(playerid, 3, weaponskill_shotgun[playerid]);
    SetPlayerSkillLevel(playerid, 4, weaponskill_sawnoff_shotgun[playerid]);
    SetPlayerSkillLevel(playerid, 5, weaponskill_spas12_shotgun[playerid]);
    SetPlayerSkillLevel(playerid, 6, weaponskill_micro_uzi[playerid]);
    SetPlayerSkillLevel(playerid, 7, weaponskill_mp5[playerid]);
    SetPlayerSkillLevel(playerid, 8, weaponskill_ak47[playerid]);
    SetPlayerSkillLevel(playerid, 9, weaponskill_m4[playerid]);
    SetPlayerSkillLevel(playerid, 10, weaponskill_sniperrifle[playerid]);

    if(T_timer_hungerTimer[playerid] != -1)
		KillTimer(T_timer_hungerTimer[playerid]);

    T_timer_hungerTimer[playerid] =
		SetTimerEx("timer_HungerTimer", 70000+random(20000), false, "i", playerid);

	BumpPlayerOptions(playerid);

	SetPlayerFightingStyle(playerid, g_I_Fightstyle[playerid]);

	SetTimerEx("SpawnAttachments", 1500, false, "i", playerid);

	if(isSpectating[playerid] == true)
	{
		isSpectating[playerid] = false;
		Tutorial::spawning[playerid] = false;
	   	SetPlayerVirtualWorld(playerid, spec_World[playerid][0]);
	    SetPlayerInterior(playerid, spec_World[playerid][1]);
	    SetPlayerPos(playerid, spec_Pos[playerid][0], spec_Pos[playerid][1], spec_Pos[playerid][2]);

	    if(spec_Vehicle[playerid][0] != -1) SetTimerEx("specput", 400, false, "i", playerid); //PutPlayerInVehicle(playerid, spec_Vehicle[playerid][0], spec_Vehicle[playerid][1]);

		ahac_SetPlayerHealth(playerid, spec_Vitals[playerid][0]);
	 	ex_SetPlayerHunger(playerid, spec_Vitals[playerid][1]);
	  	SetPlayerArmour(playerid, spec_Vitals[playerid][2]);
	   	ex_SetPlayerSkin(playerid, ex_GetPlayerSkin(playerid));

		for(new x; x < 17; x++) PlayerTextDrawHide(playerid, SpectateTD[playerid][x]);

		spec_Player[playerid] = -1;

		for(new x; x < MAX_WEAPON_SLOTS; x++)
	   	{

	   	    if(tg_datax[playerid][x][0] == 0)
	   	        continue;
	   	        
            Weapons::GivePlayerNewWeapon(playerid, tg_datax[playerid][x][0], tg_datax[playerid][x][1], !!tg_datax[playerid][x][4], !!tg_datax[playerid][x][5], tg_originx[playerid][x], false, tg_datax[playerid][x][3]);
            tg_datax[playerid][x][0] = 0;
		}
		return 1;
	}

	if(issnakecam[playerid] == true)
	{
		issnakecam[playerid] = false;
	   	SetPlayerVirtualWorld(playerid, spec_World[playerid][0]);
	    SetPlayerInterior(playerid, spec_World[playerid][1]);
	    SetPlayerPos(playerid, spec_Pos[playerid][0], spec_Pos[playerid][1], spec_Pos[playerid][2]);

	    if(spec_Vehicle[playerid][0] != -1) SetTimerEx("specput", 400, false, "i", playerid); //PutPlayerInVehicle(playerid, spec_Vehicle[playerid][0], spec_Vehicle[playerid][1]);
		ahac_SetPlayerHealth(playerid, spec_Vitals[playerid][0]);
	 	ex_SetPlayerHunger(playerid, spec_Vitals[playerid][1]);
	  	SetPlayerArmour(playerid, spec_Vitals[playerid][2]);
	   	ex_SetPlayerSkin(playerid, ex_GetPlayerSkin(playerid));

		spec_Player[playerid] = -1;

		for(new x; x < MAX_WEAPON_SLOTS; x++)
	   	{

	   	    if(tg_datax[playerid][x][0] == 0)
	   	        continue;

            Weapons::GivePlayerNewWeapon(playerid, tg_datax[playerid][x][0], tg_datax[playerid][x][1], !!tg_datax[playerid][x][4], !!tg_datax[playerid][x][5], tg_originx[playerid][x], false, tg_datax[playerid][x][3]);
            tg_datax[playerid][x][0] = 0;
		}

		new
		    S_msg[144];
		format(S_msg, 144, "> %s vyiel z reimu snake cam!", GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,20.0,COLOR_GREY,S_msg);
		return 1;
	}

	if(inCCTV[playerid] == 1)
	{

	    inCCTV[playerid] = 0;

        SetPlayerVirtualWorld(playerid, spec_World[playerid][0]);
        SetPlayerInterior(playerid, spec_World[playerid][1]);
        SetPlayerPos(playerid, spec_Pos[playerid][0], spec_Pos[playerid][1], spec_Pos[playerid][2]);

        if(spec_Vehicle[playerid][0] != -1) SetTimerEx("specput", 400, false, "i", playerid); //PutPlayerInVehicle(playerid, spec_Vehicle[playerid][0], spec_Vehicle[playerid][1]);

        ahac_SetPlayerHealth(playerid, spec_Vitals[playerid][0]);
        ex_SetPlayerHunger(playerid, spec_Vitals[playerid][1]);
        SetPlayerArmour(playerid, spec_Vitals[playerid][2]);
        ex_SetPlayerSkin(playerid, ex_GetPlayerSkin(playerid));

		for(new x; x < MAX_WEAPON_SLOTS; x++)
	   	{

	   	    if(tg_datax[playerid][x][0] == 0)
	   	        continue;

            Weapons::GivePlayerNewWeapon(playerid, tg_datax[playerid][x][0], tg_datax[playerid][x][1], !!tg_datax[playerid][x][4], !!tg_datax[playerid][x][5], tg_originx[playerid][x], false, tg_datax[playerid][x][3]);
            tg_datax[playerid][x][0] = 0;
		}

        return 1;
	}

	if(spawnCheck[playerid] == true)
	{
	    spawnCheck[playerid] = false;
	    unStoppableAnim[playerid] = false;
	    
	    ////////////////////////////////////////////////////////////////////////

	    SetPlayerPos(playerid, loginPos[playerid][0], loginPos[playerid][1], loginPos[playerid][2]);
	    SetPlayerFacingAngle(playerid, 90.0);

		////////////////////////////////////////////////////////////////////////

	    new
	    	S_msg[144];
		format(S_msg, 144, "> %s (%d) sa práve prihlásil do hry! [%d / %d]", GetPlayerNameEx(playerid, NO_MASK), playerid, GetOnlinePlayers(), MAX_PLAYERS-1);

		foreach(new i : Player)
		{

			if(i > GetPlayerPoolSize()) break;
			if(!IsPlayerLogged(i)) continue;
			if(!IsPlayerInRangeOfPoint(i, 30.0, loginPos[playerid][0], loginPos[playerid][1], loginPos[playerid][2])) continue;
			if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != GetPlayerInterior(i)) continue;

			if(i == playerid) continue;

			SendClientMessage(i, COLOR_GREY, S_msg);

		}
		
		////////////////////////////////////////////////////////////////////////

		B_dmg_IsInDS[playerid] = false;
		B_isLegWounded[playerid] = false;
		isBleeding[playerid] = false;
		unStoppableAnim[playerid] = false;
		B_informDeath[playerid] = false;
	    B_allowDeath[playerid] = false;
		B_isFinallyDead[playerid] = false;
	 	B_isPlayerInDM[playerid] = false;
		TogglePlayerControllable(playerid, 1);
		
		////////////////////////////////////////////////////////////////////////

		if(T_timer_deathTimer[playerid] != -1) KillTimer(T_timer_deathTimer[playerid]);
		T_timer_deathTimer[playerid] = -1;
		
		////////////////////////////////////////////////////////////////////////

		if(IsValidDynamic3DTextLabel(T3D_dmg_Label[playerid]))
		{
			DestroyDynamic3DTextLabel(T3D_dmg_Label[playerid]);
			T3D_dmg_Label[playerid] = Text3D:INVALID_3DTEXT_ID;
		}
		
		////////////////////////////////////////////////////////////////////////

		for(new i; i < 80; i++)
		{
			I_dmg_Damages[playerid][i][0] = -1;
			I_dmg_Damages[playerid][i][1] = -1;
			I_dmg_Damages[playerid][i][2] = -1;
		}
		
		////////////////////////////////////////////////////////////////////////

		format(S_msg, 144, "%s sa práve prihlásil do hry! [%d / %d]", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetOnlinePlayers(), MAX_PLAYERS-1);
		AdminWarn(playerid, "LoginWarn:", COLOR_YELLOW, S_msg);
		
		////////////////////////////////////////////////////////////////////////

		web_LatestFormat("%s se prave prihlasil do hry", GetPlayerNameEx(playerid, NO_MASK));
		ex_SetPlayerSkin(playerid, ex_GetPlayerSkin(playerid));
		
		////////////////////////////////////////////////////////////////////////

		if(B_isPlayerInDM[playerid] == true)
		{
			ClearAnimations(playerid, 1);
		    ApplyAnimation(playerid, "PED", "KO_SHOT_STOM", 4.1, false, true, true, true, 0, true);
		    TogglePlayerControllable(playerid, 0);

		    B_allowDeath[playerid] = true;

			SCFM(playerid, /*0xB33C3CFF*/0xD0D0D0FF, "> Tvoj charakter zomrel! Môe poui príkaz /death alebo /accept death.");
		}
		
		////////////////////////////////////////////////////////////////////////

		if(loginWP[playerid] == 0)
			TogglePlayerControllable(playerid, 0);

	    return 1;
	}

	ahac_SetPlayerHealth(playerid, 100.0);

	if(isInJail[playerid] == true)
	{

		SCFM(playerid, COLOR_ADMINCMD, "> Si v admin jaile od administrátora %s za %s", jail_Admin[playerid], jail_Reason[playerid]);

		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 90000+playerid);
		SetPlayerPos(playerid, 167.164, 1391.767, 11.562);
		SetPlayerFacingAngle(playerid, 360.0);
		SetCameraBehindPlayer(playerid);

		B_allowDeath[playerid] = false;
	    B_dmg_IsInDS[playerid] = false;
		B_isLegWounded[playerid] = false;
		unStoppableAnim[playerid] = false;
		B_informDeath[playerid] = false;

		if(T_timer_deathTimer[playerid] != -1) KillTimer(T_timer_deathTimer[playerid]);
		T_timer_deathTimer[playerid] = -1;

		if(IsValidDynamic3DTextLabel(T3D_dmg_Label[playerid]))
		{
			DestroyDynamic3DTextLabel(T3D_dmg_Label[playerid]);
			T3D_dmg_Label[playerid] = Text3D:INVALID_3DTEXT_ID;
		}

		for(new i; i < 80; i++)
		{
			I_dmg_Damages[playerid][i][0] = -1;
			I_dmg_Damages[playerid][i][1] = -1;
			I_dmg_Damages[playerid][i][2] = -1;
		}

	    SetPlayerSkin(playerid, I_pSkin_Civil[playerid]);

		ahac_SetPlayerHealth(playerid, 100.0);
		return 1;
	}

	if(B_allowDeath[playerid] == true || B_isFinallyDead[playerid] == true)
	{

	    B_allowDeath[playerid] = false;
	    B_dmg_IsInDS[playerid] = false;
		B_isLegWounded[playerid] = false;
		unStoppableAnim[playerid] = false;
		B_informDeath[playerid] = false;
		B_isPlayerInDM[playerid] = false;
		B_isFinallyDead[playerid] = false;

		if(T_timer_deathTimer[playerid] != -1) KillTimer(T_timer_deathTimer[playerid]);
		T_timer_deathTimer[playerid] = -1;

		if(IsValidDynamic3DTextLabel(T3D_dmg_Label[playerid]))
		{
			DestroyDynamic3DTextLabel(T3D_dmg_Label[playerid]);
			T3D_dmg_Label[playerid] = Text3D:INVALID_3DTEXT_ID;
		}

		new
		    damage,
		    bool:head = false;

	    for(new i; i < 80; i++)
		{
			if(I_dmg_Damages[playerid][i][0] < 1) continue;
			if(I_dmg_Damages[playerid][i][0] == 9)
			    head = true;

			damage += I_dmg_Damages[playerid][i][2];
		}

		for(new i; i < 80; i++)
		{
			I_dmg_Damages[playerid][i][0] = -1;
			I_dmg_Damages[playerid][i][1] = -1;
			I_dmg_Damages[playerid][i][2] = -1;
		}

	    SetPlayerSkin(playerid, I_pSkin_Civil[playerid]);

		SetPlayerPos(playerid, 1246.451, 336.133, 19.554);
		SetPlayerFacingAngle(playerid, 334.0);

		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		TogglePlayerControllable(playerid, 1);

		//InterpolateCameraPos(playerid, 1246.929321, 352.551116, 23.706769, 1256.973388, 332.605651, 20.688161, 12000);
		//InterpolateCameraLookAt(playerid, 1248.099731, 347.731170, 23.075647, 1258.606445, 328.019958, 19.545993, 12000);

		//ApplyAnimation(playerid, "PED", "SEAT_idle", 4.1, 1, 0, 0, 0, 0, 1);

        new Float:dan = (damage * 2.65);

		if(head)
		    dan += 340.0;

		if(dan < 0.0)
		    dan = 451.1;

		if(dan > ex_GetPlayerMoney(playerid)) dan = ex_GetPlayerMoney(playerid);
  		ex_GivePlayerMoney(playerid, -dan);
  		money_spent[playerid]+=floatround(dan,floatround_round);

  		SCFM(playerid, COLOR_ADMINCMD, " __________________________________________________________________________");
  		SCFM(playerid, COLOR_ADMINCMD, "|");
  		SCFM(playerid, COLOR_ADMINCMD, "| Miesto prebratia: {ffffff}Montgomery Crippen Memorial");
  		SCFM(playerid, COLOR_ADMINCMD, "| Oetrujúci lekár: {ffffff}%s", randomDoc[random(sizeof(randomDoc))]);
  		SCFM(playerid, COLOR_ADMINCMD, "| Poplatok za oetrenie: {ffffff}%.2f$", dan);
  		SCFM(playerid, COLOR_ADMINCMD, "|__________________________________________________________________________");
  		SCFM(playerid, -1, " ");
  		SCFM(playerid, COLOR_ADMINCMD, "| Niè si nepamätá, no môe pokraèova v roleplayi.");

  		return 1;
	}

	if(B_isPlayerInDM[playerid] == true)
	{
	    SetPlayerSkin(playerid, I_DM_Skin[playerid]);
	    SetPlayerPos(playerid, F_DM_Pos[playerid][0], F_DM_Pos[playerid][1], F_DM_Pos[playerid][2]);
	    SetPlayerFacingAngle(playerid, F_DM_Pos[playerid][3]);

	    for(new x; x < MAX_WEAPON_SLOTS; x++)
	   	{

	   	    if(tg_datax[playerid][x][0] == 0)
	   	        continue;

            Weapons::GivePlayerNewWeapon(playerid, tg_datax[playerid][x][0], tg_datax[playerid][x][1], !!tg_datax[playerid][x][4], !!tg_datax[playerid][x][5], tg_originx[playerid][x], false, tg_datax[playerid][x][3]);
            tg_datax[playerid][x][0] = 0;
		}

		ClearAnimations(playerid, 1);
	    ApplyAnimation(playerid, "PED", "KO_SHOT_STOM", 4.1, false, true, true, true, 0, true);
	    TogglePlayerControllable(playerid, 0);

	    B_allowDeath[playerid] = true;

		SCFM(playerid, /*0xB33C3CFF*/0xD0D0D0FF, "> Tvoj charakter zomrel! Môe poui príkaz /death alebo /accept death.");

		return 1;
	}

	SetPlayerSkin(playerid, I_DM_Skin[playerid]);
 	SetPlayerPos(playerid, F_DM_Pos[playerid][0], F_DM_Pos[playerid][1], F_DM_Pos[playerid][2]);
    SetPlayerFacingAngle(playerid, F_DM_Pos[playerid][3]);

   	ClearAnimations(playerid, 1);
    ApplyAnimation(playerid, "PED", "KO_SHOT_STOM", 4.1, false, true, true, true, 0, true);
    TogglePlayerControllable(playerid, 0);

    B_allowDeath[playerid] = true;

	SCFM(playerid, /*0xB33C3CFF*/0xD0D0D0FF, "> Tvoj charakter zomrel! Môe poui príkaz /death alebo /accept death.");

	return 1;
}

func_OnPlayerEnterCheckpoint(playerid)
{
	switch(g_I_playerCheckpoint[playerid])
	{
	
	    case checkp_mission_pizza_fin:
	    {
            if(!Pizza::DoingJob[playerid])
                return SendError(playerid, "Nepracuje ako rozváaè pizze!");
                
			new odmena = Economy::GetPrice(ECONOMY_LIST_PIZZA_FINISH);
			g_I_Vyplata[playerid] += odmena;
 	    	SCSuccess(playerid, "Za dokonèenie tejto práce ti bude k výplate pripoèítaných %d$!", odmena);
 	    	Pizza::StartJob(playerid);
 	    	DisablePlayerCheckpoint(playerid);
	    }

		case checkp_mission_sweeper:
		{
		    if(!IsPlayerInAnyVehicle(playerid) || GetVehicleModel(GetPlayerVehicleID(playerid)) != 574)
	            return SendError(playerid, "Musí sedie vo vozidle Sweeper!");
	            
			Sweeper::NextCheckpoint(playerid);
		}

	    case checkp_pohrebak1:
	    {

	        if(!IsPlayerInAnyVehicle(playerid) || GetVehicleModel(GetPlayerVehicleID(playerid)) != 442)
	            return SendError(playerid, "Musí sedie v pohrebnom vozidle!");

	        g_I_playerCheckpoint[playerid] = checkp_none;
	        DisablePlayerCheckpoint(playerid);

	        g_I_playerCheckpoint[playerid] = checkp_pohrebak2;
	        fix_SetPlayerCheckpoint(playerid, 2240.281, -56.883, 26.327, 3.0);

	        SendSuccess(playerid, "Privez màtvolu naspä na cintorín!");
	        return 1;
	    }

	    case checkp_pohrebak2:
	    {
	        if(!IsPlayerInAnyVehicle(playerid) || GetVehicleModel(GetPlayerVehicleID(playerid)) != 442)
	            return SendError(playerid, "Musí sedie v pohrebnom vozidle!");

	        g_I_playerCheckpoint[playerid] = checkp_none;
	        DisablePlayerCheckpoint(playerid);

	        g_I_playerCheckpoint[playerid] = checkp_pohrebak3;
	        fix_SetPlayerCheckpoint(playerid, 2250.604, -52.948, 26.493, 1.0);

	        SendSuccess(playerid, "Nechaj tu auto a choï si vzia lopatu!");

	        pohrebnasluzba_vehid=GetPlayerVehicleID(playerid);
	        return 1;
	    }

	    case checkp_pohrebak3:
	    {
	        if(IsPlayerInAnyVehicle(playerid))
	            return SendError(playerid, "Nesmie sedie v aute!");

			pohrebnasluzba_hrob = random(sizeof(pohrebnasluzba_hroby)-1);

			new origin[128];
			format(origin,128,"Praca Hrobar (%s)", GetPlayerNameEx(playerid, NO_MASK));
			Weapons::GivePlayerNewWeapon(playerid, 6,1,false,true,origin,true);

			g_I_playerCheckpoint[playerid] = checkp_none;
	        DisablePlayerCheckpoint(playerid);

	        g_I_playerCheckpoint[playerid] = checkp_pohrebak4;
	        fix_SetPlayerCheckpoint(playerid, pohrebnasluzba_hroby[pohrebnasluzba_hrob][0], pohrebnasluzba_hroby[pohrebnasluzba_hrob][1], pohrebnasluzba_hroby[pohrebnasluzba_hrob][2], 1.0);

			SendSuccess(playerid, "Choï k pomníku a vykop jamu na rakvu!");
	        return 1;
	    }

	    case checkp_pohrebak4:
	    {
	        g_I_playerCheckpoint[playerid] = checkp_none;
	        DisablePlayerCheckpoint(playerid);

	        SetPlayerArmedWeapon(playerid, 6);
	        pohrebnsluzba_kopehrob[playerid] = true;

	        ps_playerProgress[playerid] = BREAKIN_DEFAULT_PROGRESS;
		    PlayerTextDrawTextSize(playerid, ps_td[playerid][2], 37.000000 + (ps_playerProgress[playerid] * 0.64), 0.000000);

			PlayerTextDrawShow(playerid, ps_td[playerid][0]);
			PlayerTextDrawShow(playerid, ps_td[playerid][1]);
			PlayerTextDrawShow(playerid, ps_td[playerid][2]);

			SendClientMessage(playerid, 0xAFAFAFFF, "> Aby si vykopal jamu na rakvu, musí klika lavým tlaèidlom myi! Nad minimapou má ukazovate¾.");
			SendClientMessage(playerid, 0xAFAFAFFF, "> Ak bude ukazovate¾ plný, jama je vykopaná.");

			ps_isPlayerFreezed[playerid] =	1;

			TogglePlayerControllable(playerid, 0);
			SetCameraBehindPlayer(playerid);

			ClearAnimations(playerid, 1);
	        return 1;
	    }

	    case checkp_pohrebak5:
	    {
	        g_I_playerCheckpoint[playerid] = checkp_none;
	        DisablePlayerCheckpoint(playerid);

	        Weapons::removeWeapon(playerid, 6);
	        SendSuccess(playerid, "Odloil si lopatu, teraz choï vybra rakvu z pohrebného auta!");

	        new Float:vPos[3];

	        GetVehicleBoot(pohrebnasluzba_vehid, vPos[0], vPos[1], vPos[2]);

	        g_I_playerCheckpoint[playerid] = checkp_pohrebak6;
	        fix_SetPlayerCheckpoint(playerid, vPos[0], vPos[1], vPos[2], 1.5);
	    }

	    case checkp_pohrebak6:
	    {
	        g_I_playerCheckpoint[playerid] = checkp_none;
	        DisablePlayerCheckpoint(playerid);

	        ClearAnimations(playerid,1);
			ApplyAnimation(playerid, "CARRY", "LIFTUP", 4.1, false, false, false, false, 0, false);

			RemovePlayerAttachedObject(playerid, 9);
			SetPlayerSpecialAction(playerid, 25);
			SetPlayerAttachedObject(playerid, 9, 19339, 6, 0.259, 0.44, -0.273, -111.9, -14.7, 83.9);

			SendSuccess(playerid, "Vzal si rakvu, odnes ju k hrobu!");

			g_I_playerCheckpoint[playerid] = checkp_pohrebak7;
	        fix_SetPlayerCheckpoint(playerid, pohrebnasluzba_hroby[pohrebnasluzba_hrob][0], pohrebnasluzba_hroby[pohrebnasluzba_hrob][1], pohrebnasluzba_hroby[pohrebnasluzba_hrob][2], 1.5);
	    }

	    case checkp_pohrebak7:
		{
		    g_I_playerCheckpoint[playerid] = checkp_none;
	        DisablePlayerCheckpoint(playerid);

	        RemovePlayerAttachedObject(playerid, 9);
	        SetPlayerSpecialAction(playerid, 0);
	        g_I_playerCheckpoint[playerid] = 0;
	        DisablePlayerCheckpoint(playerid);

	        pohrebnasluzba_isDoing[playerid] = false;
	        
	        new odmena = Economy::GetPrice(ECONOMY_LIST_JOB_HROBAR);

	        foreach( new x : Vehicle )
		    {
		        if(GetVehicleFaction(x) == 54)
		        {
		            // je to pohrebak
		            
		            if(vhac_healthState[x] < 999.9)
		            	odmena -= ((1000-floatround(vhac_healthState[x], floatround_round))*3);

		            RepairVehicle(x);
		            SetVehicleToRespawn(x);
		            vhac_healthState[x] = 1000.0;
		        }
		    }
		    
		    if(odmena > Economy::GetPrice(ECONOMY_LIST_JOB_HROBAR))
		        odmena = Economy::GetPrice(ECONOMY_LIST_JOB_HROBAR);
		        
		    ex_GivePlayerMoney(playerid, odmena);
		    money_work[playerid]+=floatround(odmena,floatround_round);
		    if(odmena == Economy::GetPrice(ECONOMY_LIST_JOB_HROBAR))
		        SCFM(playerid, COLOR_LIGHTBLUE, "> Práca úspene dokonèená! Dostal si odmenu %d$!", Economy::GetPrice(ECONOMY_LIST_JOB_HROBAR));
		    else
                SCFM(playerid, COLOR_LIGHTBLUE, "> Práca úspene dokonèená! Dostal si odmenu %d$, ale strhli ti %d$ za pokodenie auta!", Economy::GetPrice(ECONOMY_LIST_JOB_HROBAR), Economy::GetPrice(ECONOMY_LIST_JOB_HROBAR)-odmena);
		}

	    case checkp_prepravka:
	    {
	        Trucking::EnteredCheckpoint(playerid);
	    }

		case checkp_prepravca_truck:
		{
		    g_I_playerCheckpoint[playerid] = checkp_none;
	        DisablePlayerCheckpoint(playerid);

	        SendSuccess(playerid, "Nasadni do trucku, nezabudni si náves a vydaj sa pre náklad!");
		}

		case checkp_gps:
		{
		    g_I_playerCheckpoint[playerid] = checkp_none;
	        DisablePlayerCheckpoint(playerid);

	        SendSuccess(playerid, "Dorazil si do destinácie, vypínam GPS!");
		}

		case checkp_trace:
		{
		    g_I_playerCheckpoint[playerid] = checkp_none;
	        DisablePlayerCheckpoint(playerid);
		}

		case checkp_dmv:
		{
		    if(!IsPlayerInAnyVehicle(playerid) || DMV_vehicleID[playerid] != GetPlayerVehicleID(playerid))
		        return SendError(playerid, "Nesedí v tvojom skúobnom aute!");

      		AddPlayerDMVCP(playerid);
		}

		case checkp_vehicle_findme:
		{
			DisablePlayerCheckpoint(playerid);
			g_I_playerCheckpoint[playerid] = 0;
		}

	    case checkp_vehicle_parkspot:
	    {
	        DisablePlayerCheckpoint(playerid);
			g_I_playerCheckpoint[playerid] = 0;

			return SCFM(playerid, 0x6699ccff, "> {FFFFFF}Dorazil si na parkovacie miesto, vozidlo môe zaparkova!");
	    }
	    case checkp_brigada_krabicePC_1:
	    {
	        ClearAnimations(playerid, 1);
	        ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, false); // /putdown

	        SetTimerEx("timer_PutDownCrate_PC", 700, false, "i", playerid);
	    }
	    case checkp_brigada_krabicePC_2:
	    {
	        RemovePlayerAttachedObject(playerid, 9);
			SetPlayerSpecialAction(playerid, 0);
			DisablePlayerCheckpoint(playerid);
			g_I_playerCheckpoint[playerid] = 0;

			new odm = Economy::GetPrice(ECONOMY_LIST_BRIGADA_KRABICE_PC);

			ex_GivePlayerMoney(playerid, odm);
			money_work[playerid]+=floatround(odm,floatround_round);

			new
				S_string[128];

			format(S_string, sizeof(S_string), "Odniesol si krabicu a dostal si svoju odmenu %d$!", odm);
			SendSuccess(playerid, S_string);
	    }
	    case checkp_brigada_krabiceMG_1:
	    {
	        ClearAnimations(playerid, 1);
	        ApplyAnimation(playerid, "CARRY", "PUTDWN", 4.1, false, false, false, false, 0, false); // /putdown

	        SetTimerEx("timer_PutDownCrate_MG", 700, false, "i", playerid);
	    }
	    case checkp_brigada_krabiceMG_2:
	    {
	        RemovePlayerAttachedObject(playerid, 9);
			SetPlayerSpecialAction(playerid, 0);
			DisablePlayerCheckpoint(playerid);
			g_I_playerCheckpoint[playerid] = 0;

			new odm = Economy::GetPrice(ECONOMY_LIST_BRIGADA_KRABICE_MG);

			ex_GivePlayerMoney(playerid, odm);
			money_work[playerid]+=floatround(odm,floatround_round);

			new
				S_string[128];

			format(S_string, sizeof(S_string), "Odniesol si krabicu a dostal si svoju odmenu %d$!", odm);
			SendSuccess(playerid, S_string);
	    }
	}
	return 1;
}

main()
{
	printf("|");
	printf("|");
	printf("|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|");
	printf("|");
	printf("|\tGamemode:\t\t%s", GM_NAME);
	printf("|\tVerzia gamemodu:\t%s", GM_VERSION);
	printf("|\tVytvoril:\t\t%s", GM_AUTHOR);
	printf("|\tMeno mapy:\t\t%s", GM_MAP_NAME);
	printf("|\tJazyk:\t\t\t%s", GM_LANGUAGE);
	printf("|\tPoèet riadkov:\t\t%s", GM_LINES);
	printf("|\tPoèet príkazov:\t\t%d", GM_COMMANDS);
	printf("|");
	printf("|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|");
}

LoadServerData()
{

	new
		S_query[144];

	mysql_format(MYSQL, S_query, sizeof(S_query), "SELECT * FROM gm_stats");
	new
	    Cache:q = mysql_query(MYSQL, S_query);

	cache_get_value_name_int(0, "lOOC", I_gm_localOOC);
	cache_get_value_name_int(0, "gOOC", I_gm_globalOOC);
	cache_get_value_name_int(0, "gm_playRecord", I_gm_playerRecord);
	cache_get_value_name_int(0, "gm_MaxRPLvl", g_stats_maxRoleplayLevel);
	cache_get_value_name(0, "gm_MaxRPLvlN", g_stats_maxRoleplayLevelN);
	cache_get_value_name_int(0, "playt", g_stats_playTime);
	cache_get_value_name(0, "playtN", g_stats_playTimeN);
	cache_get_value_name_int(0, "Register_Money", Register_Money);
	cache_get_value_name_int(0, "models", g_stats_models);

	cache_delete(q);


	mysql_format(MYSQL, S_query, sizeof(S_query), "UPDATE gm_stats SET gm_Lines = '%d', gm_Version = '%e'", strval(GM_LINES), GM_VERSION);
	q = mysql_query(MYSQL, S_query);

	cache_delete(q);
	return 1;
}

LoadWeed()
{

    new
		mql_query[43+25+32];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_weed");

	mysql_tquery(MYSQL, mql_query, "OnWeedLoad");

	return 1;
}

function OnWeedLoad()
{

	new
	   	Float:x,
	   	Float:y,
	   	Float:z,
	   	VW,
	   	Interior,
	   	UnixPlaced,
	   	UnixFinish,
	   	DrugId,
	   	Hnojivo,
	   	Owner[30];

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name(i, "Owner", Owner);
	    cache_get_value_name_float(i, "X", x);
	    cache_get_value_name_float(i, "Y", y);
	    cache_get_value_name_float(i, "Z", z);
	    cache_get_value_name_int(i, "VW", VW);
	    cache_get_value_name_int(i, "Interior", Interior);

	    cache_get_value_name_int(i, "DrugId", DrugId);
	    cache_get_value_name_int(i, "Hnojivo", Hnojivo);

	    cache_get_value_name_int(i, "UnixPlaced", UnixPlaced);
	    cache_get_value_name_int(i, "UnixFinish", UnixFinish);

	    CreateWeed(
			x, y, z, VW, Interior, Owner, UnixPlaced, UnixFinish, DrugId, Hnojivo
		);

	}
	return 1;
}

CreateWeed(Float:x, Float:y, Float:z, vw, interior, owner[], unixplaced, unixfinish, drugid, hnojivo)
{

	new id = -1;
	for(new i; i < MAX_WEED; i++)
	{
	    if(strlen(weedEnum[i][weed_Owner]) > 3)
	        continue;

		id = i;
		break;
	}

	if(id == -1)
	    return printf("Nedostatok slotov na weed od %s.", owner);

	format(weedEnum[id][weed_Owner], 30, owner);

	weedEnum[id][weed_X] = x;
	weedEnum[id][weed_Y] = y;
	weedEnum[id][weed_Z] = z;
	weedEnum[id][weed_DrugId] = drugid;

	weedEnum[id][weed_VW] = vw;
	weedEnum[id][weed_INT] = interior;

	weedEnum[id][weed_Hnojivo] = hnojivo;

	weedEnum[id][weed_UnixPlaced] = unixplaced;
	weedEnum[id][weed_UnixFinish] = unixfinish;

	new Float:xOFFSET_Z = 0.009983;

    weedEnum[id][weed_ObjectMain] = CreateDynamicObject(2203, x, y, z - 0.07, 0.0, 0.0, 0.0, vw, interior, -1, 90, 90, -1, 1);

    if(unixplaced + 21600 /*6 HOURS*/ < gettime())
    {
		weedEnum[id][weed_Object] = CreateDynamicObject(2241, x, y, z - 0.07 + xOFFSET_Z, 0.0, 0.0, 0.0, vw, interior, -1, 90, 90, -1, 1);
		weedEnum[id][weed_ObjectCreated] = 1;
		SetDynamicObjectMaterial(weedEnum[id][weed_Object], 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x01010101);
		SetDynamicObjectMaterial(weedEnum[id][weed_Object], 1, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x01010101);

		switch(drugid)
		{
		    case 0:
			{
				SetDynamicObjectMaterial(weedEnum[id][weed_Object], 2, 701, "badlands", "newtreeleaves128", 0xFF663300);
			}

		    case 1:
			{
				SetDynamicObjectMaterial(weedEnum[id][weed_Object], 2, 701, "badlands", "newtreeleaves128", 0xFFD9DB31);
			}

		    case 2:
			{
				SetDynamicObjectMaterial(weedEnum[id][weed_Object], 2, 701, "badlands", "newtreeleaves128", 0x00000000);
			}
		}
	}
	else
	    weedEnum[id][weed_ObjectCreated] = 0;

	switch(drugid)
	{
	    case 0:
		{
		    if(unixfinish < gettime())
		        weedEnum[id][weed_Label] = CreateDynamic3DTextLabel( "{b08a64}Marihuana\n{ffffff}\nvyrastená\n/vytrhnut (pre pozbieranie)", -1, x, y, z + 0.3, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, vw, interior, -1, 5.0, -1, 1);
		    else
				weedEnum[id][weed_Label] = CreateDynamic3DTextLabel( "{b08a64}Marihuana\n{ffffff}\nrastie...\n/vytrhnut (pre znièenie)", -1, x, y, z + 0.3, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, vw, interior, -1, 5.0, -1, 1);
		}

		case 1:
		{
		    if(unixfinish < gettime())
		        weedEnum[id][weed_Label] = CreateDynamic3DTextLabel( "{ece070}Marihuana\n{ffffff}\nvyrastená\n/vytrhnut (pre pozbieranie)", -1, x, y, z + 0.3, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, vw, interior, -1, 5.0, -1, 1);
			else
				weedEnum[id][weed_Label] = CreateDynamic3DTextLabel( "{ece070}Marihuana\n{ffffff}\nrastie...\n/vytrhnut (pre znièenie)", -1, x, y, z + 0.3, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, vw, interior, -1, 5.0, -1, 1);
		}

	    case 2:
		{
		    if(unixfinish < gettime())
                weedEnum[id][weed_Label] = CreateDynamic3DTextLabel( "{79ee87}Marihuana\n{ffffff}\nvyrastená...\n/vytrhnut (pre pozbieranie)", -1, x, y, z + 0.3, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, vw, interior, -1, 5.0, -1, 1);
			else
				weedEnum[id][weed_Label] = CreateDynamic3DTextLabel( "{79ee87}Marihuana\n{ffffff}\nrastie...\n/vytrhnut (pre znièenie)", -1, x, y, z + 0.3, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, vw, interior, -1, 5.0, -1, 1);
		}
	}

	weedEnum[id][weed_Area] = CreateDynamicSphere(x, y, z, 1.5, vw, interior);

	return 1;
}

DestroyWeed(id)
{
    if(weedEnum[id][weed_ObjectCreated] == 1)
		DestroyDynamicObject(weedEnum[id][weed_Object]);

	DestroyDynamicObject(weedEnum[id][weed_ObjectMain]);
	DestroyDynamicArea(weedEnum[id][weed_Area]);
	DestroyDynamic3DTextLabel(weedEnum[id][weed_Label]);

	format(weedEnum[id][weed_Owner], 30, "");

	weedEnum[id][weed_X] = 0.0;
	weedEnum[id][weed_Y] = 0.0;
	weedEnum[id][weed_Z] = 0.0;

	weedEnum[id][weed_VW] = 0;
	weedEnum[id][weed_INT] = 0;
	weedEnum[id][weed_DrugId] = 0;

	weedEnum[id][weed_UnixPlaced] = 0;
	weedEnum[id][weed_UnixFinish] = 0;

	return 1;
}

RefreshWeed(id)
{

	new
		unixfinish = weedEnum[id][weed_UnixFinish],
		unixplaced = weedEnum[id][weed_UnixPlaced]
	;

	if(unixplaced + 21600 < gettime() && weedEnum[id][weed_ObjectCreated] == 0)
	{
	    new
			Float:xOFFSET_Z = 0.009983,
			Float:xMAXOFFSET_Z = 0.089984
		;

		xMAXOFFSET_Z = (xMAXOFFSET_Z / float(unixfinish - gettime() % 3600));

		if(xMAXOFFSET_Z == 0.0 && gettime() > unixfinish)
		    xMAXOFFSET_Z = 0.089984;
		else if(xMAXOFFSET_Z == 0.089984 && gettime() < unixfinish)
		    xMAXOFFSET_Z = 0.0;

	    weedEnum[id][weed_Object] = CreateDynamicObject(2241, weedEnum[id][weed_X], weedEnum[id][weed_Y], weedEnum[id][weed_Z] - 0.07 + xOFFSET_Z + xMAXOFFSET_Z, 0.0, 0.0, 0.0, weedEnum[id][weed_VW], weedEnum[id][weed_INT], -1, 90, 90, -1, 1);
	    weedEnum[id][weed_ObjectCreated] = 1;
		SetDynamicObjectMaterial(weedEnum[id][weed_Object], 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x01010101);
		SetDynamicObjectMaterial(weedEnum[id][weed_Object], 1, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x01010101);

		switch(weedEnum[id][weed_DrugId])
		{
		    case 0:
			{
				SetDynamicObjectMaterial(weedEnum[id][weed_Object], 2, 701, "badlands", "newtreeleaves128", 0xFF663300);
			}

		    case 1:
			{
				SetDynamicObjectMaterial(weedEnum[id][weed_Object], 2, 701, "badlands", "newtreeleaves128", 0xFFD9DB31);
			}

		    case 2:
			{
				SetDynamicObjectMaterial(weedEnum[id][weed_Object], 2, 701, "badlands", "newtreeleaves128", 0x00000000);
			}
		}
	}
	else if(weedEnum[id][weed_ObjectCreated] == 1)
	{
	    new
			Float:xOFFSET_Z = 0.009983,
			Float:xMAXOFFSET_Z = 0.089984
		;

		xMAXOFFSET_Z = (xMAXOFFSET_Z / float(unixfinish - gettime() % 3600));

		if(xMAXOFFSET_Z == 0.0 && gettime() > unixfinish)
		    xMAXOFFSET_Z = 0.089984;
		else if(xMAXOFFSET_Z == 0.089984 && gettime() < unixfinish)
		    xMAXOFFSET_Z = 0.0;

        SetDynamicObjectPos(weedEnum[id][weed_Object], weedEnum[id][weed_X], weedEnum[id][weed_Y], weedEnum[id][weed_Z] - 0.07 + xOFFSET_Z + xMAXOFFSET_Z);
	}

	if(gettime() > unixfinish)
	{
	    switch(weedEnum[id][weed_DrugId])
		{
		    case 0:
			{
				UpdateDynamic3DTextLabelText(weedEnum[id][weed_Label], 0xFFFFFFFF, "{b08a64}Marihuana\n{ffffff}\nvyrastená...\n/vytrhnut (pre pozbieranie)");
			}

			case 1:
			{
			    UpdateDynamic3DTextLabelText(weedEnum[id][weed_Label], 0xFFFFFFFF, "{ece070}Marihuana\n{ffffff}\nvyrastená...\n/vytrhnut (pre pozbieranie)");
			}

		    case 2:
			{
			    UpdateDynamic3DTextLabelText(weedEnum[id][weed_Label], 0xFFFFFFFF, "{79ee87}Marihuana\n{ffffff}\nvyrastená...\n/vytrhnut (pre pozbieranie)");
			}
		}
	}

	return 1;
}

LoadGarages()
{

    new
		mql_query[43+25+32];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_garages");

	mysql_tquery(MYSQL, mql_query, "OnGaragesLoad");

	return 1;
}

function OnGaragesLoad()
{

	new
	   	Street[32],
	   	City[32],
	   	Number,
	   	PSC,
	    Owner[ 30 ],
	    SecOwner[ 30 ],
		Float:Pos[ 8 ],
		PosWorlds[ 2 ],
		InteriorID,
		IsLocked,
		BuyPrice,

		AssignedHouse,

		isValidPlayer[128];

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name(i, "Street", Street);
	    cache_get_value_name(i, "City", City);
	    cache_get_value_name_int(i, "Number", Number);
	    cache_get_value_name_int(i, "PSC", PSC);
	    cache_get_value_name(i, "Owner", Owner);
	    cache_get_value_name(i, "SecOwner", SecOwner);

	    cache_get_value_name_float(i, "pX", Pos[0]);
	    cache_get_value_name_float(i, "pY", Pos[1]);
	    cache_get_value_name_float(i, "pZ", Pos[2]);
	    cache_get_value_name_float(i, "pA", Pos[3]);

		cache_get_value_name_float(i, "vX", Pos[4]);
	    cache_get_value_name_float(i, "vY", Pos[5]);
	    cache_get_value_name_float(i, "vZ", Pos[6]);
	    cache_get_value_name_float(i, "vA", Pos[7]);

	    cache_get_value_name_int(i, "VW", PosWorlds[0]);
	    cache_get_value_name_int(i, "Interior", PosWorlds[1]);

	    cache_get_value_name_int(i, "InteriorID", InteriorID);
	    cache_get_value_name_int(i, "IsLocked", IsLocked);
	    cache_get_value_name_int(i, "BuyPrice", BuyPrice);

		cache_get_value_name_int(i, "AssignedHouse", AssignedHouse);

	    if(strfind("_", Owner, true) != -1){
		    mysql_format(MYSQL, isValidPlayer, 128, "SELECT Username FROM char_main WHERE Username = '%e'", Owner);
			new
				Cache:exC = mysql_query(MYSQL, isValidPlayer);
			if(cache_num_rows() < 1){
			    cache_delete(exC);
				Owner[0] = 0;
			}
		}

	    CreateDynamicGarage(
			Street, City, Number, PSC, Owner,
			Pos[0], Pos[1], Pos[2], Pos[3],
			Pos[4], Pos[5], Pos[6], Pos[7],
			PosWorlds[0], PosWorlds[1], InteriorID, IsLocked,
			BuyPrice, AssignedHouse, SecOwner
		);

		pocetGarazi ++;

	}
	return 1;
}

LoadHouses()
{

    new
		mql_query[43+25+32];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_houses");

	mysql_tquery(MYSQL, mql_query, "OnHousesLoad");

	return 1;
}

LoadGPS()
{

    new
		mql_query[43+25+32];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_gps ORDER BY Name");
	mysql_tquery(MYSQL, mql_query, "OnGPSLoad");

	return 1;
}

function OnHousesLoad()
{

	new
	   	Street[32],
	   	City[32],
	   	Number,
	   	PSC,
	    Owner[ 30 ],
	    SecOwner[ 30 ],
		Float:Pos[ 4 ],
		PosWorlds[ 2 ],
		InteriorID,
		IsLocked,
		BuyPrice,

		IsRental,
		RentTo,
		exfur;

	for(new i; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name(i, "Street", Street);
	    cache_get_value_name(i, "City", City);
	    cache_get_value_name_int(i, "Number", Number);
	    cache_get_value_name_int(i, "PSC", PSC);
	    cache_get_value_name(i, "Owner", Owner);
	    cache_get_value_name(i, "SecOwner", SecOwner);
	    cache_get_value_name_float(i, "X", Pos[0]);
	    cache_get_value_name_float(i, "Y", Pos[1]);
	    cache_get_value_name_float(i, "Z", Pos[2]);
	    cache_get_value_name_float(i, "Angle", Pos[3]);
	    cache_get_value_name_int(i, "VW", PosWorlds[0]);
	    cache_get_value_name_int(i, "Interior", PosWorlds[1]);

	    cache_get_value_name_int(i, "InteriorID", InteriorID);
	    cache_get_value_name_int(i, "IsLocked", IsLocked);
	    cache_get_value_name_int(i, "BuyPrice", BuyPrice);
	    cache_get_value_name_int(i, "ExteriorFurniture", exfur);

	    cache_get_value_name_int(i, "IsRental", IsRental);
	    cache_get_value_name_int(i, "RentTo", RentTo);

     	CreateDynamicHouse(
			Street, City, Number, PSC, Owner, Pos[0], Pos[1], Pos[2], Pos[3], PosWorlds[0], PosWorlds[1],
			InteriorID, IsLocked, BuyPrice, SecOwner, IsRental, RentTo, exfur
		);

		pocetDomov ++;

	}
	return 1;
}

function OnGPSLoad()
{
	for(new i; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name_float(i, "X", Float:A_gpsLocation[i][0][0]);
	    cache_get_value_name_float(i, "Y", Float:A_gpsLocation[i][1][0]);
	    cache_get_value_name_float(i, "Z", Float:A_gpsLocation[i][2][0]);
	    cache_get_value_name(i, "Name", A_gpsLocation[i][3]);

	}
	return 1;
}

GetBiggestHouseAddress()
{
    new
		biggest = MIN_HOUSE_ADDRESS;

	foreach( new i : Houses ) {
	    if(strlen(houseEnum[i][ho_Street]) < 1)
			continue;

	    if(houseEnum[i][ho_PSC] > biggest)
	        biggest = houseEnum[i][ho_PSC];
	}

	return biggest + 1;
}

CreateDynamicGarage(
	street[], city[], number, psc, owner[],
	Float:pX, Float:pY, Float:pZ, Float:pA,
	Float:vX, Float:vY, Float:vZ, Float:vA,
	virtualworld, interior, interiorid, islocked = 0,
	buyprice = 0, assignedHouse = 0, secOwn[] = ""
)
{

	new id = -1;
	for(new i; i < MAX_GARAGES; i++) {
	    if(strlen(garageEnum[i][ga_Street]) > 2) continue;
	    id = i;
	    break;
	}
	if(id == -1) return printf("Garage System Error; Nepodarilo sa vytvorit garaz %s (%d), %s]! Nie je volny slot!", street, number, city);

	pZ -= 0.1;

    garageEnum[id][ga_PSC] = psc;
    garageEnum[id][ga_Number] = number;

	garageEnum[id][ga_pX] = pX;
	garageEnum[id][ga_pY] = pY;
	garageEnum[id][ga_pZ] = pZ;
	garageEnum[id][ga_pA] = pA;

	garageEnum[id][ga_vX] = vX;
	garageEnum[id][ga_vY] = vY;
	garageEnum[id][ga_vZ] = vZ;
	garageEnum[id][ga_vA] = vA;

	garageEnum[id][ga_PosVirtualWorld] = virtualworld;
	garageEnum[id][ga_PosInterior] = interior;
	garageEnum[id][ga_InteriorID] = interiorid;
	garageEnum[id][ga_IsLocked] = islocked;
	garageEnum[id][ga_BuyPrice] = buyprice;
	garageEnum[id][ga_AssignedHouse] = assignedHouse;

	if(strlen(owner) < 3) format(owner, 30, "Ne");
	if(strlen(secOwn) < 3) format(secOwn, 30, "Ne");

	format(garageEnum[id][ga_Street], 32, street);
	format(garageEnum[id][ga_City], 32, city);
	format(garageEnum[id][ga_Owner], 30, owner);
	format(garageEnum[id][ga_SecOwner], 30, secOwn);

	Iter_Add(Garages, id);

	new
		str[ 255+30 ];

	if(assignedHouse == 0)
	{
		if(strlen(owner) > 2)
		{
		    format(str, sizeof(str), "{e1e1e1}%d%s %s\n%s", number, returnOrdinal(number), street, city);
		}
		else
		{
		    format(str, sizeof(str), "{e1e1e1}%d%s %s\n%s\n\n{3db050}%s$", number, returnOrdinal(number), street, city, FormatNumber(buyprice));
		}
	}
	else
	{

	    new idex = -1;

	    foreach( new i : Houses )
	    {
	        if(houseEnum[i][ho_PSC] == assignedHouse)
	        {
	            idex = i;
	            break;
			}
	    }

	    if(idex != -1)
	    	format(str, sizeof(str), "{e1e1e1}%d%s %s\nGará k domu: %d%s %s", number, returnOrdinal(number), street, houseEnum[idex][ho_Number], returnOrdinal(houseEnum[idex][ho_Number]), houseEnum[idex][ho_Street]);
		else
		    format(str, sizeof(str), "{e1e1e1}%d%s %s\nGARÁ JE POKAZENÁ, ZAVOLAJ ADMINA PROSÍM", number, returnOrdinal(number), street);
	}

	garageEnum[id][ga_Pickup] = CreateDynamicPickup(1272, 1, pX, pY, pZ, virtualworld, interior, -1, 20.0, -1, 0);
	garageEnum[id][ga_Label] = CreateDynamic3DTextLabel(str, 0xffffffff, pX, pY, pZ + 0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, virtualworld, interior, -1, 8.0, -1, 0);
    garageEnum[id][ga_Area] = CreateDynamicSphere(pX, pY, pZ, 1.7, virtualworld, interior, -1);

	return id;
}

GetBiggestGarageAddress()
{
    new
		biggest = MIN_GARAGE_ADDRESS;

	foreach( new i : Garages ) {
	    if(strlen(garageEnum[i][ga_Street]) < 1)
			continue;

	    if(garageEnum[i][ga_PSC] > biggest)
	        biggest = garageEnum[i][ga_PSC];
	}

	return biggest + 1;
}

ReloadGarageLabel(id)
{
    new
		str[ 255+30 ];

    if(garageEnum[id][ga_AssignedHouse] == 0)
	{
		if(strlen(garageEnum[id][ga_Owner]) > 2)
		{
		    format(str, sizeof(str), "{e1e1e1}%d%s %s\n%s", garageEnum[id][ga_Number], returnOrdinal(garageEnum[id][ga_Number]), garageEnum[id][ga_Street], garageEnum[id][ga_City]);
		}
		else
		{
		    format(str, sizeof(str), "{e1e1e1}%d%s %s\n%s\n\n{3db050}%s$", garageEnum[id][ga_Number], returnOrdinal(garageEnum[id][ga_Number]), garageEnum[id][ga_Street], garageEnum[id][ga_City], FormatNumber(garageEnum[id][ga_BuyPrice]));
		}
	}
	else
	{

	    new idex = -1;

	    foreach( new i : Houses )
	    {
	        if(houseEnum[i][ho_PSC] == garageEnum[id][ga_AssignedHouse])
	        {
	            idex = i;
	            break;
			}
	    }

	    if(idex != -1)
	    	format(str, sizeof(str), "{e1e1e1}%d%s %s\nGará k domu: %d%s %s", garageEnum[id][ga_Number], returnOrdinal(garageEnum[id][ga_Number]), garageEnum[id][ga_Street], houseEnum[idex][ho_Number], returnOrdinal(houseEnum[idex][ho_Number]), houseEnum[idex][ho_Street]);
		else
		    format(str, sizeof(str), "{e1e1e1}%d%s %s\nGARÁ JE POKAZENÁ, ZAVOLAJ ADMINA PROSÍM", garageEnum[id][ga_Number], returnOrdinal(garageEnum[id][ga_Number]), garageEnum[id][ga_Street]);
	}

	if(IsValidDynamic3DTextLabel(garageEnum[id][ga_Label]))
	{
		UpdateDynamic3DTextLabelText(garageEnum[id][ga_Label], 0xffffffff, str);
	}
	else
	{
	    garageEnum[id][ga_Label] =
			CreateDynamic3DTextLabel(str, 0xffffffff,
				garageEnum[id][ga_pX], garageEnum[id][ga_pY], garageEnum[id][ga_pZ] + 0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, garageEnum[id][ga_PosVirtualWorld], garageEnum[id][ga_PosInterior], -1, 5.0, -1, 0);
	}

	return 1;
}

DestroyDynamicGarage(id)
{
	if(strlen(garageEnum[id][ga_Street]) < 1)
	    return 0;

	DestroyDynamicPickup(garageEnum[id][ga_Pickup]);
	DestroyDynamic3DTextLabel(garageEnum[id][ga_Label]);
	DestroyDynamicArea(garageEnum[id][ga_Area]);

	garageEnum[id][ga_Number] = 0;
	garageEnum[id][ga_PSC] = 0;

	garageEnum[id][ga_pX] = 0.0;
	garageEnum[id][ga_pY] = 0.0;
	garageEnum[id][ga_pZ] = 0.0;
	garageEnum[id][ga_pA] = 0.0;

	garageEnum[id][ga_vX] = 0.0;
	garageEnum[id][ga_vY] = 0.0;
	garageEnum[id][ga_vZ] = 0.0;
	garageEnum[id][ga_vA] = 0.0;

	garageEnum[id][ga_PosVirtualWorld] = 0;
	garageEnum[id][ga_PosInterior] = 0;
	garageEnum[id][ga_InteriorID] = 0;
	garageEnum[id][ga_IsLocked] = 0;
	garageEnum[id][ga_BuyPrice] = 0;
	garageEnum[id][ga_AssignedHouse] = 0;

	format(garageEnum[id][ga_Street], 32, "");
	format(garageEnum[id][ga_City], 32, "");
	format(garageEnum[id][ga_Owner], 30, "");
	format(garageEnum[id][ga_SecOwner], 30, "");

	Iter_Remove(Garages, id);

	return 1;
}

CreateDynamicHouse(
	street[], city[], number, psc, owner[], Float:x, Float:y, Float:z, Float:angle,
	virtualworld, interior, interiorid, islocked = 0,
	buyprice = 0, secOwn[] = "", isrental = 0, rentto = 0, extfur = 0
)
{

	new id = -1;
	for(new i; i < MAX_HOUSES; i++) {
	    if(strlen(houseEnum[i][ho_Street]) > 0) continue;
	    id = i;
	    break;
	}
	if(id == -1) return printf("House System Error; Nepodarilo sa vytvorit dom [%s (%d), %s]! Nie je volny slot!", street, number, city);

	z -= 0.1;

    houseEnum[id][ho_PSC] = psc;
    houseEnum[id][ho_Number] = number;
	houseEnum[id][ho_PosX] = x;
	houseEnum[id][ho_PosY] = y;
	houseEnum[id][ho_PosZ] = z;
	houseEnum[id][ho_PosAngle] = angle;
	houseEnum[id][ho_PosVirtualWorld] = virtualworld;
	houseEnum[id][ho_PosInterior] = interior;
	houseEnum[id][ho_InteriorID] = interiorid;
	houseEnum[id][ho_IsLocked] = islocked;
	houseEnum[id][ho_BuyPrice] = buyprice;
	houseEnum[id][ho_ExteriorFurniture] = extfur;

	houseEnum[id][ho_IsRental] = isrental;
	houseEnum[id][ho_RentTo] = rentto;

	format(houseEnum[id][ho_Street], 32, street);
	format(houseEnum[id][ho_City], 32, city);

	if(strlen(owner) < 3)
	    format(houseEnum[id][ho_Owner], 30, "Ne");
	else
		format(houseEnum[id][ho_Owner], 30, owner);

    if(strlen(secOwn) < 3)
	    format(houseEnum[id][ho_SecOwner], 30, "Ne");
	else
		format(houseEnum[id][ho_SecOwner], 30, secOwn);

	Iter_Add(Houses, id);

	houseEnum[id][ho_Pickup] = CreateDynamicPickup(1273, 1, x, y, z, virtualworld, interior, -1, 50.0, -1, 0);
	houseEnum[id][ho_Label] = CreateDynamic3DTextLabel("_", 0xffffffff, x, y, z + 0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, virtualworld, interior, -1, 8.0, -1, 0);
    houseEnum[id][ho_Area] = CreateDynamicSphere(x, y, z, 1.7, virtualworld, interior, -1);

    ReloadHouseLabel(id);

	return id;
}

stock returnOrdinal(number)
{
	new
	    ordinal[4][3] = { "st", "nd", "rd", "th" }
	;
	number = number < 0 ? -number : number;
	return (((10 < (number % 100) < 14)) ? ordinal[3] : (0 < (number % 10) < 4) ? ordinal[((number % 10) - 1)] : ordinal[3]);
}

ReloadHouseLabel(id)
{
    new
		str[ 255+30 ];

	if(houseEnum[id][ho_IsRental] == 0)
	{
	    if(houseEnum[id][ho_Number] == 0)
	    {
			if(strlen(houseEnum[id][ho_Owner]) > 2)
			{
			    format(str, sizeof(str), "{e1e1e1}%s\n%s\n\n(zip. %d)", houseEnum[id][ho_Street], houseEnum[id][ho_City], houseEnum[id][ho_PSC]);
			}
			else
			{
			    format(str, sizeof(str), "{e1e1e1}%s\n%s\n\n(zip. %d)\n{3db050}%s$", houseEnum[id][ho_Street], houseEnum[id][ho_City], houseEnum[id][ho_PSC], FormatNumber(houseEnum[id][ho_BuyPrice]));
			}
		}
		else if(houseEnum[id][ho_Number] == -1)
	    {
			if(strlen(houseEnum[id][ho_Owner]) > 2)
			{
			    format(str, sizeof(str), "{e1e1e1}%s\n\n(zip. %d)", houseEnum[id][ho_Street], houseEnum[id][ho_PSC]);
			}
			else
			{
			    format(str, sizeof(str), "{e1e1e1}%s\n\n(zip. %d)\n{3db050}%s$", houseEnum[id][ho_Street], houseEnum[id][ho_PSC], FormatNumber(houseEnum[id][ho_BuyPrice]));
			}
		}
		else if(houseEnum[id][ho_Number] == -2)
	    {
			if(strlen(houseEnum[id][ho_Owner]) > 2)
			{
			    format(str, sizeof(str), "{e1e1e1}%s", houseEnum[id][ho_Street]);
			}
			else
			{
			    format(str, sizeof(str), "{e1e1e1}%s\n\n{3db050}%s$", houseEnum[id][ho_Street], FormatNumber(houseEnum[id][ho_BuyPrice]));
			}
		}
		else
		{
		    if(strlen(houseEnum[id][ho_Owner]) > 2)
			{
			    format(str, sizeof(str), "{e1e1e1}%d%s %s\n%s\n\n(zip. %d)", houseEnum[id][ho_Number], returnOrdinal(houseEnum[id][ho_Number]), houseEnum[id][ho_Street], houseEnum[id][ho_City], houseEnum[id][ho_PSC]);
			}
			else
			{
			    format(str, sizeof(str), "{e1e1e1}%d%s %s\n%s\n\n(zip. %d)\n{3db050}%s$", houseEnum[id][ho_Number], returnOrdinal(houseEnum[id][ho_Number]), houseEnum[id][ho_Street], houseEnum[id][ho_City], houseEnum[id][ho_PSC], FormatNumber(houseEnum[id][ho_BuyPrice]));
			}
		}
	}
	else
	{
	    if(strlen(houseEnum[id][ho_Owner]) > 2)
		{
		    new numDays = floatround(floatabs(float(houseEnum[id][ho_RentTo] - gettime())) / 60 / 60 / 24);
		    format(str, sizeof(str), "{e1e1e1}%d%s %s\n%s\n\n(zip. %d)\n\nZostáva %d dní", houseEnum[id][ho_Number], returnOrdinal(houseEnum[id][ho_Number]), houseEnum[id][ho_Street], houseEnum[id][ho_City], houseEnum[id][ho_PSC], numDays);
		}
		else
		{
		    format(str, sizeof(str), "{e1e1e1}%d%s %s\n%s\n\n(zip. %d)\n{3db050}%s${e1e1e1}/deò", houseEnum[id][ho_Number], returnOrdinal(houseEnum[id][ho_Number]), houseEnum[id][ho_Street], houseEnum[id][ho_City], houseEnum[id][ho_PSC], FormatNumber(houseEnum[id][ho_BuyPrice]));
		}
	}

	if(IsValidDynamic3DTextLabel(houseEnum[id][ho_Label]))
	{
		UpdateDynamic3DTextLabelText(houseEnum[id][ho_Label], 0xffffffff, str);
	}
	else
	{
	    houseEnum[id][ho_Label] =
			CreateDynamic3DTextLabel(str, 0xffffffff, houseEnum[id][ho_PosX], houseEnum[id][ho_PosY], houseEnum[id][ho_PosZ] + 0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, houseEnum[id][ho_PosVirtualWorld], houseEnum[id][ho_PosInterior], -1, 5.0, -1, 0);
	}

	return 1;
}

DestroyDynamicHouse(id)
{
	if(strlen(houseEnum[id][ho_Street]) < 1)
	    return 0;

	DestroyDynamicPickup(houseEnum[id][ho_Pickup]);
	DestroyDynamic3DTextLabel(houseEnum[id][ho_Label]);
	DestroyDynamicArea(houseEnum[id][ho_Area]);

	houseEnum[id][ho_Number] = 0;
	houseEnum[id][ho_PSC] = 0;
	houseEnum[id][ho_PosX] = 0.0;
	houseEnum[id][ho_PosY] = 0.0;
	houseEnum[id][ho_PosZ] = 0.0;
	houseEnum[id][ho_PosAngle] = 0.0;
	houseEnum[id][ho_PosVirtualWorld] = 0;
	houseEnum[id][ho_PosInterior] = 0;
	houseEnum[id][ho_InteriorID] = 0;
	houseEnum[id][ho_IsLocked] = 0;
	houseEnum[id][ho_BuyPrice] = 0;

	format(houseEnum[id][ho_Street], 32, "");
	format(houseEnum[id][ho_City], 32, "");
	format(houseEnum[id][ho_Owner], 30, "");
	format(houseEnum[id][ho_SecOwner], 30, "");

	Iter_Remove(Houses, id);

	return 1;
}

LoadBusinesses()
{

    new
		mql_query[43+25+32];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_businesses");

	mysql_tquery(MYSQL, mql_query, "OnBusinessesLoad");

	return 1;
}

LoadSpeedCameras()
{

    new
		mql_query[43+25+32];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_speedcameras");

	mysql_tquery(MYSQL, mql_query, "OnSpeedCamerasLoad");

	return 1;
}

function OnSpeedCamerasLoad() {

	new
		Float:Pos[6],
		SpeedLimit,
		BaseFine;

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name_int(i, "SpeedLimit", SpeedLimit);
	    cache_get_value_name_int(i, "BaseFine", BaseFine);
	    cache_get_value_name_float(i, "X", Pos[0]);
	    cache_get_value_name_float(i, "Y", Pos[1]);
	    cache_get_value_name_float(i, "Z", Pos[2]);
	    cache_get_value_name_float(i, "RX", Pos[3]);
	    cache_get_value_name_float(i, "RY", Pos[4]);
	    cache_get_value_name_float(i, "RZ", Pos[5]);

	    CreateDynamicSpeedCamera(Pos[0], Pos[1], Pos[2], Pos[3], Pos[4], Pos[5], SpeedLimit, BaseFine);

	}
	return 1;
}

ValidateDegree(&Float:degree)
{
    if(degree < 0.0) {
        while((degree += 360.0) < 0.0) {}
    } else if(degree >= 360) {
        while((degree -= 360.0) >= 360.0) {}
    }
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if(Pizza::DoingJob[playerid])
	{
	    Pizza::DynamicCheckpoint(playerid, checkpointid);
	    
	}
    return 1;
}

opeda_TollBooth(playerid, areaid)
{
    if(isOnTollBooth[playerid] == 0)
        return 0;

	if(areaid != tollBooths_areaex[isOnTollBooth[playerid]])
	    return 0;

	new vid = GetPlayerVehicleID(playerid);
	if(GetVehicleTrailer(vid) != 0)
	    return 0;
	    
	switch(GetVehicleModel(vid))
	{
	    case 	403, 406, 407, 408, 409,
				427, 431, 432, 433, 437,
				444, 455, 456, 486, 508,
				514, 515, 524, 544, 556,
				557, 573, 578, 601, 609:
			return 0;
	}

	KillTimer(tollBooths_timer[isOnTollBooth[playerid]]);
	SetTimerEx("timer_TollMoveBack", 10, false, "ii1", isOnTollBooth[playerid], playerid);
	isOnTollBooth[playerid] = 0;

	return 1;
}

opeda_PCMechanic(playerid, areaid)
{

	if(areaid != PCMechanicArea)
	    return 1;

    upgradeShop_carColor[GetPlayerVehicleID(playerid)][0] = -1;
    upgradeShop_carColor[GetPlayerVehicleID(playerid)][1] = -1;

    DisableRemoteVehicleCollisions(playerid, 1);

    return 1;
}

opeda_Ambient(playerid, areaid)
{
    if(GetPlayerVirtualWorld(playerid) == 0 && audiostream[playerid] == 0 && ambientzone[playerid] < 1)
	{

	    for (new zone=0; zone<MAX_ZONES; zone++) {
			if (areaid==music_zones[zone]) {
				ambientzone[playerid] = zone+1;
				break;
			}
		}

		if(ambientzone[playerid] < 1)
		    return 0;

	    if(IsPlayerInAnyVehicle(playerid)) {
	    	switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
			    case 446, 448, 452, 457, 461, 462, 463, 468, 481, 485, 493, 509, 510, 521, 522, 523, 530, 531, 539, 571, 572, 581: {}
			    default: {
			        new o[4];
	    			GetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), o[0],o[1],o[2],o[3]);
	    			if(o[0] != 0 && o[1] != 0 && o[2] != 0 && o[3] != 0) return 1;
			    }
			}
		}

		PlayAudioStreamForPlayerEx(playerid, music_zones_text[ambientzone[playerid]-1], .ambient = true);
	}
	return 1;
}

fire_OPEDA(playerid,areaid)
{
	//hor_fireId[

	new
		id = -1,

		Float:pX, Float:pY, Float:pZ,
		Float:vX, Float:vY, Float:vZ
	;

	GetPlayerPos(playerid, pX, pY, pZ);
	GetPlayerCameraFrontVector(playerid, vX, vY, vZ);

	vX = pX + vX;
	vY = pY + vY;
	vZ = pZ + vZ;

	for( new i; i < sizeof fdFire; i++ )
	{

		if(fdFire[i][fdfire_Model] == 0)
			continue;

		if(areaid != fdFire[i][fdfire_AreaID])
			continue;

		id = i;

		break;

	}

	if(id != -1)
	{
	    hor_fireId[playerid] = id+1;
	}

	return id;
}

/*new ls_forbidden;
new Float:ls_forbidden_points[] = {
	2280.0,-2314.0,2229.0,-2362.0,2183.0,-2453.0,2185.0,-2508.0,2181.0,-2571.0,2171.0,-2633.0,2131.0,-2677.0,2126.0,-2707.0,2208.0,-2707.0,2145.0,-2760.0,
	1953.0,-2781.0,1595.0,-2782.0,1298.0,-2769.0,1225.0,-2507.0,969.0,-2347.0,893.0,-2091.0,440.0,-2105.0,180.0,-2117.0,85.0,-1956.0,61.0,-1558.0,
	65.0,-1517.0,139.0,-1539.0,197.0,-1468.0,276.0,-1397.0,395.0,-1338.0,506.0,-1253.0,578.0,-1211.0,612.0,-1203.0,665.0,-1170.0,701.0,-1102.0,
	715.0,-1093.0,737.0,-1061.0,779.0,-1038.0,839.0,-1019.0,893.0,-973.0,1005.0,-952.0,1124.0,-939.0,1284.0,-916.0,1413.0,-931.0,1495.0,-930.0,
	1578.0,-885.0,1634.0,-828.0,1670.0,-765.0,1690.0,-658.0,1678.0,-582.0,1622.0,-492.0,1531.0,-442.0,1535.0,-413.0,1604.0,-437.0,1644.0,-460.0,
	1735.0,-471.0,1746.0,-524.0,1734.0,-593.0,1730.0,-663.0,1719.0,-779.0,1772.0,-918.0,1863.0,-989.0,1966.0,-1001.0,2022.0,-941.0,2137.0,-951.0,
	2256.0,-995.0,2313.0,-1023.0,2382.0,-1005.0,2472.0,-996.0,2568.0,-1004.0,2855.0,-1027.0,2856.0,-1141.0,2866.0,-1232.0,2882.0,-1313.0,2891.0,-1368.0,
	2894.0,-1443.0,2894.0,-1497.0,2878.0,-1557.0,2860.0,-1609.0,2841.0,-1678.0,2820.0,-1779.0,2812.0,-1859.0,2720.0,-1880.0,2719.0,-1925.0,2404.0,-1924.0,
	2405.0,-2034.0,2321.0,-2040.0,2284.0,-2064.0,2235.0,-2120.0,2186.0,-2167.0,2153.0,-2198.0,2168.0,-2212.0,2114.0,-2255.0,2110.0,-2303.0,2182.0,-2352.0,
	2249.0,-2291.0,2280.0,-2314.0
};
new lv_forbidden;
new Float:lv_forbidden_points[] = {
	1238.0,1208.0,1242.0,2152.0,1333.0,2277.0,1366.0,2330.0,1386.0,2390.0,1460.0,2436.0,1644.0,2435.0,1861.0,2473.0,2060.0,2536.0,2356.0,2594.0,
	2506.0,2564.0,2634.0,2463.0,2692.0,2332.0,2663.0,2204.0,2626.0,2148.0,2626.0,2087.0,2689.0,1976.0,2696.0,1256.0,2689.0,1084.0,2651.0,991.0,
	2565.0,908.0,2451.0,869.0,2087.0,865.0,2080.0,981.0,2032.0,986.0,1877.0,1083.0,1878.0,1146.0,1459.0,1149.0,1456.0,1206.0,1238.0,1208.0
};
new sf_forbidden;
new Float:sf_forbidden_points[] = {
	-2977.0,-518.0,-2813.0,-480.0,-2728.0,-395.0,-2668.0,-348.0,-2550.0,-317.0,-2406.0,-304.0,-2215.0,-318.0,-2067.0,-320.0,-1985.0,-292.0,-1935.0,-209.0,
	-1920.0,-86.0,-1912.0,94.0,-1889.0,245.0,-1843.0,379.0,-1752.0,489.0,-1571.0,683.0,-1482.0,780.0,-1405.0,858.0,-1449.0,1163.0,-1460.0,1392.0,
	-1719.0,1548.0,-1966.0,1486.0,-2298.0,1430.0,-2575.0,1416.0,-2657.0,1302.0,-2655.0,1270.0,-2715.0,1265.0,-2716.0,1328.0,-2846.0,1313.0,-2990.0,1170.0,
	-2977.0,-518.0
};
new sfx_forbidden;
new Float:sfx_forbidden_points[] = {
	-1739.0,-524.0,-1738.0,-619.0,-1623.0,-687.0,-1236.0,-685.0,-1234.0,-547.0,-1124.0,-392.0,-1145.0,-242.0,-1091.0,-213.0,-1218.0,-24.0,-1159.0,34.0,
	-1250.0,123.0,-1194.0,178.0,-1237.0,232.0,-1003.0,452.0,-1039.0,495.0,-1532.0,650.0,-1584.0,603.0,-1673.0,497.0,-1720.0,445.0,-1784.0,365.0,
	-1823.0,292.0,-1776.0,252.0,-1582.0,197.0,-1481.0,171.0,-1439.0,91.0,-1676.0,-129.0,-1737.0,-230.0,-1739.0,-524.0
};*/

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	/*if(isEntering[playerid]==false&&GetPlayerVirtualWorld(playerid) == 0 && b_playerSpawnedF[playerid]==true&& b_playerIsLogged[playerid]==true&&spawnCheck[playerid]==false && (areaid == ls_forbidden || areaid == lv_forbidden || areaid == sf_forbidden || areaid == sfx_forbidden))
	{
	    SCFM(playerid, COLOR_LIGHTGREEN, "{ SERVER }: Vstúpil si do zakázanej zóny, ak nemá povolenie od administrátora, okamite ju opusti!");
        SCFM(playerid, COLOR_LIGHTGREEN, "{ SERVER }: Administrátori boli informovaní o tvojom vstupe do tejto zóny.");
		isinforbidden[playerid] = true;
	}*/

	fire_OPEDA(playerid,areaid);

    InteractiveNPC::OnEnterArea(playerid, areaid);
    opeda_Boombox(playerid, areaid);
    opeda_Ambient(playerid, areaid);
	opeda_PCMechanic(playerid, areaid);
	opeda_TollBooth(playerid, areaid);
	opeda_SpeedCamera(playerid, areaid);

    foreach( new i : Entrances ) {
	    if(entranceEnum[i][e_posX] == 0 && entranceEnum[i][e_posY] == 0) continue;
		if(entranceEnum[i][e_posVW] != GetPlayerVirtualWorld(playerid)) continue;
		if(entranceEnum[i][e_posINT] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 1.75, entranceEnum[i][e_posX], entranceEnum[i][e_posY], entranceEnum[i][e_posZ])) continue;

		shouldBeInDA[playerid] = true;
		DA[playerid] = areaid;

		format(DA_STRING[playerid], 256, "~w~Pre vstup pouzi prikaz ~b~/enter ~w~alebo stlac tlacidlo ~b~~k~~CONVERSATION_YES~~w~.");
		EnterInfo(playerid, DA_STRING[playerid], 1000, 1);
		return 1;
	}

	foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 1.75, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

        shouldBeInDA[playerid] = true;
        DA[playerid] = areaid;

        if(strlen(businessEnum[i][bz_Owner]) > 3 && businessEnum[i][bz_BuyPrice] > 0)
            format(DA_STRING[playerid], 256, "~y~%s~n~~g~Majitel: ~w~%s~n~~n~~w~/enter",replaceChars(businessEnum[i][bz_Name]), str_replace("_", " ", businessEnum[i][bz_Owner]));
		else if(businessEnum[i][bz_BuyPrice] > 0)
		    format(DA_STRING[playerid], 256, "~y~%s~n~~g~Cena biznisu: ~w~%d$~n~~n~~w~/buybusiness~n~/enter",replaceChars(businessEnum[i][bz_Name]), businessEnum[i][bz_BuyPrice]);
		else
		    format(DA_STRING[playerid], 256, "~y~%s~n~~n~~w~/enter",replaceChars(businessEnum[i][bz_Name]));

		EnterInfo(playerid, DA_STRING[playerid], 1000, 1);
		return 1;
	}

	foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 1.75, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;

        shouldBeInDA[playerid] = true;
        DA[playerid] = areaid;

		if(houseEnum[i][ho_IsRental] == 0)
		{
			if(strlen(houseEnum[i][ho_Owner]) > 3)
				format(DA_STRING[playerid], 256, "~y~%d%s %s~n~~g~Majitel: ~w~%s~n~~n~~w~/enter", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], str_replace("_", " ", houseEnum[i][ho_Owner]));
			else
			    format(DA_STRING[playerid], 256, "~y~%d%s %s~n~~g~Cena domu: ~w~%s$~n~~n~~w~/buyhouse~n~/enter", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], FormatNumber(houseEnum[i][ho_BuyPrice]));
		}
		else
		{
		    if(strlen(houseEnum[i][ho_Owner]) > 3)
				format(DA_STRING[playerid], 256, "~y~%d%s %s~n~~g~Najomnik: ~w~%s~n~~n~~w~/enter", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], str_replace("_", " ", houseEnum[i][ho_Owner]));
			else
			    format(DA_STRING[playerid], 256, "~y~%d%s %s~n~~g~Cena najmu: ~w~%s$/den~n~~n~~w~/renthouse~n~/enter", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], FormatNumber(houseEnum[i][ho_BuyPrice]));
		}

		EnterInfo(playerid, DA_STRING[playerid], 1500, 1);
		return 1;
	}

	foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pX] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 1.75, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;

        shouldBeInDA[playerid] = true;
        DA[playerid] = areaid;

		if(strlen(garageEnum[i][ga_Owner]) > 3)
			format(DA_STRING[playerid], 256, "~y~%d%s %s~n~~g~Majitel: ~w~%s~n~~n~~w~/enter", garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], str_replace("_", " ", garageEnum[i][ga_Owner]));
		else if(garageEnum[i][ga_AssignedHouse] == 0)
		    format(DA_STRING[playerid], 256, "~y~%d%s %s~n~~g~Cena garaze: ~w~%s$~n~~n~~w~/buygarage~n~/enter", garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], FormatNumber(garageEnum[i][ga_BuyPrice]));
		else
		    format(DA_STRING[playerid], 256, "~y~%d%s %s~n~~n~~w~/enter", garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street]);

		EnterInfo(playerid, DA_STRING[playerid], 1500, 1);
		return 1;
	}
	return 1;
}

oplda_AmbientMusic(playerid, areaid)
{
    if(GetPlayerVirtualWorld(playerid) == 0 && audiostream[playerid] == 0 && ambientzone[playerid] > 0)
	{
		for (new zone=0; zone<MAX_ZONES; zone++) {
			if (areaid==music_zones[zone]) {
			    ambientzone[playerid] = 0;
				StopAudioStreamForPlayerEx(playerid);
				break;
			}
		}
	}
	return 1;
}

fire_OPLDA(playerid, areaid)
{

	if(hor_fireId[playerid] < 1)
	    return 0;

	if(areaid == fdFire[hor_fireId[playerid]-1][fdfire_AreaID])
	{
	    hor_fireId[playerid] = -1;
	    return 1;
	}

	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, STREAMER_TAG_AREA areaid) {
    /*if(isinforbidden[playerid]==true&&GetPlayerVirtualWorld(playerid) == 0 && b_playerIsLogged[playerid]==true&&spawnCheck[playerid]==false && (areaid == ls_forbidden || areaid == lv_forbidden || areaid == sf_forbidden || areaid == sfx_forbidden))
    {
        SCFM(playerid, COLOR_LIGHTGREEN, "{ SERVER }: Opustil si zakázanú zónu!");
		isinforbidden[playerid] = false;
	}*/

	if(carDeer[playerid] !=-1)
	{
	    if(areaid == DeerData[carDeer[playerid]][deerenum_Area])
	    {
	        carDeer[playerid] = -1;
	    }
	}

	fire_OPLDA(playerid, areaid);

    InteractiveNPC::OnLeaveArea(playerid, areaid);
    oplda_AmbientMusic(playerid, areaid);
    oplda_Boombox(playerid, areaid);

	if(areaid == PCMechanicArea)
	{

	    ChangeVehicleColor(GetPlayerVehicleID(playerid), vEnum[GetPlayerVehicleID(playerid)][v_Color_1], vEnum[GetPlayerVehicleID(playerid)][v_Color_2]);

        upgradeShop_carColor[GetPlayerVehicleID(playerid)][0] = -1;
        upgradeShop_carColor[GetPlayerVehicleID(playerid)][1] = -1;

		DisableRemoteVehicleCollisions(playerid, 0);
	}

    return 1;
}

GetPlayerDynamicSpeedCam(playerid) {
	for(new i; i < MAX_SPEED_CAMERAS; i++) {

	    if(spdcamEnum[i][scam_SpeedLimit] < 1)
	        continue;

	    if(spdcamEnum[i][scam_X] == 0 && spdcamEnum[i][scam_Y] == 0 && spdcamEnum[i][scam_Z] == 0)
			continue;

	    if(!IsPlayerInDynamicArea(playerid, spdcamEnum[i][scam_AreaID]))
			continue;

	    return i;
	}
	return -1;
}

GetPlayerNearestATM(playerid) {

	new Float:dist = 9999999.9, id = -1, Float:newdist = 0.0, Float:P[3];

	GetPlayerPos(playerid, P[0], P[1], P[2]);

	for(new i; i < MAX_ATM; i++) {
	    if(atmEnum[i][atm_posX] == 0 && atmEnum[i][atm_posY] == 0 && atmEnum[i][atm_posZ] == 0)
			continue;

		if(atmEnum[i][atm_posVW] != GetPlayerVirtualWorld(playerid) || atmEnum[i][atm_posINT] != GetPlayerInterior(playerid))
			continue;

		newdist = GetDistance(P[0], P[1], P[2], atmEnum[i][atm_posX], atmEnum[i][atm_posY], atmEnum[i][atm_posZ]);

		if(newdist < dist)
		{

		    dist = newdist;
		    id = i;

		}
	}
	return id;
}

GetPlayerDynamicATM(playerid) {
	for(new i; i < MAX_ATM; i++) {
	    if(atmEnum[i][atm_posX] == 0 && atmEnum[i][atm_posY] == 0 && atmEnum[i][atm_posZ] == 0)
			continue;

	    if(!IsPlayerInDynamicArea(playerid, atmEnum[i][atm_AreaID]))
			continue;

	    return i;
	}
	return -1;
}

CreateDynamicSpeedCamera(Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, speedlimit = 60, basefine = DEFAULT_BASE_FINE)
{

    new
	    i = -1;

	for(new freeSlot; freeSlot < MAX_SPEED_CAMERAS; freeSlot ++)
	{
	    if(spdcamEnum[freeSlot][scam_SpeedLimit] < 1)
		{
			i = freeSlot;

			break;
		}
	}

	if(i == -1)
	    return printf("Speed Camera System Error; Nepodarilo sa vytvorit kameru! Nie je volny slot.");

	spdcamEnum[i][scam_X] = x;
	spdcamEnum[i][scam_Y] = y;
	spdcamEnum[i][scam_Z] = z;
	spdcamEnum[i][scam_RX] = rx;
	spdcamEnum[i][scam_RY] = ry;
	spdcamEnum[i][scam_RZ] = rz;
	spdcamEnum[i][scam_SpeedLimit] = speedlimit;
	spdcamEnum[i][scam_BaseFine] = basefine;

	spdcamEnum[i][scam_ObjectID] = CreateDynamicObject(18880,
		x, y, z, rx, ry, rz, -1, -1, -1, 300, 300, -1, 10);

    SetDynamicObjectMaterial(spdcamEnum[i][scam_ObjectID], 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	SetDynamicObjectMaterial(spdcamEnum[i][scam_ObjectID], 2, 16640, "a51", "Metalox64", 0x00000000);

	spdcamEnum[i][scam_AreaID] = CreateDynamicSphere(x, y, z, 12.0, -1, -1, -1);

	return 1;
}

LoadActors()
{

    new
		mql_query[43+25+32];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_actors");

	mysql_tquery(MYSQL, mql_query, "OnActorsLoad");

	return 1;
}

function OnActorsLoad() {

	new
	    uid,
	    Skin,
	    ALabel[128],
	    Float:Pos[4],
	    VirtualWorld,
	    AnimName[32],
	    AnimIndex;

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name_int(i, "uid", uid);
	    cache_get_value_name_int(i, "Skin", Skin);
	    cache_get_value_name(i, "Label", ALabel, 128);
	    cache_get_value_name_float(i, "X", Pos[0]);
	    cache_get_value_name_float(i, "Y", Pos[1]);
	    cache_get_value_name_float(i, "Z", Pos[2]);
	    cache_get_value_name_float(i, "Angle", Pos[3]);
	    cache_get_value_name_int(i, "VirtualWorld", VirtualWorld);
	    cache_get_value_name(i, "AnimName", AnimName);
	    cache_get_value_name_int(i, "AnimNumber", AnimIndex);

	    CreateServerActor(Skin, Pos[0], Pos[1], Pos[2], Pos[3], VirtualWorld, ALabel, AnimName, AnimIndex);

	}
	return 1;
}

GetPlayerServerActor(playerid) {
	for(new i; i < MAX_ACTORS; i++) {
	    if(actorEnum[i][act_PosX] == 0 && actorEnum[i][act_PosY] == 0 && actorEnum[i][act_PosZ] == 0) continue;
	    if(actorEnum[i][act_VirtualWorld] != -1 && actorEnum[i][act_VirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
	    if(!IsPlayerInRangeOfPoint(playerid, 2.5, actorEnum[i][act_PosX], actorEnum[i][act_PosY], actorEnum[i][act_PosZ])) continue;
	    return i;
	}
	return -1;
}

CreateServerActor(skinid, Float:x, Float:y, Float:z, Float:angle = 0.0, VirtualWorld = 0, Label[] = "", AnimName[] = "", AnimNumber = 0) {
	//if(uniqueid < 1)


	if(skinid < 0 || skinid > 311)
	    return printf("Actor System Error; Nepodarilo sa vytvorit actora! Zle id skinu (%d).", skinid);

	new
	    i = -1;

	for(new freeSlot; freeSlot < MAX_ACTORS; freeSlot ++)
	{
	    if(actorEnum[freeSlot][act_UniqueID] < 1)
		{

			i = freeSlot;

			break;
		}
	}

	if(i == -1)
	    return printf("Actor System Error; Nepodarilo sa vytvorit actora! Nie je volny slot.");

	actorEnum[i][act_UniqueID] = i+1;
	actorEnum[i][act_Skin] = skinid;
	actorEnum[i][act_PosX] = x;
	actorEnum[i][act_PosY] = y;
	actorEnum[i][act_PosZ] = z;
	actorEnum[i][act_PosA] = angle;
	actorEnum[i][act_VirtualWorld] = VirtualWorld;
	actorEnum[i][act_AnimNumber] = AnimNumber;
	format(actorEnum[i][act_AnimName], 32, AnimName);
	format(actorEnum[i][act_Label], 128, Label);

	actorEnum[i][act_ActorID] = CreateDynamicActor(skinid, x, y, z, angle);
 	SetDynamicActorVirtualWorld(actorEnum[i][act_ActorID], VirtualWorld);

	if(strlen(Label) > 1)
	{
        actorEnum[i][act_LabelID] = CreateDynamic3DTextLabel(Label, 0xFFFFFFFF, x, y, z + 0.075, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1, -1, 30.0, -1, 1);
	}

	if(strlen(actorEnum[i][act_AnimName]) > 2)
	{

		for( new xd; xd < sizeof(A_animIndexes); xd ++)
		{
		    if(strcmp(actorEnum[i][act_AnimName], A_animIndexes[xd][0], true))
		        continue;

			if(A_animIndexes[xd][1][0] != AnimNumber)
			    continue;

            ApplyDynamicActorAnimation(
				actorEnum[i][act_ActorID], A_animIndexes[xd][2], A_animIndexes[xd][3], A_animIndexes[xd][4][0],
				A_animIndexes[xd][5][0], A_animIndexes[xd][6][0], A_animIndexes[xd][7][0],
				A_animIndexes[xd][8][0], A_animIndexes[xd][9][0]
			);

			break;
		}

	}

	return 1;

}

function OnBusinessesLoad()
{

	new
	    Name[ 255 ],
	    Owner[ 30 ],
	    SecOwner[ 30 ],
		Float:Pos[ 4 ],
		PosWorlds[ 2 ],
		VirtualWorld,
		InteriorID,
		IsLocked,
		MusicAddress[ 255 ],
		BuyPrice,
		BusinessType,
		EntryFee = 0,
		Storage = 0,
		tovar;

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name(i, "Name", Name);
	    cache_get_value_name(i, "Owner", Owner);
	    cache_get_value_name(i, "SecOwner", SecOwner);
	    cache_get_value_name_float(i, "PosX", Pos[0]);
	    cache_get_value_name_float(i, "PosY", Pos[1]);
	    cache_get_value_name_float(i, "PosZ", Pos[2]);
	    cache_get_value_name_float(i, "PosAngle", Pos[3]);
	    cache_get_value_name_int(i, "PosVirtualWorld", PosWorlds[0]);
	    cache_get_value_name_int(i, "PosInterior", PosWorlds[1]);
	    cache_get_value_name_int(i, "VirtualWorld", VirtualWorld);
	    cache_get_value_name_int(i, "InteriorID", InteriorID);
	    cache_get_value_name_int(i, "IsLocked", IsLocked);
	    cache_get_value_name(i, "MusicAddress", MusicAddress);
	    cache_get_value_name_int(i, "BuyPrice", BuyPrice);
	    cache_get_value_name_int(i, "BusinessType", BusinessType);
	    cache_get_value_name_int(i, "EntryFee", EntryFee);
	    cache_get_value_name_int(i, "Storage", Storage);
	    cache_get_value_name_int(i, "Tovar", tovar);

	    /*if(strfind("_", Owner, true) != -1){
		    mysql_format(MYSQL, isValidPlayer, 128, "SELECT Username FROM char_main WHERE Username = '%e'", Owner);
			new
				Cache:exC = mysql_query(MYSQL, isValidPlayer);
			if(cache_num_rows() < 1){
			    cache_delete(exC);
				Owner[0] = 0;
			}
		}*/

	    CreateDynamicBusiness(
			VirtualWorld, Name, Owner, Pos[0], Pos[1], Pos[2], Pos[3],
			PosWorlds[0], PosWorlds[1], InteriorID, IsLocked, MusicAddress,
			BuyPrice, BusinessType, EntryFee, Storage, SecOwner, tovar
		);

		pocetBiznisov ++;
	}
	return 1;
}

ReloadBusinessLabel(id)
{
    new
		str[ 255+30 ],
		islocked = businessEnum[id][bz_IsLocked],
		entryfee = businessEnum[id][bz_EntryFee];

	if(islocked == 1)
	{
	    if(entryfee > 0)
	    {

	        format(str, sizeof(str), "{ee5f5f}%s\n{e1e1e1}Vstupný poplatok: %d$", businessEnum[id][bz_Name], entryfee);

	    }
	    else
	    {

	        format(str, sizeof(str), "{ee5f5f}%s", businessEnum[id][bz_Name]);

	    }
	}
	else
	{
	    if(entryfee > 0)
	    {

	        format(str, sizeof(str), "{67ea7d}%s\n{e1e1e1}Vstupný poplatok: %d$", businessEnum[id][bz_Name], entryfee);

	    }
	    else
	    {

	        format(str, sizeof(str), "{4493ec}%s", businessEnum[id][bz_Name]);

	    }
	}

	if(IsValidDynamic3DTextLabel(businessEnum[id][bz_Label]))
	{
		UpdateDynamic3DTextLabelText(businessEnum[id][bz_Label], 0xffffffff, str);
	}
	else
	{
	    businessEnum[id][bz_Label] =
			CreateDynamic3DTextLabel(str, 0xffffffff, businessEnum[id][bz_PosX], businessEnum[id][bz_PosY], businessEnum[id][bz_PosZ] + 0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, businessEnum[id][bz_PosVirtualWorld], businessEnum[id][bz_PosInterior], -1, 5.0, -1, 0);
	}

	return 1;
}

ShowPlayerBusinessInfo(playerid, id)
{

	new
		string[128],
		lock[24];

	if(businessEnum[id][bz_IsLocked] == 1)
	    format(lock, 24, "{f48989}Zamknuté");
	else
	    format(lock, 24, "{6dfb68}Odomknuté");

	format(string, 128, "> Informácie o biznise %s <", businessEnum[id][bz_Name]);
	SendClientMessage(playerid, COLOR_GREEN2, string);

	format(string, 128, "> Názov: {6dfb68}%s", businessEnum[id][bz_Name]);
	SendClientMessage(playerid, 0xeeeeeeFF, string);

	format(string, 128, "> Majitel: {6dfb68}%s", businessEnum[id][bz_Owner]);
	SendClientMessage(playerid, 0xeeeeeeFF, string);

	if(GetPlayerAdminLevel(playerid) > 3 || !strcmp(businessEnum[id][bz_Owner], ReturnName(playerid), false) || !strcmp(businessEnum[id][bz_SecOwner], ReturnName(playerid), false))
	{
	    if(strlen(businessEnum[id][bz_SecOwner]) > 6) format(string, 128, "> Náhradné klúèe: {f48989}%s", businessEnum[id][bz_SecOwner]);
	    else format(string, 128, "> Náhradné klúèe: {6dfb68}Nikto");
		SendClientMessage(playerid, 0xeeeeeeFF, string);

		format(string, 128, "> ID biznisu: {6dfb68}%d", businessEnum[id][bz_Address]);
		SendClientMessage(playerid, 0xeeeeeeFF, string);
	}

	format(string, 128, "> Vstupný poplatok: {6dfb68}%d$", businessEnum[id][bz_EntryFee]);
	SendClientMessage(playerid, 0xeeeeeeFF, string);

    if(GetPlayerAdminLevel(playerid) > 3 || !strcmp(businessEnum[id][bz_Owner], ReturnName(playerid), false) || !strcmp(businessEnum[id][bz_SecOwner], ReturnName(playerid), false))
	{
	    format(string, 128, "> Peniaze v kase: {6dfb68}%d$", businessEnum[id][bz_Storage]);
		SendClientMessage(playerid, 0xeeeeeeFF, string);

		format(string, 128, "> Tovar: {6dfb68}%d nákupov (%s)", businessEnum[id][bz_Tovar], A_cargoTypes[businessEnum[id][bz_BusinessType]]);
		SendClientMessage(playerid, 0xeeeeeeFF, string);
	}

	format(string, 128, "> Zámok: %s", lock);
	SendClientMessage(playerid, 0xeeeeeeFF, string);

	if((GetPlayerAdminLevel(playerid) > 4) || (businessEnum[id][bz_BuyPrice] > 0 && !strcmp(businessEnum[id][bz_Owner], "Ne", false)))
	{
	    format(string, 128, "> Cena biznisu: {6dfb68}%d$", businessEnum[id][bz_BuyPrice]);
		SendClientMessage(playerid, 0xeeeeeeFF, string);
	}
	return;

}

DestroyDynamicBusiness(id)
{
	if(strlen(businessEnum[id][bz_Name]) < 1)
	    return 0;

	DestroyDynamicPickup(businessEnum[id][bz_Pickup]);
	DestroyDynamic3DTextLabel(businessEnum[id][bz_Label]);
	DestroyDynamicArea(businessEnum[id][bz_Area]);

	businessEnum[id][bz_Address] = 0;
	businessEnum[id][bz_PosX] = 0.0;
	businessEnum[id][bz_PosY] = 0.0;
	businessEnum[id][bz_PosZ] = 0.0;
	businessEnum[id][bz_PosAngle] = 0.0;
	businessEnum[id][bz_PosVirtualWorld] = 0;
	businessEnum[id][bz_PosInterior] = 0;
	businessEnum[id][bz_InteriorID] = 0;
	businessEnum[id][bz_IsLocked] = 0;
	businessEnum[id][bz_BuyPrice] = 0;
	businessEnum[id][bz_BusinessType] = 0;
	businessEnum[id][bz_EntryFee] = 0;
	businessEnum[id][bz_Storage] = 0;
	businessEnum[id][bz_Tovar] = 0;

	format(businessEnum[id][bz_Name], 255, "");
	format(businessEnum[id][bz_Owner], 30, "");
	format(businessEnum[id][bz_SecOwner], 30, "");
	format(businessEnum[id][bz_MusicAddress], 255, "");

	Iter_Remove(Businesses, id);

	return 1;
}

CreateDynamicBusiness(
	address, name[], owner[], Float:x, Float:y, Float:z, Float:angle,
	virtualworld, interior, interiorid, islocked = 0, musicaddress[] = "",
	buyprice = 0, businesstype = 0, entryfee = 25, storage = 0, secOwn[] = "", tovar = 0
)
{

	new id = -1;
	for(new i; i < MAX_BUSINESSES; i++) {
	    if(strlen(businessEnum[i][bz_Name]) > 2) continue;
	    id = i;
	    break;
	}
	if(id == -1) return printf("Business System Error; Nepodarilo sa vytvorit busines [%s]! Nie je volny slot!", name);

	z -= 0.1;

    businessEnum[id][bz_Address] = address;
	businessEnum[id][bz_PosX] = x;
	businessEnum[id][bz_PosY] = y;
	businessEnum[id][bz_PosZ] = z;
	businessEnum[id][bz_PosAngle] = angle;
	businessEnum[id][bz_PosVirtualWorld] = virtualworld;
	businessEnum[id][bz_PosInterior] = interior;
	businessEnum[id][bz_InteriorID] = interiorid;
	businessEnum[id][bz_IsLocked] = islocked;
	businessEnum[id][bz_BuyPrice] = buyprice;
	businessEnum[id][bz_BusinessType] = businesstype;
	businessEnum[id][bz_EntryFee] = entryfee;
	businessEnum[id][bz_Storage] = storage;
	businessEnum[id][bz_Tovar] = tovar;

	if(strlen(owner) < 3) format(owner, 30, "Ne");
	if(strlen(secOwn) < 3) format(secOwn, 30, "Ne");

	format(businessEnum[id][bz_Name], 255, name);
	format(businessEnum[id][bz_Owner], 30, owner);
	format(businessEnum[id][bz_SecOwner], 30, secOwn);
	format(businessEnum[id][bz_MusicAddress], 255, musicaddress);

	new
		str[ 255+30 ];

	if(islocked == 1)
	{
	    if(entryfee > 0)
	    {

	        format(str, sizeof(str), "{ee5f5f}%s\n{e1e1e1}Vstupný poplatok: %d$", name, entryfee);

	    }
	    else
	    {

	        format(str, sizeof(str), "{ee5f5f}%s", name);

	    }
	}
	else
	{
	    if(entryfee > 0)
	    {

	        format(str, sizeof(str), "{67ea7d}%s\n{e1e1e1}Vstupný poplatok: %d$", name, entryfee);

	    }
	    else
	    {

	        format(str, sizeof(str), "{4493ec}%s", name);

	    }
	}

	businessEnum[id][bz_Pickup] = CreateDynamicPickup(1273, 1, x, y, z, virtualworld, interior, -1, 50.0, -1, 0);
	businessEnum[id][bz_Label] = CreateDynamic3DTextLabel(str, 0xffffffff, x, y, z + 0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, virtualworld, interior, -1, 8.0, -1, 0);
    businessEnum[id][bz_Area] = CreateDynamicSphere(x, y, z, 1.7, virtualworld, interior, -1);

    Iter_Add(Businesses, id);

	return id;
}

LoadEntrances() {
    new mql_query[43+25+32];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_entrances");

	new Cache:q = mysql_query(MYSQL, mql_query);

	new Float:Pos[4], address, Worlds[2], name[144],interior;
	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name(i, "Label", name);
	    cache_get_value_name_float(i, "X", Pos[0]);
	    cache_get_value_name_float(i, "Y", Pos[1]);
	    cache_get_value_name_float(i, "Z", Pos[2]);
	    cache_get_value_name_float(i, "A", Pos[3]);
	    cache_get_value_name_int(i, "VW", Worlds[0]);
	    cache_get_value_name_int(i, "INT", Worlds[1]);
	    cache_get_value_name_int(i, "Pickup", address);
	    cache_get_value_name_int(i, "InteriorID", interior);

	    CreateDynamicEntrance(Pos[0], Pos[1], Pos[2], Pos[3], Worlds[0], Worlds[1], interior, name, address);
	}

	cache_delete(q);

	return 1;
}

CreateDynamicEntrance(Float:x, Float:y, Float:z, Float:a, vw, interior, interiorid, name[], pickup) {
	new hid = -1;
	for(new i; i < MAX_ENTRANCES; i++) {
	    if(strlen(entranceEnum[i][e_Name]) > 2) continue;
	    hid = i;
	    break;
	}
	if(hid == -1) return printf("Entrance System Error; Nepodarilo sa vytvorit entrance [%s]! Nie je volny slot!", name);

	z -= 0.1;

	entranceEnum[hid][e_posX] = x;
	entranceEnum[hid][e_posY] = y;
	entranceEnum[hid][e_posZ] = z;
	entranceEnum[hid][e_posA] = a;
	entranceEnum[hid][e_posVW] = vw;
	entranceEnum[hid][e_posINT] = interior;
	entranceEnum[hid][e_InteriorID] = interiorid;
	entranceEnum[hid][e_Address] = 30000+hid;
	format(entranceEnum[hid][e_Name], 84, name);

	new str[144];
	format(str, 144, "%s", name);

	entranceEnum[hid][e_Pickup] = CreateDynamicPickup(pickup, 1, x, y, z, vw, interior, -1, 15.0, -1, 0);
	entranceEnum[hid][e_Label] = CreateDynamic3DTextLabel(str, 0x4493ecff, x, y, z + 0.5, 6.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, vw, interior, -1, 7.5, -1, 0);

	Iter_Add(Entrances, hid);

	return 1;
}

GetDropTypeName(droptype)
{

	new dropName[32];

	switch(droptype)
	{
	    case 1:
			format(dropName, 32, "Zbraò");

		case 2:
			format(dropName, 32, "Peniaze");

        case 3:
			format(dropName, 32, "Vesta");

        case 4:
			format(dropName, 32, "Páèidlo");

        case 5:
			format(dropName, 32, "Lano");

		case 6:
			format(dropName, 32, "Vrece");

        case 7:
			format(dropName, 32, "Putá");

        case 8:
			format(dropName, 32, "Marihuana");

        case 9:
			format(dropName, 32, "Semienko marihuany");

        case 10:
			format(dropName, 32, "Náboje");

        case 11:
			format(dropName, 32, "Bandá");

		case 12:
		    format(dropName, 32, "Rezervné koleso");

		case 13:
		    format(dropName, 32, "Semeno marihuany Phatt Fruity");

        case 14:
		    format(dropName, 32, "Semeno marihuany Amnesia Haze");

        case 15:
		    format(dropName, 32, "Semeno marihuany Sour Diesel");

        case 16:
		    format(dropName, 32, "Hnojivo");

        case 17:
		    format(dropName, 32, "F¾aa s Leanom");

        case 18:
		    format(dropName, 32, "Actavis Promethazine");

		default:
		    format(dropName, 32, "N/A");
	}

	return dropName;
}

GetWeaponDropData(dropDetail, &dropModel, &Float:ex_RX, &Float:ex_RY, &Float:Z)
{

	#pragma unused ex_RY

	Z -= 1.0;

	switch(dropDetail)
	{
		case 1: dropModel = 331;
	    case 2: dropModel = 333;
	    case 3: dropModel = 334;
	    case 4: dropModel = 335;
	    case 5: dropModel = 336;
	    case 6: dropModel = 337;
	    case 7: dropModel = 338;
	    case 8: dropModel = 339;
	    case 9: dropModel = 341;
	    case 10: dropModel = 321;
	    case 11: dropModel = 322;
	    case 12: dropModel = 323;
	    case 13: dropModel = 324;
	    case 14: dropModel = 325;
	    case 15: dropModel = 326;
	    case 16: dropModel = 342;
	    case 17: dropModel = 343;
	    case 18: dropModel = 344, ex_RX = 0;
	    case 22: dropModel = 346;
	    case 23: dropModel = 347;
	    case 24: dropModel = 348;
	    case 25: dropModel = 349;
	    case 26: dropModel = 350;
	    case 27: dropModel = 351;
	    case 28: dropModel = 352;
	    case 29: dropModel = 353;
	    case 30: dropModel = 355;
	    case 31: dropModel = 356;
	    case 32: dropModel = 372;
	    case 33: dropModel = 357;
	    case 34: dropModel = 358;
	    case 35: dropModel = 359;
	    case 36: dropModel = 360;
	    case 37: dropModel = 361;
	    case 38: dropModel = 362;
	    case 39: dropModel = 363;
	    case 40: dropModel = 364;
	    case 41: dropModel = 365;
        case 42: dropModel = 366;
        case 43: dropModel = 367;
        case 44: dropModel = 368;
        case 45: dropModel = 369;
        case 46: dropModel = 371;

        default:
            return 0;
	}

	return 1;
}

GetDropData(dropType, &dropModel, &Float:ex_RX, &Float:ex_RY, &Float:Z)
{

    // ** Drop types: **
	// 1 - weapon
	// 2 - cash
	// 3 - armour
	// 4 - crowbar / pacidlo
	// 5 - srobovak
	// 6 - vrece

	#pragma unused ex_RX
	#pragma unused ex_RY

	switch(dropType)
	{
	    case 2: dropModel = 1212, Z -= 1.0;
	    case 3: dropModel = 19515, Z -= 0.85;
	    case 4: dropModel = 18634, Z -= 0.9, ex_RX = 90.0;
	    case 5: dropModel = 19089, Z -= 0.9;
	    case 6: dropModel = 2060, Z -= 0.9;
     	case 7: dropModel = 19418, Z -= 0.9, ex_RY = 90.0;
     	case 8: dropModel = 1578, Z -= 0.8;//unused
     	case 9: dropModel = 2663, Z -= 0.8;//unused
     	case 10: dropModel = 3016, Z -= 0.8;
     	case 11: dropModel = 11747, Z -= 1.0, ex_RX = 90.0;
     	case 12: dropModel = 1098, Z -= 0.7;
        case 13: dropModel = 1575, Z -= 0.8;
        case 14: dropModel = 1575, Z -= 0.8;
        case 15: dropModel = 1575, Z -= 0.8;
        case 16: dropModel = 1576, Z -= 0.8;
        case 17: dropModel = -1033, Z -= 1.0;
        case 18: dropModel = -1032, Z -= 0.97;
        case 1005: dropModel = 1271, Z -= 0.65;

		default:
		    return 0;
	}

	return 1;

}

LoadDrops() {
    new mql_query[43+25+32];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_drops");

	new Cache:q = mysql_query(MYSQL, mql_query);

	new
	    dropType,
	    dropDetail,
	    dropCount,
	    Float:X,
	    Float:Y,
	    Float:Z,
	    Float:RZ,
	    VirtualWorld,
	    Interior,
	    PlacedBy[30],
	    Date[32],
		dropFaction,
		objid,
		dropText[32],

		serialnumber,
		origin[128];

	for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

		cache_get_value_name_int(i, "dropType", dropType);
		cache_get_value_name_int(i, "dropDetail", dropDetail);
		cache_get_value_name_int(i, "dropCount", dropCount);
	    cache_get_value_name_float(i, "X", X);
	    cache_get_value_name_float(i, "Y", Y);
	    cache_get_value_name_float(i, "Z", Z);
	    cache_get_value_name_float(i, "RZ", RZ);
	    cache_get_value_name_int(i, "VirtualWorld", VirtualWorld);
	    cache_get_value_name_int(i, "Interior", Interior);
	    cache_get_value_name(i, "PlacedBy", PlacedBy);
	    cache_get_value_name(i, "Date", Date);
	    cache_get_value_name_int(i, "dropFaction", dropFaction);
	    cache_get_value_name_int(i, "object", objid);
	    cache_get_value_name(i, "dropText", dropText);
	    
	    cache_get_value_name_int(i, "serialnum", serialnumber);
	    cache_get_value_name(i, "origin", origin);

	    CreateDynamicDrop(dropType, dropDetail, dropCount, X, Y, Z, RZ, VirtualWorld, Interior, PlacedBy, Date, dropFaction, dropText, 0, objid, serialnumber, origin);
	}

	cache_delete(q);

	return 1;
}

GetDrugDropData(dropDetail, &dropModel, dropCount, &Float:ex_RX, &Float:ex_RY, &Float:Z)
{

	#pragma unused ex_RX
	#pragma unused ex_RY

	switch(dropDetail)
	{
		case 0..2:
		{
			if(dropCount < 30)
			    dropModel = -1019, Z -= 1.0, ex_RX += 90.0;
			else if(dropCount >= 30 && dropCount < 100)
			    dropModel = -1004, Z -= 1.0, ex_RX += 90.0;
			else
			    dropModel = -1013, Z -= 1.0, ex_RX += 90.0;
		}

        default:
            return 0;
	}

	return 1;
}

CreateDynamicDrop(dropType, dropDetail, dropCount, Float:X, Float:Y, Float:Z, Float:RZ, VirtualWorld, Interior, PlacedBy[], Date[] = "", dropFaction = 0, dropText[] = "", writetodb = 0, objectid = -1, w_serialnum=0,w_origin[]="",w_iswork=0,w_ispermit=0)
{
    new did = -1;
	for(new i; i < MAX_DROPS; i++) {
	    if(strlen(dropEnum[i][drop_PlacedBy]) > 2) continue;
	    did = i;
	    break;
	}
	if(did == -1) return printf("Drop System Error; Nepodarilo sa vytvorit novy drop! Nie je volny slot!");

	new
	    dropModel = objectid,
	    Float:ex_RX = 90.0,
		Float:ex_RY = 0.0;

	// ** Drop types: **
	// 1 - weapon
	// 2 - cash
	// 3 - armour
	// 4 - crowbar / pacidlo
	// 5 - srobovak

	if(writetodb == 1)
	{
	    new
	        query[2048];

		mysql_format(MYSQL, query, 2048, "INSERT INTO gm_drops (dropType, dropDetail, dropCount, X, Y, Z, RZ, VirtualWorld, Interior, PlacedBy, Date, dropFaction, dropText, object, serialnum, origin,iswork,isperm) VALUES ('%d', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%e', '%e', '%d', '%e', '%d', '%d', '%e','%d','%d')",
		    dropType, dropDetail, dropCount, X, Y, Z, RZ, VirtualWorld, Interior, PlacedBy, Date, dropFaction, dropText, objectid, w_serialnum, w_origin,w_iswork,w_ispermit);

		mysql_query(MYSQL, query, false);
	}

	dropEnum[did][drop_Z] = Z;

	if(dropModel == -1)
	{
		if(dropType == 1)
		    GetWeaponDropData(dropDetail, dropModel, ex_RX, ex_RY, Z);
	    else if(dropType == 1000)
		    GetDrugDropData(dropDetail, dropModel, dropCount, ex_RX, ex_RY, Z);
		else
		    GetDropData(dropType, dropModel, ex_RX, ex_RY, Z);
	}

	dropEnum[did][drop_X] = X;
	dropEnum[did][drop_Y] = Y;
	dropEnum[did][drop_RZ] = RZ;
	dropEnum[did][drop_VirtualWorld] = VirtualWorld;
	dropEnum[did][drop_Interior] = Interior;
	
	dropEnum[did][drop_SerialNumber] = w_serialnum;
	dropEnum[did][drop_IsWorkWeap] = w_iswork;
	dropEnum[did][drop_IsPermitWeap] = w_ispermit;

	dropEnum[did][drop_Type] = dropType;
	dropEnum[did][drop_Detail] = dropDetail;
	dropEnum[did][drop_Count] = dropCount;

	dropEnum[did][drop_Faction] = dropFaction;
	dropEnum[did][drop_Model]   = dropModel;

	format(dropEnum[did][drop_PlacedBy], 30, PlacedBy);
    format(dropEnum[did][drop_Origin], 128, w_origin);
	format(dropEnum[did][drop_Date], 32, Date);
	format(dropEnum[did][drop_Text], 32, dropText);

	new
	    labelString[256];

	if(strlen(dropText) > 1)
	{
	    // Drop má dodatoèný názov

	    if(dropType == 1)
		    format(labelString, 256, "{c9c9c9}[ {ffffff}%s {c9c9c9}]\n{ffffff}*%s*\n\n{c9c9c9}/pickup", GetWeaponNameEx(dropDetail), dropText);
        else if(dropType == 1000)
	        format(labelString, 256, "{c9c9c9}[ {ffffff}%s {c9c9c9}]\n(%d %s)\n{c9c9c9}/pickup", drug_getName(dropDetail), dropCount, drug_getUnderName(dropDetail));
	    else if(dropType >= 1200 && dropType < 1300)
	        format(labelString, 256, "{c9c9c9}[ {ffffff}F¾aa alkoholu {c9c9c9}]\n%s\n{c9c9c9}/pickup", dropText);
	    else
	    	format(labelString, 256, "{c9c9c9}[ {ffffff}%s {c9c9c9}]\n{ffffff}*%s*\n\n{c9c9c9}/pickup", GetDropTypeName(dropType), dropText);

	}
	else
	{
	    // Drop nemá dodatoèný názov

	    if(dropType == 1)
	        format(labelString, 256, "{c9c9c9}[ {ffffff}%s {c9c9c9}]\n\n{c9c9c9}/pickup", GetWeaponNameEx(dropDetail));
		else if(dropType == 1000)
	        format(labelString, 256, "{c9c9c9}[ {ffffff}%s {c9c9c9}]\n(%d %s)\n{c9c9c9}/pickup", drug_getName(dropDetail), dropCount, drug_getUnderName(dropDetail));
        else if(dropType == 1005)
	        format(labelString, 256, "{c9c9c9}[ {ffffff}Krabica {c9c9c9}]\n(%s)\n{c9c9c9}/pickup", A_cargoTypes[dropDetail]);
	    else if(dropType == 2)
	        format(labelString, 256, "{c9c9c9}[ {ffffff}%s {c9c9c9}]\n($%.2f)\n{c9c9c9}/pickup", GetDropTypeName(dropType), float(dropCount) / 100.0);
		else
	    	format(labelString, 256, "{c9c9c9}[ {ffffff}%s {c9c9c9}]\n\n{c9c9c9}/pickup", GetDropTypeName(dropType));
	}

	dropEnum[did][drop_LabelID] = CreateDynamic3DTextLabel(labelString, -1, X, Y, Z + 0.3, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, VirtualWorld, Interior, -1, 8.0, -1, 3);
	dropEnum[did][drop_ObjectID] = CreateDynamicObject(dropModel, X, Y, Z, ex_RX, ex_RY, RZ, VirtualWorld, Interior, -1, 40, 30, -1, 3);
	dropEnum[did][drop_AreaID] = CreateDynamicSphere(X, Y, Z, 1.9, VirtualWorld, Interior, -1);

	Iter_Add(Drops, did);

	return 1;
}

DestroyDynamicDrop(dropid)
{
	if(dropEnum[dropid][drop_Type] == 0)
	    return 0;

    new
		query[2048];

	mysql_format(MYSQL, query, 2048, "DELETE FROM gm_drops WHERE X > '%f' AND X < '%f' AND Y > '%f' AND Y < '%f' AND Z > '%f' AND Z < '%f' AND dropType = '%d' AND dropDetail = '%d' AND dropCount = '%d' AND VirtualWorld = '%d' AND Interior = '%d' AND PlacedBy = '%e' LIMIT 1",
		dropEnum[dropid][drop_X]-0.2, dropEnum[dropid][drop_X]+0.2,
	    dropEnum[dropid][drop_Y]-0.2, dropEnum[dropid][drop_Y]+0.2,
		dropEnum[dropid][drop_Z]-0.2, dropEnum[dropid][drop_Z]+0.2,
		dropEnum[dropid][drop_Type],
		dropEnum[dropid][drop_Detail],
		dropEnum[dropid][drop_Count],
		dropEnum[dropid][drop_VirtualWorld],
		dropEnum[dropid][drop_Interior],
		dropEnum[dropid][drop_PlacedBy]);

	mysql_query(MYSQL, query, false);

	dropEnum[dropid][drop_Type] = 0;
	dropEnum[dropid][drop_Detail] = 0;
	dropEnum[dropid][drop_Count] = 0;

	format(dropEnum[dropid][drop_PlacedBy], 30, "");

	DestroyDynamicArea(dropEnum[dropid][drop_AreaID]);
	DestroyDynamic3DTextLabel(dropEnum[dropid][drop_LabelID]);
	DestroyDynamicObject(dropEnum[dropid][drop_ObjectID]);

	Iter_Remove(Drops, dropid);

	return 1;
}

LoadPlayerVehicles()
{
    new mql_query[64];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM char_vehicles WHERE isUnParked = '1'");

	mysql_tquery(MYSQL, mql_query, "OnPlayerVehiclesLoad");
	return 1;
}

function OnPlayerVehiclesLoad() {

	new
	    SPZ[30],
	    Model,
	    Float:X, Float:Y, Float:Z, Float:Angle, VirtualWorld, Interior,
	    Float:pX, Float:pY, Float:pZ, Float:pAngle, pVW, pINT,
	    Color1, Color2,
	    Paintjob,
	    Siren,
		Faction_Legal,
		Faction_Ilegal,
		Float:MileAge,
		Float:Nitrous,
		Fuel,
		Battery,
		Float:Health,
		Float:MaxHealth,
		dmg_Panels,
		dmg_Doors,
		dmg_Lights,
		dmg_Tires,
		tune_Slot[14],
		Owner[30],
		SecondOwner[30],
		params[5],
		wind[4];

	for(new i; i < cache_num_rows(); i++) {
     	cache_get_value_name(i, "SPZ", SPZ);
     	cache_get_value_name(i, "Owner", Owner);
     	cache_get_value_name(i, "SecondOwner", SecondOwner);
     	cache_get_value_name_int(i, "Model", Model);
     	cache_get_value_name_float(i, "X", X);
     	cache_get_value_name_float(i, "Y", Y);
     	cache_get_value_name_float(i, "Z", Z);
     	cache_get_value_name_float(i, "Angle", Angle);
     	cache_get_value_name_int(i, "VirtualWorld", VirtualWorld);
     	cache_get_value_name_int(i, "Interior", Interior);
     	cache_get_value_name_float(i, "Park_X", pX);
     	cache_get_value_name_float(i, "Park_Y", pY);
     	cache_get_value_name_float(i, "Park_Z", pZ);
     	cache_get_value_name_float(i, "Park_A", pAngle);
     	cache_get_value_name_int(i, "Park_VW", pVW);
     	cache_get_value_name_int(i, "Park_INT", pINT);
     	cache_get_value_name_int(i, "Color_1", Color1);
     	cache_get_value_name_int(i, "Color_2", Color2);
     	cache_get_value_name_int(i, "Paintjob", Paintjob);
     	cache_get_value_name_int(i, "Siren", Siren);
     	cache_get_value_name_int(i, "Faction_Legal", Faction_Legal);
     	cache_get_value_name_int(i, "Faction_Ilegal", Faction_Ilegal);
     	cache_get_value_name_float(i, "MileAge", MileAge);
     	cache_get_value_name_float(i, "Nitrous", Nitrous);
     	cache_get_value_name_int(i, "Fuel", Fuel);
     	cache_get_value_name_int(i, "Battery", Battery);
     	cache_get_value_name_float(i, "Health", Health);
     	cache_get_value_name_float(i, "MaxHealth", MaxHealth);
     	cache_get_value_name_int(i, "dmg_Panels", dmg_Panels);
     	cache_get_value_name_int(i, "dmg_Doors", dmg_Doors);
     	cache_get_value_name_int(i, "dmg_Lights", dmg_Lights);
     	cache_get_value_name_int(i, "dmg_Tires", dmg_Tires);

     	cache_get_value_name_int(i, "param_engine", params[0]);
     	cache_get_value_name_int(i, "param_lights", params[1]);
     	cache_get_value_name_int(i, "param_doors", params[2]);
     	cache_get_value_name_int(i, "param_bonnet", params[3]);
     	cache_get_value_name_int(i, "param_boot", params[4]);

     	cache_get_value_name_int(i, "wind_0", wind[0]);
     	cache_get_value_name_int(i, "wind_1", wind[1]);
     	cache_get_value_name_int(i, "wind_2", wind[2]);
     	cache_get_value_name_int(i, "wind_3", wind[3]);

     	for(new id; id < 14; id ++)
     	{
     	    if(id > 13) break;

     	    new
     	        tString[18];

			format(tString, 18, "tune_Slot%d", id);

			cache_get_value_name_int(i, tString, tune_Slot[id]);
     	}

     	if(X > -0.5 && X < 0.5 &&
     	    Y > -0.5 && Y < 0.5 &&
			Z > -0.5 && Z < 0.5)
		{
		    X = 641.148;
		    Y = -499.903;
			Z = 16.078;
			Angle = 270.0;
			VirtualWorld = 0;
			Interior = 0;
		}

		new
		    vehicleid = CreateVehicle(Model, X, Y, Z, Angle, Color1, Color2, -1, Siren);

        cache_get_value_name_int(i, "weapon_1", vehicleInventory_Weapons[vehicleid][0]);
	    cache_get_value_name_int(i, "ammo_1", vehicleInventory_Weapons[vehicleid][1]);
	    cache_get_value_name_int(i, "weapon_2", vehicleInventory_Weapons[vehicleid][2]);
	    cache_get_value_name_int(i, "ammo_2", vehicleInventory_Weapons[vehicleid][3]);
	    cache_get_value_name_int(i, "weapon_3", vehicleInventory_Weapons[vehicleid][4]);
	    cache_get_value_name_int(i, "ammo_3", vehicleInventory_Weapons[vehicleid][5]);

	    cache_get_value_name_int(i, "weed", vehicleInventory[vehicleid][0]);
	    cache_get_value_name_int(i, "weed_seed", vehicleInventory[vehicleid][1]);
	    cache_get_value_name_int(i, "pacidlo", vehicleInventory[vehicleid][2]);
	    cache_get_value_name_int(i, "lano", vehicleInventory[vehicleid][3]);
	    cache_get_value_name_int(i, "vrece", vehicleInventory[vehicleid][4]);
	    cache_get_value_name_int(i, "puta", vehicleInventory[vehicleid][5]);
	    cache_get_value_name_int(i, "rezerva", vehicleInventory[vehicleid][6]);
	    cache_get_value_name_int(i, "SPZDown", vEnum[vehicleid][v_SPZDown]);
	    cache_get_value_name_int(i, "tovar_typ", vEnum[vehicleid][v_CargoType]);
    	cache_get_value_name_int(i, "tovar", vEnum[vehicleid][v_CargoQuantity]);
	    if(vEnum[vehicleid][v_SPZDown] == 0)
			SetVehicleNumberPlate(vehicleid, SPZ);
		else
		    SetVehicleNumberPlate(vehicleid, "_");

		SetVehicleParams(vehicleid, VEHICLE_TYPE_ENGINE, params[0]);
		SetVehicleParams(vehicleid, VEHICLE_TYPE_LIGHTS, params[1]);
		SetVehicleParams(vehicleid, VEHICLE_TYPE_DOORS, params[2]);
		SetVehicleParams(vehicleid, VEHICLE_TYPE_BONNET, params[3]);
		SetVehicleParams(vehicleid, VEHICLE_TYPE_BOOT, params[4]);
		
		vEnum[vehicleid][v_bazar_Price]   = 0;
		vEnum[vehicleid][v_bazar_Buyout]   = 0;
		vEnum[vehicleid][v_bazar_DateAdded]   = 0;
		vEnum[vehicleid][v_bazar_BoughtFor]   = 0;
		format(vEnum[vehicleid][v_bazar_Desc], 256, "");
		format(vEnum[vehicleid][v_bazar_AddedBy], MAX_PLAYER_NAME+1, "");

		CallRemoteFunction("CPS_OnVehicleBootStatusUpdate", "dd", i, params[4]);

		SetVehicleParamsCarWindows(vehicleid, wind[0], wind[1], wind[2], wind[3]);

		format(vEnum[vehicleid][v_SPZ], 24, SPZ);
		format(vEnum[vehicleid][v_Owner], 30, Owner);
		format(vEnum[vehicleid][v_SecOwner], 30, SecondOwner);

		vhac_SetVehicleHealth(vehicleid, Health);
		SetVehicleVirtualWorld(vehicleid, VirtualWorld);
		LinkVehicleToInterior(vehicleid, Interior);
		ChangeVehiclePaintjob(vehicleid, Paintjob);
		SetVehicleFaction(vehicleid, Faction_Legal);
		UpdateVehicleDamageStatus(vehicleid, dmg_Panels, dmg_Doors, dmg_Lights, dmg_Tires);
		for(new id; id < 14; id ++)
		{
		    if(id > 13) break;
		    AddVehicleComponent(vehicleid, tune_Slot[id]);
		}
		vEnum[vehicleid][v_MileAge] = MileAge;
		vEnum[vehicleid][v_Nitrous] = Nitrous;
		vEnum[vehicleid][v_Fuel] = Fuel;
		vEnum[vehicleid][v_FuelType] = vehicleFuelTypes[Model-400];
		vEnum[vehicleid][v_Battery] = Battery;
		vEnum[vehicleid][v_Siren] = Siren;

		vEnum[vehicleid][v_Color_1] = Color1;
		vEnum[vehicleid][v_Color_2] = Color2;

		vEnum[vehicleid][v_Temporary] = false;

		vEnum[vehicleid][v_def_SpawnX] = pX;
		vEnum[vehicleid][v_def_SpawnY] = pY;
		vEnum[vehicleid][v_def_SpawnZ] = pZ;
		vEnum[vehicleid][v_def_SpawnA] = pAngle;
		vEnum[vehicleid][v_def_SpawnVW] = pVW;
		vEnum[vehicleid][v_def_SpawnINT] = pINT;
		
		vEnum[vehicleid][v_bazar_Price] 	= 0;
		vEnum[vehicleid][v_bazar_BoughtFor] = 0;

		if(MaxHealth > 1000.0)
    		vEnum[vehicleid][v_def_Health] = MaxHealth;
		else
		    vEnum[vehicleid][v_def_Health] = 1000.0;


    	cache_get_value_name_int(i, "TaxameterItem", vEnum[vehicleid][v_TaxameterItem]);
    	cache_get_value_name_float(i, "MaxHealth", vEnum[vehicleid][v_def_Health]);
    	cache_get_value_name_int(i, "CarRadio", vEnum[vehicleid][v_CarRadio]);

    	cache_get_value_name_int(i, "AlarmItem", vEnum[vehicleid][v_AlarmItem]);
    	cache_get_value_name_int(i, "NoBreakin", vEnum[vehicleid][v_NoBreakin]);
    	cache_get_value_name_int(i, "PlexWindows", vEnum[vehicleid][v_TitWindows]);
    	cache_get_value_name_float(i, "Oil", vEnum[vehicleid][v_Oil]);

    	cache_get_value_name_int(i, "Sun_LDoor", vEnum[vehicleid][v_Sun_LDoor]);
		cache_get_value_name_int(i, "Sun_RDoor", vEnum[vehicleid][v_Sun_RDoor]);
		cache_get_value_name_int(i, "Sun_Hood", vEnum[vehicleid][v_Sun_Hood]);
		cache_get_value_name_int(i, "Sun_Boot", vEnum[vehicleid][v_Sun_Boot]);
		cache_get_value_name_int(i, "Sun_FBumper", vEnum[vehicleid][v_Sun_FBumper]);
		cache_get_value_name_int(i, "Sun_RBumper", vEnum[vehicleid][v_Sun_RBumper]);

		VehAttachObj(vehicleid);

		if(i == cache_num_rows()) break;
	}
	return 1;
}

LoadATM()
{
    new mql_query[43];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_atms");

	mysql_tquery(MYSQL, mql_query, "OnATMLoad");
	return 1;
}

function OnATMLoad() {

	new
	    Float:X, Float:Y, Float:Z,
	    Float:RX, Float:RY, Float:RZ,
	    VW, Interior;

	for(new i; i < cache_num_rows(); i++) {

     	cache_get_value_name_float(i, "X", X);
     	cache_get_value_name_float(i, "Y", Y);
     	cache_get_value_name_float(i, "Z", Z);
     	cache_get_value_name_float(i, "RX", RX);
     	cache_get_value_name_float(i, "RY", RY);
     	cache_get_value_name_float(i, "RZ", RZ);
        cache_get_value_name_int(i, "VW", VW);
        cache_get_value_name_int(i, "Interior", Interior);

        atmEnum[i][atm_posX] = X;
        atmEnum[i][atm_posY] = Y;
        atmEnum[i][atm_posZ] = Z;
        atmEnum[i][atm_posRX] = RX;
        atmEnum[i][atm_posRY] = RY;
        atmEnum[i][atm_posRZ] = RZ;
        atmEnum[i][atm_posVW] = VW;
        atmEnum[i][atm_posINT] = Interior;

        atmEnum[i][atm_Object] = CreateDynamicObject(19324, X, Y, Z, RX, RY, RZ, VW, Interior, -1, 100.0, 70.0, -1, 1);
        atmEnum[i][atm_AreaID] = CreateDynamicSphere(X, Y, Z, 3.0, VW, Interior, -1);
        atmEnum[i][atm_Label] = CreateDynamic3DTextLabel( "/atm", 0xffffffff, X, Y, Z, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, VW, Interior, -1, 16.0, -1, 0);

		if(i == cache_num_rows()) break;
	}
	return 1;
}

LoadFactionVehicles()
{
    new mql_query[43];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM faction_vehicles");

	mysql_tquery(MYSQL, mql_query, "OnFactionVehiclesLoad");
	return 1;
}

function OnFactionVehiclesLoad() {

	new
	    SPZ[30],
	    Model,
	    Float:X, Float:Y, Float:Z, Float:Angle,
	    VirtualWorld,
	    Interior,
	    Color1, Color2,
	    Paintjob,
	    Siren,
		Faction,
		Float:MileAge,
		Float:Nitrous,
		Fuel,
		Battery,
		Float:Health,
		dmg_Panels,
		dmg_Doors,
		dmg_Lights,
		dmg_Tires,
		tune_Slot[14],
		Float:def_Health,
		TaxameterItem,
		UnitText[35];

	for(new i; i < cache_num_rows(); i++) {

     	cache_get_value_name(i, "SPZ", SPZ);
     	cache_get_value_name_int(i, "Model", Model);
     	cache_get_value_name_float(i, "X", X);
     	cache_get_value_name_float(i, "Y", Y);
     	cache_get_value_name_float(i, "Z", Z);
     	cache_get_value_name_float(i, "Angle", Angle);
     	cache_get_value_name_int(i, "VirtualWorld", VirtualWorld);
     	cache_get_value_name_int(i, "Interior", Interior);
     	cache_get_value_name_int(i, "Color1", Color1);
     	cache_get_value_name_int(i, "Color2", Color2);
     	cache_get_value_name_int(i, "Paintjob", Paintjob);
     	cache_get_value_name_int(i, "Siren", Siren);
     	cache_get_value_name_int(i, "Faction", Faction);
     	cache_get_value_name_float(i, "MileAge", MileAge);
     	cache_get_value_name_float(i, "Nitrous", Nitrous);
     	cache_get_value_name_int(i, "Fuel", Fuel);
     	cache_get_value_name_int(i, "Battery", Battery);
     	cache_get_value_name_float(i, "Health", Health);
     	cache_get_value_name_int(i, "dmg_Panels", dmg_Panels);
     	cache_get_value_name_int(i, "dmg_Doors", dmg_Doors);
     	cache_get_value_name_int(i, "dmg_Lights", dmg_Lights);
     	cache_get_value_name_int(i, "dmg_Tires", dmg_Tires);
     	cache_get_value_name_float(i, "def_Health", def_Health);
     	cache_get_value_name_int(i, "TaxameterItem", TaxameterItem);
     	cache_get_value_name(i, "UnitText", UnitText);

     	new rint;

     	cache_get_value_name_int(i, "CarRadio", rint);

		if(Battery == 0)
		    Battery = 100;

     	if(X > -0.5 && X < 0.5 &&
     	    Y > -0.5 && Y < 0.5 &&
			Z > -0.5 && Z < 0.5)
		{
		    X = 641.148;
		    Y = -499.903;
			Z = 16.078;
			Angle = 270.0;
			VirtualWorld = 0;
			Interior = 0;
		}

		if(Health < 251.0)
		    Health = def_Health;


     	for(new id; id < 14; id ++)
     	{
     	    if(id > 13) break;

     	    new
     	        tString[18];

			format(tString, 18, "tune_Slot%d", id);

			cache_get_value_name_int(i, tString, tune_Slot[id]);
     	}


		new
		    vehicleid = CreateVehicle(Model, X, Y, Z, Angle, Color1, Color2, -1, Siren);

		SetVehicleNumberPlate(vehicleid, SPZ);
		format(vEnum[vehicleid][v_SPZ], 24, SPZ);
		format(vEnum[vehicleid][v_Owner], 30, "");

		vhac_SetVehicleHealth(vehicleid, Health);
		SetVehicleVirtualWorld(vehicleid, VirtualWorld);
		LinkVehicleToInterior(vehicleid, Interior);
		ChangeVehiclePaintjob(vehicleid, Paintjob);
		SetVehicleFaction(vehicleid, Faction);

		UpdateVehicleDamageStatus(vehicleid, dmg_Panels, dmg_Doors, dmg_Lights, dmg_Tires);
		for(new id; id < 14; id ++)
		{
		    if(id > 13) break;
		    AddVehicleComponent(vehicleid, tune_Slot[id]);
		}
		vEnum[vehicleid][v_MileAge] = MileAge;
		vEnum[vehicleid][v_Nitrous] = Nitrous;
		vEnum[vehicleid][v_Fuel] = Fuel;
		vEnum[vehicleid][v_FuelType] = vehicleFuelTypes[Model-400];
		vEnum[vehicleid][v_Battery] = Battery;
		vEnum[vehicleid][v_Siren] = Siren;
		vEnum[vehicleid][v_TaxameterItem] = TaxameterItem;
		vEnum[vehicleid][v_CarRadio] = rint;

		vEnum[vehicleid][v_Color_1] = Color1;
		vEnum[vehicleid][v_Color_2] = Color2;

		vEnum[vehicleid][v_Temporary] = false;

		cache_get_value_name_float(i, "Oil", vEnum[vehicleid][v_Oil]);

		cache_get_value_name_int(i, "Sun_LDoor", vEnum[vehicleid][v_Sun_LDoor]);
		cache_get_value_name_int(i, "Sun_RDoor", vEnum[vehicleid][v_Sun_RDoor]);
		cache_get_value_name_int(i, "Sun_Hood", vEnum[vehicleid][v_Sun_Hood]);
		cache_get_value_name_int(i, "Sun_Boot", vEnum[vehicleid][v_Sun_Boot]);
		cache_get_value_name_int(i, "Sun_FBumper", vEnum[vehicleid][v_Sun_FBumper]);
		cache_get_value_name_int(i, "Sun_RBumper", vEnum[vehicleid][v_Sun_RBumper]);
		cache_get_value_name_int(i, "NoBreakin", vEnum[vehicleid][v_NoBreakin]);
		cache_get_value_name_int(i, "PlexWindows", vEnum[vehicleid][v_TitWindows]);
		
		cache_get_value_name_int(i, "Bazar_Price", vEnum[vehicleid][v_bazar_Price]);
		cache_get_value_name_int(i, "Bazar_Buyout", vEnum[vehicleid][v_bazar_Buyout]);
		cache_get_value_name_int(i, "Bazar_DateAdded", vEnum[vehicleid][v_bazar_DateAdded]);
		cache_get_value_name_int(i, "Bazar_BoughtFor", vEnum[vehicleid][v_bazar_BoughtFor]);
		
		new desc[256];
		cache_get_value_name(i, "Bazar_Desc", desc);
		format(vEnum[vehicleid][v_bazar_Desc],255,"%s", desc);
		cache_get_value_name(i, "Bazar_AddedBy", desc);
		format(vEnum[vehicleid][v_bazar_AddedBy],MAX_PLAYER_NAME+1,"%s", desc);

		vEnum[vehicleid][v_def_SpawnX] = X;
		vEnum[vehicleid][v_def_SpawnY] = Y;
		vEnum[vehicleid][v_def_SpawnZ] = Z;
		vEnum[vehicleid][v_def_SpawnA] = Angle;
		vEnum[vehicleid][v_def_SpawnVW] = VirtualWorld;
		vEnum[vehicleid][v_def_SpawnINT] = Interior;
    	vEnum[vehicleid][v_def_Health] = def_Health;

    	if(Faction != 54 && factEnum[Faction][fact_Type] == FACTION_TYPE_LAW)
    	{
    	    switch(Model)
    	    {
    	        case
					596,
					597,
					598,
					599:
    	        {

    	            vehicleInventory_Weapons[vehicleid][0] = 25;
			        vehicleInventory_Weapons[vehicleid][1] = 60;

			        vehicleInventory_Weapons[vehicleid][2] = 42;
			        vehicleInventory_Weapons[vehicleid][3] = 3000;
    	        }
    	    }
    	}
    	
    	if(Faction == 255)
    	{
    	    SetVehicleParamsEx(vehicleid, 0, 0, 0, 1, 0, 0, 0);
    	}
    	
    	if(vEnum[vehicleid][v_bazar_BoughtFor] != 0)
    	{
    	    UpdateFactionVehicleUnit(vehicleid, bazar_GetUnitText(vehicleid), false, false, .windshield=true);
    	}
		else
			UpdateFactionVehicleUnit(vehicleid, UnitText, false, false, .windshield = false);

		VehAttachObj(vehicleid);

		if(i == cache_num_rows()) break;
	}
	return 1;
}

LoadFactions()
{
	for(new i; i < MAX_FACTIONS; i++)
	{
	    format(factEnum[i][fact_Name], 64, "");
	    factEnum[i][fact_Type] = 0;
	    factEnum[i][fact_Cash] = 0;
	}

    new mql_query[43];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_factions");

	mysql_tquery(MYSQL, mql_query, "OnFactionsLoad");
	return 1;
}

function OnFactionsLoad() {
	new Name[64], Type, Cash, ID;
	for(new i; i < cache_num_rows(); i++) {
	    if(i > MAX_FACTIONS) break;
     	cache_get_value_name_int(i, "ID", ID);
	    cache_get_value_name(i, "Name", Name);
	    cache_get_value_name_int(i, "Type", Type);
	    cache_get_value_name_int(i, "Cash", Cash);

	    format(factEnum[ID][fact_Name], 64, Name);

	    if(Type >= sizeof(factionTypes))
	        Type = 0;

	    factEnum[ID][fact_Type] = Type;
	    factEnum[ID][fact_Cash] = Cash;

		if(i == cache_num_rows()) break;
	}
	return 1;
}


LoadIllegalFactions()
{
	for(new i; i < MAX_ILLEGAL_FACTIONS; i++)
	{
	    format(i_factEnum[i][ifact_Name], 64, "");
	    i_factEnum[i][ifact_Perm_Drug_Marijuana] = 0;
	    i_factEnum[i][ifact_Perm_Guns] = 0;
	    i_factEnum[i][ifact_Perm_Graffitis] = 0;
	    i_factEnum[i][ifact_Cash] = 0;
	}

    new mql_query[43];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM gm_ifactions");

	mysql_tquery(MYSQL, mql_query, "OnIllegalFactionsLoad");
	return 1;
}

function OnIllegalFactionsLoad() {
	new Name[64], Cash, ID, Perm[3], Chat;
	for(new i; i < cache_num_rows(); i++) {
	    if(i > MAX_FACTIONS) break;
     	cache_get_value_name_int(i, "ID", ID);
	    cache_get_value_name(i, "Name", Name);
	    cache_get_value_name_int(i, "Chat", Chat);
	    cache_get_value_name_int(i, "Perm_Guns", Perm[1]);
	    cache_get_value_name_int(i, "Perm_Drug_Marijuana", Perm[0]);
	    cache_get_value_name_int(i, "Perm_Graffitis", Perm[2]);
	    cache_get_value_name_int(i, "Cash", Cash);

	    format(i_factEnum[ID][ifact_Name], 64, Name);
	    i_factEnum[ID][ifact_Chat] = Chat;
	    i_factEnum[ID][ifact_Cash] = Cash;
	    i_factEnum[ID][ifact_Perm_Drug_Marijuana] = Perm[0];
	    i_factEnum[ID][ifact_Perm_Guns] = Perm[1];
	    i_factEnum[ID][ifact_Perm_Graffitis] = Perm[2];

		if(i == cache_num_rows()) break;
	}
	return 1;
}

function timer_StartEngine(playerid, vehicleid)
{

	if(!isStartingEngine[playerid])
	    return 0;

    isStartingEngine[playerid] = false;

    if(vEnum[vehicleid][v_Fuel] < 1)
	{
	    new S_str[144];
		format(S_str, 144, "* Motor vozidla %s zachrèal a vypol sa. (( %s ))", GetVehicleName(vehicleid), GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

		EnterInfo(playerid, "~r~Toto vozidlo nema palivo, nepodarilo sa ho nastartovat!");

		return 0;
	}

	if(vehicleFuelTypes[GetVehicleModel(vehicleid)-400] != 0 && vEnum[vehicleid][v_FuelType] != vehicleFuelTypes[GetVehicleModel(vehicleid)-400])
	{
	    new S_str[144];
		format(S_str, 144, "* Motor vozidla %s zachrèal a vypol sa. (( %s ))", GetVehicleName(vehicleid), GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

		EnterInfo(playerid, "~r~Toto vozidlo ma natankovane zle palivo, nepodarilo sa ho nastartovat!");

		return 0;
	}

	if(vEnum[vehicleid][v_Battery] < 5)
	{
	    new S_str[144];
		format(S_str, 144, "* Motor vozidla %s zachrèal a vypol sa. (( %s ))", GetVehicleName(vehicleid), GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

		EnterInfo(playerid, "~r~Toto vozidlo nema bateriu, nepodarilo sa ho nastartovat!");

		return 0;
	}
	if(vEnum[vehicleid][v_Oil] <= 0.5)
	{
	    new S_str[144];
		format(S_str, 144, "* Motor vozidla %s sa nedá natartova. (( %s ))", GetVehicleName(vehicleid), GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

		EnterInfo(playerid, "~r~Toto vozidlo ma stary olej, motor sa zadrel!");

		return 0;
	}

	new
		Float:vHP;

    vhac_GetVehicleHealth(vehicleid, vHP);

    if(vHP < 300.0)
    {
        new S_str[144];
		format(S_str, 144, "* Motor vozidla %s zachrèal a vypol sa. (( %s ))", GetVehicleName(vehicleid), GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

		EnterInfo(playerid, "~r~Toto vozidlo je rozbite, nepodarilo sa ho nastartovat!");

		return 0;
    }
    else if(vHP < 750.0)
    {
		if(random(3) == 1)
		{
		    new S_str[144];
			format(S_str, 144, "* Motor vozidla %s zachrèal ale nenaskoèil. (( %s ))", GetVehicleName(vehicleid), GetPlayerNameEx(playerid, USE_MASK));
			SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

			EnterInfo(playerid, "~r~Vozidlo sa nepodarilo nastartovat!");

			return 0;
		}
    }
    
    new randomnum, mileage = floatround(vEnum[vehicleid][v_MileAge], floatround_round);

    switch(mileage)
    {
        case 0..3000: randomnum = 3000;
        case 3001..8000: randomnum = 1500;
        case 8001..14000: randomnum = 100;
        case 14001..23000: randomnum = 30;
        case 23001..100000: randomnum = 15;
        default: randomnum = 12;
    }

    if(random(randomnum) == 1)
	{
	    new S_str[144];
		format(S_str, 144, "* Motor vozidla %s nenaskoèil. (( %s ))", GetVehicleName(vehicleid), GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

		EnterInfo(playerid, "~r~Vozidlo sa nepodarilo nastartovat, skus to znova!");

		return 0;
	}

	vEnum[vehicleid][v_Battery] -= 5;

    SetVehicleParams(vehicleid, VEHICLE_TYPE_ENGINE, 1);

	new S_str[144];
	format(S_str, 144, "* Motor vozidla %s naskoèil. (( %s ))", GetVehicleName(vehicleid), GetPlayerNameEx(playerid, USE_MASK));
	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

	return 1;

}

new bcsd1o;
new bcsd1;
new bcsd2o;
new bcsd2;
new sacsdMainObject;
new sacsdMain;
new sacsdCells[8];
new sacsdCellsObject[8];

public OnGameModeInit()
{

    new a[][15] =
	{ "?","0","?" };
	#pragma unused a

	CallRemoteFunction("blinker_OnGameModeInit", "");

    Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 2000);
    Streamer_SetTickRate(40);

    PCMechanicArea 			= CreateDynamicRectangle(2409.287, 129.050, 2449.914, 107.044, -1, -1, -1);
    AnawaltArea 			= CreateDynamicPolygon(AnawaltZonePoints);

    // AMBIENT MUSIC
    music_zones[0] = CreateDynamicPolygon(music_zone_points_0);
	music_zones[1] = CreateDynamicPolygon(music_zone_points_1);
	music_zones[2] = CreateDynamicPolygon(music_zone_points_2);
	music_zones[3] = CreateDynamicPolygon(music_zone_points_3);
	music_zones[4] = CreateDynamicPolygon(music_zone_points_4);
	music_zones[5] = CreateDynamicPolygon(music_zone_points_5);
	music_zones[6] = CreateDynamicPolygon(music_zone_points_6);
	music_zones[7] = CreateDynamicPolygon(music_zone_points_7);
	music_zones[8] = CreateDynamicPolygon(music_zone_points_8);
	music_zones[9] = CreateDynamicPolygon(music_zone_points_9);
	music_zones[10] = CreateDynamicPolygon(music_zone_points_10);
	music_zones[11] = CreateDynamicPolygon(music_zone_points_11);
	music_zones[12] = CreateDynamicPolygon(music_zone_points_12);
	music_zones[13] = CreateDynamicPolygon(music_zone_points_13);
	music_zones[14] = CreateDynamicPolygon(music_zone_points_14);
	music_zones[15] = CreateDynamicPolygon(music_zone_points_15);
    // END OF AMBIENT MUSIC
    
    // FORBIDDEN CITIES
    /*ls_forbidden = CreateDynamicPolygon(ls_forbidden_points);
    lv_forbidden = CreateDynamicPolygon(lv_forbidden_points);
    sf_forbidden = CreateDynamicPolygon(sf_forbidden_points);
    sfx_forbidden = CreateDynamicPolygon(sfx_forbidden_points);*/
    // FORBIDDEN CITIES

	/*
	    < ENGLISH >
	        Basic SA:MP functions.

		< SLOVAK >
		    Základné SA:MP funkcie.

	*/
	SetGameModeText("PLA:RP");

	SendRconCommand("gamemodetext "GM_NAME" "GM_VERSION);
	SendRconCommand("hostname "V_HOST_NAME);
	SendRconCommand("weburl "WEB_SITE);
	SendRconCommand("mapname "GM_MAP_NAME);
	SendRconCommand("language "GM_LANGUAGE);

	AddPlayerClass(0, 2300.82, 25.654, 26.490, 269.1425, 0, 0, 0, 0, 0, 0);
	NPCVehicle = AddStaticVehicle(538, -1943.0624, 158.9263, 25.7186, 358.2109, 1, 1); //this is filterscript

    DisableInteriorEnterExits();
	ShowPlayerMarkers(0);
	ManualVehicleEngineAndLights();
	SetNameTagDrawDistance(18.0);
	ShowNameTags(0);
	EnableStuntBonusForAll(0);
	BlockGarages(.text="BLOCK");

	/*
	    < ENGLISH >
	        Basic custom functions.

		< SLOVAK >
		    Základné vlastné funkcie.

	*/

	//mysql_global_options(DUPLICATE_CONNECTIONS, true);
	//MYSQL = mysql_connect(SQL_HOST, SQL_USER, SQL_PASS, SQL_DB);
	
	MYSQL = mysql_connect_file("mysql.ini");
	
	if(MYSQL == MYSQL_INVALID_HANDLE)
	{
	    printf("Error: Cant connect to db!");
	    return 1;
	}

	Streamer_SetTickRate(10);

	FadeInit();
	LoadMapping();
	LoadDB_Interiors();
	LoadMapIcons();
	LoadMenus();
	LoadFactions();
	LoadIllegalFactions();
	LoadEntrances();
	LoadBusinesses();
	LoadHouses();
	LoadGarages();
	LoadDrops();
	LoadFactionVehicles();
	LoadPlayerVehicles();
	LoadActors();
	LoadSpeedCameras();
	LoadTollBooths();
	LoadGates();
	LoadATM();
	LoadWeed();
	LoadFuelStations();
	LoadArrows();
	LoadADTables();
	LoadRoadSigns();
	LoadGraffiti();
	LoadCCTVs();
	LoadGPS();
	LoadFireExtinguishers();
	LoadPhoneBooths();
	SpawnDeers();
	Trucking::LoadDepots();
	Achievement::Save();
	InteractiveNPC::Init();
	Economy::Load();
	LoadDealership();
	LoadTrees();
	LoadFarms();

	SetTimer("timer_PrimaryTimer", 1000, true);
	#if defined CLOSED_BETA
	    SetTimer("AnawaltTrees", 1000, true);
	#else
	    SetTimer("AnawaltTrees", 1000*60*15, true);
	#endif
	SetTimer("timer_PDRadar", 250, true);
	SetTimer("timer_Taxameter", 800, true);
	SetTimer("timer_RandomMessage", 300000*4, true);
	SetTimer("timer_RandomMessage", 90000, false);
	SetTimer("timer_Speedometer", 100, true);
	SetTimer("timer_Vyplata", 60*1000, true);
	SetTimer("timer_FuelDecrease", 108000, true);
	SetTimer("timer_SaveServerStats", 60000*5, true);
	SetTimer("timer_RefreshWeed", 60000*10, true);
	SetTimer("timer_ExpandFire", 10000, true);
	SetTimer("timer_CheckCrates", 60000*15, true);

	LoadServerData();

	/*
	    < ENGLISH >
	        Command aliases.

		< SLOVAK >
		    Aliasy pre príkazy.

	*/

	Command_AddAltNamed("shout", "s");
	Command_AddAltNamed("whisper", "w");
	Command_AddAltNamed("attempt", "att");
	Command_AddAltNamed("ooc", "o");
	Command_AddAltNamed("global", "g");
	Command_AddAltNamed("zjest", "vypit");
	Command_AddAltNamed("low", "l");
	Command_AddAltNamed("admins", "staff");
	Command_AddAltNamed("inventar", "inv");
	Command_AddAltNamed("stats", "statistiky");
	Command_AddAltNamed("alogin", "stafflogin");
	Command_AddAltNamed("alogout", "stafflogout");
	Command_AddAltNamed("aduty", "staffduty");
	Command_AddAltNamed("avanish", "av");
	Command_AddAltNamed("entryfee", "vstupnypoplatok");
	Command_AddAltNamed("entryfee", "kasa");
	Command_AddAltNamed("aentryfee", "avstupnypoplatok");
	Command_AddAltNamed("zamknutbiznis", "lockbus");
	Command_AddAltNamed("zamknutbiznis", "zb");
	Command_AddAltNamed("azamknutbiznis", "alockbus");
	Command_AddAltNamed("azamknutbiznis", "azb");
	Command_AddAltNamed("businessinfo", "biznisinfo");
	Command_AddAltNamed("hudbabiznisu", "businessmusic");
	Command_AddAltNamed("buybusiness", "kupitbiznis");
	Command_AddAltNamed("sellbusiness", "predatbiznis");
	Command_AddAltNamed("rukyhore", "hu");
	Command_AddAltNamed("mocit", "piss");
	Command_AddAltNamed("posledneprikazy", "pp");
	Command_AddAltNamed("poslednylogin", "pl");
	Command_AddAltNamed("zmazatchat", "zc");
	Command_AddAltNamed("zmazatchat", "sc");
	Command_AddAltNamed("helperchat", "hel");
	Command_AddAltNamed("modchat", "mod");
	Command_AddAltNamed("adminchat", "adm");
	Command_AddAltNamed("beh", "jog");
	Command_AddAltNamed("spectate", "spec");
	Command_AddAltNamed("spectateoff", "specoff");
	Command_AddAltNamed("reply", "re");
	Command_AddAltNamed("okna", "rw");
	Command_AddAltNamed("okna", "okno");
	Command_AddAltNamed("rl", "rlow");
	Command_AddAltNamed("rs", "rshout");
	Command_AddAltNamed("department", "dept");
	Command_AddAltNamed("departmentlow", "deptlow");
	Command_AddAltNamed("departmentshout", "deptshout");
	Command_AddAltNamed("minca", "coin");
	Command_AddAltNamed("vrece", "pytel");
	Command_AddAltNamed("engine", "motor");
	Command_AddAltNamed("lights", "svetla");
	Command_AddAltNamed("dropwep", "polozitzbran");
	Command_AddAltNamed("dropvest", "polozitvestu");
	Command_AddAltNamed("pickup", "zobrat");
	Command_AddAltNamed("cuff", "puta");
	Command_AddAltNamed("vehicle", "veh");
	Command_AddAltNamed("kreditshop", "kreditmenu");
    Command_AddAltNamed("dolava", "doleva");
	Command_AddAltNamed("stopanim", "sa");
	Command_AddAltNamed("stopanim", "clear");
	Command_AddAltNamed("inv", "items");

	Command_AddAltNamed("kocka", "kostka");

	Command_AddAltNamed("assistance", "assist");
	Command_AddAltNamed("assistance", "dotaz");
	Command_AddAltNamed("answerassistance", "answerassist");
	Command_AddAltNamed("answerassistance", "aa");
	Command_AddAltNamed("conversation", "c");
	Command_AddAltNamed("cancelconversation", "cc");
	Command_AddAltNamed("ampliony", "amp");

	Command_AddAltNamed("zamknutdom", "zd");
	Command_AddAltNamed("azamknutdom", "azd");
	Command_AddAltNamed("buyhouse", "kupitdom");
	Command_AddAltNamed("sellhouse", "predatdom");

	Command_AddAltNamed("zamknutgaraz", "zg");
	Command_AddAltNamed("azamknutgaraz", "azg");
	Command_AddAltNamed("buygarage", "kupitgaraz");
	Command_AddAltNamed("sellgarage", "predatgaraz");

	Command_AddAltNamed("fvehicle", "fveh");

	Command_AddAltNamed("stopsign", "ss");
	Command_AddAltNamed("megafon", "meg");
	Command_AddAltNamed("megafon", "m");

	Command_AddAltNamed("setvisibleobjects", "svo");

	Command_AddAltNamed("phone", "ph");
	Command_AddAltNamed("pick", "p");
	Command_AddAltNamed("hangup", "h");

	Command_AddAltNamed("clothing", "doplnky");

	Command_AddAltNamed("doordo", "ddo");

	Command_AddAltNamed("vysielacka", "v");
	Command_AddAltNamed("vysielackaon", "von");
	Command_AddAltNamed("vysielackaoff", "voff");

	Command_AddAltNamed("majetok", "majetek");
	Command_AddAltNamed("majetok", "nemovitosti");
	Command_AddAltNamed("majetok", "nehnutelnosti");

	Command_AddAltNamed("fix", "repair");
	Command_AddAltNamed("fix", "rep");
	Command_AddAltNamed("fix", "fixcar");
	Command_AddAltNamed("fixplayer", "fp");
	Command_AddAltNamed("fos", "eos");
	
	Command_AddAltNamed("brana","dvere");

	// CESKE ALIASY
	Command_AddAltNamed("nastavenie", "nastaveni");
	Command_AddAltNamed("setvisibleobjects", "limitobjektu");
	Command_AddAltNamed("ooc", "b");
	Command_AddAltNamed("zmazatchat", "smazatchat");
	Command_AddAltNamed("otvorit", "otevrit");
	Command_AddAltNamed("vytrhnut", "vytrhnout");
	Command_AddAltNamed("zaklopat", "zaklepat");
	Command_AddAltNamed("obcianskypreukaz", "obcanka");
    Command_AddAltNamed("fajcit", "kourit");
    Command_AddAltNamed("fajcit", "zapalit");
    Command_AddAltNamed("frekvencia", "frekvence");
    Command_AddAltNamed("phone", "mobil");
    Command_AddAltNamed("engine", "motor");
    Command_AddAltNamed("lights", "svetla");
    Command_AddAltNamed("kufor", "kufr");
    Command_AddAltNamed("spasy", "zpasy");

    InteriorGangZone = GangZoneCreate(-6000.0, -6000.0, 6000.0, 6000.0);
    /*
	    < ENGLISH >
	        Load custom global textdraws.

		< SLOVAK >
		    Naeíta vlastné globálne textdrawy.

	*/

	blackTD = TextDrawCreate(-20.000000,0.100000,"|");
 	TextDrawUseBox(blackTD,1);
  	TextDrawBoxColor(blackTD,0x000000ff);
   	TextDrawTextSize(blackTD,660.000000,22.000000);
    TextDrawBackgroundColor(blackTD,0x000000ff);
    TextDrawFont(blackTD,3);
    TextDrawLetterSize(blackTD,1.000000,52.200000);
    TextDrawColor(blackTD,0x000000ff);
    TextDrawSetOutline(blackTD,1);
    TextDrawSetProportional(blackTD,1);
   	TextDrawSetShadow(blackTD,1);

   	textdraw_LoginTD[0] = TextDrawCreate(228.809539, -18.653331, "mdl-2000:logo");
	TextDrawLetterSize(textdraw_LoginTD[0], 0.000000, 0.000000);
	TextDrawTextSize(textdraw_LoginTD[0], 200.000000, 200.000000);
	TextDrawAlignment(textdraw_LoginTD[0], 1);
	TextDrawColor(textdraw_LoginTD[0], -1);
	TextDrawSetShadow(textdraw_LoginTD[0], 0);
	TextDrawSetOutline(textdraw_LoginTD[0], 0);
	TextDrawBackgroundColor(textdraw_LoginTD[0], 255);
	TextDrawFont(textdraw_LoginTD[0], 4);
	TextDrawSetProportional(textdraw_LoginTD[0], 0);
	TextDrawSetShadow(textdraw_LoginTD[0], 0);

	textdraw_LoginTD[1] = TextDrawCreate(324.285705, 108.933357, "... loading ...");
	TextDrawLetterSize(textdraw_LoginTD[1], 0.190476, 0.844799);
	TextDrawAlignment(textdraw_LoginTD[1], 2);
	TextDrawColor(textdraw_LoginTD[1], -1);
	TextDrawSetShadow(textdraw_LoginTD[1], 0);
	TextDrawSetOutline(textdraw_LoginTD[1], -1);
	TextDrawBackgroundColor(textdraw_LoginTD[1], 255);
	TextDrawFont(textdraw_LoginTD[1], 1);
	TextDrawSetProportional(textdraw_LoginTD[1], 1);
	TextDrawSetShadow(textdraw_LoginTD[1], 0);

	textdraw_LoginTD[2] = TextDrawCreate(635.905212, 438.319915, "Vytvoril bigw3b, 2016 - 2019");
	TextDrawLetterSize(textdraw_LoginTD[2], 0.140952, 0.588799);
	TextDrawAlignment(textdraw_LoginTD[2], 3);
	TextDrawColor(textdraw_LoginTD[2], -1);
	TextDrawSetShadow(textdraw_LoginTD[2], 0);
	TextDrawSetOutline(textdraw_LoginTD[2], -1);
	TextDrawBackgroundColor(textdraw_LoginTD[2], 255);
	TextDrawFont(textdraw_LoginTD[2], 1);
	TextDrawSetProportional(textdraw_LoginTD[2], 1);
	TextDrawSetShadow(textdraw_LoginTD[2], 0);

	TD_mask = TextDrawCreate(606.734069, -10.500017, "LD_SPAC:white");
	TextDrawLetterSize(TD_mask, 0.460000, 0.800000);
	TextDrawTextSize(TD_mask, 46.000000, 52.500003);
	TextDrawAlignment(TD_mask, 1);
	TextDrawColor(TD_mask, -1);
	TextDrawUseBox(TD_mask, true);
	TextDrawBoxColor(TD_mask, 0);
	TextDrawBackgroundColor(TD_mask, 0);
	TextDrawSetShadow(TD_mask, 22);
	TextDrawSetOutline(TD_mask, 0);
	TextDrawFont(TD_mask, 5);
	TextDrawSetPreviewModel(TD_mask, 19036);
	TextDrawSetPreviewRot(TD_mask, 0.000000, 0.000000, -90.000000, 1.000000);
	
	td_timeTD2 = TextDrawCreate(577.237915, 22.880012, "12/12/2018");
	TextDrawLetterSize(td_timeTD2, 0.228952, 0.981333);
	TextDrawAlignment(td_timeTD2, 2);
	TextDrawColor(td_timeTD2, -1);
	TextDrawSetShadow(td_timeTD2, 0);
	TextDrawSetOutline(td_timeTD2, 1);
	TextDrawBackgroundColor(td_timeTD2, 255);
	TextDrawFont(td_timeTD2, 3);
	TextDrawSetProportional(td_timeTD2, 1);
	TextDrawSetShadow(td_timeTD2, 0);

	td_timeTD1 = TextDrawCreate(575.714050, 30.986675, "1:22 PM");
	TextDrawLetterSize(td_timeTD1, 0.334857, 1.318399);
	TextDrawAlignment(td_timeTD1, 2);
	TextDrawColor(td_timeTD1, -1);
	TextDrawSetShadow(td_timeTD1, 0);
	TextDrawSetOutline(td_timeTD1, 1);
	TextDrawBackgroundColor(td_timeTD1, 255);
	TextDrawFont(td_timeTD1, 3);
	TextDrawSetProportional(td_timeTD1, 1);
	TextDrawSetShadow(td_timeTD1, 0);

	TD_ziadosti = TextDrawCreate(603.986572, 11.499999, "12 ziadosti!");
	TextDrawLetterSize(TD_ziadosti, 0.246661, 0.894166);
	TextDrawAlignment(TD_ziadosti, 3);
	TextDrawColor(TD_ziadosti, -5963521);
	TextDrawSetShadow(TD_ziadosti, 0);
	TextDrawSetOutline(TD_ziadosti, 1);
	TextDrawBackgroundColor(TD_ziadosti, 255);
	TextDrawFont(TD_ziadosti, 1);
	TextDrawSetProportional(TD_ziadosti, 1);

	TD_achievement[0] = TextDrawCreate(314.761871, 8.239947, "box");
	TextDrawLetterSize(TD_achievement[0], 0.000000, 5.885709);
	TextDrawTextSize(TD_achievement[0], 0.000000, 158.000000);
	TextDrawAlignment(TD_achievement[0], 2);
	TextDrawColor(TD_achievement[0], -1);
	TextDrawUseBox(TD_achievement[0], 1);
	TextDrawBoxColor(TD_achievement[0], -1061109505);
	TextDrawSetShadow(TD_achievement[0], 0);
	TextDrawSetOutline(TD_achievement[0], 0);
	TextDrawBackgroundColor(TD_achievement[0], 255);
	TextDrawFont(TD_achievement[0], 1);
	TextDrawSetProportional(TD_achievement[0], 1);
	TextDrawSetShadow(TD_achievement[0], 0);

	TD_achievement[1] = TextDrawCreate(314.380981, 12.506670, "box");
	TextDrawLetterSize(TD_achievement[1], 0.000000, 4.895230);
	TextDrawTextSize(TD_achievement[1], 0.000000, 151.000000);
	TextDrawAlignment(TD_achievement[1], 2);
	TextDrawColor(TD_achievement[1], -1);
	TextDrawUseBox(TD_achievement[1], 1);
	TextDrawBoxColor(TD_achievement[1], 673720575);
	TextDrawSetShadow(TD_achievement[1], 0);
	TextDrawSetOutline(TD_achievement[1], 0);
	TextDrawBackgroundColor(TD_achievement[1], 255);
	TextDrawFont(TD_achievement[1], 1);
	TextDrawSetProportional(TD_achievement[1], 1);
	TextDrawSetShadow(TD_achievement[1], 0);

	TD_achievement[2] = TextDrawCreate(267.904785, 14.639984, "achievement get");
	TextDrawLetterSize(TD_achievement[2], 0.217523, 0.823466);
	TextDrawAlignment(TD_achievement[2], 1);
	TextDrawColor(TD_achievement[2], -1061109505);
	TextDrawSetShadow(TD_achievement[2], 0);
	TextDrawSetOutline(TD_achievement[2], 0);
	TextDrawBackgroundColor(TD_achievement[2], 255);
	TextDrawFont(TD_achievement[2], 3);
	TextDrawSetProportional(TD_achievement[2], 1);
	TextDrawSetShadow(TD_achievement[2], 0);

	TD_achievement[3] = TextDrawCreate(264.857177, 16.346687, "box");
	TextDrawLetterSize(TD_achievement[3], 0.000000, 2.228565);
	TextDrawTextSize(TD_achievement[3], 240.000000, 0.000000);
	TextDrawAlignment(TD_achievement[3], 1);
	TextDrawColor(TD_achievement[3], -1);
	TextDrawUseBox(TD_achievement[3], 1);
	TextDrawBoxColor(TD_achievement[3], -1061109505);
	TextDrawSetShadow(TD_achievement[3], 0);
	TextDrawSetOutline(TD_achievement[3], 0);
	TextDrawBackgroundColor(TD_achievement[3], 255);
	TextDrawFont(TD_achievement[3], 1);
	TextDrawSetProportional(TD_achievement[3], 1);
	TextDrawSetShadow(TD_achievement[3], 0);

	TD_achievement[4] = TextDrawCreate(245.571426, 17.613346, "hud:radar_race");
	TextDrawLetterSize(TD_achievement[4], 0.000000, 0.000000);
	TextDrawTextSize(TD_achievement[4], 14.000000, 17.000000);
	TextDrawAlignment(TD_achievement[4], 1);
	TextDrawColor(TD_achievement[4], -1);
	TextDrawSetShadow(TD_achievement[4], 0);
	TextDrawSetOutline(TD_achievement[4], 0);
	TextDrawBackgroundColor(TD_achievement[4], 255);
	TextDrawFont(TD_achievement[4], 4);
	TextDrawSetProportional(TD_achievement[4], 0);
	TextDrawSetShadow(TD_achievement[4], 0);

    createBasketBall_Balls();

    if(g_stats_models != 1)
	{
		SendRconCommand("reloadfs models");
	}
	else
	{
	    SendRconCommand("password 0");
	}
    SendRconCommand("reloadfs maps");
	SendRconCommand("reloadfs maps_interior");
	SendRconCommand("reloadfs vegetation");
	//SendRconCommand("reloadfs forbiddenbarriers");
	
	new S_queryx[64];
	mysql_format(MYSQL,S_queryx, sizeof S_queryx, "UPDATE gm_stats SET models = '0'");
	mysql_tquery(MYSQL, S_queryx);

	bcsd1o = CreateDynamicObject(1495, 2627.474365, 3119.819091, 2047.135131, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); // KANC_CLOSED
	bcsd1 = 0;
	bcsd2o = CreateDynamicObject(1495, 2625.273681, 3117.387451, 2047.005004, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00); // CELY_CLOSED
	bcsd2 = 0;

	sacsdMainObject = CreateDynamicObject(1569,133.815,1907.771,645.154,0.000,0.000,-29.940,-1,-1,-1,300.000,300.000,-1,0);
    sacsdMain = 0;
    sacsdCellsObject[0] = CreateDynamicObject(19302,107.519,1942.785,642.951,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000,-1,0);
    sacsdCells[0] = 0;
    sacsdCellsObject[1] = CreateDynamicObject(19302,117.194,1932.777,642.951,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000,-1,0);
    sacsdCells[1] = 0;
    sacsdCellsObject[2] = CreateDynamicObject(19302,117.136,1942.793,642.942,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000,-1,0);
    sacsdCells[2] = 0;
    sacsdCellsObject[3] = CreateDynamicObject(19302,117.195,1939.454,642.951,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000,-1,0);
    sacsdCells[3] = 0;
    sacsdCellsObject[4] = CreateDynamicObject(19302,117.194,1936.103,642.951,0.000,0.000,-90.000,-1,-1,-1,300.000,300.000,-1,0);
    sacsdCells[4] = 0;

	ConnectNPC("BOT_train_ls1", "train");
    foreach(new p : Player)
    {
        if(!IsPlayerNPC(p))
            continue;

		npcid_x = p;
		break;
    }

    drug_addDrug(0, DRUG_TYPE_MARIJUANA,    "Marihuana (Phatt Fruity)",     0,	"gramov");
    drug_addDrug(1, DRUG_TYPE_MARIJUANA,    "Marihuana (Amnesia Haze)",    	1,	"gramov");
    drug_addDrug(2, DRUG_TYPE_MARIJUANA,    "Marihuana (Sour Diesel)",  	2,	"gramov");
    drug_addDrug(3, DRUG_TYPE_LSD,    		"LSD",  						0,	"papierikov");
    
    ////////////////////////////////////////////////////////////////////////////
    // tutorial
	Tutorial::AddEntry("Information Centre");
	Tutorial::SetColor(0xefe19bff);
	Tutorial::SetDescription(
	    "Toto je ~r~informacne centrum~w~, objavis sa tu po zalozeni charakteru. Vnutri si mozes prenajat bicykel na ktorom sa odvezies do mesta alebo si vybavit obciansky preukaz. Vedla neho je obchod elektronikou, kde si mozes kupit mobil, vyuzi to! Ak si nebudes isty, pouzi ~r~/gps~w~!"
	);
	Tutorial::SetCameraPos(-578.426208, -1065.146850, 25.690011, -583.483337, -1073.320922, 25.690011);
	Tutorial::SetCameraLook(-583.311706, -1064.114379, 25.433521, -587.040222, -1069.823242, 25.351634);
	Tutorial::SetCameraTime(12000);
	
	Tutorial::AddEntry("Town Hall");
	Tutorial::SetColor(0xccccccff);
	Tutorial::SetDescription(
	    "Dejisko serveru, v Palomino Creek. Vyberes si tu vyplatu, kupis si rybarske povolenie, podas inzerat alebo zaplatis pokuty."
	);
	Tutorial::SetCameraPos(2250.265625, -92.744895, 33.229736, 2277.262451, -94.070503, 33.2297363);
	Tutorial::SetCameraLook(2252.300292, -88.263305, 32.348846, 2274.637939, -89.918548, 32.295070);
	Tutorial::SetCameraTime(12000);
	
	Tutorial::AddEntry("San Andreas Sheriffs");
	Tutorial::SetColor(0x68a061ff);
	Tutorial::SetDescription(
	    "Su ludia ktori ich neznasaju ale aj taki, ktori ich maju radi. Su tu pre vas v plnom nasadeni, muzi z Kobry 11. Poznas to. Sidlia v ~r~Dillimore~w~."
	);
	Tutorial::SetCameraPos(664.466430, -544.784667, 28.895763, 667.285583, -601.427429, 28.895763);
	Tutorial::SetCameraLook(660.191345, -547.318725, 28.346096, 662.755859, -599.511840, 27.994468);
	Tutorial::SetCameraTime(15000);
	
	Tutorial::AddEntry("Bone County Sheriffs");
	Tutorial::SetColor(0xd3c58dff);
	Tutorial::SetDescription(
	    "Kedze nie vsetci maju dostatocny inteligencny kvocient aby mohli pracovat medzi elitou v Dillimore, postavili si stanicu aj vo ~r~Fort Carson~w~...~n~Sorry, sidlili, vypalili ich necely tyzden po spusteni a tak uz neexistuju."
	);
	Tutorial::SetCameraPos(-193.335876, 973.145263, 25.769493, -191.346099, 990.987243, 25.769493);
	Tutorial::SetCameraLook(-197.892791, 974.953735, 24.787633, -195.903442, 989.125488, 24.895105);
	Tutorial::SetCameraTime(12000);
	
	Tutorial::AddEntry("Autoskola v Montgomery");
	Tutorial::SetColor(0x82b5e0ff);
	Tutorial::SetDescription(
	    "Pokial chces legalne soferovat motorove vozidla, potrebujes si spravit ~r~vodicsky preukaz~w~. Autoskolu najdes v Montgomery, za pizzeriou. Pocas prvych hodin od zalozenia charakteru mas zlavu!"
	);
	Tutorial::SetCameraPos(1398.433837, 262.280548, 23.665788, 1395.408203, 235.921295, 21.420618);
	Tutorial::SetCameraLook(1401.008666, 258.079101, 22.818338, 1400.023803, 237.672378, 20.627113);
	Tutorial::SetCameraTime(10000);
	
	Tutorial::AddEntry("Autobazar Gaudet Cars");
	Tutorial::SetColor(0xadad7bff);
	Tutorial::SetDescription(
	    "Dobre, institucie su za nami. Na zbrusu nove auto tak skoro mat peniaze nebudes, preto ti odporucame navstivit ~r~Gaudet Cars ~w~vo ~r~Fort Carson~w~, tam si nejake lacnejsie auto urcite vyberies!"
	);
	Tutorial::SetCameraPos(-223.561157, 1195.320434, 27.918973, -264.666748, 1198.292968, 32.586429);
	Tutorial::SetCameraLook(-225.549896, 1199.687011, 26.512437, -261.919799, 1201.633178, 30.076986);
	Tutorial::SetCameraTime(9000);
	
	Tutorial::AddEntry("Watson Automotive");
	Tutorial::SetColor(0xd64242ff);
	Tutorial::SetDescription(
	    "Ak ta omrzia stare herky a jazdene auta, urcite navstiv ~r~Watson Automotive~w~ v Dillimore! No priprav sa, ze z tych cien ti skonci sanka na sandaloch."
	);
	Tutorial::SetCameraPos(606.032653, -481.757690, 19.309215, 646.649841, -481.524566, 19.309215);
	Tutorial::SetCameraLook(608.984558, -485.783782, 19.032009, 643.909912, -485.693817, 18.977424);
	Tutorial::SetCameraTime(9000);
	
	Tutorial::AddEntry("Nevada Airfield");
	Tutorial::SetColor(0xada379ff);
	Tutorial::SetDescription(
	    "Hej hej, vsetci dufame ze sa budes mat tak dobre, ze si budes moct dovolit lietat, napriklad na vlastnom vrtulnik alebo lietadle. Mozes ho kupit tu, na ~r~letisku v Nevade~w~."
	);
	Tutorial::SetCameraPos(322.428070, 2468.200927, 31.192167, 396.666503, 2524.477050, 22.451875);
	Tutorial::SetCameraLook(326.062103, 2471.595214, 30.669687, 400.877410, 2527.116455, 21.902210);
	Tutorial::SetCameraTime(7000);
	
	Tutorial::AddEntry("Hayes Home Service");
	Tutorial::SetColor(0xd8a450ff);
	Tutorial::SetDescription(
	    "Fajn, povedzme ze mas auto alebo motorku. No tieto veci potrebuju udrzbu a pripadne nejake velke kridlo. V tom pripade navstiv domacu autodielnu ~r~Hayes Home Service ~w~v Palomino Creek."
	);
	Tutorial::SetCameraPos(2226.237548, -47.261722, 32.296733, 2210.105224, -47.920372, 30.270374);
	Tutorial::SetCameraLook(2221.325683, -46.882686, 31.442779, 2205.311523, -46.516799, 30.047792);
	Tutorial::SetCameraTime(12000);
	
	Tutorial::AddEntry("Upgrade Shop");
	Tutorial::SetColor(0xb26850ff);
	Tutorial::SetDescription(
	    "Mozno su prave typci z ~r~Hayes Home Service ~w~offline, alebo ti nevadi vyvalit monstrozne sumy za opravu auta. Ak je minimalne jedna z dvoch zmienenych veci pravdiva, navstiv to tu."
	);
	Tutorial::SetCameraPos(2411.886474, 102.159629, 33.022418, 2450.635253, 108.487678, 30.354104);
	Tutorial::SetCameraLook(2414.976806, 106.002265, 32.195415, 2446.342529, 110.914344, 29.527101);
	Tutorial::SetCameraTime(12000);
	
	Tutorial::AddEntry("Prepravna spolocnost");
	Tutorial::SetColor(0x77b8eaff);
	Tutorial::SetDescription(
	    "Celu dobu sa bavime o minani penazi, ale nikde nie je ako ich zarobit. Ak rad soferujes ~r~18 ocelovych kolies ~w~tak dojdi sem do prepravnej spolocnosti a stan sa ~r~kamionistom~w~!"
	);
	Tutorial::SetCameraPos(-50.278228, -278.385650, 7.897445, -27.688465, -387.224365, 42.521392);
	Tutorial::SetCameraLook(-50.041160, -273.450439, 7.130948, -29.761020, -383.043151, 40.726432);
	Tutorial::SetCameraTime(20000);
	
	Tutorial::AddEntry("Hrobar, liforken");
	Tutorial::SetColor(0xc0c0c0ff);
	Tutorial::SetDescription(
	    "Ludia umieraju, to je uplne normalne. ~r~A na nestasti druhych sa najlepsie zaraba~w~! Zober pohrebak, lopatu do ruky a zarob si poriadne prasulky spracovavanim mrtvych tiel!"
	);
	Tutorial::SetCameraPos(2225.275390, -83.392356, 37.036979, 2238.146728, -43.583854, 35.757030);
	Tutorial::SetCameraLook(2228.614501, -79.835678, 35.941677, 2242.170654, -45.702541, 33.678749);
	Tutorial::SetCameraTime(9000);
	
	Tutorial::AddEntry("Rybarske molo");
	Tutorial::SetColor(0x78a2adff);
	Tutorial::SetDescription(
	    "Konecne zas vlhko! Tu, na rybarskom mole v ~b~Palomino Creek~w~ mozes zarobit nejake peniaze lovom ryb, alebo, ked mas tych penazi moc, kupit si nejaku peknu ~b~lod~w~!"
	);
	Tutorial::SetCameraPos(2146.590332, -40.561790, 14.214527, 2142.103515, -71.324493, 8.821780);
	Tutorial::SetCameraLook(2145.959472, -45.466407, 13.475064, 2143.142333, -76.170898, 8.163541);
	Tutorial::SetCameraTime(12000);
	
	Tutorial::AddEntry("Prenasanie krabic");
	Tutorial::SetColor(0xedc123ff);
	Tutorial::SetDescription(
	    "Po celej mape je viac brigad, napriklad prenasanie krabic. Prave sa pozeras na jednu lokaciu, ktora je v ~y~Palomino Creek~w~."
	);
	Tutorial::SetCameraPos(2317.569824, 67.276596, 56.308925, 2317.092285, 13.054275, 56.308925);
	Tutorial::SetCameraLook(2318.005615, 67.272735, 51.327953, 2317.528076, 13.050412, 51.327953);
	Tutorial::SetCameraTime(20000);
	return 1;
}

public OnGameModeExit()
{

	if(IsPlayerNPC(npcid_x))
    	Kick(npcid_x);

	new S_query[64];
	mysql_format(MYSQL, S_query, sizeof S_query, "UPDATE gm_stats SET models = '1'");
	mysql_tquery(MYSQL, S_query);
    CallRemoteFunction("timer_SaveServerStats", "");

	foreach(new i : Player)
	{
	    if(!IsPlayerLogged(i)) continue;
	    if(strlen(S_masterAccount[i]) < 2) continue;
	    SetPlayerName(i, S_masterAccount[i]);
	}

	FadeExit();
	return 1;
}

hook OnPlayerRequestClass(playerid, classid) {

	if(b_playerIsLogged[playerid] == true)
		SetTimerEx("timer_SpawnPlayer", 10, 0, "i", playerid);

	return 1;
}

IsPlayerIPBanned(playerid)
{
	new
	    S_query[256],
		S_ip[16];

	GetPlayerIp(playerid, S_ip, 16);

	mysql_format(MYSQL, S_query, 256, "SELECT * FROM gm_ipbans WHERE (UnbanUnix > %d OR UnbanUnix = 0) AND (IP = '%e' OR Master_Acc = '%e' OR gpci = '%e')", gettime(), S_ip, ReturnName(playerid), ReturnGPCI(playerid));

	new
	    Cache:q = mysql_query(MYSQL, S_query);

	if(cache_num_rows() > 0)
	{
	    new
	        Username[25],
	        Master_Acc[64],
	        IP[24],
	        AdminMACC[64],
	        Reason[128],
	        Date[64],
	        UnbanUnix;

		cache_get_value_name(0, "Username", Username);
		cache_get_value_name(0, "Master_Acc", Master_Acc);
		cache_get_value_name(0, "IP", IP);
		cache_get_value_name(0, "AdminMACC", AdminMACC);
		cache_get_value_name(0, "Reason", Reason);
		cache_get_value_name(0, "Date", Date);
		cache_get_value_name_int(0, "UnbanUnix", UnbanUnix);

		new
		    S_string[1024],
			S_tempString[256*2];

		format(S_tempString, 256,
		"{ffffff}> Tvoja IP adresa {e34f4f}(%s) {ffffff}je zabanovaná!\n\n",
		S_ip);
		strcat(S_string, S_tempString);

		format(S_tempString, 256*2,
		"Zabanovaný úèet: {e34f4f}%s {ffffff}({e34f4f}%s{ffffff})\nZabanovaná IP adresa: {e34f4f}%s{ffffff}\nAdministrátor: {e34f4f}%s{ffffff}\nDátum zabanovania: {e34f4f}%s{ffffff}\nDôvod banu: {e34f4f}%s{ffffff}\n\n",
		Username, Master_Acc, IP, AdminMACC, Date, Reason);
		strcat(S_string, S_tempString);

		if(UnbanUnix != 0)
		{
            format(S_tempString, 256*2,
			"Unban ti bude automaticky udelený {e34f4f}%s{ffffff}.\n", getdateunix(UnbanUnix));
			strcat(S_string, S_tempString);
		}

		format(S_tempString, 256*2,
		"\nPokia¾ si myslí, e si zabanovaný neprávom, podaj si iados o unban na naom fóre - {e34f4f}forum.countyliferoleplay.eu{ffffff}.\nVyfo si toto okno pomocou tlaèidla F8 a dolo ho v iadosti o unban.");
		strcat(S_string, S_tempString);

		ShowPlayerDialog(playerid, did_Banned, DIALOG_STYLE_MSGBOX, "IP JE ZABANOVANÁ", S_string, "OK", "");
		SetKickTimer(playerid);

		cache_delete(q);
	    return 0;
	}
	cache_delete(q);
	return 1;
}

public OnPlayerConnect(playerid)
{

	if(IsPlayerIPBanned(playerid) == 0) return 1;

    Streamer_ToggleIdleUpdate(playerid, 1);
    LoadRemoveBuildingsForPlayer(playerid);
	func_OnPlayerConnect(playerid);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    func_OnPlayerDisconnect(playerid, reason);
	return 1;
}

function OnPlayerPreConsumeDrug(playerid, drugid)
{

	drug_playerConsumedDrug[playerid][drugid] = true;

	switch(drugid)
	{
	    case 0:
	    {
	        // Default: Marihuana (Phatt Fruity)
	        SendClientMessage(playerid, 0x7bb875ff, "[ DROGY ] {ffffff}Dostal si do ruky jointa! Vo vnútri je Phatt Fruity, odroda marihuany.");
	        SendClientMessage(playerid, 0x7bb875ff, "[ DROGY ] {ffffff}Úèinky sa dostavia nieko¾ko minút potom, ako si párkrát potiahne.");
	        SendClientMessage(playerid, 0x7bb875ff, "[ DROGY ] {ffffff}Pre zahodenie jointu stlaè ENTER a pre potiahnutie stlaè LMB.");

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
			drug_weedConsumedTimes[playerid] = 0;
			drug_weedConsumeType[playerid] = drugid + 1;
			drug_givePlayerDrug(playerid, drugid, -1);
	    }

	    case 1:
	    {
	        // Default: Marihuana (Amnesia Haze)
	        SendClientMessage(playerid, 0x7bb875ff, "[ DROGY ] {ffffff}Dostal si do ruky jointa! Vo vnútri je Amnesia Haze, odroda marihuany.");
	        SendClientMessage(playerid, 0x7bb875ff, "[ DROGY ] {ffffff}Úèinky sa dostavia nieko¾ko minút potom, ako si párkrát potiahne.");
	        SendClientMessage(playerid, 0x7bb875ff, "[ DROGY ] {ffffff}Pre zahodenie jointu stlaè ENTER a pre potiahnutie stlaè LMB.");

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
			drug_weedConsumedTimes[playerid] = 0;
			drug_weedConsumeType[playerid] = drugid + 1;
			drug_givePlayerDrug(playerid, drugid, -1);
	    }

	    case 2:
	    {
	        // Default: Marihuana (Sour Diesel)
        	SendClientMessage(playerid, 0x7bb875ff, "[ DROGY ] {ffffff}Dostal si do ruky jointa! Vo vnútri je Sour Diesel, odroda marihuany.");
	       	SendClientMessage(playerid, 0x7bb875ff, "[ DROGY ] {ffffff}Úèinky sa dostavia nieko¾ko minút potom, ako si párkrát potiahne.");
	       	SendClientMessage(playerid, 0x7bb875ff, "[ DROGY ] {ffffff}Pre zahodenie jointu stlaè ENTER a pre potiahnutie stlaè LMB.");

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
			drug_weedConsumedTimes[playerid] = 0;
			drug_weedConsumeType[playerid] = drugid + 1;
			drug_givePlayerDrug(playerid, drugid, -1);
	    }

	    case 3:
	    {
	        SendClientMessage(playerid, 0x7bb875ff, "[ DROGY ] {ffffff}Poil si LSD, úèinok zaène do 35 minút!");
			SetTimerEx("drugcb_lsdeffects", 60000*4 + (random(60000)*random(27)), false, "iii", playerid, 3, 0);
			drug_givePlayerDrug(playerid, drugid, -1);
			Achievement::Reward(playerid, ACHIEVEMENT_MICHALOVCE_PSYCH);
		}

        case 4:
        {

            SendClientMessage(playerid, 0x7bb875ff, "[ DROGY ] {ffffff}Poil si LSD, úèinok zaène do 35 minút!");
    		SetTimerEx("drugcb_lsdeffects", 60000*2 + (random(60000)*random(13)), false, "iii", playerid, 4, 0);
    		drug_givePlayerDrug(playerid, drugid, -1);
    		Achievement::Reward(playerid, ACHIEVEMENT_MICHALOVCE_PSYCH);
		}
	}

	return 1;
}

new drug_lsd_autoMeArr[][][] = {
	{{3}, "sa cíti, ako by sa ho niè netýkalo, nemá akú hlavu."},
	{{3}, "sa cíti nek¾udný."},
	{{3}, "má ivé halucinácie."},
	{{3}, "má výrazne zväèené zornice."},

	{{4}, "sa cíti, ako by sa ho niè netýkalo, nemá akú hlavu."},
	{{4}, "sa cíti ve¾mi nek¾udný."},
	{{4}, "má ve¾mi ivé halucinácie."},
	{{4}, "znièoho niè vylakane skríkol - má halucinácie."},
	{{3}, "má výrazne zväèené zornice."}
};

function drugcb_lsdeffects(playerid, drugid, times)
{

	if(times >= (10 + random(12)) || drug_playerConsumedDrug[playerid][drugid] == false)
	{
	    return drug_playerConsumedDrug[playerid][drugid] = false;
	}

	new Float:MaxHP, Float:HP, Float:dontwhen;
	ahac_GetPlayerHealth(playerid, HP);

	MaxHP = 5.1;
	dontwhen = 125.0;

	if(HP + MaxHP > dontwhen && HP < dontwhen)
		SetPlayerHealth(playerid, dontwhen);
	else if(HP < dontwhen)
		SetPlayerHealth(playerid, HP + MaxHP);

    if(times % 4 == 0)
	{

	    new cancontinue = 0;
	    while(cancontinue == 0)
	    {

	        new x = random(sizeof(drug_lsd_autoMeArr));

	        if(drug_lsd_autoMeArr[x][0][0] != drugid)
	            continue;

            new finalstring[128 + 25];

			if(GetPlayerGender(playerid) == 1)
				format(finalstring, sizeof(finalstring), "* %s %s", GetPlayerNameEx(playerid, USE_MASK), drug_lsd_autoMeArr[x][1]);
			else
		 		format(finalstring, sizeof(finalstring), "* %s %s", GetPlayerNameEx(playerid, USE_MASK), drug_lsd_autoMeArr[x][1]);

			SendLocalMessage(playerid, MELOW_CHAT_RANGE, COLOR_VIOLET, finalstring);
			cancontinue = 1;
	        break;

	    }
	}

	new timex = 12000 + random(110000);

	new Text:bd;

	if(drugid == 3)
	{
	    new clr;
		ShiftHexToRGBA(clr,random(255),random(255),random(255),77);

	    bd = TextDrawCreate(-20.000000,2.000000,"|");
	 	TextDrawUseBox(bd,1);
	  	TextDrawBoxColor(bd,clr);
	   	TextDrawTextSize(bd,660.000000,22.000000);
	    TextDrawBackgroundColor(bd,clr);
	    TextDrawFont(bd,3);
	    TextDrawLetterSize(bd,1.000000,52.200000);
	    TextDrawColor(bd,clr);
	    TextDrawSetOutline(bd,1);
	    TextDrawSetProportional(bd,1);
	   	TextDrawSetShadow(bd,1);
	   	TextDrawShowForPlayer(playerid, bd);
	}
	else if(drugid == 4)
	{
	    new clr;
		ShiftHexToRGBA(clr,random(255),random(255),random(255),111);

	    bd = TextDrawCreate(-20.000000,2.000000,"|");
	 	TextDrawUseBox(bd,1);
	  	TextDrawBoxColor(bd,clr);
	   	TextDrawTextSize(bd,660.000000,22.000000);
	    TextDrawBackgroundColor(bd,clr);
	    TextDrawFont(bd,3);
	    TextDrawLetterSize(bd,1.000000,52.200000);
	    TextDrawColor(bd,clr);
	    TextDrawSetOutline(bd,1);
	    TextDrawSetProportional(bd,1);
	   	TextDrawSetShadow(bd,1);
	   	TextDrawShowForPlayer(playerid, bd);
	}

	SetTimerEx("destroylsdbd", timex-150, false, "i", _:bd);
	SetTimerEx("drugcb_lsdeffects", timex, false, "iii", playerid, drugid, times + 1);

	return 1;
}

function destroylsdbd(textid)
{
	TextDrawDestroy(Text:textid);
	return 1;
}

forward OnPlayerEmptyWeapon(playerid, weaponid);
public OnPlayerEmptyWeapon(playerid, weaponid)
{
	ac_immunity[playerid] = true;
	ac_playerGuns[playerid][weaponid] = 0;
	SetTimerEx("ac_timer_DisableImmunity", 2000, false, "i", playerid);
	return 1;
}

forward VendCheck(playerid);
public VendCheck(playerid)
{
	if(GetPlayerAnimationIndex(playerid)==1660) CallRemoteFunction("ex_OnPlayerUseVending", "i", playerid);
}

forward ex_OnPlayerUseVending(playerid);
public ex_OnPlayerUseVending(playerid)
{

	new
	    Float:F_Health;

    ahac_GetPlayerHealth(playerid, F_Health);

	if(ex_GetPlayerMoney(playerid) < 10)
	{
	    ClearAnimations(playerid, 1);
	    ex_GivePlayerMoney(playerid, 0);
	    SetPlayerHealth(playerid, F_Health);
	}
	else
	{
	    ex_GivePlayerMoney(playerid, -10);
	    money_spent[playerid]+=floatround(10,floatround_round);
	    new Float:Hunger;

	    ex_GetPlayerHunger(playerid, Hunger);
		ex_SetPlayerHunger(playerid, Hunger + 30.0);
		if(Hunger + 30.0 > 100.0)
		    ex_SetPlayerHunger(playerid, 100.0);

	    if(Hunger + 30.0 > 90.0)
	    {
			if(F_Health+40.0 > 100.0) SetPlayerHealth(playerid, 100.0);
			else SetPlayerHealth(playerid, F_Health + 40.0);
		}
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{

    func_OnPlayerSpawn(playerid);
	return 1;
}

new baseurl[] = "http://countyliferoleplay.eu/assets/models";

//-------------------------------------------------

public OnPlayerRequestDownload(playerid, type, crc)
{
	new fullurl[256+1];
	new dlfilename[75+1];
	new foundfilename=0;

	if(!IsPlayerConnected(playerid)) return 0;

	if(type == DOWNLOAD_REQUEST_TEXTURE_FILE) {
		foundfilename = FindTextureFileNameFromCRC(crc,dlfilename,64);
	}
	else if(type == DOWNLOAD_REQUEST_MODEL_FILE) {
	    foundfilename = FindModelFileNameFromCRC(crc,dlfilename,64);
	}

	if(foundfilename) {
	    format(fullurl,256,"%s/%s",baseurl,dlfilename);
	    RedirectDownload(playerid,fullurl);
	}

	return 0;
}

public OnPlayerFinishedDownloading(playerid, virtualworld)
{
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
    Achievement::Reward(playerid, ACHIEVEMENT_DIE);
    CallRemoteFunction("corpse_OnPlayerDeath", "idd", playerid, killerid, reason);

    PlayerEnterTime[playerid]+=221;

    // TOTO ZMA AK SA BUDU BUGOVAT LABELY
    if(IsValidDynamic3DTextLabel(T3D_dmg_Label[playerid]))
	{
		DestroyDynamic3DTextLabel(T3D_dmg_Label[playerid]);
		T3D_dmg_Label[playerid] = Text3D:INVALID_3DTEXT_ID;
	}
	// TOTO ZMAZ AK SA BUDU BUGOVAT LABELY

	if(B_isPlayerInDM[playerid] == false)
	{
	    B_isPlayerInDM[playerid] = true;
	    GetPlayerPos(playerid, F_DM_Pos[playerid][0], F_DM_Pos[playerid][1], F_DM_Pos[playerid][2]);
	    GetPlayerFacingAngle(playerid, F_DM_Pos[playerid][3]);
	    I_DM_Skin[playerid] = ex_GetPlayerSkin(playerid);

		for(new x; x < MAX_WEAPON_SLOTS; x++)
	    {

            tg_datax[playerid][x][0] = playerWeapons[playerid][x][pweapons_WeaponId];
			tg_datax[playerid][x][2] = playerWeapons[playerid][x][pweapons_AmmoGiven];
			tg_datax[playerid][x][1] = playerWeapons[playerid][x][pweapons_Ammo];
			tg_datax[playerid][x][3] = playerWeapons[playerid][x][pweapons_SerialNumber];
			tg_datax[playerid][x][4] = playerWeapons[playerid][x][pweapons_IsWork];
			tg_datax[playerid][x][5] = playerWeapons[playerid][x][pweapons_IsPermit];
			format(tg_originx[playerid][x], 128, playerWeapons[playerid][x][pweapons_Origin]);

		}
	}
	else
	{
	    B_isFinallyDead[playerid] = true;
	    B_isPlayerInDM[playerid] = false;

	    CPS_CreateCorpse(playerid);
	}

	return 0;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{

	if(GetPlayerAdminLevel(playerid) >= 5 && tstudio_dobject[playerid] == 1)
	{
	    DestroyDynamicObject(objectid);
	}

	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{

	if(clothingMenu_Editing[ playerid ] == true)
	{

	    if(response == 0)
	    {
	        // Neuloil

	        clothingMenu_Editing[ playerid ] = false;

	        SendError(playerid, "Editácia doplnku zruená!");

	        SetPlayerAttachedObject(playerid, index,
	        	playerAttachments[playerid][ clothingMenu_Edit[playerid] ][MODELID],
     			playerAttachments[playerid][ clothingMenu_Edit[playerid] ][BONE],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETX],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETY],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETZ],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTX],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTY],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTZ],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEX],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEY],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEZ],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][COLOR1],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][COLOR2]
			);

			Attachment_ShowItem(playerid, -1, clothingMenu_Edit[playerid] );

			return 1;

	    }
	    else
	    {
	        // Uloil

	        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETX] = fOffsetX;
	        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETY] = fOffsetY;
	        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETZ] = fOffsetZ;

	        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTX] = fRotX;
	        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTY] = fRotY;
	        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTZ] = fRotZ;

	        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEX] = fScaleX;
	        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEY] = fScaleY;
	        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEZ] = fScaleZ;

	        clothingMenu_Editing[ playerid ] = false;

	        SetPlayerAttachedObject(playerid, index,
	        	playerAttachments[playerid][ clothingMenu_Edit[playerid] ][MODELID],
     			playerAttachments[playerid][ clothingMenu_Edit[playerid] ][BONE],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETX],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETY],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FOFFSETZ],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTX],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTY],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FROTZ],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEX],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEY],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][FSCALEZ],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][COLOR1],
		        playerAttachments[playerid][ clothingMenu_Edit[playerid] ][COLOR2]
			);

	        SendSuccess(playerid, "Doplnok bol úspene editovaný!");

	        Attachment_ShowItem(playerid, -1, clothingMenu_Edit[playerid] );

	        return 1;

	    }

	}

	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{

    CallRemoteFunction("PhoneBooths_OnPlaceObject", "iiiffffff", playerid, objectid, response, x, y, z, rx, ry, rz);

	if(isdoingfireext[playerid] == true)
	{
	    if(response == EDIT_RESPONSE_CANCEL)
	    {
	        isdoingfireext[playerid] = false;
			DestroyDynamicObject(objectid);
			return 1;
		}
		else if(response == EDIT_RESPONSE_FINAL)
		{
		    isdoingfireext[playerid] = false;
			DestroyDynamicObject(objectid);

			new query[256*2];

			mysql_format(MYSQL, query, sizeof query, "INSERT INTO gm_hasicaky (X,Y,Z,RX,RY,RZ,VW,INTERIOR,SPOTREBA,PKONTROLA,STOLEN) VALUES ('%f','%f','%f','%f','%f','%f','%d','%d','%d','%d','0')",
			    x,y,z,rx,ry,rz,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid),
				gettime()+(2629800*2),gettime()
			);
			mysql_query(MYSQL, query, false);

			CreateDynamicFireExt(x,y,z,rx,ry,rz, GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid),gettime()+(2629800*2),gettime(),0);
			return 1;
		}
	}

    if(isPlayerEditingTag[playerid] == true)
	{

	    new
	        tagId = playerEditingTagId[playerid];

		if(response == EDIT_RESPONSE_CANCEL)
		{
		    isPlayerEditingTag[playerid] = false;
		    playerEditingTagId[playerid] = -1;

		    DestroyDynamicObject(graffitiEnum[tagId][graffiti_ObjectId]);

		    Iter_Remove(Graffiti, tagId);

		    SendClientMessage(playerid, 0xdfae51ff, "[ SPRAY TAG ]; {FFFFFF}Zmazal si spray tag!");
		}
		else if(response == EDIT_RESPONSE_FINAL)
		{

		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		    {
		        isPlayerEditingTag[playerid] = false;
			    playerEditingTagId[playerid] = -1;

			    DestroyDynamicObject(graffitiEnum[tagId][graffiti_ObjectId]);

			    Iter_Remove(Graffiti, tagId);

			    return SendClientMessage(playerid, 0xdfae51ff, "[ SPRAY TAG ]; {FFFFFF}Spray tag bol od teba moc ïaleko, bol preventivne zmazaný!");
		    }

		    SetDynamicObjectPos(objectid, x, y, z);
		    SetDynamicObjectRot(objectid, rx, ry, rz);

		    ShowPlayerGraffitiMenu(playerid, tagId);
		}

	}

	if(fdFire_Placuje[playerid])
	{
	    switch(response)
	    {
	        case 0:
	        {
	            fdFire[ fdFire_OhenID[playerid] ][fdfire_Model] = 0;
	            DestroyDynamicObject(fdFire[ fdFire_OhenID[playerid] ][fdfire_ObjectID]);

	            fdFire_Placuje[playerid] = false;

	            SendError(playerid, "Editácia ohòa zruená!");
	        }

			case 1:
			{
			    new
					string[ 25 ],

					color = 0xFFFFFFFF;

				switch( floatround(fdFire[fdFire_OhenID[playerid]][fdfire_HP], floatround_round) )
				{
					case 0..50:
						color = 0xb03939ff;

					case 51..100:
						color = 0xdb4c4cff;

					case 101..250:
						color = 0xf45d5dff;

					case 251..500:
						color = 0xff831dff;

					case 501..2500:
						color = 0xfbe040ff;

					case 2501..5000:
						color = 0xddfb40ff;

					case 5001..7500:
						color = 0x91fb5bff;

					case 7501..9000:
						color = 0xddf9d0ff;

					default:
						color = 0xffffffff;
				}

				format(string, sizeof string, "%d HP", floatround(fdFire[fdFire_OhenID[playerid]][fdfire_HP], floatround_round));

                fdFire[fdFire_OhenID[playerid]][fdfire_LabelID] = CreateDynamic3DTextLabel(string, color, x, y, z + 3.0, 9.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 10.0, -1, 10);
				fdFire[fdFire_OhenID[playerid]][fdfire_AreaID]  = CreateDynamicSphere(x,y,z + 2.5, 2.0);

				fdFire_Placuje[playerid] = false;

				fdFire[fdFire_OhenID[playerid]][fdfire_X] = x;
				fdFire[fdFire_OhenID[playerid]][fdfire_Y] = y;
				fdFire[fdFire_OhenID[playerid]][fdfire_Z] = z;

				SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);

	            SendSuccess(playerid, "Editácia ohòa dokonèená!");
			}
	    }
	}

	if(adtabula_placing[playerid])
	{
		switch(response)
		{
		    case 0:
		    {
		        DestroyDynamicObject(objectid);
		        adtabula_placing[playerid] = false;
		        adtabula_bizid[playerid] = -1;

		        return SendError(playerid, "Kupovanie reklamnej tabule bolo zruené!");
		    }

		    case 1:
		    {
		        DestroyDynamicObject(objectid);

		        ex_GivePlayerMoney(playerid, -5000);
				money_spent[playerid]+=floatround(5000,floatround_round);
		        adtabula_placing[playerid] = false;

		        adtabula_editingid[playerid] = CreateDynamicAdTable(adtabula_model[playerid], adtabula_bizid[playerid], x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), "REKLAMNÁ TABULA");

				SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);
				new
				    query[ 1024 ];

				mysql_format(MYSQL, query, sizeof query, "INSERT INTO gm_adtabula (Model, AssignedBiz, X, Y, Z, RX, RY, RZ, VW, INTERIOR, LABEL) VALUES ('%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%e')",
				    adtabula_model[playerid], adtabula_bizid[playerid], x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), "REKLAMNÁ TABULA");

				mysql_query(MYSQL, query, false);

				ShowPlayerDialog(playerid, did_adtable_new_text, DIALOG_STYLE_INPUT, "TEXT REKLAMNEJ TABULE", "{ffffff}> pecifikuj prosím text tejto reklamnej tabule, môe poui aj farebné HEX kódy {FARBA}.", "OK", "NESKOR");
			}
		}
	}

    if(IsEditingATM[playerid] == true)
	{
	    if(response == 0)
	    {
	        IsEditingATM[playerid] = false;
	        DestroyDynamicObject(objectid);

            SendError(playerid, "Tvorba ATM zruená!");
	    }
	    else if(response == 1)
		{

		    IsEditingATM[playerid] = false;

		    new i=-1;

		    for(new o; o < MAX_ATM; o++)
		    {
		        if(atmEnum[o][atm_posX] != 0.0)
		            continue;

				i = o;
				break;
		    }

		    if(i == -1)
		    {
		        IsEditingATM[playerid] = false;
		        DestroyDynamicObject(objectid);

	            return SendError(playerid, "Tvorba ATM zruená!");
		    }

		    DestroyDynamicObject(objectid);

            atmEnum[i][atm_posX] = x;
            atmEnum[i][atm_posY] = y;
            atmEnum[i][atm_posZ] = z;
            atmEnum[i][atm_posRX] = rx;
            atmEnum[i][atm_posRY] = ry;
            atmEnum[i][atm_posRZ] = rz;
            atmEnum[i][atm_posVW] = GetPlayerVirtualWorld(playerid);
            atmEnum[i][atm_posINT] = GetPlayerInterior(playerid);

			atmEnum[i][atm_Object] = CreateDynamicObject(19324, x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 100.0, 70.0, -1, 1);
	        atmEnum[i][atm_AreaID] = CreateDynamicSphere(x, y, z, 3.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1);
	        atmEnum[i][atm_Label] = CreateDynamic3DTextLabel( "/atm", 0xffffffff, x, y, z, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 16.0, -1, 0);

            SendSuccess(playerid, "ATM úspene vytvorené!");

            SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

            new
				Q_query[256];

			mysql_format(MYSQL, Q_query, 256, "INSERT INTO gm_atms (X, Y, Z, RX, RY, RZ, VW, Interior) VALUES ('%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d')",
				x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

			mysql_query(MYSQL, Q_query, false);
		}
	}

	if(IsEditingAdresa[playerid] == true)
	{
	    if(response == 0)
	    {
	        IsEditingAdresa[playerid] = false;
	        DestroyDynamicObject(objectid);

	        new i = editSpeedCamID[playerid];

            streetsignEnum[i][znacka_X] = 0.0;
			streetsignEnum[i][znacka_Y] = 0.0;
			streetsignEnum[i][znacka_Z] = 0.0;
			streetsignEnum[i][znacka_RX] = 0.0;
			streetsignEnum[i][znacka_RY] = 0.0;
			streetsignEnum[i][znacka_RZ] = 0.0;

			streetsignEnum[i][znacka_ObjectID1] = 0;

            editSpeedCamID[playerid] = -1;

            SendError(playerid, "Tvorba znaeky zruená!");
	    }
	    else if(response == 1)
		{

		    IsEditingAdresa[playerid] = false;

		    CreateDynamicStreetSign(znackaEdit[playerid], x, y, z, rx, ry, rz);

            SendSuccess(playerid, "Znaeka úspene vytvorená!");

            new
				Q_query[256];

			mysql_format(MYSQL, Q_query, 256, "INSERT INTO gm_roadsigns (Street, X, Y, Z, RX, RY, RZ) VALUES ('%e', '%f', '%f', '%f', '%f', '%f', '%f')",
				znackaEdit[playerid], x, y, z, rx, ry, rz);

			mysql_query(MYSQL, Q_query, false);
		}
	}

	if(IsEditingSpeedCam[playerid] == true)
	{
	    if(response == 0)
	    {
	        IsEditingSpeedCam[playerid] = false;
	        DestroyDynamicObject(objectid);

	        new i = editSpeedCamID[playerid];

            spdcamEnum[i][scam_X] = 0.0;
			spdcamEnum[i][scam_Y] = 0.0;
			spdcamEnum[i][scam_Z] = 0.0;
			spdcamEnum[i][scam_RX] = 0.0;
			spdcamEnum[i][scam_RY] = 0.0;
			spdcamEnum[i][scam_RZ] = 0.0;
			spdcamEnum[i][scam_SpeedLimit] = 0;
			spdcamEnum[i][scam_BaseFine] = 0;

            editSpeedCamID[playerid] = -1;

            SendError(playerid, "Tvorba radaru zruená!");
	    }
	    else if(response == 1)
		{

		    IsEditingSpeedCam[playerid] = false;

		    new i = editSpeedCamID[playerid];

            spdcamEnum[i][scam_X] = x;
			spdcamEnum[i][scam_Y] = y;
			spdcamEnum[i][scam_Z] = z;
			spdcamEnum[i][scam_RX] = rx;
			spdcamEnum[i][scam_RY] = ry;
			spdcamEnum[i][scam_RZ] = rz;

			spdcamEnum[i][scam_AreaID] = CreateDynamicSphere(x, y, z, 12.0, -1, -1, -1);

            editSpeedCamID[playerid] = -1;

            SendSuccess(playerid, "Radar úspene vytvorený!");

            SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

            new
				Q_query[256];

			mysql_format(MYSQL, Q_query, 256, "INSERT INTO gm_speedcameras (X, Y, Z, RX, RY, RZ, SpeedLimit, BaseFine) VALUES ('%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d')",
				x, y, z, rx, ry, rz, spdcamEnum[i][scam_SpeedLimit], spdcamEnum[i][scam_BaseFine]);

			mysql_query(MYSQL, Q_query, false);
		}
	}

	if(IsEditingSpike[playerid] == true)
	{
	    if(response == 0)
	    {
	        DestroyDynamicObject(objectid);
	        IsEditingSpike[playerid] = false;

	        for(new i; i < MAX_STINGERS; i++)
	        {
	            if(strlen(stingerEnum[i][stin_PlacedBy]) > 1)
	                continue;

				format(stingerEnum[i][stin_PlacedBy], 25, ReturnName(playerid));

				stingerEnum[i][stin_PosX] = x;
				stingerEnum[i][stin_PosY] = y;
				stingerEnum[i][stin_PosZ] = z;

				stingerEnum[i][stin_PosVW] = GetPlayerVirtualWorld(playerid);
				stingerEnum[i][stin_PosINT] = GetPlayerInterior(playerid);

				switch(SpikeModel[playerid])
				{
				    case 2899:
				    {
				        stingerEnum[i][stin_StingerID] = CreateDynamicStinger(STINGER_TYPE_SMALL, x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid),
							GetPlayerInterior(playerid), -1, 200.0);
				    }
				    default:
				    {
				        stingerEnum[i][stin_StingerID] = CreateDynamicStinger(STINGER_TYPE_BIG, x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid),
							GetPlayerInterior(playerid), -1, 200.0);
				    }
				}

				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(playerid, X,Y,Z);
                Streamer_UpdateEx(playerid, X,Y+0.1,Z);

				EnterInfo(playerid, "Polozil si ostatny koberec, zmazes ho prikazom ~b~/dspike~w~!", 3000, 0);

				return 0;
	        }
	    }
	    else if(response == 1)
	    {
	        DestroyDynamicObject(objectid);
	        IsEditingSpike[playerid] = false;

	        for(new i; i < MAX_STINGERS; i++)
	        {
	            if(strlen(stingerEnum[i][stin_PlacedBy]) > 1)
	                continue;

				format(stingerEnum[i][stin_PlacedBy], 25, ReturnName(playerid));

				stingerEnum[i][stin_PosX] = x;
				stingerEnum[i][stin_PosY] = y;
				stingerEnum[i][stin_PosZ] = z;

				stingerEnum[i][stin_PosVW] = GetPlayerVirtualWorld(playerid);
				stingerEnum[i][stin_PosINT] = GetPlayerInterior(playerid);

				switch(SpikeModel[playerid])
				{
				    case 2899:
				    {
				        stingerEnum[i][stin_StingerID] = CreateDynamicStinger(STINGER_TYPE_SMALL, x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid),
							GetPlayerInterior(playerid), -1, 200.0);
				    }
				    default:
				    {
				        stingerEnum[i][stin_StingerID] = CreateDynamicStinger(STINGER_TYPE_BIG, x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid),
							GetPlayerInterior(playerid), -1, 200.0);
				    }
				}

				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(playerid, X,Y,Z);
                Streamer_UpdateEx(playerid, X,Y+0.1,Z);

				EnterInfo(playerid, "Polozil si ostatny koberec, zmazes ho prikazom ~b~/dspike~w~!", 3000, 0);

				return 0;
	        }
	    }
	}
	else if(IsEditingBarrier[playerid] == true)
	{
	    if(response == 0)
	    {
	        DestroyDynamicObject(objectid);
	        IsEditingBarrier[playerid] = false;

	        for(new i; i < MAX_BARRIERS; i++)
	        {
	            if(strlen(barrierEnum[i][barri_PlacedBy]) > 1)
	                continue;

				format(barrierEnum[i][barri_PlacedBy], 25, ReturnName(playerid));

                barrierEnum[i][barri_LabelUsed] = 0;
				barrierEnum[i][barri_PosX] = x;
				barrierEnum[i][barri_PosY] = y;
				barrierEnum[i][barri_PosZ] = z;

				barrierEnum[i][barri_PosVW] = GetPlayerVirtualWorld(playerid);
				barrierEnum[i][barri_PosINT] = GetPlayerInterior(playerid);

				barrierEnum[i][barri_BarrierID] = CreateDynamicObject(SpikeModel[playerid], x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 70.0, 50.0, -1, 1);

                new Float:X, Float:Y, Float:Z;
				GetPlayerPos(playerid, X,Y,Z);
                Streamer_UpdateEx(playerid, X,Y+0.1,Z);

                EditDynamicObject(playerid, barrierEnum[i][barri_BarrierID]);

				EnterInfo(playerid, "Polozil si barieru, zmazes ju prikazom ~b~/dbarrier~w~!", 3000, 0);

				return 0;
	        }
	    }
	    else if(response == 1)
	    {
	        DestroyDynamicObject(objectid);
	        IsEditingBarrier[playerid] = false;

	        for(new i; i < MAX_BARRIERS; i++)
	        {
	            if(strlen(barrierEnum[i][barri_PlacedBy]) > 1)
	                continue;

				format(barrierEnum[i][barri_PlacedBy], 25, ReturnName(playerid));

				barrierEnum[i][barri_PosX] = x;
				barrierEnum[i][barri_PosY] = y;
				barrierEnum[i][barri_PosZ] = z;

				barrierEnum[i][barri_PosVW] = GetPlayerVirtualWorld(playerid);
				barrierEnum[i][barri_PosINT] = GetPlayerInterior(playerid);

				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(playerid, X,Y,Z);
                Streamer_UpdateEx(playerid, X,Y+0.1,Z);

				barrierEnum[i][barri_BarrierID] = CreateDynamicObject(SpikeModel[playerid], x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 70.0, 50.0, -1, 1);

				EnterInfo(playerid, "Polozil si barieru, zmazes ju prikazom ~b~/dbarrier~w~!", 3000, 0);

				return 0;
	        }
	    }
	}

	return 1;
}

public OnVehicleSpawn(vehicleid)
{

    CallRemoteFunction("blinker_OnVehicleSpawn", "i", vehicleid);

    vEnum[vehicleid][v_ELM] = 0;
    vEnum[vehicleid][v_Radar] = false;
	vEnum[vehicleid][v_Taxameter] = false;

	format(vEnum[vehicleid][v_RadioURL], 256, "");

	ex_SetVehicleLocked(vehicleid, false);
	SetVehicleParams(vehicleid, VEHICLE_TYPE_DOORS, 0);

	RepairVehicle(vehicleid);

    ChangeVehicleColor(vehicleid, vEnum[vehicleid][v_Color_1], vEnum[vehicleid][v_Color_2]);

	if(veh_IsDeath[vehicleid])
	{
	
	    for(new ix; ix < 14; ix++)
		{
		    if(ix > 13)
		        break;

			if(tvehtuningresp[vehicleid][ix] > 0) AddVehicleComponent(vehicleid, tvehtuningresp[vehicleid][ix]);
			tvehtuningresp[vehicleid][ix] = 0;

		}
	
	    if(GetVehicleFaction(vehicleid) > 0)
	    {
	        SetVehiclePos(vehicleid, vEnum[vehicleid][v_def_SpawnX], vEnum[vehicleid][v_def_SpawnY], vEnum[vehicleid][v_def_SpawnZ]);
			SetVehicleVirtualWorld(vehicleid, vEnum[vehicleid][v_def_SpawnVW]);
			LinkVehicleToInterior(vehicleid, vEnum[vehicleid][v_def_SpawnINT]);
	    }
	
	    ex_SetVehicleLocked(vehicleid, true);
		SetVehicleParams(vehicleid, VEHICLE_TYPE_DOORS, 1);

		SetVehicleHealth(vehicleid, 299.9);

		UpdateVehicleDamageStatus(vehicleid,
			encode_panels(random(3), random(3), random(3), random(3), random(3), random(3), random(3)),
			encode_doors(random(3), random(3), random(3), random(3)),
			encode_lights(random(2), random(2), random(2)),
			encode_tires(random(2), random(2), random(2), random(2))
		);

		VehAttachObj(vehicleid);
	}

    veh_IsDeath[vehicleid] = false;

    if(vEnum[vehicleid][v_IsBeingRespawned] == true)
    {
        for(new ix; ix < 14; ix++)
		{
		    if(ix > 13)
		        break;

			if(tvehtuningresp[vehicleid][ix] > 0) AddVehicleComponent(vehicleid, tvehtuningresp[vehicleid][ix]);
			tvehtuningresp[vehicleid][ix] = 0;

		}
    
        vEnum[vehicleid][v_IsBeingRespawned] = false;
        SetVehiclePos(vehicleid, vEnum[vehicleid][v_def_SpawnX], vEnum[vehicleid][v_def_SpawnY], vEnum[vehicleid][v_def_SpawnZ]);
		SetVehicleVirtualWorld(vehicleid, vEnum[vehicleid][v_def_SpawnVW]);
		LinkVehicleToInterior(vehicleid, vEnum[vehicleid][v_def_SpawnINT]);
	}
	return 1;
}

public OnPlayerText(playerid, text[]) {
	func_OnPlayerText(playerid, text);
	return 0;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{

	if(IsAbleToApplyOnFootAnim(playerid) == 0)
	{
	    ClearAnimations(playerid, 1);
	}

    CallRemoteFunction("corpse_OnPlayerEnterVehicle", "idd", playerid, vehicleid, ispassenger);

	if(ispassenger && GetVehicleParams(vehicleid, VEHICLE_TYPE_DOORS) == 1)
	{
	
	    ClearAnimations(playerid, 1);
	    SendError(playerid, "Toto vozidlo je zamknuté!");

	    return 1;
	}
	
	if(vEnum[vehicleid][v_rentalb_IsRental])
	{
	    if(strcmp(vEnum[vehicleid][v_rentalb_RentedBy], ReturnName(playerid), true))
	    {
	        if(GetPlayerAdminLevel(playerid) > 2)
	        {
	            SendError(playerid, "Tento bicykel je prenajaty!");
	        }
	        else
	        {
	        
	            ClearAnimations(playerid, 1);
			    SendError(playerid, "Tento bicykel nie je tvoj!");

			    return 1;
	        }
	    }
	}

    wasEnteringVehicle[playerid] = true;
    wasEnteringVehicleID[playerid] = vehicleid;
    wasEnteringVehiclePass[playerid] = ispassenger;

	KillTimer(wasEnteringTimer[playerid]);
	wasEnteringTimer[playerid] = SetTimerEx("ac_stopEnterVeh", 4000, false, "i", playerid);
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	return 1;
}

opsc_PrintMessages(playerid, newstate, oldstate)
{
	#pragma unused oldstate

	switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
	{
	    case
			448,
			461,
			462,
			463,
			468,
			471,
			521,
			522,
			523,
			572,
			581,
			586
		:
		{

			if(newstate == PLAYER_STATE_DRIVER)
			{
			    EnterInfo(playerid, "~w~Vozidlo mozes nastartovat prikazom ~g~/engine~w~ alebo drzanim klavesy ~g~~k~~CONVERSATION_NO~~w~!~n~Svetla zapnes prikazom ~g~/lights~w~ alebo podrzanim klavesy (default) ~g~+~w~.");
			}

			return 1;
		}

		case
			481,
			509,
			510
		:
			return 1;
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{
	    EnterInfo(playerid, "~w~Vozidlo mozes nastartovat prikazom ~g~/engine~w~ alebo klavesou ~g~~k~~CONVERSATION_NO~~w~!~n~Svetla zapnes prikazom ~g~/lights~w~ alebo podrzanim klavesy (default) ~g~+~w~.~n~Pasy si zapnes prikazom ~g~/pasy~w~.");
	}
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
	    EnterInfo(playerid, "~w~Pasy si zapnes prikazom ~g~/pasy~w~.");
	}

	return 1;

}

opsc_Seatbelt(playerid, newstate, oldstate)
{

    if(newstate == PLAYER_STATE_DRIVER)
	{

	    AddToLastDriver(playerid, GetPlayerVehicleID(playerid));

	    sb_lastVehicle[playerid] = GetPlayerVehicleID(playerid);
	    sb_lastSeat[playerid] = GetPlayerVehicleSeat(playerid);

	    if(strlen(vEnum[GetPlayerVehicleID(playerid)][v_RadioURL]) > 2)
		    PlayAudioStreamForPlayerEx(playerid, vEnum[GetPlayerVehicleID(playerid)][v_RadioURL]);
	}

    if(newstate == PLAYER_STATE_PASSENGER)
    {
        sb_lastVehicle[playerid] = GetPlayerVehicleID(playerid);
	    sb_lastSeat[playerid] = GetPlayerVehicleSeat(playerid);

	    if(strlen(vEnum[GetPlayerVehicleID(playerid)][v_RadioURL]) > 2)
		    PlayAudioStreamForPlayerEx(playerid, vEnum[GetPlayerVehicleID(playerid)][v_RadioURL]);
    }

    if((oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) && newstate == PLAYER_STATE_ONFOOT && hasSeatbelt[playerid] == true)
    {
        if(opt_vyppasy[playerid]==1)
		{
	        new
				Float:F_Speed,
				I_Speed;

	        ex_GetVehicleSpeed(sb_lastVehicle[playerid], 1, I_Speed, F_Speed);

	        if(I_Speed < 5)
	        {
                hasSeatbelt[playerid] =false;
	        }
	        else
			{
		        SendError(playerid, "Má zapnuté pásy a auto sa pohybuje, neboli odopnuté!");
				PutPlayerInVehicleEx(playerid, sb_lastVehicle[playerid], sb_lastSeat[playerid]);
			}
		}
		else
		{
		    SendError(playerid, "Má zapnuté pásy!");
			PutPlayerInVehicleEx(playerid, sb_lastVehicle[playerid], sb_lastSeat[playerid]);
		}
    }

    if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) {
        StopAudioStreamForPlayerEx(playerid);
    }

    return 1;
}

opsc_AntiVehicleTeleport(playerid, newstate, oldstate)
{

    preventVehAction[playerid] = true;
	KillTimer(preventVehActionT[playerid]);
	preventVehActionT[playerid] = SetTimerEx("timer_canDoVehAction", 150, false, "i", playerid);

    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        PlayerEnterTime[playerid] = GetTickCount();
        sb_lastVehicle[playerid] = GetPlayerVehicleID(playerid);
	    sb_lastSeat[playerid] = GetPlayerVehicleSeat(playerid);
    }
    else if(oldstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {

        if(strlen(vEnum[sb_lastVehicle[playerid]][v_RadioURL]) > 2)
		   	StopAudioStreamForPlayerEx(playerid);

        if((GetTickCount()-PlayerEnterTime[playerid]) < 220)//player entered and exited vehicle faster than 220 ms.
        {

            preventVTH[playerid] ++;

            if(preventVTH[playerid] == 2)
            {
                if(GetPlayerAdminLevel(playerid) < 4)
			    {
				   	stats_Ban[playerid] ++;
	 		 		BanPlayer(playerid, "Vehicle Teleport Hack", "System", 2);
				}
				else
				{
				    SCFM(playerid, COLOR_ADMINCMD, "[ ANTI-CHEAT ] Ak by si nebol administrátor, dostal by si BAN za Vehicle Teleport Hack.");
				}
			}
        }
    }

	return 1;
}

opsc_AmbientMusic(playerid, newstate)
{
	switch(newstate)
	{
	    case PLAYER_STATE_ONFOOT, PLAYER_STATE_DRIVER, PLAYER_STATE_PASSENGER:
	        RefreshMusicAmbientFor(playerid);
	}

	return 1;
}

opsc_Boombox(playerid, newstate)
{
	switch(newstate)
	{
	    case PLAYER_STATE_ONFOOT, PLAYER_STATE_DRIVER, PLAYER_STATE_PASSENGER:
	        RefreshBoomboxFor(playerid);
	}

	return 1;
}

opsc_AntiDriveBy(playerid, newstate)
{
	if(newstate == PLAYER_STATE_DRIVER)
	{
		SetPlayerArmedWeapon(playerid, 0);
	}

	return 1;
}

opsc_PDRadar(playerid, newstate, oldstate)
{

	/*if(newstate == PLAYER_STATE_DRIVER && GetVehicleFaction(GetPlayerVehicleID(playerid)) != 0 && GetVehicleFaction(GetPlayerVehicleID(playerid)) != GetPlayerFaction(playerid))
	{
	    if(GetPlayerAdminLevel(playerid) < 1)
		{
		    SendError(playerid, "Nemôe oférova frakèné vozidlá!");
		    return RemovePlayerFromVehicle(playerid);
		}
	}*/

	if((newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER) && GetPlayerVehicleSeat(playerid) < 2 && vEnum[GetPlayerVehicleID(playerid)][v_Radar] == true)
	{
	    PlayerTextDrawShow(playerid, pdRadar[playerid][0]);
	    PlayerTextDrawShow(playerid, pdRadar[playerid][1]);
	    PlayerTextDrawShow(playerid, pdRadar[playerid][2]);
	    PlayerTextDrawShow(playerid, pdRadar[playerid][3]);
		PlayerTextDrawShow(playerid, pdRadar[playerid][4]);
		PlayerTextDrawShow(playerid, pdRadar[playerid][5]);
		PlayerTextDrawShow(playerid, pdRadar[playerid][6]);
		PlayerTextDrawShow(playerid, pdRadar[playerid][7]);
		PlayerTextDrawShow(playerid, pdRadar[playerid][8]);
		PlayerTextDrawShow(playerid, pdRadar[playerid][9]);
		PlayerTextDrawShow(playerid, pdRadar[playerid][10]);
	}

	if((newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER) && vEnum[GetPlayerVehicleID(playerid)][v_Taxameter] == true)
	{
	    PlayerTextDrawShow(playerid, swoopTaxameter[playerid][0]);
	    PlayerTextDrawShow(playerid, swoopTaxameter[playerid][1]);
	    PlayerTextDrawShow(playerid, swoopTaxameter[playerid][2]);
	    PlayerTextDrawShow(playerid, swoopTaxameter[playerid][3]);
		PlayerTextDrawShow(playerid, swoopTaxameter[playerid][4]);
		PlayerTextDrawShow(playerid, swoopTaxameter[playerid][5]);
		PlayerTextDrawShow(playerid, swoopTaxameter[playerid][6]);
		PlayerTextDrawShow(playerid, swoopTaxameter[playerid][7]);
		PlayerTextDrawShow(playerid, swoopTaxameter[playerid][8]);
		PlayerTextDrawShow(playerid, swoopTaxameter[playerid][9]);
		PlayerTextDrawShow(playerid, swoopTaxameter[playerid][10]);
	}

	else if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    PlayerTextDrawHide(playerid, pdRadar[playerid][0]);
		PlayerTextDrawHide(playerid, pdRadar[playerid][1]);
		PlayerTextDrawHide(playerid, pdRadar[playerid][2]);
		PlayerTextDrawHide(playerid, pdRadar[playerid][3]);
		PlayerTextDrawHide(playerid, pdRadar[playerid][4]);
		PlayerTextDrawHide(playerid, pdRadar[playerid][5]);
		PlayerTextDrawHide(playerid, pdRadar[playerid][6]);
		PlayerTextDrawHide(playerid, pdRadar[playerid][7]);
		PlayerTextDrawHide(playerid, pdRadar[playerid][8]);
		PlayerTextDrawHide(playerid, pdRadar[playerid][9]);
		PlayerTextDrawHide(playerid, pdRadar[playerid][10]);

		PlayerTextDrawHide(playerid, swoopTaxameter[playerid][0]);
		PlayerTextDrawHide(playerid, swoopTaxameter[playerid][1]);
		PlayerTextDrawHide(playerid, swoopTaxameter[playerid][2]);
		PlayerTextDrawHide(playerid, swoopTaxameter[playerid][3]);
		PlayerTextDrawHide(playerid, swoopTaxameter[playerid][4]);
		PlayerTextDrawHide(playerid, swoopTaxameter[playerid][5]);
		PlayerTextDrawHide(playerid, swoopTaxameter[playerid][6]);
		PlayerTextDrawHide(playerid, swoopTaxameter[playerid][7]);
		PlayerTextDrawHide(playerid, swoopTaxameter[playerid][8]);
		PlayerTextDrawHide(playerid, swoopTaxameter[playerid][9]);
		PlayerTextDrawHide(playerid, swoopTaxameter[playerid][10]);

	}

	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{

	if(newstate == PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(GetVehicleModel(vehicleid) == 562)
	    {
	        new
			    color1,
			    color2
			;

			sys_GetVehicleColor(
			    vehicleid, color1, color2
			);

			switch(color1)
			{
			    case 3,17,18,21,22,42,43,45,58,62,70,78,88,117,121:
			        Achievement::Reward(playerid, ACHIEVEMENT_COLES_CAN_RELATE);
			}
	    }
	    
	    if(vEnum[vehicleid][v_rentalb_IsRental])
		{
		    if(strcmp(vEnum[vehicleid][v_rentalb_RentedBy], ReturnName(playerid), true))
		    {
		        if(GetPlayerAdminLevel(playerid) > 2)
		        {
		            SendError(playerid, "Tento bicykel je prenajaty!");
		        }
		        else
		        {

		            RemovePlayerFromVehicle(playerid);
				    SendError(playerid, "Tento bicykel nie je tvoj!");

				    return 1;
		        }
		    }
		}
		
		if(vEnum[vehicleid][v_IsSweeper] && GetVehicleModel(vehicleid) == 574)
		{
		    if(vehicleid != Sweeper::VehicleId[playerid])
		    {
	        	RemovePlayerFromVehicle(playerid);
				SendError(playerid, "Tento bicykel nie je tvoj!");
				return 1;
		    }
		}
	}


    CallRemoteFunction("corpse_OnPlayerStateChange", "idd", playerid, newstate, oldstate);
    CallRemoteFunction("trucker_OnPlayerStateChange", "idd", playerid, newstate, oldstate);

    if(newstate == PLAYER_STATE_DRIVER && IsPlayerInDynamicArea(playerid, PCMechanicArea, 0))
    {
        DisableRemoteVehicleCollisions(playerid, 1);
    }
    else
    {
        DisableRemoteVehicleCollisions(playerid, 0);
    }

    if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
    {
        for(new x; x < 9; x ++)
			PlayerTextDrawHide(playerid, TACHOMETER_TD[playerid][x]);
    }
	opsc_PDRadar(playerid, newstate, oldstate);
	opsc_AntiDriveBy(playerid, newstate);
	opsc_AntiVehicleTeleport(playerid, newstate, oldstate);
	opsc_PrintMessages(playerid, newstate, oldstate);
	opsc_Seatbelt(playerid, newstate, oldstate);
	opsc_Boombox(playerid, newstate);
	opsc_AmbientMusic(playerid, newstate);

	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
    func_OnPlayerEnterCheckpoint(playerid);
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{

	new
	    Command[64], Param1[64], Param2[64];

	sscanf(cmd, "s[64] S()[64] S()[64]", Command, Param1, Param2);

	// gravitácia
	if(!strcmp(Command, "gravity", true))
	{
	    new
			Float:newGravity = 0.008;

		if(strlen(Param1) > 0)
		{
		    newGravity = floatstr(Param1);
		}

		SetGravity(newGravity);
		Server_Gravity = newGravity;
		
		printf("[RCON] Gravitace upravena!");
	}
	
	// ucp say
	if(!strcmp(Command, "ucpsay", true))
	{
		if(strlen(Param2) < 1)
		    return printf("[UCP]: Zpravu se nepodarilo odeslat, neplatne parametry!");

		new S_finalString[256];
		format(S_finalString, sizeof(S_finalString), "(( [UCP] %s: %s ))", Param1, Param2);
		SendClientMessageToAll(COLOR_ADMINCMD, S_finalString);
	}
	
	// ucp pocasie
	if(!strcmp(Command, "ucpweather", true))
	{
		SetWeather(strval(Param1));
		printf("[RCON] Pocasi zmeneno!");
		FormatWarn(-1, "UcpCmd:", COLOR_ADMINCMD, "Bolo zmenene pocasie na id %d CEZ UCP.", strval(Param1));
	}
	
	// ucp ban
	if(!strcmp(Command, "ucpbanplayer", true))
	{
	    new
	        I_var=strlen(Param1);

		if(!IsPlayerConnected(I_var))
	    	return printf("[UCP]: Tento hráè nie je pripojený!");

	    if(GetPlayerAdminLevel(I_var) == 6)
		{
		    if(!strcmp(ReturnMaster(I_var), "bigw3b", false))
		    {
		        return printf("[UCP]: Tohoto hráèa nemôe zabanova!");
		    }
		}

		stats_Ban[I_var] ++;
		FormatLog(log_type_punish, "UCP dalo ban %s(%s) za UCP BAN", ReturnMaster(I_var), ReturnIP(I_var));

		if(GetPlayerFactionType(I_var) == FACTION_TYPE_LAW && IsPlayerWorking(I_var))
		{
		    Weapons::resetWeapons(I_var);
		}

	    Achievement::Reward(I_var, ACHIEVEMENT_BAN);
		BanPlayer(I_var, "UCP Ban", "Administrator", 2);
		printf("[RCON] Hrac zabanovan!");
	}
	
	// ucp unban
	if(!strcmp(Command, "ucpunbanplayer", true))
	{
	    new
			S_query[128],
		    Cache:q;

	    mysql_format(MYSQL, S_query, 128, "SELECT * FROM gm_ipbans WHERE Username = '%e' OR Master_Acc = '%e' OR gpci = '%e'", Param1, Param1, Param1);
		q = mysql_query(MYSQL, S_query);

		new pocet = cache_num_rows();
	 	cache_delete(q);

	 	if(pocet == 0)
	 	    return printf("[UCP]: Tento úèet nie je zabanovaný, alebo neexistuje!");

		mysql_format(MYSQL, S_query, 128, "DELETE FROM gm_ipbans WHERE Username = '%e' OR Master_Acc = '%e' OR gpci = '%e'", Param1, Param1, Param1);
		mysql_tquery(MYSQL, S_query);

		printf("[UCP]: Hrac %s dostal unban pres UCP!", Param1);

		FormatLog(log_type_punish, "UCP dalo unban hracovi %s.", Param1);
	    FormatWarn(-1, "UcpCmd:", COLOR_ADMINCMD, "UCP dalo unban hráèovi %s!", Param1);
	}

	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{

    new
    	foundId = -1;

	for( new i; i < MAX_BASKET_BALLS; i++ )
	{

		if(objectid != bballEnum[i][benum_objectId])
	        continue;

		foundId = i;
		break;

	}

	new
		keys, ud, lr,
		anim = 1;

	if(bballEnum[foundId][benum_holder] != INVALID_PLAYER_ID)
	{
		GetPlayerKeys(bballEnum[foundId][benum_holder], keys, ud, lr);

		if((ud == KEY_UP || lr == KEY_LEFT || lr == KEY_RIGHT || ud == KEY_DOWN) && (keys & KEY_SPRINT || playerSpaceCount[bballEnum[foundId][benum_holder]] > 0))
		    ApplyAnimation(bballEnum[foundId][benum_holder],"BSKTBALL","BBALL_run",4.5 + (float(playerSpaceCount[bballEnum[foundId][benum_holder]]) / 4),1,1,1,1,1), anim = 0;
		else if(ud == KEY_UP || lr == KEY_LEFT || lr == KEY_RIGHT || ud == KEY_DOWN)
		    ApplyAnimation(bballEnum[foundId][benum_holder],"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
		else
		    ApplyAnimation(bballEnum[foundId][benum_holder],"BSKTBALL","BBALL_idleloop",4.1,1,1,1,1,1);

        playerSpaceCount[bballEnum[foundId][benum_holder]] = 0;
	}

	switch(bballEnum[foundId][benum_ballState])
	{

	    case BALL_STATE_DRIBBLING_U:
	    {

	        StopObject(bballEnum[foundId][benum_objectId]);
	        disablePhysics(bballEnum[foundId][benum_objectId]);

	        new
	            Float:X, Float:Y, Float:Z,
				Float:A,
				Float:sp = 5.5;

			GetPlayerPos(bballEnum[foundId][benum_holder], X, Y, Z);
			GetPlayerFacingAngle(bballEnum[foundId][benum_holder], A);

			if(anim == 0)
			{
				X += 1.5 * floatsin(-A, degrees);
				Y += 1.5 * floatcos(-A, degrees);
				sp = 7.5;
			}
			else
			{
			    X += 0.4 * floatsin(-A, degrees);
				Y += 0.4 * floatcos(-A, degrees);
			}

			bballEnum[foundId][benum_ballState] = BALL_STATE_DRIBBLING_D;

			MoveObject(bballEnum[foundId][benum_objectId], X, Y, Z - 0.8, sp, 300, 300, 300);

	    }

	    case BALL_STATE_DRIBBLING_D:
	    {
	        StopObject(bballEnum[foundId][benum_objectId]);
	        disablePhysics(bballEnum[foundId][benum_objectId]);

	        new
	            Float:X, Float:Y, Float:Z,
				Float:A,
				Float:sp = 5.5;

			GetPlayerPos(bballEnum[foundId][benum_holder], X, Y, Z);
			GetPlayerFacingAngle(bballEnum[foundId][benum_holder], A);

			if(anim == 0)
			{
				X += 1.5 * floatsin(-A, degrees);
				Y += 1.5 * floatcos(-A, degrees);

				sp = 7.5;
			}
			else
			{
			    X += 0.5 * floatsin(-A, degrees);
				Y += 0.5 * floatcos(-A, degrees);
			}

			bballEnum[foundId][benum_ballState] = BALL_STATE_DRIBBLING_U;

			MoveObject(bballEnum[foundId][benum_objectId], X, Y, Z + 0.1, sp, 0, 0, 0);

	    }

	    case BALL_STATE_TO_BIN:
	    {

	        StopObject(bballEnum[foundId][benum_objectId]);
	        new facingid = bballEnum[foundId][benum_binId];
	        SetTimerEx("destroybbLabel", 3000, false, "i",
				_:CreateDynamic3DTextLabel(
					"** KO **", 0xFFFFFFFF, bball_binCoords[facingid][0], bball_binCoords[facingid][1], bball_binCoords[facingid][2] + 0.7,
					20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0, -1, 1)
			);

            enablePhysics(bballEnum[foundId][benum_objectId]);
			PHY_SetObjectVelocity(bballEnum[foundId][benum_objectId], float(-255 + random(510)) / 100, float(-255 + random(510)) / 100, -7.5);

			bballEnum[foundId][benum_ballState] = BALL_STATE_NONE;
	    }

	    case BALL_STATE_FALLING:
	    {

	        StopObject(bballEnum[foundId][benum_objectId]);
	        disablePhysics(bballEnum[foundId][benum_objectId]);

			bballEnum[foundId][benum_ballState] = BALL_STATE_NONE;
	    }
	}

	return 1;

}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{

	if(GetPlayerAdminLevel(playerid) < 4)
 	{
	 	stats_Ban[playerid] ++;

	    new
	        S_reason[64];

		format(S_reason, 64, "Tuning Hack (%s)", GetComponentName(componentid));

	    BanPlayer(playerid, S_reason, "System", 2);
	    return 0;
	}
	else
	{
   		SCFM(playerid, COLOR_ADMINCMD, "[ ANTI-CHEAT ] Ak by si nebol administrátor, dostal by si BAN za Tuning Hack.");
   		return 1;
	}
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{

    if(GetPlayerAdminLevel(playerid) < 4)
 	{
	 	stats_Ban[playerid] ++;
    	BanPlayer(playerid, "Paintjob Hack", "System", 2);
	}
	else
	{
   		SCFM(playerid, COLOR_ADMINCMD, "[ ANTI-CHEAT ] Ak by si nebol administrátor, dostal by si BAN za Paintjob Hack.");
	}

	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    if(GetPlayerAdminLevel(playerid) < 4)
 	{
	 	stats_Ban[playerid] ++;
    	BanPlayer(playerid, "Color Hack", "System", 2);
    	return 0;
	}
	else
	{
   		SCFM(playerid, COLOR_ADMINCMD, "[ ANTI-CHEAT ] Ak by si nebol administrátor, dostal by si BAN za Color Hack.");
   		return 1;
	}
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

opksc_FireCheck(playerid, newkeys, oldkeys)
{

	if(GetPlayerWeapon(playerid) == 42 && newkeys & KEY_FIRE && GetPlayerFDFire(playerid) != -1)
	{
		fdFire_Hasi[playerid] = true;
		fdFire_OhenID[playerid] = GetPlayerFDFire(playerid);

		SetTimerEx("fdfire_ExtinguisherCheck", 500, false, "i", playerid);
	}

	if(oldkeys & KEY_FIRE)
	{
		fdFire_Hasi[playerid] = false;
	}

	return 1;
}

opksc_BasketBall(playerid, newkeys)
{
    if(newkeys & KEY_SPRINT)
	{
	    if(GetTickCount() - playerLastTickSpace[playerid] > 1000)
	        playerLastTickSpace[playerid] = GetTickCount(), playerSpaceCount[playerid] = 0;

        playerSpaceCount[playerid] ++;
	}

	// Pick up the ball
	if(bb_playerHasBall[playerid] == false && newkeys & KEY_SECONDARY_ATTACK && !IsPlayerInAnyVehicle(playerid))
	{

	    new
	        foundId = -1;

		for( new i; i < MAX_BASKET_BALLS; i++ )
		{

			new
			    Float:X,
			    Float:Y,
			    Float:Z
			;

			GetObjectPos(bballEnum[i][benum_objectId], X,Y,Z);

			if(!IsPlayerInRangeOfPoint(playerid, 1.5, X, Y, Z))
			    continue;

            foundId = i;
			break;

		}

		if(foundId != -1)
		{
		    ClearAnimations(playerid, 1);

		    if(bballEnum[foundId][benum_holder] != INVALID_PLAYER_ID)
		    {

		        if(bb_cantGet[playerid] == true)
		            return ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);

                bb_cantGet[playerid] = true;
                SetTimerEx("BB_CanGet", 3000, false, "i", playerid);

		        new
		            chance = random(3);

				if(chance == 0)
				{
			        bb_ballEnumId[bballEnum[foundId][benum_holder]] = -1;
			        ClearAnimations(bballEnum[foundId][benum_holder]);
					bb_playerHasBall[bballEnum[foundId][benum_holder]] = false;
					ApplyAnimation(bballEnum[foundId][benum_holder], "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);

					bballEnum[foundId][benum_holder] = INVALID_PLAYER_ID;
				}
				else
				{
				    ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
				}
		    }
		    else
		        ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);

            bb_playerHasBall[playerid] = true;

            bballEnum[foundId][benum_holder] = playerid;

            new
                Float:X, Float:Y, Float:Z, Float:A;

			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);

			X += 1.5 * floatsin(-A, degrees);
			Y += 1.5 * floatcos(-A, degrees);

			bballEnum[foundId][benum_ballState] = BALL_STATE_DRIBBLING_U;

   			StopObject(bballEnum[foundId][benum_objectId]);
   			disablePhysics(bballEnum[foundId][benum_objectId]);
			MoveObject(bballEnum[foundId][benum_objectId], X, Y, Z, 2.5);

			bb_ballEnumId[playerid] = foundId;

		}

	}
	else if(bb_playerHasBall[playerid] == true && newkeys & KEY_SECONDARY_ATTACK && !IsPlayerInAnyVehicle(playerid))
	{
	    ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);

	    new
	        foundId = bb_ballEnumId[playerid],
			Float:X, Float:Y, Float:Z, Float:A,
			Float:speed
		;

        GetPlayerVelocity(playerid, X, Y, Z);
        speed = floatsqroot(X*X + Y*Y + Z*Z)*2000;

		speed = ((speed + 400) / (1000)) * 16.0;

		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);

		X = speed * floatsin(-A, degrees);
		Y = speed * floatcos(-A, degrees);
		Z = speed / 2.0;

		StopObject(bballEnum[foundId][benum_objectId]);
		enablePhysics(bballEnum[foundId][benum_objectId]);
		PHY_SetObjectVelocity(bballEnum[foundId][benum_objectId], X, Y, Z);
        bb_playerHasBall[playerid] = false;
        bballEnum[foundId][benum_holder] = INVALID_PLAYER_ID;
		bballEnum[foundId][benum_ballState] = BALL_STATE_NONE;
		bb_ballEnumId[playerid] = -1;
	}

	if(bb_playerHasBall[playerid] == true && newkeys & KEY_FIRE)
	{
		new
			bool:isfacing = false,
			facingid
		;

		for( new i; i < sizeof(bball_binCoords); i++)
		{

		    if(!IsPlayerFacingPoint(playerid, 20, bball_binCoords[i][0], bball_binCoords[i][1], bball_binCoords[i][2]))
		        continue;

			isfacing = true;
			facingid = i;

			break;
		}

		if(!isfacing)
		{
		    // Let's do a miss shot.

	     	ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
	     	ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);

		    new
		        foundId = bb_ballEnumId[playerid],
				Float:X, Float:Y, Float:Z, Float:A,
				Float:speed
			;

	        GetPlayerVelocity(playerid, X, Y, Z);
	        speed = floatsqroot(X*X + Y*Y + Z*Z)*6000;
			speed = ((speed + 400) / (1000)) * 16.0;

			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);

			X = (speed*1.1) * floatsin(-A, degrees);
			Y = (speed*1.1) * floatcos(-A, degrees);
			Z = speed / 1.6;

			StopObject(bballEnum[foundId][benum_objectId]);
			enablePhysics(bballEnum[foundId][benum_objectId]);
			PHY_SetObjectVelocity(bballEnum[foundId][benum_objectId], X, Y, Z);

	        bb_playerHasBall[playerid] = false;

	        bballEnum[foundId][benum_holder] = INVALID_PLAYER_ID;
			bballEnum[foundId][benum_ballState] = BALL_STATE_NONE;

			bb_ballEnumId[playerid] = -1;

		}
		else
		{

		    new
		        foundId = bb_ballEnumId[playerid];

		    if(IsPlayerInRangeOfPoint(playerid, 3.25, bball_binCoords[facingid][0], bball_binCoords[facingid][1], bball_binCoords[facingid][2]))
		    {

		        StopObject(bballEnum[foundId][benum_objectId]);
		        disablePhysics(bballEnum[foundId][benum_objectId]);

		        bb_playerHasBall[playerid] = false;
		        bballEnum[foundId][benum_holder] = INVALID_PLAYER_ID;
		        ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
				SetTimerEx("ClearAnims", 1100, 0, "d", playerid);
				MoveObject(bballEnum[foundId][benum_objectId], bball_binCoords[facingid][0], bball_binCoords[facingid][1], bball_binCoords[facingid][2] + 0.7, 6.5 + random(3), 300, 300, 300);

		        bballEnum[foundId][benum_ballState] = BALL_STATE_TO_BIN;
		        bballEnum[foundId][benum_binId] = facingid;
				bb_ballEnumId[playerid] = -1;
		    }
		    else if(IsPlayerInRangeOfPoint(playerid, 14.25, bball_binCoords[facingid][0], bball_binCoords[facingid][1], bball_binCoords[facingid][2]))
		    {

				new
				    Float:X,
				    Float:Y,
				    Float:Z
				;

				GetPlayerPos(playerid, X,Y,Z);

				new
				    Float:dist = GetDistance(bball_binCoords[facingid][0], bball_binCoords[facingid][1], bball_binCoords[facingid][2], X,Y,Z);

				new chance = random(floatround(dist / 3, floatround_ceil));

				if(chance == 0)
				{
			        StopObject(bballEnum[foundId][benum_objectId]);
			        disablePhysics(bballEnum[foundId][benum_objectId]);

			        bb_playerHasBall[playerid] = false;
			        bballEnum[foundId][benum_holder] = INVALID_PLAYER_ID;
			        ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);

					MoveObject(bballEnum[foundId][benum_objectId], bball_binCoords[facingid][0], bball_binCoords[facingid][1], bball_binCoords[facingid][2] + 0.7 + (float(-512 + random(1024)) / 1250), 10.5 + random(3), 300, 300, 300);

			        bballEnum[foundId][benum_ballState] = BALL_STATE_TO_BIN;
					bb_ballEnumId[playerid] = -1;
				}
				else
				{
				    ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
			     	ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);

			        bb_playerHasBall[playerid] = false;

			        bballEnum[foundId][benum_holder] = INVALID_PLAYER_ID;

					new
						Float:speed, Float:A
					;

			        GetPlayerVelocity(playerid, X, Y, Z);
			        speed = floatsqroot(X*X + Y*Y + Z*Z)*6000;
					speed = ((speed + 400) / (1000)) * 16.0;

					GetPlayerPos(playerid, X, Y, Z);
					GetPlayerFacingAngle(playerid, A);

					X = (speed*1.1) * floatsin(-A, degrees);
					Y = (speed*1.1) * floatcos(-A, degrees);
					Z = speed / 1.6;

					StopObject(bballEnum[foundId][benum_objectId]);
					enablePhysics(bballEnum[foundId][benum_objectId]);
					PHY_SetObjectVelocity(bballEnum[foundId][benum_objectId], X, Y, Z);

					bballEnum[foundId][benum_ballState] = BALL_STATE_NONE;

					bb_ballEnumId[playerid] = -1;
				}
		    }
		    else
		    {
		        ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
		     	ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);

                new
					Float:X, Float:Y, Float:Z, Float:A,
					Float:speed
				;

		        GetPlayerVelocity(playerid, X, Y, Z);
		        speed = floatsqroot(X*X + Y*Y + Z*Z)*6000;
				speed = ((speed + 400) / (1000)) * 16.0;

				GetPlayerPos(playerid, X, Y, Z);
				GetPlayerFacingAngle(playerid, A);

				X = (speed*1.1) * floatsin(-A, degrees);
				Y = (speed*1.1) * floatcos(-A, degrees);
				Z = speed / 1.6;

				StopObject(bballEnum[foundId][benum_objectId]);
				enablePhysics(bballEnum[foundId][benum_objectId]);
				PHY_SetObjectVelocity(bballEnum[foundId][benum_objectId], X, Y, Z);

		        bb_playerHasBall[playerid] = false;
		        bballEnum[foundId][benum_holder] = INVALID_PLAYER_ID;
				bballEnum[foundId][benum_ballState] = BALL_STATE_NONE;
				bb_ballEnumId[playerid] = -1;
		    }

		}
	}

	return 1;
}

new drug_lean_autoMeArr[][][] = {
	{{1}, "má vidite¾ne spomalené reflexy."},
	{{1}, "sa javí uvolnene."},
	{{1}, "si sem tam nahlas odgrgne."},

	{{2}, "má ve¾mi spomalené reflexy."},
	{{2}, "vyzerá dos uvolnene, je v pohodovej nálade."},
	{{2}, "grgol ako prasa."}
};

function drugcb_leaneffects(playerid, leantype, timesleft)
{
    if(timesleft < 1)
	    return 0;

	new Float:MaxHP, Float:HP, Float:dontwhen;
	ahac_GetPlayerHealth(playerid, HP);

	MaxHP = 3.4;
	dontwhen = 124.0;

	if(HP + MaxHP > dontwhen && HP < dontwhen)
		SetPlayerHealth(playerid, dontwhen);
	else if(HP < dontwhen)
		SetPlayerHealth(playerid, HP + MaxHP);

	if(timesleft % 2 == 0)
	{

	    new cancontinue = 0;
	    while(cancontinue == 0)
	    {

	        new x = random(sizeof(drug_lean_autoMeArr));

	        if(drug_lean_autoMeArr[x][0][0] != leantype)
	            continue;

            new finalstring[128 + 25];

			if(GetPlayerGender(playerid) == 1)
				format(finalstring, sizeof(finalstring), "* %s %s", GetPlayerNameEx(playerid, USE_MASK), drug_lean_autoMeArr[x][1]);
			else
		 		format(finalstring, sizeof(finalstring), "* %s %s", GetPlayerNameEx(playerid, USE_MASK), drug_lean_autoMeArr[x][1]);

			SendLocalMessage(playerid, MELOW_CHAT_RANGE, COLOR_VIOLET, finalstring);
			cancontinue = 1;
	        break;

	    }
	}

    SetTimerEx("drugcb_leaneffects", 10000+random(90000), false, "iii", playerid, leantype, timesleft-75);

	return 1;
}

new drug_weed_autoMeArr[][][] = {
	{{1}, "má narudlé oèné bulvy."},
	{{1}, "sa javí uvolnene."},

	{{2}, "má celkom èervené oèné bulvy."},
	{{2}, "vyzerá dos uvolnene, je v pohodovej nálade."},

	{{3}, "má extrémne èervené, a krvavé oèné bulvy - neprirodzene."},
	{{3}, "sa javí extrémne, neprirodzene uvolnene."}
};

function drugcb_weedeffects(playerid, weedtype, timesleft)
{
	if(timesleft < 1 || drug_playerConsumedDrug[playerid][weedtype-1] == false)
	    return  drug_playerConsumedDrug[playerid][weedtype-1] = false;

	new Float:MaxHP, Float:HP, Float:dontwhen;
	ahac_GetPlayerHealth(playerid, HP);

	switch(weedtype)
	{

	    case 1:
	        MaxHP = 1.2, dontwhen = 113.0;

		case 2:
		    MaxHP = 1.3, dontwhen = 117.0;

		case 3:
		    MaxHP = 1.8, dontwhen = 130.0;

	}

	if(HP + MaxHP > dontwhen && HP < dontwhen)
		SetPlayerHealth(playerid, dontwhen);
	else if(HP < dontwhen)
		SetPlayerHealth(playerid, HP + MaxHP);

	if(timesleft % 2 == 0)
	{

	    new cancontinue = 0;
	    while(cancontinue == 0)
	    {

	        new x = random(sizeof(drug_weed_autoMeArr));

	        if(drug_weed_autoMeArr[x][0][0] != weedtype)
	            continue;

            new finalstring[128 + 25];

			if(GetPlayerGender(playerid) == 1)
				format(finalstring, sizeof(finalstring), "* %s %s", GetPlayerNameEx(playerid, USE_MASK), drug_weed_autoMeArr[x][1]);
			else
		 		format(finalstring, sizeof(finalstring), "* %s %s", GetPlayerNameEx(playerid, USE_MASK), drug_weed_autoMeArr[x][1]);

			SendLocalMessage(playerid, MELOW_CHAT_RANGE, COLOR_VIOLET, finalstring);
			cancontinue = 1;
	        break;

	    }
	}

    SetTimerEx("drugcb_weedeffects", 10000+random(90000), false, "iii", playerid, weedtype, timesleft-1);

	return 1;
}

function drugcb_onplayersmokeweed(playerid, weedtype, consumedtimes)
{


	switch(weedtype)
	{
	    case 1:
	    {
	        // slaba
	        consumedtimes*=2;

	        if(consumedtimes < 3)
	            consumedtimes = 3;

			if(consumedtimes > 10)
			    consumedtimes = 10;

	        SetTimerEx("drugcb_weedeffects", 1, false, "iii", playerid, weedtype, consumedtimes);
	    }

	    case 2:
	    {
	        // stredna
	        consumedtimes*=2;

	        if(consumedtimes < 5)
	            consumedtimes = 5;

			if(consumedtimes > 12)
			    consumedtimes = 12;

	        SetTimerEx("drugcb_weedeffects", 1, false, "iii", playerid, weedtype, consumedtimes);
	    }

	    case 3:
	    {
	        // silna
	        new ctimes = consumedtimes*2;

	        if(ctimes < 8)
	            ctimes = 8;

			if(ctimes > 16)
			    ctimes = 16;

	        SetTimerEx("drugcb_weedeffects", 1, false, "iii", playerid, weedtype, ctimes);
	    }
	}

	return 1;
}

function drugcb_onplayerdrinklean(playerid, leantype, consumedml)
{

    /*if(GetConsoleVarAsInt("port") != 7777)
		SendClientMessage(playerid, -1, "[DRUGDEBUG] onplayersmokeweed triggered");*/

	switch(leantype)
	{
	    case 1:
	    {
	        // slaba
	        consumedml*=2;

	        if(consumedml < 3)
	            consumedml = 3;

			if(consumedml > 10)
			    consumedml = 10;

	        SetTimerEx("drugcb_leaneffects", 1, false, "iii", playerid, leantype, consumedml);
	    }

	    case 2:
	    {
	        // stredna
	        consumedml*=2;

	        if(consumedml < 5)
	            consumedml = 5;

			if(consumedml > 12)
			    consumedml = 12;

	        SetTimerEx("drugcb_leaneffects", 1, false, "iii", playerid, leantype, consumedml);
	    }

	    case 3:
	    {
	        // silna
	        new ctimes = consumedml*2;

	        if(ctimes < 8)
	            ctimes = 8;

			if(ctimes > 16)
			    ctimes = 16;

	        SetTimerEx("drugcb_leaneffects", 1, false, "iii", playerid, leantype, ctimes);
	    }
	}

	return 1;
}

new drugcb_smkweed[MAX_PLAYERS];
drugcb_checkSmokingWeed(playerid, newkeys)
{

	if(drug_weedConsumeType[playerid] < 1)
	    return 0;

	if(newkeys & KEY_FIRE)
	{
	    // potiahol si
	    if(GetTickDiff(GetTickCount(), drugcb_smkweed[playerid]) < 3400)
	        return 1;

		drugcb_smkweed[playerid] 			= GetTickCount();

		if(drug_weedConsumedTimes[playerid] == 0)
		{

		    if(drug_weedConsumeType[playerid] == 1)
		    	drug_weedTime[playerid]         = ((60000*2) + random(360000));
			else if(drug_weedConsumeType[playerid] == 2)
		    	drug_weedTime[playerid]         = ((60000*3) + random(360000));
            else if(drug_weedConsumeType[playerid] == 3)
		    	drug_weedTime[playerid]         = ((60000*4) + random(360000));

		    drug_weedTimer[playerid] 		= SetTimerEx("drugcb_onplayersmokeweed", drug_weedTime[playerid], false, "iii", playerid, drug_weedConsumeType[playerid], drug_weedConsumedTimes[playerid]+1);
		}
		else
		{
		    KillTimer(drug_weedTimer[playerid]);
		    drug_weedTime[playerid]         -= GetTickDiff(GetTickCount(), drug_weedTimeLast[playerid]);

		    if(drug_weedTime[playerid] < 2200)
		    {
		        drug_weedTime[playerid] = 2500;
		    }
			else
		    	drug_weedTime[playerid] 		-= 500+random(1600);

			//printf("%d", drug_weedTime[playerid]);

			drug_weedTimer[playerid] 		= SetTimerEx("drugcb_onplayersmokeweed", drug_weedTime[playerid], false, "iii", playerid, drug_weedConsumeType[playerid], drug_weedConsumedTimes[playerid]+1);
		}

	    drug_weedConsumedTimes[playerid] ++;
	    drug_weedTimeLast[playerid]         = GetTickCount();

	    if(drug_weedConsumedTimes[playerid] >= 9+random(3))
	    {
	        ClearAnimations(playerid, 1);
	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	        drug_weedConsumedTimes[playerid] 	= 0;
	        drug_weedConsumeType[playerid] 		= 0;

	        new finalstring[128 + 25];

			if(GetPlayerGender(playerid) == 1)
				format(finalstring, sizeof(finalstring), "** %s dofajèil jointa, vydýchol obláèik dymu, odhodil pak na zem a zalapol ho.", GetPlayerNameEx(playerid, USE_MASK));
			else
		 		format(finalstring, sizeof(finalstring), "** %s dofajèila jointa, vydýchla obláèik dymu, odhodila pak na zem a zalapla ho.", GetPlayerNameEx(playerid, USE_MASK));

			SendLocalMessage(playerid, MELOW_CHAT_RANGE, COLOR_VIOLET, finalstring);
	    }
	}
	else if(newkeys & KEY_SECONDARY_ATTACK)
	{
	    // zahodil to
	    drug_weedConsumeType[playerid]      = 0;
	    drug_weedConsumeType[playerid] 		= 0;
	}

	return 1;
}

ReverseBeeper(vehicleid, status)
{

	new
	    engine, lights, doors, boot, bonnet, objective
	;

	GetVehicleParamsEx(vehicleid, engine, lights, objective, doors, bonnet, boot, objective);

    switch(status)
    {
        case 0:
        {
            SetVehicleParamsEx(vehicleid, engine, lights, 0, doors, bonnet, boot, objective);
        }
        case 1:
        {
            SetVehicleParamsEx(vehicleid, engine, lights, 1, doors, bonnet, boot, objective);
        }
    }
}

bcso_doorskey(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 1.5, 2627.474365, 3119.819091, 2047.135131)) {
 	    if(bcsd1 == 1) {
 	        bcsd1 = 0;
 	        MoveDynamicObject(bcsd1o, 2627.474365, 3119.819091, 2047.135131,0.05, 0.000,0.000,180.0);
 	    } else {
 	        bcsd1 = 1;
			MoveDynamicObject(bcsd1o, 2627.474365, 3119.819091, 2047.135131,  0.05, 0.00000, 0.00000, 270.00000);
 	    }
 	}
 	else if(IsPlayerInRangeOfPoint(playerid, 1.5, 2625.273681, 3117.387451, 2047.005004)) {
 	    if(bcsd2 == 1) {
 	        bcsd2 = 0;
 	        MoveDynamicObject(bcsd2o, 2625.273681, 3117.387451, 2047.005004,0.05, 0.000,0.000,450.0);
 	    } else {
 	        bcsd2 = 1;
			MoveDynamicObject(bcsd2o, 2625.273681, 3117.387451, 2047.005004,  0.05, 0.00000, 0.00000, 720.00000);
 	    }
 	}
	return 1;
}

rsco_doorskey(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 1.5, 134.373, 1907.236, 646.228)) {
 	    if(sacsdMain == 1) {
 	        sacsdMain = 0;
 	        MoveDynamicObject(sacsdMainObject, 133.815,1907.771,645.154,0.05, 0.000,0.000,-29.940);
 	    } else {
 	        sacsdMain = 1;
			MoveDynamicObject(sacsdMainObject, 133.83531, 1907.77136, 645.15411,  0.05, 0.00000, 0.00000, 62.00000);
 	    }
 	} else if(IsPlayerInRangeOfPoint(playerid, 1.5, 107.539, 1942.806, 642.701)) {
 	    if(sacsdCells[0] == 1) {
 	        sacsdCells[0] = 0;
 	        MoveDynamicObject(sacsdCellsObject[0], 107.519,1942.785,642.951,0.2,0.000,0.000,-90.000);
 	    } else {
 	        sacsdCells[0] = 1;
			MoveDynamicObject(sacsdCellsObject[0], 107.45374, 1943.99402, 642.95117,0.2,0.00000, 0.00000, -90.00000);
 	    }
 	} else if(IsPlayerInRangeOfPoint(playerid, 1.5, 116.820, 1932.0, 642.701)) {
 	    if(sacsdCells[1] == 1) {
 	        sacsdCells[1] = 0;
 	        MoveDynamicObject(sacsdCellsObject[1], 117.194,1932.777,642.951,0.2,0.000,0.000,-90.000);
 	    } else {
 	        sacsdCells[1] = 1;
			MoveDynamicObject(sacsdCellsObject[1], 116.26981, 1933.62195, 642.95117,0.2,0.00000, 0.00000, 180.00000);
 	    }
 	} else if(IsPlayerInRangeOfPoint(playerid, 1.5, 116.835, 1942.884, 642.701)) {
 	    if(sacsdCells[2] == 1) {
 	        sacsdCells[2] = 0;
 	        MoveDynamicObject(sacsdCellsObject[2], 117.136,1942.793,642.942,0.2,0.000,0.000,-90.000);
 	    } else {
 	        sacsdCells[2] = 1;
			MoveDynamicObject(sacsdCellsObject[2],117.20060, 1944.40979, 642.94263,0.2,0.00000, 0.00000, -90.00000);
 	    }
 	} else if(IsPlayerInRangeOfPoint(playerid, 1.5, 116.821, 1939.468, 642.701)) {
 	    if(sacsdCells[3] == 1) {
 	        sacsdCells[3] = 0;
 	        MoveDynamicObject(sacsdCellsObject[3], 117.195,1939.454,642.951,0.2,0.000,0.000,-90.000);
 	    } else {
 	        sacsdCells[3] = 1;
			MoveDynamicObject(sacsdCellsObject[3],117.24350, 1940.98606, 642.95117,0.2,0.00000, 0.00000, -90.00000);
 	    }
 	} else if(IsPlayerInRangeOfPoint(playerid, 1.5, 116.820, 1936.089, 642.701)) {
		if(sacsdCells[4] == 1) {
 	        sacsdCells[4] = 0;
 	        MoveDynamicObject(sacsdCellsObject[4], 117.25880, 1936.01985, 642.95117,0.2,0.00000, 0.00000, -90.00000);
 	    } else {
 	        sacsdCells[4] = 1;
			MoveDynamicObject(sacsdCellsObject[4],117.24350, 1937.43606, 642.95117,0.2,0.00000, 0.00000, -90.00000);
 	    }
 	}

 	return 1;
}

new lastactiontime[MAX_PLAYERS];
new drugcb_drkln[MAX_PLAYERS];

krabica_keyYes(playerid,newkeys)
{
    if(newkeys & KEY_YES && GetPVarInt(playerid,"haskrabica") == 1 && !IsPlayerInAnyVehicle(playerid))
	{
		new
		    vehicleid = -1,
		    Float:distance = 2.5,
		    Float:newdist = 0.0,

			Float:Pos[3],
			Float:vPos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		foreach ( new i : Vehicle )
		{
		    if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i))
		        continue;

			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i))
			    continue;

			GetVehicleBoot(i, vPos[0], vPos[1], vPos[2]);

			newdist = GetDistanceFromPoint(vPos[0], vPos[1], vPos[2], Pos[0], Pos[1], Pos[2]);

			if(newdist < distance)
			{
			    vehicleid = i;
			    distance = newdist;
			}

			continue;
		}

		if(vehicleid == -1)
		    return SendError(playerid, "Nestojí pri kufri iadneho vozidla!");

		if(GetVehicleParams(vehicleid, VEHICLE_TYPE_BOOT) != 1)
		    return SendError(playerid, "Kufor neni otvorený!");

		new
			vehiclemodel = GetVehicleModel(vehicleid),

			maxkr = 0,
			alltype = 0
		;

        maxkr = getmaxdeliveryslots(vehiclemodel, alltype);

        if(maxkr == 0 || alltype == 0)
            return SendError(playerid, "Do tohoto vozidla nemôe naloi túto krabicu!");

		if(vEnum[vehicleid][v_CargoQuantity] + 1 > maxkr)
		    return SendError(playerid, "Táto krabica sa do tohoto vozidla nemestí!");

		if(vEnum[vehicleid][v_CargoType] > 0 && vEnum[vehicleid][v_CargoType] != GetPVarInt(playerid,"krtyp"))
            return SendError(playerid, "V tomto vozidle u je naloený iný typ krabice!");

        vEnum[vehicleid][v_CargoType]=GetPVarInt(playerid,"krtyp");
        vEnum[vehicleid][v_CargoQuantity]++;

        if(vEnum[vehicleid][v_CargoQuantity] == 1)
        {
            new Float:fPos[4], Float:fSize[3];

            new
				Float:vX,
	    		Float:vY,
	    		Float:vZ,

	    		str[ 128 ]
			;

			format(str, 128, "V tomto vozidle je %d/%d krabíc!",vEnum[vehicleid][v_CargoQuantity],maxkr);

            GetVehiclePos(vehicleid, fPos[0], fPos[1], fPos[2]);
	        GetVehicleZAngle(vehicleid, fPos[3]);
	        GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]);

	       	vX = fPos[0] - (floatsqroot(fSize[1] + fSize[1]) * floatsin(-fPos[3], degrees));
	        vY = fPos[1] - (floatsqroot(fSize[1] + fSize[1]) * floatcos(-fPos[3], degrees));
	        vZ = fPos[2];

            krabicalabel[vehicleid] = CreateDynamic3DTextLabel(
															str,
															COLOR_ADMINCMD,
															vX, vY, vZ + 0.1,
															7.0,
															INVALID_PLAYER_ID, vehicleid, 1,
															-1, -1,
															-1, 50.0, -1, 1
			);
		}
		else
		{
		    new
		        str[ 128 ]
			;

			format(str, 128, "V tomto vozidle je %d/%d krabíc!",vEnum[vehicleid][v_CargoQuantity],maxkr);
			UpdateDynamic3DTextLabelText(krabicalabel[vehicleid],COLOR_ADMINCMD, str);
		}

        DeletePVar(playerid,"haskrabica");
        DeletePVar(playerid,"krtyp");

        SCFM(playerid, COLOR_ADMINCMD, "[tovar]; Krabica naloená! Je tam %d krabíc z max. %d! Typ krabíc: %s", vEnum[vehicleid][v_CargoQuantity], maxkr, A_cargoTypes[vEnum[vehicleid][v_CargoType]]);

	}
	
	return 1;
}

alcohol_keys(playerid,newkeys)
{
    if(Alcohol::Holding(playerid) == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT /*&& GetTickDiff(GetTickCount(), lastactiontime[playerid]) > 3800*/)
	{
	    if(newkeys & 128 || newkeys & KEY_HANDBRAKE)
     	{
      		lastactiontime[playerid] = GetTickCount();
      		Alcohol::OnDrink(playerid);
      		new tstrx[ 48 ];

      		format(tstrx, 48, "~w~Vo flasi je este ~b~%d ml~w~!", Alcohol::objem[playerid]);
      		EnterInfo(playerid, tstrx);
		}
	}
	return 1;
}

skateboard_keys(playerid,newkeys,oldkeys)
{
    if(InfoSkate[playerid][sActive] != 0 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT){

	    if(GetPlayerInventoryItem(playerid, inv_skateboard) < 1)
	        return HideSkateboard(playerid);

		static bool:act;
		SetPlayerArmedWeapon(playerid,0);

		if(newkeys & KEY_HANDBRAKE){

			#if MODE_SKATE == 0
				// medium speed
				ApplyAnimation(playerid, "SKATE","skate_run",4.1,1,1,1,1,1,1);
			#else
				// fast speed
				ApplyAnimation(playerid, "SKATE","skate_sprint",4.1,1,1,1,1,1,1);
			#endif

			if(!act){
				act = true;

				if(InfoSkate[playerid][sActive] == 2)
					DestroyDynamicObject(InfoSkate[playerid][sSkate]);
				else
				    RemovePlayerAttachedObject(playerid,INDEX_SKATE);

                InfoSkate[playerid][sActive] = 2;

				InfoSkate[playerid][sSkate] = CreateDynamicObject(19878,0.0,0.0,0.0,0.0,0.0,0.0, .priority = 50);
				AttachDynamicObjectToPlayer(InfoSkate[playerid][sSkate],playerid, -0.2,0.0,-0.9,0.0,0.0,90);
			}

		}

		if(oldkeys & KEY_HANDBRAKE){

			ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);

			if(act){

				act = false;

				if(InfoSkate[playerid][sActive] == 2)
					DestroyDynamicObject(InfoSkate[playerid][sSkate]);
				else
					RemovePlayerAttachedObject(playerid,INDEX_SKATE);

				InfoSkate[playerid][sActive] = 1;

				#if TYPE_SKATE == 0
					// the skate is placed on the right arm
					SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
				#else
					// the skate is placed in the back
					SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,1,0.055999,-0.173999,-0.007000,-95.999893,-1.600010,24.099992,1.000000,1.000000,1.000000);
				#endif

			}

		}
	}
	return 1;
}

walkstyle_keys(playerid,newkeys,oldkeys)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && Alcohol::GetFromPlayer(playerid) >= 191)
	{
	    if (newkeys & KEY_UP || newkeys & KEY_DOWN || newkeys & KEY_LEFT || newkeys & KEY_RIGHT)
		{
	       walktime[playerid] = SetTimerEx("WalkAnimDrunk",200,0,"d",playerid);
	    }
	}
	else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerWalkingStyle(playerid) > 0)
	{
	    if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
	        || ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
	        || ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT)))
			{
	            walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
	    }
	}
	return 1;
}

openfdoors_keys(playerid,newkeys)
{

    if((GetPlayerAdminLevel(playerid) >= 3 || GetPlayerFaction(playerid) == 1) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && newkeys & KEY_SECONDARY_ATTACK && GetPlayerVirtualWorld(playerid) != 0)
        rsco_doorskey(playerid);

    if((GetPlayerAdminLevel(playerid) >= 3 || GetPlayerFaction(playerid) == 7) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && newkeys & KEY_SECONDARY_ATTACK && GetPlayerVirtualWorld(playerid) != 0)
        bcso_doorskey(playerid);
        
	return 1;
}

reverbeeper_keys(playerid,newkeys,oldkeys)
{
    if(IsPlayerInAnyVehicle(playerid))
    {
		if(((newkeys & KEY_JUMP) && !(oldkeys & KEY_JUMP)) || ((oldkeys & KEY_JUMP) && !(newkeys & KEY_JUMP)))
		{
			switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
			{
			    case
					431, 437, 408, 416,
					433, 427, 407, 544,
					432, 601, 428, 499,
					609, 498, 524, 578,
					486, 406, 455, 414,
					443, 515, 456, 403:
				{
				    if((newkeys & KEY_JUMP) && !(oldkeys & KEY_JUMP) && GetPlayerVehicleID(playerid) != 0)
				    {
				        SetPVarInt(playerid, "ReverseBeeper", 1);
				        ReverseBeeper(GetPlayerVehicleID(playerid), 1);
				    }
				    if((oldkeys & KEY_JUMP) && !(newkeys & KEY_JUMP) && GetPlayerVehicleID(playerid) != 0)
				    {
				        if(GetPVarInt(playerid, "ReverseBeeper") == 0) return 1;
				        SetPVarInt(playerid, "ReverseBeeper", 0);
				        ReverseBeeper(GetPlayerVehicleID(playerid), 0);
				    }
				}
			}
		}
	}
	return 1;
}

lean_keys(playerid, newkeys)
{
    if(newkeys & 128 && isdrinking[playerid] == true && GetTickDiff(GetTickCount(), lastactiontime[playerid]) > 3800)
	{

	    if(!IsPlayerInAnyVehicle(playerid))
	    {
			ClearAnimations(playerid, 1);
	    	ApplyAnimation(playerid, "BAR", "DNK_STNDM_LOOP", 4.1, false, false, false, false, 0, true);
	    }
		lastactiontime[playerid] = GetTickCount();

		if(isdrinkinglean[playerid] == true)
		{
		    // dal si do nosu
		    if(GetTickDiff(GetTickCount(), drugcb_drkln[playerid]) < 3400)
		        return 1;

			new teraz = (-35 - random(155));

			drugcb_drkln[playerid] 			= GetTickCount();

			if(drug_leanConsumedTimes[playerid] == 0)
			{

			    if(drug_leanConsumeType[playerid] == 1)
			    	drug_leanTime[playerid]         = ((30000*2) + random(170000));
				else if(drug_leanConsumeType[playerid] == 2)
			    	drug_leanTime[playerid]         = ((30000*3) + random(130000));
	            else if(drug_leanConsumeType[playerid] == 3)
			    	drug_leanTime[playerid]         = ((30000*4) + random(100000));

			    drug_leanTimer[playerid] 		= SetTimerEx("drugcb_onplayerdrinklean", drug_leanTime[playerid], false, "iii", playerid, drug_leanConsumeType[playerid], teraz);
			}
			else
			{
			    KillTimer(drug_leanTimer[playerid]);
			    drug_leanTime[playerid]         -= GetTickDiff(GetTickCount(), drug_leanTimeLast[playerid]);

			    if(drug_leanTime[playerid] < 2200)
			    {
			        drug_leanTime[playerid] = 2500;
			    }
				else
			    	drug_leanTime[playerid] 		-= 500+random(1600);

				drug_leanTimer[playerid] 		= SetTimerEx("drugcb_onplayerdrinklean", drug_leanTime[playerid], false, "iii", playerid, drug_leanConsumeType[playerid], drug_leanConsumedTimes[playerid]+teraz);
			}

		    drug_leanConsumedTimes[playerid] 	+= teraz;
		    drug_leanTimeLast[playerid]         = GetTickCount();

		    SetPlayerInventoryItem(playerid, inv_spritelean, GetPlayerInventoryItem(playerid, inv_spritelean) + teraz);
			leanlimit[playerid] += teraz;

		    if(leanlimit[playerid] < 1)
		    {
		        ClearAnimations(playerid, 1);
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		        drug_leanConsumedTimes[playerid] 	= 0;
		        drug_leanConsumeType[playerid] 		= 0;

		        isdrinking[playerid]                = false;
		        isdrinkinglean[playerid]            = false;
		        isdrinkingleanpet[playerid]            = false;

		        RemovePlayerAttachedObject(playerid, 8);

		        if(GetPlayerInventoryItem(playerid, inv_spritelean) < 1)
		        	SetPlayerInventoryItem(playerid, inv_spritelean, 0);

		        new finalstring[128 + 25];

				if(GetPlayerGender(playerid) == 1)
					format(finalstring, sizeof(finalstring), "** %s dopil f¾au leanu, zahodil ju na zem a ¾apol na òu.", GetPlayerNameEx(playerid, USE_MASK));
				else
			 		format(finalstring, sizeof(finalstring), "** %s dopila f¾au leanu a hodila ju na zem.", GetPlayerNameEx(playerid, USE_MASK));

				SendLocalMessage(playerid, MELOW_CHAT_RANGE, COLOR_VIOLET, finalstring);
		    }
		}

		if(isdrinkingleanpet[playerid] == true)
		{
		    // dal si do nosu
		    if(GetTickDiff(GetTickCount(), drugcb_drkln[playerid]) < 3100)
		        return 1;

			new teraz = (-35 - random(155));

			drugcb_drkln[playerid] 			= GetTickCount();

			if(drug_leanConsumedTimes[playerid] == 0)
			{

			    if(drug_leanConsumeType[playerid] == 1)
			    	drug_leanTime[playerid]         = ((15000*2) + random(110000));
				else if(drug_leanConsumeType[playerid] == 2)
			    	drug_leanTime[playerid]         = ((10000*3) + random(100000));
	            else if(drug_leanConsumeType[playerid] == 3)
			    	drug_leanTime[playerid]         = ((8000*4) + random(70000));

			    drug_leanTimer[playerid] 		= SetTimerEx("drugcb_onplayerdrinklean", drug_leanTime[playerid], false, "iii", playerid, drug_leanConsumeType[playerid], teraz);
			}
			else
			{
			    KillTimer(drug_leanTimer[playerid]);
			    drug_leanTime[playerid]         -= GetTickDiff(GetTickCount(), drug_leanTimeLast[playerid]);

			    if(drug_leanTime[playerid] < 2200)
			    {
			        drug_leanTime[playerid] = 2500;
			    }
				else
			    	drug_leanTime[playerid] 		-= 1000+random(3600);

				//printf("%d", drug_weedTime[playerid]);

				drug_leanTimer[playerid] 		= SetTimerEx("drugcb_onplayerdrinklean", drug_leanTime[playerid], false, "iii", playerid, drug_leanConsumeType[playerid], drug_leanConsumedTimes[playerid]+teraz);
			}

		    drug_leanConsumedTimes[playerid] 	+= teraz;
		    drug_leanTimeLast[playerid]         = GetTickCount();

		    SetPlayerInventoryItem(playerid, inv_spritelean, GetPlayerInventoryItem(playerid, inv_spritelean) + teraz);
			leanlimit[playerid] += teraz;

		    if(leanlimit[playerid] < 1)
		    {
		        ClearAnimations(playerid, 1);
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		        drug_leanConsumedTimes[playerid] 	= 0;
		        drug_leanConsumeType[playerid] 		= 0;

		        isdrinking[playerid]                = false;
		        isdrinkinglean[playerid]            = false;
		        isdrinkingleanpet[playerid]            = false;

		        RemovePlayerAttachedObject(playerid, 8);

		        if(GetPlayerInventoryItem(playerid, inv_spritelean) < 1)
		        	SetPlayerInventoryItem(playerid, inv_spritelean, 0);

		        new finalstring[128 + 25];

				if(GetPlayerGender(playerid) == 1)
					format(finalstring, sizeof(finalstring), "** %s vypil celý pohár s leanom, pretrel si hubu a hodil ho na zem.", GetPlayerNameEx(playerid, USE_MASK));
				else
			 		format(finalstring, sizeof(finalstring), "** %s vypila celý pohár s leanom, pretrela si hubu a hodila ho na zem.", GetPlayerNameEx(playerid, USE_MASK));

				SendLocalMessage(playerid, MELOW_CHAT_RANGE, COLOR_VIOLET, finalstring);
		    }
		}
	}
	return 1;
}

key_snakecam(playerid,newkeys)
{
    if(issnakecam[playerid]==false) return 0;
    
    if(newkeys & KEY_ANALOG_RIGHT)
    {
	    snakecamdata[playerid][6] += 22.5;

		snakecamdata[playerid][3] = snakecamdata[playerid][0] + 5.0 * floatsin(-snakecamdata[playerid][6], degrees);
		snakecamdata[playerid][4] = snakecamdata[playerid][1] + 5.0 * floatcos(-snakecamdata[playerid][6], degrees);
		snakecamdata[playerid][5] = snakecamdata[playerid][2] - 0.8;
		
		SetPlayerCameraPos(playerid, snakecamdata[playerid][0], snakecamdata[playerid][1], snakecamdata[playerid][2]);
		SetPlayerCameraLookAt(playerid, snakecamdata[playerid][3], snakecamdata[playerid][4], snakecamdata[playerid][5]);
	}
	else if(newkeys & KEY_ANALOG_LEFT)
	{
	    snakecamdata[playerid][6] -= 22.5;

		snakecamdata[playerid][3] = snakecamdata[playerid][0] + 5.0 * floatsin(-snakecamdata[playerid][6], degrees);
		snakecamdata[playerid][4] = snakecamdata[playerid][1] + 5.0 * floatcos(-snakecamdata[playerid][6], degrees);
		snakecamdata[playerid][5] = snakecamdata[playerid][2] - 0.8;
		
		SetPlayerCameraPos(playerid, snakecamdata[playerid][0], snakecamdata[playerid][1], snakecamdata[playerid][2]);
		SetPlayerCameraLookAt(playerid, snakecamdata[playerid][3], snakecamdata[playerid][4], snakecamdata[playerid][5]);
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    lastkeypressunix[playerid] = gettime();
    if(isuserafk[playerid] != 0)
	{
	    SCError(playerid, "Vrátil si sa do hry po %d minútach!", floatround((gettime()-isuserafk_start[playerid])/60,floatround_round));
	    isuserafk[playerid] = 0;
	    isuserafk_start[playerid] = 0;
	}
	//snakecam
	////////////////////////////////////////////////////////////////////////////
	key_snakecam(playerid,newkeys);
    ////////////////////////////////////////////////////////////////////////////
    // mrtvoly
	CallRemoteFunction("corpse_OnPlayerKeyStateChange", "idd", playerid, newkeys, oldkeys);
	////////////////////////////////////////////////////////////////////////////
	// interaktívne npc
    InteractiveNPC::OnKeyStateChange(playerid, newkeys, oldkeys);
    ////////////////////////////////////////////////////////////////////////////
    // otváranie dverí frakcií
    openfdoors_keys(playerid,newkeys);
    ////////////////////////////////////////////////////////////////////////////
    // alkohol
	alcohol_keys(playerid,newkeys);
	////////////////////////////////////////////////////////////////////////////
	// walk styles
	walkstyle_keys(playerid,newkeys,oldkeys);
    ////////////////////////////////////////////////////////////////////////////
    // trúbenie pri spiatocke v kamione
    reverbeeper_keys(playerid,newkeys,oldkeys);
	////////////////////////////////////////////////////////////////////////////
	// skateboard
	skateboard_keys(playerid,newkeys,oldkeys);
	////////////////////////////////////////////////////////////////////////////
	// check hulenia
    if(GetPlayerSpecialAction(playerid) == 21) drugcb_checkSmokingWeed(playerid, newkeys);
    ////////////////////////////////////////////////////////////////////////////
    // potiahnutie si fajèiva
	if(newkeys & KEY_FIRE && GetPlayerSpecialAction(playerid) == 21 && !IsPlayerInAnyVehicle(playerid) && GetTickDiff(GetTickCount(), lastactiontime[playerid]) > 3800)
		ApplyAnimation(playerid, "SMOKING", "M_SMK_DRAG", 4.1, false, false, false, false, 0, true), lastactiontime[playerid] = GetTickCount();
    ////////////////////////////////////////////////////////////////////////////
    // naloenie krabice prostrednictvom tlaèidla Y
    krabica_keyYes(playerid,newkeys);
    ////////////////////////////////////////////////////////////////////////////
    // pitie leanu
    lean_keys(playerid, newkeys);
    ////////////////////////////////////////////////////////////////////////////
    // zahodenie leanu
	if(newkeys & KEY_SECONDARY_ATTACK && isdrinking[playerid] == true)
	{
	    isdrinking[playerid] = false;

		if(isdrinkinglean[playerid] == true)
		{
		    isdrinkinglean[playerid] = false;
		    RemovePlayerAttachedObject(playerid, 8);
		}

		if(isdrinkingleanpet[playerid] == true)
		{
		    isdrinkingleanpet[playerid] = false;
		    RemovePlayerAttachedObject(playerid, 8);
		}
	}
	////////////////////////////////////////////////////////////////////////////
	// kopanie hrobu
	if(newkeys & KEY_FIRE && ps_isPlayerFreezed[playerid] > 0)
		ps_AddOneClick(playerid);
    ////////////////////////////////////////////////////////////////////////////
    // breakin
    if(newkeys & KEY_FIRE && breakin_isPlayerFreezed[playerid] > 0)
		breakin_AddOneClick(playerid);

	if(newkeys & KEY_YES && breakin_isPlayerFreezed[playerid] > 0)
	    breakin_StopBreaking(playerid);
    ////////////////////////////////////////////////////////////////////////////
    // vending machines
    if(!IsPlayerInAnyVehicle(playerid) && newkeys & KEY_SECONDARY_ATTACK ) {
    	if(GetPlayerAnimationIndex(playerid)!=1660) SetTimerEx("VendCheck", 500, false, "d", playerid);
    }
    // nitro
    key_CheckNOS_ctrl(playerid, newkeys, oldkeys);
    ////////////////////////////////////////////////////////////////////////////
	// hasenie poiaru
	opksc_FireCheck(playerid, newkeys, oldkeys);
    ////////////////////////////////////////////////////////////////////////////
    // rybárèenie
    if(rybari[playerid])
        key_StopFishing(playerid, newkeys);
    ////////////////////////////////////////////////////////////////////////////
    // rúbanie stromu
   	if(key_CheckAnawaltCutDown(playerid, newkeys)==1)
   	    return 0;
    ////////////////////////////////////////////////////////////////////////////
    // driveby fix
    key_CheckDriveBy_caps(playerid, newkeys);
    ////////////////////////////////////////////////////////////////////////////
    // tankovanie
    key_CheckFueling_space(playerid, newkeys, oldkeys);
    ////////////////////////////////////////////////////////////////////////////
    // zapnutie motoru
    if(key_CheckVehicleEngine(playerid, newkeys, oldkeys)==1)
        return 0;
    ////////////////////////////////////////////////////////////////////////////
	// zamknutie auta
	if(key_CheckVehicleLock(playerid, newkeys)==1)
	    return 0;
    ////////////////////////////////////////////////////////////////////////////
    // zapnutie svetiel
   	if(key_CheckVehicleLights(playerid, newkeys, oldkeys)==1)
   	    return 0;
   	////////////////////////////////////////////////////////////////////////////
   	// spectate systém
    if(key_CheckSpectate(playerid, newkeys,oldkeys)==1)
        return 0;
    ////////////////////////////////////////////////////////////////////////////
    // cctv
    if(key_CheckCCTV(playerid, newkeys)==1)
        return 0;
    ////////////////////////////////////////////////////////////////////////////
    // damage systém
	if(key_CheckAnimationWound_spacesh(playerid, newkeys) == 1)
	    return 0;
	////////////////////////////////////////////////////////////////////////////
	// basketball
	opksc_BasketBall(playerid, newkeys);
    ////////////////////////////////////////////////////////////////////////////
    // vypnutie animácie asi
	if( key_CheckAnimationStop_enter(playerid, newkeys) == 1 )
	    return 0;
    ////////////////////////////////////////////////////////////////////////////
    // skrytie obè. p
	if( key_CheckHideID_h(playerid, newkeys) == 1 )
	    return 0;
    ////////////////////////////////////////////////////////////////////////////
    // vchadzanie vychadzanie;;;;;;;;;;;;;;;;;;;;
	if( key_CheckEnterExit_y(playerid, newkeys) == 1 )
		return 0;
	////////////////////////////////////////////////////////////////////////////
	// pásy
	/*if(key_Seatbelt_Y(playerid, newkeys, oldkeys)==1)
		return 0;*/

	return 1;
}

ReloadBoxLabel(id)
{
    new
	    labelString[256],
		Float:price[4],
		storage[4],
		isusing[4];

	format(labelString, sizeof labelString, "{ececec}[ %s ]\n\n", fuelEnum[id][fuel_cislo_boxu]);

	price[0] = fuelEnum[id][fuel_pr_benzin];
	price[1] = fuelEnum[id][fuel_pr_diesel];
	price[2] = fuelEnum[id][fuel_pr_kerosin];
	price[3] = fuelEnum[id][fuel_pr_lpg];

	storage[0] = fuelEnum[id][fuel_st_benzin];
	storage[1] = fuelEnum[id][fuel_st_diesel];
	storage[2] = fuelEnum[id][fuel_st_kerosin];
	storage[3] = fuelEnum[id][fuel_st_lpg];

	isusing[0] = fuelEnum[id][fuel_is_benzin];
	isusing[1] = fuelEnum[id][fuel_is_diesel];
	isusing[2] = fuelEnum[id][fuel_is_kerosin];
	isusing[3] = fuelEnum[id][fuel_is_lpg];

	for ( new i; i < 4; i++)
	{
	    if(isusing[i] == 0)
	        continue;

		new
		    prefix[10],
			tstring[128];

		switch ( i )
		{
		    case 0:
		        format(prefix, sizeof prefix, "Benzín");

            case 1:
		        format(prefix, sizeof prefix, "Diesel");

            case 2:
		        format(prefix, sizeof prefix, "Kerosín");

            case 3:
		        format(prefix, sizeof prefix, "LPG");
		}

		format(tstring, sizeof tstring, "{ececec}%s $%.3f/L {898989}[%d/%dL]\n", prefix, price[i], storage[i], 500);

		strcat(labelString, tstring);
	}

	UpdateDynamic3DTextLabelText(fuelEnum[id][fuel_Label], 0xECECECFF, labelString);
}

StopPlayerFueling(playerid)
{

    new
	    Float:f_finalPrice = (float(fstat_NatankovalLitrov[playerid] + 1) * fstat_CenaZaLiter[playerid]),
	    finalPrice = floatround(f_finalPrice, floatround_floor),
	    id = fstat_BoxID[playerid];

	if(fstat_NatankovalLitrov[playerid] == 0)
	{
	    fstat_CanTankovat[playerid] = false;
		fstat_Tankuje[playerid] = false;
		fstat_IDAuta[playerid] = -1;
		fstat_NatankovalLitrov[playerid] = 0;
		fstat_TypPaliva[playerid] = -1;
		fstat_CenaZaLiter[playerid] = 0.0;
		fstat_BoxID[playerid] = -1;
	}

	if(f_finalPrice >= 0.01 && finalPrice < 1)
	    finalPrice = 1;

	ex_GivePlayerMoney(playerid, -f_finalPrice);
	money_spent[playerid]+=floatround(finalPrice,floatround_round);

	new tstring[128];

	format(tstring, 128, "~w~Natankoval si ~b~%d litrov ~w~paliva do vozidla ~b~%s~w~!~n~Za palivo si zaplatil ~b~%.2f$~w~!",
		fstat_NatankovalLitrov[playerid], GetVehicleName(fstat_IDAuta[playerid]), f_finalPrice);

	EnterInfo(playerid, tstring, 7000, 10);

	SCFM(playerid, 0xD0D0D0FF, "> Natankoval si %d litrov paliva do vozidla %s za %.2f$!", fstat_NatankovalLitrov[playerid], GetVehicleName(fstat_IDAuta[playerid]), f_finalPrice);

	fstat_CanTankovat[playerid] = false;
	fstat_Tankuje[playerid] = false;
	fstat_IDAuta[playerid] = -1;
	fstat_NatankovalLitrov[playerid] = 0;
	fstat_TypPaliva[playerid] = -1;
	fstat_CenaZaLiter[playerid] = 0.0;
	fstat_BoxID[playerid] = -1;

	foreach( new i : Businesses )
	{
	    if(businessEnum[i][bz_Address] != fuelEnum[id][fuel_assig_biz])
			continue;

		if(strlen(businessEnum[i][bz_Owner]) < 4)
		{
            fuelEnum[id][fuel_st_benzin] = 500;
            fuelEnum[id][fuel_st_diesel] = 500;
            fuelEnum[id][fuel_st_kerosin] = 500;
            fuelEnum[id][fuel_st_lpg] = 500;

            ReloadBoxLabel(id);
		}
		else
		{
			businessEnum[i][bz_Storage] += finalPrice;
		}

		break;
	}

	return 1;
}

function timer_TankovanieCheck(playerid)
{
	if(fstat_Tankuje[playerid] == false)
	    return 0;

	new
	    Float:f_finalPrice = (float(fstat_NatankovalLitrov[playerid] + 1) * fstat_CenaZaLiter[playerid]),
	    finalPrice = floatround(f_finalPrice, floatround_round);

	if(f_finalPrice >= 0.01 && finalPrice < 1)
	    finalPrice = 1;

	if(ex_GetPlayerMoney(playerid) < finalPrice && finalPrice != 0)
	    return SendError(playerid, "Nemá viac peòazí!"), StopPlayerFueling(playerid);

	new
	    id = fstat_BoxID[playerid],
		benzinid = fstat_TypPaliva[playerid];

    if((fuelEnum[id][fuel_st_benzin] <= 0 && benzinid == 0) ||
	    (fuelEnum[id][fuel_st_diesel] <= 0 && benzinid == 1) ||
	    (fuelEnum[id][fuel_st_kerosin] <= 0 && benzinid == 2) ||
	    (fuelEnum[id][fuel_st_lpg] <= 0 && benzinid == 3))
		return SendError(playerid, "Tento typ paliva sa práve vyèerpal!"), StopPlayerFueling(playerid);

    if(GetVehicleParams(fstat_IDAuta[playerid], VEHICLE_TYPE_ENGINE) == 1)
	    return SendError(playerid, "Toto vozidlo má zapnutý motor!"), StopPlayerFueling(playerid);

	if(vEnum[fstat_IDAuta[playerid]][v_Fuel] + 1 > 100)
	    return SendError(playerid, "Toto vozidlo má plnú nádr!"), StopPlayerFueling(playerid);

	switch(benzinid)
	{
	    case 0:
	        fuelEnum[id][fuel_st_benzin] --;

        case 1:
	        fuelEnum[id][fuel_st_diesel] --;

    	case 2:
	        fuelEnum[id][fuel_st_kerosin] --;

        case 3:
	        fuelEnum[id][fuel_st_lpg] --;
	}

    fstat_NatankovalLitrov[playerid] ++;
    vEnum[fstat_IDAuta[playerid]][v_Fuel] ++;

    if(vEnum[fstat_IDAuta[playerid]][v_FuelType] != benzinid + 1 && vEnum[fstat_IDAuta[playerid]][v_Fuel] - fstat_NatankovalLitrov[playerid] <= fstat_NatankovalLitrov[playerid])
    	vEnum[fstat_IDAuta[playerid]][v_FuelType] = benzinid + 1;

    new tstring[250];

	format(tstring, 250, "~w~Tankujes palivo do vozidla ~b~%s~w~!~n~Natankoval si ~b~%d litrov ~w~za ~b~%.3f$~w~~n~Pre zrusenie tankovania pust ~r~SPACE~w~!",
		GetVehicleName(fstat_IDAuta[playerid]), fstat_NatankovalLitrov[playerid], f_finalPrice);

	EnterInfo(playerid, tstring, 500, 6);

	ReloadBoxLabel(fstat_BoxID[playerid]);

    SetTimerEx("timer_TankovanieCheck", 333, false, "i", playerid);

    return 1;
}

key_StopFishing(playerid, newkeys)
{
	if(newkeys & KEY_FIRE)
	{
	    EnterInfo(playerid, " ", 1, 10000);

	    TogglePlayerControllable(playerid, 1);
	    KillTimer(rybarittimer[playerid]);
	    rybari[playerid] = false;

	    EnterInfo(playerid, "~r~Vytiahol si prut predcasne, nic si nechytil!");
	}
}

key_CheckDriveBy_caps(playerid, newkeys)
{
    if(newkeys & KEY_CROUCH && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER && GetPlayerCameraMode(playerid) == 55) {
		g_Weapon[playerid] = GetPlayerWeapon(playerid);
		g_Count[playerid] = REARMED_WEAPON_UPDATES;
		ApplyAnimation(playerid,"PED","facanger",4.1,0,1,1,1,1);
		SetPlayerArmedWeapon(playerid, 0);
	}

	return 1;
}

key_CheckFueling_space(playerid, newkeys, oldkeys)
{

	if(fstat_CanTankovat[playerid] != true && fstat_Tankuje[playerid] != true)
	    return 0;

	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PRESSED( KEY_SPRINT ) && fstat_CanTankovat[playerid] == true)
	{
	    fstat_CanTankovat[playerid] = false;
	    fstat_Tankuje[playerid] = true;
	    SetTimerEx("timer_TankovanieCheck", 333, false, "i", playerid);
	}

	if(RELEASED( KEY_SPRINT) && fstat_Tankuje[playerid] == true)
	{
	    fstat_Tankuje[playerid] = false;

	    StopPlayerFueling(playerid);
	}

	return 1;

}

/*key_Seatbelt_Y(playerid, newkeys, oldkeys)
{
	if(!((newkeys & KEY_YES) && !(oldkeys & KEY_YES)))
     	return 0;

	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) == 4 || GetPlayerState(playerid) == 5 || GetPlayerState(playerid) == 6)
	    return 0;

	if(GetPlayerState(playerid) != 2 && GetPlayerState(playerid) != 3)
	    return 0;
	    
	new vid = GetPlayerVehicleID(playerid);
	
	if(GetVehicleFactionType(vid) == FACTION_TYPE_LAW)
	    return 0;

	switch(GetVehicleModel(vid))
	{
	    case
	        0,
	        406,
	        430,
	        432,
	        435,
	        441,
	        446,
	        448,
	        449,
	        450,
	        452,
	        453,
	        454,
			457,
			461,
			462,
			463,
			464,
			465,
			468,
			471,
			472,
			473,
			481,
			484,
			485,
			486,
			493,
			501,
			509,
			510,
			521,
			522,
			523,
			530,
			531,
			532,
			537,
			538,
			539,
			564,
			569,
			570,
			572,
			574,
			581,
			583,
			584,
			586,
			590,
			591,
			594,
			595,
			601,
			604,
			605,
			606,
			607,
			608,
			610,
			611:
		{
		    SendError(playerid, "Toto vozidlo nemá pásy!");
		    return 0;
		}
	}

    new
		S_finalString[128 + 25 + 5];

	new S_first[25];
	if(B_playerHasMask[playerid] == false) {
	    strcat(S_first, ReturnName(playerid));
	    strdel(S_first,strfind(S_first,"_",true),25);
	} else {
	    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
	}

	if(hasSeatbelt[playerid] == true)
	{
	    hasSeatbelt[playerid] = false;

	    format(S_finalString, sizeof(S_finalString), "AME: * %s si odopína pásy.", S_first);
	    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

		format(S_finalString, sizeof(S_finalString), "* %s si odopína pásy.", S_first);
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

	}
	else
	{
	    hasSeatbelt[playerid] = true;

	    format(S_finalString, sizeof(S_finalString), "AME: * %s si zapína pásy.", S_first);
	    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

		format(S_finalString, sizeof(S_finalString), "* %s si zapína pásy.", S_first);
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

	}
	return 1;
}*/

new tvl_timer[MAX_PLAYERS] = -1;
key_CheckVehicleLights(playerid, newkeys, oldkeys)
{

    /*new
	    bool:canContinue = false;

	if ((newkeys & KEY_SUBMISSION) && !(oldkeys & KEY_SUBMISSION))
	    canContinue = true;

	if(canContinue != true)
	    return 0;

    if(!IsPlayerInAnyVehicle(playerid))
	    return 0;

	if(GetPlayerVehicleSeat(playerid) != 0)
	    return 0;

    if(GetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_LIGHTS) == 1)
    {
        SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_LIGHTS, 0);
    }
    else
    {

        SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_LIGHTS, 1);

    }*/

    if(!IsPlayerInAnyVehicle(playerid))
	    return 0;

	if(GetPlayerVehicleSeat(playerid) != 0)
	    return 0;

	if((newkeys & KEY_SUBMISSION) && !(oldkeys & KEY_SUBMISSION))
	{
	    SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_LIGHTS, 1);
	    B_playerLights[playerid] = true;
	    tvl_timer[playerid] = SetTimerEx("timer_lightsCheck", 850, 0, "i", playerid);
	}

	if((oldkeys & KEY_SUBMISSION) && !(newkeys & KEY_SUBMISSION) && B_playerLights[playerid] == true)
	{
	    SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_LIGHTS, 0);
	    B_playerLights[playerid] = false;
	    KillTimer(tvl_timer[playerid]);
	}
	return 1;
}

key_CheckAnawaltCutDown(playerid, newkeys)
{
    if(Anawalt::cutdown_iscutting[playerid]!=true)
	    return 0;

	if((newkeys & KEY_FIRE))
	{
		if(Anawalt::workid[playerid] == ANAWALT_WORK_TYPE_CUT)
	    	Anawalt::cutdown_count[playerid] += 4;
		else if(Anawalt::workid[playerid] == ANAWALT_WORK_TYPE_CUTUP)
	    	Anawalt::cutdown_count[playerid] += 2;

		if(Anawalt::cutdown_count[playerid] >= 99)
		{
		    PlayerTextDrawHide(playerid, breakin_td[playerid][0]);
			PlayerTextDrawHide(playerid, breakin_td[playerid][1]);
			PlayerTextDrawHide(playerid, breakin_td[playerid][2]);

			ClearAnimations(playerid, 1);
			TogglePlayerControllable(playerid, 1);
			
			Anawalt::cutdown_iscutting[playerid] = false;
		    Anawalt::cutdown_temporary[playerid] = false;
		    KillTimer(tvl_timer[playerid]);

			if(Anawalt::workid[playerid] == ANAWALT_WORK_TYPE_CUT)
			{
				Anawalt::TreeCutDown(playerid);

			    if(Anawalt::isworking[playerid])
			    {
					new odmena = Economy::GetPrice(ECONOMY_LIST_ANAWALT_CUTDOWN);
					g_I_Vyplata[playerid] += odmena;
					SCSuccess(playerid, "Za zrúbanie stromu ti bude k výplate pripoèítaných %d$", odmena);

					Anawalt::isworking[playerid] = false;
					Anawalt::workid[playerid] = ANAWALT_WORK_TYPE_NONE;
				}
			}
			else if(Anawalt::workid[playerid] == ANAWALT_WORK_TYPE_CUTUP)
			{
			    Anawalt::TreeCutUp(playerid);

			    if(Anawalt::isworking[playerid])
			    {
					new odmena = Economy::GetPrice(ECONOMY_LIST_ANAWALT_CUTUP);
					g_I_Vyplata[playerid] += odmena;
					SCSuccess(playerid, "Za rozrezanie stromu ti bude k výplate pripoèítaných %d$", odmena);

					Anawalt::isworking[playerid] = false;
					Anawalt::workid[playerid] = ANAWALT_WORK_TYPE_NONE;
				}
				SCSuccess(playerid, "Dostal si nieko¾ko kusov dreva, odnes ich do /storage!");
				SCSuccess(playerid, "Môe poui frakèné auto na ich prevoz. /drevo nalozit");
				SCSuccess(playerid, "Ak sa s týmto drevom odpojí, bude stratené.");
			}
		    return 1;
		}

		PlayerTextDrawTextSize(playerid, breakin_td[playerid][2], 37.000000 + (float(Anawalt::cutdown_count[playerid]) * 0.64), 0.000000);
		PlayerTextDrawShow(playerid, breakin_td[playerid][2]);
	}
	return 1;
}

key_CheckVehicleLock(playerid, newkeys)
{

	if(IsPlayerInAnyVehicle(playerid))
	    return 0;

	new canContinue = 0;

	if(newkeys & KEY_NO)
		canContinue = 1;

	if(canContinue == 0)
	    return 0;

    new
		vid = -1,
		Float:newdist = 0.0,
		Float:distance = 3.1,
		Float:pos[3],
		Float:ppos[3];

	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

	foreach ( new i : Vehicle ) {
		if(!IsValidVehicle(i)) continue;
		if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;

		GetVehiclePos(i, pos[0], pos[1], pos[2]);

		newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

		if(newdist < distance) {
			vid = i;
			distance = newdist;
			continue;
		}
	}
	if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

	switch(GetVehicleModel(vid))
	{
	    case
	        481,
	        509,
	        510:
		{
		    return SendError(playerid, "Toto vozidlo nemá zámky!");
		}
	}

	new
		o[4];

	GetVehicleParamsCarWindows(vid, o[0],o[1],o[2],o[3]);

	if(o[0] != 0)
	{

	    if((isDoingDMV[playerid] && DMV_vehicleID[playerid] == vid))
		    return LockCar(playerid, vid);

		if(!strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
   			return LockCar(playerid, vid);

		if(!strcmp(vEnum[vid][v_SecOwner], ReturnName(playerid), false))
		    return LockCar(playerid, vid);

		if(GetVehicleFaction(vid) == 54 && pohrebnasluzba_isDoing[playerid] == true)
		    return LockCar(playerid, vid);

        if(GetPlayerFaction(playerid) == GetVehicleFaction(vid) && GetVehicleFaction(vid) != 0)
		    return LockCar(playerid, vid);

		return SendError(playerid, "Od tohoto vozidla nemá k¾úèe!");
	}

	if(GetVehicleParams(vid, VEHICLE_TYPE_DOORS) == 1)
	{

		ex_SetVehicleLocked(vid, false);

		if(blinklights[vid] == 0) SetTimerEx("timer_BlinkLights", 200, false, "iii",vid,0, GetVehicleParams(vid, VEHICLE_TYPE_LIGHTS));
  		blinklights[vid] = 1;

		SetVehicleParams(vid, VEHICLE_TYPE_DOORS, 0);

		new str[144]; format(str,144,"~w~Odomkol si vozidlo ~g~%s~w~!", VehicleNames[GetVehicleModel(vid)-400]);
  		EnterInfo(playerid, str, 5000, 2);

		new
			S_finalString[128 + 25 + 5];

		new
			S_first[25];

		if(B_playerHasMask[playerid] == false) {
			strcat(S_first, ReturnName(playerid));
			strdel(S_first,strfind(S_first,"_",true),25);
		} else {
			format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

		format(S_finalString, sizeof(S_finalString), "* %s odomyká jeho vozidlo.", S_first);
		BubbleChat(playerid, COLOR_VIOLET, S_finalString);
	}
	else
	{

		ex_SetVehicleLocked(vid, true);

		if(blinklights[vid] == 0) SetTimerEx("timer_BlinkLights", 200, false, "iii",vid,0, GetVehicleParams(vid, VEHICLE_TYPE_LIGHTS));
   		blinklights[vid] = 1;

		SetVehicleParams(GetPlayerVehicleID(vid), VEHICLE_TYPE_DOORS, 1);

		new str[144]; format(str,144,"~w~Zamkol si vozidlo ~g~%s~w~!", VehicleNames[GetVehicleModel(vid)-400]);
   		EnterInfo(playerid, str, 5000, 2);

		new
			S_finalString[128 + 25 + 5];

		new S_first[25];
		if(B_playerHasMask[playerid] == false) {
			strcat(S_first, ReturnName(playerid));
			strdel(S_first,strfind(S_first,"_",true),25);
		} else {
			format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

		format(S_finalString, sizeof(S_finalString), "* %s zamyká jeho vozidlo.", S_first);
		BubbleChat(playerid, COLOR_VIOLET, S_finalString);
	}

	PlayerPlaySound(playerid, 24600, ppos[0], ppos[1], ppos[2]);
	return 1;
}

key_CheckVehicleEngine(playerid, newkeys, oldkeys)
{

    if((oldkeys & KEY_NO) && !(newkeys & KEY_NO) && isStartingEngine[playerid] == true)
    {
	    isStartingEngine[playerid] = false;
		return EnterInfo(playerid, "~w~Pre nastartovanie vozidla musis klavesu ~r~~k~~CONVERSATION_NO~ ~w~drzat!");
	}

	new
	    bool:canContinue = false;

	if ((newkeys & KEY_NO) && !(oldkeys & KEY_NO))
	    canContinue = true;

	if(canContinue != true)
	    return 0;

    if(!IsPlayerInAnyVehicle(playerid))
	    return 0;

	if(GetPlayerVehicleSeat(playerid) != 0)
	    return 0;

    new vid = GetPlayerVehicleID(playerid);

    switch(GetVehicleModel(vid))
	{
	    case
	        481,
	        509,
	        510:
		{
		    return SendError(playerid, "Toto vozidlo nemá zámky!");
		}
	}

    if(preventVehAction[playerid] == true)
		return SendError(playerid, "Po nastúpení musí chví¾u poèka!");

    if((newkeys & KEY_NO) && !(oldkeys & KEY_NO))
		isStartingEngine[playerid] = true;

	if((isDoingDMV[playerid] && DMV_vehicleID[playerid] == vid))
	    return StartEngine(playerid);

	if(!strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
	    return StartEngine(playerid);

	if(!strcmp(vEnum[vid][v_SecOwner], ReturnName(playerid), false))
	    return StartEngine(playerid);

	if(GetVehicleFaction(vid) == 54 && pohrebnasluzba_isDoing[playerid] == true)
	    return StartEngine(playerid);

    if(GetPlayerFaction(playerid) == GetVehicleFaction(vid) && GetVehicleFaction(vid) != 0)
	    return StartEngine(playerid);

	SendError(playerid, "Od tohoto vozidla nemá k¾úèe!");

    return 1;

}

StartEngine(playerid)
{
    if(GetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_ENGINE) == 1)
    {
        isStartingEngine[playerid] = false;

        SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_ENGINE, 0);
        SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_LIGHTS, 0);

        new S_str[144];
		format(S_str, 144, "* %s otáèa klúèom v zapalovaní a vypína motor %s. *", GetPlayerNameEx(playerid, USE_MASK), GetVehicleName(GetPlayerVehicleID(playerid)));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);
    }
    else
    {
        new timex = 750, mileage = floatround(vEnum[GetPlayerVehicleID(playerid)][v_MileAge], floatround_round);
        
        switch(mileage)
        {
            case 0..3000: timex = 750;
            case 8001..21000: timex = 1000;
            case 21001..55000: timex = 1500;
            case 55001..75000: timex = 2000;
            case 75001..100000: timex = 2500;
            default: timex = 2500 + random(1500);
        }
        
        SetTimerEx("timer_StartEngine", timex, false, "ii", playerid, GetPlayerVehicleID(playerid));

        new S_str[144];
		format(S_str, 144, "* %s vkladá klúè do zapalovania a otáèa ním. *", GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

    }
    return 1;
}

key_CheckSpectate(playerid, newkeys,oldkeys)
{
    if(isSpectating[playerid] == false || watchCmds[playerid] > -1)
        return 0;

	if(newkeys & KEY_FIRE && !(oldkeys & KEY_FIRE) && spec_Player[playerid] >= 0)
	{

	    ShowPlayerInventory(spec_Player[playerid], playerid);
	    return 1;

	}

	else if(newkeys & KEY_HANDBRAKE && !(oldkeys & KEY_HANDBRAKE) && spec_Player[playerid] >= 0)
	{

	    ShowPlayerStats(spec_Player[playerid], playerid);
	    return 1;

	}
	/*else if(newkeys & KEY_SPRINT && !(oldkeys & KEY_SPRINT) && spec_Player[playerid] >= 0 && watchCmds[playerid] > -1)
	{

	    if(GetPlayerAdminLevel(playerid) < 3)
	        return SendError(playerid, "Na toto nemas prava!");

	    new
	 		finalString[1024*2],
			tString[128 + 20];

		format(finalString, 1024, "{e34f4f}Posledné príkazy hráèa %s(%d);\n\n{ffffff}", GetPlayerNameEx(spec_Player[playerid], NO_MASK), spec_Player[playerid]);
		for(new id = MAX_COMMAND_LOG - 1; id > -1; id --)
		{
		    if(id < 0) break;
			format(tString, 128+20, "%s\n", commandLog[spec_Player[playerid]][id]);
			strcat(finalString, tString);
		}

		watchCmds[playerid] = spec_Player[playerid];

		ShowPlayerDialog(playerid, did_posledneprikazy, DIALOG_STYLE_MSGBOX, "POSLEDNÉ PRÍKAZY", finalString, "OK", "");

		FormatWarnEx(playerid, 3, "AdmCmd:", COLOR_ADMINCMD, "%s si vylistoval posledné príkazy hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(spec_Player[playerid], USE_PUREIDNAME));
		return 1;
	}*/
	else if(newkeys & KEY_WALK && !(oldkeys & KEY_WALK))
	{
	    TogglePlayerSpectating(playerid, false);
	    return 1;
	}

	return 0;

}

key_CheckCCTV(playerid, newkeys)
{
    if(inCCTV[playerid] == 0)
        return 0;

	if(newkeys & KEY_WALK)
	{

	    TogglePlayerSpectating(playerid, false);

	    PlayerTextDrawHide(playerid, PTD_cameras[playerid][0]);
		PlayerTextDrawHide(playerid, PTD_cameras[playerid][1]);
		PlayerTextDrawHide(playerid, PTD_cameras[playerid][2]);
	    return 1;

	}

	if(newkeys & KEY_ANALOG_LEFT)
	{
	    new newid = Iter_Prev(CCTVIter, inCCTVid[playerid]);

	    while(CCTVInfo[newid][cctv_IsBroken] == 1)
	    {
	        newid = Iter_Prev(CCTVIter, inCCTVid[playerid]);
	    }

		PlayerViewCCTV(playerid, newid);
	}

	if(newkeys & KEY_ANALOG_RIGHT)
	{

	    new newid= Iter_Next(CCTVIter, inCCTVid[playerid]);

	    while(CCTVInfo[newid][cctv_IsBroken] == 1)
	    {
	        newid = Iter_Next(CCTVIter, inCCTVid[playerid]);
	    }

	    /*foreach( new i : CCTVIter)
	    {
	        if(i > inCCTVid[playerid])
			{
			    newid = i;
			    break;
			}
	    }

	    if(newid == -1)
	    {
	        foreach( new i : CCTVIter)
	        {
	            newid = i;
	            break;
	        }
		}*/

		PlayerViewCCTV(playerid, newid);
	}

	return 0;

}

key_CheckAnimationWound_spacesh(playerid, newkeys)
{

    if(B_isLegWounded[playerid] == true && newkeys & KEY_JUMP && !IsPlayerInAnyVehicle(playerid))
	{

	    new animlib[32];
        new animname[32];
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);

        if(strcmp(animname, "FALL_COLLAPSE",true))
        {

            new Float:V[3];
            GetPlayerVelocity(playerid, V[0], V[1], V[2]);
            ClearAnimations(playerid, 1);
            SetPlayerVelocity(playerid, V[0], V[1], V[2]);

            ApplyAnimation(playerid, "PED", "FALL_COLLAPSE", 4.1, false, 1, 1, false, 0, false);
        }

        return 1;

	} else if(B_isLegWounded[playerid] == true && newkeys & KEY_SPRINT && !IsPlayerInAnyVehicle(playerid))
	{

	    new animlib[32];
        new animname[32];
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);

        if(strcmp(animname, "FALL_COLLAPSE",true))
        {
            ApplyAnimation(playerid, "PED", "FALL_COLLAPSE", 4.1, false, 1, 1, false, 0, false);
        }

        return 1;

 	}

 	return 0;

}

key_CheckAnimationStop_enter(playerid, newkeys)
{

    if(newkeys & KEY_SECONDARY_ATTACK && canStopAnimation[playerid] == true)
	{

	    switch(g_I_playerCheckpoint[playerid])
		{
			case checkp_brigada_krabicePC_1, checkp_brigada_krabicePC_2,
				checkp_brigada_krabiceMG_1, checkp_brigada_krabiceMG_2:

			{
				return SendError(playerid, "Tento príkaz nemôe poui poèas brigády!");
			}
		}

	    StopPlayerAnimation(playerid);

	    return 1;
	}

	return 0;

}

key_CheckNOS_ctrl(playerid, newkeys, oldkeys)
{
    if(GetPlayerVehicleSeat(playerid) == 0 && vEnum[GetPlayerVehicleID(playerid)][v_Nitrous] > 0.0 && ((newkeys & KEY_ACTION) || (newkeys & KEY_FIRE)))
	{
		AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
		B_playerNos[playerid] = true;
	    SetTimerEx("timer_nosCheck", 333, 0, "i", playerid);

	    return 1;
	}

	if(GetPlayerVehicleSeat(playerid) == 0 && B_playerNos[playerid] == true && (RELEASED(KEY_ACTION) || RELEASED(KEY_FIRE)))
	{
		RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	    B_playerNos[playerid] = false;

	    return 1;
	}

	return 1;

}

key_CheckHideID_h(playerid, newkeys)
{

    if((!IsPlayerInAnyVehicle(playerid) && newkeys & KEY_CTRL_BACK) || (IsPlayerInAnyVehicle(playerid) && newkeys & KEY_CROUCH) && ID_Showed[playerid] == true)
	{
    	PlayerTextDrawHide(playerid, ID_Textdraw0[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw1[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw2[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw3[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw4[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw5[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw6[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw7[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw8[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw9[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw10[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw11[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw12[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw13[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw14[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw15[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw16[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw17[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw18[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw19[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw20[playerid]);
		PlayerTextDrawHide(playerid, ID_Textdraw21[playerid]);

	    ID_Showed[playerid] = false;

	    return 1;
	}

	return 0;
}

key_CheckEnterExit_y(playerid, newkeys)
{

    if(newkeys & KEY_YES) {
	    if(DoEnterCommandEntrance(playerid) == 1)
		{
	        if(DoExitCommandEntrance(playerid) == 1)
			{
			    if(DoEnterCommandBusiness(playerid) == 1)
			    {
			        if(DoExitCommandBusiness(playerid) == 1)
			        {
			            if(DoEnterCommandHouse(playerid) == 1)
			            {
			                if(DoExitCommandHouse(playerid) == 1)
			                {
			                    if(DoEnterCommandGarage(playerid) == 1)
			                    {
			                        if(DoEnterCommandArrow(playerid) == 1)
									{
	 									DoExitCommandGarage(playerid);
									}
								}
			                }
			            }
			        }
			    }
			}
		}
		return 1;
	}

	return 0;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    if(!success)
    {

        foreach( new i : Player )
        {
            new
                p_IP[16];

			GetPlayerIp(i, p_IP, 16);

			if(strcmp(p_IP, ip, false))
			    continue;

			FormatLog(log_type_other, "%s(%s) sa pokusil o RCON login s heslom: %s", ReturnName(i), ReturnIP(i), password);

			BanPlayer(i, "RCON Ochrana", "System", 2, -1, gettime()+(60*5));
        }

    }
    else
    {

        foreach( new i : Player )
        {
            new
                p_IP[16];

			GetPlayerIp(i, p_IP, 16);

			if(strcmp(p_IP, ip, false))
			    continue;

			FormatLog(log_type_other, "%s(%s - %s) sa prihlasil do RCONu.", ReturnName(i),ReturnMaster(i), ReturnIP(i));

        }

    }
	return 1;
}

public OnPlayerUpdate(playerid)
{

	func_OnPlayerUpdate(playerid);
	return 1;
}

public OnPlayerCrashVehicle(playerid, vehicleid, Float:damage)
{

    new Float:mult = 1.9, mileage = floatround(vEnum[vehicleid][v_MileAge], floatround_round);

    switch(mileage)
    {
        case 0..3000: mult = 1.9;
        case 3001..8000: mult = 2.0;
        case 8001..14000: mult = 2.2;
        case 14001..23000: mult = 2.5;
        case 23001..100000: mult = 2.8;
        default: mult = 3.1;
    }

	damage = damage * mult;

	new
	    Float:health;

	vhac_GetVehicleHealth(vehicleid, health);

	if(damage > 6.0)
	{
		foreach( new i : Player )
		{
		    if(!IsPlayerInAnyVehicle(i))
		        continue;

			if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(i))
			    continue;

			if(B_dmg_IsInDS[i] == true)
			    continue;

			new
			    Float:php,
				Float:dajdole = damage / 7.0;

			if(hasSeatbelt[i])
			    dajdole = damage / 11.0;

			ahac_GetPlayerHealth(i, php);

			if(php - dajdole < 12.5 || damage > 400.0)
			{
			    ahac_SetPlayerHealth(i, 30);

			    new
			        S_string[256];

			    format(S_string, sizeof(S_string), "{B33C3C}Táto osoba je zranená!\n(( /damages [id] ))");

			    B_dmg_IsInDS[i] = true;

			    if(IsValidDynamic3DTextLabel(T3D_dmg_Label[i]) && B_dmg_IsInDS[i] == true) {
					UpdateDynamic3DTextLabelText(T3D_dmg_Label[i], /*0xB33C3CFF*/0xD0D0D0FF, S_string);
				}
				else {
					if(IsValidDynamic3DTextLabel(T3D_dmg_Label[i]))
					{
					    DestroyDynamic3DTextLabel(T3D_dmg_Label[i]);
					}
					T3D_dmg_Label[i] = CreateDynamic3DTextLabel(S_string, /*0xB33C3CFF*/0xD0D0D0FF, 0.0, 0.0, -0.1, 15.0, i, INVALID_VEHICLE_ID, 1, -1, -1, -1, 15.0, -1, 1);
				}

				if(T_timer_deathTimer[i] != -1) KillTimer(T_timer_deathTimer[i]);
			    T_timer_deathTimer[i] = SetTimerEx("timer_DeathAllow", 60000, false, "i0", i);
	            B_allowDeath[i] = false;
	            B_informDeath[i] = false;
				SendClientMessage(i, /*0xB33C3CFF*/0xD0D0D0FF, "> Tvoj charakter je zranený po autohavárii!");
				SendClientMessage(i, /*0xB33C3CFF*/0xD0D0D0FF, "> O minútu bude môc poui príkaz /death alebo /accept death.");

			 	TogglePlayerControllable(i, 0);
			    ApplyAnimation(i, "PED", "CAR_DEAD_RHS", 4.1, true, false, false, false, 0, true);

			    FadeColorForPlayer(i,255,0,0,255,0,0,0,0,2,1);
			}
			else
			{
			    ahac_SetPlayerHealth(i, php - dajdole);

			    FadeColorForPlayer(i,255,0,0,255,0,0,0,0,2,1);
			}

		}
	}

	if(health-damage < 299)
	{
	    vhac_SetVehicleHealth(vehicleid, 299.0);

	    if(GetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_ENGINE) != 1)
	        return 1;

	    SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_ENGINE, 0);
	    SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_LIGHTS, 0);

	    new
			S_str[144];

		format(S_str, 144, "* Motor vozidla %s zachrèal a vypol sa. (( %s ))", GetVehicleName(GetPlayerVehicleID(playerid)), GetPlayerNameEx(playerid, USE_MASK));

		SendLocalMessage(playerid, ME_CHAT_RANGE,COLOR_VIOLET,S_str);
	}
	else
	{
		vhac_SetVehicleHealth(vehicleid, health-damage);

		if(GetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_ENGINE) != 1)
	        return 1;

		if((health - damage < 750) || damage > 200)
		{

			if(random(5) != 1)
			    return 0;

		    SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_ENGINE, 0);
		    SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_LIGHTS, 0);

			new
				S_str[144];

			format(S_str, 144, "* Motor vozidla %s zachrèal a vypol sa. (( %s ))", GetVehicleName(GetPlayerVehicleID(playerid)), GetPlayerNameEx(playerid, USE_MASK));

			SendLocalMessage(playerid, ME_CHAT_RANGE,COLOR_VIOLET,S_str);
		}
	}

	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{

    InteractiveNPC::ClickTextDraw(playerid, clickedid);
	func_OnPlayerClickTextDraw(playerid, clickedid);
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{

	Character::OnPlayerClickPTD(playerid, playertextid);
    InteractiveNPC::ClickPlayerText(playerid, playertextid);
	fun_OnPlayerClickPlayerTextDraw(playerid, playertextid);
	return 0;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	func_OnDialogResponse(playerid, dialogid, response, listitem, inputtext);
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{

	if(source == CLICK_SOURCE_SCOREBOARD)
	{
	    if(GetPlayerAdminLevel(playerid) < 2)
		    return 1;

		if(clickedplayerid == playerid)
		    return SendError(playerid, "Nemôe spectatova sám seba!");

		if(!IsPlayerLogged(clickedplayerid))
		    return SendClientPlayerOffline(playerid);

		new statexx = GetPlayerState(clickedplayerid);
		if(isSpectating[clickedplayerid] == true || statexx == 0 || statexx == 7 || statexx == 9)
		    return SendError(playerid, "Tento hráè spectatuje!");

		if(isSpectating[playerid] == false)
		{
		    GetPlayerPos(playerid, spec_Pos[playerid][0], spec_Pos[playerid][1], spec_Pos[playerid][2]);
			spec_World[playerid][0] = GetPlayerVirtualWorld(playerid);
			spec_World[playerid][1] = GetPlayerInterior(playerid);

        	if(IsPlayerInAnyVehicle(playerid))
			{
				spec_Vehicle[playerid][0] = GetPlayerVehicleID(playerid);
				spec_Vehicle[playerid][1] = GetPlayerVehicleSeat(playerid);
			}
			else
			    spec_Vehicle[playerid][0] = -1;

			ahac_GetPlayerHealth(playerid, spec_Vitals[playerid][0]);
			ex_GetPlayerHunger(playerid, spec_Vitals[playerid][1]);
			ahac_GetPlayerArmour(playerid, spec_Vitals[playerid][2]);

			for(new x; x < MAX_WEAPON_SLOTS; x++)
		    {

	            tg_datax[playerid][x][0] = playerWeapons[playerid][x][pweapons_WeaponId];
				tg_datax[playerid][x][2] = playerWeapons[playerid][x][pweapons_AmmoGiven];
				tg_datax[playerid][x][1] = playerWeapons[playerid][x][pweapons_Ammo];
				tg_datax[playerid][x][3] = playerWeapons[playerid][x][pweapons_SerialNumber];
				tg_datax[playerid][x][4] = playerWeapons[playerid][x][pweapons_IsWork];
				tg_datax[playerid][x][5] = playerWeapons[playerid][x][pweapons_IsPermit];
				format(tg_originx[playerid][x], 128, playerWeapons[playerid][x][pweapons_Origin]);

			}
		}

		isSpectating[playerid] = true;

		spec_Player[playerid] = clickedplayerid;
		
		PreventSpectate(playerid);
		TogglePlayerSpectating(playerid, true);

		for(new x; x < 17; x++) PlayerTextDrawShow(playerid, SpectateTD[playerid][x]);

		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(clickedplayerid));
		SetPlayerInterior(playerid, GetPlayerInterior(clickedplayerid));

		PlayerSpectatePlayer(playerid, clickedplayerid);
		updateppopis(playerid, "");

		FormatWarnEx(playerid, 2, "AdmCmd:", COLOR_ADMINCMD, "%s zaèal spectatova hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(clickedplayerid, USE_PUREIDNAME));

	}

	return 1;
}

public OnFadeComplete(playerid,beforehold)
{
	pFadePlace[playerid] = -1;
}

AddToTollLog(text[])
{
    for(new i = MAX_TOLL_LOG -1; i > 0; i --)
	{
	    if( i == 0 ) break;
	    format(tollLog[i], 128, tollLog[i - 1]);
	}

	new
		hour,
		minute;

	gettime(hour, minute);

	format(tollLog[0], 128, "\n%02d:%02d\t%s", hour, minute, text);

	return 1;
}

PreventSpectate(playerid)
{
    foreach( new i : Player )
	{
	    if(isSpectating[i]==false) continue;
	    if(spec_Player[i] != playerid) continue;
	    
        TogglePlayerSpectating(i, false);
	}
	return 1;
}

AddToCommandLog(playerid, text[])
{
	if(nologcmd[playerid] == true)
	    return 1;

	for(new i = MAX_COMMAND_LOG -1; i > 0; i --)
	{
	    if( i == 0 ) break;
	    format(commandLog[playerid][i], 128, commandLog[playerid][i - 1]);
	}

	new
		hour,
		minute,
		sec;

	gettime(hour, minute, sec);

	format(commandLog[playerid][0], 128, "[%02d:%02d:%02d] %s", hour, minute, sec, text);

	foreach( new i : Player )
	{
	    if(watchCmds[i] != playerid)
	        continue;
        new
		    finalString[1024*2],
			tString[128 + 20];

		format(finalString, 1024, "{e34f4f}Posledné príkazy hráèa %s(%d);\n\n{ffffff}", GetPlayerNameEx(playerid, NO_MASK), playerid);
		for(new id = MAX_COMMAND_LOG - 1; id > -1; id --)
		{
		    if(id < 0) break;
			format(tString, 128+20, "%s\n", commandLog[playerid][id]);
			strcat(finalString, tString);
		}
		watchCmds[i] = playerid;

		ShowPlayerDialog(i, did_posledneprikazy, DIALOG_STYLE_MSGBOX, "POSLEDNÉ PRÍKAZY", finalString, "OK", "");
	}

	return 1;

}

AddToLastDriver(playerid, vehicleid)
{

	for(new i = MAX_LAST_DRIVER -1; i > 0; i --)
	{
	    if( i == 0 ) break;
	    format(posvod[vehicleid][i], 26, posvod[vehicleid][i - 1]);
	}
	format(posvod[vehicleid][0], 26, "%s", ReturnName(playerid));
	return 1;

}

public e_COMMAND_ERRORS:OnPlayerCommandReceived(playerid, cmdtext[], e_COMMAND_ERRORS:success)
{

   	lastkeypressunix[playerid] = gettime();
    if(isuserafk[playerid] != 0)
	{
	    SCError(playerid, "Vrátil si sa do hry po %d minútach!", floatround((gettime()-isuserafk_start[playerid])/60,floatround_round));
	    isuserafk[playerid] = 0;
	    isuserafk_start[playerid] = 0;
	}

	if(!IsPlayerLogged(playerid))
	{

        SendClientMessage(playerid, COLOR_ADMINCMD, "> Nemôe písa do chatu, keï nie si prihlásený!");
	    return COMMAND_DISABLED;
	}

    switch (success) {
        case 0, 1, 3, 4, 6, 7:
        {
            if(nologcmd[playerid]==false)AddToCommandLog(playerid, cmdtext);
            if(nologcmd[playerid]==false)FormatLog(log_type_pcommands, "%s (%s - %s) pouzil prikaz: %s", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), cmdtext);
        }
        case COMMAND_UNDEFINED: SendClientMessage(playerid, COLOR_ADMINCMD, "> Tento príkaz nebol nájdený, ak si nevie rady, poui príkaz /help!");
    }
    return COMMAND_OK;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{

	Deer::CheckShooting(

    Weapons::decreaseAmmo(playerid, weaponid);
    
	if(weaponid == 23 && hasTaser[playerid] == true)
	{
	    ClearAnimations(playerid, 1);
	    ApplyAnimation(playerid, "COLT45", "COLT45_RELOAD", 4.1, false, true, true, false, 0, true);
	}
	else if(22 <= weaponid < 37)
	{

	    new ammo = GetPlayerAmmo(playerid);

	    switch(ammo)
	    {
	        case 1:
	        {
	            SendError(playerid, "Vystrielal si zbraò! Bude ju môc nabi príkazom /myguns!");
	            EmptyGuns::GiveGun(playerid, weaponid, false);
	            Weapons::removeWeapon(playerid, weaponid, false);
	        }
	    }
	}
	
	new skill = -1;
	
	switch(weaponid)
	{
	    case 22: skill = WEAPONSKILL_PISTOL;
	    case 23: skill = WEAPONSKILL_PISTOL_SILENCED;
		case 24: skill = WEAPONSKILL_DESERT_EAGLE;
		case 25: skill = WEAPONSKILL_SHOTGUN;
		case 26: skill = WEAPONSKILL_SAWNOFF_SHOTGUN;
		case 27: skill = WEAPONSKILL_SPAS12_SHOTGUN;
		case 28,32: skill = WEAPONSKILL_MICRO_UZI;
		case 29: skill = WEAPONSKILL_MP5;
		case 30: skill = WEAPONSKILL_AK47;
		case 31: skill = WEAPONSKILL_M4;
		case 34: skill = WEAPONSKILL_SNIPERRIFLE;
	}
	
	if(skill != -1 && random(3) == 1)
	{
	    switch(skill)
	    {
	        case WEAPONSKILL_PISTOL: weaponskill_pistol[playerid] += 5;
            case WEAPONSKILL_PISTOL_SILENCED: weaponskill_pistol_silenced[playerid] += 5;
            case WEAPONSKILL_DESERT_EAGLE: weaponskill_desert_eagle[playerid] += 5;
            case WEAPONSKILL_SHOTGUN: weaponskill_shotgun[playerid] += 5;
            case WEAPONSKILL_SAWNOFF_SHOTGUN: weaponskill_sawnoff_shotgun[playerid] += 5;
            case WEAPONSKILL_SPAS12_SHOTGUN: weaponskill_spas12_shotgun[playerid] += 5;
            case WEAPONSKILL_MICRO_UZI: weaponskill_micro_uzi[playerid] += 5;
            case WEAPONSKILL_MP5: weaponskill_mp5[playerid] += 5;
            case WEAPONSKILL_AK47: weaponskill_ak47[playerid] += 5;
            case WEAPONSKILL_M4: weaponskill_m4[playerid] += 5;
            case WEAPONSKILL_SNIPERRIFLE: weaponskill_sniperrifle[playerid] += 20;
	    }
	    
	    ValidateWeaponSkill(playerid);

	}

	if(GetPlayerCameraMode(playerid) == 55 && weaponid == 24)
	{
	    g_Weapon[playerid] = GetPlayerWeapon(playerid);
		g_Count[playerid] = REARMED_WEAPON_UPDATES;
		ApplyAnimation(playerid,"PED","facanger",4.1,0,1,1,1,1);
		SetPlayerArmedWeapon(playerid, 0);
	}

	/*foreach(new i : CCTVIter)
    {
        if(GetPlayerVirtualWorld(playerid) != CCTVInfo[i][cctv_VW])
            continue;

        if(GetPlayerInterior(playerid) != CCTVInfo[i][cctv_Interior])
            continue;

		if(CCTVInfo[i][cctv_IsBroken] == 1)
		    continue;

        if(CCTVInfo[i][cctv_Announce] == 1)
		    continue;

		new Float:X, Float:Y, Float:Z;

		X = CCTVInfo[i][cctv_X];
		Y = CCTVInfo[i][cctv_Y];
		Z = CCTVInfo[i][cctv_Z];

		X += 4.0 * floatsin(-CCTVInfo[i][cctv_rotZ], degrees);
		Y += 4.0 * floatcos(-CCTVInfo[i][cctv_rotZ], degrees);

		if(!IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z))
		    continue;

        CCTVInfo[i][cctv_Announce] = 1;
		SetTimerEx("cctvinform", 5000, false, "ii", i,weaponid);
		SetTimerEx("cctvann", 60000*3, false, "i", i);

		break;
	}*/

	return 1;
}

function cctvann(i)
{
    CCTVInfo[i][cctv_Announce] = 0;
    return 1;
}

function cctvinform(i,wepid)
{

	if(CCTVInfo[i][cctv_IsBroken] == 1)
	    return 1;

    if(CCTVInfo[i][cctv_Announce] != 1)
	    return 1;

    foreach( new ix : Player )
	{
  		if(GetPlayerFactionType(ix) != FACTION_TYPE_LAW)
			continue;

		if(!IsPlayerWorking(ix))
			continue;

		SCFM(ix, COLOR_RADIO, "[ Radio - 9112 MHz ] Dispeèer: Kamera %s práve zachytila stre¾bu zbraòou %s!", CCTVInfo[i][cctv_Name], GetCrateItemName(wepid));
	}

	return 1;

}

#define     DM_BODYPART_HEAD       	bodypart == 9
#define     DM_BODYPART_CHEST       bodypart == 3 || bodypart == 4
#define     DM_BODYPART_ARM       	bodypart == 5 || bodypart == 6
#define     DM_BODYPART_LEG       	bodypart == 7 || bodypart == 8

hook OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    if(issuerid == INVALID_PLAYER_ID)
	    return 1;

	if(weaponid > 1)
	    return 1;

    CallRemoteFunction("corpse_OnPlayerTakeDamage", "idfdd", playerid, issuerid, amount, weaponid, bodypart);

	new
	    Float:damage = 0.5;

	switch(GetPlayerFightStyle(issuerid))
	{
	    case 4:
	        damage = 2.45;

		case 5:
		    damage = 3.12;

		case 6:
		    damage = 4.86;

		case 7:
		    damage = 5.52;

		case 8:
		    damage = 5.21;

		default:
		    damage = 2.45;
	}

    PlayerDealDamage(playerid, damage, bodypart, 0, issuerid);

	return 1;

}

hook OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{

	if(!IsPlayerLogged(playerid)) return 1;
	if(isEntering[damagedid] == true) return 1;

    if(GetPVarInt(damagedid, "afk_secs") > 3 || GetPVarInt(damagedid, "afk_mins")>0)
	{
	    new
			Float:hp,
	  		Float:ar;

		GetPlayerHealth(damagedid, hp);
		GetPlayerArmour(damagedid, ar);
		SetPlayerHealth(damagedid, hp);
		SetPlayerArmour(damagedid, ar);
	}

    if(isInJail[damagedid] == true || GetPlayerControllable(playerid) == 0)
	{
	    new
			Float:hp,
	  		Float:ar;

		GetPlayerHealth(damagedid, hp);
		GetPlayerArmour(damagedid, ar);
		SetPlayerHealth(damagedid, hp);
		SetPlayerArmour(damagedid, ar);
	}

	//PlayerDealDamage(damagedid, -amount,-1,-1,-1);

    if(IsPlayerNearPlayer(playerid, damagedid, 1.0) && weaponid > 21)
    {
        return PlayerDealDamage(damagedid, 8.0, bodypart, 0, playerid);
    }

    if(weaponid == 23 && hasTaser[playerid])
    {
        if(!IsPlayerNearPlayer(playerid, damagedid, 8.0))
		{
		    return 0;
		}

		if(IsPlayerInAnyVehicle(damagedid))
		    RemovePlayerFromVehicle(damagedid);

        ClearAnimations(damagedid, 1);
    	ApplyAnimation(damagedid, "CRACK", "CRCKDETH2", 4.1, true, true, true, true, 0, true);
	    unStoppableAnim[damagedid] = true;

	    format(unStopLib[damagedid], 32, "CRACK");
	    format(unStopName[damagedid], 32, "CRCKDETH2");

		SetPlayerDrunkLevel(damagedid, 5000);

		SetTimerEx("timer_UnTaze", 30000+random(30000), false, "i", damagedid);

		new
		    str[128];

		format(str, 128, "* %s padá na zem po trafení taserom od %s.", GetPlayerNameEx(damagedid, USE_MASK), GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(damagedid,ME_CHAT_RANGE,COLOR_VIOLET,str);

		PlayLocalSound(playerid, 6003, 8.1, 0.0, 0.0, 0.0);

		return PlayerDealDamage(damagedid, 20.0 / GetDistanceBetweenPlayers(playerid, damagedid), bodypart, 102, playerid);
    }

    if(weaponid == 25 && hasBeanBag[playerid])
    {
        if(!IsPlayerNearPlayer(playerid, damagedid, 20.0))
		{
		    return 0;
		}

		if(IsPlayerInAnyVehicle(damagedid))
		    RemovePlayerFromVehicle(damagedid);

        ClearAnimations(damagedid, 1);
    	ApplyAnimation(damagedid, "SWEET", "SWEET_INJUREDLOOP", 4.1, true, false, false, false, 0, true);
	    unStoppableAnim[damagedid] = true;

	    format(unStopLib[damagedid], 32, "SWEET");
	    format(unStopName[damagedid], 32, "SWEET_INJUREDLOOP");

		SetTimerEx("timer_UnTaze", 40000+random(30000), false, "i", damagedid);

		new
		    str[128];

		format(str, 128, "* %s padá na zem po rane gumovou strelou od %s.", GetPlayerNameEx(damagedid, USE_MASK), GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(damagedid,ME_CHAT_RANGE,COLOR_VIOLET,str);

		PlayLocalSound(damagedid, 1163, 5.0, 0.0, 0.0, 0.0);

  		return PlayerDealDamage(damagedid, 20.0 / GetDistanceBetweenPlayers(playerid, damagedid), bodypart, 101, playerid);
    }

	switch(weaponid)
	{

	    case 0: {}
	    case WEAPON_BRASSKNUCKLE: return PlayerDealDamage(damagedid, 6.0, bodypart, weaponid, playerid);
	    case WEAPON_CANE: return PlayerDealDamage(damagedid, 11.0, bodypart, weaponid, playerid);
	    case WEAPON_POOLSTICK: return PlayerDealDamage(damagedid, 11.0, bodypart, weaponid, playerid);
	    case WEAPON_BAT: return PlayerDealDamage(damagedid, 11.0, bodypart, weaponid, playerid);
	    case WEAPON_NITESTICK: return PlayerDealDamage(damagedid, 11.0, bodypart, weaponid, playerid);
	    case WEAPON_GOLFCLUB: return PlayerDealDamage(damagedid, 11.0, bodypart, weaponid, playerid);
	    case WEAPON_SHOVEL: return PlayerDealDamage(damagedid, 11.0, bodypart, weaponid, playerid);
	    case WEAPON_KNIFE: return PlayerDealDamage(damagedid, 8.0, bodypart, weaponid, playerid);
	    case WEAPON_KATANA: return PlayerDealDamage(damagedid, 19.0, bodypart, weaponid, playerid);

	    case WEAPON_COLT45: {
	        if(DM_BODYPART_HEAD) return PlayerDealDamage(damagedid, 25.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_CHEST) return PlayerDealDamage(damagedid, 17.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_ARM) return PlayerDealDamage(damagedid, 15.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_LEG) return PlayerDealDamage(damagedid, 16.0, bodypart, weaponid, playerid);
		}

		case WEAPON_SILENCED: {
	        if(DM_BODYPART_HEAD) return PlayerDealDamage(damagedid, 35.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_CHEST) return PlayerDealDamage(damagedid, 17.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_ARM) return PlayerDealDamage(damagedid, 15.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_LEG) return PlayerDealDamage(damagedid, 16.0, bodypart, weaponid, playerid);
		}

		case WEAPON_DEAGLE: {
	        if(DM_BODYPART_HEAD) return PlayerDealDamage(damagedid, 50.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_CHEST) return PlayerDealDamage(damagedid, 40.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_ARM) return PlayerDealDamage(damagedid, 35.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_LEG) return PlayerDealDamage(damagedid, 37.0, bodypart, weaponid, playerid);
		}

		case WEAPON_SHOTGUN: {
	        if(DM_BODYPART_HEAD) return PlayerDealDamage(damagedid, 155.0 / (GetDistanceBetweenPlayers(playerid, damagedid) / 2.0), bodypart, weaponid, playerid);
	        else if(DM_BODYPART_CHEST) return PlayerDealDamage(damagedid, 122.0 / (GetDistanceBetweenPlayers(playerid, damagedid) / 2.0), bodypart, weaponid, playerid);
	        else if(DM_BODYPART_ARM) return PlayerDealDamage(damagedid, 87.0 / (GetDistanceBetweenPlayers(playerid, damagedid) / 2.0), bodypart, weaponid, playerid);
	        else if(DM_BODYPART_LEG) return PlayerDealDamage(damagedid, 84.0 / (GetDistanceBetweenPlayers(playerid, damagedid) / 2.0), bodypart, weaponid, playerid);
		}

		case WEAPON_SAWEDOFF: {
	        if(DM_BODYPART_HEAD) return PlayerDealDamage(damagedid, 125.0 / (GetDistanceBetweenPlayers(playerid, damagedid) / 2.0), bodypart, weaponid, playerid);
	        else if(DM_BODYPART_CHEST) return PlayerDealDamage(damagedid, 102.0 / (GetDistanceBetweenPlayers(playerid, damagedid) / 2.0), bodypart, weaponid, playerid);
	        else if(DM_BODYPART_ARM) return PlayerDealDamage(damagedid, 77.0 / (GetDistanceBetweenPlayers(playerid, damagedid) / 2.0), bodypart, weaponid, playerid);
	        else if(DM_BODYPART_LEG) return PlayerDealDamage(damagedid, 74.0 / (GetDistanceBetweenPlayers(playerid, damagedid) / 2.0), bodypart, weaponid, playerid);
		}

		case WEAPON_SHOTGSPA: {
	        if(DM_BODYPART_HEAD) return PlayerDealDamage(damagedid, 95.0 / (GetDistanceBetweenPlayers(playerid, damagedid) / 2.0), bodypart, weaponid, playerid);
	        else if(DM_BODYPART_CHEST) return PlayerDealDamage(damagedid, 82.0 / (GetDistanceBetweenPlayers(playerid, damagedid) / 2.0), bodypart, weaponid, playerid);
	        else if(DM_BODYPART_ARM) return PlayerDealDamage(damagedid, 77.0 / (GetDistanceBetweenPlayers(playerid, damagedid) / 2.0), bodypart, weaponid, playerid);
	        else if(DM_BODYPART_LEG) return PlayerDealDamage(damagedid, 74.0 / (GetDistanceBetweenPlayers(playerid, damagedid) / 2.0), bodypart, weaponid, playerid);
		}

		case WEAPON_TEC9: {
	        if(DM_BODYPART_HEAD) return PlayerDealDamage(damagedid, 24.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_CHEST) return PlayerDealDamage(damagedid, 17.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_ARM) return PlayerDealDamage(damagedid, 14.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_LEG) return PlayerDealDamage(damagedid, 18.0, bodypart, weaponid, playerid);
		}

		case WEAPON_UZI: {
	        if(DM_BODYPART_HEAD) return PlayerDealDamage(damagedid, 24.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_CHEST) return PlayerDealDamage(damagedid, 17.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_ARM) return PlayerDealDamage(damagedid, 14.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_LEG) return PlayerDealDamage(damagedid, 18.0, bodypart, weaponid, playerid);
		}

		case WEAPON_MP5: {
	        if(DM_BODYPART_HEAD) return PlayerDealDamage(damagedid, 28.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_CHEST) return PlayerDealDamage(damagedid, 20.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_ARM) return PlayerDealDamage(damagedid, 18.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_LEG) return PlayerDealDamage(damagedid, 20.0, bodypart, weaponid, playerid);
		}

		case WEAPON_AK47: {
	        if(DM_BODYPART_HEAD) return PlayerDealDamage(damagedid, 50.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_CHEST) return PlayerDealDamage(damagedid, 42.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_ARM) return PlayerDealDamage(damagedid, 37.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_LEG) return PlayerDealDamage(damagedid, 38.0, bodypart, weaponid, playerid);
		}

		case WEAPON_M4: {
	        if(DM_BODYPART_HEAD) return PlayerDealDamage(damagedid, 49.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_CHEST) return PlayerDealDamage(damagedid, 41.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_ARM) return PlayerDealDamage(damagedid, 35.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_LEG) return PlayerDealDamage(damagedid, 36.0, bodypart, weaponid, playerid);
		}

		case WEAPON_RIFLE: {
	        if(DM_BODYPART_HEAD) return PlayerDealDamage(damagedid, 80.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_CHEST) return PlayerDealDamage(damagedid, 59.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_ARM) return PlayerDealDamage(damagedid, 47.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_LEG) return PlayerDealDamage(damagedid, 53.0, bodypart, weaponid, playerid);
		}

		case WEAPON_SNIPER: {
	        if(DM_BODYPART_HEAD) return PlayerDealDamage(damagedid, 250.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_CHEST) return PlayerDealDamage(damagedid, 74.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_ARM) return PlayerDealDamage(damagedid, 58.0, bodypart, weaponid, playerid);
	        else if(DM_BODYPART_LEG) return PlayerDealDamage(damagedid, 67.0, bodypart, weaponid, playerid);
		}
	}

	return 1;
}

//===========================PLAYER COMMANDS====================================

/*

	/low COMMAND

	< ENGLISH >
	    Low range local IC chat.


	< SLOVAK >
	    Lokálny IC chat - krátka vzdialenos.

*/

YCMD:low(playerid, params[], help)
{

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
		return SendClientSyntax(playerid, "/low (/l) [správa]");

    if(B_dmg_IsInDS[playerid] == true)
	{
	    new
		    damage,
		    bool:head = false;

	    for(new i; i < 80; i++)
		{
			if(I_dmg_Damages[playerid][i][0] < 1) continue;
			if(I_dmg_Damages[playerid][i][0] == 9)
			    head = true;

			damage += I_dmg_Damages[playerid][i][2];
		}

		if((damage > 160 || head == true))
		{
		    SendError(playerid, "Nemôe chatova keï si màtvy!");
		    return 1;
		}
	}

	new
		S_finalString[128 + 25 + 32 + 15];

	if(strlen(prizvuk[playerid]) > 0)
	    format(S_finalString, sizeof(S_finalString), "%s potichu: (%s prízvuk) %s", GetPlayerNameEx(playerid, USE_MASK), prizvuk[playerid], S_var);
	else
	    format(S_finalString, sizeof(S_finalString), "%s potichu: %s", GetPlayerNameEx(playerid, USE_MASK), S_var);

    printf("[CHAT] %s potichu: %s", ReturnName(playerid), S_var);
	ProxDetector(playerid, LOW_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, S_finalString);

	MessagesSent[playerid]++;
	return 1;
}

YCMD:whisper(playerid, params[], help) {
    new
		var,
		var1[246];
	if(sscanf(params, "ds[246]", var,var1))
		return SendClientSyntax(playerid, "/whisper (/w) [id] [správa ...]");
	else {

	    if(B_dmg_IsInDS[playerid] == true)
		{
		    new
			    damage,
			    bool:head = false;

		    for(new i; i < 80; i++)
			{
				if(I_dmg_Damages[playerid][i][0] < 1) continue;
				if(I_dmg_Damages[playerid][i][0] == 9)
				    head = true;

				damage += I_dmg_Damages[playerid][i][2];
			}

			if((damage > 160 || head == true))
			{
			    SendError(playerid, "Nemôe chatova keï si màtvy!");
			    return 1;
			}
		}

	    MaskToId(var);

 		if(!IsPlayerLogged(var))
		 	return SendClientPlayerOffline(playerid);

		if(IsPlayerNearPlayer(playerid, var, 2.0)) {
		    new
			 	msg[128];

	 		format(msg, 128, "* %s nieèo mrmle osobe ved¾a seba.", GetPlayerNameEx(playerid, USE_MASK));

			BubbleChat(playerid, COLOR_VIOLET, msg);

			if(strlen(prizvuk[playerid]) > 0)
			    format(msg, sizeof(msg), "%s epká: (%s prízvuk) %s", GetPlayerNameEx(playerid, USE_MASK), prizvuk[playerid], var1);
			else
			    format(msg, sizeof(msg), "%s epká: %s", GetPlayerNameEx(playerid, USE_MASK), var1);

            printf("[CHAT] %s sepka %s: %s", ReturnName(playerid), ReturnName(var), var1);
	    	SendClientMessage(var, 0x2de0f1ff, msg);
	    	SendClientMessage(playerid, 0x2de0f1ff, msg);
		} else SendError(playerid, "Tento hráè je moc ïaleko!");
	}

	MessagesSent[playerid]++;
	return 1;
}

YCMD:attempt(playerid, params[], help) {
	new
		var[128];

	if(sscanf(params,"s[128]",var))
		return SendClientSyntax(playerid, "/attempt (/att) [text ...]");

	new finalstring[128 + 25 + 50];

	new r = random(2);

	switch(r) {
	    case 0: {
	        if(GetPlayerGender(playerid) == 1)
            	format(finalstring, sizeof(finalstring), "** %s sa pokúsil %s a podarilo sa mu to!", GetPlayerNameEx(playerid, USE_MASK), var);
			else
			    format(finalstring, sizeof(finalstring), "** %s sa pokúsila %s a podarilo sa jej to!", GetPlayerNameEx(playerid, USE_MASK), var);
    	}
	    case 1: {
	        if(GetPlayerGender(playerid) == 1)
	        	format(finalstring, sizeof(finalstring), "** %s sa pokúsil %s, ale nepodarilo sa mu to!", GetPlayerNameEx(playerid, USE_MASK), var);
			else
			    format(finalstring, sizeof(finalstring), "** %s sa pokúsila %s, ale nepodarilo sa jej to!", GetPlayerNameEx(playerid, USE_MASK), var);
	    }
	}

    printf("[CHAT] %s", finalstring);
	SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, finalstring);
	return 1;
}

YCMD:minca(playerid, params[], help) {

	new finalstring[128 + 25 + 50];

	new r = random(2);

	switch(r) {
	    case 0: {
	        if(GetPlayerGender(playerid) == 1)
            	format(finalstring, sizeof(finalstring), "** %s hodil mincou a padol mu orol!", GetPlayerNameEx(playerid, USE_MASK));
			else
			    format(finalstring, sizeof(finalstring), "** %s hodila mincou a padol jej orol!", GetPlayerNameEx(playerid, USE_MASK));
    	}
	    case 1: {
	        if(GetPlayerGender(playerid) == 1)
	        	format(finalstring, sizeof(finalstring), "** %s hodil mincou a padla mu panna!", GetPlayerNameEx(playerid, USE_MASK));
			else
			    format(finalstring, sizeof(finalstring), "** %s hodila mincou a padla jej panna!", GetPlayerNameEx(playerid, USE_MASK));
	    }
	}

    printf("[CHAT] %s", finalstring);
	SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, finalstring);
	return 1;
}

YCMD:kocka(playerid, params[], help) {

	if(GetPlayerInventoryItem(playerid, inv_kocka) < 1)
	    return SendError(playerid, "Nemá kocku!");

	new
	    var;

	if(sscanf(params, "d", var))
	    return SendError(playerid, "/kocka [poèet strán (def. 6)]");

	new finalstring[128 + 25 + 50];

	new r = random(var) + 1;

	if(GetPlayerGender(playerid) == 1)
		format(finalstring, sizeof(finalstring), "** %s hodil kockou s %d stranami a padlo mu èíslo %d!", GetPlayerNameEx(playerid, USE_MASK), var, r);
	else
 		format(finalstring, sizeof(finalstring), "** %s hodila kockou s %d stranami a padlo jej èíslo %d!", GetPlayerNameEx(playerid, USE_MASK), var, r);

    printf("[CHAT] %s", finalstring);
	SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, finalstring);
	return 1;
}

/*

	/shout COMMAND

	< ENGLISH >
	    High range local IC chat.


	< SLOVAK >
	    Lokálny IC chat - vysoká vzdialenos.

*/

YCMD:shout(playerid, params[], help)
{

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
		return SendClientSyntax(playerid, "/shout (/s) [správa]");

    if(B_dmg_IsInDS[playerid] == true)
	{
	    new
		    damage,
		    bool:head = false;

	    for(new i; i < 80; i++)
		{
			if(I_dmg_Damages[playerid][i][0] < 1) continue;
			if(I_dmg_Damages[playerid][i][0] == 9)
			    head = true;

			damage += I_dmg_Damages[playerid][i][2];
		}

		if((damage > 160 || head == true))
		{
		    SendError(playerid, "Nemôe chatova keï si màtvy!");
		    return 1;
		}
	}

    printf("[CHAT] %s krici: %s", ReturnName(playerid), S_var);
    SendShoutMsg(playerid, S_var);

    MessagesSent[playerid]++;
	return 1;
}

SendShoutMsg(playerid, text[])
{

	new
		S_finalString[128 + 25 + 5],
		bool:beenSent = false;

    foreach( new i : Entrances ) {
	    if(entranceEnum[i][e_posX] == 0 && entranceEnum[i][e_posY] == 0) continue;

		if(GetPlayerVirtualWorld(playerid) == i + 10000)
		{

		    beenSent = true;

		    if(strlen(prizvuk[playerid]) > 0)
      			format(S_finalString, sizeof(S_finalString), "%s krièí zvnútra: (%s prízvuk) %s", GetPlayerNameEx(playerid, USE_MASK), prizvuk[playerid], text);
			else
   				format(S_finalString, sizeof(S_finalString), "%s krièí zvnútra: %s", GetPlayerNameEx(playerid, USE_MASK), text);

		    foreach( new x : Player )
			{
			    if(IsPlayerInRangeOfPoint(x, 15.0, entranceEnum[i][e_posX], entranceEnum[i][e_posY], entranceEnum[i][e_posZ]))
			    {
			        SendClientMessage(x, COLOR_SHOUT_CHAT_TEXT, S_finalString);
			    }
			}

			break;
		}
		else if(entranceEnum[i][e_posVW] == GetPlayerVirtualWorld(playerid) && entranceEnum[i][e_posINT] == GetPlayerInterior(playerid) && IsPlayerInRangeOfPoint(playerid, 3.0, entranceEnum[i][e_posX], entranceEnum[i][e_posY], entranceEnum[i][e_posZ]))
		{

		    beenSent = true;

		    if(strlen(prizvuk[playerid]) > 0)
				format(S_finalString, sizeof(S_finalString), "%s krièí zvonka: (%s prízvuk) %s", GetPlayerNameEx(playerid, USE_MASK), prizvuk[playerid], text);
			else
   				format(S_finalString, sizeof(S_finalString), "%s krièí zvonka: %s", GetPlayerNameEx(playerid, USE_MASK), text);

		    foreach( new x : Player )
			{
			    if(GetPlayerVirtualWorld(x) == i + 10000 && GetPlayerInterior(x) == floatround(intList[entranceEnum[i][e_InteriorID]][5], floatround_round))
			    {
			        SendClientMessage(x, COLOR_SHOUT_CHAT_TEXT, S_finalString);
			    }
			}

			break;
		}
	}

	if(beenSent == false)
	{
		foreach( new i : Businesses ) {
		    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;

			if(GetPlayerVirtualWorld(playerid) == businessEnum[i][bz_Address])
			{
			    beenSent = true;

			    if(strlen(prizvuk[playerid]) > 0)
			        format(S_finalString, sizeof(S_finalString), "%s krièí z %s: (%s prízvuk) %s", GetPlayerNameEx(playerid, USE_MASK), businessEnum[i][bz_Name], prizvuk[playerid], text);
				else
				    format(S_finalString, sizeof(S_finalString), "%s krièí z %s: %s", GetPlayerNameEx(playerid, USE_MASK), businessEnum[i][bz_Name], text);

				foreach( new x : Player )
				{
				    if(IsPlayerInRangeOfPoint(playerid, 20.0, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ]))
				    {
				        SendClientMessage(x, COLOR_SHOUT_CHAT_TEXT, S_finalString);
				    }
				}

				break;
			}
			else if(businessEnum[i][bz_PosVirtualWorld] == GetPlayerVirtualWorld(playerid) && businessEnum[i][bz_PosInterior] == GetPlayerInterior(playerid) && IsPlayerInRangeOfPoint(playerid, 20.0, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ]))
			{
			    beenSent = true;

			    if(strlen(prizvuk[playerid]) > 0)
			        format(S_finalString, sizeof(S_finalString), "%s krièí zvonka: (%s prízvuk) %s", GetPlayerNameEx(playerid, USE_MASK), prizvuk[playerid], text);
				else
				    format(S_finalString, sizeof(S_finalString), "%s krièí zvonka: %s", GetPlayerNameEx(playerid, USE_MASK), text);

			    foreach( new x : Player )
				{
				    if(GetPlayerVirtualWorld(x) == businessEnum[i][bz_Address])
				    {
				        SendClientMessage(x, COLOR_SHOUT_CHAT_TEXT, S_finalString);
				    }
				}
			}
		}
	}

	if(beenSent == false || beenSent == true)
	{
		foreach( new i : Houses ) {
		    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;

			if(GetPlayerVirtualWorld(playerid) == houseEnum[i][ho_PSC])
			{
			    beenSent = true;

			    if(strlen(prizvuk[playerid]) > 0)
			        format(S_finalString, sizeof(S_finalString), "%s krièí z %d%s %s: (%s prízvuk) %s", GetPlayerNameEx(playerid, USE_MASK), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], prizvuk[playerid], text);
				else
				    format(S_finalString, sizeof(S_finalString), "%s krièí %d%s %s: %s", GetPlayerNameEx(playerid, USE_MASK), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], text);

				foreach( new x : Player )
				{
				    if(IsPlayerInRangeOfPoint(x, 20.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ]))
				    {
				        SendClientMessage(x, COLOR_SHOUT_CHAT_TEXT, S_finalString);
				    }
				}

				break;
			}
			else if(houseEnum[i][ho_PosVirtualWorld] == GetPlayerVirtualWorld(playerid) && houseEnum[i][ho_PosInterior] == GetPlayerInterior(playerid) && IsPlayerInRangeOfPoint(playerid, 20.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ]))
			{
			    beenSent = true;

			    if(strlen(prizvuk[playerid]) > 0)
			        format(S_finalString, sizeof(S_finalString), "%s krièí zvonka: (%s prízvuk) %s", GetPlayerNameEx(playerid, USE_MASK), prizvuk[playerid], text);
				else
				    format(S_finalString, sizeof(S_finalString), "%s krièí zvonka: %s", GetPlayerNameEx(playerid, USE_MASK), text);

				foreach( new x : Player )
				{
				    if(GetPlayerVirtualWorld(x) == houseEnum[i][ho_PSC])
				    {
				        SendClientMessage(x, COLOR_SHOUT_CHAT_TEXT, S_finalString);
				    }
				}
			}
		}

		foreach( new i : Garages ) {
		    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;

			if(GetPlayerVirtualWorld(playerid) == garageEnum[i][ga_PSC])
			{
			    beenSent = true;

			    if(strlen(prizvuk[playerid]) > 0)
			        format(S_finalString, sizeof(S_finalString), "%s krièí z %d%s %s: (%s prízvuk) %s", GetPlayerNameEx(playerid, USE_MASK), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], prizvuk[playerid], text);
				else
				    format(S_finalString, sizeof(S_finalString), "%s krièí %d%s %s: %s", GetPlayerNameEx(playerid, USE_MASK), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], text);

				foreach( new x : Player )
				{
				    if(IsPlayerInRangeOfPoint(x, 20.0, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ]))
				    {
				        SendClientMessage(x, COLOR_SHOUT_CHAT_TEXT, S_finalString);
				    }
				}

				break;
			}
			else if(garageEnum[i][ga_PosVirtualWorld] == GetPlayerVirtualWorld(playerid) && garageEnum[i][ga_PosInterior] == GetPlayerInterior(playerid) && IsPlayerInRangeOfPoint(playerid, 20.0, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ]))
			{
			    beenSent = true;

			    if(strlen(prizvuk[playerid]) > 0)
			        format(S_finalString, sizeof(S_finalString), "%s krièí zvonka: (%s prízvuk) %s", GetPlayerNameEx(playerid, USE_MASK), prizvuk[playerid], text);
				else
				    format(S_finalString, sizeof(S_finalString), "%s krièí zvonka: %s", GetPlayerNameEx(playerid, USE_MASK), text);

				foreach( new x : Player )
				{
				    if(GetPlayerVirtualWorld(x) == garageEnum[i][ga_PSC])
				    {
				        SendClientMessage(x, COLOR_SHOUT_CHAT_TEXT, S_finalString);
				    }
				}
			}
		}
	}

	if(strlen(prizvuk[playerid]) > 0)
        format(S_finalString, sizeof(S_finalString), "%s krièí: (%s prízvuk) %s", GetPlayerNameEx(playerid, USE_MASK), prizvuk[playerid], text);
	else
	    format(S_finalString, sizeof(S_finalString), "%s krièí: %s", GetPlayerNameEx(playerid, USE_MASK), text);

   	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_SHOUT_CHAT_TEXT, S_finalString);

	return 1;
}

/*

	/ooc COMMAND

	< ENGLISH >
	    OOC chat.


	< SLOVAK >
	    OOC chat.

*/

YCMD:ooc(playerid, params[], help)
{

	if(GetPlayerStaffLevel(playerid) < 1 && I_gm_localOOC == 0 && B_playerAllowLocal[playerid] == false)
	    return SendError(playerid, "Lokálny OOC chat je vypnutý administrátorom!");

	if(B_playerBlockLocal[playerid] == true)
	    return SendError(playerid, "Administrátor ti zakázal pouívanie OOC chatu!");

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/o(oc) [správa]");

	new
		S_finalString[128 + 24 + 12];

    MessagesSent[playerid]++;

	format(S_finalString, sizeof(S_finalString), "(( %s: %s ))", GetPlayerNameEx(playerid, USE_PLAYERID), S_var);

    printf("[CHAT] ((%s: %s))", ReturnName(playerid),S_var);
	ProxDetector(playerid, LOCAL_CHAT_RANGE, COLOR_LOCAL_OOC_CHAT_TEXT, S_finalString, .isOOC = true);
	return 1;
}

YCMD:hooc(playerid, params[], help)
{

	if(GetPlayerStaffLevel(playerid) < 1)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/hooc [správa]");

	new
		S_finalString[128 + 24 + 12];

    MessagesSent[playerid]++;

	format(S_finalString, sizeof(S_finalString), "(( %s: %s ))", GetPlayerNameEx(playerid, USE_PLAYERID), S_var);

    printf("[CHAT] ((%s: %s))", ReturnName(playerid),S_var);
	ProxDetector(playerid, LOCAL_CHAT_RANGE, 0x66CC99ff, S_finalString);
	return 1;
}

YCMD:mooc(playerid, params[], help)
{

	if(GetPlayerStaffLevel(playerid) < 2)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/mooc [správa]");

	new
		S_finalString[128 + 24 + 12];

    MessagesSent[playerid]++;

	format(S_finalString, sizeof(S_finalString), "(( %s: %s ))", GetPlayerNameEx(playerid, USE_PLAYERID), S_var);

    printf("[CHAT] ((%s: %s))", ReturnName(playerid),S_var);
	ProxDetector(playerid, LOCAL_CHAT_RANGE, 0x8040FFff, S_finalString);
	return 1;
}

YCMD:aooc(playerid, params[], help)
{

	if(GetPlayerStaffLevel(playerid) < 3)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/aooc [správa]");

	new
		S_finalString[128 + 24 + 12];

    MessagesSent[playerid]++;

	format(S_finalString, sizeof(S_finalString), "(( %s: %s ))", GetPlayerNameEx(playerid, USE_PLAYERID), S_var);

    printf("[CHAT] ((%s: %s))", ReturnName(playerid),S_var);
	ProxDetector(playerid, LOCAL_CHAT_RANGE, 0x60080FFff, S_finalString);
	return 1;
}

/*

	/global COMMAND

	< ENGLISH >
	    Global OOC chat.


	< SLOVAK >
	    Global OOC chat.

*/

YCMD:global(playerid, params[], help)
{

	if(GetPlayerStaffLevel(playerid) < 2 && I_gm_globalOOC == 1 && B_playerAllowGlobal[playerid] == false)
	    return SendError(playerid, "Globálny OOC chat je vypnutý administrátorom!");

 	if(B_playerBlockGlobal[playerid] == true)
	    return SendError(playerid, "Administrátor ti zakázal pouívanie Global OOC chatu!");

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/g(lobal) [správa]");

	new
		S_finalString[128 + 24 + 12];

	format(S_finalString, sizeof(S_finalString), "(( GLOBAL %s: %s ))", GetPlayerNameEx(playerid, USE_PLAYERID), S_var);
    printf("[CHAT] ((GLOBAL %s: %s))", ReturnName(playerid),S_var);
	SendClientMessageToAll(COLOR_GLOBAL_OOC_CHAT_TEXT, S_finalString);

	MessagesSent[playerid]++;
	return 1;
}

YCMD:say(playerid, params[], help)
{

	if(GetPlayerStaffLevel(playerid) < 4)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/say [správa]");

	new
		S_finalString[128 + 24 + 12],
		titul[32] = "Hrac";



	switch(GetPlayerAdminLevel(playerid))
	{
	    case 1: format(titul, 32, "Helper");
	    case 2: format(titul, 32, "Moderator");
	    default: format(titul, 32, "Administrator");
	}

	format(S_finalString, sizeof(S_finalString), "(( %s %s: %s ))", titul, GetPlayerNameEx(playerid, USE_PLAYERID), S_var);
	SendClientMessageToAll(COLOR_ADMINCMD, S_finalString);

    MessagesSent[playerid]++;
	return 1;
}

YCMD:togdonchat(playerid, params[], help)
{

	if(GetPlayerDonatorLevel(playerid) < 2 && GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

 	if(B_playerBlockGlobal[playerid] == true)
	    return SendError(playerid, "Administrátor ti zakázal pouívanie Global OOC chatu!");

	if(B_playerTogDonChat[playerid] == false)
	{

	    B_playerTogDonChat[playerid] = true;
	    SendSuccess(playerid, "Zapol si donator chat! Môe doò písa príkazom /dc.");

	}
	else
	{

	    B_playerTogDonChat[playerid] = false;
	    SendSuccess(playerid, "Vypol si donator chat!");

	}
	return 1;
}

YCMD:dc(playerid, params[], help)
{

	if(!B_playerTogDonChat[playerid])
	    return SendError(playerid, "Má vypnutý donator chat!");

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/dc [správa]");

	new
		S_finalString[128 + 24 + 12];

	format(S_finalString, sizeof(S_finalString), "(( Donator Chat %s: %s ))", GetPlayerNameEx(playerid, USE_PLAYERID), S_var);

	foreach ( new i : Player )
	{
	    if(!B_playerTogDonChat[i])
	        continue;

        SendClientMessage(i, 0xf0e366ff, S_finalString);
	}

	MessagesSent[playerid]++;
	return 1;
}

YCMD:ame(playerid, params[], help)
{

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
		return SendClientSyntax(playerid, "/ame [akcia charakteru nad hlavou]");

	new
		S_finalString[128 + 25 + 5];

	new S_first[25];
	if(B_playerHasMask[playerid] == false) {
	    strcat(S_first, ReturnName(playerid));
	    strdel(S_first,strfind(S_first,"_",true),25);
	} else {
	    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
	}

    format(S_finalString, sizeof(S_finalString), "AME: * %s %s", S_first, S_var);
    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

	format(S_finalString, sizeof(S_finalString), "* %s %s", S_first, S_var);
 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

	return 1;
}

YCMD:ado(playerid, params[], help)
{

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
		return SendClientSyntax(playerid, "/ado [popis situácie nad hlavou]");

	new
		S_finalString[128 + 25 + 5];

    new S_first[25];
	if(B_playerHasMask[playerid] == false) {
	    strcat(S_first, ReturnName(playerid));
	    strdel(S_first,strfind(S_first,"_",true),25);
	} else {
	    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
	}

    format(S_finalString, sizeof(S_finalString), "ADO: * %s (( %s ))", S_var, S_first);
    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

	format(S_finalString, sizeof(S_finalString), "* %s (( %s ))", S_var, S_first);
 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

	return 1;
}

/*

	/me COMMAND

	< ENGLISH >
	    Character action.


	< SLOVAK >
	    Akcia charakteru.

*/

YCMD:me(playerid, params[], help)
{

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
		return SendClientSyntax(playerid, "/me [akcia charakteru]");

	//SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, S_finalString);

 	new str[256];
	format(str,256,"* %s %s",GetPlayerNameEx(playerid, USE_MASK), S_var);
	
	printf("[CHAT] * %s %s", ReturnName(playerid), S_var);
   	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,str);

	return 1;
}

/*

	/do COMMAND

	< ENGLISH >
	    Situation describe command.


	< SLOVAK >
	    Popis situácie.

*/

YCMD:do(playerid, params[], help)
{

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
		return SendClientSyntax(playerid, "/do [popis situácie ...]");

    new
		S_finalString[128 + 25 + 5];

    format(S_finalString, sizeof(S_finalString), "* %s (( %s ))", S_var, GetPlayerNameEx(playerid, USE_MASK));
    printf("[CHAT] * %s ((%s))", S_var, ReturnName(playerid));
   	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET, S_finalString);
	return 1;
}

YCMD:doordo(playerid, params[], help)
{

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
		return SendClientSyntax(playerid, "/doordo (/ddo) [popis situácie ...]");

    SendDoorDoMsg(playerid, S_var);
	return 1;
}

SendDoorDoMsg(playerid, text[])
{

	new
		S_finalString[128 + 25 + 5],
		bool:beenSent = false;

    foreach( new i : Entrances ) {
	    if(entranceEnum[i][e_posX] == 0 && entranceEnum[i][e_posY] == 0) continue;

		if(GetPlayerVirtualWorld(playerid) == i + 10000)
		{

		    beenSent = true;

		    format(S_finalString, sizeof(S_finalString), "* %s (( %s - zvnútra ))", text, GetPlayerNameEx(playerid, USE_MASK));

		    foreach( new x : Player )
			{
			    if(IsPlayerInRangeOfPoint(x, 15.0, entranceEnum[i][e_posX], entranceEnum[i][e_posY], entranceEnum[i][e_posZ]))
			    {
			        SendClientMessage(x, COLOR_VIOLET, S_finalString);
			    }
			}

			break;
		}
		else if(entranceEnum[i][e_posINT] == GetPlayerInterior(playerid) && entranceEnum[i][e_posVW] == GetPlayerVirtualWorld(playerid) && IsPlayerInRangeOfPoint(playerid, 3.0, entranceEnum[i][e_posX], entranceEnum[i][e_posY], entranceEnum[i][e_posZ]))
		{

		    beenSent = true;

		    format(S_finalString, sizeof(S_finalString), "* %s (( %s - zvonka ))", text, GetPlayerNameEx(playerid, USE_MASK));

		    foreach( new x : Player )
			{
			    if(GetPlayerVirtualWorld(x) == i + 10000 && GetPlayerInterior(x) == floatround(intList[entranceEnum[i][e_InteriorID]][5], floatround_round))
			    {
			        SendClientMessage(x, COLOR_VIOLET, S_finalString);
			    }
			}

			break;
		}
	}

	if(beenSent == false)
	{
		foreach( new i : Businesses ) {
		    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;

			if(GetPlayerVirtualWorld(playerid) == businessEnum[i][bz_Address])
			{
			    beenSent = true;

			    format(S_finalString, sizeof(S_finalString), "* %s (( %s - zvnútra %s ))", text, GetPlayerNameEx(playerid, USE_MASK), businessEnum[i][bz_Name]);

			    foreach( new x : Player )
				{
				    if(IsPlayerInRangeOfPoint(playerid, 15.0, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ]))
				    {
				        SendClientMessage(x, COLOR_VIOLET, S_finalString);
				    }
				}

				break;
			}
			else if(businessEnum[i][bz_PosInterior] == GetPlayerInterior(playerid) && businessEnum[i][bz_PosVirtualWorld] == GetPlayerVirtualWorld(playerid) && IsPlayerInRangeOfPoint(playerid, 3.0, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ]))
			{
			    beenSent = true;

			    format(S_finalString, sizeof(S_finalString), "* %s (( %s - zvonka ))", text, GetPlayerNameEx(playerid, USE_MASK));

			    foreach( new x : Player )
				{
				    if(GetPlayerVirtualWorld(x) == businessEnum[i][bz_Address])
				    {
				        SendClientMessage(x, COLOR_VIOLET, S_finalString);
				    }
				}

				break;
			}
		}
	}

	if(beenSent == false)
	{
		foreach( new i : Houses ) {
		    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;

			if(GetPlayerVirtualWorld(playerid) == houseEnum[i][ho_PSC])
			{
			    beenSent = true;

			    format(S_finalString, sizeof(S_finalString), "* %s (( %s - zvnútra %d%s %s ))", text, GetPlayerNameEx(playerid, USE_MASK), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street]);

				foreach( new x : Player )
				{
				    if(IsPlayerInRangeOfPoint(x, 15.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ]))
				    {
				        SendClientMessage(x, COLOR_VIOLET, S_finalString);
				    }
				}

				break;
			}
			else if(houseEnum[i][ho_PosInterior] == GetPlayerInterior(playerid) && houseEnum[i][ho_PosVirtualWorld] == GetPlayerVirtualWorld(playerid) && IsPlayerInRangeOfPoint(playerid, 3.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ]))
			{
			    beenSent = true;

			    format(S_finalString, sizeof(S_finalString), "* %s (( %s - zvonka ))", text, GetPlayerNameEx(playerid, USE_MASK));

				foreach( new x : Player )
				{
				    if(GetPlayerVirtualWorld(x) == houseEnum[i][ho_PSC])
				    {
				        SendClientMessage(x, COLOR_VIOLET, S_finalString);
				    }
				}

				break;
			}
		}
	}

	if(!beenSent)
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");

	format(S_finalString, sizeof(S_finalString), "* %s (( %s ))", text, GetPlayerNameEx(playerid, USE_MASK));
   	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET, S_finalString);

	return 1;
}

YCMD:zaklopat(playerid, params[], help)
{
    SendKnockMsg(playerid);
	return 1;
}

SendKnockMsg(playerid)
{

	new
		S_finalString[128 + 25 + 5],
		bool:beenSent = false;

	foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;

		if(!IsPlayerInRangeOfPoint(playerid, 3.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;

        format(S_finalString, sizeof(S_finalString), "* Zvok klopania. (( %d%s %s ))", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street]);

        beenSent = true;

		foreach( new x : Player )
		{
		    if(GetPlayerVirtualWorld(x) == houseEnum[i][ho_PSC] && GetPlayerInterior(x) == floatround(houseIntList[houseEnum[i][ho_InteriorID]][5], floatround_round))
		    {
		        SendClientMessage(x, COLOR_VIOLET, S_finalString);
		    }
		}

		break;
	}

	foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;

		if(!IsPlayerInRangeOfPoint(playerid, 3.0, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;

        format(S_finalString, sizeof(S_finalString), "* Zvok klopania. (( %d%s %s ))", garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street]);

        beenSent = true;

		foreach( new x : Player )
		{
		    if(GetPlayerVirtualWorld(x) == garageEnum[i][ga_PSC] && GetPlayerInterior(x) == floatround(garageIntList[garageEnum[i][ga_InteriorID]][8], floatround_round))
		    {
		        SendClientMessage(x, COLOR_VIOLET, S_finalString);
		    }
		}

		break;
	}

	if(!beenSent)
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");

	format(S_finalString, sizeof(S_finalString), "* %s zaklopal.", GetPlayerNameEx(playerid, USE_MASK));
   	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET, S_finalString);

	return 1;
}

YCMD:zazvonit(playerid, params[], help)
{
    SendRingMsg(playerid);
	return 1;
}

SendRingMsg(playerid)
{

	new
		S_finalString[128 + 25 + 5],
		bool:beenSent = false;

	foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;

		if(!IsPlayerInRangeOfPoint(playerid, 3.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;

        format(S_finalString, sizeof(S_finalString), "* Zvok zvonèeka. (( %d%s %s ))", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street]);

        beenSent = true;

		foreach( new x : Player )
		{
		    if(GetPlayerVirtualWorld(x) == houseEnum[i][ho_PSC] && GetPlayerInterior(x) == floatround(houseIntList[houseEnum[i][ho_InteriorID]][5], floatround_round))
		    {
		        SendClientMessage(x, COLOR_VIOLET, S_finalString);
		    }
		}

		break;
	}

	if(!beenSent)
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");

	format(S_finalString, sizeof(S_finalString), "* %s zazvonil.", GetPlayerNameEx(playerid, USE_MASK));
   	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET, S_finalString);

	return 1;
}

YCMD:gdo(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
		return SendClientSyntax(playerid, "/gdo [popis situácie ...]");

    new str[256];
	format(str,256,"* %s (( %s ))", S_var,GetPlayerNameEx(playerid, USE_MASK));
   	SendClientMessageToAll(COLOR_VIOLET, str);
	return 1;
}

YCMD:melow(playerid, params[], help)
{

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
		return SendClientSyntax(playerid, "/melow [akcia charakteru]");

	new
		S_finalString[128 + 25 + 5];

	format(S_finalString, sizeof(S_finalString), "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_var);

 	new str[256];
	format(str,256,"* %s %s",GetPlayerNameEx(playerid, USE_MASK), S_var);
	printf("[CHAT] * %s %s", ReturnName(playerid), S_var);
   	SendLocalMessage(playerid,MELOW_CHAT_RANGE,COLOR_VIOLET,str);

	return 1;
}

YCMD:dolow(playerid, params[], help)
{

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
		return SendClientSyntax(playerid, "/dolow [popis situácie ...]");

	new
		S_finalString[128 + 25 + 5];

	format(S_finalString, sizeof(S_finalString), "* %s (( %s ))", S_var, GetPlayerNameEx(playerid, USE_MASK));

    new str[256];
	format(str,256,"* %s (( %s ))", S_var,GetPlayerNameEx(playerid, USE_MASK));
	printf("[CHAT] * %s ((%s))", S_var,ReturnName(playerid));
   	SendLocalMessage(playerid,MELOW_CHAT_RANGE,COLOR_VIOLET,str);
	return 1;
}

/*

	/info COMMAND

	< ENGLISH >
	    Displays main server info and statistics.


	< SLOVAK >
	    Zobrazí hlavné serverové informácie a tatistiky.

*/

YCMD:info(playerid, params[], help)
{

	new S_finalString[512] = "{FFFFFF}", S_tempString[128];

	format(S_tempString, 128, "Názov a verzia módu: "GM_NAME" "GM_VERSION"\n");
	strcat(S_finalString, S_tempString);

	format(S_tempString, 128, "Autor módu: "GM_AUTHOR"\n");
	strcat(S_finalString, S_tempString);

	format(S_tempString, 128, "Webová stránka: "WEB_SITE"\n\n");
	strcat(S_finalString, S_tempString);


	format(S_tempString, 128, "Poèet riadkov: %s\n", GM_LINES);
	strcat(S_finalString, S_tempString);

	format(S_tempString, 128, "Poèet príkazov: %d\n", GM_COMMANDS);
	strcat(S_finalString, S_tempString);

	format(S_tempString, 128, "Poèet objektov: %d\n", Streamer_CountItems(STREAMER_TYPE_OBJECT));
	strcat(S_finalString, S_tempString);

	format(S_tempString, 128, "Poèet vozidiel: %d\n\n", CountTotalVehicles());
	strcat(S_finalString, S_tempString);

	format(S_tempString, 128, "Najväèí roleplay level: %s (level %d)\n", g_stats_maxRoleplayLevelN, g_stats_maxRoleplayLevel);
	strcat(S_finalString, S_tempString);
	
	format(S_tempString, 128, "Najviac nahraných hodín: %s (%d hodín)\n", g_stats_playTimeN, g_stats_playTime);
	strcat(S_finalString, S_tempString);

	format(S_tempString, 128, "Rekord hráèov: %d\n", I_gm_playerRecord);
	strcat(S_finalString, S_tempString);

	ShowPlayerDialog(playerid, did_ServerStats, DIALOG_STYLE_MSGBOX, "SERVER STATS", S_finalString, "OK", "");
	return 1;
}

YCMD:server(playerid, params[], help)
{
    if(!IsPlayerAdmin(playerid))
	    return SendClientCantUseCommand(playerid);

	new
	    var1[16],
	    var2
	;

	if(sscanf(params,"s[16] d",var1,var2))
	    return SendClientSyntax(playerid, "/server [startmoney-startgolds] [pocet]");

	if(!strcmp(var1,"startmoney",true))
	{
	    Register_Money = var2;
	    SCFM(playerid, COLOR_LIGHTBLUE, "> Na zaèátek hráèi dostanou odteï %d$!", var2);
	}
	else if(!strcmp(var1,"startgolds",true))
	{
	    Register_Golds = var2;
	    SCFM(playerid, COLOR_LIGHTBLUE, "> Na zaèátek hráèi dostanou odteï %d goldù!", var2);
	}
	else
	    return SendClientSyntax(playerid, "/server [startmoney-startgolds] [pocet]");

	return 1;
}

/*

	/admins COMMAND

	< ENGLISH >
	    Prints online administrators.


	< SLOVAK >
	    Vypíe online administrátorov.

*/

YCMD:admins(playerid, params[], help)
{

    new
	    finalString[ 1024 ],

	    adminString[ 341 ],
	    modString[ 341 ],
		helperString [ 341 ],

		tempString[ 128 ],
		status[ 34
		 ],

		staffMembCount = 0
 	;

 	format(adminString, sizeof adminString, "{0080FF}Administrátori;\n");
 	format(modString, sizeof modString, "\n\n{8040FF}Moderátori;\n");
 	format(helperString, sizeof helperString, "\n\n{66CC99}Helperi;\n");

 	foreach( new i : Player )
 	{

 	    if(GetPlayerAdminLevel(i) < 1)
 	        continue;

		if(B_playerAdminVanish[i] == true && GetPlayerAdminLevel(playerid) < 4)
		    continue;

		if(B_playerAdminDuty[i] == true)
		    format(status, sizeof status, "{59c75b}ON DUTY");
		else
		    format(status, sizeof status, "{e55342}OFF DUTY");

		if(GetPlayerAdminLevel(i) < 3)
		    format(tempString, sizeof tempString, "\n{ffffff}%s(%s) - %s", GetPlayerNameEx(i, NO_MASK), ReturnMaster(i), status);
		else
		    format(tempString, sizeof tempString, "\n{ffffff}%s(%s, level %d) - %s", GetPlayerNameEx(i, NO_MASK), ReturnMaster(i), GetPlayerAdminLevel(i)-3, status);

 	    switch(GetPlayerAdminLevel(i))
 	    {

			case 1:
			    strcat(helperString, tempString);

            case 2:
			    strcat(modString, tempString);

			default:
			    strcat(adminString, tempString);
 	    }


		staffMembCount ++;

 	}

 	format(
 	    finalString,
 	    sizeof finalString,
 	    "{e34f4f}Online èlenovia Staff Teamu (%d):\n\n%s%s%s", staffMembCount, adminString, modString, helperString
	);

	ShowPlayerDialog(
	    playerid,
	    did_Admins,
	    DIALOG_STYLE_MSGBOX,
	    "STAFF TEAM",
	    finalString,
	    "OK",
	    ""
	);

	return 1;
}

YCMD:onduty(playerid, params[], help)
{

	new
	    pocetzamonl[6]
	;

	//loop
	foreach( new x : Player )
	{
	    //policajt
	    if(factEnum[GetPlayerFaction(x)][fact_Type] == FACTION_TYPE_LAW && IsPlayerWorking(x))
			pocetzamonl[0] ++;

		//hasic,ems
		if(factEnum[GetPlayerFaction(x)][fact_Type] == FACTION_TYPE_FIRE && IsPlayerWorking(x))
			pocetzamonl[1] ++;

        //gov
		if(factEnum[GetPlayerFaction(x)][fact_Type] == FACTION_TYPE_GOV)
			pocetzamonl[2] ++;

		//news
		if(factEnum[GetPlayerFaction(x)][fact_Type] == FACTION_TYPE_MEDIA)
			pocetzamonl[3] ++;

        //hawkins
		if(factEnum[GetPlayerFaction(x)][fact_Type] == FACTION_TYPE_MECHANIC && IsPlayerWorking(x))
			pocetzamonl[4] ++;

        //taxi
		if(factEnum[GetPlayerFaction(x)][fact_Type] == FACTION_TYPE_TAXI && IsPlayerWorking(x))
			pocetzamonl[5] ++;
	}
	//konec loopu

	SCFM(playerid, COLOR_GREY, "> Je v slube %d èlenov law enforcementu!", pocetzamonl[0]);
	SCFM(playerid, COLOR_GREY, "> Je v slube %d hasièov a záchranárov!", pocetzamonl[1]);
	SCFM(playerid, COLOR_GREY, "> Je online %d politikov a èlenov vlády!", pocetzamonl[2]);
	SCFM(playerid, COLOR_GREY, "> Je online %d novinárov!", pocetzamonl[3]);
	SCFM(playerid, COLOR_GREY, "> Pracuje %d mechanikov!", pocetzamonl[4]);
	SCFM(playerid, COLOR_GREY, "> Pracuje %d taxikárov!", pocetzamonl[5]);
	return 1;
}

YCMD:fonline(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 1)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

    new
	    finalString[ 2048 ],

	    factionString[ 50 ][341],

		tempString[ 128 ],
		status[ 34 ]
 	;

 	foreach( new i : Player )
 	{

 	    if(GetPlayerFaction(i) <= 0 || GetPlayerFaction(i) >= 70)
 	        continue;

		if(strlen(factionString[GetPlayerFaction(i)]) < 1)
		    format(factionString[GetPlayerFaction(i)], 341, "\n{ffffff}%s:\n",factEnum[GetPlayerFaction(i)][fact_Name]);

		if(IsPlayerWorking(i))
		    format(status, sizeof status, "{59c75b}");
		else
		    format(status, sizeof status, "{e55342}");

		format(tempString, sizeof tempString, "%s%s\n", status, GetPlayerNameEx(i, NO_MASK));

		strcat(factionString[GetPlayerFaction(i)], tempString);

 	}

 	format(
 	    finalString,
 	    sizeof finalString,
 	    "{e34f4f}Online èlenovia frakcií: \n"
	);

	for( new i; i < 50; i++)
	{
	    if(strlen(factionString[i]) < 3)
	        continue;

		if(strlen(finalString) + strlen(factionString[i]) >= 2048) continue;

		strcat(finalString, factionString[i]);
	}

	ShowPlayerDialog(
	    playerid,
	    did_Admins,
	    DIALOG_STYLE_MSGBOX,
	    "FRAKCIE",
	    finalString,
	    "OK",
	    ""
	);

	return 1;
}

/*

	/damages COMMAND

	< ENGLISH >
	    Shows player's damages.


	< SLOVAK >
	    Zobrazí damage hráèa.

*/

YCMD:damages(playerid, params[], help)
{

	new
		I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/damages [id]");

	MaskToId(I_var);

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	if(GetDistanceBetweenPlayers(playerid, I_var) > 3.5)
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	ShowPlayerDamages(playerid, I_var);
	return 1;
}

/*

	/alogin COMMAND

	< ENGLISH >
	    Logs player into admin system.


	< SLOVAK >
	    Prihlási hráèa do admin systému.

*/

YCMD:alogin(playerid, params[], help)
{

	if(I_playerAdminLevel[playerid] < 1)
	    return SendClientCantUseCommand(playerid);

	if(B_playerAdminLogged[playerid] == true)
	    return SendError(playerid, "U si prihlásený v admin systéme!");

    B_playerAdminLogged[playerid] = true;
    B_playerAdminDuty[playerid] = false;
    B_playerAdminVanish[playerid] = false;
    B_playerAdminSPOT[playerid] = false;

    SendSuccess(playerid, "Úspene si sa prihlásil do admin systému! Nezabudni si zapnú admin duty (/aduty)!");

    FormatLog(log_type_admin, "%s(%s - %s) sa prihlasil do admin systemu.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid));
	return 1;
}

/*

	/alogout COMMAND

	< ENGLISH >
	    Logs player out of admin system.


	< SLOVAK >
	    Odhlási hráèa z admin systému.

*/

YCMD:alogout(playerid, params[], help)
{

	if(GetPlayerStaffLevel(playerid) < 1)
	    return SendClientCantUseCommand(playerid);

	if(B_playerAdminLogged[playerid] == false)
	    return SendError(playerid, "Nie si prihlásený v admin systéme!");

    B_playerAdminLogged[playerid] = false;
    B_playerAdminDuty[playerid] = false;
    B_playerAdminVanish[playerid] = false;
    B_playerAdminSPOT[playerid] = false;

    TextDrawHideForPlayer(playerid, TD_ziadosti);

    SendSuccess(playerid, "Úspene si sa odhlásil z admin systému, maj sa!");

    FormatLog(log_type_admin, "%s(%s - %s) sa odhlasil z admin stemu.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid));
	return 1;
}

/*

	/aduty COMMAND

	< ENGLISH >
	    Toggle admin duty.


	< SLOVAK >
	    Nastaví admin duty.

*/

YCMD:aduty(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 1)
	    return SendClientCantUseCommand(playerid);

	if(B_playerAdminDuty[playerid] == false)
	{
	    B_playerAdminDuty[playerid] = true;
	    SendSuccess(playerid, "Nastavil si si status \"Admin Duty\"! Bude dostáva upozornenia a braný, ako pracujúci admin.");

	    if(GetAssistCount() > 0)
			TextDrawShowForPlayer(playerid, TD_ziadosti);

	    FormatLog(log_type_admin, "%s(%s - %s) si zapol admin duty.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid));
	}
	else
	{
	    B_playerAdminDuty[playerid] = false;
	    SendSuccess(playerid, "Nastavil si si status \"Roleplayuje...\"! Nebude dostáva iadne upozornenia.");

	    TextDrawHideForPlayer(playerid, TD_ziadosti);

	    FormatLog(log_type_admin, "%s(%s - %s) si vypol admin duty.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid));
	}
	return 1;
}

/*

	/avanish COMMAND

	< ENGLISH >
	    Toggle admin vansih.


	< SLOVAK >
	    Nastaví admin vanish.

*/

YCMD:fly(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	if(StartFly(playerid) == false)
	{
	    StopFly(playerid);
	    SendError(playerid, "Vypol si reim lietania!");

	}
	else
	{
		SendSuccess(playerid, "Zapol si reim lietania!");
	}
	return 1;
}

YCMD:vanish(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	if(B_playerAdminVanish[playerid] == false)
	{
	    B_playerAdminVanish[playerid] = true;
	    SendSuccess(playerid, "Nastavil si sa neviditelným! Pozor, ak má spot, zostáva zapnutý!");

	}
	else
	{
	    B_playerAdminVanish[playerid] = false;
	    SendSuccess(playerid, "Nastavil si sa viditelným, vetci môu zisti, e si administrátor!");

	}
	return 1;
}

YCMD:spot(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 1)
	    return SendClientCantUseCommand(playerid);

	if(B_playerAdminSPOT[playerid] == false)
	{

	    B_playerAdminSPOT[playerid] = true;
	    SendSuccess(playerid, "Nastavil si si SPOT (Out Of Character reim)!");
	    BumpPlayerColor(playerid);

	}
	else
	{

	    B_playerAdminSPOT[playerid] = false;
	    SendSuccess(playerid, "Zruil si si SPOT (Out Of Character reim)!");
	    BumpPlayerColor(playerid);

	    PlayerTextDrawHide(playerid, TD_spot[playerid]);

	}
	return 1;
}

YCMD:toggold(playerid, params[], help)
{

	if(GetPlayerDonatorLevel(playerid) < 1)
	    return SendClientCantUseCommand(playerid);

	if(B_playerTogGold[playerid] == false)
	{

	    B_playerTogGold[playerid] = true;
	    SendSuccess(playerid, "Nastavil si si donator reim, bude ma zlaté meno v v tabe!");
	    BumpPlayerColor(playerid);

	}
	else
	{

	    B_playerTogGold[playerid] = false;
	    SendSuccess(playerid, "Vypol si si donator reim!");
	    BumpPlayerColor(playerid);

	}
	return 1;
}

/*

	/povolitooc COMMAND

	< ENGLISH >
	    Toggles player's OOC chat usage (if its globally disabled).


	< SLOVAK >
	    Prehodí hráèov ooc local chat (ak je globálne vypnutý).

*/

YCMD:povolitooc(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 1)
	    return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params, "d", I_var))
		return SendClientSyntax(playerid, "/povolitooc [id]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	if(B_playerAllowLocal[I_var])
	{
	    new S_string[144];

	    format(S_string, 144, "> Vypol si lokálny OOC chat hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
		SendClientMessage(playerid, 0xD0D0D0FF, S_string);

		format(S_string, 144, "> %s ti vypol lokálny OOC chat!", GetPlayerNameEx(playerid, NO_MASK));
		SendClientMessage(I_var, 0xD0D0D0FF, S_string);

		B_playerAllowLocal[I_var] = false;
	}
	else
	{
	    new S_string[144];

	    format(S_string, 144, "> Zapol si lokálny OOC chat hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
		SendClientMessage(playerid, 0xD0D0D0FF, S_string);

		format(S_string, 144, "> %s ti zapol lokálny OOC chat!", GetPlayerNameEx(playerid, NO_MASK));
		SendClientMessage(I_var, 0xD0D0D0FF, S_string);
		B_playerAllowLocal[I_var] = true;
	}
	return 1;
}

/*

	/zakazatooc COMMAND

	< ENGLISH >
	    Blocks player's OOC local chat usdage.


	< SLOVAK >
	    Vypne hráèovi pouzívanie OOC chatu (ak je globálne zapnutý).

*/

YCMD:cutooc(playerid,params[],help)
{

	if(topt_ooc[playerid] == 0)
 	{
		topt_ooc[playerid] = 1;
		SendError(playerid, "Vypol si zobrazovanie OOC chatu!");
	}
	else
	{
	    topt_ooc[playerid] = 0;
		SendSuccess(playerid, "Zapol si zobrazovanie OOC chatu!");
	}

	return 1;
}

YCMD:zakazatooc(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 2)
	    return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params, "d", I_var))
		return SendClientSyntax(playerid, "/zakazatooc [id]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	if(B_playerBlockLocal[I_var])
	{
	    new S_string[144];

	    format(S_string, 144, "> Povolil si lokálny OOC chat hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
		SendClientMessage(playerid, 0xD0D0D0FF, S_string);

		format(S_string, 144, "> %s ti povolil pouívanie lokálneho OOC chatu!", GetPlayerNameEx(playerid, NO_MASK));
		SendClientMessage(I_var, 0xD0D0D0FF, S_string);

		B_playerBlockLocal[I_var] = false;
	}
	else
	{
	    new S_string[144];

	    format(S_string, 144, "> Zakázal si lokálny OOC chat hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
		SendClientMessage(playerid, 0xD0D0D0FF, S_string);

		format(S_string, 144, "> %s ti zakázal pouívanie lokálneho OOC chatu!", GetPlayerNameEx(playerid, NO_MASK));
		SendClientMessage(I_var, 0xD0D0D0FF, S_string);
		B_playerBlockLocal[I_var] = true;
	}
	return 1;
}

/*

	/povolitooc COMMAND

	< ENGLISH >
	    Toggles player's OOC chat usage (if its globally disabled).


	< SLOVAK >
	    Prehodí hráèov ooc local chat (ak je globálne vypnutý).

*/

YCMD:povolitglobal(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 2)
	    return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params, "d", I_var))
		return SendClientSyntax(playerid, "/povolitglobal [id]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	if(B_playerAllowGlobal[I_var])
	{
	    new S_string[144];

	    format(S_string, 144, "> Vypol si globálny OOC chat hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
		SendClientMessage(playerid, 0xD0D0D0FF, S_string);

		format(S_string, 144, "> %s ti vypol globálny OOC chat!", GetPlayerNameEx(playerid, NO_MASK));
		SendClientMessage(I_var, 0xD0D0D0FF, S_string);

		B_playerAllowGlobal[I_var] = false;
	}
	else
	{
	    new S_string[144];

	    format(S_string, 144, "> Zapol si globálny OOC chat hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
		SendClientMessage(playerid, 0xD0D0D0FF, S_string);

		format(S_string, 144, "> %s ti zapol globálny OOC chat!", GetPlayerNameEx(playerid, NO_MASK));
		SendClientMessage(I_var, 0xD0D0D0FF, S_string);
		B_playerAllowGlobal[I_var] = true;
	}
	return 1;
}

/*

	/zakazatglobal COMMAND

	< ENGLISH >
	    Blocks player's OOC global chat usdage.


	< SLOVAK >
	    Vypne hráèovi pouzívanie OOC chatu (ak je globálne zapnutý).

*/

YCMD:zakazatglobal(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 2)
	    return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params, "d", I_var))
		return SendClientSyntax(playerid, "/zakazatglobal [id]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	if(B_playerBlockGlobal[I_var])
	{
	    new S_string[144];

	    format(S_string, 144, "> Povolil si globálny OOC chat hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
		SendClientMessage(playerid, 0xD0D0D0FF, S_string);

		format(S_string, 144, "> %s ti povolil pouívanie globálneho OOC chatu!", GetPlayerNameEx(playerid, NO_MASK));
		SendClientMessage(I_var, 0xD0D0D0FF, S_string);

		B_playerBlockGlobal[I_var] = false;
	}
	else
	{
	    new S_string[144];

	    format(S_string, 144, "> Zakázal si globálny OOC chat hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
		SendClientMessage(playerid, 0xD0D0D0FF, S_string);

		format(S_string, 144, "> %s ti zakaal pouívanie globálneho OOC chatu!", GetPlayerNameEx(playerid, NO_MASK));
		SendClientMessage(I_var, 0xD0D0D0FF, S_string);
		B_playerBlockGlobal[I_var] = true;
	}
	return 1;
}

/*

	/toggleooc COMMAND

	< ENGLISH >
	    Toggles player's OOC chat usage (if its globally disabled).


	< SLOVAK >
	    Prehodí hráèov ooc local chat (ak je globálne vypnutý).

*/

YCMD:toggleooc(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	if(I_gm_localOOC == 0)
	{
		I_gm_localOOC = 1;

	    new S_string[144];

	    format(S_string, 144, "> %s zapol lokálny OOC chat!", GetPlayerNameEx(playerid, NO_MASK));
		SendClientMessageToAll(COLOR_ADMINCMD, S_string);

		FormatLog(log_type_admin, "%s(%s) zapol lokálny OOC chat.", ReturnName(playerid), ReturnIP(playerid));
	}
	else
	{
	    I_gm_localOOC = 0;

	    new S_string[144];

	    format(S_string, 144, "> %s vypol lokálny OOC chat!", GetPlayerNameEx(playerid, NO_MASK));
		SendClientMessageToAll(COLOR_ADMINCMD, S_string);

		FormatLog(log_type_admin, "%s(%s) vypol lokálny OOC chat.", ReturnName(playerid), ReturnIP(playerid));
	}
	return 1;
}

/*

	/toggleglobal COMMAND

	< ENGLISH >
	    Toggles player's OOC chat usage (if its globally disabled).


	< SLOVAK >
	    Prehodí hráèov ooc local chat (ak je globálne vypnutý).

*/

YCMD:toggleglobal(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	if(I_gm_globalOOC == 0)
	{
		I_gm_globalOOC = 1;

	    new S_string[144];

	    format(S_string, 144, "> %s vypol globálny OOC chat!", GetPlayerNameEx(playerid, NO_MASK));
		SendClientMessageToAll(COLOR_ADMINCMD, S_string);

		FormatLog(log_type_admin, "%s(%s) vypol globalny OOC chat.", ReturnName(playerid), ReturnIP(playerid));
	}
	else
	{
	    I_gm_globalOOC = 0;

	    new S_string[144];

	    format(S_string, 144, "> %s zapol globálny OOC chat!", GetPlayerNameEx(playerid, NO_MASK));
		SendClientMessageToAll(COLOR_ADMINCMD, S_string);

		FormatLog(log_type_admin, "%s(%s) zapol globalny OOC chat.", ReturnName(playerid), ReturnIP(playerid));
	}
	return 1;
}

/*

	/setskin COMMAND

	< ENGLISH >
	    Sets player's skin.


	< SLOVAK >
	    Upravuje skin hráèa.

*/

YCMD:setskin(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	new
		I_var,
		I_var1;

	if(sscanf(params, "dd", I_var, I_var1))
		return SendClientSyntax(playerid, "/setskin [id] [model skinu]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	if(I_var1 < 0)
	    return SendError(playerid, "Model skinu musí by správny!");

	ex_SetPlayerSkin(I_var, I_var1);

	if(IsWorking[playerid] == 0)
	{
	    I_pSkin_Civil[I_var] = I_var1;
	}
	else
	{
	    I_pSkin_Work[I_var] = I_var1;
	}

	new S_string[144];

    format(S_string, 144, "> Nastavil si skin model %d hráèovi %s!", I_var1, GetPlayerNameEx(I_var, NO_MASK));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil skin model %d!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s - %s) nastavil skin %s(%s - %s) ID %d.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnMaster(I_var), ReturnIP(I_var), I_var1);
	return 1;
}

YCMD:setclothingmodel(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
		I_var,
		I_var1,
		I_model;

	if(sscanf(params, "ddd", I_var, I_var1, I_model))
		return SendClientSyntax(playerid, "/setclothingmodel [id] [slot doplnku] [model]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	if(I_var1 < 1 || I_var1-1 > ATTACH_MAX_CLOTHING.[I_var])
	    return SendError(playerid, "Slot doplnku musí by správny!");

    if(playerAttachments[I_var][I_var1-1][ACTIVE] == true)
	    return SendError(playerid, "Doplnok musí by skrytý!");

    if(playerAttachments[I_var][I_var1-1][MODELID] == 0)
	    return SendError(playerid, "Slot musi byt obsadeny!");

	playerAttachments[I_var][I_var1-1][MODELID] = I_model;

	new S_string[144];

    format(S_string, 144, "> Nastavil si model doplnku (#%d) %d hráèovi %s!", I_var1, I_model, GetPlayerNameEx(I_var, NO_MASK));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil model doplnku (#%d) na %d!", GetPlayerNameEx(playerid, NO_MASK), I_var1, I_model);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s - %s) nastavil model doplnku (#d) na %d hráèovi %s(%s - %s).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), I_var1, I_model, ReturnName(I_var), ReturnMaster(I_var), ReturnIP(I_var));
	return 1;
}

/*

	/setprava COMMAND

	< ENGLISH >
	    Can edit admin level.


	< SLOVAK >
	    Upravuje admin level hráèa.

*/

YCMD:setprava(playerid, params[], help)
{

	if(!IsPlayerAdmin(playerid))
	    return SendClientCantUseCommand(playerid);

	new
		I_var,
		S_var1[64],
		lv;

	if(sscanf(params, "ds[64]D(-1)", I_var, S_var1,lv))
		return SendClientSyntax(playerid, "/setprava [id] [hrac - helper - moderator - admin - ladmin - dev]");

	new
 		I_level = 11;

	if(!strcmp(S_var1, "helper", true)) I_level = 1;
	else if(!strcmp(S_var1, "moderator", true)) I_level = 2;
	else if(!strcmp(S_var1, "admin", true)) I_level = 4;
	else if(!strcmp(S_var1, "ladmin", true)) I_level = 6;
	else if(!strcmp(S_var1, "dev", true)) I_level = 7;
	else if(!strcmp(S_var1, "custom", true)) I_level = 11;
	else if(!strcmp(S_var1, "hrac", true)) I_level = 0;
	else return SendClientSyntax(playerid, "/setprava [id] [hrac - helper - moderator - admin - ladmin - dev]");

	if(I_level == 11 && lv < 1)
	    return SendClientSyntax(playerid, "/setprava [id] [hrac - helper - moderator - admin - ladmin - dev]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	if(I_level != 11)
		SetPlayerAdminLevel(I_var, I_level);
	else if(I_level > 2)
	{
	    SetPlayerAdminLevel(I_var, 2+I_level);
	}

	new
	    S_title[64],
		S_string[144];

    switch(I_level) {
        case 0:
            strcat(S_title, "Hráè");
    	case 1:
			strcat(S_title, "Helper");
   		case 2:
			strcat(S_title, "Moderátor");
        case 4,5:
			strcat(S_title, "Administrator");
        case 6:
			strcat(S_title, "Lead Administrator");
        case 7:
			strcat(S_title, "Developer");

        default:
        {
			format(S_title, 64, "Netandartný post");
		}

	}

	format(S_string, 144, "> Nastavil si oprávnenie %s hráèovi %s!", S_title, GetPlayerNameEx(I_var, NO_MASK));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil oprávnenie %s!", GetPlayerNameEx(playerid, NO_MASK), S_title);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) nastavil práva %s hracovi %s(%s).", ReturnName(playerid), ReturnIP(playerid), S_title, ReturnName(I_var), ReturnIP(I_var));
	return 1;
}

YCMD:setdonator(playerid, params[], help)
{

	if(!IsPlayerAdmin(playerid))
	    return SendClientCantUseCommand(playerid);

	new
		I_var,
		S_var1[64],
		I_time[3];

	if(sscanf(params, "ds[64] dD(0)D(0)", I_var, S_var1, I_time[0], I_time[1], I_time[2]))
		return SendClientSyntax(playerid, "/setdonator [id] [level0 - level1 - level2 - level3] [mesiace] <dni> <hodiny>");

	new
 		I_level = 0;

	if(!strcmp(S_var1, "level0", true)) I_level = 0;
	else if(!strcmp(S_var1, "level1", true)) I_level = 1;
	else if(!strcmp(S_var1, "level2", true)) I_level = 2;
	else if(!strcmp(S_var1, "level3", true)) I_level = 3;
	else return SendClientSyntax(playerid, "/setdonator [id] [level0 - level1 - level2 - level3] [mesiace] <dni> <hodiny>");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);
	    
	if(I_time[0] > 36)
	    return SendError(playerid, "Maximálny poèet mesiacov je 36!");

	SetPlayerDonatorLevel(I_var, I_level);
	g_I_donatorExpire[I_var] = gettime() + (I_time[0] * 2592000) + (I_time[1] * 86400) + (I_time[2] * 3600);

	new
	    S_title[64],
		S_string[144];

    switch(I_level) {
        case 0:
            strcat(S_title, "level 0");
    	case 1:
			strcat(S_title, "level 1");
   		case 2:
			strcat(S_title, "level 2");
		case 3:
			strcat(S_title, "level 3");

	}

	format(S_string, 144, "> Nastavil si donator %s hráèovi %s, expiruje %s!", S_title, GetPlayerNameEx(I_var, NO_MASK), getdateunix(g_I_donatorExpire[I_var]));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil donator %s, expiruje %s!", GetPlayerNameEx(playerid, NO_MASK), S_title, getdateunix(g_I_donatorExpire[I_var]));
	SendClientMessage(I_var, COLOR_PURPLE, S_string);

	FormatLog(log_type_admin, "%s(%s) nastavil donator %s hracovi %s(%s), expiruje %s.", ReturnName(playerid), ReturnIP(playerid), S_title, ReturnName(I_var), ReturnIP(I_var), getdateunix(g_I_donatorExpire[I_var]));
	return 1;
}

YCMD:datrenametickety(playerid, params[], help)
{

	if(!IsPlayerAdmin(playerid))
	    return SendClientCantUseCommand(playerid);

	new
		I_var,
		S_var1;

	if(sscanf(params, "dd", I_var, S_var1))
		return SendClientSyntax(playerid, "/datrenametickety [id] [poèet]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	RenameTicket[I_var] += S_var1;

	new
		S_string[144];

	format(S_string, 144, "> Dal si %d rename ticketov hráèovi %s!", S_var1, GetPlayerNameEx(I_var, NO_MASK));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti dal %d rename ticketov!", GetPlayerNameEx(playerid, NO_MASK), S_var1);
	SendClientMessage(I_var, COLOR_PURPLE, S_string);

	FormatLog(log_type_admin, "%s(%s) dal %d rename ticketov hracovi %s(%s).", ReturnName(playerid), ReturnIP(playerid), S_var1, ReturnName(I_var), ReturnIP(I_var));
	return 1;
}

YCMD:setrenametickety(playerid, params[], help)
{

	if(!IsPlayerAdmin(playerid))
	    return SendClientCantUseCommand(playerid);

	new
		I_var,
		S_var1;

	if(sscanf(params, "dd", I_var, S_var1))
		return SendClientSyntax(playerid, "/setrenametickety [id] [poèet]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	RenameTicket[I_var] = S_var1;

	new
		S_string[144];

	format(S_string, 144, "> Nastavil si %d rename ticketov hráèovi %s!", S_var1, GetPlayerNameEx(I_var, NO_MASK));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil hodnotu rename ticketov na %d!", GetPlayerNameEx(playerid, NO_MASK), S_var1);
	SendClientMessage(I_var, COLOR_PURPLE, S_string);

	FormatLog(log_type_admin, "%s(%s) nastavil %d rename ticketov hracovi %s(%s).", ReturnName(playerid), ReturnIP(playerid), S_var1, ReturnName(I_var), ReturnIP(I_var));
	return 1;
}

YCMD:setpohlavie(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	new
		I_var,
		S_var1[64];

	if(sscanf(params, "ds[64]", I_var, S_var1))
		return SendClientSyntax(playerid, "/setpohlavie [id] [muz - zena]");

	new
 		I_level = 0;

	if(!strcmp(S_var1, "muz", true)) I_level = 1;
	else if(!strcmp(S_var1, "zena", true)) I_level = 2;
	else return SendClientSyntax(playerid, "/setpohlavie [id] [muz - zena]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	g_I_playerGender[I_var] = I_level;

	new
	    S_title[64],
		S_string[144];

    switch(I_level) {
    	case 1:
			strcat(S_title, "mu");
   		case 2:
			strcat(S_title, "ena");

	}

	format(S_string, 144, "> Nastavil si pohlavie %s hráèovi %s!", S_title, GetPlayerNameEx(I_var, NO_MASK));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil pohlavie %s!", GetPlayerNameEx(playerid, NO_MASK), S_title);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) nastavil pohlavie %s hracovi %s(%s).", ReturnName(playerid), ReturnIP(playerid), S_title, ReturnName(I_var), ReturnIP(I_var));
	return 1;
}

YCMD:osetpohlavie(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	new
		I_var[30],
		S_var1[64];

	if(sscanf(params, "s[30] s[64]", I_var, S_var1))
		return SendClientSyntax(playerid, "/osetpohlavie [meno charakteru] [muz - zena]");

	foreach( new i : Player )
	{
		if(!IsPlayerLogged(i))
			continue;

		if(strcmp(ReturnName(i), I_var, false))
			continue;

		return SendError(playerid, "Tento hráè je online!");
	}

	new
 		I_level = 0;

	if(!strcmp(S_var1, "muz", true)) I_level = 1;
	else if(!strcmp(S_var1, "zena", true)) I_level = 2;
	else return SendClientSyntax(playerid, "/osetpohlavie [meno charakteru] [muz - zena]");

	new
		S_query[128];
	mysql_format(MYSQL, S_query, 128, "SELECT Gender FROM char_main WHERE Username = '%e'", I_var);
	new
	    Cache:q = mysql_query(MYSQL, S_query);

	if(cache_num_rows() < 1)
	{
		cache_delete(q);
		return SendError(playerid, "Tento hráè nie je v databáze, zadaj aj podtrník!");
	}
	cache_delete(q);

	mysql_format(MYSQL, S_query, 128, "UPDATE char_main SET Gender = '%d' WHERE Username = '%e'", I_level, I_var);

	q = mysql_query(MYSQL, S_query);

	cache_delete(q);



	new
	    S_title[64],
		S_string[144];

    switch(I_level) {
    	case 1:
			strcat(S_title, "mu");
   		case 2:
			strcat(S_title, "ena");

	}

	format(S_string, 144, "> Nastavil si pohlavie %s offline hráèovi %s!", S_title, str_replace("_", " ", I_var));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) nastavil pohlavie %s offline hracovi %s.", ReturnName(playerid), ReturnIP(playerid), S_title, str_replace("_", " ", I_var));
	return 1;
}

YCMD:posledneprikazy(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 2)
		return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params,"d",I_var))
		return SendClientSyntax(playerid, "/posledneprikazy (/pp) [id]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

    if(GetPlayerAdminLevel(playerid) < GetPlayerAdminLevel(I_var))
		return SendClientCantUseCommand(playerid);

	new
 		finalString[1024*2],
		tString[128 + 20];

	format(finalString, 1024, "{e34f4f}Posledné príkazy hráèa %s(%d);\n\n{ffffff}", GetPlayerNameEx(I_var, NO_MASK), I_var);
	for(new id = MAX_COMMAND_LOG - 1; id > -1; id --)
	{
	    if(id < 0) break;
		format(tString, 128+20, "%s\n", commandLog[I_var][id]);
		strcat(finalString, tString);
	}
	watchCmds[playerid] = I_var;

	ShowPlayerDialog(playerid, did_posledneprikazy, DIALOG_STYLE_MSGBOX, "POSLEDNÉ PRÍKAZY", finalString, "OK", "");

	FormatWarnEx(playerid, 3, "AdmCmd:", COLOR_ADMINCMD, "%s si vylistoval posledné príkazy hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	return 1;
}

YCMD:pcmd(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 6)
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		S_var[128];

	if(sscanf(params,"ds[128]",I_var,S_var))
		return SendClientSyntax(playerid, "/pcmd [id] [params]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	Command_ReProcess(I_var, S_var, 0);

	return 1;
}

YCMD:zaznammb(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
		return SendClientCantUseCommand(playerid);

	if(!IsPlayerWorking(playerid) && GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	new
 		finalString[1024] = "Èas\tMýtna brána\tVozidlo\tPoèet osôb";

	for(new id = MAX_TOLL_LOG - 1; id > -1; id --)
	{
	    if(id < 0) break;

	    if(strlen(tollLog[id]) < 2)
	        continue;

		strcat(finalString, tollLog[id]);
		strcat(finalString, "\n");
	}

	ShowPlayerDialog(playerid, did_toll_log, DIALOG_STYLE_TABLIST_HEADERS, "ZÁZNAM MÝTNYCH BRÁN", finalString, "OK", "");

 	FormatWarnEx(playerid, 4, "AdmCmd:", COLOR_ADMINCMD, "%s si vylistoval záznamy mýtnych brán.", GetPlayerNameEx(playerid, USE_PUREIDNAME));
	return 1;
}

YCMD:myguns(playerid, params[], help)
{
	new
		lFin[ 512 ] = "Zbraò\tNáboje\n",
		lTmp[ 128 ],
		lProceed = 0
	;

	for(new x; x < 12; x++)
	{
	    if(playerEmptyGuns[playerid][x] < 1)
	        continue;

		format(lTmp, sizeof lTmp, "%s\t0\n", GetWeaponNameEx(playerEmptyGuns[playerid][x]));
		strcat(lFin, lTmp);

		lProceed = 1;
	}

	if(!lProceed)
	    return SendError(playerid, "Nemá iadne prázdne zbrane!");

	ShowPlayerDialog(playerid, did_emptygun, DIALOG_STYLE_TABLIST_HEADERS, "PRÁZDNE ZBRANE", lFin, "NABI", "ZRUI");

	return 1;
}

YCMD:mytnebrany(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
		return SendClientCantUseCommand(playerid);

	if(!IsPlayerWorking(playerid) && GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[12];

	if(sscanf(params, "s[12]", S_var))
	{
 		SendClientSyntax(playerid, "/mytnebrany [HB / BB / VSETKY / INFOMOD]");
		return SendClientSyntax(playerid, "Ak je zapnutý infomód, dostanete informácie o kadom aute ktoré prejde cez odblokovanú mýtnu bránu.");
	}

	if(!strcmp(S_var, "HB", true))
	{

	    if(tollBooths_blockAll == 1)
	        return SendError(playerid, "Vetky mýtne brány sú zablokované!");




	    if(tollBooths_block[1] == 1)
	    {
	        tollBooths_block[1] = 0;
	        tollBooths_block[2] = 0;

	        foreach( new x : Player )
			{
			    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
			        continue;

				if(!IsPlayerWorking(x))
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s odblokoval mýtne brány Hampton Barns!", GetPlayerNameEx(playerid, NO_MASK));
			}
	    }
	    else
	    {
	        tollBooths_block[1] = 1;
	        tollBooths_block[2] = 1;

	        foreach( new x : Player )
			{
			    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
			        continue;

				if(!IsPlayerWorking(x))
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s zablokoval mýtne brány Hampton Barns!", GetPlayerNameEx(playerid, NO_MASK));
			}
		}
	}
	else if(!strcmp(S_var, "BB", true))
	{

	    if(tollBooths_blockAll == 1)
	        return SendError(playerid, "Vetky mýtne brány sú zablokované!");




	    if(tollBooths_block[3] == 1)
	    {
	        tollBooths_block[3] = 0;
	        tollBooths_block[4] = 0;

	        foreach( new x : Player )
			{
			    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
			        continue;

				if(!IsPlayerWorking(x))
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s odblokoval mýtne brány pri Blueberry Acres!", GetPlayerNameEx(playerid, NO_MASK));
			}
	    }
	    else
	    {
	        tollBooths_block[3] = 1;
	        tollBooths_block[4] = 1;

	        foreach( new x : Player )
			{
			    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
			        continue;

				if(!IsPlayerWorking(x))
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s zablokoval mýtne brány pri Blueberry Acres!", GetPlayerNameEx(playerid, NO_MASK));
			}
		}
	}
	else if(!strcmp(S_var, "Vsetky", true))
	{




	    if(tollBooths_blockAll == 1)
		{

		    tollBooths_blockAll = 0;

	        tollBooths_block[1] = 0;
	        tollBooths_block[2] = 0;
	        tollBooths_block[3] = 0;
	        tollBooths_block[4] = 0;

	        foreach( new x : Player )
			{
			    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
			        continue;

				if(!IsPlayerWorking(x))
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s odblokoval vetky mýtne brány!", GetPlayerNameEx(playerid, NO_MASK));
			}
	    }
	    else
	    {
	        tollBooths_blockAll = 1;

	        tollBooths_block[1] = 1;
	        tollBooths_block[2] = 1;
	        tollBooths_block[3] = 1;
	        tollBooths_block[4] = 1;

	        foreach( new x : Player )
			{
			    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
			        continue;

				if(!IsPlayerWorking(x))
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s zablokoval vetky mýtne brány!", GetPlayerNameEx(playerid, NO_MASK));
			}
		}
	}
	else if(!strcmp(S_var, "Infomod", true))
	{




	    if(tollBooths_infoMod == 1)
		{

		    tollBooths_infoMod = 0;

	        foreach( new x : Player )
			{
			    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
			        continue;

				if(!IsPlayerWorking(x))
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s vypol info mód pre mýtne brány!", GetPlayerNameEx(playerid, NO_MASK));
			}
	    }
	    else
	    {
     		tollBooths_infoMod = 1;

	        foreach( new x : Player )
			{
			    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
			        continue;

				if(!IsPlayerWorking(x))
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s zapol info mód pre mýtne brány!", GetPlayerNameEx(playerid, NO_MASK));
			}
		}
	}
	else
	{
	    SendClientSyntax(playerid, "/mytnebrany [HB / BB / VSETKY / INFOMOD]");
	    return SendClientSyntax(playerid, "Ak je zapnutý infomód, dostanete informácie o kadom aute ktoré prejde cez odblokovanú mýtnu bránu.");
	}
	return 1;
}

YCMD:heal(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 1)
		return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params,"d",I_var))
		return SendClientSyntax(playerid, "/heal [id]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	SetPlayerHealth(I_var, 100);
	if(!IsPlayerInAnyVehicle(I_var)) ClearAnimations(I_var, 1);

	B_dmg_IsInDS[I_var] = false;
	B_isLegWounded[I_var] = false;
	isBleeding[I_var] = false;
	unStoppableAnim[I_var] = false;
	B_informDeath[I_var] = false;
    B_allowDeath[I_var] = false;
	B_isFinallyDead[I_var] = false;
 	B_isPlayerInDM[I_var] = false;

	TogglePlayerControllable(I_var, 1);

	if(T_timer_deathTimer[I_var] != -1) KillTimer(T_timer_deathTimer[I_var]);
	T_timer_deathTimer[I_var] = -1;

	if(IsValidDynamic3DTextLabel(T3D_dmg_Label[I_var]))
	{
		DestroyDynamic3DTextLabel(T3D_dmg_Label[I_var]);
		T3D_dmg_Label[I_var] = Text3D:INVALID_3DTEXT_ID;
	}

	for(new i; i < 80; i++)
	{
		I_dmg_Damages[I_var][i][0] = -1;
		I_dmg_Damages[I_var][i][1] = -1;
		I_dmg_Damages[I_var][i][2] = -1;
	}

	new
		S_string[144];

	format(S_string, 144, "> Doplnil si ivot hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti doplnil ivot!", GetPlayerNameEx(playerid, NO_MASK));
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);
	FormatLog(log_type_admin, "%s(%s) doplnil zivot %s(%s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var));
	FormatWarn(playerid, "AdmCmd:", COLOR_ADMINCMD, "%s doplnil ivot hráèovi %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	return 1;
}

YCMD:full(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 1)
		return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params,"d",I_var))
		return SendClientSyntax(playerid, "/full [id]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	SetPlayerHealth(I_var, 100);
	if(!IsPlayerInAnyVehicle(I_var)) ClearAnimations(I_var, 1);
	else
	{
	    new Seat = GetPlayerVehicleSeat(I_var);
		PutPlayerInVehicleEx(I_var, GetPlayerVehicleID(I_var), Seat);
	}

	ex_SetPlayerHunger(I_var, 100.0);

	B_dmg_IsInDS[I_var] = false;

	B_isLegWounded[I_var] = false;

	unStoppableAnim[I_var] = false;

	B_informDeath[I_var] = false;

	isBleeding[I_var] = false;

	TogglePlayerControllable(I_var, 1);

	if(T_timer_deathTimer[I_var] != -1) KillTimer(T_timer_deathTimer[I_var]);
	T_timer_deathTimer[I_var] = -1;

	if(IsValidDynamic3DTextLabel(T3D_dmg_Label[I_var]))
	{
		DestroyDynamic3DTextLabel(T3D_dmg_Label[I_var]);
		T3D_dmg_Label[playerid] = Text3D:INVALID_3DTEXT_ID;
	}

	for(new i; i < 80; i++)
	{
		I_dmg_Damages[I_var][i][0] = -1;
		I_dmg_Damages[I_var][i][1] = -1;
		I_dmg_Damages[I_var][i][2] = -1;
	}

	new
		S_string[144];

	format(S_string, 144, "> Doplnil si ivot a hlad hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti doplnil ivot a hlad!", GetPlayerNameEx(playerid, NO_MASK));
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);
	FormatLog(log_type_admin, "%s(%s) doplnil zivot a hlad %s(%s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var));
	FormatWarn(playerid, "AdmCmd:", COLOR_ADMINCMD, "%s doplnil ivot a hlad hráèovi %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	return 1;
}

YCMD:setpeniaze(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 5)
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		I_var1,dovodex[144];

	if(sscanf(params,"dds[144]",I_var,I_var1,dovodex))
		return SendClientSyntax(playerid, "/setpeniaze [id] [poèet peòazí] [dôvod]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	ex_SetPlayerMoney(I_var, I_var1);

	new
		S_string[144];

	format(S_string, 144, "> Nastavil si peniaze hráèovi %s na %d$!", GetPlayerNameEx(I_var, NO_MASK), I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil peniaze na %d$!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) nastavil peniaze %s(%s) na %d$ (dôvod: %s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1, dovodex);
    FormatWarnEx(playerid, 5, "AdmCmd:", COLOR_ADMINCMD, "%s nastavil peniaze %s na %d$ (dovod: %s).", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), I_var1, dovodex);
	return 1;
}

YCMD:datkredity(playerid, params[], help)
{

	if(!IsPlayerAdmin(playerid))
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		I_var1,dovodex[144];

	if(sscanf(params,"dds[144]",I_var,I_var1,dovodex))
		return SendClientSyntax(playerid, "/datkredity [id] [poèet kreditov] [dôvod]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	g_I_mince[I_var] += I_var1;

	new
		S_string[144];

	format(S_string, 144, "> Dal si hráèovi %s %d kreditov!", GetPlayerNameEx(I_var, NO_MASK), I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti dal %d kreditov!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s dal hráèovi %s(%s) %d kreditov (dovod: %s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1, dovodex);
    FormatWarnEx(playerid, 6, "AdmCmd:", COLOR_ADMINCMD, "%s dal hráèovi %s %d kreditov (dôvod: %s).", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), I_var1, dovodex);
	return 1;
}

YCMD:datpeniaze(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4) return SendClientCantUseCommand(playerid);

	new
		I_var,
		Float:I_var1,dovodex[144];

	if(sscanf(params,"dfs[144]",I_var,I_var1,dovodex))
		return SendClientSyntax(playerid, "/datpeniaze [id] [poèet peòazí] [dôvod]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	ex_GivePlayerMoney(I_var, I_var1);
	money_admin[I_var]+=floatround(I_var1,floatround_round);

	new
		S_string[144];

	format(S_string, 144, "> Dal si hráèovi %s %.2f$!", GetPlayerNameEx(I_var, NO_MASK), I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti dal %.2f$!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) dal hracovi %s(%s) %.2f$ (dovod: %s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1, dovodex);
    FormatWarnEx(playerid, 5, "AdmCmd:", COLOR_ADMINCMD, "%s dal hráèovi %s %.2f$ (dôvod: %s).", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), I_var1, dovodex);
	return 1;
}

YCMD:gdatpeniaze(playerid, params[], help)
{

    if(!IsPlayerAdmin(playerid))
		return SendClientCantUseCommand(playerid);

	new
		Float:I_var1,dovodex[144];

	if(sscanf(params,"fs[144]",I_var1,dovodex))
		return SendClientSyntax(playerid, "/gdatpeniaze [poèet peòazí] [dôvod]");

	foreach( new i : Player )
	{
		ex_GivePlayerMoney(i, I_var1);
		money_admin[i]+=floatround(I_var1,floatround_round);
	}
	
	new
		S_finalString[128 + 24 + 12],
		titul[32] = "Hrac";



	switch(GetPlayerAdminLevel(playerid))
	{
	    case 1: format(titul, 32, "Helper");
	    case 2: format(titul, 32, "Moderator");
	    default: format(titul, 32, "Administrator");
	}

	format(S_finalString, sizeof(S_finalString), "(( %s %s dal vetkým hráèom %.2f$! ))", titul, GetPlayerNameEx(playerid, USE_PLAYERID), I_var1);

	SendClientMessageToAll(COLOR_ADMINCMD, S_finalString);
	
	FormatLog(log_type_admin, "%s(%s) dal vsetkym hracom %.2f$ (dovod: %s).", ReturnName(playerid), ReturnIP(playerid), I_var1, dovodex);
    FormatWarnEx(playerid, 5, "AdmCmd:", COLOR_ADMINCMD, "%s dal vsetkym hracom %.2f$ (dôvod: %s).", GetPlayerNameEx(playerid, USE_PUREIDNAME), I_var1, dovodex);
	return 1;
}

YCMD:datnaboje(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4) return SendClientCantUseCommand(playerid);

	new
		I_var,
		I_var1, dovodex[144];

	if(sscanf(params,"dds[144]",I_var,I_var1,dovodex))
		return SendClientSyntax(playerid, "/datnaboje [id] [poèet]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	SetPlayerInventoryItem(I_var, inv_naboje, GetPlayerInventoryItem(I_var, inv_naboje) + I_var1);

	new
		S_string[144];

	format(S_string, 144, "> Dal si hráèovi %s %d nábojov!", GetPlayerNameEx(I_var, NO_MASK), I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti dal %d nábojov!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) dal hráèovi %s(%s) %d nábojov (dovod: %s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1,dovodex);
    FormatWarnEx(playerid, 5, "AdmCmd:", COLOR_ADMINCMD, "%s dal hráèovi %s %d nábojov (dôvod: %s).", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), I_var1,dovodex);
	return 1;
}

YCMD:datskateboard(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4) return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params,"d",I_var))
		return SendClientSyntax(playerid, "/datskateboard [id]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	SetPlayerInventoryItem(I_var, inv_skateboard, !GetPlayerInventoryItem(I_var, inv_skateboard));

	new
		S_string[144];

	format(S_string, 144, "> Dal/vzal si hráèovi %s skateboard!", GetPlayerNameEx(I_var, NO_MASK));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti dal/vzal skateboard!", GetPlayerNameEx(playerid, NO_MASK));
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s dal/vzal hráèovi %s(%s) skateboard.", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var));
    FormatWarnEx(playerid, 5, "AdmCmd:", COLOR_ADMINCMD, "%s dal/vzal hráèovi %s skateboard.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	return 1;
}

YCMD:setcislo(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		I_var1;

	if(sscanf(params,"dd",I_var,I_var1))
		return SendClientSyntax(playerid, "/setcislo [id] [èíslo]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	SetPlayerInventoryItem(I_var, inv_simcard, I_var1);

	new
		S_string[144];

	format(S_string, 144, "> Nastavil si hráèovi %s telefónne èíslo %d!", GetPlayerNameEx(I_var, NO_MASK), I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil telefónne èíslo %d!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s nastavil hráèovi %s(%s) telefónne èíslo %d.", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1);
    FormatWarnEx(playerid, 6, "AdmCmd:", COLOR_ADMINCMD, "%s nastavil hráèovi %s telefónne èíslo %d.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), I_var1);
	return 1;
}

YCMD:toggleplate(playerid, params[], help)
{

    new
		vid = -1,
		Float:newdist = 0.0,
		Float:distance = 3.1,
		Float:pos[3],
		Float:ppos[3];

	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

	foreach ( new i : Vehicle ) {
		if(!IsValidVehicle(i)) continue;
		if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
		GetVehiclePos(i, pos[0], pos[1], pos[2]);

		newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

		if(newdist < distance) {
			vid = i;
			distance = newdist;
			continue;
		}
	}
	if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

	if(GetVehicleFaction(vid) != GetPlayerFaction(playerid) && strcmp(vEnum[vid][v_Owner], ReturnName(playerid), true) && strcmp(vEnum[vid][v_SecOwner], ReturnName(playerid), true) && GetPlayerAdminLevel(playerid) <3)
	    return SendError(playerid, "S týmto vozidlom nemôe manipulova!");

    if(GetVehicleFaction(vid) == GetPlayerFaction(playerid) && GetVehicleFaction(vid) != 0 && GetPlayerFactionRank(playerid) < 5 && GetPlayerAdminLevel(playerid) < 3)
  		return SendError(playerid, "S týmto vozidlom nemôe manipulova!");

	new
	    query[256]
	;

	if(vEnum[vid][v_SPZDown] == 0)
		vEnum[vid][v_SPZDown]=1,
		SCFM(playerid, COLOR_GREY, "> Dal si dole SPZ z auta! Zmenu uvidí po zaparkovaní a odparkovaní.");
	else
	    vEnum[vid][v_SPZDown]=0,
		SCFM(playerid, COLOR_GREY, "> Dal si SPZ spä na auto! Zmenu uvidí po zaparkovaní a odparkovaní.");

	mysql_format(MYSQL, query, sizeof query, "UPDATE faction_vehicles SET SPZDown = '%d' WHERE SPZ = '%e'", vEnum[vid][v_SPZDown], vEnum[vid][v_SPZ]);
	mysql_tquery(MYSQL, query);

	mysql_format(MYSQL, query, sizeof query, "UPDATE char_vehicles SET SPZDown = '%d' WHERE SPZ = '%e'", vEnum[vid][v_SPZDown], vEnum[vid][v_SPZ]);
	mysql_tquery(MYSQL, query);

	if(vEnum[vid][v_SPZDown] == 1)
		SetVehicleNumberPlate(vid, "   __ _");
	else
	    SetVehicleNumberPlate(vid, vEnum[vid][v_SPZ]);

	foreach( new i : Player )
	{
	    if(!IsPlayerInAnyVehicle(i))
	        continue;

		if(GetPlayerVehicleID(i) != vid)
		    continue;

		RemovePlayerFromVehicle(i);
	}

	new
	    Float:X, Float:Y, Float:Z;

	GetVehiclePos(vid, X, Y, Z);
	SetTimerEx("PushVehicleBack", 1000, false, "ifffd", vid, 1087.955, 1924.28, 10.81, 354);
    SetTimerEx("PushVehicleBack", 3050, false, "ifffd", vid, X, Y, Z, GetVehicleVirtualWorld(vid));

	return 1;
}

YCMD:zmenitspz(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		I_var1[32];

	if(sscanf(params,"ds[32]",I_var,I_var1))
		return SendClientSyntax(playerid, "/setcislo [id] [nová spz]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	if(!IsPlayerInAnyVehicle(I_var))
	    return SendError(playerid, "Tento hráè nie je v iadnom vozidle!");

	new
	    query[256],
	    Cache:cache,
	    pocet;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM char_vehicles WHERE SPZ = '%e'", I_var1);
	cache = mysql_query(MYSQL, query);

	pocet = cache_num_rows();

	cache_delete(cache);

	if(pocet > 0)
	    return SendError(playerid, "Vozidlo s touto SPZ u existuje!");

    mysql_format(MYSQL, query, sizeof query, "SELECT * FROM faction_vehicles WHERE SPZ = '%e'", I_var1);
	cache = mysql_query(MYSQL, query);

	pocet = cache_num_rows();

	cache_delete(cache);

	if(pocet > 0)
	    return SendError(playerid, "Vozidlo s touto SPZ u existuje!");

	mysql_format(MYSQL, query, sizeof query, "UPDATE faction_vehicles SET SPZ = '%e' WHERE SPZ = '%e'", I_var1, vEnum[GetPlayerVehicleID(I_var)][v_SPZ]);
	mysql_query(MYSQL, query, false);

	mysql_format(MYSQL, query, sizeof query, "UPDATE char_vehicles SET SPZ = '%e' WHERE SPZ = '%e'", I_var1, vEnum[GetPlayerVehicleID(I_var)][v_SPZ]);
	mysql_query(MYSQL, query, false);

	SetVehicleNumberPlate(GetPlayerVehicleID(I_var), I_var1);
	format(vEnum[GetPlayerVehicleID(I_var)][v_SPZ], 24, I_var1);

	foreach( new i : Player )
	{
	    if(!IsPlayerInAnyVehicle(i))
	        continue;

		if(GetPlayerVehicleID(i) != GetPlayerVehicleID(I_var))
		    continue;

		RemovePlayerFromVehicle(i);
	}

	new
	    Float:X, Float:Y, Float:Z;

	GetVehiclePos(GetPlayerVehicleID(I_var), X, Y, Z);
	SetTimerEx("PushVehicleBack", 1000, false, "ifffd", GetPlayerVehicleID(I_var), 1087.955, 1924.28, 10.81, 354);
    SetTimerEx("PushVehicleBack", 3050, false, "ifffd", GetPlayerVehicleID(I_var), X, Y, Z, GetVehicleVirtualWorld(GetPlayerVehicleID(I_var)));

	new
		S_string[144];

	format(S_string, 144, "> Nastavil si hráèovi %s poznávaciu znaèku %s!", GetPlayerNameEx(I_var, NO_MASK), I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil poznávaciu znaèku vozidla '%s'! Zmenu uvidí po zaparkovaní a odparkovaní auta.", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s nastavil hráèovi %s(%s) poznavaciu znacku vozidla '%s'.", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1);
    FormatWarnEx(playerid, 5, "AdmCmd:", COLOR_ADMINCMD, "%s nastavil hráèovi %s poznávaciu znaèku vozidla '%s'.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), I_var1);
	return 1;
}

function PushVehicleBack(vehicleid, Float:X, Float:Y, Float:Z, vw)
{
	SetVehiclePos(vehicleid, X, Y, Z);
	SetVehicleVirtualWorld(vehicleid, vw);
	return 1;
}

YCMD:setbany(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 5)
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		I_var1;

	if(sscanf(params,"dd",I_var,I_var1))
		return SendClientSyntax(playerid, "/setbany [id] [poèet banov]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	if(I_var1 < 0)
	    return SendError(playerid, "Poèet banov nemôe by mení ako nula!");

	stats_Ban[I_var] = I_var1;

	new
		S_string[144];

	format(S_string, 144, "> Nastavil si poèet banov hráèovi %s na %d!", GetPlayerNameEx(I_var, NO_MASK), I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil poèet banov na %d!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) nastavil poèet banov %s(%s) na %d.", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1);
    FormatWarnEx(playerid, 5, "AdmCmd:", COLOR_ADMINCMD, "%s nastavil bany %s na %d.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), I_var1);
	return 1;
}

YCMD:setkicky(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 5)
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		I_var1;

	if(sscanf(params,"dd",I_var,I_var1))
		return SendClientSyntax(playerid, "/setkicky [id] [poèet kickov]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	if(I_var1 < 0)
	    return SendError(playerid, "Poèet kickov nemôe by mení ako nula!");

	stats_Kick[I_var] = I_var1;

	new
		S_string[144];

	format(S_string, 144, "> Nastavil si poèet kickov hráèovi %s na %d!", GetPlayerNameEx(I_var, NO_MASK), I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil kickov banov na %d!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) nastavil poèet kickov %s(%s) na %d.", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1);
    FormatWarnEx(playerid, 5, "AdmCmd:", COLOR_ADMINCMD, "%s nastavil kicky %s na %d.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), I_var1);
	return 1;
}

YCMD:setjaily(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 5)
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		I_var1;

	if(sscanf(params,"dd",I_var,I_var1))
		return SendClientSyntax(playerid, "/setjaily [id] [poèet jailov]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	if(I_var1 < 0)
	    return SendError(playerid, "Poèet jailov nemôe by mení ako nula!");

	stats_Jail[I_var] = I_var1;

	new
		S_string[144];

	format(S_string, 144, "> Nastavil si poèet jailov hráèovi %s na %d!", GetPlayerNameEx(I_var, NO_MASK), I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil jailov banov na %d!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) nastavil poèet jailov %s(%s) na %d.", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1);
    FormatWarnEx(playerid, 5, "AdmCmd:", COLOR_ADMINCMD, "%s nastavil jaily %s na %d.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), I_var1);
	return 1;
}

YCMD:setzivot(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 2)
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		Float:I_var1 = 100.0;

	if(sscanf(params,"dF(100.0)",I_var,I_var1))
		return SendClientSyntax(playerid, "setzivot [id] <poèet percent>");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	if(I_var1 < 0.1 || I_var1 > 100.0)
	    return SendError(playerid, "Poèet percent nemôe by mení ani väèí ako 0.1 a 100!");

	SetPlayerHealth(I_var, I_var1);

	if(I_var1 > 90)
	{

	    B_isLegWounded[I_var] = false;

		if(!IsPlayerInAnyVehicle(I_var)) ClearAnimations(I_var, 1);
		{
		    new Seat = GetPlayerVehicleSeat(I_var);
			PutPlayerInVehicleEx(I_var, GetPlayerVehicleID(I_var), Seat);
		}

		B_dmg_IsInDS[I_var] = false;
		unStoppableAnim[I_var] = false;
		B_informDeath[I_var] = false;

		TogglePlayerControllable(I_var, 1);

		if(T_timer_deathTimer[I_var] != -1) KillTimer(T_timer_deathTimer[I_var]);
		T_timer_deathTimer[I_var] = -1;

		if(IsValidDynamic3DTextLabel(T3D_dmg_Label[playerid]))
		{
			DestroyDynamic3DTextLabel(T3D_dmg_Label[I_var]);
			T3D_dmg_Label[I_var] = Text3D:INVALID_3DTEXT_ID;
		}

		for(new i; i < 80; i++)
		{
			I_dmg_Damages[I_var][i][0] = -1;
			I_dmg_Damages[I_var][i][1] = -1;
			I_dmg_Damages[I_var][i][2] = -1;
		}
		isBleeding[I_var] = false;
	}

	new
		S_string[144];

	format(S_string, 144, "> Nastavil si ivot hráèovi %s na %.1f percent!", GetPlayerNameEx(I_var, NO_MASK), I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil ivot na %.1f percent!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) nastavil ivot %s(%s) na %.1f%%.", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1);
    FormatWarnEx(playerid, 2, "AdmCmd:", COLOR_ADMINCMD, "%s nastavil ivot hráèovi %s na %.1f%%.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), I_var1);
	return 1;
}

YCMD:setvhp(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 3)
		return SendClientCantUseCommand(playerid);

	new
		I_var[30],
		Float:I_var1 = 100.0;

	if(sscanf(params,"s[30] F(100.0)",I_var,I_var1))
		return SendClientSyntax(playerid, "/setvhp [spz/toto] <poèet percent>");

	if(I_var1 < 250.1 || I_var1 > 99999.9)
	    return SendError(playerid, "Poèet percent nemôe by mení ani väèí ako 250.1 a 99999.9!");

	new vId = -1;

	if(strcmp(I_var, "toto", false))
	{

		new bool:vFound = false;

		foreach( new vehicleid : Vehicle )
		{
		    if(!IsValidVehicle(vehicleid))
		        continue;

			if(!strlen(vEnum[vehicleid][v_SPZ]))
			    continue;

			if(strcmp(vEnum[vehicleid][v_SPZ], I_var, false))
			    continue;

			vFound = true;
			vId = vehicleid;

			SetVehicleHealth(vehicleid, I_var1);
		}

		if(vFound == false)
		    return SendError(playerid, "Vozidlo s touto znaèkou neexistuje!");
	}
	else
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	        return SendError(playerid, "Nie si v iadnom vozidle!");

		vId = GetPlayerVehicleID(playerid);

        SetVehicleHealth(GetPlayerVehicleID(playerid), I_var1);
	}

	new
		S_string[144];

	format(S_string, 144, "> Nastavil si ivot vozidla %s(%s) na %.1f percent!", GetVehicleName(vId), vEnum[vId][v_SPZ], I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) nastavil zivot vozidla %s(%s) na %.1f%%.", ReturnName(playerid), ReturnIP(playerid), GetVehicleName(vId), vEnum[vId][v_SPZ], I_var1);
    FormatWarnEx(playerid, 3, "AdmCmd:", COLOR_ADMINCMD, "%s nastavil ivot vozidla %s(%s) na %.1f%%.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetVehicleName(vId), vEnum[vId][v_SPZ], I_var1);
	return 1;
}

YCMD:setmaxvhp(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 6)
		return SendClientCantUseCommand(playerid);

	new
		I_var[30],
		Float:I_var1 = 100.0;

	if(sscanf(params,"s[30] F(100.0)",I_var,I_var1))
		return SendClientSyntax(playerid, "/setmaxvhp [spz/toto] <poèet percent>");

	if(I_var1 < 1000.0 || I_var1 > 99999.9)
	    return SendError(playerid, "Poèet percent nemôe by mení ani väèí ako 1000.0 a 99999.9!");

	new vId = -1;

	if(strcmp(I_var, "toto", false))
	{

		new bool:vFound = false;

		foreach( new vehicleid : Vehicle )
		{
		    if(!IsValidVehicle(vehicleid))
		        continue;

			if(!strlen(vEnum[vehicleid][v_SPZ]))
			    continue;

			if(strcmp(vEnum[vehicleid][v_SPZ], I_var, false))
			    continue;

			vFound = true;
			vId = vehicleid;

			vEnum[vehicleid][v_def_Health] = I_var1;
		}

		if(vFound == false)
		    return SendError(playerid, "Vozidlo s touto znaèkou neexistuje!");
	}
	else
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	        return SendError(playerid, "Nie si v iadnom vozidle!");

		vId = GetPlayerVehicleID(playerid);

        vEnum[vId][v_def_Health] = I_var1;
	}

	new
		S_string[144];

	format(S_string, 144, "> Nastavil si maximálny ivot vozidla %s(%s) na %.1f percent!", GetVehicleName(vId), vEnum[vId][v_SPZ], I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) nastavil maximalny zivot vozidla %s(%s) na %.1f%%.", ReturnName(playerid), ReturnIP(playerid), GetVehicleName(vId), vEnum[vId][v_SPZ], I_var1);
    FormatWarnEx(playerid, 6, "AdmCmd:", COLOR_ADMINCMD, "%s nastavil maximálny ivot vozidla %s(%s) na %.1f%%.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetVehicleName(vId), vEnum[vId][v_SPZ], I_var1);
	return 1;
}

YCMD:setvesta(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 4)
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		Float:I_var1 = 100.0;

	if(sscanf(params,"dF(100.0)",I_var,I_var1))
		return SendClientSyntax(playerid, "/setvesta [id] <poèet percent>");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	if(I_var1 < 0.0 || I_var1 > 100.0)
	    return SendError(playerid, "Poèet percent nemôe by mení ani väèí ako 0.0 a 100!");

	SetPlayerArmour(I_var, I_var1);

	new
		S_string[144];

	format(S_string, 144, "> Nastavil si vestu hráèovi %s na %.1f percent!", GetPlayerNameEx(I_var, NO_MASK), I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil vestu na %.1f percent!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatWarnEx(playerid, 4, "AdmCmd:", COLOR_ADMINCMD, "%s nastavil vestu hráèovi %s na %.1f%%!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), I_var1);
	FormatLog(log_type_admin, "%s(%s) nastavil vestu %s(%s) na %.1f%%.", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1);
	return 1;
}

YCMD:feed(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 1)
		return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params,"d",I_var))
		return SendClientSyntax(playerid, "/feed [id]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	ex_SetPlayerHunger(I_var, 100);

	new
		S_string[144];

	format(S_string, 144, "> Doplnil si hlad hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti doplnil hlad!", GetPlayerNameEx(playerid, NO_MASK));
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);
	FormatLog(log_type_admin, "%s(%s) doplnil hlad %s(%s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var));
	FormatWarn(playerid, "AdmCmd:", COLOR_ADMINCMD, "%s doplnil hlad hráèovi %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	return 1;
}

YCMD:sethlad(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 2)
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		Float:I_var1 = 100.0;

	if(sscanf(params,"dF(100.0)",I_var,I_var1))
		return SendClientSyntax(playerid, "/sethlad [id] <poèet percent>");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	if(I_var1 < 0 || I_var1 > 100.0)
	    return SendError(playerid, "Poèet percent nemôe by mení ani väèí ako 0 a 100!");

	ex_SetPlayerHunger(I_var, I_var1);

	new
		S_string[144];

	format(S_string, 144, "> Nastavil si hlad hráèovi %s na %.1f percent!", GetPlayerNameEx(I_var, NO_MASK), I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil hlad na %.1f percent!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);
	FormatLog(log_type_admin, "%s(%s) nastavil hlad %s(%s) na %.1f%%.", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1);
	FormatWarnEx(playerid, 2, "AdmCmd:", COLOR_ADMINCMD, "%s nastavil hlad hráèovi %s na %.1f%%!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), I_var1);
	return 1;
}

YCMD:setloc(playerid,params[],help) {
	new Float:var,Float:var1,Float:var2,var3,var4;
	if(GetPlayerAdminLevel(playerid) > 3) {
	    if(sscanf(params,"fffdd",var,var1,var2,var3,var4)) return SendClientSyntax(playerid, "/setloc [x] [y] [z] <virtualworld> <interier>");
	    else {
			Warp(playerid, var,var1,var2,0,var3,var4);
			SendSuccess(playerid, "Bol si teleportovaný!");
	    }
	} else SendClientCantUseCommand(playerid);
	return 1;
}

YCMD:getloc(playerid, params[], help) {
    if(GetPlayerStaffLevel(playerid) > 3) {
		new Float:X, Float:Y, Float:Z,Float:A,msg[145];
		GetPlayerPos(playerid,X,Y,Z);
		if(!IsPlayerInAnyVehicle(playerid)) GetPlayerFacingAngle(playerid,A);
		else GetVehicleZAngle(GetPlayerVehicleID(playerid),A);
		format(msg,125,"> CoordX: %f - CoordY: %f - CoordZ: %f - Angle: %f",X,Y,Z,A);
		SendClientMessage(playerid, COLOR_WHITE, msg);
		format(msg,125,"> InteriorID: %d - VirtualWorld: %d",GetPlayerInterior(playerid),GetPlayerVirtualWorld(playerid));
		SendClientMessage(playerid, COLOR_WHITE, msg);
    } else SendClientCantUseCommand(playerid);
	return 1;
}

YCMD:fdveci(playerid, params[], help)
{
	if(GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

    new
		vid = -1,
		Float:newdist = 0.0,
		Float:distance = 3.1,
		Float:pos[3],
		Float:ppos[3];

	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

	foreach ( new i : Vehicle ) {
		if(!IsValidVehicle(i)) continue;
		if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;

		GetVehiclePos(i, pos[0], pos[1], pos[2]);

		newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

		if(newdist < distance) {
			vid = i;
			distance = newdist;
			continue;
		}
	}
	if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

	if(GetVehicleModel(vid) != 407 && GetVehicleModel(vid) != 544)
	    return SendError(playerid, "Nie si pri hasièskom vozidle!");

    ShowPlayerFDLocker(playerid);

	return 1;
}

YCMD:satna(playerid, params[], help)
{

    if(IsPlayerInDynamicMenu(playerid, menut_locker_sd))
	{
	    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    	return SendClientCantUseCommand(playerid);

	    return ShowPlayerSDLocker(playerid);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_locker_fd))
	{
	    if(GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE)
	    	return SendClientCantUseCommand(playerid);

	    return ShowPlayerFDLocker(playerid);
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}

function timer_SDLabBlood(menuid)
{
    menuEnum[menuid][menu_blood_STADIUM] ++;

    if(menuEnum[menuid][menu_blood_STADIUM] >= 20)
    {
        KillTimer(menuEnum[menuid][menu_blood_TIMER]);

        new
			labelString[256],
			ownername[ 30 ],
			query[ 128 ],
			Cache:cache;

		mysql_format(MYSQL, query, 128, "SELECT * FROM char_trestneciny WHERE Username = '%e'", menuEnum[menuid][menu_blood_OWNER]);
		cache = mysql_query(MYSQL, query);

		if(cache_num_rows() < 1)
		    format(ownername, sizeof ownername, "iadna zhoda");
		else
		    format(ownername, sizeof ownername, "%s", str_replace("_", " ", menuEnum[menuid][menu_blood_OWNER]));
		cache_delete(cache);
        format(labelString, 256, "{c9c9c9}[ Laboratórium {c9c9c9}]{ffffff}\nDokonèené\n{ffffff}Výsledok: %s{ffffff}\n\n/vybratkrv", ownername);

        UpdateDynamic3DTextLabelText(menuEnum[menuid][menu_LABEL], -1, labelString);
    }
    else
	{
	    new
			labelString[256],
			label[48] = "{53ea7c}",
			I_pocet = 0;

		for(new i; i < menuEnum[menuid][menu_blood_STADIUM]+1; i++)
		{
		    if(i > menuEnum[menuid][menu_blood_STADIUM])
		        break;
			if(I_pocet + 1 > 20)
			    break;

			I_pocet ++;

		    strcat(label, "|");
		}

		strcat(label, "{d66d6d}");

		for(new i = I_pocet; i < 20; i++)
		{
		    strcat(label, "|");
		}

        format(labelString, 256, "{c9c9c9}[ Laboratórium {c9c9c9}]{ffffff}\nPracuje ...\n{ffffff}[%s{ffffff}]{ffffff}", label);

        UpdateDynamic3DTextLabelText(menuEnum[menuid][menu_LABEL], -1, labelString);
	}
	return 1;
}

YCMD:vybratkrv(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_sd_lab))
	{
		if(GetPlayerAdminLevel(playerid) < 3 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
		    return SendClientCantUseCommand(playerid);

	   	if(GetPlayerAdminLevel(playerid) < 3 && !IsPlayerWorking(playerid))
		    return SendClientCantUseCommand(playerid);

		new
		    menuid = GetPlayerDynamicMenu(playerid);

		if(menuEnum[menuid][menu_blood_PREBIEHA] == false)
		    return SendError(playerid, "Laboratórium nepracuje!");

        if(menuEnum[menuid][menu_blood_STADIUM] < 20)
		    return SendError(playerid, "Laboratórium nedokonèilo prácu!");

		menuEnum[menuid][menu_blood_STADIUM] = 0;
		menuEnum[menuid][menu_blood_PREBIEHA] = false;

		SendSuccess(playerid, "Vzorka krvi vybraná z laborky!");

		new
			labelString[256];

        format(labelString, 256, "{c9c9c9}[ Laboratórium {c9c9c9}]{ffffff}\n\n\n\n/vlozitkrv");

        UpdateDynamic3DTextLabelText(menuEnum[menuid][menu_LABEL], -1, labelString);

		return 1;

	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}

YCMD:vlozitkrv(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_sd_lab))
	{
		if(GetPlayerAdminLevel(playerid) < 3 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
		    return SendClientCantUseCommand(playerid);

	   	if(GetPlayerAdminLevel(playerid) < 3 && !IsPlayerWorking(playerid))
		    return SendClientCantUseCommand(playerid);

		if(GetPlayerInventoryItem(playerid, inv_blood) == 0)
		    return SendError(playerid, "Nemá vzorku krvi!");

		new
		    menuid = GetPlayerDynamicMenu(playerid);

		if(menuEnum[menuid][menu_blood_PREBIEHA] == true)
		    return SendError(playerid, "Laboratórium u pracuje!");

		format(menuEnum[menuid][menu_blood_OWNER], 30, bloodInventory[playerid]);
		menuEnum[menuid][menu_blood_STADIUM] = 1;
		menuEnum[menuid][menu_blood_PREBIEHA] = true;
		menuEnum[menuid][menu_blood_TIMER] = SetTimerEx("timer_SDLabBlood", 2*8*1000, true, "i", menuid);

		SetPlayerInventoryItem(playerid, inv_blood, 0);
		format(bloodInventory[playerid], 30, "");

		SendSuccess(playerid, "Vzorka krvi vloená do laborky!");

		new
			labelString[256],
			label[48] = "{53ea7c}|{d66d6d}|||||||||||||||||||";

        format(labelString, 256, "{c9c9c9}[ Laboratórium {c9c9c9}]{ffffff}\nPracuje ...\n{ffffff}[%s{ffffff}]{ffffff}", label);

        UpdateDynamic3DTextLabelText(menuEnum[menuid][menu_LABEL], -1, labelString);

		return 1;

	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}

PlayerJoinJob(playerid, job, leave = 0)
{

	if(leave == 0)
	{
	    if(job == JOB_SMETIAR)
	    {
		    if(GetPlayerFaction(playerid) != 0)
		        return SendError(playerid, "U si niekde zamestnaný!");

			SetPlayerFaction(playerid, 50);
			SetPlayerFactionTitle(playerid, "Smetiar");
		    SetPlayerFactionRank(playerid, 1);
		    SetPlayerFactionBadge(playerid, 0);

		    SendSuccess(playerid, "Zamestnal si sa ako Smetiar! Pre zaèatie práce poui /pracovat.");
	    }
	    else if(job == JOB_SWEEPER)
	    {
		    if(GetPlayerFaction(playerid) != 0)
		        return SendError(playerid, "U si niekde zamestnaný!");

			SetPlayerFaction(playerid, 51);
			SetPlayerFactionTitle(playerid, "Zamestnanec");
		    SetPlayerFactionRank(playerid, 1);
		    SetPlayerFactionBadge(playerid, 0);

		    SendSuccess(playerid, "Zamestnal si sa ako Èistiè ulíc! Pre zaèatie práce poui /pracovat.");
	    }
	    else if(job == JOB_PIZZAMAN)
	    {
		    if(GetPlayerFaction(playerid) != 0)
		        return SendError(playerid, "U si niekde zamestnaný!");

			SetPlayerFaction(playerid, 52);
			SetPlayerFactionTitle(playerid, "Zamestnanec");
		    SetPlayerFactionRank(playerid, 1);
		    SetPlayerFactionBadge(playerid, 0);

		    SendSuccess(playerid, "Zamestnal si sa ako Rozváaè pizze! Pre zaèatie práce poui /pracovat.");
	    }
	    else if(job == JOB_PREPRAVA)
	    {
		    if(GetPlayerFaction(playerid) != 0)
		        return SendError(playerid, "U si niekde zamestnaný!");

			SetPlayerFaction(playerid, 53);
			SetPlayerFactionTitle(playerid, "Zamestnanec");
		    SetPlayerFactionRank(playerid, 1);
		    SetPlayerFactionBadge(playerid, 0);

		    SendSuccess(playerid, "Zamestnal si sa ako pracovník prepravnej spoloènosti! Pre zaèatie práce poui /pracovat.");
	    }
	}
	else
	{
	    if(job == JOB_SMETIAR)
	    {
		    if(GetPlayerFaction(playerid) != 50)
		        return SendError(playerid, "Tu nie si zamestnaný!");

			SetPlayerFaction(playerid, 0);
			SetPlayerFactionTitle(playerid, "Nic");
		    SetPlayerFactionRank(playerid, 0);
		    SetPlayerFactionBadge(playerid, 0);

		    SendSuccess(playerid, "Odiiel si zo zamestnania Smetiar!");
	    }
	    else if(job == JOB_SWEEPER)
	    {
		    if(GetPlayerFaction(playerid) != 51)
		        return SendError(playerid, "Tu nie si zamestnaný!");

			SetPlayerFaction(playerid, 0);
			SetPlayerFactionTitle(playerid, "Nic");
		    SetPlayerFactionRank(playerid, 0);
		    SetPlayerFactionBadge(playerid, 0);

		    SendSuccess(playerid, "Odiiel si zo zamestnania Èistiè ulíc!");
	    }
	    else if(job == JOB_PIZZAMAN)
	    {
		    if(GetPlayerFaction(playerid) != 52)
		        return SendError(playerid, "Tu nie si zamestnaný!");

			SetPlayerFaction(playerid, 0);
			SetPlayerFactionTitle(playerid, "Nic");
		    SetPlayerFactionRank(playerid, 0);
		    SetPlayerFactionBadge(playerid, 0);

		    SendSuccess(playerid, "Odiiel si zo zamestnania Rozváaè pizze!");
	    }
	    else if(job == JOB_PREPRAVA)
	    {
		    if(GetPlayerFaction(playerid) != 53)
		        return SendError(playerid, "Tu nie si zamestnaný!");

			SetPlayerFaction(playerid, 0);
			SetPlayerFactionTitle(playerid, "Nic");
		    SetPlayerFactionRank(playerid, 0);
		    SetPlayerFactionBadge(playerid, 0);

		    SendSuccess(playerid, "Odiiel si zo zamestnania pracovník prepravnej spoloènosti!");
	    }
	}

	return 1;
}

YCMD:zamestnat(playerid, params[], help)
{

	new query[128], Cache:cache, pocet;
	mysql_format(MYSQL, query, 128, "SELECT * FROM char_trestneciny WHERE Username = '%e'", ReturnName(playerid));
	cache = mysql_query(MYSQL, query);
	pocet = cache_num_rows();
	cache_delete(cache);
	if(pocet >= 3)
	    return SendError(playerid, "My vandalov a trestancov nezamestnavame!");

    if(IsPlayerInDynamicMenu(playerid, menut_zamestnat_smetiar))
	{
	    return PlayerJoinJob(playerid, JOB_SMETIAR);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_zamestnat_sweeper))
	{
	    return PlayerJoinJob(playerid, JOB_SWEEPER);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_zamestnat_pizzaman))
	{
	    return PlayerJoinJob(playerid, JOB_PIZZAMAN);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_zamestnat_preprava))
	{
	    return PlayerJoinJob(playerid, JOB_PREPRAVA);
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:vypoved(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_zamestnat_smetiar))
	{
		

	    return PlayerJoinJob(playerid, JOB_SMETIAR, 1);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_zamestnat_sweeper))
	{
	
	    if(Sweeper::DoingJob[playerid] == true)
	        return SendError(playerid, "Nemôe poda výpoveï, keï pracuje! Zru aktuálnu prácu príkazom /stopjob.");

	    return PlayerJoinJob(playerid, JOB_SWEEPER, 1);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_zamestnat_pizzaman))
	{
	
	    if(Pizza::DoingJob[playerid] == true)
	        return SendError(playerid, "Nemôe poda výpoveï, keï pracuje! Zru aktuálnu prácu príkazom /stopjob.");

	    return PlayerJoinJob(playerid, JOB_PIZZAMAN, 1);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_zamestnat_preprava))
	{

	    //if(Trucking::gWorkEnum[playerid][tworkp_Type] != 0)
	        //return SendError(playerid, "Pracuje!");

	    return PlayerJoinJob(playerid, JOB_PREPRAVA, 1);
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

function timer_TollMoveBack(i, playerid, forceme)
{

	if(isOnTollBooth[playerid] == 0 && forceme == 0)
	    return 0;

    isOnTollBooth[playerid] = 0;
    MoveDynamicObject(tollBooths_object[i], Float:tollBooths[i][2]-0.005, Float:tollBooths[i][3], Float:tollBooths[i][4], 0.01, Float:tollBooths[i][5], Float:tollBooths[i][6], Float:tollBooths[i][7]);
    SetTimerEx("timer_TollUnlock", 1000, false, "i", i);

    return 1;
}

function timer_TollUnlock(i)
{

    tollBooths_lock[i] = 0;

	return 1;
}

YCMD:toll(playerid, params[], help)
{

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesedí v aute!");

	for(new i; i < 12; i++)
	{

	    if(!IsPlayerInDynamicArea(playerid, tollBooths_area[i], 0))
	        continue;

	    if(tollBooths_price[i] < 1)
	        continue;

		if(tollBooths_lock[i] == 1)
		    continue;

        switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
		{
		    case
		        417, 425, 430, 441, 446, 447,
		        449, 452, 453, 454, 460, 465,
		        469, 472, 473, 476, 481, 484,
				487, 488, 493, 497, 501, 509,
				510, 511, 512, 513, 519, 520,
				539, 548, 553, 563, 564, 572,
				571, 577, 592, 593, 595, 594:
			{
			    ProxDetector(playerid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, "Mýtny stránik hovorí: Erm...- No s týmto vozidlom asi nie!", 1.6, true);
			    return 1;
			}
		}

		new
		    bool:hasSaid = false;

		if((tollBooths_blockAll == 1 || tollBooths_block[i] == 1) && (GetPlayerFactionType(playerid) == FACTION_TYPE_LAW || GetPlayerFactionType(playerid) == FACTION_TYPE_FIRE) && IsPlayerWorking(playerid))
		{
		    ProxDetector(playerid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, "Mýtny stránik hovorí: Dobrý deò, je mi ¾úto, ale mýtne brány sú uzavreté pre nebezpeèenstvo!", 1.6, true);
		    new str[256];
			format(str,256,"* %s si vyberá odznak, ukazuje ho stránikovi. Stránik naò prikývol.",GetPlayerNameEx(playerid, USE_MASK));
		   	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,str);
		    ProxDetector(playerid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, "Mýtny stránik hovorí: Vporiadku, choïte!", 1.6, true);
		    hasSaid = true;
		}
		else if(tollBooths_blockAll == 1 || tollBooths_block[i] == 1)
		{
		    ProxDetector(playerid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, "Mýtny stránik hovorí: Dobrý deò, je mi ¾úto, ale mýtne brány sú uzavreté pre nebezpeèenstvo!", 1.6, true);
		    return 1;
		}

		if(ex_GetPlayerMoney(playerid) < tollBooths_price[i] && GetVehicleFactionType(GetPlayerVehicleID(playerid)) != FACTION_TYPE_LAW && GetVehicleFactionType(GetPlayerVehicleID(playerid)) != FACTION_TYPE_FIRE && Trucking::vWorkEnum[Trucking::glastveh[playerid]][tworkv_State] == 0)
		    return SendError(playerid, "Nemá dostatok peòazí!");

		if(hasSaid == false && (GetVehicleFactionType(GetPlayerVehicleID(playerid)) != FACTION_TYPE_LAW && GetVehicleFactionType(GetPlayerVehicleID(playerid)) != FACTION_TYPE_LAW))
		{
			if(Trucking::vWorkEnum[Trucking::glastveh[playerid]][tworkv_State] == 0)
			{
				ex_GivePlayerMoney(playerid, -tollBooths_price[i]);
				money_spent[playerid]+=floatround(tollBooths_price[i],floatround_round);
			}
			
			new str[256];
			format(str,256,"* %s si vyberá %d$ a naahuje ruku s nimi k mýtnemu stránikovi.",GetPlayerNameEx(playerid, USE_MASK), tollBooths_price[i]);
		   	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,str);

			ProxDetector(playerid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, "Mýtny stránik hovorí: Môete pokraèova, prajem vám astnú cestu!", 1.6, true);
			
			if(Trucking::vWorkEnum[Trucking::glastveh[playerid]][tworkv_State] > 0)
			    SendSuccess(playerid, "Náklady za teba preplatí prepravná firma!");
		}
		else if(hasSaid == false)
		{
		    new str[256];
			format(str,256,"* %s sa usmieva na mýtneho stránika a prikyvuje k nemu.",GetPlayerNameEx(playerid, USE_MASK));
		   	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,str);

			ProxDetector(playerid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, "Mýtny stránik hovorí: Zdravím, nebudem vás zdrova, choïte!", 1.6, true);
		}

		tollBooths_lock[i] = 1;
		isOnTollBooth[playerid] = i;
		MoveDynamicObject(tollBooths_object[i], Float:tollBooths[i][2]+0.005, Float:tollBooths[i][3], Float:tollBooths[i][4], 0.01, Float:tollBooths[i][5], Float:tollBooths[i][8], Float:tollBooths[i][7]);
		tollBooths_timer[i] = SetTimerEx("timer_TollMoveBack", 12000, false, "iii", i, playerid, 1);

		new
		    pocet_osob,
			str[256];

		foreach( new ix : Player )
		{
		    if(!IsPlayerInAnyVehicle(ix))
				continue;

			if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(ix))
			    continue;

			pocet_osob ++;
		}

		format(str,256,"%s\t%s (%s)\t%d", tollBooths_name[i], GetVehicleName(GetPlayerVehicleID(playerid)), vEnum[GetPlayerVehicleID(playerid)][v_SPZ], pocet_osob);
		AddToTollLog(str);

		if(tollBooths_infoMod == 1)
		{
		    format(str, 256, "[ WARN ] Mýtnou bránou %s prelo auto %s(%s) s %d osobami.", tollBooths_name[i], GetVehicleName(GetPlayerVehicleID(playerid)), vEnum[GetPlayerVehicleID(playerid)][v_SPZ], pocet_osob);

		    foreach( new x : Player )
			{
			    if(GetPlayerFactionType(x) != FACTION_TYPE_LAW)
			        continue;

				if(!IsPlayerWorking(x))
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, str);
			}
		}
		return 1;
	}

	SendError(playerid, "Nie je tu iadna mýtna brána!");
	return 1;
}

YCMD:brana(playerid, params[], help)
{

	new
	    Float:dist = 20.0,
		x = -1,

		Float:p[3]
	;

	GetPlayerPos(playerid, p[0], p[1], p[2]);

	for( new i; i < sizeof(openableGate); i++)
	{

	    if(!IsPlayerInDynamicArea(playerid, openableGate[i][1]))
	        continue;

		if(openableGate[i][2] != -1)
		{
			if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != _:openableGate[i][2] && GetPlayerAdminLevel(playerid) < 1)
		    	continue;
		}

		if(dist < GetDistance(p[0], p[1], p[2], Float:openableGates[openableGate[i][3]][1], Float:openableGates[openableGate[i][3]][2], Float:openableGates[openableGate[i][3]][3]))
		    continue;

		dist = GetDistance(p[0], p[1], p[2], Float:openableGates[openableGate[i][3]][1], Float:openableGates[openableGate[i][3]][2], Float:openableGates[openableGate[i][3]][3]);
		x = i;
	}

	if(x == -1)
	    return SendError(playerid, "Nie je tu iadny vchod!");

	new i = x;

	if(openableGate[i][4] > 1)
 		return SendError(playerid, "Poèkaj, kým sa vchod zastaví!");

	if(openableGate[i][4] == 0)
 	{
  		// branu otvorime
	    openableGate[i][4] = 3;

		MoveDynamicObject(
			openableGate[i][0],
			Float:openableGates[openableGate[i][3]][7], Float:openableGates[openableGate[i][3]][8], Float:openableGates[openableGate[i][3]][9],
			Float:openableGates[openableGate[i][3]][16],
			Float:openableGates[openableGate[i][3]][10], Float:openableGates[openableGate[i][3]][11], Float:openableGates[openableGate[i][3]][12]
		);

		SendSuccess(playerid, "Dvere otvorene!");
  	}
   	else
   	{
		// branu zatvorime
  		openableGate[i][4] = 2;

		MoveDynamicObject(
			openableGate[i][0],
			Float:openableGates[openableGate[i][3]][1], Float:openableGates[openableGate[i][3]][2], Float:openableGates[openableGate[i][3]][3],
			Float:openableGates[openableGate[i][3]][16],
			Float:openableGates[openableGate[i][3]][4], Float:openableGates[openableGate[i][3]][5], Float:openableGates[openableGate[i][3]][6]
		);

		SendSuccess(playerid, "Dvere zatvorene!");
    }

	return 1;
}

public OnDynamicObjectMoved(objectid)
{

	for( new i; i < sizeof(openableGate); i++)
	{
	    if(objectid != openableGate[i][0])
	        continue;

        openableGate[i][4] -= 2;

		return 1;
	}

	return 1;

}

ShowPlayerDestroyCar(playerid)
{

	new
		tstr[144]
	;

	format(tstr, sizeof tstr, "{ffffff}> Skutoène chce zorotova toto vozidlo? Nedostane niè.");
	ShowPlayerDialog(playerid, did_zosrotovat, DIALOG_STYLE_MSGBOX, "ZOROTOVA", tstr,
	    "ÁNO", "NIE");

	return 1;
}

YCMD:zosrotovat(playerid, params[], help)
{
	if(IsPlayerInDynamicMenu(playerid, menut_zosrotovat))
	{

	    if(!IsPlayerInAnyVehicle(playerid))
	    	return SendError(playerid, "Nesedí v iadnom vozidle!");

	    if(GetPlayerVehicleSeat(playerid) != 0)
		    return SendError(playerid, "Aby si mohol otvori zorotovanie vozidla, musí by ofér!");

		new
		    vid = GetPlayerVehicleID(playerid);

        if(!strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
            return ShowPlayerDestroyCar(playerid);

	    return SendError(playerid, "Toto vozidlo nie je tvoje!");
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}

YCMD:signcheck(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_cityhall))
	{

	    new
			I_var;

		if(sscanf(params, "d", I_var))
		    return SendClientSyntax(playerid, "/signcheck [èíslo eku]");

        if(g_B_canPickUpPayDay[playerid] == false)
			return SendError(playerid, "Teraz si nemôe vybra výplatu!");

		if(I_var != payDayCheck[playerid])
		    return SendError(playerid, "Nie si dritelom takéhoto eku!");

	    GivePlayerPayDay(playerid);

	    PlayerTextDrawHide(playerid, TD_vyplaty[playerid][0]);

	    return 1;
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}

YCMD:buyweapons(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_ammun))
	{
        if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_ammun);
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

rentalbike_HasRentalBike(playerid)
{
	foreach( new vid : Vehicle )
	{
	    if(GetVehicleModel(vid) != 510) continue;
	    if(vEnum[vid][v_rentalb_IsRental] == 0) continue;
	    if(strcmp(vEnum[vid][v_rentalb_RentedBy],ReturnName(playerid),true)) continue;
	    return vid;
	}
	return 0;
}

new Float:Apositions[][] = {
    {-580.061, -1058.616, 23.147, 235.0},
    {-581.102, -1059.955, 23.120, 235.0},
    {-581.753, -1060.899, 23.096, 235.0},
    {-582.834, -1062.436, 23.054, 235.0},
    {-583.585, -1063.671, 23.023, 235.0},
    {-584.475, -1065.142, 22.985, 235.0},
    {-585.381, -1066.294, 22.954, 235.0},
    {-585.874, -1067.632, 22.926, 235.0}
};

rentalbike_Spawn(playerid, position)
{
	/////////////////////////////////////////////////////
	
	new
		Float:X, Float:Y, Float:Z, Float:Angle
	;
	
	switch(position)
	{
	    case 0:
	    {
			new rand_num 	= random(sizeof(Apositions));
			X 				= Apositions[rand_num][0];
			Y 				= Apositions[rand_num][1];
			Z 				= Apositions[rand_num][2];
			Angle 			= Apositions[rand_num][3];
	    }
	}
	
	/////////////////////////////////////////////////////
	
	new
	    vehicleid = CreateVehicle(510, X, Y, Z, Angle, 155, 155, -1, 0),
	    spz[24]
	;
	
	format(spz, sizeof spz, "RB-%02d-%03d", playerid, vehicleid);
	SetVehicleNumberPlate(vehicleid, spz);
	SetVehicleHealth(vehicleid, 1000.0);
	
	veh_IsDeath[vehicleid] 				= false;
	vEnum[vehicleid][v_Temporary] 		= false;
	vEnum[vehicleid][v_ELM] 			= false;
	vEnum[vehicleid][v_Radar] 			= false;
	vEnum[vehicleid][v_Taxameter] 		= false;
	vEnum[vehicleid][v_TaxameterItem] 	= 0;
	vEnum[vehicleid][v_Alarm] 			= false;
	vEnum[vehicleid][v_NoBreakin] 		= 0;
	vEnum[vehicleid][v_TitWindows] 		= 0;
	vEnum[vehicleid][v_rentalb_IsRental]= 1;
	vEnum[vehicleid][v_bazar_Price]   	= 0;
	vEnum[vehicleid][v_bazar_Buyout]   	= 0;
	vEnum[vehicleid][v_bazar_DateAdded]	= 0;
	vEnum[vehicleid][v_bazar_BoughtFor]	= 0;
	vEnum[vehicleid][v_Color_1] 		= 155;
	vEnum[vehicleid][v_Color_2] 		= 155;
	vEnum[vehicleid][v_Fuel] 			= 100;
	vEnum[vehicleid][v_FuelType] 		= vehicleFuelTypes[510-400];
	vEnum[vehicleid][v_Battery] 		= 1000;
	vEnum[vehicleid][v_Siren] 			= 0;
	vEnum[vehicleid][v_MileAge] 		= 0.0;
	vEnum[vehicleid][v_Nitrous] 		= 0.0;
	vEnum[vehicleid][v_Faction] 		= 0;
	vEnum[vehicleid][v_CarRadio] 		= 0;
	vEnum[vehicleid][v_AlarmItem] 		= 0;
	vEnum[vehicleid][v_Oil] 			= 100.0;
	vEnum[vehicleid][v_def_SpawnX] 		= X;
	vEnum[vehicleid][v_def_SpawnY] 		= Y;
	vEnum[vehicleid][v_def_SpawnZ]		= Z;
	vEnum[vehicleid][v_def_SpawnA] 		= Angle;
	vEnum[vehicleid][v_def_SpawnVW] 	= 0;
	vEnum[vehicleid][v_def_SpawnINT] 	= 0;
	vEnum[vehicleid][v_def_Health] 		= 1000.0;
	vEnum[vehicleid][v_Sun_LDoor] 		= 0;
	vEnum[vehicleid][v_Sun_RDoor] 		= 0;
	vEnum[vehicleid][v_Sun_Hood] 		= 0;
	vEnum[vehicleid][v_Sun_Boot] 		= 0;
	vEnum[vehicleid][v_Sun_FBumper] 	= 0;
	vEnum[vehicleid][v_Sun_RBumper] 	= 0;
	vEnum[vehicleid][v_tree_Count] = 0;
	
	format(vEnum[vehicleid][v_bazar_Desc], 256, "");
	format(vEnum[vehicleid][v_bazar_AddedBy], MAX_PLAYER_NAME+1, "");
	format(vEnum[vehicleid][v_rentalb_RentedBy],MAX_PLAYER_NAME+1,ReturnName(playerid));
	format(vEnum[vehicleid][v_SPZ], 24, spz);
	format(vEnum[vehicleid][v_Owner], 30, ReturnName(playerid));
	
	UpdateFactionVehicleUnit(vehicleid, spz, false, false);
	
	SCFM(playerid, COLOR_LIGHTGREEN, "> Prenajal si si bicykel za 30$. Jeho identifikátor je %s.", spz);
	SCFM(playerid, COLOR_LIGHTGREEN, "> Keï ho u nebude potrebova, vrá ho príkazom /returnbike, vráti sa ti 30$.");
	
	return 1;
}

YCMD:rentbike(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_rent_bike_s))
	{
        if(rentalbike_HasRentalBike(playerid) != 0)
            return SendError(playerid, "U má prenajatý bicykel!");
            
		if(ex_GetPlayerMoney(playerid) < 30)
		    return SendError(playerid, "Nemá 30$ na prenájom bicykla!");
		    
		ex_GivePlayerMoney(playerid, -30);
		money_spent[playerid] += floatround(30,floatround_round);
		
	    return rentalbike_Spawn(playerid, 0);
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:returnbike(playerid, params[], help)
{

	new vehicleid = rentalbike_HasRentalBike(playerid);
	
	if(vehicleid == 0)
	    return SendError(playerid, "Nemá prenajatý bicykel!");
	    
	vEnum[vehicleid][v_rentalb_IsRental] = 0;
    vEnum[vehicleid][v_rentalb_LastUnix] = 0;
    format(vEnum[vehicleid][v_rentalb_RentedBy], MAX_PLAYER_NAME+1, "");
    
    ex_GivePlayerMoney(playerid, 30);
    money_givenby[playerid] += floatround(30,floatround_round);

    UpdateFactionVehicleUnit(vehicleid, "", false, false, .windshield=false);
    DestroyVehicle(vehicleid);
	
	SCFM(playerid, COLOR_LIGHTGREEN, "> Zruil si prenájom bicykla. Ïakujeme za vyuitie naich sluieb!");

	return 1;
}

YCMD:buyhardware(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_shop_hardware))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_shop_hardware);
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:buyvehicle(playerid, params[], help)
{
    
    for(new x; x < MAX_DEALERSHIPS; x++)
    {
        if(dealershipenum[x][dealsh_Multiplier] <= 0) continue;
		if(!IsPlayerInDynamicArea(playerid, dealershipenum[x][dealsh_AreaId])) continue;
		
		tmp_dealershipedit[playerid] = x;
		Dealership::Shop(playerid);
		SendError(playerid, "Ponuku zatvorí klávesou ESC.");
		return 1;
    }
    
	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:buyalcohol(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_alcohol_shop))
	{
        if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_alcohol_shop);
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:buydrugs(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_lekaren))
	{
        if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_lekaren);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_grow_shop))
	{
	    if(GetPlayerIllegalFaction(playerid) == 0)
		    return SendError(playerid, "Nie si v ilegálnej frakcii!");

	    if(GetPlayerIllegalFactionRank(playerid) < 3)
		    return SendError(playerid, "Aby si mohol objedna dodávku musí by aspoò rank 3 v ilegálnej frakcii!");

		if(i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Perm_Drug_Marijuana] == 0)
		    return SendError(playerid, "Tvoja ilegálna frakcia nemá prístup k drogám!");

		ShowPlayerMenu(playerid, menut_grow_shop);
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:selldrugs(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_selldrugs))
	{

	    return ShowPlayerMenu(playerid, menut_selldrugs);
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:skin(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_skin_shop))
	{
	    return ShowPlayerSkinStorage(playerid);
	}

	else if(IsPlayerInDynamicMenu(playerid, menut_locker_sd))
	{
	    return ShowPlayerSkinStorage(playerid);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_locker_fd))
	{
        return ShowPlayerSkinStorage(playerid);
	}
	else if(GetPlayerVirtualWorld(playerid) >= MIN_HOUSE_ADDRESS && GetPlayerVirtualWorld(playerid) < MAX_HOUSE_ADDRESS)
	    return ShowPlayerSkinStorage(playerid);
    else if(GetPlayerVirtualWorld(playerid) >= MIN_BUSINESS_ADDRESS && GetPlayerVirtualWorld(playerid) < MAX_BUSINESS_ADDRESS)
	    return ShowPlayerSkinStorage(playerid);

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:advert(playerid,params[],help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_advert))
	{
	    return ShowPlayerDialog(playerid, did_advert, DIALOG_STYLE_INPUT, "ADVERT", "{ffffff}> Zadaj text tvojej reklamy! Za kadý znak zaplatí 1$ ak nie si Donator Level 2+.",
	        "PUBLIKUJ", "SPA");
	}
	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}

YCMD:tutorial(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_tutorial) && !IsPlayerInAnyVehicle(playerid))
	{
	    isSpectating[playerid] = true;

	    GetPlayerPos(playerid, spec_Pos[playerid][0], spec_Pos[playerid][1], spec_Pos[playerid][2]);
		spec_World[playerid][0] = GetPlayerVirtualWorld(playerid);
		spec_World[playerid][1] = GetPlayerInterior(playerid);

		spec_Player[playerid] = -1;

	    if(IsPlayerInAnyVehicle(playerid))
		{
			spec_Vehicle[playerid][0] = GetPlayerVehicleID(playerid);
			spec_Vehicle[playerid][1] = GetPlayerVehicleSeat(playerid);
		}
		else
		    spec_Vehicle[playerid][0] = -1;

		ahac_GetPlayerHealth(playerid, spec_Vitals[playerid][0]);
		ex_GetPlayerHunger(playerid, spec_Vitals[playerid][1]);
		ahac_GetPlayerArmour(playerid, spec_Vitals[playerid][2]);

		for(new x; x < MAX_WEAPON_SLOTS; x++)
	    {

            tg_datax[playerid][x][0] = playerWeapons[playerid][x][pweapons_WeaponId];
			tg_datax[playerid][x][2] = playerWeapons[playerid][x][pweapons_AmmoGiven];
			tg_datax[playerid][x][1] = playerWeapons[playerid][x][pweapons_Ammo];
			tg_datax[playerid][x][3] = playerWeapons[playerid][x][pweapons_SerialNumber];
			tg_datax[playerid][x][4] = playerWeapons[playerid][x][pweapons_IsWork];
			tg_datax[playerid][x][5] = playerWeapons[playerid][x][pweapons_IsPermit];
			format(tg_originx[playerid][x], 128, playerWeapons[playerid][x][pweapons_Origin]);

		}

		Tutorial::TurnOn(playerid);
		
	    return 1;
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}

YCMD:menu(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_cityhall))
	{
	    return ShowCityHallMenu(playerid);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_foodshop_buckscoffee))
	{
	    return ShowPlayerBuyFoodMenu(playerid, menut_foodshop_buckscoffee);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_foodshop_hotdog))
	{
	    return ShowPlayerBuyFoodMenu(playerid, menut_foodshop_hotdog);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_automat_chocolate))
	{
	    return ShowPlayerBuyFoodMenu(playerid, menut_automat_chocolate);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_advert))
	{
	    return ShowPlayerDialog(playerid, did_advert, DIALOG_STYLE_INPUT, "ADVERT", "{ffffff}> Zadaj text tvojej reklamy! Za kadý znak zaplatí 1$ ak nie si Donator Level 2+.",
	        "PUBLIKUJ", "SPA");
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_welcome_pump))
	{
	    return ShowPlayerBuyFoodMenu(playerid, menut_welcome_pump);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_marcosbistro))
	{
	    return ShowPlayerBuyFoodMenu(playerid, menut_marcosbistro);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_pizza_stack))
	{
	    return ShowPlayerBuyFoodMenu(playerid, menut_pizza_stack);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_shop_hardware))
	{
	    return ShowPlayerMenu(playerid, menut_shop_hardware);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_skin_shop))
	{
	    return ShowPlayerMenu(playerid, menut_skin_shop);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_general_store))
	{
	    return ShowPlayerMenu(playerid, menut_general_store);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_electro_shop))
	{
	    return ShowPlayerMenu(playerid, menut_electro_shop);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_burgershot_drive))
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	        return SendError(playerid, "Nesedí v iadnom vozidle!");
	    return ShowPlayerBuyFoodMenu(playerid, menut_burgershot_drive);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_burgershot))
	{
	    return ShowPlayerBuyFoodMenu(playerid, menut_burgershot);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_armyshop))
	{
	    return ShowPlayerMenu(playerid, menut_armyshop);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_banka))
	{
	    return ShowPlayerBank(playerid);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_dmv))
	{
	    if(isDoingDMV[playerid] == true)
	        return SendError(playerid, "Tento príkaz teraz nemôe poui!");
	    return ShowPlayerMenu(playerid, menut_dmv);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_upgrade_shop))
	{
	
	    new hour, minute;
	    gettime(hour, minute, minute);
	    
	    new
		    vid = GetPlayerVehicleID(playerid);
	    
	    /*if(hour >= 8 && hour <= 22 && GetVehicleFactionType(vid) != FACTION_TYPE_LAW && GetVehicleFactionType(vid) != FACTION_TYPE_FIRE)
	    {
	        return SendError(playerid, "Upgrade Shop je otvorený iba medzi 23:00-8:00, v noci. Poui autodielòu!");
	    }*/

	    if(!IsPlayerInAnyVehicle(playerid))
	    	return SendError(playerid, "Nesedí v iadnom vozidle!");

	    if(GetPlayerVehicleSeat(playerid) != 0)
		    return SendError(playerid, "Aby si mohol otvori upgrade shop, musí by ofér!");
		    
        if(vEnum[vid][v_bazar_DateAdded] > 0)
		    return SendError(playerid, "S vozidlom ktoré patrí autobazaru musí navtívi mechanikov!");

        if(GetPlayerFaction(playerid) == GetVehicleFaction(vid) && GetVehicleFaction(vid) != 0 && (GetVehicleFactionType(vid) == FACTION_TYPE_LAW || GetVehicleFaction(vid) == FACTION_TYPE_FIRE))
		    return ShowPlayerUpgradeShop(playerid);

		foreach( new x : Player )
		{

		    if(GetPlayerFactionType(x) == FACTION_TYPE_MECHANIC && IsPlayerWorking(x))
		    	return SendError(playerid, "Mechanik je on-duty!");

		}

        if(!strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
            return ShowPlayerUpgradeShop(playerid);

		if(!strcmp(vEnum[vid][v_SecOwner], ReturnName(playerid), false))
		    return ShowPlayerUpgradeShop(playerid);

		if(GetPlayerFaction(playerid) == GetVehicleFaction(vid) && GetVehicleFaction(vid) != 0)
		    return ShowPlayerUpgradeShop(playerid);

	    return SendError(playerid, "Toto vozidlo nemôe zobra do garáe!");
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_car_tools))
	{
	    return ShowPlayerMenu(playerid, menut_car_tools);
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}

YCMD:buyticket(playerid, params[], help)
{

    if(IsPlayerInDynamicMenu(playerid, menut_general_store))
	{

	    new
	        I_var;

		if(sscanf(params, "d", I_var))
		    return SendClientSyntax(playerid, "/buyticket [èíslo 1-100]");

		if(I_var < 1 || I_var > 100)
		    return SendClientSyntax(playerid, "/buyticket [èíslo 1-100]");

		if(ex_GetPlayerMoney(playerid) < 50)
		    return SendError(playerid, "Nemá 50$ na lístok do lotérie!");

        AddBusinessCash(GetPlayerBusiness(playerid), 20);
		ex_GivePlayerMoney(playerid, -50);
		money_spent[playerid]+=floatround(50,floatround_round);
		SetPlayerInventoryItem(playerid, inv_lotteryTicket, I_var);

		SCFM(playerid, 0xD0D0D0FF, "> Kúpil si si lístok do lotérie s èíslom %d za 50$, maj na pamäti, e ak kúpi iný, tento sa prepíe!", I_var);

	    return 1;
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:moneytree(playerid, params[], help)
{

    if(IsPlayerInDynamicMenu(playerid, menut_general_store))
	{

	    if(isInLottery[playerid] == true)
	        return SendError(playerid, "U má jeden reb!");

		if(ex_GetPlayerMoney(playerid) < 150)
		    return SendError(playerid, "Nemá 150$ na stierací reb!");
		    
        AddBusinessCash(GetPlayerBusiness(playerid), 75);

		ex_GivePlayerMoney(playerid, -150);
		money_spent[playerid]+=floatround(150,floatround_round);
		TogglePlayerControllable(playerid, 0);

		isInLottery[playerid] 		= true;
	    lotterio_IsDone[playerid] 	= false;

		lotterio_Characters[playerid][0] = lotterio_RandomChars[random(sizeof(lotterio_RandomChars)-1)];
		lotterio_Characters[playerid][1] = lotterio_RandomChars[random(sizeof(lotterio_RandomChars)-1)];
		lotterio_Characters[playerid][2] = lotterio_RandomChars[random(sizeof(lotterio_RandomChars)-1)];

	    lotterio_Zotrete[playerid][0] = false;
	    lotterio_Zotrete[playerid][1] = false;
	    lotterio_Zotrete[playerid][2] = false;

	    lotterio_TD[playerid][0] = CreatePlayerTextDraw(playerid, 186.904617, 145.186691, "mdl-2000:lotterio");
		PlayerTextDrawLetterSize(playerid, lotterio_TD[playerid][0], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, lotterio_TD[playerid][0], 278.000000, 148.000000);
		PlayerTextDrawAlignment(playerid, lotterio_TD[playerid][0], 1);
		PlayerTextDrawColor(playerid, lotterio_TD[playerid][0], -1);
		PlayerTextDrawSetShadow(playerid, lotterio_TD[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, lotterio_TD[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, lotterio_TD[playerid][0], 255);
		PlayerTextDrawFont(playerid, lotterio_TD[playerid][0], 4);
		PlayerTextDrawSetProportional(playerid, lotterio_TD[playerid][0], 0);
		PlayerTextDrawSetShadow(playerid, lotterio_TD[playerid][0], 0);

		lotterio_TD[playerid][1] = CreatePlayerTextDraw(playerid, 395.523834, 193.413330, "_");
		PlayerTextDrawLetterSize(playerid, lotterio_TD[playerid][1], 0.400000, 1.600000);
		PlayerTextDrawAlignment(playerid, lotterio_TD[playerid][1], 2);
		PlayerTextDrawColor(playerid, lotterio_TD[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, lotterio_TD[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, lotterio_TD[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, lotterio_TD[playerid][1], 255);
		PlayerTextDrawFont(playerid, lotterio_TD[playerid][1], 3);
		PlayerTextDrawSetProportional(playerid, lotterio_TD[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, lotterio_TD[playerid][1], 0);

		lotterio_TD[playerid][2] = CreatePlayerTextDraw(playerid, 395.904785, 222.853302, "_");
		PlayerTextDrawLetterSize(playerid, lotterio_TD[playerid][2], 0.400000, 1.600000);
		PlayerTextDrawAlignment(playerid, lotterio_TD[playerid][2], 2);
		PlayerTextDrawColor(playerid, lotterio_TD[playerid][2], -1);
		PlayerTextDrawSetShadow(playerid, lotterio_TD[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, lotterio_TD[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, lotterio_TD[playerid][2], 255);
		PlayerTextDrawFont(playerid, lotterio_TD[playerid][2], 3);
		PlayerTextDrawSetProportional(playerid, lotterio_TD[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, lotterio_TD[playerid][2], 0);

		lotterio_TD[playerid][3] = CreatePlayerTextDraw(playerid, 395.904785, 253.573272, "_");
		PlayerTextDrawLetterSize(playerid, lotterio_TD[playerid][3], 0.400000, 1.600000);
		PlayerTextDrawAlignment(playerid, lotterio_TD[playerid][3], 2);
		PlayerTextDrawColor(playerid, lotterio_TD[playerid][3], -1);
		PlayerTextDrawSetShadow(playerid, lotterio_TD[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, lotterio_TD[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, lotterio_TD[playerid][3], 255);
		PlayerTextDrawFont(playerid, lotterio_TD[playerid][3], 3);
		PlayerTextDrawSetProportional(playerid, lotterio_TD[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, lotterio_TD[playerid][3], 0);

		lotterio_TD[playerid][4] = CreatePlayerTextDraw(playerid, 396.285766, 188.293334, "_");
		PlayerTextDrawLetterSize(playerid, lotterio_TD[playerid][4], 0.401142, 2.969602);
		PlayerTextDrawTextSize(playerid, lotterio_TD[playerid][4], 20.000000, 102.000000);
		PlayerTextDrawAlignment(playerid, lotterio_TD[playerid][4], 2);
		PlayerTextDrawColor(playerid, lotterio_TD[playerid][4], -1);
		PlayerTextDrawUseBox(playerid, lotterio_TD[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid, lotterio_TD[playerid][4], -5963521);
		PlayerTextDrawSetShadow(playerid, lotterio_TD[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, lotterio_TD[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, lotterio_TD[playerid][4], 255);
		PlayerTextDrawFont(playerid, lotterio_TD[playerid][4], 1);
		PlayerTextDrawSetProportional(playerid, lotterio_TD[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, lotterio_TD[playerid][4], 0);
		PlayerTextDrawSetSelectable(playerid, lotterio_TD[playerid][4], true);

		lotterio_TD[playerid][5] = CreatePlayerTextDraw(playerid, 396.285766, 218.159973, "_");
		PlayerTextDrawLetterSize(playerid, lotterio_TD[playerid][5], 0.401142, 2.969602);
		PlayerTextDrawTextSize(playerid, lotterio_TD[playerid][5], 20.000000, 102.000000);
		PlayerTextDrawAlignment(playerid, lotterio_TD[playerid][5], 2);
		PlayerTextDrawColor(playerid, lotterio_TD[playerid][5], -1);
		PlayerTextDrawUseBox(playerid, lotterio_TD[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid, lotterio_TD[playerid][5], -5963521);
		PlayerTextDrawSetShadow(playerid, lotterio_TD[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, lotterio_TD[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, lotterio_TD[playerid][5], 255);
		PlayerTextDrawFont(playerid, lotterio_TD[playerid][5], 1);
		PlayerTextDrawSetProportional(playerid, lotterio_TD[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, lotterio_TD[playerid][5], 0);
		PlayerTextDrawSetSelectable(playerid, lotterio_TD[playerid][5], true);

		lotterio_TD[playerid][6] = CreatePlayerTextDraw(playerid, 396.666717, 247.599945, "_");
		PlayerTextDrawLetterSize(playerid, lotterio_TD[playerid][6], 0.401523, 3.080537);
		PlayerTextDrawTextSize(playerid, lotterio_TD[playerid][6], 20.000000, 102.000000);
		PlayerTextDrawAlignment(playerid, lotterio_TD[playerid][6], 2);
		PlayerTextDrawColor(playerid, lotterio_TD[playerid][6], -1);
		PlayerTextDrawUseBox(playerid, lotterio_TD[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid, lotterio_TD[playerid][6], -5963521);
		PlayerTextDrawSetShadow(playerid, lotterio_TD[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, lotterio_TD[playerid][6], 0);
		PlayerTextDrawBackgroundColor(playerid, lotterio_TD[playerid][6], 255);
		PlayerTextDrawFont(playerid, lotterio_TD[playerid][6], 1);
		PlayerTextDrawSetProportional(playerid, lotterio_TD[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid, lotterio_TD[playerid][6], 0);
		PlayerTextDrawSetSelectable(playerid, lotterio_TD[playerid][6], true);

		PlayerTextDrawShow(playerid, lotterio_TD[playerid][0]);
		PlayerTextDrawShow(playerid, lotterio_TD[playerid][1]);
		PlayerTextDrawShow(playerid, lotterio_TD[playerid][2]);
		PlayerTextDrawShow(playerid, lotterio_TD[playerid][3]);
		PlayerTextDrawShow(playerid, lotterio_TD[playerid][4]);
		PlayerTextDrawShow(playerid, lotterio_TD[playerid][5]);
		PlayerTextDrawShow(playerid, lotterio_TD[playerid][6]);

		SelectTextDraw(playerid, 0xC0C0C0FF);

		SCFM(playerid, 0xD0D0D0FF, "> Zotri reb na mieste!");

	    return 1;
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:buycredit(playerid, params[], help)
{
	if(IsPlayerInDynamicMenu(playerid, menut_electro_shop))
	{
	    if(GetPlayerInventoryItem(playerid, inv_telefon) != 1)
	    	return SendError(playerid, "Nemôe si doplni kredit!");

		if(GetPlayerInventoryItem(playerid, inv_simcard) == 1)
  			return SendError(playerid, "Nemôe si doplni kredit!");

		if(ph_PayMode[playerid] != 1)
			return SendError(playerid, "Nemôe si doplni kredit!");

		return ShowPlayerDialog(playerid, did_kupit_kredit_electro, DIALOG_STYLE_TABLIST, "DOBI KREDIT",
  			"{FFFFFF}5 USD\t{2fb838}$5\n{FFFFFF}10 USD\t{2fb838}$10\n{FFFFFF}20 USD\t{2fb838}$20",
  			"VYBRA", "SPA"
  		);
	}

	SendError(playerid, "Tento príkaz nemôe poui!");

	return 1;
}

Anawalt_ShowDetail(playerid, listitem=-1)
{
	if(listitem == -1)
	{
	    listitem = anawalt_skladid[playerid];
	}
	else
	{
	    anawalt_skladid[playerid] = listitem;
	    
	    new query[64], Cache:cache, count = 0;

	    mysql_format(MYSQL, query, sizeof query, "SELECT * FROM anawalt_sklad");
		cache = mysql_query(MYSQL, query);

		for(new x, y = cache_num_rows(); x<y;x++)
		{
		    if(listitem != count)
		    {
		        count++;
		        continue;
		    }

		    cache_get_value_name_int(x, "itemtype", anawalt_itemid[playerid]);
		    break;
		}

		cache_delete(cache);
	}
	
	ShowPlayerDialog(
		playerid, did_anawalt_storage_manip, DIALOG_STYLE_INPUT,
		"VLOI/VYBRA ITEM",
		"{ffffff}> Zadaj prosím poèet, ko¾ko toho chce vybra alebo vloi!\n\nAk nechce niè robi, nechaj prázdne pole a stlaè akéko¾vek tlaèidlo.",
		"VLOI", "VYBRA"
	);
	
	return 1;
}

Anawalt_ShowStorage(playerid)
{
	new
	    query[64],
	    Cache:cache,
	    
	    itemtype, itemcount,
	    
	    fstr[1024]="Prvok\tPoèet na sklade",
	    tstr[128]
	;
	
	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM anawalt_sklad");
	cache = mysql_query(MYSQL, query);
	
	for(new x, y = cache_num_rows(); x<y;x++)
	{
	    cache_get_value_name_int(x,"itemtype",itemtype);
	    cache_get_value_name_int(x,"itemcount",itemcount);
	    
	    format(tstr, sizeof tstr, "\n{ffffff}%s\t{7ac166}%dks", itemname[itemtype], itemcount);
	    strcat(fstr, tstr);
	}
	
	cache_delete(cache);
	
	ShowPlayerDialog(playerid, did_anawalt_storage, DIALOG_STYLE_TABLIST_HEADERS, "SKLAD", fstr, "MENU", "ZRUI");
	
	return 1;
}

YCMD:cenadreva(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) != FACTION_TYPE_WOODCUTTER)
		return SendError(playerid, "Tento príkaz nemôe poui!");
		    
	if(GetPlayerFactionRank(playerid) < 10)
        return SendError(playerid, "Tento príkaz nemôe poui!");
        
	new S_var[32], cena;
	if(sscanf(params,"s[32] d", S_var, cena))
	{
	    SendClientSyntax(playerid, "/cenadreva [dub-breza-smrek] [cena za kus]");
	    SCError(playerid, "| Dub: %d$ - Breza: %d$ - Smrek: %d$ (výkup/cena za ks)", Economy::GetPrice(23), Economy::GetPrice(24), Economy::GetPrice(25));
	    return 1;
	}
	
	if(cena < 0 || cena > 1000) return SendError(playerid, "Povolený rozsah ceny je 0-1000$!");
	
	new treeid=-1;
	
	if(!strcmp(S_var,"dub",true)) treeid = 23;
	else if(!strcmp(S_var,"breza",true)) treeid = 24;
	else if(!strcmp(S_var,"smrek",true)) treeid = 25;
	else
	{
	    SendClientSyntax(playerid, "/cenadreva [dub-breza-smrek] [cena za kus]");
	    SCError(playerid, "| Dub: %d$ - Breza: %d$ - Smrek: %d$ (výkup/cena za ks)", Economy::GetPrice(23), Economy::GetPrice(24), Economy::GetPrice(25));
	    return 1;
	}
	
	Economy::UpdateValueFrom(playerid, cena, treeid);
	SCSuccess(playerid, "Cena vybraného dreva zmenená na %d$ za kus!", cena);

	return 1;
}

Anawalt_ShowContract(playerid,listitem)
{
    new
		query[1024],Cache:cache;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM anawalt_kontrakt ORDER BY id DESC");
	cache = mysql_query(MYSQL, query);

	for(new x,y=cache_num_rows(); x<y;x++)
	{
	    if(x!=listitem) continue;
	    
	    new
	        finished,
	        woodtype,
	        needcount,
	        price,
			datereq,
			datefin,
			signedby[32],
			
			stavtext[32]
		;
		
		cache_get_value_name_int(x, "finished", finished);
		cache_get_value_name_int(x, "woodtype", woodtype);
		cache_get_value_name_int(x, "needcount", needcount);
		cache_get_value_name_int(x, "price", price);
		cache_get_value_name_int(x, "datereq", datereq);
		cache_get_value_name_int(x, "datefin", datefin);
		cache_get_value_name(x, "signedby", signedby);
		
		if(finished==0) format(stavtext,sizeof stavtext,"Prebieha...");
	    else if(finished==1) format(stavtext,sizeof stavtext,"Úspený");
	    else format(stavtext,sizeof stavtext,"Neúspený");
		
		format(
		  	query, sizeof query,
  			"{FFFFFF}Stav: {7ac166}%s\n{ffffff}Druh dreva: {7ac166}%s\n{ffffff}Vyadovaný poèet: {7ac166}%d ks\n\n{ffffff}Odmena: {7ac166}%d$\n{ffffff}Nedokonèenie: {7ac166}%d$\n\n{ffffff}Dátum vyprania: {7ac166}%s\n\n{ffffff}Dátum podpísania: {7ac166}%s\n{ffffff}Podpísaný: {7ac166}%s",
			stavtext,
	  		Anawalt::treeTypeNames[woodtype],
  		    needcount,
  		    price,
  		    price*2,
  		    getdateunix(datefin),
  		    getdateunix(datereq),
  		    signedby
		);

		cache_delete(cache);
		ShowPlayerDialog(playerid, did_anawalt_kontrakt_detail, DIALOG_STYLE_MSGBOX, "DETAIL KONTRAKTU", query, "OK", "");
	    
	    return 1;
	}
	cache_delete(cache);
	
	Anawalt_ShowContracts(playerid);
	
	return 1;
}

Anawalt_ShowContracts(playerid)
{
	new
		query[128],Cache:cache,fstr[1024]="Stav\tTyp dreva\tPoèet a odmena",tstr[256],stav,typ,pocet,cena,
		stavtext[32];
	
	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM anawalt_kontrakt ORDER BY id DESC LIMIT 5");
	cache = mysql_query(MYSQL, query);
	
	for(new x,y=cache_num_rows(); x<y;x++)
	{
	    cache_get_value_name_int(x,"finished",stav);
	    cache_get_value_name_int(x,"price",cena);
	    cache_get_value_name_int(x,"needcount",pocet);
	    cache_get_value_name_int(x,"woodtype",typ);
	    
	    if(stav==0) format(stavtext,sizeof stavtext,"Prebieha...");
	    else if(stav==1) format(stavtext,sizeof stavtext,"Úspený");
	    else format(stavtext,sizeof stavtext,"Neúspený");
	    
	    format(tstr,sizeof tstr,"\n%s\t%s\t%dks, %d$",stavtext,Anawalt::treeTypeNames[typ],pocet,cena);
	    strcat(fstr,tstr);
	}
	
	cache_delete(cache);
	
	ShowPlayerDialog(playerid, did_anawalt_kontrakty, DIALOG_STYLE_TABLIST_HEADERS, "KONTRAKTY", fstr, "DETAIL", "ZRUI");
	return 1;
}

YCMD:kontrakty(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) != FACTION_TYPE_WOODCUTTER)
		return SendError(playerid, "Tento príkaz nemôe poui!");

	if(GetPlayerFactionRank(playerid) < 10)
        return SendError(playerid, "Tento príkaz nemôe poui!");
        
	Anawalt_ShowContracts(playerid);
	return 1;
}

YCMD:kontrakt(playerid, params[], help)
{
	if(IsPlayerInDynamicMenu(playerid, menut_cityhall))
	{

	    if(GetPlayerFactionType(playerid) != FACTION_TYPE_WOODCUTTER)
			return SendError(playerid, "Tento príkaz nemôe poui!");

		if(GetPlayerFactionRank(playerid) < 10)
	        return SendError(playerid, "Tento príkaz nemôe poui!");
	        
		new
		    query[1024],Cache:cache,bool:havekont=false
		;
		
		mysql_format(MYSQL, query, sizeof query, "SELECT * FROM anawalt_kontrakt WHERE finished = 0 OR finished = 3");
		cache=mysql_query(MYSQL, query);
		if(cache_num_rows() > 0) havekont=true;
		cache_delete(cache);
		
		if(havekont == true) return SendError(playerid, "Momentálne má firma aktívny kontrakt!");
		
		new
		    woodtype,needcount,price
		;
		
		woodtype = 1+random(3);
		needcount = Economy::GetPrice(ECONOMY_LIST_AN_KONT_MIN) + (100*random(Economy::GetPrice(ECONOMY_LIST_AN_KONT_MAXMP)));
		price = (woodtype-1+_:ECONOMY_LIST_ALC_KONTRAKT_1)*(needcount/10);
		
		mysql_format(MYSQL, query, sizeof query, "INSERT INTO anawalt_kontrakt (finished,woodtype,needcount,price,datereq,datefin,signedby) VALUES ('0','%d','%d','%d','%d','%d','%e')",
			woodtype,needcount,price,gettime(),gettime()+(604800),str_replace("_", " ", ReturnName(playerid)));
		mysql_query(MYSQL, query,false);
		
  		format(
		  	query, sizeof query,
			  "{FFFFFF}Druh dreva: {7ac166}%s\n{ffffff}Vyadovaný poèet: {7ac166}%d ks\n\n{ffffff}Odmena: {7ac166}%d$\n{ffffff}Nedokonèenie: {7ac166}%d$\n\n{ffffff}Dátum vyprania: {7ac166}%s\n\n{ffffff}Dátum podpísania: {7ac166}%s\n{ffffff}Podpísaný: {7ac166}%s",
  		    Anawalt::treeTypeNames[woodtype],
  		    needcount,
  		    price,
  		    price*2,
  		    getdateunix(gettime()+604800),
  		    getdateunix(gettime()),
  		    str_replace("_", " ", ReturnName(playerid))
		);
		
		ShowPlayerDialog(playerid, did_anawalt_kontrakt_detail, DIALOG_STYLE_MSGBOX, "NOVÝ KONTRAKT", query, "HM", "");
		
		SendSuccess(playerid, "Kontrakt podpísaný!");

	    return 1;
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}

YCMD:storage(playerid, params[], help)
{
	if(IsPlayerInDynamicMenu(playerid, menut_anawalt_storage))
	{
	    if(GetPlayerFactionType(playerid) != FACTION_TYPE_WOODCUTTER)
		    return SendError(playerid, "Tento príkaz nemôe poui!");

		if(Anawalt::playerhold[playerid][0] > 0)
		{
			new pocet = Anawalt::playerhold[playerid][2], odmena = -1;
			odmena = pocet*Economy::GetPrice(23+Anawalt::playerhold[playerid][1]-1);

            if(odmena != -1)
            {
                for(new f; f < MAX_FACTIONS; f++)
			 	{
			  		if(strlen(factEnum[f][fact_Name]) < 3) continue;
				    if(factEnum[f][fact_Type] == FACTION_TYPE_WOODCUTTER) {
			     		if(factEnum[f][fact_Cash]<odmena)
			     		{
			     		    odmena = 0;
			     		}
			     		else
			     		{
                            factEnum[f][fact_Cash] -= odmena;
			     		}
			       		break;
				    }
			    }
			}

            new tquery[128*2];
            mysql_format(MYSQL, tquery, sizeof tquery, "UPDATE anawalt_sklad SET itemcount = itemcount+'%d' WHERE itemtype = '%d'", pocet, 49+Anawalt::playerhold[playerid][1]);
			mysql_query(MYSQL, tquery, false);

			FormatLog(log_type_player, "%s(%s) vlozil do skladu ALC %s (%dks)!", ReturnName(playerid), ReturnIP(playerid), itemname[51-Anawalt::playerhold[playerid][1]], pocet);

			SCSuccess(playerid, "Vloil si %d kusov danej poloky do skladu!", pocet);
			if(odmena == 0) SCError(playerid, "Bohuia¾, firma nemá peniaze na vyplatenie.");
			else if(odmena > 0)
			{
				SCError(playerid, "Bolo ti vyplatených %d$.", odmena);
				ex_GivePlayerMoney(playerid,odmena);
				money_work[playerid]+=floatround(odmena,floatround_round);
			}

            Anawalt::playerhold[playerid][0] = 0;
            Anawalt::playerhold[playerid][1] = 0;
            Anawalt::playerhold[playerid][2] = 0;

            SetPlayerSpecialAction(playerid, 0);
            RemovePlayerAttachedObject(playerid, 9);

		    Anawalt_ShowStorage(playerid);
		    return 1;
		}

		Anawalt_ShowStorage(playerid);

		return 1;
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:export(playerid, params[], help)
{
	if(IsPlayerInDynamicMenu(playerid, menut_anawalt_export))
	{
	    if(GetPlayerFactionType(playerid) != FACTION_TYPE_WOODCUTTER)
		    return SendError(playerid, "Tento príkaz nemôe poui!");

		if(Anawalt::playerhold[playerid][0] > 0)
		{
			new query[256],Cache:cache;
			
			mysql_format(MYSQL, query, sizeof query, "SELECT * FROM anawalt_kontrakt WHERE finished = 0");
			cache = mysql_query(MYSQL, query);
			
			if(cache_num_rows() > 0)
			{
			    new woodtype,needcount,price,fullfiled;
			    cache_get_value_name_int(0, "woodtype", woodtype);
			    cache_get_value_name_int(0, "needcount", needcount);
			    cache_get_value_name_int(0, "price", price);
			    cache_get_value_name_int(0, "fullfiled", fullfiled);
			    
				cache_delete(cache);
			    
			    if(woodtype != Anawalt::playerhold[playerid][1])
			    {
			        return SendError(playerid, "Toto drevo nie je vyadované!");
			    }

			    if(fullfiled + Anawalt::playerhold[playerid][2] > needcount)
			    {
			        mysql_format(MYSQL, query, sizeof query, "UPDATE anawalt_kontrakt SET finished = '1',fullfiled='%d' WHERE finished = 0",fullfiled + Anawalt::playerhold[playerid][2]);
					mysql_tquery(MYSQL, query);
			    
			        Anawalt::playerhold[playerid][0] = 0;
		            Anawalt::playerhold[playerid][1] = 0;
		            Anawalt::playerhold[playerid][2] = 0;

		            SetPlayerSpecialAction(playerid, 0);
		            RemovePlayerAttachedObject(playerid, 9);
		            
		            SendSuccess(playerid, "Drevo exportované, kontrakt dokonèený úspene!");
		            
		            for(new f; f < MAX_FACTIONS; f++)
				 	{
				  		if(strlen(factEnum[f][fact_Name]) < 3) continue;
					    if(factEnum[f][fact_Type] == FACTION_TYPE_WOODCUTTER) {
				     		factEnum[f][fact_Cash] += price;
				       		break;
					    }
				    }
				    
				    foreach( new x : Player )
					{
				 		if(GetPlayerFactionType(x) != FACTION_TYPE_WOODCUTTER)
				   			continue;

						if(GetPlayerFactionType(x) == FACTION_TYPE_WOODCUTTER)
				  			continue;

						SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] Kontrakt za %d$ bol úspene dokonèený!", price);
					}
			    }
			    else
			    {
			        mysql_format(MYSQL, query, sizeof query, "UPDATE anawalt_kontrakt SET fullfiled = '%d' WHERE finished = 0",fullfiled + Anawalt::playerhold[playerid][2]);
					mysql_tquery(MYSQL, query);
					
					SendSuccess(playerid, "Drevo exportované, ete zostáva exportova %d kusov!", needcount - fullfiled - Anawalt::playerhold[playerid][2]);
					
					Anawalt::playerhold[playerid][0] = 0;
		            Anawalt::playerhold[playerid][1] = 0;
		            Anawalt::playerhold[playerid][2] = 0;

		            SetPlayerSpecialAction(playerid, 0);
		            RemovePlayerAttachedObject(playerid, 9);
			    }
			}
			else
			{
			    SendError(playerid, "Momentálne nie je aktívny iadny kontrakt!");
			    cache_delete(cache);
			}
		    return 1;
		}

		SendError(playerid, "Nemá v rukách drevo!");

		return 1;
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:buy(playerid, params[], help)
{
	if(IsPlayerInDynamicMenu(playerid, menut_foodshop_buckscoffee))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerBuyFoodMenu(playerid, menut_foodshop_buckscoffee);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_foodshop_hotdog))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerBuyFoodMenu(playerid, menut_foodshop_hotdog);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_automat_chocolate))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerBuyFoodMenu(playerid, menut_automat_chocolate);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_welcome_pump))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerBuyFoodMenu(playerid, menut_welcome_pump);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_marcosbistro))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerBuyFoodMenu(playerid, menut_marcosbistro);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_pizza_stack))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerBuyFoodMenu(playerid, menut_pizza_stack);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_shop_hardware))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_shop_hardware);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_sex_shop))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_sex_shop);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_skin_shop))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_skin_shop);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_general_store))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_general_store);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_electro_shop))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_electro_shop);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_burgershot_drive))
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	        return SendError(playerid, "Nesedí v iadnom vozidle!");
	    return ShowPlayerBuyFoodMenu(playerid, menut_burgershot_drive);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_burgershot))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerBuyFoodMenu(playerid, menut_burgershot);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_armyshop))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_armyshop);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_car_tools))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_car_tools);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_lekaren))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_lekaren);
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_anawalt_obchod))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_anawalt_obchod);
	}
	
	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}

YCMD:buyelectro(playerid, params[], help)
{
	if(IsPlayerInDynamicMenu(playerid, menut_electro_shop))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_electro_shop);
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}


YCMD:buyclothing(playerid, params[], help)
{

	if(IsPlayerInDynamicMenu(playerid, menut_skin_shop))
	{
	    if(GetBizTovar(GetPlayerBusiness(playerid)) <= 0)
	    	return SendError(playerid, "Tento biznis ma prazdny sklad!");
	    return ShowPlayerMenu(playerid, menut_skin_shop);
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	
	return 1;
}

YCMD:rybarit(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_brigada_rybarit))
	{
	    if(GetPlayerInventoryItem(playerid, inv_rybyKG) >= 40.0)
	        return SendError(playerid, "U má vela rýb, najprv ich predaj!");

		if(rybari[playerid] == true)
		    return SendError(playerid, "U má nahodený prut!");

		if(GetPlayerInventoryItem(playerid, inv_rybyKG) < 0.5 && GetPlayerInventoryItem(playerid, inv_fishingPermit) == 0)
			SendError(playerid, "Nemá rybárske oprávnenie, policajti a môu pokutova!");

		rybari[playerid] = true;

		TogglePlayerControllable(playerid, 0);

		EnterInfo(playerid, "~w~Vydrz, kym nieco zaberie ...~n~Prut mozes vytiahnut stlacenim klavesy ~b~~k~~VEHICLE_FIREWEAPON~~w~!", 30000, 5);

		rybarittimer[playerid] = SetTimerEx("timer_RybaritTimer", 6000 + random(24000), false, "i", playerid);

		return 1;
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}

YCMD:predatryby(playerid, params[], help)
{
    if(IsPlayerInDynamicMenu(playerid, menut_brigada_predatryby))
	{

	    if(GetPlayerInventoryItem(playerid, inv_rybyKG) < 0.1)
	        return SendError(playerid, "Nemá iadne ryby!");

		if(GetPlayerInventoryItem(playerid, inv_fishingPermit) == 0)
		    return SendError(playerid, "Tu tvoje ryby nechcú ak nemá rybársky preukaz, ak chce choï ich preda dovnútra Palomino Creek Butcher's!");

		new
		    cash = floatround((GetPlayerInventoryItem(playerid, inv_rybyKG) * ODMENA_BRIGADA_RYBARCENIE), floatround_round);

		SCFM(playerid, 0xD0D0D0FF, "> Predal si %.3f kíl rýb za %d$!", GetPlayerInventoryItem(playerid, inv_rybyKG), cash);

		SetPlayerInventoryItem(playerid, inv_rybyKG, 0.0);
		ex_GivePlayerMoney(playerid, cash);
		money_work[playerid]+=floatround(cash,floatround_round);

		return 1;

	}
	else if(IsPlayerInDynamicMenu(playerid, menut_brigada_predatrybyex))
	{

	    if(GetPlayerInventoryItem(playerid, inv_rybyKG) < 0.1)
	        return SendError(playerid, "Nemá iadne ryby!");

		new
		    cash = floatround((GetPlayerInventoryItem(playerid, inv_rybyKG) * (ODMENA_BRIGADA_RYBARCENIE/3)), floatround_round);

		SCFM(playerid, 0xD0D0D0FF, "> Predal si %.3f kíl rýb za %d$!", GetPlayerInventoryItem(playerid, inv_rybyKG), cash);

		SetPlayerInventoryItem(playerid, inv_rybyKG, 0.0);
		ex_GivePlayerMoney(playerid, cash);
		money_work[playerid]+=floatround(cash,floatround_round);

		return 1;

	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}

YCMD:brigada(playerid, params[], help)
{

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Vystúp z vozidla!");

    if(IsPlayerInDynamicMenu(playerid, menut_brigada_krabice))
	{

	    if(g_I_playerCheckpoint[playerid] == checkp_brigada_krabicePC_1 || g_I_playerCheckpoint[playerid] == checkp_brigada_krabicePC_2)
	    {
	        RemovePlayerAttachedObject(playerid, 9);
	        SetPlayerSpecialAction(playerid, 0);
	        g_I_playerCheckpoint[playerid] = 0;
	        DisablePlayerCheckpoint(playerid);

	        SendError(playerid, "Brigáda zruená, nedostane iadnu odmenu!");
	        return 1;
	    }

	    ClearAnimations(playerid,1);
		ApplyAnimation(playerid, "CARRY", "LIFTUP", 4.1, false, false, false, false, 0, false);

		RemovePlayerAttachedObject(playerid, 9);
		SetPlayerSpecialAction(playerid, 25);
		SetPlayerAttachedObject(playerid, 9, 2912, 5, -0.173999, 0.232999, 0.250000, -0.999999, 102.399948, 6.799987, 0.652000, 0.660999, 0.627000);

		SetTimerEx("timer_PickUpCrate_PC", 800, false, "i", playerid);

	}
	else if(IsPlayerInDynamicMenu(playerid, menut_brigada_krabice_mg))
	{

	    if(g_I_playerCheckpoint[playerid] == checkp_brigada_krabiceMG_1 || g_I_playerCheckpoint[playerid] == checkp_brigada_krabiceMG_2)
	    {
	        RemovePlayerAttachedObject(playerid, 9);
	        SetPlayerSpecialAction(playerid, 0);
	        g_I_playerCheckpoint[playerid] = 0;
	        DisablePlayerCheckpoint(playerid);

	        SendError(playerid, "Brigáda zruená, nedostane iadnu odmenu!");
	        return 1;
	    }

	    ClearAnimations(playerid,1);
		ApplyAnimation(playerid, "CARRY", "LIFTUP", 4.1, false, false, false, false, 0, false);

		RemovePlayerAttachedObject(playerid, 9);
		SetPlayerSpecialAction(playerid, 25);
		SetPlayerAttachedObject(playerid, 9, 2912, 5, -0.173999, 0.232999, 0.250000, -0.999999, 102.399948, 6.799987, 0.652000, 0.660999, 0.627000);

		SetTimerEx("timer_PickUpCrate_MG", 800, false, "i", playerid);

	}
 	else
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}

YCMD:datxp(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		I_var1;

	if(sscanf(params,"dd", I_var, I_var1))
	    return SendClientSyntax(playerid, "/datxp [id] [poèet xp]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	GivePlayerExperience(I_var, I_var1);

	new
		S_string[144];

	format(S_string, 144, "> Dal si %d XP bodov hráèovi %s!", I_var1, GetPlayerNameEx(I_var, NO_MASK));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti dal %d XP bodov!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) dal hracovi %s(%s) %d XP bodov.", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1);

	return 1;
}

YCMD:setxp(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		I_var1;

	if(sscanf(params,"dd", I_var, I_var1))
	    return SendClientSyntax(playerid, "/setxp [id] [poèet xp]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	SetPlayerExperience(I_var, I_var1);

	new
		S_string[144];

	format(S_string, 144, "> Nastavil si hráèovi %s poèet XP bodov na %d!", GetPlayerNameEx(I_var, NO_MASK), I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti nastavil %d XP bodov!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) nastavil hracovi %s(%s) %d XP bodov.", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1);

	return 1;
}

YCMD:newbies(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 1)
	    return SendClientCantUseCommand(playerid);

	new
	    finalString[512] = "{e34f4f}Predpokladaní nováèikovia:\n\n{ffffff}";

	foreach( new i : Player )
	{
	    if(!IsPlayerLogged(i))
	        continue;

		if(GetPlayerRoleplayLevel(i) > 1 && g_I_playTimeHour[i] > 5)
		    continue;

		new
			tStr[128];

		format(tStr, 128, "%s - (%dh, %dm, zaregistrovaný: %s, RP lvl: %d)\n",
			GetPlayerNameEx(i, USE_PUREIDNAME), g_I_playTimeHour[i], g_I_playTimeMin[i], g_S_Registered[i], GetPlayerRoleplayLevel(i));

		strcat(finalString, tStr);
	}

	ShowPlayerDialog(playerid, did_newbies, DIALOG_STYLE_MSGBOX, "NEWBIES", finalString, "OK", "");
	return 1;
}

YCMD:afklist(playerid, params[], help)
{

	new
	    finalString[2048] = "{e34f4f}AFK hráèi:\n\n{ffffff}";

	foreach( new i : Player )
	{
	    if(!IsPlayerLogged(i))
	        continue;

		if(GetPVarInt(i, "afk_mins") < 1 && GetPVarInt(i, "afk_secs") < 4 && isuserafk[i] != 1)
		    continue;

		new
			tStr[128];

		if(isuserafk[i] == 1)
		{
			format(tStr, 128, "%s - (sysafk, %d min)\n",
				GetPlayerNameEx(i, USE_PUREIDNAME), floatround((gettime()-isuserafk_start[i])/60,floatround_round));
		}
		else
		{
            format(tStr, 128, "%s - (paused, %d min, %d sec)\n",
				GetPlayerNameEx(i, USE_PUREIDNAME), GetPVarInt(i, "afk_mins"), GetPVarInt(i, "afk_secs"));
		}

		strcat(finalString, tStr);
	}

	ShowPlayerDialog(playerid, did_afkpls, DIALOG_STYLE_MSGBOX, "AFK HRÁÈI", finalString, "OK", "");
	return 1;
}

ShowHelp_Ucet(playerid)
{
	SendClientMessage(playerid, 0x628C96FF,
	"Príkazy úètu");

	SendClientMessage(playerid, COLOR_WHITE,
	"/statistiky(/stats) /nastavenie /levelup /setvisibleobjects(/svo)");

	return 1;
}

ShowHelp_General(playerid)
{
	SendClientMessage(playerid, 0x628C96FF,
	"Hlavné príkazy");

	SendClientMessage(playerid, COLOR_WHITE,
	"/admins /help /global(/g) /ooc(/o) /enter /exit /zmazatchat(/zc) /pm /reply(/re) /cas /menu");

	SendClientMessage(playerid, COLOR_WHITE,
	"/(assist)ance(/dotaz) /(c)onversation /report /toll /atm /vypacit /otvorit /buycrate /zasadit");

	SendClientMessage(playerid, COLOR_WHITE,
	"/vytrhnut /death /damages /accept /brigada /afklist /buyammo /buystyle /givewep /givevest");

	SendClientMessage(playerid, COLOR_WHITE,
	"/id /signcheck /majetok /buy /buyticket /buyweapons /buyclothing /buyhardware /scrollgun /kreditshop");

	SendClientMessage(playerid, COLOR_WHITE,
	"/cutooc /tuningkatalog /cisterna /predatkrabicu /pay /onduty /myguns /skate /achievements /buyalcohol");
	
	SendClientMessage(playerid, COLOR_WHITE,
	"/rentbike /returnbike /charity /blindfold /cenaauta");

	return 1;
}

ShowHelp_Roleplay(playerid)
{
	SendClientMessage(playerid, 0x628C96FF,
	"Príkazy k roleplayu");

	SendClientMessage(playerid, COLOR_WHITE,
	"/[a]me[low] /[a]do[low] /attempt(/att) /shout(/s) /low(/l) /whisper(/w) /zazvonit /zaklopat /[d]sdo");

	return 1;
}

ShowHelp_Character(playerid)
{
	SendClientMessage(playerid, 0x628C96FF,
	"Príkazy k charakteru");

	SendClientMessage(playerid, COLOR_WHITE,
	"/zmazatskin /prepustit /inventar(/inv) /obcianskypreukaz /uo /preukazy /up /ut /mask /minca(/coin)");

	SendClientMessage(playerid, COLOR_WHITE,
	"/kocka(/kostka) /vrece /lano /cuff(/puta) /popis /frisk /boombox /naladit /hulit /fajcit");

	SendClientMessage(playerid, COLOR_WHITE,
	"/clothing(/doplnky) /technicak /nabitzbran /bandaz /skin /vysielacka(/v) /vysielackaon(/von)");

	SendClientMessage(playerid, COLOR_WHITE,
	"/vysielackaoff(/voff) /frekvencia /vytvorittag /scrollgun /greet(approve) /kiss(approve) /zobrathasicak");

	SendClientMessage(playerid, COLOR_WHITE,
	"/vratithasicak /zjest /vypit /zamiesat /preliat /walkstyle /hbottle /pbottle /dbottle /skills");

	return 1;
}

ShowHelp_Telefon(playerid)
{
	SendClientMessage(playerid, 0x628C96FF,
	"Príkazy k telefónu");

	SendClientMessage(playerid, COLOR_WHITE,
	"/phone(/ph) /pick(/p) /hangup(/h) /lastsms /pc");

	return 1;
}

ShowHelp_Vehicle(playerid)
{
	SendClientMessage(playerid, 0x628C96FF,
	"Príkazy k vozidlám");

	SendClientMessage(playerid, COLOR_WHITE,
	"/engine /lights /okna(/rw) /eject /kufor /kapota /(veh)icle /zrusittest /zahaknut /odhaknut ");

	SendClientMessage(playerid, COLOR_WHITE,
	"/radio /natankovat /taxameter /vperm(kluce vozidla) /vymenitkoleso");

	SendClientMessage(playerid, COLOR_WHITE,
	"/breakin /hotwire /pasy /spasy /reloadvattach /predatbazaru /kupitvozidlo");

	return 1;
}

ShowHelp_Drop(playerid)
{
	SendClientMessage(playerid, 0x628C96FF,
	"Príkazy k dropom");

	SendClientMessage(playerid, COLOR_WHITE,
	"/dropwep(/polozitzbran) /dropvest(/polozitvestu) /pickup(/zobrat)");

	SendClientMessage(playerid, COLOR_WHITE,
	"Item môe dropnú otvorením inventáru (/inv), kliknutím naò a kliknutím na 'Poloi na zem'.");

	return 1;
}

ShowHelp_Business(playerid)
{
	SendClientMessage(playerid, 0x628C96FF,
	"Príkazy k businessom");

	SendClientMessage(playerid, COLOR_WHITE,
	"/zamknutbiznis(/zb) /vstupnypoplatok(/entryfee) /biznisinfo(/businessinfo) /hudbabiznisu(/businessmusic)");

	SendClientMessage(playerid, COLOR_WHITE,
	"/kupitbiznis(/buybusiness) /predatbiznis(/sellbusiness) /doplnitpumpu /cenapaliva /reklama /sklad /krabica");

	SendClientMessage(playerid, COLOR_WHITE,
	"/transferbusiness");

	return 1;
}

ShowHelp_House(playerid)
{
	SendClientMessage(playerid, 0x628C96FF,
	"Príkazy k domom");

	SendClientMessage(playerid, COLOR_WHITE,
	"/zamknutdom(/zd) /kupitdom(/buyhouse) /predatdom(/sellhouse) /renthouse /unrenthouse");

	SendClientMessage(playerid, COLOR_WHITE,
	"/zazvonit /zaklopat /hperm(kluce domu) /svetlo /kupitnabytok /nabytok");

	SendClientMessage(playerid, COLOR_WHITE,
	"/zmazatvsetoknabytok /transferhouse");

	return 1;
}

ShowHelp_Garage(playerid)
{
	SendClientMessage(playerid, 0x628C96FF,
	"Príkazy ku garáam");

	SendClientMessage(playerid, COLOR_WHITE,
	"/zamknutgaraz(/zd) /kupitgaraz(/buygarage) /predatgaraz(/sellgarage) /zaklopat /gperm(kluce garaze)");

	return 1;
}

ShowHelp_Praca(playerid)
{
	SendClientMessage(playerid, 0x628C96FF,
	"Príkazy k prácam");

	SendClientMessage(playerid, COLOR_WHITE,
	"/zamestnat /vypoved /pracovat /prace /stopjob");

	return 1;
}

ShowHelp_Faction(playerid)
{
	SendClientMessage(playerid, 0x628C96FF,
	"Príkazy k frakcii");

	if(GetPlayerFaction(playerid) != 0)
	{
	    if(GetPlayerFactionRank(playerid) < 9)
	        SendClientMessage(playerid, COLOR_WHITE,
				"LEGAL MAIN: /frakcia /f /togmyfchat");
		else
		    SendClientMessage(playerid, COLOR_WHITE,
				"LEGAL MAIN: /frakcia /f /togmyfchat (/fveh)icle /nabrat /togfchat /respawnveh");
	}

	if(GetPlayerIllegalFaction(playerid) != 0)
	{
	    if(GetPlayerIllegalFactionRank(playerid) < 9)
	        SendClientMessage(playerid, COLOR_WHITE,
				"ILLEGAL MAIN: /nelegalka /n /togmynchat");
		else
		    SendClientMessage(playerid, COLOR_WHITE,
				"ILLEGAL MAIN: /nelegalka /n /togmynchat /nabratnelegal /tognchat");
	}

	if(GetPlayerFactionType(playerid) == FACTION_TYPE_LAW)
	{
	    SendClientMessage(playerid, COLOR_WHITE,
		"/[d]spike[l] /[d]barrier[text] /[d/p]paska /satna /r /(rl)ow /(rs)hout /department(/dept) /departmentlow(/deptlow)");

		SendClientMessage(playerid, COLOR_WHITE,
		"/departmentshout(/deptshout) /zmazatdrop /(amp)liony /pickblood /vlozitkrv /vybratkrv /odzbrojit /bram /hram /vram");

		SendClientMessage(playerid, COLOR_WHITE,
		"/gram /zaznammb /mytnebrany /megafon(/meg) /stopsign(/ss) /unit /pokuta /[un]jail /radar /zbrane /lic /mdc");

		SendClientMessage(playerid, COLOR_WHITE,
		"/taser /alkotester /(d)trestnybod /(d)zakazriadenia /vehguns /takegun /storegun");
	}
	else if(GetPlayerFactionType(playerid) == FACTION_TYPE_FIRE)
	{
	    SendClientMessage(playerid, COLOR_WHITE,
		"/[d]barrier[text] /satna /r /(rl)ow /department(/dept) /departmentlow(/deptlow) /megafon(/meg) /zivoty");

		SendClientMessage(playerid, COLOR_WHITE,
		"/[d]fire /fos(FD&EMS MDC) /peprak /(amp)liony /obliect /vytvorithasicak /zmazathasicak /skontrolovathasicak");

		SendClientMessage(playerid, COLOR_WHITE,
		"/vymenithasicak /elm /fdveci");
	}
	else if(GetPlayerFactionType(playerid) == FACTION_TYPE_GOV)
	{
	    SendClientMessage(playerid, COLOR_WHITE,
		"/(amp)liony /mdc");
	}
	else if(GetPlayerFactionType(playerid) == FACTION_TYPE_MEDIA)
	{
	    SendClientMessage(playerid, COLOR_WHITE,
		"/news /live /liveperm /duty");
	}
	else if(GetPlayerFactionType(playerid) == FACTION_TYPE_TAXI)
	{
	    SendClientMessage(playerid, COLOR_WHITE,
	    "/duty /taxameter");
	}
	else if(GetPlayerFactionType(playerid) == FACTION_TYPE_PIZZADELIVERY)
	{
	    SendClientMessage(playerid, COLOR_WHITE,
	    "/pracovat /takepizza /throwpizza /givepizza /vypoved");
	}
	else if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC)
	{
	    SendClientMessage(playerid, COLOR_WHITE,
	    "/farba /opravit /sundat /nasadit /pridatalarm /odstranitalarm /pridatradio /odstranitradio /brana /dvere");

	    SendClientMessage(playerid, COLOR_WHITE,
	    "/pridatpancier(40.000$) /odstranitpancier /odcerpatpalivo /nabitbateriu /vattach /vax /vay /vaz /vrx /vry /vrz");

	    SendClientMessage(playerid, COLOR_WHITE,
	    "/vedit /vcolor /vtext /vexit /tuningkatalog /kapota olej /pridattzamky(40.000$) /odstranittzamky");
	    
	    SendClientMessage(playerid, COLOR_WHITE,
	    "/pridatnokna(90.000$) /odstranitnokna /duty");
	}
	else if(GetPlayerFactionType(playerid) == FACTION_TYPE_WOODCUTTER)
	{
	    SendClientMessage(playerid, COLOR_WHITE,
	    "/prace /r /rozhlas /rozhlasperm /zasaditstrom /rezatstrom /storage /cenadreva /drevo /anawaltinfo");
	}
	else if(GetPlayerFactionType(playerid) == FACTION_TYPE_BAZAR)
	{
	    SendClientMessage(playerid, COLOR_WHITE,
	    "/bazar /kupitodserveru");
	}
	return 1;
}

ShowHelp_Donator(playerid)
{

    SendClientMessage(playerid, 0xfbde32FF,
	"Kúpa Donatora");

	SendClientMessage(playerid, 0xf9f0bdff,
	"> Pre kúpu donatora navtív UCP a podstránku Donate!");

	SendClientMessage(playerid, 0xfbde32FF,
	"Výhody Donatora");

	SendClientMessage(playerid, 0xf9f0bdff,
	"a) Nové vozidlá v obchode s vozidlami.");

	SendClientMessage(playerid, 0xf9f0bdff,
	"b) Bonus XP a peòazí k výplate.");

	SendClientMessage(playerid, 0xf9f0bdff,
	"c) Viac slotov na skiny, vozidlá, biznisy, bankové úèty.");

	SendClientMessage(playerid, 0xf9f0bdff,
	"d) Rýchlejie a lacnejie podanie výpovede.");
	
	SendClientMessage(playerid, 0xf9f0bdff,
	"... a kopa ïalích, vetko nájde v UCP.");

	SendClientMessage(playerid, 0xfbde32FF,
	"Príkazy Donatora");

	SendClientMessage(playerid, 0xf9f0bdff,
	"/blockpm /toggold /togdonchat /dc /kreditshop");

	return 1;

}

ShowHelp_Helper(playerid)
{

	if(GetPlayerAdminLevel(playerid) < 1)
	    return SendError(playerid, "Tento help nemôe vidie!");

	SendClientMessage(playerid, 0x66CC99FF,
	"Príkazy Helpera");

	SendClientMessage(playerid, 0xc1eed7ff,
	"/alogin /alogout /aduty /spot /povolitooc /goto /poslednylogin(/pl) /adminupdate /fixplayer /full");

	SendClientMessage(playerid, 0xc1eed7ff,
	"/hpm /newbies /helperchat(/hel) /(answerassist)ance(/aa) /cancelconversation(/cc) /heal");

	SendClientMessage(playerid, 0xc1eed7ff,
	"/hooc /fonline /freeze");
	
	SendClientMessage(playerid, 0xc1eed7ff,
	"> Môe vstúpi do hociakej frakènej budovy.");
	
	SendClientMessage(playerid, 0xc1eed7ff,
	"> Môe pouíva hociaký frakèný arrow (vstup).");
	
	SendClientMessage(playerid, 0xc1eed7ff,
	"> Môe otvori hociaké frakèné brány/dvere.");

	return 1;

}

ShowHelp_Moderator(playerid)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendError(playerid, "Tento help nemôe vidie!");

	SendClientMessage(playerid, 0x8040FFFF,
	"Príkazy Moderátora");

	SendClientMessage(playerid, 0xc8b2f4ff,
	"/kick /setzivot /feed /sethlad /povolitglobal /zakazatglobal /zakazatooc /posledneprikazy(/pp) /mpm");

	SendClientMessage(playerid, 0xc8b2f4ff,
	"/obcianka [id] - /preukazy [id] - /technicak [id] - /(spec)tate /spectateoff(/specoff) /cas [id] - /[o][un]ajail");

	SendClientMessage(playerid, 0xc8b2f4ff,
	"/cislo /maska /upos /npos /zbrane /mooc /pstats /pskills /tpfw /tpup /tpdn /pv /pvc");

	return 1;

}

ShowHelp_Admin(playerid)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Tento help nemôe vidie!");

	SendClientMessage(playerid, 0xf4bb30FF,
	"Príkazy Administrátora Level 1");

	SendClientMessage(playerid, 0xfdd87eff,
	"/odzbrojit /setskin /get /tpto /fix /apm /listpocasie /setpocasie /setvhp /acuff /gdo");

	SendClientMessage(playerid, 0xfdd87eff,
	"/doplnitpalivo /doplnitbateriu /doplnitolej /getcar /gotocar /togdonchat /dc /setcas");

	SendClientMessage(playerid, 0xfdd87eff,
	"/zmazattag /taginfo /flip /slap /rfv /aooc /pmoney /odisarm /modelcount");
	
	SendClientMessage(playerid, 0xfdd87eff,
	"> Teleportácia cez mapu v pause menu.");

	if(GetPlayerAdminLevel(playerid) >= 5)
	{

	    SendClientMessage(playerid, 0x45A1FDFF,
		"Príkazy Administrátora Level 2");

		SendClientMessage(playerid, 0xa0cfffff,
		"/vytvoritauto /ulozitfauto /zmazatauto /toggleooc /toggleglobal /vanish /getloc /setloc /nastavitfrakciu");

		SendClientMessage(playerid, 0xa0cfffff,
		"/setvesta /azamknutbiznis(/azb) /[o]setpohlavie /dbarrier[text]all /dspikeall /spikeinfo /[un][o][t][ot]ban");

		SendClientMessage(playerid, 0xa0cfffff,
		"/datmasku /blockpm /fly /listdrop[ex] /gotodrop /zmazatdrop /interiery[domu] /dobject /getall");

		SendClientMessage(playerid, 0xa0cfffff,
		"/[o][un]ck /dropinfo /bloodinfo /dblood[all] /vpark[all] /adm_engine /adm_lock /tunecar /carcol /datnitro");

		SendClientMessage(playerid, 0xa0cfffff,
		"/datdrogy /datweedseed /datnaboje /dattaxameter /datauto /say /lic /vynulovatobcianku /azamknutgaraz(/azg) /cctv");

		SendClientMessage(playerid, 0xa0cfffff,
		"/bankaccs /listzbrane /drogy /zosrotovatauto /prepisauto /typybiznisu /nastavitnelegalku");

		SendClientMessage(playerid, 0xf0af92ff,
		"/frakcie /nelegalky /datxp /setxp /abusinessowner /abusinessname /abusinessinterior /abusinessprice");

		SendClientMessage(playerid, 0xf0af92ff,
		"/abusinessmusic /aentryfee /setbany /setkicky /setjaily /ahousestreet /ahousenumber /ahousecity");

		SendClientMessage(playerid, 0xf0af92ff,
		"/ahouseowner /ahouseprice /ahouseinterior /azamknutdom(/azd) /vytvoritatm /zmazatatm /zmenitspz");

		SendClientMessage(playerid, 0xf0af92ff,
		"/agaragestreet /agaragecity /agarageowner /agaragenumber /agarageprice /agarageinterior /agaragehouse");

		SendClientMessage(playerid, 0xf0af92ff,
		"/agaragepos /datzbran /setpeniaze /datpeniaze /datnaboje /setclothingmodel /setskill /cenybiznisov");

		SendClientMessage(playerid, 0xf0af92ff,
		"/resethouse /resetbusiness /resetgarage /vattachpridat /vattachzmazat /datskateboard /cenydomu /cenygarazi");

	}

	if(GetPlayerAdminLevel(playerid) >= 6)
	{

	    SendClientMessage(playerid, 0xcb3736FF,
		"Príkazy Administratora Level 3");

		SendClientMessage(playerid, 0xf2a2a2ff,
		"/vytvoritbusiness /zmazatbusiness /vytvoritmenu /zmazatmenu /typymenu /pickupymenu /restart /reloadmaps");

		SendClientMessage(playerid, 0xf2a2a2ff,
		"/vytvoritradar /zmazatradar /vytvoritdom /zmazatdom /vytvoritpumpu /zmazatpumpu /setcislo /vytvoritarrow");

		SendClientMessage(playerid, 0xf2a2a2ff,
		"/zmazatarrow /datkredity /vytvoritgaraz /zmazatgaraz /vytvoritmapikonu /zmazatmapikonu /vytvoritactora");

		SendClientMessage(playerid, 0xf2a2a2ff,
		"/zmazatactora /vytvoritcctv /zmazatcctv /opravitcctv /rename /setmaxvhp /kickall /dealerships /zmazatstrom");
		
        SendClientMessage(playerid, 0xf2a2a2ff,
		"/vytvoritfarmu /zmazatfarmu");

	}

	if(IsPlayerAdmin(playerid))
	{

	    SendClientMessage(playerid, 0x628C96FF,
		"Príkazy RCON Administrátora");

		SendClientMessage(playerid, 0xd6f2f9ff,
		"/setprava /setdonator /setrenametickety /datrenametickety /forcepayday /forcepaydayall /forcelottery");

		SendClientMessage(playerid, 0xd6f2f9ff,
		"/server /upravitekonomiku /gdatpeniaze");

	}

	return 1;

}

ShowHelp_Mapping(playerid)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendError(playerid, "Tento help nemôe vidie!");

	SendClientMessage(playerid, 0xf4bb30FF,
	"Príkazy k mapping editoru");

	SendClientMessage(playerid, 0xfdd87eff,
	"/newmap");

	return 1;

}

ShowHelp_Anims(playerid)
{

	SendClientMessage(playerid, 0xD0D0D0FF,
	"|__________________________________________________| HELP > ANIMÁCIE |__________________________________________________|");

	SendClientMessage(playerid, COLOR_WHITE,
	"| /stopanim - /knockout - /fuckyou - /vziat - /vypitex - /nastavit - /cpr - /rap - /fandit - /coje - /zasmiat - /reload |");

	SendClientMessage(playerid, COLOR_WHITE,
	"| /stojka - /baseball - /startzavodu - /ano - /ne - /idle - /facepalm - /dolava - /doprava - /hodit - /nosit - /opriet |");

	SendClientMessage(playerid, COLOR_WHITE,
	"| /pusa - /sedet - /lezat - /basketball - /ruky - /zraneny - /ukazsvaly - /unaveny - /rukyhore - /polozitex - /opravitex |");

	SendClientMessage(playerid, COLOR_WHITE,
	"| /zjestex - /zvracat - /ukazat - /sup - /gsign - /zamavat - /kopnut - /mocit - /poskrabat - /klaknut - /facka - /poskrabat |");

	SendClientMessage(playerid, COLOR_WHITE,
	"| /klaknut - /honit - /panika - /namierit - /tancovat - /strip - /walk - /beh (/jog) - /cellout - /nazem |");

	return 1;

}

YCMD:help(playerid, params[], help)
{

 	new
		s_string[ 18 ];

	if(sscanf(params, "s[18]", s_string))
	    return 	SendClientSyntax(playerid, "/help [UCET - GENERAL - ROLEPLAY - CHARACTER - TELEFON - VOZIDLO - DROP - BUSINESS - HOUSE]"),
				SendClientSyntax(playerid, "/help [PRACA - FRAKCIA - ANIMACIE - DONATOR - HELPER - MODERATOR - ADMIN - MAP]");

	if(!strcmp(s_string, "ucet", true))
	    return ShowHelp_Ucet(playerid);
	else if(!strcmp(s_string, "general", true))
	    return ShowHelp_General(playerid);
    else if(!strcmp(s_string, "roleplay", true))
	    return ShowHelp_Roleplay(playerid);
    else if(!strcmp(s_string, "character", true))
	    return ShowHelp_Character(playerid);
    else if(!strcmp(s_string, "telefon", true))
	    return ShowHelp_Telefon(playerid);
    else if(!strcmp(s_string, "vozidlo", true))
	    return ShowHelp_Vehicle(playerid);
    else if(!strcmp(s_string, "drop", true))
	    return ShowHelp_Drop(playerid);
    else if(!strcmp(s_string, "business", true))
	    return ShowHelp_Business(playerid);
    else if(!strcmp(s_string, "house", true))
	    return ShowHelp_House(playerid);
    else if(!strcmp(s_string, "garaz", true))
	    return ShowHelp_Garage(playerid);
    else if(!strcmp(s_string, "praca", true))
	    return ShowHelp_Praca(playerid);
    else if(!strcmp(s_string, "frakcia", true))
	    return ShowHelp_Faction(playerid);
    else if(!strcmp(s_string, "animacie", true))
	    return ShowHelp_Anims(playerid);
    else if(!strcmp(s_string, "donator", true))
	    return ShowHelp_Donator(playerid);
    else if(!strcmp(s_string, "helper", true))
	    return ShowHelp_Helper(playerid);
    else if(!strcmp(s_string, "moderator", true))
	    return ShowHelp_Moderator(playerid);
    else if(!strcmp(s_string, "admin", true))
	    return ShowHelp_Admin(playerid);
    else if(!strcmp(s_string, "map", true))
	    return ShowHelp_Mapping(playerid);
	else
	    return 	SendClientSyntax(playerid, "/help [UCET - GENERAL - ROLEPLAY - CHARACTER - TELEFON - VOZIDLO - BUSINESS - HOUSE - GARAZ - MAP]"),
				SendClientSyntax(playerid, "/help [DROP - PRACA - FRAKCIA - ANIMACIE - DONATOR - HELPER - MODERATOR - ADMIN]");
}

YCMD:stats(playerid, params[], help)
{

	ShowPlayerStats(playerid, playerid);
	return 1;
}

YCMD:pstats(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var;

	if(sscanf(params,"d",I_var))
	    return SendClientSyntax(playerid, "/pstats [id]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	ShowPlayerStats(I_var, playerid);
	return 1;
}

YCMD:setskill(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	new
		I_var,
		SkillID,
		Skill;

	if(sscanf(params, "ddd", I_var, SkillID, Skill))
	    return SendClientSyntax(playerid, "/setskill [id hraca] [id skillu (samp wiki)] [skill]");

	if(SkillID < 0 || SkillID > 10)
	    return SendClientSyntax(playerid, "/setskill [id hraca] [id skillu (samp wiki)] [skill]");

    if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);
		
	switch(SkillID)
	{
	    case 0: weaponskill_pistol[I_var] = Skill;
	    case 1: weaponskill_pistol_silenced[I_var] = Skill;
	    case 2: weaponskill_desert_eagle[I_var] = Skill;
	    case 3: weaponskill_shotgun[I_var] = Skill;
	    case 4: weaponskill_sawnoff_shotgun[I_var] = Skill;
	    case 5: weaponskill_spas12_shotgun[I_var] = Skill;
	    case 6: weaponskill_micro_uzi[I_var] = Skill;
	    case 7: weaponskill_mp5[I_var] = Skill;
	    case 8: weaponskill_ak47[I_var] = Skill;
	    case 9: weaponskill_m4[I_var] = Skill;
	    case 10: weaponskill_sniperrifle[I_var] = Skill;
	}
	
	ValidateWeaponSkill(I_var);
	
	new
		S_string[144];

	format(S_string, 144, "> Upravil si skill ID %d na hodnotu %d hráèovi %s!", SkillID, Skill, GetPlayerNameEx(I_var, NO_MASK));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti upravil hodnotu skillu ID %d na %d!", GetPlayerNameEx(playerid, NO_MASK), SkillID, Skill);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);
	FormatLog(log_type_admin, "%s(%s) upravil hodnotu skillu ID %d na %d hracovi %s(%s).", ReturnName(playerid), ReturnIP(playerid), SkillID, Skill, ReturnName(I_var), ReturnIP(I_var));
	FormatWarn(playerid, "AdmCmd:", COLOR_ADMINCMD, "%s upravil hodnotu skillu ID %d na %d hráèovi %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME),SkillID,Skill, GetPlayerNameEx(I_var, USE_PUREIDNAME));
	return 1;

}

YCMD:skills(playerid, params[], help)
{

	ShowPlayerSkills(playerid, playerid);
	return 1;
}

YCMD:pskills(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var;

	if(sscanf(params,"d",I_var))
	    return SendClientSyntax(playerid, "/pskills [id]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	ShowPlayerSkills(I_var, playerid);
	return 1;
}

YCMD:pmoney(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var;

	if(sscanf(params,"d",I_var))
	    return SendClientSyntax(playerid, "/pmoney [id]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	ShowPlayerMoney(I_var, playerid);
	return 1;
}

YCMD:inventar(playerid, params[], help)
{

	if(cantManipulate[playerid] == true)
	    return SendError(playerid, "Teraz nemôe otvori inventár!");

	ShowPlayerInventory(playerid, playerid);
	return 1;
}

YCMD:nelegalky(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	ShowPlayerIllegalFactionList(playerid);
	return 1;
}

YCMD:frakcie(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	ShowPlayerFactionList(playerid);
	return 1;
}

YCMD:stopanim(playerid, params[], help)
{

    switch(g_I_playerCheckpoint[playerid])
	{
		case checkp_brigada_krabicePC_1, checkp_brigada_krabicePC_2,
			checkp_brigada_krabiceMG_1, checkp_brigada_krabiceMG_2:
		{
			return SendError(playerid, "Tento príkaz nemôe poui poèas brigády!");
		}
	}


	StopPlayerAnimation(playerid);

	return 1;
}

YCMD:nazem(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/nazem [1-3]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "PED", "FLOOR_HIT", 4.1, false, true, true, true, 0, 1); // nazem 1
	    case 2: ApplyAnimation(playerid, "PED", "FLOOR_HIT_F", 4.1, false, true, true, true, 0, 1); // nazem 2
	    case 3: ApplyAnimation(playerid, "WUZI", "CS_DEAD_GUY", 4.0, 1, 0, 0, 0, 0,0);
	    default: return SendClientSyntax(playerid, "/nazem [1-3]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:knockout(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	canStopAnimation[playerid] = true;
	ClearAnimations(playerid, 1);
    ApplyAnimation(playerid, "BASEBALL", "BAT_HIT_3", 4.1, false, true, true, true, 0, true); // /knockout
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:stojka(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	canStopAnimation[playerid] = true;
	ClearAnimations(playerid, 1);
    ApplyAnimation(playerid, "DAM_JUMP", "DAM_DIVE_LOOP", 4.1, false, true, true, true, 0, true); // /stojka
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:dolava(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	canStopAnimation[playerid] = true;
	ClearAnimations(playerid, 1);
    ApplyAnimation(playerid, "MISC", "HIKER_POSE_L", 4.1, false, false, false, true, 0, false); // /dolava
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:doprava(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	canStopAnimation[playerid] = true;
	ClearAnimations(playerid, 1);
    ApplyAnimation(playerid, "MISC", "HIKER_POSE", 4.1, false, false, false, true, 0, false); // /doprava
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:idle(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	canStopAnimation[playerid] = true;
	ClearAnimations(playerid, 1);
    ApplyAnimation(playerid, "FAT", "FATIDLE", 4.1, true, false, false, false, 0, true); // /idle
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:opravitex(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	canStopAnimation[playerid] = true;
	ClearAnimations(playerid, 1);
    ApplyAnimation(playerid, "CAR", "FIXN_CAR_LOOP", 4.1, true, false, false, false, 0, true); // /opravit
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:cpr(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, false, false, false, false, 0, false); // /cpr
	return 1;
}

YCMD:polozitex(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	ApplyAnimation(playerid, "BOMBER", "BOM_PLANT", 4.1, false, true, true, false, 0, true); // /polozit
	return 1;
}

YCMD:facepalm(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	ApplyAnimation(playerid, "MISC", "PLYR_SHKHEAD", 4.1, false, false, false, false, 0, false); // /facepalm
	return 1;
}

YCMD:facka(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

    ApplyAnimation(playerid, "MISC", "BITCHSLAP", 4.1, false, false, false, false, 0, false); // /facka
	return 1;
}

YCMD:honit(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

    ApplyAnimation(playerid, "PAULNMAC", "WANK_LOOP", 4.1, true, false, false, false, 0, false); // /honit
    canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:namierit(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

    ApplyAnimation(playerid, "PED", "ARRESTGUN", 4.1, false, false, false, true, 0, false); // /namierit
    canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:panika(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

    ApplyAnimation(playerid, "PED", "COWER", 4.1, false, false, false, true, 0, false); // /pani
    canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:zvracat(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	ApplyAnimation(playerid, "FOOD", "EAT_VOMIT_P", 4.1, false, true, true, false, 0, true); // /zvracat
	return 1;
}

YCMD:coje(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	ApplyAnimation(playerid, "RIOT", "RIOT_ANGRY", 4.1, false, false, false, false, 0, false); // /coje
	return 1;
}

YCMD:klaknut(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/klaknut [1-2]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "CAMERA", "CAMCRCH_CMON", 4.1, true, false, false, false, 0, true); // /klaknut
	    case 2: ApplyAnimation(playerid, "CAMERA", "CAMCRCH_IDLELOOP", 4.1, true, false, false, false, 0, true); // /klaknut
	    default: return SendClientSyntax(playerid, "/ukazat [1-2]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:ukazat(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/ukazat [1-2]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "CAMERA", "CAMSTND_CMON", 4.1, false, false, false, false, 0, true); // /ukazat
	    case 2: ApplyAnimation(playerid, "ON_LOOKERS", "POINTUP_LOOP", 4.1, false, false, false, false, 0, false); // /ukazat
	    default: return SendClientSyntax(playerid, "/ukazat [1-2]");
	}
	return 1;
}

YCMD:zasmiat(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	ApplyAnimation(playerid, "RAPPING", "LAUGH_01", 4.1, false, false, false, false, 0, false); // /zasmiat
	return 1;
}

YCMD:kopnut(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	ApplyAnimation(playerid, "POLICE", "DOOR_KICK", 4.1, false, false, false, false, 0, false); // /kopnut
	return 1;
}

YCMD:poskrabat(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	ApplyAnimation(playerid, "MISC", "SCRATCHBALLS_01", 4.1, false, false, false, false, 0, false); // /poskrabat
	return 1;
}

YCMD:startzavodu(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	ApplyAnimation(playerid, "CAR", "FLAG_DROP", 4.1, false, true, true, false, 0, true); // /startzavodu
	return 1;
}

YCMD:ano(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	ApplyAnimation(playerid, "BSKTBALL", "BBALL_REACT_SCORE", 4.1, false, true, true, false, 0, true); // /ano
	return 1;
}

YCMD:ne(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	ApplyAnimation(playerid, "BSKTBALL", "BBALL_REACT_MISS", 4.1, false, true, true, false, 0, true); // /ne
	return 1;
}

YCMD:mocit(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

    SetPlayerSpecialAction(playerid, 68);
	return 1;
}

YCMD:nosit(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

    SetPlayerSpecialAction(playerid, 25);
	return 1;
}

YCMD:cellout(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

    SetPlayerSpecialAction(playerid, 11);
	return 1;
}

YCMD:cellin(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

    SetPlayerSpecialAction(playerid, 12);
	return 1;
}

YCMD:ukazsvaly(playerid, params[], help)
{
	if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

    ApplyAnimation(playerid, "BENCHPRESS", "GYM_BP_CELEBRATE", 4.1, false, true, true, false, 0, true); // /ukazsvaly
	return 1;
}


YCMD:fuckyou(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/fuckyou [1-2]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "PED", "FUCKU", 4.1, false, false, false, false, 0, false); // /fuckyou
	    case 2: ApplyAnimation(playerid, "RIOT", "RIOT_FUKU", 3.8, false, true, true, false, 0, false); // /fuckyou
	    default: return SendClientSyntax(playerid, "/fuckyou [1-2]");
	}
	return 1;
}

YCMD:hodit(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/hodit [1-2]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "GRENADE", "WEAPON_THROW", 4.1, false, false, false, false, 0, false); // /hodit
	    case 2: ApplyAnimation(playerid, "GRENADE", "WEAPON_THROWU", 4.1, false, false, false, false, 0, false); // /hodit
	    default: return SendClientSyntax(playerid, "/hodit [1-2]");
	}
	return 1;
}

YCMD:pusa(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/pusa [1-2]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "BD_FIRE", "GRLFRD_KISS_03", 4.1, false, false, false, false, 0, true); // /pusa
	    case 2: ApplyAnimation(playerid, "BD_FIRE", "PLAYA_KISS_03", 4.1, false, true, true, false, 0, true); // /pusa
	    default: return SendClientSyntax(playerid, "/pusa [1-2]");
	}
	return 1;
}

YCMD:zamiesat(playerid, params[], help)
{
    new
	    S_string[64];

	if(sscanf(params,"s[64]", S_string))
		return SendClientSyntax(playerid, "/zamiesat [lean]");

	if(!strcmp(S_string, "lean", true))
	{
	    if(GetPlayerInventoryItem(playerid, inv_sprite) < 1)
	        return SendError(playerid, "Potrebuje f¾au sprite, aby si si mohol zamiea drank homie!");

        if(GetPlayerInventoryItem(playerid, inv_prometh) < 100)
	        return SendError(playerid, "Potrebuje aspoò jeden deciliter Actavis Prometazínu, aby si mohol zmiea lean!");

        SetPlayerInventoryItem(playerid, inv_prometh, GetPlayerInventoryItem(playerid, inv_prometh)-100);
        SetPlayerInventoryItem(playerid, inv_spritelean, GetPlayerInventoryItem(playerid, inv_spritelean)+500);
        SetPlayerInventoryItem(playerid, inv_sprite, GetPlayerInventoryItem(playerid, inv_sprite)-1);

        SendClientMessage(playerid, 0xe061e1ff, "[ LEAN ] {ffffff}Zamieal si f¾aku Spritu spolu s prometazínom znaèky Actavis.");
       	SendClientMessage(playerid, 0xe061e1ff, "[ LEAN ] {ffffff}Ak chce zaèa f¾au leanu pi, poui príkat /vypit flasaleanu.");
	}
	else
	    return SendClientSyntax(playerid, "/zamiesat [lean]");

	return 1;
}

YCMD:preliat(playerid, params[], help)
{

	if(isdrinkinglean[playerid] == false)
	    return SendError(playerid, "Zober si do rúk f¾au s leanom príkazom /vypit flasaleanu!");

    if(GetPlayerInventoryItem(playerid, inv_petcup) < 1)
        return SendError(playerid, "Nemá plastový pohár, kúp balík v 24/7!");

	SetPlayerInventoryItem(playerid, inv_petcup, GetPlayerInventoryItem(playerid, inv_petcup)-1);

    isdrinking[playerid] = true;
	isdrinkinglean[playerid] = false;
	isdrinkingleanpet[playerid] = true;

	SetPlayerAttachedObject(playerid, 8, -1052, 6, 0.038, 0.038, 0.002, 0, -5.5);

	SendClientMessage(playerid, 0xe061e1ff, "[ LEAN ] {ffffff}Prelial si lean z f¾ae do pohára! Pravým tlaèidlom myi môe zaèa pi.");
	SendClientMessage(playerid, 0xe061e1ff, "[ LEAN ] {ffffff}Pohár zahodí stlaèením ENTERu, ale ak ho zahodí, príde o lean v òom!");

	return 1;
}

YCMD:zjest(playerid, params[], help)
{
    new
	    S_string[64];

	if(sscanf(params,"s[64]", S_string))
		return SendClientSyntax(playerid, "/zjest [pepsi-cola-kitkat-pringles-pizza-sprite-flasaleanu]");

	if(!strcmp(S_string, "pepsi", true))
	{
	    if(GetPlayerInventoryItem(playerid, inv_pepsiCan) < 1)
	        return SendError(playerid, "Tento item nemá!");

        SetPlayerInventoryItem(playerid, inv_pepsiCan, GetPlayerInventoryItem(playerid, inv_pepsiCan)-1);
        ApplyAnimation(playerid, "BAR", "DNK_STNDM_LOOP", 4.1, false, false, false, false, 0, true);
        new
            Float:Hunger;
        ex_GetPlayerHunger(playerid, Hunger);
        if(Hunger + 20.0 > 100.0)
            ex_SetPlayerHunger(playerid, 100.0);
		else
		    ex_SetPlayerHunger(playerid, Hunger + 20.0);

   	 	new Float:HP;
		ahac_GetPlayerHealth(playerid, HP);
		SetPlayerHealth(playerid, HP + 9.0);
		if(HP + 9.0 > 100)
		    SetPlayerHealth(playerid, 100.0);

		EnterInfo(playerid, "~w~Vypil si ~b~plechovku Pepsi~w~!");
	}
	else if(!strcmp(S_string, "cola", true))
	{
	    if(GetPlayerInventoryItem(playerid, inv_colaCan) < 1)
	        return SendError(playerid, "Tento item nemá!");

        SetPlayerInventoryItem(playerid, inv_colaCan, GetPlayerInventoryItem(playerid, inv_colaCan)-1);
        ApplyAnimation(playerid, "BAR", "DNK_STNDM_LOOP", 4.1, false, false, false, false, 0, true);
        new
            Float:Hunger;
        ex_GetPlayerHunger(playerid, Hunger);
        if(Hunger + 20.0 > 100.0)
            ex_SetPlayerHunger(playerid, 100.0);
		else
		    ex_SetPlayerHunger(playerid, Hunger + 20.0);

        new Float:HP;
		ahac_GetPlayerHealth(playerid, HP);
		SetPlayerHealth(playerid, HP + 9.0);
		if(HP + 9.0 > 100)
		    SetPlayerHealth(playerid, 100.0);

		EnterInfo(playerid, "~w~Vypil si ~b~plechovku Coly~w~!");
	}
	else if(!strcmp(S_string, "sprite", true))
	{
	    if(GetPlayerInventoryItem(playerid, inv_sprite) < 1)
	        return SendError(playerid, "Tento item nemá!");

        SetPlayerInventoryItem(playerid, inv_sprite, GetPlayerInventoryItem(playerid, inv_sprite)-1);
        ApplyAnimation(playerid, "BAR", "DNK_STNDM_LOOP", 4.1, false, false, false, false, 0, true);
        new
            Float:Hunger;
        ex_GetPlayerHunger(playerid, Hunger);
        if(Hunger + 20.0 > 100.0)
            ex_SetPlayerHunger(playerid, 100.0);
		else
		    ex_SetPlayerHunger(playerid, Hunger + 20.0);

        new Float:HP;
		ahac_GetPlayerHealth(playerid, HP);
		SetPlayerHealth(playerid, HP + 9.0);
		if(HP + 9.0 > 100)
		    SetPlayerHealth(playerid, 100.0);

		EnterInfo(playerid, "~w~Vypil si ~b~flasu Sprite~w~!");
	}
	else if(!strcmp(S_string, "flasaleanu", true))
	{
	    if(GetPlayerInventoryItem(playerid, inv_spritelean) < 15)
	        return SendError(playerid, "Nemá lín ty opièák!");

       	isdrinking[playerid] = true;

       	leanlimit[playerid] = GetPlayerInventoryItem(playerid, inv_spritelean);
       	if(leanlimit[playerid] > 500) leanlimit[playerid] = 500;

       	isdrinkinglean[playerid] = true;
       	isdrinkingleanpet[playerid] = false;
       	SetPlayerAttachedObject(playerid, 8, -1033, 6, -0.018, 0.011, 0.096, 0.0, -29.2, 0);

       	SendClientMessage(playerid, 0xe061e1ff, "[ LEAN ] {ffffff}Dostal si do ruky f¾au leanu! Pravým tlaèidlom myi môe zaèa pi.");
       	SendClientMessage(playerid, 0xe061e1ff, "[ LEAN ] {ffffff}Lean schová stlaèením ENTER. Nezmae sa ti, iba schová.");
       	SendClientMessage(playerid, 0xe061e1ff, "[ LEAN ] {ffffff}Ak má plastové poháriky, rozlej si lean do nich a pi to napríklad aj tak! (/preliat)");
	}
	else if(!strcmp(S_string, "kitkat", true))
	{
	    if(GetPlayerInventoryItem(playerid, inv_kitKatChocolate) < 1)
	        return SendError(playerid, "Tento item nemá!");

        SetPlayerInventoryItem(playerid, inv_kitKatChocolate, GetPlayerInventoryItem(playerid, inv_kitKatChocolate)-1);
        ApplyAnimation(playerid, "FOOD", "EAT_PIZZA", 4.1, false, true, true, false, 0, true);
        new
            Float:Hunger;
        ex_GetPlayerHunger(playerid, Hunger);
        if(Hunger + 30.0 > 100.0)
            ex_SetPlayerHunger(playerid, 100.0);
		else
		    ex_SetPlayerHunger(playerid, Hunger + 30.0);

        new Float:HP;
		ahac_GetPlayerHealth(playerid, HP);
		SetPlayerHealth(playerid, HP + 9.0);
		if(HP + 9.0 > 100)
 			SetPlayerHealth(playerid, 100.0);

		EnterInfo(playerid, "~w~Zjedol si ~b~cokoladu Kit Kat~w~!");
	}
	else if(!strcmp(S_string, "pringles", true))
	{
	    if(GetPlayerInventoryItem(playerid, inv_pringlesChips) < 1)
	        return SendError(playerid, "Tento item nemá!");

        SetPlayerInventoryItem(playerid, inv_pringlesChips, GetPlayerInventoryItem(playerid, inv_pringlesChips)-1);
        ApplyAnimation(playerid, "FOOD", "EAT_PIZZA", 4.1, false, true, true, false, 0, true);
        new
            Float:Hunger;
        ex_GetPlayerHunger(playerid, Hunger);
        if(Hunger + 50.0 > 100.0)
            ex_SetPlayerHunger(playerid, 100.0);
		else
		    ex_SetPlayerHunger(playerid, Hunger + 50.0);

		new Float:HP;
		ahac_GetPlayerHealth(playerid, HP);
		SetPlayerHealth(playerid, HP + 9.0);
		if(HP + 9.0 > 100)
		    SetPlayerHealth(playerid, 100.0);

		EnterInfo(playerid, "~w~Zjedol si ~b~chipsy Pringles~w~!");
	}
	else if(!strcmp(S_string, "pizza", true))
	{
	    if(GetPlayerInventoryItem(playerid, inv_pizza) < 1)
	        return SendError(playerid, "Tento item nemá!");

        SetPlayerInventoryItem(playerid, inv_pizza, GetPlayerInventoryItem(playerid, inv_pizza)-1);
        ApplyAnimation(playerid, "FOOD", "EAT_PIZZA", 4.1, false, true, true, false, 0, true);
        new
            Float:Hunger;
        ex_GetPlayerHunger(playerid, Hunger);
        if(Hunger + 100.0 > 100.0)
            ex_SetPlayerHunger(playerid, 100.0);
		else
		    ex_SetPlayerHunger(playerid, Hunger + 100.0);

		new Float:HP;
		ahac_GetPlayerHealth(playerid, HP);
		SetPlayerHealth(playerid, HP + 9.0);
		if(HP + 20.0 > 100)
		    SetPlayerHealth(playerid, 100.0);

		EnterInfo(playerid, "~w~Zjedol si ~b~pizzu~w~!");
	}
	else
        return SendClientSyntax(playerid, "/zjest [pepsi-cola-kitkat-pringles-pizza-sprite-flasaleanu]");

	return 1;
}

YCMD:zjestex(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/zjestex [1-3]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "FOOD", "EAT_BURGER", 4.1, false, true, true, false, 0, true); // /zjest
	    case 2: ApplyAnimation(playerid, "FOOD", "EAT_CHICKEN", 4.1, false, true, true, false, 0, true); // /zjest
	    case 3: ApplyAnimation(playerid, "FOOD", "EAT_PIZZA", 4.1, false, true, true, false, 0, true); // /zjest
	    default: return SendClientSyntax(playerid, "/zjestex [1-3]");
	}
	return 1;
}

YCMD:rap(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/rap [1-3]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "RAPPING", "RAP_A_LOOP", 4.1, true, false, false, false, 0, false); // /rap
	    case 2: ApplyAnimation(playerid, "RAPPING", "RAP_B_LOOP", 4.1, true, false, false, false, 0, false); // /rap
	    case 3: ApplyAnimation(playerid, "RAPPING", "RAP_C_LOOP", 4.1, true, false, false, false, 0, false); // /rap
	    default: return SendClientSyntax(playerid, "/rap [1-3]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:unaveny(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/unaveny [1-2]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "FAT", "IDLE_TIRED", 4.1, true, false, false, false, 0, true); // /unaveny
	    case 2: ApplyAnimation(playerid, "PED", "IDLE_TIRED", 4.1, true, false, false, false, 0, true); // /unaveny
	    default: return SendClientSyntax(playerid, "/unaveny [1-2]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:opriet(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/opriet [1-2]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "BD_FIRE", "M_SMKLEAN_LOOP", 4.1, true, false, false, false, 0, true); // /opriet
	    case 2: ApplyAnimation(playerid, "GANGS", "LEANIN", 4.1, false, true, true, true, 0, true); // /opriet
	    default: return SendClientSyntax(playerid, "/opriet [1-2]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:baseball(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/baseball [1-3]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "BASEBALL", "BAT_IDLE", 4.1, true, false, false, false, 0, true); // /baseball
	    case 2: ApplyAnimation(playerid, "CRACK", "BBALBAT_IDLE_01", 4.1, true, false, false, false, 0, true); // /baseball
	    case 3: ApplyAnimation(playerid, "CRACK", "BBALBAT_IDLE_02", 4.1, true, false, false, false, 0, true); // /baseball
	    default: return SendClientSyntax(playerid, "/baseball [1-3]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:reload(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/reload [1-5]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1:
		{
			ApplyAnimation(playerid, "COLT45", "COLT45_CROUCHRELOAD", 4.1, false, true, true, true, 0, true); // /reload
			canStopAnimation[playerid] = true;
			EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
		}
	    case 2: ApplyAnimation(playerid, "COLT45", "COLT45_RELOAD", 4.1, false, true, true, false, 0, true); // /reload
	    case 3: ApplyAnimation(playerid, "COLT45", "SAWNOFF_RELOAD", 4.1, false, true, true, false, 0, true); // /reload
	    case 4: ApplyAnimation(playerid, "BUDDY", "BUDDY_RELOAD", 4.1, false, true, true, false, 0, true); // /reload
	    case 5: ApplyAnimation(playerid, "BUDDY", "BUDDY_CROUCHRELOAD", 4.1, false, true, true, false, 0, true); // /reload
	    default: return SendClientSyntax(playerid, "/reload [1-5]");
	}
	return 1;
}

YCMD:sedet(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/sedet [1-7]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "ATTRACTORS", "STEPSIT_LOOP", 4.1, true, false, false, false, 0, true); // /sediet 1
	    case 2: ApplyAnimation(playerid, "BEACH", "PARKSIT_M_LOOP", 4.1, true, false, false, false, 0, true); // /sediet 2
	    case 3: ApplyAnimation(playerid, "HAIRCUTS", "BRB_SIT_LOOP", 4.1, true, false, false, false, 0, true); // /sediet 5
	    case 4: ApplyAnimation(playerid, "INT_HOUSE", "LOU_LOOP", 4.1, true, false, false, false, 0, true); // /sediet 6
	    case 5: ApplyAnimation(playerid, "INT_OFFICE", "OFF_SIT_IDLE_LOOP", 4.1, true, false, false, false, 0, true); // /sediet 7
	    case 6: ApplyAnimation(playerid, "PED", "SEAT_IDLE", 4.1, true, false, false, false, 0, 1); // sedet 1
	    case 7:
		{
		    new Float:A; GetPlayerFacingAngle(playerid, A);
		    SetPlayerFacingAngle(playerid, A + 180.0);
			ApplyAnimation(playerid, "PED", "SEAT_IDLE", 4.1, true, false, false, false, 0, 1); // sedet 1
		}
	    default: return SendClientSyntax(playerid, "/sedet [1-7]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:lezat(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/lezat [1-6]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "BEACH", "BATHER", 4.1, true, true, true, false, 0, true); // /lezat
	    case 2: ApplyAnimation(playerid, "BEACH", "LAY_BAC_LOOP", 4.1, true, false, false, false, 0, true); // /lezat
	    case 3: ApplyAnimation(playerid, "BEACH", "SITNWAIT_LOOP_W", 4.1, true, false, false, false, 0, true); // /lezat
	    case 4: ApplyAnimation(playerid, "BEACH", "PARKSIT_W_LOOP", 4.1, true, false, false, false, 0, true); // /lezat 3
	    case 5: ApplyAnimation(playerid, "INT_HOUSE", "BED_LOOP_L", 4.1, true, false, false, false, 0, true); // /lezat 6
	    case 6: ApplyAnimation(playerid, "INT_HOUSE", "BED_LOOP_R", 4.1, true, false, false, false, 0, true); // /lezat 7
	    default: return SendClientSyntax(playerid, "/lezat [1-6]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:basketball(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/basketball [1-6]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "BSKTBALL", "BBALL_DEF_JUMP_SHOT", 4.1, false, true, true, false, 0, true); // /basketball
	    case 2: ApplyAnimation(playerid, "BSKTBALL", "BBALL_DEF_LOOP", 4.1, true, true, true, false, 0, true); // /basketball
	    case 3: ApplyAnimation(playerid, "BSKTBALL", "BBALL_DNK", 4.1, false, true, true, false, 0, true); // /basketball
	    case 4: ApplyAnimation(playerid, "BSKTBALL", "BBALL_IDLELOOP", 4.1, true, true, true, false, 0, true); // /basketball
	    case 5: ApplyAnimation(playerid, "BSKTBALL", "BBALL_JUMP_SHOT", 4.1, false, true, true, false, 0, true); // /basketball
	    case 6: ApplyAnimation(playerid, "BSKTBALL", "BBALL_PICKUP", 4.1, false, true, true, false, 0, true); // /basketball
	    default: return SendClientSyntax(playerid, "/basketball [1-6]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:zamavat(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/zamavat [1-4]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "BD_FIRE", "BD_GF_WAVE", 4.1, false, false, false, false, 0, true); // /zamavat
	    case 2: ApplyAnimation(playerid, "KISSING", "BD_GF_WAVE", 4.1, false, false, false, false, 0, false); // /zamavat
	    case 3: ApplyAnimation(playerid, "KISSING", "GFWAVE2", 4.1, false, false, false, false, 0, false); // /zamavat
	    case 4: ApplyAnimation(playerid, "ON_LOOKERS", "WAVE_LOOP", 4.1, true, false, false, false, 0, false); // /zamavat
	    default: return SendClientSyntax(playerid, "/zamavat [1-4]");
	}
	return 1;
}

YCMD:tancovat(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/tancovat [1-15]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "DANCING", "DANCE_LOOP", 4.1, true, true, true, false, 0, true); // /tancovat
	    case 2: ApplyAnimation(playerid, "DANCING", "DAN_DOWN_A", 4.1, true, true, true, false, 0, true); // /tancovat
	    case 3: ApplyAnimation(playerid, "DANCING", "DAN_LEFT_A", 4.1, true, true, true, false, 0, true); // /tancovat
	    case 4: ApplyAnimation(playerid, "DANCING", "DAN_LOOP_A", 4.1, true, true, true, false, 0, true); // /tancovat
	    case 5: ApplyAnimation(playerid, "DANCING", "DAN_RIGHT_A", 4.1, true, true, true, false, 0, true); // /tancovat
	    case 6: ApplyAnimation(playerid, "DANCING", "DAN_UP_A", 4.1, true, true, true, false, 0, true); // /tancovat
	    case 7: ApplyAnimation(playerid, "DANCING", "DNCE_M_A", 4.1, true, true, true, false, 0, true); // /tancovat
	    case 8: ApplyAnimation(playerid, "DANCING", "DNCE_M_B", 4.1, true, true, true, false, 0, true); // /tancovat
	    case 9: ApplyAnimation(playerid, "DANCING", "DNCE_M_C", 4.1, true, true, true, false, 0, true); // /tancovat
	    case 10: ApplyAnimation(playerid, "DANCING", "DNCE_M_D", 4.1, true, true, true, false, 0, true); // /tancovat
	    case 11: ApplyAnimation(playerid, "DANCING", "DNCE_M_E", 4.1, true, true, true, false, 0, true); // /tancovat
	    case 12: SetPlayerSpecialAction(playerid, 5);
	    case 13: SetPlayerSpecialAction(playerid, 6);
	    case 14: SetPlayerSpecialAction(playerid, 7);
	    case 15: SetPlayerSpecialAction(playerid, 8);
	    default: return SendClientSyntax(playerid, "/tancovat [1-15]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:rukyhore(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);

	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:strip(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/strip [1-14]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "STRIP", "STRIP_A", 4.1, true, false, false, false, 0, true); // /strip
	    case 2: ApplyAnimation(playerid, "STRIP", "STRIP_B", 4.1, true, false, false, false, 0, true); // /strip
	    case 3: ApplyAnimation(playerid, "STRIP", "STRIP_C", 4.1, true, false, false, false, 0, true); // /strip
	    case 4: ApplyAnimation(playerid, "STRIP", "STRIP_D", 4.1, true, false, false, false, 0, true); // /strip
	    case 5: ApplyAnimation(playerid, "STRIP", "STRIP_E", 4.1, true, false, false, false, 0, true); // /strip
	    case 6: ApplyAnimation(playerid, "STRIP", "STRIP_F", 4.1, true, false, false, false, 0, true); // /strip
	    case 7: ApplyAnimation(playerid, "STRIP", "STRIP_G", 4.1, true, false, false, false, 0, true); // /strip
	    case 8: ApplyAnimation(playerid, "STRIP", "STR_A2B", 4.1, true, false, false, false, 0, true); // /strip
	    case 9: ApplyAnimation(playerid, "STRIP", "STR_B2C", 4.1, true, false, false, false, 0, true); // /strip
	    case 10: ApplyAnimation(playerid, "STRIP", "STR_C1", 4.1, true, false, false, false, 0, true); // /strip
	    case 11: ApplyAnimation(playerid, "STRIP", "STR_C2", 4.1, true, false, false, false, 0, true); // /strip
	    case 12: ApplyAnimation(playerid, "STRIP", "STR_LOOP_A", 4.1, true, false, false, false, 0, true); // /strip
	    case 13: ApplyAnimation(playerid, "STRIP", "STR_LOOP_B", 4.1, true, false, false, false, 0, true); // /strip
	    case 14: ApplyAnimation(playerid, "STRIP", "STR_LOOP_C", 4.1, true, false, false, false, 0, true); // /strip
	    default: return SendClientSyntax(playerid, "/strip [1-14]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:ruky(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/ruky [1-11]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "CHAINSAW", "IDLE_CSAW", 4.1, true, true, true, true, 0, true); // /ruky
	    case 2: ApplyAnimation(playerid, "COP_AMBIENT", "COPLOOK_LOOP", 4.1, true, false, false, false, 0, true); // /ruky
	    case 3: ApplyAnimation(playerid, "COP_AMBIENT", "COPLOOK_THINK", 4.1, true, false, false, false, 0, true); // /ruky
	    case 4: ApplyAnimation(playerid, "COP_AMBIENT", "COPLOOK_WATCH", 4.1, false, false, false, true, 0, true); // /ruky
	    case 5: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE_01", 4.1, false, false, false, true, 0, true); // /ruky
	    case 6: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE_02", 4.1, false, false, false, true, 0, true); // /ruky
	    case 7: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE_03", 4.1, false, false, false, true, 0, true); // /ruky
	    case 8: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE", 4.1, true, false, false, false, 0, true); // /ruky
	    case 9: ApplyAnimation(playerid, "GRAVEYARD", "MRNF_LOOP", 4.1, true, false, false, false, 0, false); // /ruky
	    case 10: ApplyAnimation(playerid, "GRAVEYARD", "MRNM_LOOP", 4.1, true, false, false, false, 0, false); // /ruky
	    case 11: ApplyAnimation(playerid, "GRAVEYARD", "PRST_LOOPA", 4.1, true, false, false, false, 0, false); // /ruky
	    default: return SendClientSyntax(playerid, "/ruky [1-11]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:sup(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/sup [1-9]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "GANGS", "HNDSHKAA", 4.1, false, true, true, false, 0, true); // /sup
	    case 2: ApplyAnimation(playerid, "GANGS", "HNDSHKBA", 4.1, false, true, true, false, 0, true); // /sup
	    case 3: ApplyAnimation(playerid, "GANGS", "HNDSHKCA", 4.1, false, true, true, false, 0, true); // /sup
	    case 4: ApplyAnimation(playerid, "GANGS", "HNDSHKCB", 4.1, false, true, true, false, 0, true); // /sup
	    case 5: ApplyAnimation(playerid, "GANGS", "HNDSHKDA", 4.1, false, true, true, false, 0, true); // /sup
	    case 6: ApplyAnimation(playerid, "GANGS", "HNDSHKEA", 4.1, false, true, true, false, 0, true); // /sup
	    case 7: ApplyAnimation(playerid, "GANGS", "HNDSHKFA", 4.1, false, true, true, false, 0, true); // /sup
	    case 8: ApplyAnimation(playerid, "GANGS", "HNDSHKFA_SWT", 4.1, false, true, true, false, 0, true); // /sup
	    case 9: ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 3.0, 0, 0, 0, 0, 0, 1);
	    default: return SendClientSyntax(playerid, "/sup [1-9]");
	}
	return 1;
}

YCMD:gsign(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/gsign [1-10]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "GHANDS", "GSIGN1", 4.1, false, false, false, false, 0, false); // /gsign
	    case 2: ApplyAnimation(playerid, "GHANDS", "GSIGN1LH", 4.1, false, false, false, false, 0, false); // /gsign
	    case 3: ApplyAnimation(playerid, "GHANDS", "GSIGN2", 4.1, false, false, false, false, 0, false); // /gsign
	    case 4: ApplyAnimation(playerid, "GHANDS", "GSIGN2LH", 4.1, false, false, false, false, 0, false); // /gsign
	    case 5: ApplyAnimation(playerid, "GHANDS", "GSIGN3", 4.1, false, false, false, false, 0, false); // /gsign
	    case 6: ApplyAnimation(playerid, "GHANDS", "GSIGN3LH", 4.1, false, false, false, false, 0, false); // /gsign
	    case 7: ApplyAnimation(playerid, "GHANDS", "GSIGN4", 4.1, false, false, false, false, 0, false); // /gsign
	    case 8: ApplyAnimation(playerid, "GHANDS", "GSIGN4LH", 4.1, false, false, false, false, 0, false); // /gsign
	    case 9: ApplyAnimation(playerid, "GHANDS", "GSIGN5", 4.1, false, false, false, false, 0, false); // /gsign
	    case 10: ApplyAnimation(playerid, "GHANDS", "GSIGN5LH", 4.1, false, false, false, false, 0, false); // /gsign
	    default: return SendClientSyntax(playerid, "/gsign [1-10]");
	}
	return 1;
}

YCMD:zraneny(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/zraneny [1-9]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "CRACK", "CRCKDETH1", 4.1, false, true, true, true, 0, true); // /zraneny
	    case 2: ApplyAnimation(playerid, "CRACK", "CRCKDETH2", 4.1, true, true, true, true, 0, true); // /zraneny
	    case 3: ApplyAnimation(playerid, "CRACK", "CRCKDETH3", 4.1, false, true, true, true, 0, true); // /zraneny
	    case 4: ApplyAnimation(playerid, "CRACK", "CRCKDETH4", 4.1, false, true, true, true, 0, true); // /zraneny
	    case 5: ApplyAnimation(playerid, "CRACK", "CRCKIDLE1", 4.1, true, false, false, true, 0, true); // /zraneny
	    case 6: ApplyAnimation(playerid, "CRACK", "CRCKIDLE2", 4.1, true, false, false, true, 0, true); // /zraneny
	    case 7: ApplyAnimation(playerid, "CRACK", "CRCKIDLE3", 4.1, true, false, false, true, 0, true); // /zraneny
	    case 8: ApplyAnimation(playerid, "CRACK", "CRCKIDLE4", 4.1, true, false, false, true, 0, true); // /zraneny
	    case 9: ApplyAnimation(playerid, "SWEET", "SWEET_INJUREDLOOP", 4.1, true, false, false, false, 0, true); // /zraneny
	    default: return SendClientSyntax(playerid, "/zraneny [1-9]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:vziat(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/vziat [1-5]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "BAR", "BARSERVE_BOTTLE", 4.1, false, false, false, false, 0, true); // /vziat
	    case 2: ApplyAnimation(playerid, "BAR", "BARSERVE_GIVE", 4.1, false, false, false, false, 0, true); // /vziat
	    case 3: ApplyAnimation(playerid, "BAR", "BARSERVE_GLASS", 4.1, false, false, false, false, 0, true); // /vziat
	    case 4: ApplyAnimation(playerid, "BD_FIRE", "WASH_UP", 4.1, false, true, true, false, 0, true); // /vziat
	    case 5: ApplyAnimation(playerid, "CRIB", "CRIB_USE_SWITCH", 4.1, false, false, false, false, 0, true); // /vziat
	    default: return SendClientSyntax(playerid, "/vziat [1-5]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:vypitex(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/vypitex [1-2]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "BAR", "DNK_STNDF_LOOP", 4.1, false, false, false, false, 0, true); // /vypit
	    case 2: ApplyAnimation(playerid, "BAR", "DNK_STNDM_LOOP", 4.1, false, false, false, false, 0, true); // /vypit
	    default: return SendClientSyntax(playerid, "/vypitex [1-2]");
	}
	return 1;
}

YCMD:fandit(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/fandit [1-2]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "RIOT", "RIOT_ANGRY_B", 4.1, true, false, false, false, 0, false); // /hype
	    case 2: ApplyAnimation(playerid, "RIOT", "RIOT_CHANT", 4.1, true, false, false, false, 0, false); // /hype
	    default: return SendClientSyntax(playerid, "/fandit [1-2]");
	}
	return 1;
}

YCMD:nastavit(playerid, params[], help)
{
    if(!IsAbleToApplyOnFootAnim(playerid))
	    return SendError(playerid, "Teraz nemôe pouíva túto animáciu!");

	if(!strlen(params))
		return SendClientSyntax(playerid, "/nastavit [1-2]");

	new I_var = strval(params);

	switch(I_var)
	{
	    case 1: ApplyAnimation(playerid, "BD_FIRE", "WASH_UP", 4.1, true, true, true, false, 0, true); // /nastavit
	    case 2: ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_LOOP", 4.1, true, false, false, false, 0, true); // /nastavit
	    default: return SendClientSyntax(playerid, "/nastavit [1-2]");
	}
	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:walk(playerid, params[], help) {
    if(!strlen(params))
		return SendClientSyntax(playerid, "/walk [1-13]");

	new var = strval(params);

	switch(var)
	{
	    case 1: ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1,1);
	 	case 3: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1,1);
		case 5: ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1,1);
		case 6: ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1,1);
		case 7: ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1,1);
		case 8: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1,1);
		case 9: ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1,1);
		case 10: ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1,1);
		case 11: ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1,1);
		case 12: ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1,1);
		case 13: ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1,1);
		default: return SendClientSyntax(playerid, "/walk [1-13]");
	}

	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:walkstyle(playerid, params[], help) {
    if(!strlen(params))
		return SendClientSyntax(playerid, "/walkstyle [0-13]");

	if(strval(params) < 0 || strval(params) > 13)
	    return SendClientSyntax(playerid, "/walkstyle [0-13]");

	SetPlayerWalkingStyle(playerid, strval(params));

	EnterInfo(playerid, "~w~Zmenil si si styl chodze. Chodit vybranym stylom budes kym ho nevypnes prikazom ~r~/walkstyle 0~w~.");
	return 1;
}

YCMD:beh(playerid, params[], help) {
    if(!strlen(params))
		return SendClientSyntax(playerid, "/beh(/jog) [1-2]");

	new var = strval(params);

	switch(var)
	{
	    case 1: ApplyAnimation(playerid,"PED","JOG_maleA",4.1,1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PED","JOG_femaleA",4.1,1,1,1,1,1,1);
		default: return SendClientSyntax(playerid, "/beh(/jog) [1-2]");
	}

	canStopAnimation[playerid] = true;
	EnterInfo(playerid, "~b~Animaciu mozes zrusit prikazom ~w~/stopanim ~b~alebo tlacidlom ~w~~k~~VEHICLE_ENTER_EXIT~~b~.");
	return 1;
}

YCMD:nabrat(playerid, params[], help)
{

	if(GetPlayerFaction(playerid) == 0)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(GetPlayerFactionRank(playerid) < 9)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
		I_var,
		string[128];

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/nabrat [èas mena/id]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(I_var, playerid, 3.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	if(GetPlayerFaction(I_var) != 0)
	    return SendError(playerid, "Tento hráè u je v nejakej frakcii!");

    if(playerid == I_var)
	    return SendError(playerid, "Tento príkaz nemôe aplikova na seba!");

	give_LegalFaction[playerid] = I_var;

	SetTimerEx("GivePlayerLegalFactionTimer", 1000 * 15, false, "ii", playerid, I_var);

	format(string, 128, "> Odoslal si ponuku hráèovi %s na nabratie do frakcie! Ponuka uplynie za 15 sekúnd.", GetPlayerNameEx(I_var, USE_MASK));
	SCFM(playerid, COLOR_GREY, string);

	format(string, 128, "> %s a chce nabra do frakcie %s!", GetPlayerNameEx(playerid, USE_MASK), factEnum[GetPlayerFaction(playerid)][fact_Name]);
	SCFM(I_var, COLOR_GREY, string);

	format(string, 128, "> Pre prijatie ponuky poui príkaz /accept frakcia %d! Ponuka uplynie za 15 sekúnd.", ReturnID(playerid));
	SCFM(I_var, COLOR_GREY, string);

	return 1;

}

YCMD:nabratnelegal(playerid, params[], help)
{

	if(GetPlayerIllegalFaction(playerid) == 0)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(GetPlayerIllegalFactionRank(playerid) < 9)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
		I_var,
		string[128];

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/nabratnelegal [èas mena/id]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(I_var, playerid, 3.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	if(GetPlayerIllegalFaction(I_var) != 0)
	    return SendError(playerid, "Tento hráè u je v nejakej frakcii!");

    if(playerid == I_var)
	    return SendError(playerid, "Tento príkaz nemôe aplikova na seba!");

	give_NeLegalFaction[playerid] = I_var;

	SetTimerEx("GivePlayerNeLegalFactionTimer", 1000 * 15, false, "ii", playerid, I_var);

	format(string, 128, "> Odoslal si ponuku hráèovi %s na nabratie do nelegálnej frakcie! Ponuka uplynie za 15 sekúnd.", GetPlayerNameEx(I_var, USE_MASK));
	SCFM(playerid, COLOR_GREY, string);

	format(string, 128, "> %s a chce nabra do nelegálnej frakcie %s!", GetPlayerNameEx(playerid, USE_MASK), i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Name]);
	SCFM(I_var, COLOR_GREY, string);

	format(string, 128, "> Pre prijatie ponuky poui príkaz /accept nelegalka <%d>! Ponuka uplynie za 15 sekúnd.", ReturnID(playerid));
	SCFM(I_var, COLOR_GREY, string);

	return 1;

}

YCMD:nastavitfrakciu(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) <5)
	    return SendClientCantUseCommand(playerid);

	new
	    I_var,
	    I_var1;

	if(sscanf(params,"dd",I_var, I_var1))
		return SendClientSyntax(playerid, "/nastavitfrakciu [id hraca] [id frakcie (/frakcie)]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	if(I_var1 < 0 || (I_var1 > 0 && strlen(factEnum[I_var1][fact_Name]) < 3))
	    return SendError(playerid, "Zadaná frakcia neexistuje!");

	SetPlayerFaction(I_var, I_var1);

	if(I_var1 == 0)
	{
	    SetPlayerFactionTitle(I_var, "Nic");
	    SetPlayerFactionRank(I_var, 0);
	    SetPlayerFactionBadge(I_var, 0);
	}
	else
	{
	    SetPlayerFactionTitle(I_var, "Novacik");
	    SetPlayerFactionRank(I_var, 1);
	    SetPlayerFactionBadge(I_var, 0);
	}

	g_I_VypovedUnix[I_var] = 0;
	IsWorking[I_var] = 0;

	ex_SetPlayerSkin(I_var, I_pSkin_Civil[I_var]);

	new
	    S_zamestnanie[64];

	if(strlen(factEnum[I_var1][fact_Name]) < 3) format(S_zamestnanie, 64, "Nezamestnany");
	else format(S_zamestnanie, 64, factEnum[I_var1][fact_Name]);

	SCFM(playerid, 0xD0D0D0FF, "> Zmenil si zamestnanie(frakciu) hráèovi %s, novým zamestnaním je: \"%s\"!", GetPlayerNameEx(I_var, NO_MASK), S_zamestnanie);
	SCFM(I_var, 0xD0D0D0FF, "> %s ti zmenil zamestnanie(frakciu), novým zamestnaním je: \"%s\"!", GetPlayerNameEx(playerid, NO_MASK), S_zamestnanie);
	FormatLog(log_type_admin, "%s(%s) zmenil frakciu %s(%s) na %s.", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), S_zamestnanie);
	return 1;
}

YCMD:nastavitnelegalku(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    I_var,
	    I_var1;

	if(sscanf(params,"dd",I_var, I_var1))
		return SendClientSyntax(playerid, "/nastavitnelegalku [id hraca] [id frakcie (/nelegalky)]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	if(I_var1 < 0 || (I_var1 > 0 && strlen(i_factEnum[I_var1][ifact_Name]) < 3))
	    return SendError(playerid, "Zadaná frakcia neexistuje!");

	SetPlayerIllegalFaction(I_var, I_var1);

	if(I_var1 == 0)
	{
	    SetPlayerIllegalFactionRank(I_var, 0);
	}
	else
	{
	    SetPlayerIllegalFactionRank(I_var, 1);
	}

	new
	    S_zamestnanie[64];

	if(strlen(i_factEnum[I_var1][ifact_Name]) < 3) format(S_zamestnanie, 64, "Ziadna");
	else format(S_zamestnanie, 64, i_factEnum[I_var1][ifact_Name]);

	SCFM(playerid, 0xD0D0D0FF, "> Zmenil si ilegálnu frakciu hráèovi %s, nová je: \"%s\"!", GetPlayerNameEx(I_var, NO_MASK), S_zamestnanie);
	SCFM(I_var, 0xD0D0D0FF, "> %s ti zmenil ilegálnu frakciu, nová je: \"%s\"!", GetPlayerNameEx(playerid, NO_MASK), S_zamestnanie);
	FormatLog(log_type_admin, "%s(%s) zmenil nelegalnu frakciu %s(%s) na %s.", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), S_zamestnanie);
	return 1;
}

YCMD:frakcia(playerid, params[], help)
{
	if(GetPlayerFaction(playerid) == 0)
	    return SendError(playerid, "Tento príkaz môe poui len ak si zamestnaný!");

	ShowPlayerOwnFaction(playerid);
	return 1;
}


YCMD:nelegalka(playerid, params[], help)
{
	if(GetPlayerIllegalFaction(playerid) == 0)
	    return SendError(playerid, "Tento príkaz môe poui len ak si v ilegálnej frakcii!");

	ShowPlayerOwnIFaction(playerid);
	return 1;
}

function SetGaragePos(vehicleid, Float:X, Float:Y, Float:Z)
{

	SetVehiclePos(vehicleid, X, Y, Z);

	return 1;

}

DoEnterCommandSt_Garage(playerid)
{
    // VCHOD POZÍCIA + ANGLE | VÝCHOD POZÍCIA + ANGLE | VW, INTERIOR VCHODU | VW, INTERIOR VYCHODU

    for(new i; i < sizeof(st_garages); i++)
    {
        if(GetPlayerVirtualWorld(playerid) != st_garages[i][8] && GetPlayerVirtualWorld(playerid) != st_garages[i][10])
            continue;

        if(GetPlayerInterior(playerid) != st_garages[i][9] && GetPlayerInterior(playerid) != st_garages[i][11])
            continue;

		if(IsPlayerInRangeOfPoint(playerid, 5.0, Float:st_garages[i][0], Float:st_garages[i][1], Float:st_garages[i][2]))
		{

			if(st_garages[i][12] != 0 && st_garages[i][12] != GetPlayerFactionType(playerid) && GetPlayerAdminLevel(playerid) < 4)
			    return SendError(playerid, "Od tejto garáe nemá ovladaè!");

		    // Je pri vchode

		    Streamer_UpdateEx(playerid, Float:st_garages[i][4], Float:st_garages[i][5], Float:st_garages[i][6], st_garages[i][10], st_garages[i][11], STREAMER_TYPE_OBJECT, -1);

			foreach ( new x : Player )
			{
			    if(!IsPlayerInAnyVehicle(x))
			        continue;

				if(GetPlayerVehicleID(x) != GetPlayerVehicleID(playerid))
				    continue;

                SetPlayerInterior(x, st_garages[i][11]);
				SetPlayerVirtualWorld(x, st_garages[i][10]);
			}

			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), st_garages[i][10]);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), st_garages[i][11]);

			SetTimerEx("SetGaragePos", 300, false, "ifff", GetPlayerVehicleID(playerid), Float:st_garages[i][4], Float:st_garages[i][5], Float:st_garages[i][6]+ 0.7);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), Float:st_garages[i][7]);


			new nick[25];
			strcat(nick,ReturnName(playerid));
			strdel(nick,strfind(nick,"_",true),25);

			EnterInfo(playerid, "Ak chces vyjst, pouzi prikaz ~b~/exit~w~ pri garazovych vratach.", 3500, 1);

			SetCameraBehindPlayer(playerid);

			return 0;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, Float:st_garages[i][4], Float:st_garages[i][5], Float:st_garages[i][6]))
		{

		    if(st_garages[i][12] != 0 && st_garages[i][12] != GetPlayerFactionType(playerid) && GetPlayerAdminLevel(playerid) < 4)
			    return SendError(playerid, "Od tejto garáe nemá ovladaè!");

		    // Je pri východe

		    Streamer_UpdateEx(playerid, Float:st_garages[i][0], Float:st_garages[i][1], Float:st_garages[i][2], st_garages[i][8], st_garages[i][9], STREAMER_TYPE_OBJECT, -1);

            foreach ( new x : Player )
			{
			    if(!IsPlayerInAnyVehicle(x))
			        continue;

				if(GetPlayerVehicleID(x) != GetPlayerVehicleID(playerid))
				    continue;

                SetPlayerInterior(x, st_garages[i][9]);
				SetPlayerVirtualWorld(x, st_garages[i][8]);
			}

			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), st_garages[i][8]);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), st_garages[i][9]);

            SetTimerEx("SetGaragePos", 300, false, "ifff", GetPlayerVehicleID(playerid), Float:st_garages[i][0], Float:st_garages[i][1], Float:st_garages[i][2]+ 0.7);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), Float:st_garages[i][3]);


			new nick[25];
			strcat(nick,ReturnName(playerid));
			strdel(nick,strfind(nick,"_",true),25);

			EnterInfo(playerid, "Ak chces vojst, pouzi prikaz ~b~/enter~w~ pri garazovych vratach.", 3500, 1);

			SetCameraBehindPlayer(playerid);

			return 0;
		}
    }

    return 1;
}

YCMD:spasy(playerid, params[], help)
{
	new I_var;
	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/spasy [id]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

    if(!IsPlayerNearPlayer(I_var, playerid, 3.85))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

    if(hasSeatbelt[I_var] == true)
        SendSuccess(playerid, "Tento hrac ma zapnute pasy!");
	else
	    SendError(playerid, "Tento hrac nema zapnute pasy!");

	return 1;
}

YCMD:pasy(playerid, params[], help)
{
    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) == 4 || GetPlayerState(playerid) == 5 || GetPlayerState(playerid) == 6)
	    return SendError(playerid, "Nesedí v aute!");

	if(GetPlayerState(playerid) != 2 && GetPlayerState(playerid) != 3)
	    return SendError(playerid, "Nesedí v aute!");

	switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
	{
	    case
	        0,
	        406,
	        430,
	        432,
	        435,
	        441,
	        446,
	        448,
	        449,
	        450,
	        452,
	        453,
	        454,
			457,
			461,
			462,
			463,
			464,
			465,
			468,
			471,
			472,
			473,
			481,
			484,
			485,
			486,
			493,
			501,
			509,
			510,
			521,
			522,
			523,
			530,
			531,
			532,
			537,
			538,
			539,
			564,
			569,
			570,
			572,
			574,
			581,
			583,
			584,
			586,
			590,
			591,
			594,
			595,
			601,
			604,
			605,
			606,
			607,
			608,
			610,
			611:
		{
		    SendError(playerid, "Toto vozidlo nemá pásy!");
		    return 1;
		}
	}

    new
		S_finalString[128 + 25 + 5];

	new S_first[25];
	if(B_playerHasMask[playerid] == false) {
	    strcat(S_first, ReturnName(playerid));
	    strdel(S_first,strfind(S_first,"_",true),25);
	} else {
	    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
	}

	if(hasSeatbelt[playerid] == true)
	{
	    hasSeatbelt[playerid] = false;

	    format(S_finalString, sizeof(S_finalString), "AME: * %s si odopína pásy.", S_first);
	    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

		format(S_finalString, sizeof(S_finalString), "* %s si odopína pásy.", S_first);
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

	}
	else
	{
	    hasSeatbelt[playerid] = true;

	    format(S_finalString, sizeof(S_finalString), "AME: * %s si zapína pásy.", S_first);
	    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

		format(S_finalString, sizeof(S_finalString), "* %s si zapína pásy.", S_first);
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);
	}

	return 1;
}

YCMD:svetlo(playerid, params[], help)
{

    foreach( new i : Houses ) {
    	if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;

		if(GetPlayerVirtualWorld(playerid) == houseEnum[i][ho_PSC])
		{

		    houseEnum[i][ho_Light] = !houseEnum[i][ho_Light];

		    new
		        S_finalString[128];

            if(houseEnum[i][ho_Light] == 0)
		    	format(S_finalString, sizeof(S_finalString), "* %s zhasol.", GetPlayerNameEx(playerid, USE_MASK));
			else
			    format(S_finalString, sizeof(S_finalString), "* %s zaal svetlo.", GetPlayerNameEx(playerid, USE_MASK));

   			SendLocalMessage(playerid,ME_CHAT_RANGE*100,COLOR_VIOLET, S_finalString);

			foreach( new p : Player )
			{
			    if(GetPlayerVirtualWorld(p) != houseEnum[i][ho_PSC])
			        continue;

				if(houseEnum[i][ho_Light] == 0)
				    PlayerTextDrawShow(p, houseSwitch[p]);
				else
				    PlayerTextDrawHide(p, houseSwitch[p]);

			}

			return 1;
		}
	}

	SendError(playerid, "Tento príkaz nemôe poui!");

	return 1;
}

YCMD:snakecam(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(!IsPlayerWorking(playerid) && GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(issnakecam[playerid] == false)
	{
	    GetPlayerPos(playerid, spec_Pos[playerid][0], spec_Pos[playerid][1], spec_Pos[playerid][2]);
		spec_World[playerid][0] = GetPlayerVirtualWorld(playerid);
		spec_World[playerid][1] = GetPlayerInterior(playerid);

        if(IsPlayerInAnyVehicle(playerid))
		{
			spec_Vehicle[playerid][0] = GetPlayerVehicleID(playerid);
			spec_Vehicle[playerid][1] = GetPlayerVehicleSeat(playerid);
		}
		else
		    spec_Vehicle[playerid][0] = -1;

		ahac_GetPlayerHealth(playerid, spec_Vitals[playerid][0]);
		ex_GetPlayerHunger(playerid, spec_Vitals[playerid][1]);
		ahac_GetPlayerArmour(playerid, spec_Vitals[playerid][2]);

		for(new x; x < MAX_WEAPON_SLOTS; x++)
	    {

            tg_datax[playerid][x][0] = playerWeapons[playerid][x][pweapons_WeaponId];
			tg_datax[playerid][x][2] = playerWeapons[playerid][x][pweapons_AmmoGiven];
			tg_datax[playerid][x][1] = playerWeapons[playerid][x][pweapons_Ammo];
			tg_datax[playerid][x][3] = playerWeapons[playerid][x][pweapons_SerialNumber];
			tg_datax[playerid][x][4] = playerWeapons[playerid][x][pweapons_IsWork];
			tg_datax[playerid][x][5] = playerWeapons[playerid][x][pweapons_IsPermit];
			format(tg_originx[playerid][x], 128, playerWeapons[playerid][x][pweapons_Origin]);

		}

		//////////////////////////////////////////////////////////////////////

	    new
	        Float:X, Float:Y, Float:Z, Float:Angle,
	        VirtualWorld, Interior,

	        found = 0
		;

		foreach( new i : Houses )
		{
		    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
			if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
			if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 1.5, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;

			X = houseIntList[houseEnum[i][ho_InteriorID]][0];
			Y = houseIntList[houseEnum[i][ho_InteriorID]][1];
			Z = houseIntList[houseEnum[i][ho_InteriorID]][2];
			Angle = houseIntList[houseEnum[i][ho_InteriorID]][3];
			Interior = floatround(houseIntList[houseEnum[i][ho_InteriorID]][5], floatround_round);
			VirtualWorld = houseEnum[i][ho_PSC];

			found = 1;

			break;
		}

		if(found != 1)
		{
		    foreach( new i : Businesses ) {
			    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
				if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
				if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

				X = intList[businessEnum[i][bz_InteriorID]][0];
				Y = intList[businessEnum[i][bz_InteriorID]][1];
				Z = intList[businessEnum[i][bz_InteriorID]][2];
				Angle = intList[businessEnum[i][bz_InteriorID]][3];
				Interior = floatround(intList[businessEnum[i][bz_InteriorID]][5], floatround_round);
				VirtualWorld = businessEnum[i][bz_Address];

				found = 1;

				break;
			}
		}

		if(found != 1)
		{
		    foreach( new i : Garages )
			{
			    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
				if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
				if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, garageEnum[i][ga_vX], garageEnum[i][ga_vY], garageEnum[i][ga_vZ])) continue;

				X = garageIntList[garageEnum[i][ga_InteriorID]][0];
				Z = garageIntList[garageEnum[i][ga_InteriorID]][1];
				Z = garageIntList[garageEnum[i][ga_InteriorID]][2];
				Angle = garageIntList[garageEnum[i][ga_InteriorID]][3];
				Interior = floatround(garageIntList[garageEnum[i][ga_InteriorID]][8], floatround_round);
				VirtualWorld = garageEnum[i][ga_PSC];

				found = 1;

				break;
			}
		}

		if(found != 1)
		    return SendError(playerid, "Tu nemôe poui snakecam!");

		SetPlayerVirtualWorld(playerid, VirtualWorld);
		SetPlayerInterior(playerid, Interior);
		PreventSpectate(playerid);
		
		snakecamdata[playerid][0] = X;
		snakecamdata[playerid][1] = Y;
		snakecamdata[playerid][2] = Z;
		snakecamdata[playerid][3] = X + 5.0 * floatsin(-Angle, degrees);
		snakecamdata[playerid][4] = Y + 5.0 * floatcos(-Angle, degrees);
		snakecamdata[playerid][5] = Z - 0.8;
		snakecamdata[playerid][6] = Angle;
		SetPlayerCamera(playerid, snakecamdata[playerid][0], snakecamdata[playerid][1], snakecamdata[playerid][2], snakecamdata[playerid][3], snakecamdata[playerid][4], snakecamdata[playerid][5]);

		SendSuccess(playerid, "Pre vypnutie poui znova /snakecam!");

		issnakecam[playerid] = true;

		new
		    S_msg[144];
		format(S_msg, 144, "> %s voiel do reimu snake cam!", GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,20.0,COLOR_GREY,S_msg);
	}
	else
	{
	    TogglePlayerSpectating(playerid, false);
	}

	SendError(playerid, "Nemá kam vojs!");
	return 1;
}

YCMD:enter(playerid, params[], help)
{

	if(!IsPlayerInAnyVehicle(playerid))
	{

		if(IsPlayerInDynamicMenu(playerid, menut_fdhq_patro))
		{
		    ShowPlayerDialog(playerid, did_fdhq_patro, DIALOG_STYLE_MSGBOX, "SCHODISKO",
		        " ", "PRÍZEMIE", "1. POSCH.");
		    return 1;
		}
		else if(IsPlayerInDynamicMenu(playerid, menut_pdhq_garaz))
		{

		    if(GetPlayerVirtualWorld(playerid) == 0 && (GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerAdminLevel(playerid) < 1))
		        return SendError(playerid, "Tento vchod nemôe poui!");

		    ShowPlayerDialog(playerid, did_pdhq_garaz, DIALOG_STYLE_LIST, "VÝAH",
		        "Strecha\nStanica\nZadný vchod\nGará", "VYBRA", "SPA");
		    return 1;
		}

		if(DoEnterCommandEntrance(playerid) == 0)
		{
	 		return 1;
		}
		if(DoEnterCommandBusiness(playerid) == 0)
		{
	 		return 1;
		}

		if(DoEnterCommandHouse(playerid) == 0)
		{
	 		return 1;
		}

		if(DoEnterCommandGarage(playerid) == 0)
		{
	 		return 1;
		}

		if(DoEnterCommandArrow(playerid) == 0)
		{
	 		return 1;
		}
	}
	else
	{
		if(DoEnterCommandSt_Garage(playerid) == 0) return 1;
		if(DoEnterCommandGarage_V(playerid) == 0) return 1;
		if(DoExitCommandGarage_V(playerid) == 0) return 1;
	}
	SendError(playerid, "Nemá kam vojs!");
	return 1;
}

YCMD:exit(playerid, params[], help)
{

	if(!IsPlayerInAnyVehicle(playerid))
	{
	    if(DoExitCommandEntrance(playerid) == 0)
	    {
	 		return 1;
		}

		if(DoExitCommandBusiness(playerid) == 0)
		{
	 		return 1;
		}

		if(DoExitCommandHouse(playerid) == 0)
		{
	 		return 1;

		}

		if(DoExitCommandGarage(playerid) == 0)
		{
	 		return 1;

		}

		if(DoEnterCommandArrow(playerid) == 0)
		{
	 		return 1;
		}
	}
	else
	{
	    if(DoEnterCommandSt_Garage(playerid) == 0) return 1;
		if(DoEnterCommandGarage_V(playerid) == 0) return 1;
		if(DoExitCommandGarage_V(playerid) == 0) return 1;
	}

	SendError(playerid, "Nemá kde výjs!");
	return 1;
}

YCMD:levelup(playerid, params[], help)
{

	new potreba = 6 + (GetPlayerRoleplayLevel(playerid) * 2);

	if(g_I_XP[playerid] < potreba)
	    return SendError(playerid, "Nemá dos XP bodov! Poui /statistiky pre viac informácií.");

    g_I_XP[playerid] -= potreba;

    SCFM(playerid, 0xD0D0D0FF, "> Zakúpil si si upgrade roleplay levelu z %d na %d za %d XP bodov.", GetPlayerRoleplayLevel(playerid), GetPlayerRoleplayLevel(playerid) + 1, potreba);
	FormatLog(log_type_buythings, "%s(%s) si zakupil roleplay level %d (z %d) za %d XP bodov.", ReturnName(playerid), ReturnIP(playerid), GetPlayerRoleplayLevel(playerid) + 1, GetPlayerRoleplayLevel(playerid), potreba);

    g_I_roleplayLevel[playerid] ++;
    SetPlayerRoleplayLevel(playerid, GetPlayerRoleplayLevel(playerid));

    if(GetPlayerRoleplayLevel(playerid) >= 5)
        Achievement::Reward(playerid, ACHIEVEMENT_RP_5);

    if(GetPlayerRoleplayLevel(playerid) >= 10)
        Achievement::Reward(playerid, ACHIEVEMENT_RP_10);

    if(GetPlayerRoleplayLevel(playerid) >= 20)
        Achievement::Reward(playerid, ACHIEVEMENT_RP_20);

    if(GetPlayerRoleplayLevel(playerid) >= 50)
        Achievement::Reward(playerid, ACHIEVEMENT_RP_50);

	return 1;
}

function timer_ShowLoginTextdraw(playerid)
{
    Character::ShowSelection(playerid);

	b_playerSelectChar[playerid] = true;
	return 1;
}

YCMD:swap(playerid, params[], help)
{

    if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendError(playerid, "Nemôe poui /swap, keï si vo vozidle!");
	}

	if(B_dmg_IsInDS[playerid])
	{
	    return SendError(playerid, "Nemôe poui /swap, keï si v death mode!");
	}

	new
	    S_msg[144];
	format(S_msg, 144, "> %s (%d) pouil príkaz /swap!", GetPlayerNameEx(playerid, NO_MASK), playerid);
	SendLocalMessage(playerid,30.0,COLOR_GREY,S_msg);

	if(IsValidDynamic3DTextLabel(T3D_dmg_Label[playerid]))
	{
		DestroyDynamic3DTextLabel(T3D_dmg_Label[playerid]);
		T3D_dmg_Label[playerid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(T3D_nameTag[playerid] != Text3D:INVALID_3DTEXT_ID)
    {
		if(IsValidDynamic3DTextLabel(T3D_nameTag[playerid])) DestroyDynamic3DTextLabel(T3D_nameTag[playerid]);
		T3D_nameTag[playerid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(T3D_descTag[playerid] != Text3D:INVALID_3DTEXT_ID)
    {
		if(IsValidDynamic3DTextLabel(T3D_descTag[playerid])) DestroyDynamic3DTextLabel(T3D_descTag[playerid]);
		T3D_descTag[playerid] = Text3D:INVALID_3DTEXT_ID;
	}

	doPlayerLogout(playerid);

	if(IsPlayerIPBanned(playerid) == 0) return 1;

    SetPlayerColor(playerid, COLOR_PLAYER);
    ReloadVariables_Login(playerid);

    format(S_masterAccount[playerid], 48, ReturnName(playerid));

    PlayAudioStreamForPlayerEx(playerid, "http://countyliferoleplay.eu/INTRO.mp3", .ambient = true);

    SetPlayerLoginCamera(playerid);

    for(new i; i < 100; i++) SendClientMessage(playerid, COLOR_WHITE, " ");
    for(new i; i < sizeof(textdraw_LoginTD); i++) TextDrawShowForPlayer(playerid, textdraw_LoginTD[i]);

    Weapons::resetWeapons(playerid);

	SetTimerEx("timer_ShowLoginTextdraw",1500,false,"i",playerid);

	return 1;
}

PlayerTextDrawSetStringToUpper(playerid, PlayerText:id, text[])
{
	new textEx[1024];
	format(textEx, 1024, text);

	for(new i; i < 1024; i++)
	    textEx[i] = toupper(textEx[i]);

	PlayerTextDrawSetString(playerid, id, textEx);
	return 1;
}

YCMD:tpto(playerid, params[], help)
{
	if(GetPlayerStaffLevel(playerid) < 3)
		return SendClientCantUseCommand(playerid);

	new var,var1; if(sscanf(params,"dd",var,var1)) return SendClientSyntax(playerid, "/tpto [id] [id]");

	if(!IsPlayerLogged(var) || !IsPlayerLogged(var1))
		return SendClientPlayerOffline(playerid);

	new Float:p[3]; GetPlayerPos(var1,p[0],p[1],p[2]);
	Warp(var, p[0]+0.5,p[1],p[2]+0.1, 0, GetPlayerVirtualWorld(var1), GetPlayerInterior(var1));

	SCFM(playerid, 0xD0D0D0FF, "> Teleportoval si hráèa %s k hráèovi %s!", GetPlayerNameEx(var, NO_MASK), GetPlayerNameEx(var1, NO_MASK));
	SCFM(var, 0xD0D0D0FF, "> %s a teleportoval k hráèovi %s!", GetPlayerNameEx(playerid, NO_MASK), GetPlayerNameEx(var1, NO_MASK));
	SCFM(var1, 0xD0D0D0FF, "> %s k tebe teleportoval hráèa %s!", GetPlayerNameEx(playerid, NO_MASK), GetPlayerNameEx(var, NO_MASK));

	FormatWarnEx(playerid, 3, "AdmCmd:", COLOR_ADMINCMD, "%s teleportoval hráèa %s k hráèovi %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(var, USE_PUREIDNAME), GetPlayerNameEx(var1, USE_PUREIDNAME));
	return 1;
}

YCMD:get(playerid, params[], help)
{
	if(GetPlayerStaffLevel(playerid) < 3)
		return SendClientCantUseCommand(playerid);

	new var; if(sscanf(params,"d",var)) return SendClientSyntax(playerid, "/get [id]");

	if(!IsPlayerLogged(var))
		return SendClientPlayerOffline(playerid);

	new Float:p[3]; GetPlayerPos(playerid,p[0],p[1],p[2]);
	Warp(var, p[0]+0.5,p[1],p[2]+0.2, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

	SCFM(playerid, 0xD0D0D0FF, "> Teleportoval si hráèa %s!", GetPlayerNameEx(var, NO_MASK));
	SCFM(var, 0xD0D0D0FF, "> %s a teleportoval k nemu!", GetPlayerNameEx(playerid, NO_MASK));

	FormatWarnEx(playerid, 3, "AdmCmd:", COLOR_ADMINCMD, "%s k sebe teleportoval hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(var, USE_PUREIDNAME));
	return 1;
}

YCMD:getall(playerid, params[], help)
{
	if(GetPlayerStaffLevel(playerid) < 4)
		return SendClientCantUseCommand(playerid);

    new Float:p[3]; GetPlayerPos(playerid,p[0],p[1],p[2]);
	foreach(new var : Player)
	{
	    Achievement::Reward(var, ACHIEVEMENT_GETALL);
	    SetPlayerPos(var, p[0]+0.1,p[1],p[2]+0.2);
		SetPlayerVirtualWorld(var, GetPlayerVirtualWorld(playerid));
		SetPlayerInterior(var, GetPlayerInterior(playerid));
	}

	new
		S_finalString[128 + 24 + 12],
		titul[32] = "Hrac";



	switch(GetPlayerAdminLevel(playerid))
	{
	    case 1: format(titul, 32, "Helper");
	    case 2: format(titul, 32, "Moderator");
	    default: format(titul, 32, "Administrator");
	}

	format(S_finalString, sizeof(S_finalString), "(( %s %s k sebe teleportoval vetkých hráèov! ))", titul, GetPlayerNameEx(playerid, USE_PLAYERID));

	SendClientMessageToAll(COLOR_ADMINCMD, S_finalString);
	return 1;
}

YCMD:goto(playerid, params[], help) {
	if(GetPlayerStaffLevel(playerid) < 1)
		return SendClientCantUseCommand(playerid);

	new var; if(sscanf(params,"d",var))
		return SendClientSyntax(playerid, "/goto [id]");

	if(!IsPlayerConnected(var))
		return SendClientPlayerOffline(playerid);

	new Float:p[3]; GetPlayerPos(var,p[0],p[1],p[2]);
	Warp(playerid, p[0]+0.5,p[1],p[2]+0.2, 0, GetPlayerVirtualWorld(var), GetPlayerInterior(var));

	SCFM(playerid, 0xD0D0D0FF, "> Teleportoval si sa k hráèovi %s!", GetPlayerNameEx(var, NO_MASK));

	FormatWarn(playerid, "AdmCmd:", COLOR_ADMINCMD, "%s sa teleportoval k hráèovi %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(var, USE_PUREIDNAME));
	return 1;
}

YCMD:fixplayer(playerid, params[], help) {
	if(GetPlayerStaffLevel(playerid) < 1)
		return SendClientCantUseCommand(playerid);

	new var; if(sscanf(params,"d",var))
		return SendClientSyntax(playerid, "/fixplayer [id]");

	if(!IsPlayerLogged(var))
		return SendClientPlayerOffline(playerid);

 	SetPlayerPos(var, 2285.259, -54.464, 26.484);
	SetPlayerFacingAngle(var, 270.0);
	SetPlayerInterior(var, 0);
	SetPlayerVirtualWorld(var, 0);
	SetCameraBehindPlayer(var);
	Alcohol::inblood[var]=0;
	SetPlayerDrunkLevel(var, 0);
	CancelSelectTextDraw(var);

	SCFM(playerid, 0xD0D0D0FF, "> Opravil si tatistiky hráèa %s!", GetPlayerNameEx(var, NO_MASK));
	SCFM(var, 0xD0D0D0FF, "> %s opravil tvoje tatistiky!", GetPlayerNameEx(playerid, NO_MASK));

	FormatWarn(playerid, "AdmCmd:", COLOR_ADMINCMD, "%s opravil tatistiky hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(var, USE_PUREIDNAME));
	return 1;
}

YCMD:fix(playerid, params[], help) {
	if(GetPlayerStaffLevel(playerid) < 3)
		return SendClientCantUseCommand(playerid);

	new var; if(sscanf(params,"d",var))
		return SendClientSyntax(playerid, "/fix [id]");

	if(!IsPlayerLogged(var))
		return SendClientPlayerOffline(playerid);

	if(!IsPlayerInAnyVehicle(var))
	    return SendError(playerid, "Tento hráè nie je v iadnom vozidle!");

	RepairVehicle(GetPlayerVehicleID(var));


	SCFM(playerid, 0xD0D0D0FF, "> Opravil si vozidlo hráèa %s!", GetPlayerNameEx(var, NO_MASK));
	SCFM(var, 0xD0D0D0FF, "> %s opravil tvoje vozidlo!", GetPlayerNameEx(playerid, NO_MASK));

	FormatWarnEx(playerid, 3, "AdmCmd:", COLOR_ADMINCMD, "%s opravil vozidlo hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(var, USE_PUREIDNAME));
	return 1;
}

YCMD:doplnitpalivo(playerid, params[], help) {
	if(GetPlayerStaffLevel(playerid) < 3)
		return SendClientCantUseCommand(playerid);

	new var; if(sscanf(params,"d",var))
		return SendClientSyntax(playerid, "/doplnitpalivo [id]");

	if(!IsPlayerLogged(var))
		return SendClientPlayerOffline(playerid);

	if(!IsPlayerInAnyVehicle(var))
	    return SendError(playerid, "Tento hráè nie je v iadnom vozidle!");

    vEnum[GetPlayerVehicleID(var)][v_Fuel] = 100;
	vEnum[GetPlayerVehicleID(var)][v_FuelType] = vehicleFuelTypes[GetVehicleModel(GetPlayerVehicleID(var))-400];

	SCFM(playerid, 0xD0D0D0FF, "> Doplnil si palivo do vozidla hráèa %s!", GetPlayerNameEx(var, NO_MASK));
	SCFM(var, 0xD0D0D0FF, "> %s ti doplnil palivo do vozidla!", GetPlayerNameEx(playerid, NO_MASK));

	FormatWarnEx(playerid,3, "AdmCmd:", COLOR_ADMINCMD, "%s doplnil palivo do vozidla hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(var, USE_PUREIDNAME));
	return 1;
}

YCMD:doplnitbateriu(playerid, params[], help) {
	if(GetPlayerStaffLevel(playerid) < 3)
		return SendClientCantUseCommand(playerid);

	new var; if(sscanf(params,"d",var))
		return SendClientSyntax(playerid, "/doplnitbateriu [id]");

	if(!IsPlayerLogged(var))
		return SendClientPlayerOffline(playerid);

	if(!IsPlayerInAnyVehicle(var))
	    return SendError(playerid, "Tento hráè nie je v iadnom vozidle!");

    vEnum[GetPlayerVehicleID(var)][v_Battery] = 1000;

	SCFM(playerid, 0xD0D0D0FF, "> Doplnil si batériu do vozidla hráèa %s!", GetPlayerNameEx(var, NO_MASK));
	SCFM(var, 0xD0D0D0FF, "> %s ti doplnil batériu do vozidla!", GetPlayerNameEx(playerid, NO_MASK));

	FormatWarnEx(playerid,3, "AdmCmd:", COLOR_ADMINCMD, "%s doplnil batériu do vozidla hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(var, USE_PUREIDNAME));
	return 1;
}

YCMD:doplnitolej(playerid, params[], help) {
	if(GetPlayerStaffLevel(playerid) < 3)
		return SendClientCantUseCommand(playerid);

	new var; if(sscanf(params,"d",var))
		return SendClientSyntax(playerid, "/doplnitolej [id]");

	if(!IsPlayerLogged(var))
		return SendClientPlayerOffline(playerid);

	if(!IsPlayerInAnyVehicle(var))
	    return SendError(playerid, "Tento hráè nie je v iadnom vozidle!");

    vEnum[GetPlayerVehicleID(var)][v_Oil] = 100.0;

	SCFM(playerid, 0xD0D0D0FF, "> Doplnil si motorový olej do vozidla hráèa %s!", GetPlayerNameEx(var, NO_MASK));
	SCFM(var, 0xD0D0D0FF, "> %s ti doplnil motorový olej do vozidla!", GetPlayerNameEx(playerid, NO_MASK));

	FormatWarnEx(playerid,3, "AdmCmd:", COLOR_ADMINCMD, "%s doplnil motorový olej do vozidla hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(var, USE_PUREIDNAME));
	return 1;
}

YCMD:datnitro(playerid, params[], help) {
	if(GetPlayerStaffLevel(playerid) < 4)
		return SendClientCantUseCommand(playerid);

	new var,var1; if(sscanf(params,"dd",var,var1))
		return SendClientSyntax(playerid, "/datbateriu [id] [pocet]");

	if(!IsPlayerLogged(var))
		return SendClientPlayerOffline(playerid);

	if(!IsPlayerInAnyVehicle(var))
	    return SendError(playerid, "Tento hráè nie je v iadnom vozidle!");

	if(illegal_nos_vehicle(var))
	    return SendError(playerid, "Do tohoto vozidla nemôe naintalova NITRO!");

    vEnum[GetPlayerVehicleID(var)][v_Nitrous] = var1;

	SCFM(playerid, 0xD0D0D0FF, "> Doplnil si nitro do vozidla hráèa %s!", GetPlayerNameEx(var, NO_MASK));
	SCFM(var, 0xD0D0D0FF, "> %s ti doplnil nitro do vozidla!", GetPlayerNameEx(playerid, NO_MASK));

	FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s doplnil nitro (%d %%) do vozidla hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), var1, GetPlayerNameEx(var, USE_PUREIDNAME));
	return 1;
}

YCMD:dattaxameter(playerid, params[], help) {
	if(GetPlayerStaffLevel(playerid) < 4)
		return SendClientCantUseCommand(playerid);

	new var; if(sscanf(params,"d",var))
		return SendClientSyntax(playerid, "/dattaxameter [id]");

	if(!IsPlayerLogged(var))
		return SendClientPlayerOffline(playerid);

	if(!IsPlayerInAnyVehicle(var))
	    return SendError(playerid, "Tento hráè nie je v iadnom vozidle!");

    vEnum[GetPlayerVehicleID(var)][v_TaxameterItem] = !vEnum[GetPlayerVehicleID(var)][v_TaxameterItem];

	SCFM(playerid, 0xD0D0D0FF, "> Nastavil si taxameter hráèovi %s na hodnotu %d!", GetPlayerNameEx(var, NO_MASK), vEnum[GetPlayerVehicleID(var)][v_TaxameterItem]);
	SCFM(var, 0xD0D0D0FF, "> %s ti nastavil taxameter vo vozidle na hodnotu %d!", GetPlayerNameEx(playerid, NO_MASK), vEnum[GetPlayerVehicleID(var)][v_TaxameterItem]);

	FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s nastavil taxameter hráèovi %s na hodnotu %d.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(var, USE_PUREIDNAME), vEnum[GetPlayerVehicleID(var)][v_TaxameterItem]);
	return 1;
}

YCMD:vytvoritauto(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[42],
	    I_var,
	    I_var1 = -1,
	    I_var2 = -1,
	    I_var3 = 0,
	    I_var4 = 0,
	    I_var5 = 100,
	    Float:I_var6 = 0.0,
		Float:I_var7 = 0.0;

	if(sscanf(params, "s[42] D(-1)D(-1)D(0)D(0)D(100)F(0.0)F(0.0)", S_var, I_var1, I_var2, I_var3, I_var4, I_var5, I_var6, I_var7))
	    return SendClientSyntax(playerid, "/vytvoritauto [model] <farba1> <farba2> <siren> <frakcia> <palivo> <nitro> <mileage>");

	if(!IsNumeric(S_var))
	    I_var = ReturnVehicleID(S_var);
	else
	   	I_var = strval(S_var);

	if(I_var < 400 || I_var > 611 || I_var == INVALID_VEHICLE_ID)
		return SendError(playerid, "Takýto model neexistuje!");

	if(I_var < 400 || I_var > 611)
	    return SendError(playerid, "Model musí by v rozmedzí 400 - 611!");

	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetXYInFrontOfPlayer(playerid, Pos[0], Pos[1], 3.0);

	new
		vid,
		spz[24];

	vid = CreateVehicle(I_var, Pos[0], Pos[1], Pos[2], 90, I_var1, I_var2, -1, I_var3);

	strcat(spz, SPZ_PATTERN);

	for(new i; i < sizeof(spz); i++)
	{
		if(spz[i] == '1')
		{
		    spz[i] = getRandomLetter();
		}
		else if(spz[i] == '2')
		{
		    spz[i] = (48 + random(10));
		}

		continue;
	}

	SetVehicleNumberPlate(vid, spz);
	SetVehicleHealth(vid, 1000.0);
	veh_IsDeath[vid]=false;

	if(I_var4 == 0)
	    vEnum[vid][v_Temporary] = true;

	format(vEnum[vid][v_SPZ], 24, spz);
	format(vEnum[vid][v_Owner], 30, "-");
	vEnum[vid][v_Fuel] = I_var5;

	vEnum[vid][v_Color_1] = I_var1;
	vEnum[vid][v_Color_2] = I_var2;

	vEnum[vid][v_FuelType] = vehicleFuelTypes[GetVehicleModel(vid)-400];
	vEnum[vid][v_Battery] = 1000;
	vEnum[vid][v_Siren] = I_var3;
	vEnum[vid][v_MileAge] = I_var7;
	vEnum[vid][v_Nitrous] = I_var6;
	vEnum[vid][v_Faction] = I_var4;
	vEnum[vid][v_tree_Count] = 0;
	vEnum[vid][v_CarRadio] = 0;
	vEnum[vid][v_Oil] = 100.0;
	
	vEnum[vid][v_bazar_Price]   = 0;
	vEnum[vid][v_bazar_Buyout]   = 0;
	vEnum[vid][v_bazar_DateAdded]   = 0;
	vEnum[vid][v_bazar_BoughtFor]   = 0;
	format(vEnum[vid][v_bazar_Desc], 256, "");
	format(vEnum[vid][v_bazar_AddedBy], MAX_PLAYER_NAME+1, "");

	SetVehicleParams(vid, VEHICLE_TYPE_DOORS, 0);

	vEnum[vid][v_def_SpawnX] = Pos[0];
	vEnum[vid][v_def_SpawnY] = Pos[1];
	vEnum[vid][v_def_SpawnZ] = Pos[2];
	vEnum[vid][v_def_SpawnA] = 90.0;
	vEnum[vid][v_def_SpawnVW] = GetPlayerVirtualWorld(playerid);
	vEnum[vid][v_def_SpawnINT] = GetPlayerInterior(playerid);
	vEnum[vid][v_def_Health] = 1000.0;

	SetVehicleVirtualWorld(vid, GetPlayerVirtualWorld(playerid));
	vehicleData[vid][gVeh_Interior] = GetPlayerInterior(playerid);

	SCFM(playerid, 0xD0D0D0FF, "> Vytvoril si vozidlo %s. ID: %d, SPZ: %s, frakcia: %d!", GetVehicleName(vid), vid, spz, I_var4);

	FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s vytvoril frakèné vozidlo %s. (id %d, frakcia %d)", GetPlayerNameEx(playerid, USE_PUREIDNAME), vEnum[vid][v_SPZ], vid, GetVehicleFaction(vid));
	FormatLog(log_type_admin, "%s(%s) vytvoril frakcne vozidlo %s. (id %d, frakcia %d)", ReturnMaster(playerid), ReturnIP(playerid), vEnum[vid][v_SPZ], vid, GetVehicleFaction(vid));
	return 1;
}

YCMD:ulozitfauto(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesedí v iadnom aute!");

	if(GetVehicleFaction(GetPlayerVehicleID(playerid)) == 0)
	    return SendError(playerid, "Toto vozidlo nie je frakèné!");

	new
		S_query[1024],
		Cache:query;

	mysql_format(MYSQL, S_query, 1024, "SELECT * FROM faction_vehicles WHERE SPZ = '%e'", vEnum[GetPlayerVehicleID(playerid)][v_SPZ]);
	query = mysql_query(MYSQL, S_query);

	if(cache_num_rows() > 0)
	{

	    cache_delete(query);

	    new
	        Float:X, Float:Y, Float:Z, Float:Angle,
	        VirtualWorld = GetVehicleVirtualWorld(GetPlayerVehicleID(playerid)),
	        Interiors = ex_GetVehicleInterior(GetPlayerVehicleID(playerid)),
	        Faction = GetVehicleFaction(GetPlayerVehicleID(playerid)),
	        Siren = vEnum[GetPlayerVehicleID(playerid)][v_Siren],
	        Float:def_Health = vEnum[GetPlayerVehicleID(playerid)][v_def_Health];

		GetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), Angle);

        mysql_format(MYSQL, S_query, 1024, "UPDATE faction_vehicles SET X = '%f', Y = '%f', Z = '%f', Angle = '%f', VirtualWorld = '%d', Interior = '%d', Siren = '%d', Faction = '%d', def_Health = '%f' WHERE SPZ = '%e'",
   			X, Y, Z, Angle, VirtualWorld, Interiors, Siren, Faction, def_Health, vEnum[GetPlayerVehicleID(playerid)][v_SPZ]);

		query = mysql_query(MYSQL, S_query);

		cache_delete(query);
	}
	else
	{
	    new
			Model = GetVehicleModel(GetPlayerVehicleID(playerid)),
	        Float:X, Float:Y, Float:Z, Float:Angle,
	        VirtualWorld = GetVehicleVirtualWorld(GetPlayerVehicleID(playerid)),
		   	Interiors = vehicleData[GetPlayerVehicleID(playerid)][gVeh_Interior],
	        Faction = GetVehicleFaction(GetPlayerVehicleID(playerid)),
	        Siren = vEnum[GetPlayerVehicleID(playerid)][v_Siren],
	        Float:def_Health = vEnum[GetPlayerVehicleID(playerid)][v_def_Health];

        GetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), Angle);

		mysql_format(MYSQL, S_query, 1024, "INSERT INTO faction_vehicles (SPZ, Model, X, Y, Z, Angle, VirtualWorld, Interior, Siren, Faction, def_Health) VALUES ('%e', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%f')",
		    vEnum[GetPlayerVehicleID(playerid)][v_SPZ], Model, X, Y, Z, Angle, VirtualWorld, Interiors, Siren, Faction, def_Health);
		mysql_tquery(MYSQL, S_query);
	}

	SCFM(playerid, 0xD0D0D0FF, "> Uloil si frakèné vozidlo %s! ID: %d, frakcia: %d, ivot vozidla: %.1fHP.", vEnum[GetPlayerVehicleID(playerid)][v_SPZ], GetPlayerVehicleID(playerid), GetVehicleFaction(GetPlayerVehicleID(playerid)), vEnum[GetPlayerVehicleID(playerid)][v_def_Health]);

	FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s uloil frakèné vozidlo %s. (id %d, frakcia %d, ivot vozidla %.1fHP)", GetPlayerNameEx(playerid, USE_PUREIDNAME), vEnum[GetPlayerVehicleID(playerid)][v_SPZ], GetPlayerVehicleID(playerid), GetVehicleFaction(GetPlayerVehicleID(playerid)), vEnum[GetPlayerVehicleID(playerid)][v_def_Health]);
	FormatLog(log_type_admin, "%s(%s) uloil frakcne vozidlo %s. (id %d, frakcia %d, zivot vozidla %.1fHP)", ReturnMaster(playerid), ReturnIP(playerid), vEnum[GetPlayerVehicleID(playerid)][v_SPZ], GetPlayerVehicleID(playerid), GetVehicleFaction(GetPlayerVehicleID(playerid)), vEnum[GetPlayerVehicleID(playerid)][v_def_Health]);
	return 1;
}

YCMD:zmazatauto(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);
	    
    new
	    vehicleid = -1;

	if(!IsPlayerInAnyVehicle(playerid))
	{
	    new
		    Float:distance = 12.0,
		    Float:newdist = 0.0,

			Float:Pos[3],
			Float:vPos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		foreach ( new i : Vehicle )
		{
		    if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i))
		        continue;

			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i))
			    continue;

			GetVehicleBoot(i, vPos[0], vPos[1], vPos[2]);

			newdist = GetDistanceFromPoint(vPos[0], vPos[1], vPos[2], Pos[0], Pos[1], Pos[2]);

			if(newdist < distance)
			{
			    vehicleid = i;
			    distance = newdist;
			}

			continue;
		}
	}
	else
		vehicleid = GetPlayerVehicleID(playerid);
		
	if(vehicleid == -1)
	    return SendError(playerid, "Toto vozidlo nemôe zmaza!");
		
	if(GetVehicleFaction(vehicleid) == 0 && vEnum[vehicleid][v_rentalb_IsRental] == 0 && vEnum[vehicleid][v_Temporary] == false)
	    return SendError(playerid, "Toto vozidlo nemôe zmaza!");

	new
	    S_query[256];

	mysql_format(MYSQL, S_query, 256, "DELETE FROM faction_vehicles WHERE SPZ = '%e'",
		vEnum[vehicleid][v_SPZ]);

	new
	    Cache:quer = mysql_query(MYSQL, S_query);

	cache_delete(quer);

	SCFM(playerid, 0xD0D0D0FF, "> Zmazal si vozidlo %s! ID: %d, frakcia: %d.", vEnum[vehicleid][v_SPZ], vehicleid, GetVehicleFaction(vehicleid));

	FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s zmazal ozidlo %s. (id %d, frakcia %d)", GetPlayerNameEx(playerid, USE_PUREIDNAME), vEnum[vehicleid][v_SPZ], vehicleid, GetVehicleFaction(vehicleid));
	FormatLog(log_type_admin, "%s(%s) zmazal vozidlo %s. (id %d, frakcia %d)", ReturnMaster(playerid), ReturnIP(playerid), vEnum[vehicleid][v_SPZ], vehicleid, GetVehicleFaction(vehicleid));

    inter_DeleteVehicle(vehicleid);

	return 1;
}

YCMD:obcianskypreukaz(playerid, params[], help)
{

	if(!GetPlayerInventoryItem(playerid, inv_idCard))
	    return SendError(playerid, "Nemá obèiansky preukaz!");

	new
	    S_cardID[24],
	    S_gender[12],
		S_first[24],
		S_last[24];

	strcat(S_first, ReturnName(playerid));
    strdel(S_first,strfind(S_first,"_",true),25);

    strcat(S_last, ReturnName(playerid));
    strdel(S_last,-1,strfind(S_last, "_", true)-1);

	format(S_cardID, 24, "%d.", ID_CardID[playerid]);

	if(GetPlayerGender(playerid) == 1)
	    strcat(S_gender, "MUZ");

	else
        strcat(S_gender, "ZENA");


	PlayerTextDrawSetPreviewModel(playerid, ID_Textdraw5[playerid], I_pSkin_Civil[playerid]);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw9[playerid], S_first);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw10[playerid], S_last);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw11[playerid], ID_ReleaseDate[playerid]);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw13[playerid], ID_DateOfBirth[playerid]);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw15[playerid], ID_PlaceOfBirth[playerid]);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw17[playerid], ID_Settlement[playerid]);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw19[playerid], S_gender);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw21[playerid], S_cardID);

	PlayerTextDrawShow(playerid, ID_Textdraw0[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw1[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw2[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw3[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw4[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw5[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw6[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw7[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw8[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw9[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw10[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw11[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw12[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw13[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw14[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw15[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw16[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw17[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw18[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw19[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw20[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw21[playerid]);

	ID_Showed[playerid] = true;

	SendSuccess(playerid, "Obèiansky preukaz skryje tlaèidlom H!");
	return 1;
}

YCMD:up(playerid, params[], help)
{
	new I_var;
	if(sscanf(params,"d",I_var)) return SendClientSyntax(playerid, "/up [id]");


	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	if(!IsPlayerNearPlayer(playerid, I_var, 3.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

    ShowPlayerLicenses(playerid, I_var);

    new str[128];
	format(str,128,"* %s si vyberá svoje preukazy a ruku s ním naahuje k %s.", GetPlayerNameEx(playerid, USE_MASK), GetPlayerNameEx(I_var, USE_MASK));
    SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, str);
	return 1;
}

YCMD:preukazy(playerid, params[], help)
{

	new I_var = playerid;

	if(GetPlayerAdminLevel(playerid) > 1)
 		sscanf(params,"D(-1)",I_var);

 	if(I_var == -1) I_var = playerid;

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

    ShowPlayerLicenses(I_var, playerid);

	return 1;
}

YCMD:playerstats(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendClientCantUseCommand(playerid);

	new I_var;
	if(sscanf(params,"d",I_var)) return SendClientSyntax(playerid, "/playerstats [id]");

	if(!IsPlayerLogged(playerid))
		return SendClientPlayerOffline(playerid);

    ShowPlayerStats(I_var, playerid);

	FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s si pozrel tatistiky hráèa %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	return 1;
}

YCMD:playerinv(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendClientCantUseCommand(playerid);

	new I_var;
	if(sscanf(params,"d",I_var)) return SendClientSyntax(playerid, "/playerinv [id]");

	if(!IsPlayerLogged(playerid))
		return SendClientPlayerOffline(playerid);

    ShowPlayerInventory(I_var, playerid);

	FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s si pozrel inventár hráèa %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	return 1;
}

YCMD:obcianka(playerid, params[], help)
{

	new I_var = playerid;

	if(GetPlayerAdminLevel(playerid) > 1)
 		sscanf(params,"D(-1)",I_var);

 	if(I_var == -1) I_var = playerid;

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

    if(!GetPlayerInventoryItem(I_var, inv_idCard))
	    return SendError(playerid, "Tento hráè nemá obèiansky preukaz!");

	new
	    S_cardID[24],
	    S_gender[12],
		S_first[24],
		S_last[24];

	strcat(S_first, ReturnName(I_var));
    strdel(S_first,strfind(S_first,"_",true),25);

    strcat(S_last, ReturnName(I_var));
    strdel(S_last,-1,strfind(S_last, "_", true)-1);

	format(S_cardID, 24, "%d.", ID_CardID[I_var]);

	if(GetPlayerGender(I_var) == 1)
	    strcat(S_gender, "MUZ");

	else
        strcat(S_gender, "ZENA");


	PlayerTextDrawSetPreviewModel(playerid, ID_Textdraw5[playerid], I_pSkin_Civil[I_var]);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw9[playerid], S_first);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw10[playerid], S_last);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw11[playerid], ID_ReleaseDate[I_var]);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw13[playerid], ID_DateOfBirth[I_var]);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw15[playerid], ID_PlaceOfBirth[I_var]);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw17[playerid], ID_Settlement[I_var]);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw19[playerid], S_gender);
	PlayerTextDrawSetStringToUpper(playerid, ID_Textdraw21[playerid], S_cardID);

	PlayerTextDrawShow(playerid, ID_Textdraw0[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw1[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw2[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw3[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw4[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw5[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw6[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw7[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw8[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw9[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw10[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw11[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw12[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw13[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw14[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw15[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw16[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw17[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw18[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw19[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw20[playerid]);
	PlayerTextDrawShow(playerid, ID_Textdraw21[playerid]);

	ID_Showed[playerid] = true;

	SendSuccess(playerid, "Obèiansky preukaz skryje tlaèidlom H!");
	return 1;
}

YCMD:vynulovatobcianku(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	new I_var;
	if(sscanf(params,"d",I_var)) return SendClientSyntax(playerid, "/vynulovatobcianku [id]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(I_var);

    if(!GetPlayerInventoryItem(I_var, inv_idCard))
	    return SendError(playerid, "Tento hráè nemá obèiansky preukaz!");

	format(ID_ReleaseDate[I_var], 12, "");
	format(ID_DateOfBirth[I_var], 12, "");
	format(ID_PlaceOfBirth[I_var], 32, "");
	format(ID_Settlement[I_var], 64, "");
	ID_CardID[I_var] = 0;

	SCFM(playerid, 0xD0D0D0FF, "> Vynuloval si obèiansky preukaz hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
	SCFM(I_var, 0xD0D0D0FF, "> %s ti vynuloval obèiansky preukaz! Môe si vybavi nový v Palomino Creek Town Hall.", GetPlayerNameEx(playerid, NO_MASK));
	FormatLog(log_type_admin, "%s(%s) vynuloval obciansky preukaz %s(%s)", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var));

	return 1;
}

YCMD:ut(playerid, params[], help)
{

	new I_var;
	if(sscanf(params,"d",I_var)) return SendClientSyntax(playerid, "/ut [id]");

	MaskToId(I_var);

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	if(!IsPlayerNearPlayer(playerid, I_var, 3.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");
	    
    new str[128];
	format(str,128,"* %s si vyberá svoj technický preukaz a ruku s ním naahuje k %s.", GetPlayerNameEx(playerid, USE_MASK), GetPlayerNameEx(I_var, USE_MASK));
    SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, str);

	new mql_query[128];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM char_vehicles WHERE Owner = '%e' OR SecondOwner = '%e'", ReturnName(playerid), ReturnName(playerid));

	new
	    Cache:query = mysql_query(MYSQL, mql_query),

	    SPZ[30],
	    Model;

	SCFM(I_var, COLOR_RADIO, "> Technický preukaz patriaci %s:", GetPlayerNameEx(playerid, NO_MASK));

	for(new i; i < cache_num_rows(); i++)
	{
	    cache_get_value_name(i, "SPZ", SPZ);
	   	cache_get_value_name_int(i, "Model", Model);

	   	if(Model == 481 || Model == 509 || Model == 510)
   			SCFM(I_var, COLOR_GREY, "> (( %s (zn. %s) ))", VehicleNames[Model-400], SPZ);
		else
		    SCFM(I_var, COLOR_GREY, "> %s (%s)", VehicleNames[Model-400], SPZ);
	}

	cache_delete(query);
	return 1;
}

YCMD:technicak(playerid, params[], help)
{

	new I_var = playerid;

	if(GetPlayerAdminLevel(playerid) > 1)
	{
		sscanf(params,"D(-1)",I_var);

        if(I_var == -1) SendClientSyntax(playerid, "/technicak [id]"), I_var = playerid;

		MaskToId(I_var);

	}

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	new mql_query[128];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM char_vehicles WHERE Owner = '%e' OR SecondOwner = '%e'", ReturnName(I_var), ReturnName(I_var));

	new
	    Cache:query = mysql_query(MYSQL, mql_query),

	    SPZ[30],
	    Model;

	SCFM(playerid, COLOR_RADIO, "> Technický preukaz patriaci %s:", GetPlayerNameEx(I_var, NO_MASK));

	for(new i; i < cache_num_rows(); i++)
	{
	    cache_get_value_name(i, "SPZ", SPZ);
	   	cache_get_value_name_int(i, "Model", Model);

	   	if(Model == 481 || Model == 509 || Model == 510)
   			SCFM(playerid, COLOR_GREY, "> (( %s (zn. %s) ))", VehicleNames[Model-400], SPZ);
		else
		    SCFM(playerid, COLOR_GREY, "> %s (%s)", VehicleNames[Model-400], SPZ);
	}

	cache_delete(query);
	
	return 1;
}

YCMD:uo(playerid, params[], help)
{

	if(!GetPlayerInventoryItem(playerid, inv_idCard))
	    return SendError(playerid, "Nemá obèiansky preukaz!");

	new I_var;
	if(sscanf(params,"d",I_var)) return SendClientSyntax(playerid, "/uo [id]");

	MaskToId(I_var);

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	if(!IsPlayerNearPlayer(playerid, I_var, 3.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	new
	    S_cardID[24],
	    S_gender[12],
		S_first[24],
		S_last[24];

	strcat(S_first, ReturnName(playerid));
    strdel(S_first,strfind(S_first,"_",true),25);

    strcat(S_last, ReturnName(playerid));
    strdel(S_last,-1,strfind(S_last, "_", true)-1);

	format(S_cardID, 24, "%d.", ID_CardID[playerid]);

	if(GetPlayerGender(playerid) == 1)
	    strcat(S_gender, "MUZ");

	else
        strcat(S_gender, "ZENA");


	PlayerTextDrawSetPreviewModel(I_var, ID_Textdraw5[I_var], I_pSkin_Civil[playerid]);
	PlayerTextDrawSetStringToUpper(I_var, ID_Textdraw9[I_var], S_first);
	PlayerTextDrawSetStringToUpper(I_var, ID_Textdraw10[I_var], S_last);
	PlayerTextDrawSetStringToUpper(I_var, ID_Textdraw11[I_var], ID_ReleaseDate[playerid]);
	PlayerTextDrawSetStringToUpper(I_var, ID_Textdraw13[I_var], ID_DateOfBirth[playerid]);
	PlayerTextDrawSetStringToUpper(I_var, ID_Textdraw15[I_var], replaceChars(ID_PlaceOfBirth[playerid]));
	PlayerTextDrawSetStringToUpper(I_var, ID_Textdraw17[I_var], replaceChars(ID_Settlement[playerid]));
	PlayerTextDrawSetStringToUpper(I_var, ID_Textdraw19[I_var], S_gender);
	PlayerTextDrawSetStringToUpper(I_var, ID_Textdraw21[I_var], S_cardID);

	PlayerTextDrawShow(I_var, ID_Textdraw0[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw1[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw2[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw3[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw4[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw5[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw6[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw7[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw8[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw9[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw10[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw11[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw12[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw13[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw14[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw15[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw16[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw17[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw18[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw19[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw20[I_var]);
	PlayerTextDrawShow(I_var, ID_Textdraw21[I_var]);

	ID_Showed[I_var] = true;

	new str[128];
	format(str,128,"* %s si vyberá svoj obèiansky preukaz a ruku s ním naahuje k %s.", GetPlayerNameEx(playerid, USE_MASK), GetPlayerNameEx(I_var, USE_MASK));
    SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, str);

	SendSuccess(I_var, "Obèiansky preukaz skryje tlaèidlom H!");
	return 1;
}

YCMD:odzbrojit(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsWorking[playerid] == 0 && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params,"d",I_var))
	    return SendClientSyntax(playerid, "/odzbrojit [id]");

	MaskToId(I_var);

	if(!IsPlayerConnected(I_var))
	    return SendClientPlayerOffline(playerid);

	if(GetPlayerAdminLevel(playerid) < 3 && !IsPlayerNearPlayer(playerid, I_var, 2.5))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	Weapons::resetWeapons(I_var);

    SCFM(playerid, 0xD0D0D0FF, "> Odzbrojil si hráèa %s!", GetPlayerNameEx(I_var, NO_MASK));
	SCFM(I_var, 0xD0D0D0FF, "> %s a odzbrojil!", GetPlayerNameEx(playerid, NO_MASK));
	FormatLog(log_type_admin, "%s(%s) odzbrojil %s(%s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var));
	return 1;
}

YCMD:door(playerid, params[], help) {
	if(IsPlayerInDynamicMenu(playerid, menut_bucks_coffee)){
	    if(BuckCoffeeDoor[0] == false) MoveDynamicObject(BuckCoffeeDoorO[0], 2333.686767, 7.179112, 25.484375,1.0, 0.000000, 0.000000, 190.000000), BuckCoffeeDoor[0] = true;
		else MoveDynamicObject(BuckCoffeeDoorO[0], 2333.686767, 7.179112, 25.484375, 1.0, 0.000000, 0.000000, 360.000000), BuckCoffeeDoor[0] = false;

		if(BuckCoffeeDoor[1] == false) MoveDynamicObject(BuckCoffeeDoorO[1], 2333.696289, 5.249108, 25.484375, 1.0, 0.000000, 0.000000, 1003.000000), BuckCoffeeDoor[1] = true;
		else MoveDynamicObject(BuckCoffeeDoorO[1], 2333.696289, 5.249108, 25.484375, 1.0, 0.000000, 0.000000, 900.000000), BuckCoffeeDoor[1] = false;

		return 1;
	}

	return 1;
}

YCMD:listzbrane(playerid,params[],help)
{
    if(GetPlayerStaffLevel(playerid) < 4) return SendClientCantUseCommand(playerid);

	new
	    string[512] = "{ffffff}",
		tstr[128];

	for(new i=1; i < 47; i++)
	{
		if(i > 46)
		    break;
	    format(tstr, 128, "%d: %s\n", i, GetWeaponNameEx(i));
	    strcat(string, tstr);
	}

	ShowPlayerDialog(playerid, did_zbranezoznam, DIALOG_STYLE_MSGBOX, "ZBRANE", string, "OK", "");
    return 1;
}

YCMD:drogy(playerid,params[],help)
{
    if(GetPlayerStaffLevel(playerid) < 4) return SendClientCantUseCommand(playerid);

	new
	    string[512] = "{ffffff}",
		tstr[128];

	for(new i=1; i < MAX_DRUGS; i++)
	{
		if(i >= MAX_DRUGS)
		    break;

		if(drug_drugArray[i][drug_Type] == 0)
		    continue;

	    format(tstr, 128, "%d: %s\n", i+1, drug_getName(i));
	    strcat(string,tstr);
	}

	ShowPlayerDialog(playerid, did_zbranezoznam, DIALOG_STYLE_MSGBOX, "DROGY", string, "OK", "");
    return 1;
}

YCMD:datzbran(playerid,params[],help) {

	if(GetPlayerAdminLevel(playerid) < 4) return SendClientCantUseCommand(playerid);

	new var,var4,var3,var5[128];
	if(sscanf(params,"ddds[128]",var,var4,var3,var5)) {
	    return SendClientSyntax(playerid,"/datzbran [id] [id zbrane /listzbrane] [naboje] [dôvod]");
	} else {
	    if(IsPlayerLogged(var)) {
	        if(var4 < 1 || var4 > 46)
	            return SendClientSyntax(playerid,"/datzbran [id] [id zbrane /listzbrane] [naboje] [dôvod]");

            if(canHaveLargeWeapon(var, var4) == 0)
   	    		return SendError(playerid, "Uz ma jednu velku zbran!");

	    	new gun[48];
      		
      		new origin[128];
			format(origin,128,"Givnutie od admina %s (%s)", ReturnMaster(playerid), GetPlayerNameEx(var, NO_MASK));
			Weapons::GivePlayerNewWeapon(var, var4,var3,false,false,origin,true);
      		
            FormatWeaponLog(var, "[give] Dostal zbran %s s %d nabojmi od admina %s.", GetWeaponNameEx(var4), var3, ReturnName(playerid));

		    format(gun,48,GetWeaponNameEx(var4));

			SCFM(playerid, 0xD0D0D0FF, "> Dal si zbraò %s s %d nábojmi hráèovi %s (dôvod: %s)!", gun, var3, GetPlayerNameEx(var, NO_MASK),var5);
			SCFM(var, 0xD0D0D0FF, "> %s ti dal zbraò %s s %d nábojmi! (dôvod: %s)", GetPlayerNameEx(playerid, NO_MASK),gun,var3,var5);
			FormatWarnEx(playerid, 5, "GunCmd:", COLOR_ADMIN_GUNCMD, "%s dal zbraò %s s %d nábojmi hráèovi %s (dôvod: %s).", GetPlayerNameEx(playerid, NO_MASK), gun, var3, GetPlayerNameEx(var, NO_MASK), var5);
			FormatLog(log_type_admin, "%s(%s - %s) dal zbran %s(%d) hracovi %s(%s - %s) - dovod: %s.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), gun, var3, ReturnName(var), ReturnMaster(var),ReturnIP(var),var5);
		    return 1;
		} else SendClientPlayerOffline(playerid);
	}
	return 1;
}

YCMD:mask(playerid, params[], help)
{

	if(B_playerHasMask[playerid] == false)
	{

		if(!GetPlayerInventoryItem(playerid, inv_mask))
		    return SendError(playerid, "Nemá masku! Kúp si ju v 24/7 alebo General Store!");

		if(GetPlayerRoleplayLevel(playerid) < 2)
		    return SendError(playerid, "Nemá roleplay level 2!");

	    new
	        S_string[128];

        B_playerHasMask[playerid] = true;
	    I_playerMaskID[playerid] = (1000 + random(8999));

		format(S_string, 128, "~w~Nasadil si si masku. Budes oznaceny ako ~b~Maskovany (%d)~w~.", I_playerMaskID[playerid]);
	    EnterInfo(playerid, S_string, 3500, 2);

	    FormatLog(log_type_player, "%s(%s) si nasadil masku ID %d.", ReturnName(playerid), ReturnIP(playerid), I_playerMaskID[playerid]);

		TextDrawShowForPlayer(playerid, TD_mask);
	}
	else
	{

	    new
	        S_string[128];

        format(S_string, 128, "~w~Zlozil si si masku. Budes oznaceny ako ~b~%s (%d)~w~.", GetPlayerNameEx(playerid, NO_MASK), playerid);
	    EnterInfo(playerid, S_string, 3500, 2);

	    FormatLog(log_type_player, "%s(%s) si zlozil masku ID %d.", ReturnName(playerid), ReturnIP(playerid), I_playerMaskID[playerid]);

	    B_playerHasMask[playerid] = false;
	    I_playerMaskID[playerid] = 0;

	    TextDrawHideForPlayer(playerid, TD_mask);
	}
	return 1;
}

YCMD:datmasku(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
		return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params,"d",I_var))
		return SendClientSyntax(playerid, "/datmasku [id]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	SetPlayerInventoryItem(I_var, inv_mask, !GetPlayerInventoryItem(I_var, inv_mask));

	new
		S_string[144];

	format(S_string, 144, "> Dal si masku hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti dal masku!", GetPlayerNameEx(playerid, NO_MASK));
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s) dal masku hráèovi %s(%s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var));
    FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s dal masku hráèovi %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));

	return 1;
}

YCMD:typybiznisu(playerid,params[],help)
{
    if(GetPlayerStaffLevel(playerid) < 4) return SendClientCantUseCommand(playerid);

	new
	    string[512] = "{ffffff}",
		tstr[128];

	for(new i=1; i < sizeof A_cargoTypes; i++)
	{
		if(i > 46)
		    break;
	    format(tstr, 128, "%d: %s\n", i, A_cargoTypes[i]);
	    strcat(string, tstr);
	}

	ShowPlayerDialog(playerid, did_zbranezoznam, DIALOG_STYLE_MSGBOX, "TYPY BIZNISOV", string, "OK", "");
	return 1;
}

YCMD:vytvoritbusiness(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
		Name [ 255 ],
		InteriorID,
		BusinessType,
		BuyPrice;

	if(sscanf(params, "ddds[255]", InteriorID, BuyPrice, BusinessType, Name))
	    return SendClientSyntax(playerid, "/vytvoritbusiness [id interieru] [cena v $] [typ biznisu /typybiznisu] [meno biznisu]");

	new
		address = rand(MIN_BUSINESS_ADDRESS, MAX_BUSINESS_ADDRESS),
		Float:Pos[4],
		string[128];

    FormatLog(log_type_admin, "%s(%s) vytvoril business (interier: %d, zipcode: %d, cena: %d$, meno: %s)", ReturnName(playerid), ReturnIP(playerid), InteriorID, address, BuyPrice, Name);
	format(string, 128, "Vytvoril si business! (interier: %d, zipcode: %d, cena: %d$, meno: %s)", InteriorID, address, BuyPrice, Name);
	SendSuccess(playerid, string, 1);

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	new
		query[1024];

	if(InteriorID == 0)
	{
	    CreateDynamicBusiness(
			address, Name, "Ne", Pos[0], Pos[1], Pos[2], Pos[3],
			GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid),
			InteriorID, 0, "", BuyPrice, BusinessType, 0, 0
		);

		mysql_format(MYSQL, query, 1024,
			"INSERT INTO gm_businesses (Name, Owner, PosX, PosY, PosZ, PosAngle, PosVirtualWorld, PosInterior, VirtualWorld, InteriorID, IsLocked, MusicAddress, BuyPrice, BusinessType, EntryFee, Storage, Tovar) VALUES ('%e', 'Ne', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '0', '', '%d', '%d', '0', '0', '%f')",
			Name, Pos[0], Pos[1], Pos[2], Pos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), address, InteriorID, BuyPrice, BusinessType, 0.0);

	}
	else
	{
	    CreateDynamicBusiness(
			address, Name, "Ne", Pos[0], Pos[1], Pos[2], Pos[3],
			GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid),
			InteriorID, 0, "", BuyPrice, BusinessType, 25, 0
		);

		mysql_format(MYSQL, query, 1024,
			"INSERT INTO gm_businesses (Name, Owner, PosX, PosY, PosZ, PosAngle, PosVirtualWorld, PosInterior, VirtualWorld, InteriorID, IsLocked, MusicAddress, BuyPrice, BusinessType, EntryFee, Storage, Tovar) VALUES ('%e', 'Ne', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '0', '', '%d', '%d', '25', '0', '%f')",
			Name, Pos[0], Pos[1], Pos[2], Pos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), address, InteriorID, BuyPrice, BusinessType, 0.0);

	}

	mysql_query(MYSQL, query, false);
	return 1;
}

YCMD:zmazatbusiness(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1;

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadny business!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmazal business (meno: %s)", ReturnName(playerid), ReturnIP(playerid), businessEnum[id][bz_Name]);
	format(string, 128, "Zmazal si business! (meno: %s)", businessEnum[id][bz_Name]);
	SendSuccess(playerid, string);

    new
		query[144];

	mysql_format(MYSQL, query, 1024,
	"DELETE FROM gm_businesses WHERE Name = '%e' AND VirtualWorld = '%d'",
		businessEnum[id][bz_Name], businessEnum[id][bz_Address]);

	mysql_query(MYSQL, query, false);

	DestroyDynamicBusiness(id);
	return 1;
}

YCMD:zamknutbiznis(playerid, params[], help)
{
	foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
		{
		    if(businessEnum[i][bz_Address] != GetPlayerVirtualWorld(playerid)) continue;
		    if(GetPlayerInterior(playerid) != floatround(intList[businessEnum[i][bz_InteriorID]][5], floatround_round)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, intList[businessEnum[i][bz_InteriorID]][0], intList[businessEnum[i][bz_InteriorID]][1], intList[businessEnum[i][bz_InteriorID]][2])) continue;
			if(strcmp(businessEnum[i][bz_Owner], ReturnName(playerid), false) && strcmp(businessEnum[i][bz_SecOwner], ReturnName(playerid), false))
			    return SendError(playerid, "Od tohoto biznisu nemá klúèe!");

			if(businessEnum[i][bz_IsLocked] == 0)
			{
			    FormatLog(log_type_business, "%s(%s) zamkol business %s(zip: %d).", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
			    SendSuccess(playerid, "Zamkol si business!");
			    businessEnum[i][bz_IsLocked] = 1;
			}
			else
			{
			    FormatLog(log_type_business, "%s(%s) odomkol business %s(zip: %d).", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
			    SendSuccess(playerid, "Odomkol si business!");
			    businessEnum[i][bz_IsLocked] = 0;
			}

			ReloadBusinessLabel(i);

			return 1;
		}
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;
		if(strcmp(businessEnum[i][bz_Owner], ReturnName(playerid), false) && strcmp(businessEnum[i][bz_SecOwner], ReturnName(playerid), false))
		    return SendError(playerid, "Od tohoto biznisu nemá klúèe!");

        if(businessEnum[i][bz_IsLocked] == 0)
		{
		    FormatLog(log_type_business, "%s(%s) zamkol business %s(zip: %d).", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
		    SendSuccess(playerid, "Zamkol si business!");
		    businessEnum[i][bz_IsLocked] = 1;
		}
		else
		{
		    FormatLog(log_type_business, "%s(%s) odomkol business %s(zip: %d).", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
		    SendSuccess(playerid, "Odomkol si business!");
		    businessEnum[i][bz_IsLocked] = 0;
		}

		ReloadBusinessLabel(i);
		return 1;
	}
	SendError(playerid, "Nie je tu iadny biznis!");
	return 1;
}

YCMD:azamknutbiznis(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
		{
		    if(businessEnum[i][bz_Address] != GetPlayerVirtualWorld(playerid)) continue;
		    if(GetPlayerInterior(playerid) != floatround(intList[businessEnum[i][bz_InteriorID]][5], floatround_round)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, intList[businessEnum[i][bz_InteriorID]][0], intList[businessEnum[i][bz_InteriorID]][1], intList[businessEnum[i][bz_InteriorID]][2])) continue;

			if(businessEnum[i][bz_IsLocked] == 0)
			{
			    FormatLog(log_type_business, "%s(%s) zamkol business %s(zip: %d).", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
			    SendSuccess(playerid, "Zamkol si business!");
			    businessEnum[i][bz_IsLocked] = 1;
			}
			else
			{
			    FormatLog(log_type_business, "%s(%s) odomkol business %s(zip: %d).", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
			    SendSuccess(playerid, "Odomkol si business!");
			    businessEnum[i][bz_IsLocked] = 0;
			}

			ReloadBusinessLabel(i);

			return 1;
		}
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;
        if(businessEnum[i][bz_IsLocked] == 0)
		{
		    FormatLog(log_type_business, "%s(%s) zamkol business %s(zip: %d).", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
		    SendSuccess(playerid, "Zamkol si business!");
		    businessEnum[i][bz_IsLocked] = 1;
		}
		else
		{
		    FormatLog(log_type_business, "%s(%s) odomkol business %s(zip: %d).", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
		    SendSuccess(playerid, "Odomkol si business!");
		    businessEnum[i][bz_IsLocked] = 0;
		}

		ReloadBusinessLabel(i);
		return 1;
	}

	SendError(playerid, "Nie je tu iadny biznis!");
	return 1;
}

YCMD:businessinfo(playerid, params[], help)
{
    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
		{
		    if(businessEnum[i][bz_Address] != GetPlayerVirtualWorld(playerid)) continue;
		    if(GetPlayerInterior(playerid) != floatround(intList[businessEnum[i][bz_InteriorID]][5], floatround_round)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, intList[businessEnum[i][bz_InteriorID]][0], intList[businessEnum[i][bz_InteriorID]][1], intList[businessEnum[i][bz_InteriorID]][2])) continue;

            ShowPlayerBusinessInfo(playerid, i);

			return 1;
		}
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

        ShowPlayerBusinessInfo(playerid, i);

		return 1;
	}

	SendError(playerid, "Nestojí pri biznise!");

	return 1;
}

YCMD:hudbabiznisu(playerid, params[], help)
{

	new
		I_var[255];

	if(sscanf(params, "s[255]", I_var))
	    return SendClientSyntax(playerid, "/hudbabiznisu [nová url adresa muziky (pre vypnutie napí 0)]");

	if(strlen(I_var) > 255)
	    return SendError(playerid, "URL môe ma maximálne 255 znakov!");

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
		{
		    if(businessEnum[i][bz_Address] != GetPlayerVirtualWorld(playerid)) continue;
		    if(GetPlayerInterior(playerid) != floatround(intList[businessEnum[i][bz_InteriorID]][5], floatround_round)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, intList[businessEnum[i][bz_InteriorID]][0], intList[businessEnum[i][bz_InteriorID]][1], intList[businessEnum[i][bz_InteriorID]][2])) continue;
            if(strcmp(businessEnum[i][bz_Owner], ReturnName(playerid), false))
		   		return SendError(playerid, "Od tohoto biznisu nemá klúèe!");

			FormatLog(log_type_business, "%s(%s) zmenil muziku %s(zip: %d) na \"%s\"", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
   			SendSuccess(playerid, "Zmenil si muziku biznisu!");
   			format(businessEnum[i][bz_MusicAddress], 255, I_var);

			ReloadBusinessLabel(i);

			return 1;
		}
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;
		if(strcmp(businessEnum[i][bz_Owner], ReturnName(playerid), false))
		   	return SendError(playerid, "Od tohoto biznisu nemá klúèe!");

       	FormatLog(log_type_business, "%s(%s) zmenil muziku %s(zip: %d) na \"%s\"", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
		SendSuccess(playerid, "Zmenil si muziku biznisu!");
		format(businessEnum[i][bz_MusicAddress], 255, I_var);

		ReloadBusinessLabel(i);
		return 1;
	}

	SendError(playerid, "Nestojí pri biznise!");

	return 1;
}

YCMD:cenapaliva(playerid, params[], help)
{
	new
	    S_var1[24],
	    S_var2[24],

		Float:I_var;

	if(sscanf(params, "s[24] s[24] f", S_var1, S_var2, I_var))
	    return SendClientSyntax(playerid, "/cenapaliva [meno boxu] [benzin - diesel - kerosin - lpg] [cena v desatinnom èísle]");

	if(I_var < 0.0 || I_var > 50.0)
	    return SendClientSyntax(playerid, "/cenapaliva [meno boxu] [benzin - diesel - kerosin - lpg] [cena v desatinnom èísle (0-50$)]");

    new
		id = -1,
		typ = -1;

	for (new i; i < MAX_FUEL_STATIONS; i++)
	{
		if(strcmp(fuelEnum[i][fuel_cislo_boxu], S_var1, true))
		    continue;

		id = i;
		break;
	}

	if(id == -1)
	    return SendError(playerid, "Box s týmto oznaèením neexistuje!");

	if(!strcmp(S_var2, "benzin", true))
	    typ = 0;
	else if(!strcmp(S_var2, "diesel", true))
	    typ = 1;
    else if(!strcmp(S_var2, "kerosin", true))
	    typ = 2;
    else if(!strcmp(S_var2, "lpg", true))
	    typ = 3;
	else
	    return SendClientSyntax(playerid, "/doplnitpumpu [typ (benzin/diesel/kerosin/lpg)] [oznaèenie boxu]");

    foreach( new i : Businesses )
	{
	    if(businessEnum[i][bz_Address] != fuelEnum[id][fuel_assig_biz])
			continue;

		if(strcmp(businessEnum[i][bz_Owner], ReturnName(playerid), true) && GetPlayerAdminLevel(playerid) < 4)
			return SendError(playerid, "Tento box nemôe doplni!");

		break;
	}

	if(typ == 0)
	    fuelEnum[id][fuel_pr_benzin] = I_var;
    else if(typ == 1)
	    fuelEnum[id][fuel_pr_diesel] = I_var;
    else if(typ == 2)
	    fuelEnum[id][fuel_pr_kerosin] = I_var;
    else if(typ == 3)
	    fuelEnum[id][fuel_pr_lpg] = I_var;

    ReloadBoxLabel(id);

    SendSuccess(playerid, "Cena upravená!");
	return 1;
}

YCMD:entryfee(playerid, params[], help)
{
	new
	    I_var1[24],
		I_var;

	if(sscanf(params, "s[24] D(-1)", I_var1, I_var))
	    return SendClientSyntax(playerid, "/entryfee [nastavit - vybrat - vlozit - stav] <pocet>");


    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;
		if(strcmp(businessEnum[i][bz_Owner], ReturnName(playerid), false) && strcmp(businessEnum[i][bz_SecOwner], ReturnName(playerid), false))
		   	return SendError(playerid, "Od tohoto biznisu nemá klúèe!");

 		if(strcmp(I_var1, "nastavit", true) && strcmp(I_var1, "vybrat", true) && strcmp(I_var1, "vlozit", true)  && strcmp(I_var1, "stav", true))
		    return SendClientSyntax(playerid, "/entryfee [nastavit - vybrat - vlozit - stav] <pocet>");

		if(!strcmp(I_var1, "nastavit", true) && (I_var < 0 || I_var > 75))
		    return SendClientSyntax(playerid, "/entryfee nastavit [vstupný poplatok v $ (0 - 75)]");

	 	if(!strcmp(I_var1, "vybrat", true) && I_var < 0)
		    return SendClientSyntax(playerid, "/entryfee vybrat [pocet dolarov na vybratie]");

	    if(!strcmp(I_var1, "vlozit", true) && I_var < 0)
		    return SendClientSyntax(playerid, "/entryfee vlozit [pocet dolarov na vlozenie]");

		//ZACIATOK KODU

		if(!strcmp(I_var1, "nastavit",true))
		{
	       	FormatLog(log_type_business, "%s(%s) zmenil vstupný poplatok %s(zip: %d) na %d$.", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
			SendSuccess(playerid, "Zmenil si vstupný poplatok!");
			businessEnum[i][bz_EntryFee] = I_var;
		}
		else if(!strcmp(I_var1, "vybrat",true))
		{

		    if(I_var == -1)
		        return SendError(playerid, "pecifikuj poèet, prosím!");

		    if(businessEnum[i][bz_Storage] < I_var)
		        return SendError(playerid, "Tolko v tejto kase nie je!");

		    FormatLog(log_type_business, "%s(%s) vybral z kasy %s(zip: %d) %d$.", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
			SendSuccess(playerid, "Vybral si peniaze z kasy!");
			businessEnum[i][bz_Storage] -= I_var;

			ex_GivePlayerMoney(playerid, I_var);
			money_accepted[playerid]+=floatround(I_var,floatround_round);
		}
		else if(!strcmp(I_var1, "vlozit",true))
		{

		    if(I_var == -1)
		        return SendError(playerid, "pecifikuj poèet, prosím!");

		    if(I_var > ex_GetPlayerMoney(playerid))
		        return SendError(playerid, "Tolko pri sebe nemá!");

		    FormatLog(log_type_business, "%s(%s) vlozil do kasy %s(zip: %d) %d$.", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
			SendSuccess(playerid, "Vloil si peniaze do kasy!");
			businessEnum[i][bz_Storage] += I_var;
			money_givenby[playerid]+=floatround(I_var,floatround_round);

			ex_GivePlayerMoney(playerid, -I_var);
		}
		else if(!strcmp(I_var1, "stav",true))
		{
		    ShowPlayerBusinessInfo(playerid, i);
		    return 1;
		}

		ReloadBusinessLabel(i);
		return 1;
	}

	SendError(playerid, "Nestojí pri svojom biznise!");

	return 1;
}

YCMD:aentryfee(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    I_var1[24],
		I_var;

	if(sscanf(params, "s[24] D(-1)", I_var1, I_var))
	    return SendClientSyntax(playerid, "/entryfee [nastavit - vybrat - vlozit - stav] <pocet>");

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

 		if(strcmp(I_var1, "nastavit", true) && strcmp(I_var1, "vybrat", true) && strcmp(I_var1, "vlozit", true)  && strcmp(I_var1, "stav", true))
		    return SendClientSyntax(playerid, "/entryfee [nastavit - vybrat - vlozit - stav] <pocet>");

		if(!strcmp(I_var1, "nastavit", true) && I_var < 0)
		    return SendClientSyntax(playerid, "/entryfee nastavit [vstupný poplatok v $ (0 - nekonecno)]");

	 	if(!strcmp(I_var1, "vybrat", true) && I_var < 0)
		    return SendClientSyntax(playerid, "/entryfee vybrat [pocet dolarov na vybratie]");

	    if(!strcmp(I_var1, "vlozit", true) && I_var < 0)
		    return SendClientSyntax(playerid, "/entryfee vlozit [pocet dolarov na vlozenie]");

		//ZACIATOK KODU

		if(!strcmp(I_var1, "nastavit",true))
		{
	       	FormatLog(log_type_business, "%s(%s) zmenil vstupný poplatok %s(zip: %d) na %d$.", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
			SendSuccess(playerid, "Zmenil si vstupný poplatok!");
			businessEnum[i][bz_EntryFee] = I_var;
		}
		else if(!strcmp(I_var1, "vybrat",true))
		{
		    if(businessEnum[i][bz_Storage] < I_var)
		        return SendError(playerid, "Tolko v tejto kase nie je!");

		    FormatLog(log_type_business, "%s(%s) vybral z kasy %s(zip: %d) %d$.", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
			SendSuccess(playerid, "Vybral si peniaze z kasy!");
			businessEnum[i][bz_Storage] -= I_var;
		}
		else if(!strcmp(I_var1, "vlozit",true))
		{
		    if(I_var > ex_GetPlayerMoney(playerid))
		        return SendError(playerid, "Tolko pri sebe nemá!");

		    FormatLog(log_type_business, "%s(%s) vlozil do kasy %s(zip: %d) %d$.", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
			SendSuccess(playerid, "Vloil si peniaze do kasy!");
			businessEnum[i][bz_Storage] += I_var;
		}
		else if(!strcmp(I_var1, "stav",true))
		{
		    ShowPlayerBusinessInfo(playerid, i);
		    return 1;
		}

		ReloadBusinessLabel(i);
		return 1;
	}

	SendError(playerid, "Nestojí pri biznise!");

	return 1;
}

YCMD:abusinessowner(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
		I_var[30];

	if(sscanf(params, "s[30]", I_var))
	    return SendClientSyntax(playerid, "/abusinessowner [meno nového majite¾a (ak vymaza, zadaj \"Ne\" bez \"\"]");

	if(strlen(I_var) > 28)
	    return SendError(playerid, "Meno môe ma maximálne 28 znakov!");

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
		{
		    if(businessEnum[i][bz_Address] != GetPlayerVirtualWorld(playerid)) continue;
		    if(GetPlayerInterior(playerid) != floatround(intList[businessEnum[i][bz_InteriorID]][5], floatround_round)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, intList[businessEnum[i][bz_InteriorID]][0], intList[businessEnum[i][bz_InteriorID]][1], intList[businessEnum[i][bz_InteriorID]][2])) continue;

			FormatLog(log_type_business, "%s(%s) zmenil majitela %s(zip: %d) na \"%s\"", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
   			SendSuccess(playerid, "Zmenil si majite¾a biznisu!");
   			format(businessEnum[i][bz_Owner], 30, I_var);

			ReloadBusinessLabel(i);

			return 1;
		}
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

       	FormatLog(log_type_business, "%s(%s) zmenil majitela %s(zip: %d) na \"%s\"", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
		SendSuccess(playerid, "Zmenil si majite¾a biznisu!");
		format(businessEnum[i][bz_Owner], 30, I_var);

		ReloadBusinessLabel(i);
		return 1;
	}

	SendError(playerid, "Nestojí pri biznise!");

	return 1;
}

YCMD:abusinessname(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
		I_var[255];

	if(sscanf(params, "s[255]", I_var))
	    return SendClientSyntax(playerid, "/abusinessname [nové meno biznisu]");

	if(strlen(I_var) > 255)
	    return SendError(playerid, "Meno môe ma maximálne 255 znakov!");

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
		{
		    if(businessEnum[i][bz_Address] != GetPlayerVirtualWorld(playerid)) continue;
		    if(GetPlayerInterior(playerid) != floatround(intList[businessEnum[i][bz_InteriorID]][5], floatround_round)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, intList[businessEnum[i][bz_InteriorID]][0], intList[businessEnum[i][bz_InteriorID]][1], intList[businessEnum[i][bz_InteriorID]][2])) continue;

			FormatLog(log_type_business, "%s(%s) zmenil meno %s(zip: %d) na \"%s\"", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
   			SendSuccess(playerid, "Zmenil si meno biznisu!");
   			format(businessEnum[i][bz_Name], 255, I_var);

			ReloadBusinessLabel(i);

			return 1;
		}
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

       	FormatLog(log_type_business, "%s(%s) zmenil meno %s(zip: %d) na \"%s\"", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
		SendSuccess(playerid, "Zmenil si meno biznisu!");
		format(businessEnum[i][bz_Name], 255, I_var);

		ReloadBusinessLabel(i);
		return 1;
	}

	SendError(playerid, "Nestojí pri biznise!");

	return 1;
}

YCMD:abusinessmusic(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
		I_var[255];

	if(sscanf(params, "s[255]", I_var))
	    return SendClientSyntax(playerid, "/abusinessmusic [nová url adresa muziky (pre vypnutie napí 0)]");

	if(strlen(I_var) > 255)
	    return SendError(playerid, "URL môe ma maximálne 255 znakov!");

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
		{
		    if(businessEnum[i][bz_Address] != GetPlayerVirtualWorld(playerid)) continue;
		    if(GetPlayerInterior(playerid) != floatround(intList[businessEnum[i][bz_InteriorID]][5], floatround_round)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, intList[businessEnum[i][bz_InteriorID]][0], intList[businessEnum[i][bz_InteriorID]][1], intList[businessEnum[i][bz_InteriorID]][2])) continue;

			FormatLog(log_type_business, "%s(%s) zmenil muziku %s(zip: %d) na \"%s\"", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
   			SendSuccess(playerid, "Zmenil si muziku biznisu!");
   			format(businessEnum[i][bz_MusicAddress], 255, I_var);

			ReloadBusinessLabel(i);

			return 1;
		}
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

       	FormatLog(log_type_business, "%s(%s) zmenil muziku %s(zip: %d) na \"%s\"", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
		SendSuccess(playerid, "Zmenil si muziku biznisu!");
		format(businessEnum[i][bz_MusicAddress], 255, I_var);

		ReloadBusinessLabel(i);
		return 1;
	}

	SendError(playerid, "Nestojí pri biznise!");

	return 1;
}

YCMD:abusinessinterior(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/abusinessinterior [nové id interiéru]");

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

       	FormatLog(log_type_business, "%s(%s) zmenil interiér %s(zip: %d) na ID %d", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
		SendSuccess(playerid, "Zmenil si interiér biznisu!");
		businessEnum[i][bz_InteriorID] = I_var;

		ReloadBusinessLabel(i);
		return 1;
	}

	SendError(playerid, "Nestojí pri vchode do biznisu!");

	return 1;
}

YCMD:abusinessprice(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/abusinessprice [nová cena]");

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

       	FormatLog(log_type_business, "%s(%s) zmenil cenu %s(zip: %d) na ID %d", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
		SendSuccess(playerid, "Zmenil si cenu biznisu!");
		businessEnum[i][bz_BuyPrice] = I_var;

		ReloadBusinessLabel(i);
		return 1;
	}

	SendError(playerid, "Nestojí pri vchode do biznisu!");

	return 1;
}

YCMD:abusinesstype(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/abusinesstype [nový typ /typybiznisu]");

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

       	FormatLog(log_type_business, "%s(%s) zmenil typ biznisu %s(zip: %d) na ID %d", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
		SendSuccess(playerid, "Zmenil si typ biznisu!");
		businessEnum[i][bz_BusinessType] = I_var;

		ReloadBusinessLabel(i);
		return 1;
	}

	SendError(playerid, "Nestojí pri vchode do biznisu!");

	return 1;
}

YCMD:abusinesstovar(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/abusinesstovar [poÈet ks tovaru na pridanie]");

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

       	FormatLog(log_type_business, "%s(%s) pridal biznisu %s(zip: %d) %d tovaru", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], I_var);
		SendSuccess(playerid, "Pridal si tovar biznisu!");
		businessEnum[i][bz_Tovar] += I_var;

		ReloadBusinessLabel(i);
		return 1;
	}

	SendError(playerid, "Nestojí pri vchode do biznisu!");

	return 1;
}

YCMD:buybusiness(playerid, params[], help)
{
	new
		I_var = -1;

	if(sscanf(params, "D(-1)", I_var))
	    return SendClientSyntax(playerid, "/kupitbiznis");

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

		if(businessEnum[i][bz_BuyPrice] == 0)
		    return SendError(playerid, "Toto nemôe kúpi!");

		if(strcmp(businessEnum[i][bz_Owner], "Ne", false))
		    return SendError(playerid, "Tento biznis u niekto vlastní!");

        if(!HasFreeBusinessSlot(playerid))
		    return SendError(playerid, "Nemá volný slot na biznis!");

		if(i == buyBusiness[playerid][1] && I_var > 0)
		{
		    if(I_var == buyBusiness[playerid][0])
		    {
		        if(ex_GetPlayerMoney(playerid) < businessEnum[i][bz_BuyPrice])
		            return SendError(playerid, "Nemá dos peòazí na zakúpenie tohoto biznisu!");

                businessEnum[i][bz_Storage] = 0;
		        ex_GivePlayerMoney(playerid, -businessEnum[i][bz_BuyPrice]);
		        money_spent[playerid]+=floatround(businessEnum[i][bz_BuyPrice],floatround_round);

		        format(businessEnum[i][bz_Owner], 30, ReturnName(playerid));
		        format(businessEnum[i][bz_SecOwner], 30, "");

		        FormatLog(log_type_business, "%s(%s) kupil biznis %s(zip: %d) za %d$", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], businessEnum[i][bz_BuyPrice]);
				SendSuccess(playerid, "Úspene si kúpil biznis, gratulujeme!");

				Achievement::Reward(playerid, ACHIEVEMENT_FIRST_BUSINESS);
				if(businessEnum[i][bz_BuyPrice] >= 100000)
				    Achievement::Reward(playerid, ACHIEVEMENT_EXPENSIVE_BUSINESS);

				ReloadBusinessLabel(i);

				buyBusiness[playerid][0] = 0;
				buyBusiness[playerid][1] = 0;

				return 1;
		    }
			else
			    return SendError(playerid, "Zadal si zlé èíslo potvrdenia!");
		}

		buyBusiness[playerid][0] = rand(1000, 10000);
		buyBusiness[playerid][1] = i;

		new
		    string[144];

		format(string, 144, "Skutoène chce kúpi biznis %s za %d$? Ak áno, poui príkaz /kupitbiznis %d", businessEnum[i][bz_Name], businessEnum[i][bz_BuyPrice], buyBusiness[playerid][0]);
		SendSuccess(playerid, string);
		return 1;
	}

	SendError(playerid, "Nestojí pri vchode do biznisu!");

	return 1;
}

YCMD:sellbusiness(playerid, params[], help)
{
	new
		I_var = -1;

	if(sscanf(params, "D(-1)", I_var))
	    return SendClientSyntax(playerid, "/predatbiznis");

    foreach( new i : Businesses )
	{
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;
		if(strcmp(businessEnum[i][bz_Owner], ReturnName(playerid), false))
		    return SendError(playerid, "Tento biznis nevlastní!");

		if(i == sellBusiness[playerid][1] && I_var > 0)
		{
		    if(I_var == sellBusiness[playerid][0])
			{
		        ex_GivePlayerMoney(playerid, floatround(businessEnum[i][bz_BuyPrice] / 100 * 60, floatround_round));
		        money_admin[playerid]+=floatround(businessEnum[i][bz_BuyPrice] / 100 * 60, floatround_round);

		        format(businessEnum[i][bz_Owner], 30, "Ne");
		        format(businessEnum[i][bz_SecOwner], 30, "");

		        FormatLog(log_type_business, "%s(%s) predal biznis %s(zip: %d) za %d$", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address], floatround(businessEnum[i][bz_BuyPrice]/100*60,floatround_round));
				SendSuccess(playerid, "Úspene si predal biznis!");

				ReloadBusinessLabel(i);

				sellBusiness[playerid][0] = 0;
				sellBusiness[playerid][1] = 0;

				return 1;
		    }
			else
			    return SendError(playerid, "Zadal si zlé èíslo potvrdenia!");
		}

		sellBusiness[playerid][0] = rand(1000, 10000);
		sellBusiness[playerid][1] = i;

		new
		    string[144];

		format(string, 144, "Skutoène chce preda biznis %s za %d$? Ak áno, poui príkaz /predatbiznis %d", businessEnum[i][bz_Name], floatround(businessEnum[i][bz_BuyPrice]/100*60,floatround_round), sellBusiness[playerid][0]);
		SendSuccess(playerid, string);
		return 1;
	}

	SendError(playerid, "Nestojí pri vchode do biznisu!");

	return 1;
}

YCMD:r(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerFactionType(playerid) != FACTION_TYPE_WOODCUTTER && GetPlayerFactionType(playerid) != FACTION_TYPE_TAXI)
	    return SendClientCantUseCommand(playerid);

	if(!IsPlayerWorking(playerid))
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[128],
		radioString[144];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/r [správa do vysielaèky]");

	format(radioString, 144, "%s hovorí (vysielaèka): %s", GetPlayerNameEx(playerid, USE_MASK), S_var);
	ProxDetector(playerid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, radioString);
	
	new
	    freq = 9112;
	    
	switch(GetPlayerFactionType(playerid))
	{
	    case FACTION_TYPE_LAW: freq = 9110;
	    case FACTION_TYPE_FIRE: freq = 9115;
	    case FACTION_TYPE_WOODCUTTER: freq = 7566;
	    case FACTION_TYPE_TAXI: freq = 3455;
	}

    format(radioString, 144, "[ Radio - %.1f MHz ] %s: %s", freq/10, GetPlayerNameEx(playerid, NO_MASK), S_var);

    foreach( new i : Player )
	{

	    if(i == playerid)
	        continue;

 		if(GetPlayerFaction(i) != GetPlayerFaction(playerid))
   			continue;

		if(!IsPlayerWorking(i))
  			continue;

		SendClientMessage(i, COLOR_RADIO, radioString);
	}

	return 1;

}

YCMD:rl(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerFactionType(playerid) != FACTION_TYPE_WOODCUTTER && GetPlayerFactionType(playerid) != FACTION_TYPE_TAXI)
	    return SendClientCantUseCommand(playerid);

	if(!IsPlayerWorking(playerid))
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[128],
		radioString[144];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/rl [správa do vysielaèky]");

	format(radioString, 144, "%s potichu (vysielaèka): %s", GetPlayerNameEx(playerid, USE_MASK), S_var);
	ProxDetector(playerid, LOCAL_CHAT_RANGE/5, COLOR_LOCAL_CHAT_TEXT, radioString);

    new
	    freq = 9112;

	switch(GetPlayerFactionType(playerid))
	{
	    case FACTION_TYPE_LAW: freq = 9110;
	    case FACTION_TYPE_FIRE: freq = 9115;
	    case FACTION_TYPE_WOODCUTTER: freq = 7566;
	    case FACTION_TYPE_TAXI: freq = 3455;
	}

    format(radioString, 144, "[ Radio - %.1f MHz ] %s (potichu): %s", freq/10, GetPlayerNameEx(playerid, NO_MASK), S_var);

    foreach( new i : Player )
	{

	    if(i == playerid)
	        continue;

 		if(GetPlayerFaction(i) != GetPlayerFaction(playerid))
   			continue;

		if(!IsPlayerWorking(i))
  			continue;

		SendClientMessage(i, COLOR_RADIO, radioString);
	}

	return 1;

}

YCMD:rs(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerFactionType(playerid) != FACTION_TYPE_WOODCUTTER && GetPlayerFactionType(playerid) != FACTION_TYPE_TAXI)
	    return SendClientCantUseCommand(playerid);

	if(!IsPlayerWorking(playerid))
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[128],
		radioString[144];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/rs [správa do vysielaèky]");

	format(radioString, 144, "%s krièí (vysielaèka): %s", GetPlayerNameEx(playerid, USE_MASK), S_var);
	ProxDetector(playerid, ME_CHAT_RANGE,COLOR_SHOUT_CHAT_TEXT, radioString);

    new
	    freq = 9112;

	switch(GetPlayerFactionType(playerid))
	{
	    case FACTION_TYPE_LAW: freq = 9110;
	    case FACTION_TYPE_FIRE: freq = 9115;
	    case FACTION_TYPE_WOODCUTTER: freq = 7566;
	    case FACTION_TYPE_TAXI: freq = 3455;
	}

    format(radioString, 144, "[ Radio - %.1f MHz ] %s (krièí): %s", freq/10, GetPlayerNameEx(playerid, NO_MASK), S_var);

    foreach( new i : Player )
	{

	    if(i == playerid)
	        continue;

 		if(GetPlayerFaction(i) != GetPlayerFaction(playerid))
   			continue;

		if(!IsPlayerWorking(i))
  			continue;

		SendClientMessage(i, COLOR_RADIO, radioString);
	}

	return 1;

}

YCMD:department(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE)
	    return SendClientCantUseCommand(playerid);

	if(!IsPlayerWorking(playerid))
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[128],
		radioString[144];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/department (/dept) [správa do vysielaèky]");

	format(radioString, 144, "%s hovorí (vysielaèka): %s", GetPlayerNameEx(playerid, USE_MASK), S_var);
	ProxDetector(playerid, LOCAL_CHAT_RANGE, COLOR_LOCAL_CHAT_TEXT, radioString);

    format(radioString, 144, "[ Dept. Radio - 911 MHz ] %s: %s", GetPlayerNameEx(playerid, NO_MASK), S_var);

    foreach( new i : Player )
	{

	    if(i == playerid)
	        continue;

 		if(GetPlayerFactionType(i) != FACTION_TYPE_LAW && GetPlayerFactionType(i) != FACTION_TYPE_FIRE)
   			continue;

		if(!IsPlayerWorking(i))
  			continue;

		SendClientMessage(i, COLOR_DEPT_RADIO, radioString);
	}

	return 1;

}

YCMD:departmentlow(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE)
	    return SendClientCantUseCommand(playerid);

	if(!IsPlayerWorking(playerid))
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[128],
		radioString[144];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/departmentlow (/deptlow) [správa do vysielaèky]");

	format(radioString, 144, "%s potichu (vysielaèka): %s", GetPlayerNameEx(playerid, USE_MASK), S_var);
	ProxDetector(playerid, LOCAL_CHAT_RANGE/5, COLOR_LOCAL_CHAT_TEXT, radioString);

    format(radioString, 144, "[ Dept. Radio - 911 MHz ] %s (potichu): %s", GetPlayerNameEx(playerid, NO_MASK), S_var);

    foreach( new i : Player )
	{

	    if(i == playerid)
	        continue;

 		if(GetPlayerFactionType(i) != FACTION_TYPE_LAW && GetPlayerFactionType(i) != FACTION_TYPE_FIRE)
   			continue;

		if(!IsPlayerWorking(i))
  			continue;

		SendClientMessage(i, COLOR_DEPT_RADIO, radioString);
	}

	return 1;

}

YCMD:departmentshout(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE)
	    return SendClientCantUseCommand(playerid);

	if(!IsPlayerWorking(playerid))
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[128],
		radioString[144];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/departmentshout (/depts) [správa do vysielaèky]");

	format(radioString, 144, "%s krièí (vysielaèka): %s", GetPlayerNameEx(playerid, USE_MASK), S_var);
	ProxDetector(playerid, ME_CHAT_RANGE,COLOR_SHOUT_CHAT_TEXT, radioString);

    format(radioString, 144, "[ Dept. Radio - 911 MHz ] %s (krièí): %s", GetPlayerNameEx(playerid, NO_MASK), S_var);

    foreach( new i : Player )
	{

	    if(i == playerid)
	        continue;

 		if(GetPlayerFactionType(i) != FACTION_TYPE_LAW && GetPlayerFactionType(i) != FACTION_TYPE_FIRE)
   			continue;

		if(!IsPlayerWorking(i))
  			continue;

		SendClientMessage(i, COLOR_DEPT_RADIO, radioString);
	}

	return 1;

}

YCMD:ampliony(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_GOV && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE  && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(!IsPlayerWorking(playerid) && GetPlayerFactionType(playerid) == FACTION_TYPE_LAW && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[128],
		radioString[144];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/ampliony [správa do megafónov po celom meste]");

    format(radioString, 144, "[ AMPLIÓNY ]: %s", S_var);
	SendClientMessageToAll(0x5e9fe7ff, radioString);

	return 1;

}

YCMD:news(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_MEDIA  && GetPlayerAdminLevel(playerid) < 3 && !vysielaniePerm[playerid])
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[128],
		radioString[144];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/news [správa do novín (globálna správa)]");

    format(radioString, 144, "[ LANN ]: %s", S_var);
	SendClientMessageToAll(0xed89eeff, radioString);

	return 1;

}

YCMD:live(playerid, params[], help)
{

	if(!IsPlayerInDynamicMenu(playerid, menut_live))
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_MEDIA  && GetPlayerAdminLevel(playerid) < 3 && !vysielaniePerm[playerid])
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[128],
		radioString[144];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/live [správa do spravodaja (globálna správa)]");

    format(radioString, 144, "[ LIVE ]: {ffffff}%s", S_var);
	SendClientMessageToAll(0xed89eeff, radioString);

	return 1;

}

YCMD:rozhlas(playerid, params[], help)
{

	if(!IsPlayerInDynamicMenu(playerid, menut_pola_rozhlas))
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_WOODCUTTER  && GetPlayerAdminLevel(playerid) < 3 && !vysielaniePerm[playerid])
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerAdminLevel(playerid) < 3 && !vysielaniePerm[playerid] && GetPlayerFactionRank(playerid) < 5)
	    return SendError(playerid, "Táto monos je od ranku 5!");

	new
	    S_var[128],
		radioString[144];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/rozhlas [správa do rozhlasu na priemyslnom pozemku]");

    format(radioString, 144, "[ PRIEMYSELNÝ ROZHLAS ]: %s", S_var);

	foreach( new i : Player )
 	{
  		if(!IsPlayerInDynamicArea(i, AnawaltArea))
    		continue;

		SendClientMessage(i, COLOR_PORTOFLA, radioString);
  	}

	return 1;

}

YCMD:rozhlasperm(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_WOODCUTTER)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

    if(GetPlayerFactionRank(playerid) < 5)
	    return SendError(playerid, "Táto monos je od ranku 5!");

	new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/liveperm [id]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

    vysielaniePerm[I_var] = !vysielaniePerm[I_var];

    if(vysielaniePerm[I_var])
    {
	    SCFM(playerid, 0xD0D0D0FF, "> Povolil si rozhlas hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
	    SCFM(I_var, 0xD0D0D0FF, "> %s ti povolil rozhlas, môe poui príkaz /rozhlas!", GetPlayerNameEx(playerid, NO_MASK));
	}
	else
	{
	    SCFM(playerid, 0xD0D0D0FF, "> Zakázal si rozhlas hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
	    SCFM(I_var, 0xD0D0D0FF, "> %s ti zakázal rozhlas!", GetPlayerNameEx(playerid, NO_MASK));
	}
	return 1;
}

ToggleVehicleELM(playerid, var = 0)
{

    if(var == 1 || var == 0)
	{
		if(vEnum[GetPlayerVehicleID(playerid)][v_ELM] != 0)
		{
		    vEnum[GetPlayerVehicleID(playerid)][v_ELM] = 0;
			EnterInfo(playerid, "~w~Emergency lights boli vypnute!");
		}
		else
		{
		    SetTimerEx("timer_MajakMode", 200, false, "i", GetPlayerVehicleID(playerid));
		    vEnum[GetPlayerVehicleID(playerid)][v_ELM] = 1;
			EnterInfo(playerid, "~w~Emergency lights boli zapnute!");
		}
	}

	if(var == 2 || var == 0)
	{
		if(vEnum[GetPlayerVehicleID(playerid)][v_FrontBullbar] != 0)
		{

			for( new i; i < 10; i++)
 			{
		        if(frontbullbarObjects[GetPlayerVehicleID(playerid)][i] == -1)
		            continue;

				DestroyDynamicObject(frontbullbarObjects[GetPlayerVehicleID(playerid)][i]);
				frontbullbarObjects[GetPlayerVehicleID(playerid)][i] = -1;
    		}

		    vEnum[GetPlayerVehicleID(playerid)][v_FrontBullbar] = 0;
			EnterInfo(playerid, "~w~Emergency lights boli vypnute!");
		}
		else
		{

            for( new i; i < 10; i++)
				frontbullbarObjects[GetPlayerVehicleID(playerid)][i] = -1;

		    new
				model = GetVehicleModel(GetPlayerVehicleID(playerid))
			;

			for( new x = 1, i, y = sizeof(offSets_BullBar_Front); i < y; i++)
			{

			    if(offSets_BullBar_Front[i][0] != model)
			        continue;

				frontbullbarObjects[GetPlayerVehicleID(playerid)][x-1] = CreateDynamicObject(offSets_BullBar_Front[i][1],0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,100.0,100.0);
				AttachDynamicObjectToVehicle(frontbullbarObjects[GetPlayerVehicleID(playerid)][x-1], GetPlayerVehicleID(playerid), Float:offSets_BullBar_Front[i][2], Float:offSets_BullBar_Front[i][3], Float:offSets_BullBar_Front[i][4], 0.0, 0.0, 0.0);


				x ++;

				continue;
			}

		    vEnum[GetPlayerVehicleID(playerid)][v_FrontBullbar] = 1;
			EnterInfo(playerid, "~w~Emergency lights boli zapnute!");
		}
	}

	if(var == 3 || var == 0)
	{
		if(vEnum[GetPlayerVehicleID(playerid)][v_RearLights] != 0)
		{

		    for( new i; i < 10; i++)
 			{
		        if(rearLightsObjects[GetPlayerVehicleID(playerid)][i] == -1)
		            continue;

				DestroyDynamicObject(rearLightsObjects[GetPlayerVehicleID(playerid)][i]);
				rearLightsObjects[GetPlayerVehicleID(playerid)][i] = -1;
    		}

		    vEnum[GetPlayerVehicleID(playerid)][v_RearLights] = 0;
			EnterInfo(playerid, "~w~Emergency lights boli vypnute!");
		}
		else
		{

            for( new i; i < 10; i++)
				rearLightsObjects[GetPlayerVehicleID(playerid)][i] = -1;

		    new
				model = GetVehicleModel(GetPlayerVehicleID(playerid))
			;

			for( new x = 1, i, y = sizeof(offSets_Rear_Lights); i < y; i++)
			{

			    if(offSets_Rear_Lights[i][0] != model)
			        continue;

				rearLightsObjects[GetPlayerVehicleID(playerid)][x-1] = CreateDynamicObject(offSets_Rear_Lights[i][1],0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,100.0,100.0);
				AttachDynamicObjectToVehicle(rearLightsObjects[GetPlayerVehicleID(playerid)][x-1], GetPlayerVehicleID(playerid), Float:offSets_Rear_Lights[i][2], Float:offSets_Rear_Lights[i][3], Float:offSets_Rear_Lights[i][4], 0.0, 0.0, 0.0);


				x ++;

				continue;
			}

		    vEnum[GetPlayerVehicleID(playerid)][v_RearLights] = 1;
			EnterInfo(playerid, "~w~Emergency lights boli zapnute!");
		}
	}

	return 1;

}

YCMD:elm(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsWorking[playerid] == 0 && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Musí sedie v aute!");

 	if(GetPlayerVehicleSeat(playerid) != 0 && GetPlayerVehicleSeat(playerid) != 1 && GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Musí sedie na predných sedadlách!");

    if(GetVehicleFactionType(GetPlayerVehicleID(playerid)) != FACTION_TYPE_LAW && GetVehicleFactionType(GetPlayerVehicleID(playerid)) != FACTION_TYPE_FIRE && GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Toto auto nemá majáky!");

	new var;
	sscanf(params,"D(0)",var);
	if(var == 0) SendClientSyntax(playerid, "Poui aj: /elm [1-3]");

	ToggleVehicleELM(playerid, var);

	return 1;
}

YCMD:radar(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    return SendClientCantUseCommand(playerid);

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Musí sedie v aute!");

 	if(GetPlayerVehicleSeat(playerid) != 0 && GetPlayerVehicleSeat(playerid) != 1)
	    return SendError(playerid, "Musí sedie na predných sedadlách!");

    if(GetVehicleFactionType(GetPlayerVehicleID(playerid)) != FACTION_TYPE_LAW)
	    return SendError(playerid, "Toto auto nemá radar!");

	if(vEnum[GetPlayerVehicleID(playerid)][v_Radar] != false)
	{
	    vEnum[GetPlayerVehicleID(playerid)][v_Radar] = false;
		EnterInfo(playerid, "~w~Radar bol vypnuty!");

		foreach( new i : Player )
		{
		    if(!IsPlayerInAnyVehicle(i))
		        continue;

			if(GetPlayerVehicleID(i) != GetPlayerVehicleID(playerid))
			    continue;

			if(GetPlayerVehicleSeat(i) > 1)
			    continue;

			PlayerTextDrawHide(i, pdRadar[i][0]);
			PlayerTextDrawHide(i, pdRadar[i][1]);
			PlayerTextDrawHide(i, pdRadar[i][2]);
			PlayerTextDrawHide(i, pdRadar[i][3]);
			PlayerTextDrawHide(i, pdRadar[i][4]);
			PlayerTextDrawHide(i, pdRadar[i][5]);
			PlayerTextDrawHide(i, pdRadar[i][6]);
			PlayerTextDrawHide(i, pdRadar[i][7]);
			PlayerTextDrawHide(i, pdRadar[i][8]);
			PlayerTextDrawHide(i, pdRadar[i][9]);
			PlayerTextDrawHide(i, pdRadar[i][10]);
		}
	}
	else
	{
	    vEnum[GetPlayerVehicleID(playerid)][v_Radar] = true;
		EnterInfo(playerid, "~w~Radar bol zapnuty!");

		foreach( new i : Player )
		{
		    if(!IsPlayerInAnyVehicle(i))
		        continue;

			if(GetPlayerVehicleID(i) != GetPlayerVehicleID(playerid))
			    continue;

			if(GetPlayerVehicleSeat(i) > 1)
			    continue;

			PlayerTextDrawShow(i, pdRadar[i][0]);
			PlayerTextDrawShow(i, pdRadar[i][1]);
			PlayerTextDrawShow(i, pdRadar[i][2]);
			PlayerTextDrawShow(i, pdRadar[i][3]);
			PlayerTextDrawShow(i, pdRadar[i][4]);
			PlayerTextDrawShow(i, pdRadar[i][5]);
			PlayerTextDrawShow(i, pdRadar[i][6]);
			PlayerTextDrawShow(i, pdRadar[i][7]);
			PlayerTextDrawShow(i, pdRadar[i][8]);
			PlayerTextDrawShow(i, pdRadar[i][9]);
			PlayerTextDrawShow(i, pdRadar[i][10]);
		}
	}

	return 1;
}

YCMD:taxameter(playerid, params[], help)
{
	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Musí sedie v aute!");

 	if(GetPlayerVehicleSeat(playerid) != 0 && GetPlayerVehicleSeat(playerid) != 1)
	    return SendError(playerid, "Musí sedie na predných sedadlách!");

    if(vEnum[GetPlayerVehicleID(playerid)][v_TaxameterItem] != 1)
	    return SendError(playerid, "Toto auto nemá taxameter!");

	new
	    S_var[16],
	    Float:I_var;

	if(sscanf(params, "s[16] F(-1)", S_var, I_var))
	    return SendClientSyntax(playerid, "/taxameter [zapnut - vypnut - vynulovat - cena] <cena>");

	if(!strcmp(S_var, "zapnut", true))
	{

	    if(vEnum[GetPlayerVehicleID(playerid)][v_Taxameter] != false)
	        return SendError(playerid, "Taxameter u je zapnutý!");

	    vEnum[GetPlayerVehicleID(playerid)][v_Taxameter] = true;
	    vEnum[GetPlayerVehicleID(playerid)][v_TaxameterMileAge] = 0.0;
		EnterInfo(playerid, "~w~Taxameter bol zapnuty!");

		foreach( new i : Player )
		{
		    if(!IsPlayerInAnyVehicle(i))
		        continue;

			if(GetPlayerVehicleID(i) != GetPlayerVehicleID(playerid))
			    continue;

			PlayerTextDrawShow(i, swoopTaxameter[i][0]);
			PlayerTextDrawShow(i, swoopTaxameter[i][1]);
			PlayerTextDrawShow(i, swoopTaxameter[i][2]);
			PlayerTextDrawShow(i, swoopTaxameter[i][3]);
			PlayerTextDrawShow(i, swoopTaxameter[i][4]);
			PlayerTextDrawShow(i, swoopTaxameter[i][5]);
			PlayerTextDrawShow(i, swoopTaxameter[i][6]);
			PlayerTextDrawShow(i, swoopTaxameter[i][7]);
			PlayerTextDrawShow(i, swoopTaxameter[i][8]);
			PlayerTextDrawShow(i, swoopTaxameter[i][9]);
			PlayerTextDrawShow(i, swoopTaxameter[i][10]);
		}
	}
	else if(!strcmp(S_var, "vypnut", true))
	{

	    if(vEnum[GetPlayerVehicleID(playerid)][v_Taxameter] != true)
	        return SendError(playerid, "Taxameter nie je zapnutý!");

	    vEnum[GetPlayerVehicleID(playerid)][v_Taxameter] = false;
	    vEnum[GetPlayerVehicleID(playerid)][v_TaxameterMileAge] = 0.0;
		EnterInfo(playerid, "~w~Taxameter bol vypnuty!");

		foreach( new i : Player )
		{
		    if(!IsPlayerInAnyVehicle(i))
		        continue;

			if(GetPlayerVehicleID(i) != GetPlayerVehicleID(playerid))
			    continue;

			PlayerTextDrawHide(i, swoopTaxameter[i][0]);
			PlayerTextDrawHide(i, swoopTaxameter[i][1]);
			PlayerTextDrawHide(i, swoopTaxameter[i][2]);
			PlayerTextDrawHide(i, swoopTaxameter[i][3]);
			PlayerTextDrawHide(i, swoopTaxameter[i][4]);
			PlayerTextDrawHide(i, swoopTaxameter[i][5]);
			PlayerTextDrawHide(i, swoopTaxameter[i][6]);
			PlayerTextDrawHide(i, swoopTaxameter[i][7]);
			PlayerTextDrawHide(i, swoopTaxameter[i][8]);
			PlayerTextDrawHide(i, swoopTaxameter[i][9]);
			PlayerTextDrawHide(i, swoopTaxameter[i][10]);
		}
	}
	else if(!strcmp(S_var, "vynulovat", true))
	{

	    if(vEnum[GetPlayerVehicleID(playerid)][v_Taxameter] == false)
	        return SendError(playerid, "Taxameter nie je zapnutý!");

        vEnum[GetPlayerVehicleID(playerid)][v_TaxameterMileAge] = 0.0;

        EnterInfo(playerid, "Taxameter vynulovany!");
	}
	else if(!strcmp(S_var, "cena", true))
	{
	    if(I_var < 0.0)
	        return SendError(playerid, "Zadaj cenu, prosím!");

	    vEnum[GetPlayerVehicleID(playerid)][v_TaxameterPrice] = I_var;

	    EnterInfo(playerid, "Cena za jednu milu upravena!");
	}
	else
	    return SendClientSyntax(playerid, "/taxameter [zapnut - vypnut - vynulovat - cena] <cena>");

	return 1;
}

YCMD:barrier(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsWorking[playerid] == 0 && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesmie sedie v aute!");

	if(IsEditingBarrier[playerid] == true || IsEditingSpike[playerid] == true)
	    return SendError(playerid, "U pokláda bariéru!");

 	for(new i; i < MAX_BARRIERS; i++)
	{
 		if(strlen(barrierEnum[i][barri_PlacedBy]) < 2)
   			break;

        if(strlen(barrierEnum[i][barri_PlacedBy]) >= MAX_BARRIERS-1)
            return SendError(playerid, "Nie je volný slot na bariéru!");

		continue;
	}

    new string[sizeof BARRIERS_LIST * 50];
    for (new i; i < sizeof BARRIERS_LIST; i++)
    {
        format(string, sizeof string, "%s%i\t%s\n", string, BARRIERS_LIST[i][E_BARRIERS_LISTITEM_MODEL], BARRIERS_LIST[i][E_BARRIERS_LISTITEM_NAME]);
    }
    return ShowPlayerDialog(playerid, did_barriers, DIALOG_STYLE_PREVIEW_MODEL, "ZOZNAM BARIER", string, "VYBRAT", "SPAT");
}

YCMD:barriertext(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsWorking[playerid] == 0 && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesmie sedie v aute!");

    new
	    S_var[128];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/barriertext [text na bariéru (pre nový riadok poui znak: '=' bez '')");

	format(S_var, 128, str_replace("=", "\n", S_var));

	new
	    i = -1,
		Float:Pos[3],
		Float:distance = 3.5;

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	for(new ix; ix < MAX_BARRIERS; ix++)
 	{

		if(strlen(barrierEnum[ix][barri_PlacedBy]) < 2)
		    continue;

		if(GetPlayerVirtualWorld(playerid) != barrierEnum[ix][barri_PosVW])
		    continue;

        if(GetPlayerInterior(playerid) != barrierEnum[ix][barri_PosINT])
		    continue;

		if(GetDistanceFromPoint(barrierEnum[ix][barri_PosX], barrierEnum[ix][barri_PosY], barrierEnum[ix][barri_PosZ], Pos[0], Pos[1], Pos[2]) < distance)
		{
		    distance = GetDistanceFromPoint(barrierEnum[ix][barri_PosX], barrierEnum[ix][barri_PosY], barrierEnum[ix][barri_PosZ], Pos[0], Pos[1], Pos[2]);
		    i = ix;
		    continue;
		}
	}

	if(i == -1)
	    return SendError(playerid, "Nie je tu iadna bariéra na ktorej nie je text!");

    if(barrierEnum[i][barri_LabelUsed] == 1)
	{
	    barrierEnum[i][barri_LabelUsed] = 0;
		DestroyDynamic3DTextLabel(barrierEnum[i][barri_LabelID]);
	}
	else if(barrierEnum[i][barri_LabelUsed] == 5)
	    return SendError(playerid, "Na túto bariéru nemôe da text!");

	barrierEnum[i][barri_LabelUsed] = 1;

	barrierEnum[i][barri_LabelID] = CreateDynamic3DTextLabel( S_var, COLOR_WHITE,
	   	barrierEnum[i][barri_PosX], barrierEnum[i][barri_PosY], barrierEnum[i][barri_PosZ],
	   	20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, barrierEnum[i][barri_PosVW], barrierEnum[i][barri_PosINT], -1, 25.0, -1, 3 );

	EnterInfo(playerid, "~w~Vytvoril si text na bariere!~n~Pre jeho zmazanie pouzi ~b~/dbarriertext~w~!", 3000, 0);

	return 1;
}

YCMD:dbarriertext(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsWorking[playerid] == 0 && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesmie sedie v aute!");

	new
	    i = -1,
		Float:Pos[3],
		Float:distance = 3.5;

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	for(new ix; ix < MAX_BARRIERS; ix++)
 	{

		if(strlen(barrierEnum[ix][barri_PlacedBy]) < 2)
		    continue;

		if(GetPlayerVirtualWorld(playerid) != barrierEnum[ix][barri_PosVW])
		    continue;

        if(GetPlayerInterior(playerid) != barrierEnum[ix][barri_PosINT])
		    continue;

        if(barrierEnum[ix][barri_LabelUsed] != 1)
			continue;

		if(GetDistanceFromPoint(barrierEnum[ix][barri_PosX], barrierEnum[ix][barri_PosY], barrierEnum[ix][barri_PosZ], Pos[0], Pos[1], Pos[2]) < distance)
		{
		    distance = GetDistanceFromPoint(barrierEnum[ix][barri_PosX], barrierEnum[ix][barri_PosY], barrierEnum[ix][barri_PosZ], Pos[0], Pos[1], Pos[2]);
		    i = ix;
		    continue;
		}
	}

	if(i == -1)
	    return SendError(playerid, "Nie je tu iadna bariéra na ktorej je text!");

	barrierEnum[i][barri_LabelUsed] = 0;
	DestroyDynamic3DTextLabel(barrierEnum[i][barri_LabelID]);

	EnterInfo(playerid, "Zmazal si text na bariere!", 3000, 0);

	return 1;
}

YCMD:dbarriertextall(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	new
	    q = 0;

	for(new i; i < MAX_BARRIERS; i++)
 	{

		if(strlen(barrierEnum[i][barri_PlacedBy]) < 2)
		    continue;

		if(barrierEnum[i][barri_LabelUsed] != 1)
			continue;

		q ++;

        barrierEnum[i][barri_LabelUsed] = 0;
   		DestroyDynamic3DTextLabel(barrierEnum[i][barri_LabelID]);

		continue;
	}

	if(q == 0)
		return SendError(playerid, "Nie sú iadne bariéry s textom!");

    EnterInfo(playerid, "Zmazal si vsetky texty na barierach!", 3000, 0);

	FormatWarnEx(playerid,4, "AdmCmd:", -1, "%s zmazal vetky texty na bariérach.", GetPlayerNameEx(playerid, NO_MASK));

	return 1;
}

YCMD:dbarrier(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsWorking[playerid] == 0 && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesmie sedie v aute!");

	for(new i; i < MAX_BARRIERS; i++)
 	{

		if(strlen(barrierEnum[i][barri_PlacedBy]) < 2)
		    continue;

		if(GetPlayerVirtualWorld(playerid) != barrierEnum[i][barri_PosVW])
		    continue;

        if(GetPlayerInterior(playerid) != barrierEnum[i][barri_PosINT])
		    continue;

		if(barrierEnum[i][barri_LabelUsed] == 5)
		    continue;

		if(!IsPlayerInRangeOfPoint(playerid, 5.0, barrierEnum[i][barri_PosX], barrierEnum[i][barri_PosY], barrierEnum[i][barri_PosZ]))
		    continue;

		if(barrierEnum[i][barri_LabelUsed] == 1)
		{
		    barrierEnum[i][barri_LabelUsed] = 0;
		    DestroyDynamic3DTextLabel(barrierEnum[i][barri_LabelID]);
		}

		format(barrierEnum[i][barri_PlacedBy], 25, "");

		barrierEnum[i][barri_PosX] = 0.0;
		barrierEnum[i][barri_PosY] = 0.0;
		barrierEnum[i][barri_PosZ] = 0.0;

		barrierEnum[i][barri_PosVW] = 0;
		barrierEnum[i][barri_PosINT] = 0;

		DestroyDynamicObject(barrierEnum[i][barri_BarrierID]);

		EnterInfo(playerid, "Zmazal si barieru!", 3000, 0);

		return 1;
	}

	SendError(playerid, "Nie je tu iadna bariéra!");

	return 1;
}

YCMD:spike(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsWorking[playerid] == 0 && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesmie sedie v aute!");

	if(IsEditingSpike[playerid] == true || IsEditingBarrier[playerid] == true)
	    return SendError(playerid, "U edituje ostnatý koberec!");

    for(new i; i < MAX_STINGERS; i++)
	{
 		if(strlen(stingerEnum[i][stin_PlacedBy]) < 2)
   			break;

        if(strlen(stingerEnum[i][stin_PlacedBy]) >= MAX_STINGERS)
            return SendError(playerid, "Nie je volný slot na ostnatý koberec!");

		continue;
	}

	new
	    Float:X,
	    Float:Y,
	    Float:Z,
	    Float:A;

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);

	//A += 90.0;

	Z -= 0.9;

	GetXYInFrontOfPlayer(playerid, X, Y, 3.0);

	IsEditingSpike[playerid] = true;
	SpikeModel[playerid] = 2899;

    new
		objectid = CreateDynamicObject(2899, X, Y, Z, 0.0, 0.0, A, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 50.0, 25.0, -1, 1);

    Streamer_UpdateEx(playerid, X, Y+0.1, Z);

	EditDynamicObject(playerid, objectid);

	return 1;
}

YCMD:spikel(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsWorking[playerid] == 0 && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesmie sedie v aute!");

    if(IsEditingSpike[playerid] == true || IsEditingBarrier[playerid] == true)
	    return SendError(playerid, "U edituje ostnatý koberec!");

    for(new i; i < MAX_STINGERS; i++)
	{
 		if(strlen(stingerEnum[i][stin_PlacedBy]) < 2)
   			break;

        if(strlen(stingerEnum[i][stin_PlacedBy]) >= MAX_STINGERS)
            return SendError(playerid, "Nie je volný slot na ostnatý koberec!");

		continue;
	}

	new
	    Float:X,
	    Float:Y,
	    Float:Z,
	    Float:A;

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);

	//A += 90.0;

	Z -= 1.0;

	GetXYInFrontOfPlayer(playerid, X, Y, 5.5);

	IsEditingSpike[playerid] = true;
	SpikeModel[playerid] = 2892;

	new
	    objectid = CreateDynamicObject(2892, X, Y, Z, 0.0, 0.0, A, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 50.0, 25.0, -1, 1);

    Streamer_UpdateEx(playerid, X, Y+0.1, Z);

	EditDynamicObject(playerid, objectid);
	return 1;
}

YCMD:dspike(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsWorking[playerid] == 0 && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesmie sedie v aute!");

	for(new i; i < MAX_STINGERS; i++)
 	{

		if(strlen(stingerEnum[i][stin_PlacedBy]) < 2)
		    continue;

		if(GetPlayerVirtualWorld(playerid) != stingerEnum[i][stin_PosVW])
		    continue;

        if(GetPlayerInterior(playerid) != stingerEnum[i][stin_PosINT])
		    continue;

		if(!IsPlayerInRangeOfPoint(playerid, 5.0, stingerEnum[i][stin_PosX], stingerEnum[i][stin_PosY], stingerEnum[i][stin_PosZ]))
		    continue;

		format(stingerEnum[i][stin_PlacedBy], 25, "");

		stingerEnum[i][stin_PosX] = 0.0;
		stingerEnum[i][stin_PosY] = 0.0;
		stingerEnum[i][stin_PosZ] = 0.0;

		stingerEnum[i][stin_PosVW] = 0;
		stingerEnum[i][stin_PosINT] = 0;

		DestroyDynamicStinger(stingerEnum[i][stin_StingerID]);

		EnterInfo(playerid, "Zmazal si ostnatny koberec!", 3000, 0);

		return 1;
	}

	SendError(playerid, "Nie je tu iadny ostatný koberec!");

	return 1;
}

YCMD:spikeinfo(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	for(new i; i < MAX_STINGERS; i++)
 	{

		if(strlen(stingerEnum[i][stin_PlacedBy]) < 2)
		    continue;

        if(GetPlayerVirtualWorld(playerid) != stingerEnum[i][stin_PosVW])
		    continue;

        if(GetPlayerInterior(playerid) != stingerEnum[i][stin_PosINT])
		    continue;

		if(!IsPlayerInRangeOfPoint(playerid, 10.0, stingerEnum[i][stin_PosX], stingerEnum[i][stin_PosY], stingerEnum[i][stin_PosZ]))
		    continue;

		new
		    string[128];

		format(string, 128, "Tento ostnatý koberec poloil %s!", stingerEnum[i][stin_PlacedBy]);
		SendSuccess(playerid, string);

		return 1;
	}

	SendError(playerid, "Nie je tu iadny ostnatý koberec!");

	return 1;
}

YCMD:barrierinfo(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	for(new i; i < MAX_BARRIERS; i++)
 	{

		if(strlen(barrierEnum[i][barri_PlacedBy]) < 2)
		    continue;

		if(GetPlayerVirtualWorld(playerid) != barrierEnum[i][barri_PosVW])
		    continue;

        if(GetPlayerInterior(playerid) != barrierEnum[i][barri_PosINT])
		    continue;

		if(!IsPlayerInRangeOfPoint(playerid, 5.0, barrierEnum[i][barri_PosX], barrierEnum[i][barri_PosY], barrierEnum[i][barri_PosZ]))
		    continue;

		new
		    string[128];

		format(string, 128, "Túto bariéru poloil %s!", barrierEnum[i][barri_PlacedBy]);
		SendSuccess(playerid, string);

		return 1;
	}

	SendError(playerid, "Nie je tu iadna bariéra!");

	return 1;

}

YCMD:pickblood(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 3 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    return SendClientCantUseCommand(playerid);

   	if(GetPlayerAdminLevel(playerid) < 3 && !IsPlayerWorking(playerid))
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerInventoryItem(playerid, inv_blood) != 0)
	    return SendError(playerid, "U má vzorku krvi!");

	for(new i; i < MAX_BLOOD; i++)
 	{

		if(strlen(bloodEnum[i][blood_Owner]) < 2)
		    continue;

		if(GetPlayerVirtualWorld(playerid) != bloodEnum[i][blood_VW])
		    continue;

    	if(GetPlayerInterior(playerid) != bloodEnum[i][blood_INT])
		    continue;

		if(!IsPlayerInRangeOfPoint(playerid, 3.0, bloodEnum[i][blood_X], bloodEnum[i][blood_Y], bloodEnum[i][blood_Z]))
		    continue;

		SetPlayerInventoryItem(playerid, inv_blood, 1);
		format(bloodInventory[playerid], 30, bloodEnum[i][blood_Owner]);

		SendSuccess(playerid, "Vzal si vzorku krvi, môe ju skontrolova na stanici!");

		format(bloodEnum[i][blood_Owner], 30, "");
		DestroyDynamicObject(bloodEnum[i][blood_ObjectID]);
		KillTimer(bloodEnum[i][blood_TimerID]);

		return 1;
	}

	SendError(playerid, "Nie je tu iadna krv!");

	return 1;

}

YCMD:bloodinfo(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	for(new i; i < MAX_BLOOD; i++)
 	{

		if(strlen(bloodEnum[i][blood_Owner]) < 2)
		    continue;

		if(GetPlayerVirtualWorld(playerid) != bloodEnum[i][blood_VW])
		    continue;

    	if(GetPlayerInterior(playerid) != bloodEnum[i][blood_INT])
		    continue;

		if(!IsPlayerInRangeOfPoint(playerid, 3.0, bloodEnum[i][blood_X], bloodEnum[i][blood_Y], bloodEnum[i][blood_Z]))
		    continue;

		new
		    string[128];

		format(string, 128, "Táto krv patrí hráèovi %s!", bloodEnum[i][blood_Owner]);
		SendSuccess(playerid, string);

		return 1;
	}

	SendError(playerid, "Nie je tu iadna krv!");

	return 1;

}

YCMD:dblood(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	for(new i; i < MAX_BLOOD; i++)
 	{

		if(strlen(bloodEnum[i][blood_Owner]) < 2)
		    continue;

        if(GetPlayerVirtualWorld(playerid) != bloodEnum[i][blood_VW])
		    continue;

    	if(GetPlayerInterior(playerid) != bloodEnum[i][blood_INT])
		    continue;

		if(!IsPlayerInRangeOfPoint(playerid, 3.0, bloodEnum[i][blood_X], bloodEnum[i][blood_Y], bloodEnum[i][blood_Z]))
		    continue;

        format(bloodEnum[i][blood_Owner], 30, "");
		DestroyDynamicObject(bloodEnum[i][blood_ObjectID]);
		KillTimer(bloodEnum[i][blood_TimerID]);

		SendSuccess(playerid, "Krv zmazaná!");

		return 1;
	}

	SendError(playerid, "Nie je tu iadna krv!");

	return 1;

}

YCMD:dbloodall(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	for(new i; i < MAX_BLOOD; i++)
 	{

		if(strlen(bloodEnum[i][blood_Owner]) < 2)
		    continue;

        format(bloodEnum[i][blood_Owner], 30, "");
		DestroyDynamicObject(bloodEnum[i][blood_ObjectID]);
		KillTimer(bloodEnum[i][blood_TimerID]);

		continue;
	}

	SendSuccess(playerid, "Vetká krv zmazaná!");
    FormatWarnEx(playerid,4, "AdmCmd:", -1, "%s zmazal vetku krv na zemi.", GetPlayerNameEx(playerid, NO_MASK));

	return 1;

}

YCMD:dspikeall(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	new q = 0;

	for(new i; i < MAX_STINGERS; i++)
 	{

		if(strlen(stingerEnum[i][stin_PlacedBy]) < 2)
		    continue;

		q ++;

		format(stingerEnum[i][stin_PlacedBy], 25, "");

		stingerEnum[i][stin_PosX] = 0.0;
		stingerEnum[i][stin_PosY] = 0.0;
		stingerEnum[i][stin_PosZ] = 0.0;

		stingerEnum[i][stin_PosVW] = 0;
		stingerEnum[i][stin_PosINT] = 0;

		DestroyDynamicStinger(stingerEnum[i][stin_StingerID]);

		EnterInfo(playerid, "Zmazal si vsetky ostnatne koberce!", 3000, 0);

		FormatWarnEx(playerid,4, "AdmCmd:", -1, "%s zmazal vetky ostnaté koberce.", GetPlayerNameEx(playerid, NO_MASK));

		continue;
	}

	if(q == 0) SendError(playerid, "Nie sú poloené iadne ostnaté koberce!");

	return 1;
}

YCMD:poslednylogin(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 1)
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[30];

	if(sscanf(params, "s[30]", S_var))
	    return SendClientSyntax(playerid, "/poslednylogin (/pl) [id / meno hraca]");

	if(IsNumeric(S_var))
	{
	    if(!IsPlayerLogged(strval(S_var)))
	        return SendClientPlayerOffline(playerid);

		new
			S_query[128];

		mysql_format(MYSQL, S_query, 128, "SELECT LastOn, isPKed FROM char_main WHERE Username = '%e'", ReturnName(strval(S_var)));

		new
		    Cache:q = mysql_query(MYSQL, S_query),
			LastOn[64],
			isPKed;

        if(cache_num_rows() < 1)
		{
		    cache_delete(q);
		    return SendError(playerid, "Tento hráè nie je v databáze, zadaj aj podtrník!");
		}

        cache_get_value_name(0, "LastOn", LastOn);
        cache_get_value_name_int(0, "isPKed", isPKed);
        cache_delete(q);

        if(isPKed == 1)
            SCFM(playerid, 0xD0D0D0FF, "> %s sa naposledy pripojil %s, teraz má CK!", GetPlayerNameEx(strval(S_var), NO_MASK), LastOn);
		else
        	SCFM(playerid, 0xD0D0D0FF, "> %s sa naposledy pripojil %s!", GetPlayerNameEx(strval(S_var), NO_MASK), LastOn);
	}
	else
	{
	    new
			S_query[128];

		mysql_format(MYSQL, S_query, 128, "SELECT LastOn, isPKed FROM char_main WHERE Username = '%e'", S_var);

		new
		    Cache:q = mysql_query(MYSQL, S_query),
			LastOn[64],
			isPKed;

        if(cache_num_rows() < 1)
		{
		    cache_delete(q);
		    return SendError(playerid, "Tento hráè nie je v databáze, zadaj aj podtrník!");
		}

        cache_get_value_name(0, "LastOn", LastOn);
        cache_get_value_name_int(0, "isPKed", isPKed);
        cache_delete(q);

        if(isPKed == 1)
            SCFM(playerid, 0xD0D0D0FF, "> %s sa naposledy pripojil %s, teraz má CK!", str_replace("_", " ", S_var), LastOn);
		else
        	SCFM(playerid, 0xD0D0D0FF, "> %s sa naposledy pripojil %s!", str_replace("_", " ", S_var), LastOn);
	}
	return 1;
}

YCMD:odisarm(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[30];

	if(sscanf(params, "s[30]", S_var))
	    return SendClientSyntax(playerid, "/odisarm [meno hraca]");
	    
	foreach(new x : Player)
	{
	    if(strcmp(ReturnName(x), S_var, false))
	        continue;
	        
		return SendError(playerid, "Tento hráè je práve v hre!");
	}

	new
		S_query[256];

	mysql_format(
		MYSQL, S_query, sizeof S_query,
		"DELETE FROM player_weapons WHERE Username = '%e'", S_var);

	mysql_tquery(MYSQL, S_query);

	SCFM(playerid, COLOR_ADMINCMD, "> Zmazal si vetky zbrane offline hráèovi %s!", S_var);
	FormatWarnEx(playerid, 3, "AdmCmd:", COLOR_ADMINCMD, "%s odzbrojil offline hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), S_var);
	FormatLog(log_type_admin, "%s(%s) odzbrojil offline hraca %s.", ReturnName(playerid), ReturnIP(playerid), S_var);
	return 1;
}

YCMD:dbarrierall(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	new q = 0;

	for(new i; i < MAX_BARRIERS; i++)
 	{

		if(strlen(barrierEnum[i][barri_PlacedBy]) < 2)
		    continue;

		q ++;

		if(barrierEnum[i][barri_LabelUsed] == 1)
		{
		    barrierEnum[i][barri_LabelUsed] = 0;
		    DestroyDynamic3DTextLabel(barrierEnum[i][barri_LabelID]);
		}
		else if(barrierEnum[i][barri_LabelUsed] == 5)
		{
		    new bool:tmpv = false;
		    foreach( new x : Player )
		    {
		        if(editingpaskaid{x} != i)
		            continue;

				tmpv = true;
				break;
		    }

		    if(tmpv == true)
				continue;

            DestroyLineSegment(barrierEnum[i][barri_BarrierID]);
		}
		else
		    DestroyDynamicObject(barrierEnum[i][barri_BarrierID]);

		format(barrierEnum[i][barri_PlacedBy], 25, "");

		barrierEnum[i][barri_PosX] = 0.0;
		barrierEnum[i][barri_PosY] = 0.0;
		barrierEnum[i][barri_PosZ] = 0.0;

		barrierEnum[i][barri_PosVW] = 0;
		barrierEnum[i][barri_PosINT] = 0;

		continue;
	}

	if(q == 0) return SendError(playerid, "Nie sú poloené iadne bariéry!");

    EnterInfo(playerid, "Zmazal si vsetky bariery!", 3000, 0);

	FormatWarnEx(playerid,4, "AdmCmd:", -1, "%s zmazal vetky bariéry.", GetPlayerNameEx(playerid, NO_MASK));

	return 1;
}

YCMD:ajail(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendClientCantUseCommand(playerid);

	new
	    I_var,
	    I_var1,
	    S_var[128] = "Nespecifikovane";

	if(sscanf(params, "dds[128]", I_var, I_var1, S_var))
	    return SendClientSyntax(playerid, "/ajail [id] [minúty] [dovod]");

	if(!IsPlayerConnected(I_var))
	    return SendError(playerid, "Tento hráè nie je pripojený!");

	if(isInJail[I_var] == true)
	    return SCFM(playerid, COLOR_ADMINCMD, "> Tento hráè u je v admin jaile za %s", jail_Reason[I_var]);

    if(I_var1 < 1 || I_var1 > 99999)
	    return SendError(playerid, "Poèet minút nemôe by mení ako 0 a väèí ako 99999!");

	new str[288], title[32];
 	switch(GetPlayerAdminLevel(playerid)) {
   		case 0: strcat(title, "Hráè");
		case 1: strcat(title, "Helper");
	   	case 2: strcat(title, "Moderator");
	    case 6: strcat(title, "Administrator");
	}
 	format(str,288,"> %s %s udelil admin jail hráèovi %s na %d minút. Dôvod: %s", title, ReturnMaster(playerid), GetPlayerNameEx(I_var, NO_MASK), I_var1, S_var);
  	SendLocalMessage(I_var,50.0,COLOR_SERVER,str);
  	
  	FormatWarn(-1, "AdmWarn:", COLOR_ADMINCMD, "%s %s udelil admin jail hráèovi %s na %d minút. Dôvod: %s", title, ReturnMaster(playerid), GetPlayerNameEx(I_var, NO_MASK), I_var1, S_var);
  	
  	SCFM(I_var, COLOR_SERVER, "> Si v admin jaile od administrátora %s za %s", ReturnMaster(playerid), S_var);

	SetPlayerInterior(I_var, 0);
	SetPlayerVirtualWorld(I_var, 90000+I_var);
	SetPlayerPos(I_var, 167.164, 1391.767, 11.562);
	SetPlayerFacingAngle(I_var, 360.0);
	SetCameraBehindPlayer(I_var);

	isInJail[I_var] = true;
	jail_Time[I_var][0] = I_var1 - 1;
	jail_Time[I_var][1] = 59;
	format(jail_Admin[I_var], 30, ReturnMaster(playerid));
	format(jail_Reason[I_var], 128, S_var);

    if(GetPlayerFactionType(I_var) == FACTION_TYPE_LAW && IsPlayerWorking(I_var))
	{
	    Weapons::resetWeapons(I_var);
	}

	web_LatestFormat("%s dostal admin jail", GetPlayerNameEx(I_var, NO_MASK));

	Achievement::Reward(I_var, ACHIEVEMENT_ADMIN_JAIL);
	FormatLog(log_type_punish, "%s(%s) dal admin jail %s(%s) na %d minut za %s", ReturnMaster(playerid), ReturnIP(playerid), ReturnMaster(I_var), ReturnIP(I_var), I_var1, S_var);
	return 1;
}

YCMD:oajail(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendClientCantUseCommand(playerid);

	new
	    I_var[30],
	    I_var1,
	    S_var[128] = " Nespecifikovane";

	if(sscanf(params, "s[30] dS(Nespecifikovane)[128]", I_var, I_var1, S_var))
	    return SendClientSyntax(playerid, "/ajail [master_acc/charakter] [minúty] <dovod>");

	foreach( new i : Player )
	{
	    if(!IsPlayerLogged(i))
	        continue;

		if(strcmp(ReturnMaster(i), I_var, false) && strcmp(ReturnName(i), I_var, false))
		    continue;

		SCFM(playerid, COLOR_ADMINCMD, "> Tento hráè je prihlásený ( %s ), poui /ajail!", GetPlayerNameEx(i, USE_PUREIDNAME));
		return 1;
	}

    if(I_var1 < 1 || I_var1 > 9999)
	    return SendError(playerid, "Poèet minút nemôe by mení ako 0 a väèí ako 9999!");

	new
	    S_query[1024],
	    Cache:query;

	mysql_format(MYSQL, S_query, 1024, "SELECT * FROM master_accounts WHERE Username = '%e'",
	    I_var, I_var, I_var, I_var);

	query = mysql_query(MYSQL, S_query);

	new pocet1 = cache_num_rows();
	new uid = -51515;

	if(pocet1 > 0)
		cache_get_value_name_int(0, "id", uid);

	cache_delete(query);

	mysql_format(MYSQL, S_query, 1024, "SELECT * FROM char_main WHERE userID = '%d' OR Username = '%e'",
	    uid, I_var);

	query = mysql_query(MYSQL, S_query);

	new pocet2 = cache_num_rows();

	if(pocet1 == 0)
	    cache_get_value_name_int(0, "userID", uid);

    cache_delete(query);

	if(pocet1 == 0 && pocet2 == 0)
	{
	    return SendError(playerid, "Takýto úèet neexistuje!");
	}

	mysql_format(MYSQL, S_query, 1024, "UPDATE master_accounts SET isInJail = '1', jail_Admin = '%e', jail_Reason = '%e', jail_Time_M = '%d', jail_Time_S = '%d' WHERE Username = '%e' OR id = '%d'",
	    ReturnMaster(playerid), S_var, I_var1 -1, 59, I_var, uid);

	query = mysql_query(MYSQL, S_query);
	cache_delete(query);

	new str[288], title[32];
 	switch(GetPlayerAdminLevel(playerid)) {
   		case 0: strcat(title, "Hráè");
		case 1: strcat(title, "Helper");
	   	case 2: strcat(title, "Moderator");
	    default: strcat(title, "Administrator");
	}
 	format(str,288,"> %s %s udelil admin jail offline hráèovi %s na %d minút. Dôvod: %s", title, ReturnMaster(playerid), I_var, I_var1, S_var);
  	SendClientMessageToAll(COLOR_ADMINCMD, str);

	FormatLog(log_type_punish, "%s(%s) dal offline admin jail %s(%s) na %d minut za %s", ReturnMaster(playerid), ReturnIP(playerid), I_var, I_var1, S_var);

	return 1;
}

YCMD:unajail(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendClientCantUseCommand(playerid);

	new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/unajail [id]");

	if(!IsPlayerConnected(I_var))
	    return SendError(playerid, "Tento hráè nie je pripojený!");

	SetPlayerPos(I_var, 2285.259, -54.464, 26.484);
	SetPlayerFacingAngle(I_var, 270.0);
	SetPlayerInterior(I_var, 0);
	SetPlayerVirtualWorld(I_var, 0);
	SetCameraBehindPlayer(I_var);

	isInJail[I_var] = false;
	jail_Time[I_var][0] = 0;
	jail_Time[I_var][1] = 0;
	format(jail_Admin[I_var], 30, "");
	format(jail_Reason[I_var], 128, "");

    FormatWarnEx(-1,2, "AdmCmd:", COLOR_ADMINCMD, "%s dal un-adminjail hráèovi %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	FormatLog(log_type_punish, "%s(%s) dal un-adminjail %s(%s).", ReturnMaster(playerid), ReturnIP(playerid), ReturnMaster(I_var), ReturnIP(I_var));

	return 1;
}

YCMD:kick(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendClientCantUseCommand(playerid);

	new
	    I_var,
	    S_var[128] = "Nespecifikovane";

	if(sscanf(params, "dS(Nespecifikovane)[128]", I_var, S_var))
	    return SendClientSyntax(playerid, "/kick [id] <dovod>");

	if(!IsPlayerConnected(I_var))
	    return SendError(playerid, "Tento hráè nie je pripojený!");

	if(GetPlayerAdminLevel(I_var) > GetPlayerAdminLevel(playerid))
 	{

 	    FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s sa pokúsil vyhodi hráèa %s za %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	 	return SendError(playerid, "Tohoto hráèa nemôe vyhodi!");
	}

	if(GetPlayerAdminLevel(I_var) == 6)
	{
	    if(!strcmp(ReturnMaster(I_var), "bigw3b", false))
	    {
	        FormatWarnEx(playerid, 2,"AdmCmd:", COLOR_ADMINCMD, "%s sa pokúsil vyhodi hráèa %s za %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	        return SendError(playerid, "Tohoto hráèa nemôe vyhodi!");
	    }
	}

    Achievement::Reward(I_var, ACHIEVEMENT_KICK);
    FormatLog(log_type_punish, "%s(%s) dal kick %s(%s) za %s", ReturnMaster(playerid), ReturnIP(playerid), ReturnMaster(I_var), ReturnIP(I_var), S_var);

    if(GetPlayerFactionType(I_var) == FACTION_TYPE_LAW && IsPlayerWorking(I_var))
	{
	    Weapons::resetWeapons(I_var);
	}

	stats_Kick[I_var] ++;

    ex_KickPlayer(I_var, KICK_TYPE_ADMIN, S_var, playerid);
	return 1;
}

YCMD:kickall(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	foreach( new i : Player )
	{
	    Achievement::Reward(i, ACHIEVEMENT_KICKALL);
	    if(GetPlayerAdminLevel(i) >= 4)
	        continue;
	        
		Kick(i);
	}

    SendError(playerid, "Vetky hráèi vyhodení!");
    FormatWarnEx(-1, 4,"AdmCmd:", COLOR_ADMINCMD, "%s vyhodil vetkých hráèov zo serveru!", GetPlayerNameEx(playerid, USE_PUREIDNAME));

    web_LatestFormat("<strong>Vsichni hraci byli vyhozeni</strong>");
	return 1;
}

YCMD:ban(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

    new
	    I_var,
	    S_var[128] = "Nespecifikovane";

	if(sscanf(params, "dS(Nespecifikovane)[128]", I_var, S_var))
	    return SendClientSyntax(playerid, "/ban [id] <dovod>");

    if(!IsPlayerConnected(I_var))
	    return SendError(playerid, "Tento hráè nie je pripojený!");

    if(GetPlayerAdminLevel(I_var) > GetPlayerAdminLevel(playerid))
 	{

 	    FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s sa pokúsil zabanova hráèa %s za %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	 	return SendError(playerid, "Tohoto hráèa nemôe zabanova!");
	}

    if(GetPlayerAdminLevel(I_var) == 6)
	{
	    if(!strcmp(ReturnMaster(I_var), "bigw3b", false))
	    {
	        FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s sa pokúsil zabanova hráèa %s za %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	        return SendError(playerid, "Tohoto hráèa nemôe zabanova!");
	    }
	}

	stats_Ban[I_var] ++;

	FormatLog(log_type_punish, "%s(%s) dal ban %s(%s) za %s", ReturnMaster(playerid), ReturnIP(playerid), ReturnMaster(I_var), ReturnIP(I_var), S_var);
	
	if(GetPlayerFactionType(I_var) == FACTION_TYPE_LAW && IsPlayerWorking(I_var))
	{
	    Weapons::resetWeapons(I_var);
	}

    Achievement::Reward(I_var, ACHIEVEMENT_BAN);
	BanPlayer(I_var, S_var, ReturnMaster(playerid), 1, playerid);
	return 1;
}

YCMD:otban(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

    new
	    I_var[30],
	    MESIAC,
	    DEN,
	    HODINA,
	    MINUTA,
	    S_var[128] = "Nespecifikovane";

	if(sscanf(params, "s[30] ddddS(Nespecifikovane)[128]", I_var, MESIAC, DEN, HODINA, MINUTA, S_var))
	    return SendClientSyntax(playerid, "/oban [master acc/charakter] [mesiace] [dni] [hodiny] [minuty] <dovod>");

    foreach( new i : Player )
	{
	    if(!IsPlayerLogged(i))
	        continue;

		if(strcmp(ReturnMaster(i), I_var, false) && strcmp(ReturnName(i), I_var, false))
		    continue;

		SCFM(playerid, COLOR_ADMINCMD, "> Tento hráè je prihlásený ( %s ), poui /ban!", GetPlayerNameEx(i, USE_PUREIDNAME));
		return 1;
	}

	new
	    S_query[1024],
	    Cache:query;

	mysql_format(MYSQL, S_query, 1024, "SELECT * FROM master_accounts WHERE Username = '%e'",
	    I_var);

	query = mysql_query(MYSQL, S_query);

	new pocet1 = cache_num_rows();
	new uid = -51515;

	if(pocet1 > 0)
		cache_get_value_name_int(0, "id", uid);

	cache_delete(query);

	mysql_format(MYSQL, S_query, 1024, "SELECT * FROM char_main WHERE userID = '%d' OR Username = '%e'",
	    uid, I_var);

	query = mysql_query(MYSQL, S_query);

	new pocet2 = cache_num_rows();

	if(pocet1 == 0 && pocet2 > 0)
	    cache_get_value_name_int(0, "userID", uid);

    cache_delete(query);

	if(pocet1 == 0 && pocet2 == 0)
	{
	    return SendError(playerid, "Takýto úèet neexistuje!");
	}

	mysql_format(MYSQL, S_query, 1024, "SELECT * FROM master_accounts WHERE Username = '%e' OR id = '%d'",
	    I_var, uid);

	query = mysql_query(MYSQL, S_query);

	new
	    masterAcc[35];

    new
	    unbanUnix = gettime();

	unbanUnix += ( 60 * MINUTA );
	unbanUnix += ( 3600 * HODINA );
	unbanUnix += ( 86400 * DEN );
	unbanUnix += ( 2592000 * MESIAC );

    cache_get_value_name(0, "Username", masterAcc);

	cache_delete(query);

	mysql_format(MYSQL, S_query, 1024, "INSERT INTO gm_ipbans (Username, Master_Acc, IP, AdminMACC, Reason, Date, UnbanUnix, gpci) VALUES ('OFFLINE BAN', '%s', 'MASTER ACC BAN', '%s', '%s', NOW(), '%d', '0')",
	    masterAcc, ReturnMaster(playerid), S_var, unbanUnix);

	mysql_query(MYSQL, S_query, false);

	mysql_format(MYSQL, S_query, sizeof S_query,
		"INSERT INTO punishlist (MasterAcc, Username, AdminMACC, Date, Reason, Type, Unban) VALUES ('%e', 'Neuvedeno', '%e', NOW(), '%e', '3', '%d')",
        masterAcc, ReturnMaster(playerid), S_var, unbanUnix
	);

	mysql_tquery(MYSQL, S_query);

	new str[288], title[32];
 	switch(GetPlayerAdminLevel(playerid)) {
   		case 0: strcat(title, "Hráè");
		case 1: strcat(title, "Helper");
	   	case 2: strcat(title, "Moderator");
	   	default: strcat(title, "Administrator");
	}
 	format(str,288,"> %s %s zabanoval offline hráèa %s do %s. Dôvod: %s", title, ReturnMaster(playerid), masterAcc, S_var, getdateunix(unbanUnix));
  	SendClientMessageToAll(COLOR_ADMINCMD, str);

	FormatLog(log_type_punish, "%s(%s) dal casovy offline ban %s do %s za %s", ReturnMaster(playerid), ReturnIP(playerid), masterAcc, getdateunix(unbanUnix), S_var);

	return 1;
}

YCMD:tban(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

    new
	    I_var,
	    MESIAC,
	    DEN,
	    HODINA,
	    MINUTA,
	    S_var[128] = "Nespecifikovane";

	if(sscanf(params, "dddddS(Nespecifikovane)[128]", I_var, MESIAC, DEN, HODINA, MINUTA, S_var))
	    return SendClientSyntax(playerid, "/tban [id] [mesiace] [dni] [hodiny] [minuty] <dovod>");

    if(!IsPlayerConnected(I_var))
	    return SendError(playerid, "Tento hráè nie je pripojený!");

    if(GetPlayerAdminLevel(I_var) > GetPlayerAdminLevel(playerid))
 	{

 	    FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s sa pokúsil zabanova hráèa %s za %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	 	return SendError(playerid, "Tohoto hráèa nemôe zabanova!");
	}

    if(GetPlayerAdminLevel(I_var) == 6)
	{
	    if(!strcmp(ReturnMaster(I_var), "bigw3b", false))
	    {
	        FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s sa pokúsil zabanova hráèa %s za %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	        return SendError(playerid, "Tohoto hráèa nemôe zabanova!");
	    }
	}

	new
	    unbanUnix = gettime();

	unbanUnix += ( 60 * MINUTA );
	unbanUnix += ( 3600 * HODINA );
	unbanUnix += ( 86400 * DEN );
	unbanUnix += ( 2592000 * MESIAC );

	stats_Ban[I_var] ++;

	FormatLog(log_type_punish, "%s(%s) dal casovy ban %s(%s) za %s do %s", ReturnMaster(playerid), ReturnIP(playerid), ReturnMaster(I_var), ReturnIP(I_var), S_var, getdateunix(unbanUnix));

    Achievement::Reward(I_var, ACHIEVEMENT_BAN);
	BanPlayer(I_var, S_var, ReturnMaster(playerid), 1, playerid, unbanUnix);
	return 1;
}

YCMD:oban(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

    new
	    I_var[30],
	    S_var[128] = "Nespecifikovane";

	if(sscanf(params, "s[30]S(Nespecifikovane)[128]", I_var, S_var))
	    return SendClientSyntax(playerid, "/oban [master acc/charakter] <dovod>");

    foreach( new i : Player )
	{
	    if(!IsPlayerLogged(i))
	        continue;

		if(strcmp(ReturnMaster(i), I_var, false) && strcmp(ReturnName(i), I_var, false))
		    continue;

		SCFM(playerid, COLOR_ADMINCMD, "> Tento hráè je prihlásený ( %s ), poui /ban!", GetPlayerNameEx(i, USE_PUREIDNAME));
		return 1;
	}

	new
	    S_query[1024],
	    Cache:query;

	mysql_format(MYSQL, S_query, 1024, "SELECT * FROM master_accounts WHERE Username = '%e'",
	    I_var);

	query = mysql_query(MYSQL, S_query);

	new pocet1 = cache_num_rows();
	new uid = -51515;

	if(pocet1 > 0)
		cache_get_value_name_int(0, "id", uid);

	cache_delete(query);

	mysql_format(MYSQL, S_query, 1024, "SELECT * FROM char_main WHERE userID = '%d' OR Username = '%e'",
	    uid, I_var);

	query = mysql_query(MYSQL, S_query);

	new pocet2 = cache_num_rows();

	if(pocet2 > 0)
	    cache_get_value_name_int(0, "userID", uid);

    cache_delete(query);

	if(pocet1 == 0 && pocet2 == 0)
	{
	    return SendError(playerid, "Takýto úèet neexistuje!");
	}

	mysql_format(MYSQL, S_query, 1024, "SELECT * FROM master_accounts WHERE Username = '%e' OR id = '%d'",
	    I_var, uid);

	query = mysql_query(MYSQL, S_query);

	new
	    masterAcc[35],
		IP[24];

	if(cache_num_rows()>0)
	{
    	cache_get_value_name(0, "Username", masterAcc);
    	cache_get_value_name(0, "LastIP", IP);
	}
	else
	{
	    cache_delete(query);
	    return SendError(playerid, "Ucet nebol najdeny, terminujem akciu!");
	}
	cache_delete(query);

	mysql_format(MYSQL, S_query, 1024, "INSERT INTO gm_ipbans (Username, Master_Acc, IP, AdminMACC, Reason, Date, UnbanUnix) VALUES ('%e', '%e', '%e', '%e', '%e', NOW(), '0')",
	    "N/A",masterAcc, IP, ReturnMaster(playerid), S_var);

	mysql_query(MYSQL, S_query, false);

	mysql_format(MYSQL, S_query, sizeof S_query,
		"INSERT INTO punishlist (MasterAcc, Username, AdminMACC, Date, Reason, Type) VALUES ('%e', 'Neuvedeno', '%e', NOW(), '%e', '2')",
        masterAcc, ReturnMaster(playerid), S_var
	);

	mysql_tquery(MYSQL, S_query);

	new str[288], title[32];
 	switch(GetPlayerAdminLevel(playerid)) {
   		case 0: strcat(title, "Hráè");
		case 1: strcat(title, "Helper");
	   	case 2: strcat(title, "Moderator");
	    default: strcat(title, "Administrator");
	}
 	format(str,288,"> %s %s zabanoval offline hráèa %s. Dôvod: %s", title, ReturnMaster(playerid), masterAcc, S_var);
  	SendClientMessageToAll(COLOR_ADMINCMD, str);

	FormatLog(log_type_punish, "%s(%s) dal offline ban %s za %s", ReturnMaster(playerid), ReturnIP(playerid), masterAcc, S_var);

	return 1;
}

YCMD:unban(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[43];

	if(sscanf(params, "s[43]", S_var))
	    return SendClientSyntax(playerid, "/unban [meno charakteru/master accountu/gpci]");

    new
		S_query[128],
	    Cache:q;

    mysql_format(MYSQL, S_query, 128, "SELECT * FROM gm_ipbans WHERE Username = '%e' OR Master_Acc = '%e' OR gpci = '%e'", S_var, S_var, S_var);
	q = mysql_query(MYSQL, S_query);

	new pocet = cache_num_rows();
 	cache_delete(q);

 	if(pocet == 0)
 	    return SendError(playerid, "Tento úèet nie je zabanovaný, alebo neexistuje!");

	mysql_format(MYSQL, S_query, 128, "DELETE FROM gm_ipbans WHERE Username = '%e' OR Master_Acc = '%e' OR gpci = '%e'", S_var, S_var, S_var);
	q = mysql_query(MYSQL, S_query);
 	cache_delete(q);

	SCFM(playerid, COLOR_ADMINCMD, "> Udelil si unban hráèovi %s!", S_var);

	FormatLog(log_type_punish, "%s(%s) dal unban hracovi %s.", ReturnName(playerid), ReturnIP(playerid), S_var);
    FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s dal unban hráèovi %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), S_var);
	return 1;
}

YCMD:ck(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

    new
	    I_var,
	    ren,
	    S_var[128] = "Nespecifikovane";

	if(sscanf(params, "ddS(Nespecifikovane)[128]", I_var, ren, S_var))
	    return SendClientSyntax(playerid, "/ck [id] [premenovanie (0(ano) 1(nie))] <dovod>");

    if(!IsPlayerConnected(I_var))
	    return SendError(playerid, "Tento hráè nie je pripojený!");

	if(ren < 0 || ren > 1)
	    return SendClientSyntax(playerid, "/ck [id] [premenovanie (0(ano) 1(nie))] <dovod>");

    if(GetPlayerAdminLevel(I_var) > GetPlayerAdminLevel(playerid))
 	{

 	    FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s sa pokúsil udeli CK hráèovi %s za %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	 	return SendError(playerid, "Tomuto hráèovi nemôe da CK!");
	}
 	FormatLog(log_type_punish, "%s(%s) dal CK %s(%s) za %s", ReturnMaster(playerid), ReturnIP(playerid), ReturnMaster(I_var), ReturnIP(I_var), S_var);

	CKPlayer(I_var, S_var, playerid, ren);
	return 1;
}

YCMD:ock(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

    new
	    I_var[30],
	    ren,
	    S_var[128] = "Nespecifikovane";

	if(sscanf(params, "s[30] dS(Nespecifikovane)[128]", I_var, ren, S_var))
	    return SendClientSyntax(playerid, "/ock [meno offline hraca] [premenovanie (0(ano)-1(nie))] <dovod>");

    if(ren < 0 || ren > 1)
	    return SendClientSyntax(playerid, "/ock [meno offline hraca] [premenovanie (0(ano)-1(nie))] <dovod>");

	new
		query[1024];
	mysql_format(MYSQL, query, 1024, "SELECT Username FROM char_main WHERE Username = '%e'", I_var);
	new
	    Cache:quer = mysql_query(MYSQL, query);
	if(cache_num_rows() < 1)
	    return cache_delete(quer), SendError(playerid, "Tento hráè neexistuje!");
	cache_delete(quer);

    FormatLog(log_type_punish, "%s(%s) dal offline CK %s za %s", ReturnMaster(playerid), ReturnIP(playerid), I_var, S_var);

	mysql_format(MYSQL, query, 1024, "UPDATE char_main SET isPKed = %d, PKDate = NOW(), PKReason = '%e', PKAdmin = '%e' WHERE Username = '%e'",
		1+ren,S_var, ReturnMaster(playerid), I_var);

	mysql_query(MYSQL, query, false);

	new str[288], title[32];
 	switch(GetPlayerAdminLevel(playerid)) {
	    case 0: strcat(title, "Hráè");
		case 1: strcat(title, "Helper");
  		case 2: strcat(title, "Moderator");
	    default: strcat(title, "Administrator");
	}
    format(str,288,"> %s %s udelil offline CK hráèovi %s. Dôvod: %s", title, ReturnMaster(playerid), I_var, S_var);
    SendClientMessageToAll(COLOR_ADMINCMD, str);
	return 1;
}

YCMD:rename(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

    new
	    I_var,
	    S_var[128] = "Nespecifikovane";

	if(sscanf(params, "ds[30]", I_var, S_var))
	    return SendClientSyntax(playerid, "/rename [id] [nove meno]");

    FormatLog(log_type_punish, "%s(%s) dal rename %s na %s", ReturnMaster(playerid), ReturnIP(playerid), ReturnName(I_var), S_var);
    new str[288];
    format(str,288,"(( %s odteraz vystupuje pod menom %s ))", str_replace("_", " ", ReturnName(I_var)), str_replace("_", " ", S_var));
    SendClientMessageToAll(COLOR_GREY, str);

    web_LatestFormat("%s se jmenuje %s", str_replace("_", " ", ReturnName(I_var)), str_replace("_", " ", S_var));

	new name[25];
	GetPlayerName(I_var, name, 25);
    doPlayerLogout(I_var);
    renameCharacter(name, S_var);
	if(IsPlayerIPBanned(I_var) == 0) return 1;
    SetPlayerColor(I_var, COLOR_PLAYER);
    ReloadVariables_Login(I_var);
    format(S_masterAccount[I_var], 48, ReturnName(I_var));
    PlayAudioStreamForPlayerEx(I_var, "http://countyliferoleplay.eu/INTRO.mp3", .ambient = true);
    SetPlayerLoginCamera(I_var);
    for(new i; i < 100; i++) SendClientMessage(I_var, COLOR_WHITE, " ");
    for(new i; i < sizeof(textdraw_LoginTD); i++) TextDrawShowForPlayer(I_var, textdraw_LoginTD[i]);
	SetTimerEx("timer_ShowLoginTextdraw",1500,false,"i",I_var);

	return 1;
}

YCMD:unck(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[30];

	if(sscanf(params, "s[30]", S_var))
	    return SendClientSyntax(playerid, "/unck [meno charakteru]");

    new
		S_query[128],
	    Cache:q;
    mysql_format(MYSQL, S_query, 128, "SELECT Username FROM char_main WHERE Username = '%e'", S_var);
	q = mysql_query(MYSQL, S_query);
	if(cache_num_rows() < 1)
	    return cache_delete(q), SendError(playerid, "Tento hráè neexistuje!");
	cache_delete(q);

	mysql_format(MYSQL, S_query, 128, "UPDATE char_main SET isPKed = 0 WHERE Username = '%e'", S_var);
	q = mysql_query(MYSQL, S_query);
 	cache_delete(q);

	SCFM(playerid, COLOR_ADMINCMD, "> Udelil si unCK hráèovi %s!", S_var);

	FormatLog(log_type_punish, "%s(%s) dal unCK hracovi %s.", ReturnName(playerid), ReturnIP(playerid), S_var);
    FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s dal unCK hráèovi %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), S_var);
	return 1;
}

YCMD:hpm(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 1)
		return SendClientCantUseCommand(playerid);

	new
	    I_var,
	    S_var[128];

	if(sscanf(params, "ds[128]", I_var, S_var))
	    return SendClientSyntax(playerid, "/hpm [id] [správa]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

    SCFM(playerid, 0x8be78dff, "> Odoslal si Helper PM pre %s: %s", GetPlayerNameEx(I_var, NO_MASK), S_var);
	SCFM(I_var, 0x8be78dff, "(( Helper: %s ))", S_var);

	MessagesSent[playerid]++;

	FormatWarn(playerid, "HelCmd:", 0x8be78dff, "%s poslal Helper PM pre %s: %s", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	return 1;
}

YCMD:mpm(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 2)
		return SendClientCantUseCommand(playerid);

	new
	    I_var,
	    S_var[128];

	if(sscanf(params, "ds[128]", I_var, S_var))
	    return SendClientSyntax(playerid, "/mpm [id] [správa]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

    SCFM(playerid, 0xd48be7ff, "> Odoslal si Moderator PM pre %s: %s", GetPlayerNameEx(I_var, NO_MASK), S_var);
	SCFM(I_var, 0xd48be7ff, "(( Moderator: %s ))", S_var);

	MessagesSent[playerid]++;

	FormatWarnEx(playerid,2, "ModCmd:", 0xd48be7ff, "%s poslal Moderator PM pre %s: %s", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	return 1;
}

YCMD:apm(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 3)
		return SendClientCantUseCommand(playerid);

	new
	    I_var,
	    S_var[128];

	if(sscanf(params, "ds[128]", I_var, S_var))
	    return SendClientSyntax(playerid, "/apm [id] [správa]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	new
	    color;

	switch(GetPlayerAdminLevel(playerid))
	{
	    case 3:
	    {
	        color = 0xffc100ff;
	    }
	    case 4:
	    {
	        color = 0x3b90f0ff;
	    }
	    default:
	    {
	        color = 0xff4646ff;
	    }
	}

    SCFM(playerid, color, "> Odoslal si Admin PM pre %s: %s", GetPlayerNameEx(I_var, NO_MASK), S_var);
	SCFM(I_var, color, "(( Administrator: %s ))", S_var);

	MessagesSent[playerid]++;

	FormatWarnEx(playerid,3, "AdmCmd:", COLOR_ADMINCMD, "%s poslal Admin PM pre %s: %s", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	return 1;
}

YCMD:zmazatchat(playerid, params[], help)
{
	for(new i; i < 20; i++)
	{
	    SCFM(playerid, -1, " ");
	}
	return 1;
}

YCMD:helperchat(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 1)
	    return SendClientCantUseCommand(playerid);

	new str[128];
	if(sscanf(params,"s[128]",str))
	    return SendClientSyntax(playerid, "/helperchat (/hel) [správa]");

	new
	    finalString[128*2];

	format(finalString, 128*2, "(( Helper Chat - %s: %s ))", GetPlayerNameEx(playerid, USE_PUREIDNAME), str);

	foreach ( new i : Player )
	{
	    if(!IsPlayerLogged(i))
	        continue;

        if(GetPlayerAdminLevel(i) < 1)
            continue;

		SendClientMessage(i, 0xc2e7ceff, finalString);
	}

	MessagesSent[playerid]++;
	return 1;
}

YCMD:modchat(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendClientCantUseCommand(playerid);

	new str[128];
	if(sscanf(params,"s[128]",str))
	    return SendClientSyntax(playerid, "/modchat (/mod) [správa]");

	new
	    finalString[128*2];

	format(finalString, 128*2, "(( Mod Chat - %s: %s ))", GetPlayerNameEx(playerid, USE_PUREIDNAME), str);

	foreach ( new i : Player )
	{
	    if(!IsPlayerLogged(i))
	        continue;

        if(GetPlayerAdminLevel(i) < 2)
            continue;

		SendClientMessage(i, 0xc2e7ceff, finalString);
	}

	MessagesSent[playerid]++;
	return 1;
}

YCMD:adminchat(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	new str[128];
	if(sscanf(params,"s[128]",str))
	    return SendClientSyntax(playerid, "/adminchat (/adm) [správa]");

	new
	    finalString[128*2];

	format(finalString, 128*2, "(( Admin Chat - %s: %s ))", GetPlayerNameEx(playerid, USE_PUREIDNAME), str);

	foreach ( new i : Player )
	{
	    if(!IsPlayerLogged(i))
	        continue;

        if(GetPlayerAdminLevel(i) < 3)
            continue;

		SendClientMessage(i, 0xc2e7ceff, finalString);
	}

	MessagesSent[playerid]++;
	return 1;
}

YCMD:adminupdate(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 1)
	    return SendClientCantUseCommand(playerid);

    AdminNews(playerid);

	return 1;

}

YCMD:setcas(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/setcas [hodina]");

	SetWorldTime(I_var);
    gActualTime = I_var;

	SCFM(playerid, 0xD0D0D0FF, "> Nastavil si èas %d:00!", I_var);

	FormatWarnEx(playerid, 3,"AdmCmd:", COLOR_ADMINCMD, "%s nastavil èas %d:00.", GetPlayerNameEx(playerid, USE_PUREIDNAME), I_var);

	return 1;

}

YCMD:setpocasie(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/setpocasie [id poèasia (/listpocasie)]");

	if(I_var < 0 || I_var > 50)
	    return SendClientSyntax(playerid, "/setpocasie [id poèasia (/listpocasie)]");

	SetWeather(I_var);

	if(I_var < sizeof(weathers))
	{
		SCFM(playerid, 0xD0D0D0FF, "> Nastavil si poèasie %s!", weathers[I_var][1]);
		FormatWarnEx(playerid,3, "AdmCmd:", COLOR_ADMINCMD, "%s nastavil pocasie %s id %d.", GetPlayerNameEx(playerid, USE_PUREIDNAME), weathers[I_var][1], I_var);
	}
	else
	{
	    SCFM(playerid, 0xD0D0D0FF, "> Nastavil si poèasie Nezname!");
		FormatWarnEx(playerid,3, "AdmCmd:", COLOR_ADMINCMD, "%s nastavil pocasie Nezname id %d.", GetPlayerNameEx(playerid, USE_PUREIDNAME), I_var);
	}
	return 1;

}

YCMD:listpocasie(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	new
	    finalString[512] = "{e34f4f}Zoznam poèasia;\n\n{ffffff}";

	for(new i; i < sizeof(weathers); i++)
	{

	    new
	        tempString[72];

		format(tempString, 72, "%d: %s\n", weathers[i][0][0], weathers[i][1]);
		strcat(finalString, tempString);

	}

	ShowPlayerDialog(playerid, did_PocasieList, DIALOG_STYLE_MSGBOX, "ZOZNAM POCASIA", finalString, "OK", "");
	return 1;

}

YCMD:spectate(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/spectate [id]");

	if(I_var == playerid)
	    return SendError(playerid, "Nemôe spectatova sám seba!");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	new pstate = GetPlayerState(I_var);
	if(isSpectating[I_var] == true || pstate == 0 || pstate == 7 || pstate == 9)
	    return SendError(playerid, "Tento hráè spectatuje!");

	if(isSpectating[playerid] == false)
	{
	    GetPlayerPos(playerid, spec_Pos[playerid][0], spec_Pos[playerid][1], spec_Pos[playerid][2]);
		spec_World[playerid][0] = GetPlayerVirtualWorld(playerid);
		spec_World[playerid][1] = GetPlayerInterior(playerid);

		//PutPlayerInVehicle(playerid, spec_Vehicle[playerid][0], spec_Vehicle[playerid][1]);
        if(IsPlayerInAnyVehicle(playerid))
		{
			spec_Vehicle[playerid][0] = GetPlayerVehicleID(playerid);
			spec_Vehicle[playerid][1] = GetPlayerVehicleSeat(playerid);
		}
		else
		    spec_Vehicle[playerid][0] = -1;

		ahac_GetPlayerHealth(playerid, spec_Vitals[playerid][0]);
		ex_GetPlayerHunger(playerid, spec_Vitals[playerid][1]);
		ahac_GetPlayerArmour(playerid, spec_Vitals[playerid][2]);

		for(new x; x < MAX_WEAPON_SLOTS; x++)
	    {

            tg_datax[playerid][x][0] = playerWeapons[playerid][x][pweapons_WeaponId];
			tg_datax[playerid][x][2] = playerWeapons[playerid][x][pweapons_AmmoGiven];
			tg_datax[playerid][x][1] = playerWeapons[playerid][x][pweapons_Ammo];
			tg_datax[playerid][x][3] = playerWeapons[playerid][x][pweapons_SerialNumber];
			tg_datax[playerid][x][4] = playerWeapons[playerid][x][pweapons_IsWork];
			tg_datax[playerid][x][5] = playerWeapons[playerid][x][pweapons_IsPermit];
			format(tg_originx[playerid][x], 128, playerWeapons[playerid][x][pweapons_Origin]);

		}
	}

    updateppopis(playerid, "");
	isSpectating[playerid] = true;

	spec_Player[playerid] = I_var;

    PreventSpectate(playerid);
	TogglePlayerSpectating(playerid, true);

	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(I_var));
	SetPlayerInterior(playerid, GetPlayerInterior(I_var));

	PlayerSpectatePlayer(playerid, I_var);

	FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s zaèal spectatova hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));

	for(new x; x < 17; x++) PlayerTextDrawShow(playerid, SpectateTD[playerid][x]);

	return 1;
}

YCMD:spectateoff(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendClientCantUseCommand(playerid);

    if(isSpectating[playerid] == false)
	    return SendError(playerid, "Nie si v spectate móde!");

   	TogglePlayerSpectating(playerid, false);
	return 1;
}

YCMD:death(playerid, params[], help)
{

	if(B_allowDeath[playerid] == false)
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");
	
	SetPlayerHealth(playerid, 0.0, 1);
	TogglePlayerControllable(playerid, 1);

	B_isFinallyDead[playerid] = true;

	new
	    S_string[128];

	format(S_string, 128, "> %s pouil príkaz /death!", GetPlayerNameEx(playerid, USE_MASK));
	SendLocalMessage(playerid,30.0,COLOR_GREY,S_string);

	web_LatestFormat("%s zemrel", GetPlayerNameEx(playerid, NO_MASK));

	FormatWarnEx(playerid,2, "DeathWarn:", COLOR_ADMIN_DEATHWARN, "%s pouil príkaz /death.", GetPlayerNameEx(playerid, USE_PUREIDNAME));
	FormatLog(log_type_player, "%s(%s) pouzil prikaz /death.", ReturnName(playerid), ReturnIP(playerid));
	return 1;

}

YCMD:lock(playerid, params[], help)
{
	if(IsPlayerInAnyVehicle(playerid))
	{

	    switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
		{
		    case
		        481,
		        509,
		        510:
			{
			    return SendError(playerid, "Toto vozidlo nemá zámky!");
			}
		}

		if(GetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_DOORS) == 1)
		{
		    ex_SetVehicleLocked(GetPlayerVehicleID(playerid), false);
			SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_DOORS, 0);

			new str[144]; format(str,144,"~w~Odomkol si vozidlo ~g~%s~w~!", VehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
	        EnterInfo(playerid, str, 5000, 2);

			new
				S_finalString[128 + 25 + 5];

			new S_first[25];
			if(B_playerHasMask[playerid] == false) {
				strcat(S_first, ReturnName(playerid));
				strdel(S_first,strfind(S_first,"_",true),25);
			} else {
				format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

			format(S_finalString, sizeof(S_finalString), "* %s odomyká jeho vozidlo.", S_first);
			BubbleChat(playerid, COLOR_VIOLET, S_finalString);
		}
		else
		{

            ex_SetVehicleLocked(GetPlayerVehicleID(playerid), true);
			SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_DOORS, 1);

			new str[144]; format(str,144,"~w~Zamkol si vozidlo ~g~%s~w~!", VehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
	        EnterInfo(playerid, str, 5000, 2);

			new
				S_finalString[128 + 25 + 5];

			new S_first[25];
			if(B_playerHasMask[playerid] == false) {
				strcat(S_first, ReturnName(playerid));
				strdel(S_first,strfind(S_first,"_",true),25);
			} else {
				format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

			format(S_finalString, sizeof(S_finalString), "* %s zamyká jeho vozidlo.", S_first);
			BubbleChat(playerid, COLOR_VIOLET, S_finalString);
		}

		new
		    Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
		PlayerPlaySound(playerid, 24600, ppos[0], ppos[1], ppos[2]);
	}
	else
	{
		new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

		switch(GetVehicleModel(vid))
		{
		    case
		        481,
		        509,
		        510:
			{
			    return SendError(playerid, "Toto vozidlo nemá zámky!");
			}
		}

		new
			o[4];

		GetVehicleParamsCarWindows(vid, o[0],o[1],o[2],o[3]);

		if(o[0] != 0)
		{

		    if((isDoingDMV[playerid] && DMV_vehicleID[playerid] == vid))
			    return LockCar(playerid, vid);

			if(!strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
   				return LockCar(playerid, vid);

			if(!strcmp(vEnum[vid][v_SecOwner], ReturnName(playerid), false))
			    return LockCar(playerid, vid);

			if(GetVehicleFaction(vid) == 54 && pohrebnasluzba_isDoing[playerid] == true)
			    return LockCar(playerid, vid);

            if(GetPlayerFaction(playerid) == GetVehicleFaction(vid) && GetVehicleFaction(vid) != 0)
			    return LockCar(playerid, vid);

			return SendError(playerid, "Od tohoto vozidla nemá k¾úèe!");
		}

		if(GetVehicleParams(vid, VEHICLE_TYPE_DOORS) == 1)
		{

            ex_SetVehicleLocked(vid, false);

			if(blinklights[vid] == 0) SetTimerEx("timer_BlinkLights", 200, false, "iii",vid,0, GetVehicleParams(vid, VEHICLE_TYPE_LIGHTS));
	        blinklights[vid] = 1;

			SetVehicleParams(vid, VEHICLE_TYPE_DOORS, 0);

			new str[144]; format(str,144,"~w~Odomkol si vozidlo ~g~%s~w~!", VehicleNames[GetVehicleModel(vid)-400]);
	        EnterInfo(playerid, str, 5000, 2);

			new
				S_finalString[128 + 25 + 5];

			new S_first[25];
			if(B_playerHasMask[playerid] == false) {
				strcat(S_first, ReturnName(playerid));
				strdel(S_first,strfind(S_first,"_",true),25);
			} else {
				format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

			format(S_finalString, sizeof(S_finalString), "* %s odomyká jeho vozidlo.", S_first);
			BubbleChat(playerid, COLOR_VIOLET, S_finalString);
		}
		else
		{

            ex_SetVehicleLocked(vid, true);

			if(blinklights[vid] == 0) SetTimerEx("timer_BlinkLights", 200, false, "iii",vid,0, GetVehicleParams(vid, VEHICLE_TYPE_LIGHTS));
	        blinklights[vid] = 1;

			SetVehicleParams(GetPlayerVehicleID(vid), VEHICLE_TYPE_DOORS, 1);

			new str[144]; format(str,144,"~w~Zamkol si vozidlo ~g~%s~w~!", VehicleNames[GetVehicleModel(vid)-400]);
	        EnterInfo(playerid, str, 5000, 2);

			new
				S_finalString[128 + 25 + 5];

			new S_first[25];
			if(B_playerHasMask[playerid] == false) {
				strcat(S_first, ReturnName(playerid));
				strdel(S_first,strfind(S_first,"_",true),25);
			} else {
				format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

			format(S_finalString, sizeof(S_finalString), "* %s zamyká jeho vozidlo.", S_first);
			BubbleChat(playerid, COLOR_VIOLET, S_finalString);
		}

	    PlayerPlaySound(playerid, 24600, ppos[0], ppos[1], ppos[2]);
	}
	return 1;
}

LockCar(playerid, vid)
{
    if(GetVehicleParams(vid, VEHICLE_TYPE_DOORS) == 1)
	{

		ex_SetVehicleLocked(vid, false);

		if(blinklights[vid] == 0) SetTimerEx("timer_BlinkLights", 200, false, "iii",vid,0, GetVehicleParams(vid, VEHICLE_TYPE_LIGHTS));
  		blinklights[vid] = 1;

		SetVehicleParams(vid, VEHICLE_TYPE_DOORS, 0);

		new str[144]; format(str,144,"~w~Odomkol si vozidlo ~g~%s~w~!", VehicleNames[GetVehicleModel(vid)-400]);
  		EnterInfo(playerid, str, 5000, 2);

		new
			S_finalString[128 + 25 + 5];

		new S_first[25];
		if(B_playerHasMask[playerid] == false) {
			strcat(S_first, ReturnName(playerid));
			strdel(S_first,strfind(S_first,"_",true),25);
		} else {
			format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

		format(S_finalString, sizeof(S_finalString), "* %s odomyká jeho vozidlo.", S_first);
		BubbleChat(playerid, COLOR_VIOLET, S_finalString);
	}
	else
	{

		ex_SetVehicleLocked(vid, true);

		if(blinklights[vid] == 0) SetTimerEx("timer_BlinkLights", 200, false, "iii",vid,0, GetVehicleParams(vid, VEHICLE_TYPE_LIGHTS));
  		blinklights[vid] = 1;

		SetVehicleParams(GetPlayerVehicleID(vid), VEHICLE_TYPE_DOORS, 1);

		new str[144]; format(str,144,"~w~Zamkol si vozidlo ~g~%s~w~!", VehicleNames[GetVehicleModel(vid)-400]);
  		EnterInfo(playerid, str, 5000, 2);

		new
			S_finalString[128 + 25 + 5];

		new S_first[25];
		if(B_playerHasMask[playerid] == false) {
			strcat(S_first, ReturnName(playerid));
			strdel(S_first,strfind(S_first,"_",true),25);
		} else {
			format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

		format(S_finalString, sizeof(S_finalString), "* %s zamyká jeho vozidlo.", S_first);
		BubbleChat(playerid, COLOR_VIOLET, S_finalString);



	}

	return 1;
}

YCMD:adm_lock(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
	    return 0;

	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_DOORS) == 1)
		{
		    ex_SetVehicleLocked(GetPlayerVehicleID(playerid), false);
			SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_DOORS, 0);

			new str[144]; format(str,144,"~w~Odomkol si vozidlo ~g~%s~w~!", VehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
	        EnterInfo(playerid, str, 5000, 2);

			new
				S_finalString[128 + 25 + 5];

			new S_first[25];
			if(B_playerHasMask[playerid] == false) {
				strcat(S_first, ReturnName(playerid));
				strdel(S_first,strfind(S_first,"_",true),25);
			} else {
				format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

			format(S_finalString, sizeof(S_finalString), "* %s odomyká jeho vozidlo.", S_first);
			BubbleChat(playerid, COLOR_VIOLET, S_finalString);
		}
		else
		{

            ex_SetVehicleLocked(GetPlayerVehicleID(playerid), true);
			SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_DOORS, 1);

			new str[144]; format(str,144,"~w~Zamkol si vozidlo ~g~%s~w~!", VehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
	        EnterInfo(playerid, str, 5000, 2);

			new
				S_finalString[128 + 25 + 5];

			new S_first[25];
			if(B_playerHasMask[playerid] == false) {
				strcat(S_first, ReturnName(playerid));
				strdel(S_first,strfind(S_first,"_",true),25);
			} else {
				format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

			format(S_finalString, sizeof(S_finalString), "* %s zamyká jeho vozidlo.", S_first);
			BubbleChat(playerid, COLOR_VIOLET, S_finalString);
		}

		new
		    Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
		PlayerPlaySound(playerid, 24600, ppos[0], ppos[1], ppos[2]);
	}
	else
	{
		new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

		if(GetVehicleParams(vid, VEHICLE_TYPE_DOORS) == 1)
		{

            ex_SetVehicleLocked(vid, false);

			if(blinklights[vid] == 0) SetTimerEx("timer_BlinkLights", 200, false, "iii",vid,0, GetVehicleParams(vid, VEHICLE_TYPE_LIGHTS));
	        blinklights[vid] = 1;

			SetVehicleParams(vid, VEHICLE_TYPE_DOORS, 0);

			new str[144]; format(str,144,"~w~Odomkol si vozidlo ~g~%s~w~!", VehicleNames[GetVehicleModel(vid)-400]);
	        EnterInfo(playerid, str, 5000, 2);

			new
				S_finalString[128 + 25 + 5];

			new S_first[25];
			if(B_playerHasMask[playerid] == false) {
				strcat(S_first, ReturnName(playerid));
				strdel(S_first,strfind(S_first,"_",true),25);
			} else {
				format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

			format(S_finalString, sizeof(S_finalString), "* %s odomyká jeho vozidlo.", S_first);
			BubbleChat(playerid, COLOR_VIOLET, S_finalString);
		}
		else
		{

            ex_SetVehicleLocked(vid, true);

			if(blinklights[vid] == 0) SetTimerEx("timer_BlinkLights", 200, false, "iii",vid,0, GetVehicleParams(vid, VEHICLE_TYPE_LIGHTS));
	        blinklights[vid] = 1;

			SetVehicleParams(GetPlayerVehicleID(vid), VEHICLE_TYPE_DOORS, 1);

			new str[144]; format(str,144,"~w~Zamkol si vozidlo ~g~%s~w~!", VehicleNames[GetVehicleModel(vid)-400]);
	        EnterInfo(playerid, str, 5000, 2);

			new
				S_finalString[128 + 25 + 5];

			new S_first[25];
			if(B_playerHasMask[playerid] == false) {
				strcat(S_first, ReturnName(playerid));
				strdel(S_first,strfind(S_first,"_",true),25);
			} else {
				format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

			format(S_finalString, sizeof(S_finalString), "* %s zamyká jeho vozidlo.", S_first);
			BubbleChat(playerid, COLOR_VIOLET, S_finalString);
		}

	    PlayerPlaySound(playerid, 24600, ppos[0], ppos[1], ppos[2]);
	}
	return 1;
}

YCMD:adm_engine(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return 0;

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nie si v iadnom vozidle!");

	if(GetPlayerVehicleSeat(playerid) != 0)
	    return SendError(playerid, "Nie si ofér!");

    if(preventVehAction[playerid] == true)
		return SendError(playerid, "Po nastúpení musí chví¾u poèka!");

    if(GetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_ENGINE) == 1)
    {
        SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_ENGINE, 0);
        SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_LIGHTS, 0);

        new S_str[144];
		format(S_str, 144, "* %s otáèa klúèom v zapalovaní a vypína motor %s. *", GetPlayerNameEx(playerid, USE_MASK), GetVehicleName(GetPlayerVehicleID(playerid)));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);
    }
    else
    {

        if(isStartingEngine[playerid] == true)
            return SendError(playerid, "U tartuje!");

        isStartingEngine[playerid] = true;

        SetTimerEx("timer_StartEngine", 750+random(751), false, "ii", playerid, GetPlayerVehicleID(playerid));

        new S_str[144];
		format(S_str, 144, "* %s vkladá klúè do zapalovania a otáèa ním. *", GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

    }
	return 1;

}

YCMD:engine(playerid, params[], help)
{

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nie si v iadnom vozidle!");

	if(GetPlayerVehicleSeat(playerid) != 0)
	    return SendError(playerid, "Nie si ofér!");

    switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
	{
	    case
	        481,
	        509,
	        510:
		{
		    return SendError(playerid, "Toto vozidlo nemá zámky!");
		}
	}

    if(preventVehAction[playerid] == true)
		return SendError(playerid, "Po nastúpení musí chví¾u poèka!");

	new vid = GetPlayerVehicleID(playerid);

    if((isDoingDMV[playerid] && DMV_vehicleID[playerid] == vid))
	    return StartEngine(playerid);

	if(!strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
	    return StartEngine(playerid);

	if(!strcmp(vEnum[vid][v_SecOwner], ReturnName(playerid), false))
	    return StartEngine(playerid);

	if(GetVehicleFaction(vid) == 54 && pohrebnasluzba_isDoing[playerid] == true)
	    return StartEngine(playerid);

    if(GetPlayerFaction(playerid) == GetVehicleFaction(vid) && GetVehicleFaction(vid) != 0)
	    return StartEngine(playerid);

	SendError(playerid, "Od tohoto vozidla nemá k¾úèe!");
	return 1;

}

YCMD:lights(playerid, params[], help)
{

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nie si v iadnom vozidle!");

	if(GetPlayerVehicleSeat(playerid) != 0)
	    return SendError(playerid, "Nie si ofér!");



    if(GetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_LIGHTS) == 1)
    {

        SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_LIGHTS, 0);

    }
    else
    {

        SetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_TYPE_LIGHTS, 1);

    }

	return 1;

}

YCMD:cas(playerid, params[], help)
{

	new I_var = playerid;

	if(GetPlayerAdminLevel(playerid) > 1)
	    sscanf(params, "d", I_var);

	if(!IsPlayerLogged(I_var))
		return SendError(playerid, "Tento hráè nie je v hre!");

	if(isInJail[I_var] == true)
	{

	    new
	        S_string[128];

		format(S_string, 128, "~w~Si v admin jaile od administratora ~r~%s ~w~este na ~r~%d:%02d~w~!", jail_Admin[I_var], jail_Time[I_var][0], jail_Time[I_var][1]);

	    EnterInfo(playerid, S_string, 7000, 5);
	    return 1;

	}

	SendError(playerid, "Nemá iadny èas!");
	return 1;
}

YCMD:nastavenie(playerid, params[], help)
{
	ShowPlayerOptions(playerid);
	return 1;
}

YCMD:pm(playerid, params[], help)
{

	new
	    I_var,
	    S_var[128];

	if(sscanf(params, "ds[128]", I_var, S_var))
	    return SendClientSyntax(playerid, "/pm [id] [správa]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(opt_PM[I_var] == 1)
		return SendError(playerid, "Tento hráè má vypnuté súkromné správy!");

	if(blockPm[I_var][playerid] == 1)
		return SendError(playerid, "Tento hráè má vypnuté súkromné správy!");

	if(opt_PM[playerid] == 1)
		EnterInfo(playerid, "~b~Mas vypnute sukromne spravy, tento hrac ti nebude moct odpovedat!");

    if(blockPm[playerid][I_var] == 1)
		EnterInfo(playerid, "~b~Tomuto hracovi si zablokoval sukromne spravy, nebude ti moct odpovedat!");

    if(GetPVarInt(I_var, "afk_secs") > 4 || GetPVarInt(I_var, "afk_mins") > 0)
        EnterInfo(playerid, "~r~Tento hrac je AFK a nemusi odpovedat tak skoro.");

	lastPm[playerid] = I_var;
	lastPm[I_var] = playerid;

	new
	    string[144];

	format(string, 144, "(( PM pre %s: %s ))", GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	SendClientMessage(playerid, COLOR_YELLOW, string);

    printf("[CHAT] ((PM %s->%s: %s))", ReturnName(playerid),ReturnName(I_var),S_var);

	format(string, 144, "(( PM od %s: %s ))", GetPlayerNameEx(playerid, USE_PUREIDNAME), S_var);
    SendClientMessage(I_var, COLOR_YELLOW, string);

    if(opt_Sounds[I_var] == 0)
		PlayerPlaySound(I_var,1058,0.0,0.0,0.0);

    MessagesSent[playerid]++;

	return 1;
}

YCMD:reply(playerid, params[], help)
{

	new
		I_var = lastPm[playerid],
	    S_var[128];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/reply(/re) [správa]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(opt_PM[I_var] == 1)
		return SendError(playerid, "Tento hráè má vypnuté súkromné správy!");

    if(blockPm[I_var][playerid] == 1)
		return SendError(playerid, "Tento hráè má vypnuté súkromné správy!");

	if(opt_PM[playerid] == 1)
		EnterInfo(playerid, "~b~Mas vypnute sukromne spravy, tento hrac ti nebude moct odpovedat!");

    if(blockPm[playerid][I_var] == 1)
		EnterInfo(playerid, "~b~Tomuto hracovi si zablokoval sukromne spravy, nebude ti moct odpovedat!");

    if(GetPVarInt(I_var, "afk_secs") > 4 || GetPVarInt(I_var, "afk_mins") > 0)
        EnterInfo(playerid, "~r~Tento hrac je AFK a nemusi odpovedat tak skoro.");


	lastPm[playerid] = I_var;
	lastPm[I_var] = playerid;

	new
	    string[144];

	format(string, 144, "(( PM pre %s: %s ))", GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	
	printf("[CHAT] ((PM %s->%s: %s))", ReturnName(playerid),ReturnName(I_var),S_var);

	format(string, 144, "(( PM od %s: %s ))", GetPlayerNameEx(playerid, USE_PUREIDNAME), S_var);
    SendClientMessage(I_var, COLOR_YELLOW, string);

    if(opt_Sounds[I_var] == 0)
		PlayerPlaySound(I_var,1058,0.0,0.0,0.0);

	MessagesSent[playerid]++;

	return 1;
}

YCMD:blockpm(playerid, params[], help)
{

	if(GetPlayerDonatorLevel(playerid) < 1 && GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Tento príkaz môe poui len iba ak si Donator!");

	new
		I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/blockpm [id]");

	if(!IsPlayerLogged(I_var))
	    return SendClientPlayerOffline(playerid);

	if(blockPm[playerid][I_var] == 0)
	{
	    blockPm[playerid][I_var] = 1;
	    SendSuccess(playerid, "Súkromné správy zablokované!");
	}
	else
	{
	    blockPm[playerid][I_var] = 0;
	    SendSuccess(playerid, "Súkromné správy odblokované!");
	}

	return 1;
}

YCMD:vytvoritznacku(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	if(IsEditingAdresa[playerid] == true)
	    return SendError(playerid, "U vytvára znaeku!");

	new
	    I_var[128];

	if(sscanf(params, "s[128]", I_var))
	    return SendClientSyntax(playerid, "/vytvoritznacku [adresa]");

    new
	    i = -1;

	for(new freeSlot; freeSlot < MAX_STREET_SIGNS; freeSlot ++)
	{
	    if(streetsignEnum[freeSlot][znacka_ObjectID1] < 1)
		{
			i = freeSlot;

			break;
		}
	}

	if(i == -1)
	    return SendError(playerid, "Street Sign System Error; Nepodarilo sa vytvorit znacku; Nie je volny slot.");

	new
	    Float:x, Float:y, Float:z, Float:a;

	GetPlayerPos(playerid, x, y, z);

	z -= 1.0891;

	GetPlayerFacingAngle(playerid, a);
	GetXYInFrontOfPlayer(playerid, x, y, 1.5);

	format(znackaEdit[playerid], 128, I_var);

	streetsignEnum[i][znacka_X] = x;
	streetsignEnum[i][znacka_Y] = y;
	streetsignEnum[i][znacka_Z] = z;
	streetsignEnum[i][znacka_RX] = 0.0;
	streetsignEnum[i][znacka_RY] = 0.0;
	streetsignEnum[i][znacka_RZ] = 0.0;

	streetsignEnum[i][znacka_ObjectID1] = CreateDynamicObject(19981,
		x, y, z, 0.0, 0.0, a, -1, -1, -1, 150, 150, -1, 1);

    Streamer_UpdateEx(playerid, x, y+0.1, z);

	IsEditingAdresa[playerid] = true;
	EditDynamicObject(playerid, streetsignEnum[i][znacka_ObjectID1]);

	editSpeedCamID[playerid] = i;

	return 1;
}

YCMD:zmazatznacku(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerDynamicSign(playerid) == -1)
	    return SendError(playerid, "Nestojí pri iadnej znaeke!");

	new
		id = GetPlayerDynamicSign(playerid),
		query[512];

	mysql_format(MYSQL, query, 512, "DELETE FROM gm_roadsigns WHERE X > '%f' AND X < '%f' AND Y > '%f' AND Y < '%f' AND Z > '%f' AND Z < '%f'",
 		streetsignEnum[id][znacka_X]-0.02, streetsignEnum[id][znacka_X]+0.02,
	    streetsignEnum[id][znacka_Y]-0.02, streetsignEnum[id][znacka_Y]+0.02,
		streetsignEnum[id][znacka_Z]-0.02, streetsignEnum[id][znacka_Z]+0.02);

	mysql_query(MYSQL, query, false);

   	streetsignEnum[id][znacka_X] = 0.0;
    streetsignEnum[id][znacka_Y] = 0.0;
    streetsignEnum[id][znacka_Z] = 0.0;
    streetsignEnum[id][znacka_RX] = 0.0;
    streetsignEnum[id][znacka_RY] = 0.0;
    streetsignEnum[id][znacka_RZ] = 0.0;
	DestroyDynamicObject(streetsignEnum[id][znacka_ObjectID1]);
	DestroyDynamicObject(streetsignEnum[id][znacka_ObjectID2]);

	SendError(playerid, "Znaeka úspene zmazaná!");

	return 1;
}

YCMD:vytvoritradar(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	if(IsEditingSpeedCam[playerid] == true)
	    return SendError(playerid, "U vytvára radar!");

	new
	    I_var1,
	    I_var2;

	if(sscanf(params, "dd", I_var1, I_var2))
	    return SendClientSyntax(playerid, "/vytvoritradar [max rýchlos (def. 60)] [základ pokuty (def. 250)]");

	if(I_var1 < 1)
	    return SendError(playerid, "Zadal si zlú maximálnu rýchlos!");

    if(I_var2 < 0)
	    return SendError(playerid, "Zadal si zlý základ pokuty!");

    new
	    i = -1;

	for(new freeSlot; freeSlot < MAX_SPEED_CAMERAS; freeSlot ++)
	{
	    if(spdcamEnum[freeSlot][scam_SpeedLimit] < 1)
		{
			i = freeSlot;

			break;
		}
	}

	if(i == -1)
	    return SendError(playerid, "Speed Camera System Error; Nepodarilo sa vytvorit kameru! Nie je volny slot.");

	new
	    Float:x, Float:y, Float:z, Float:a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	GetXYInFrontOfPlayer(playerid, x, y, 2);

	spdcamEnum[i][scam_X] = x;
	spdcamEnum[i][scam_Y] = y;
	spdcamEnum[i][scam_Z] = z-1.0;
	spdcamEnum[i][scam_RX] = 0.0;
	spdcamEnum[i][scam_RY] = 0.0;
	spdcamEnum[i][scam_RZ] = 0.0;
	spdcamEnum[i][scam_SpeedLimit] = I_var1;
	spdcamEnum[i][scam_BaseFine] = I_var2;

	spdcamEnum[i][scam_ObjectID] = CreateDynamicObject(18880,
		x, y, z, 0.0, 0.0, a, -1, -1, -1, 300, 300, -1, 10);

    SetDynamicObjectMaterial(spdcamEnum[i][scam_ObjectID], 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	SetDynamicObjectMaterial(spdcamEnum[i][scam_ObjectID], 2, 16640, "a51", "Metalox64", 0x00000000);

    Streamer_UpdateEx(playerid, x, y+0.1, z);

	IsEditingSpeedCam[playerid] = true;
	EditDynamicObject(playerid, spdcamEnum[i][scam_ObjectID]);

	editSpeedCamID[playerid] = i;

	return 1;
}

YCMD:zmazatradar(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerDynamicSpeedCam(playerid) == -1)
	    return SendError(playerid, "Nestojí pri iadnom radare!");

	new
		id = GetPlayerDynamicSpeedCam(playerid),
		query[512];

	mysql_format(MYSQL, query, 512, "DELETE FROM gm_speedcameras WHERE SpeedLimit = '%d' AND BaseFine = '%d' AND X > '%f' AND X < '%f' AND Y > '%f' AND Y < '%f' AND Z > '%f' AND Z < '%f'",
	   	spdcamEnum[id][scam_SpeedLimit], spdcamEnum[id][scam_BaseFine],
 		spdcamEnum[id][scam_X]-0.2, spdcamEnum[id][scam_X]+0.2,
	    spdcamEnum[id][scam_Y]-0.2, spdcamEnum[id][scam_Y]+0.2,
		spdcamEnum[id][scam_Z]-0.2, spdcamEnum[id][scam_Z]+0.2);

	mysql_query(MYSQL, query, false);

   	spdcamEnum[id][scam_X] = 0.0;
    spdcamEnum[id][scam_Y] = 0.0;
    spdcamEnum[id][scam_Z] = 0.0;
    spdcamEnum[id][scam_RX] = 0.0;
    spdcamEnum[id][scam_RY] = 0.0;
    spdcamEnum[id][scam_RZ] = 0.0;
    spdcamEnum[id][scam_SpeedLimit] = 0;
    spdcamEnum[id][scam_BaseFine] = 0;
    DestroyDynamicArea(spdcamEnum[id][scam_AreaID]);
	DestroyDynamicObject(spdcamEnum[id][scam_ObjectID]);

	SendError(playerid, "Radar úspene zmazaný!");

	return 1;
}

YCMD:vytvoritmenu(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
	    I_pickup,
	    I_menuid,
		Float:F_drawDistance,
		S_Label[128];

	if(sscanf(params,"ddfs[128]", I_pickup, I_menuid, F_drawDistance, S_Label))
	    return SendClientSyntax(playerid, "/vytvoritmenu [model pickupu (/pickupymenu)] [typ (/typymenu)] [draw dist. (def. 15.0)] [text (= pre nový riadok)]");

	if(I_menuid < 1 || I_menuid > sizeof(menuNames))
	    return SendError(playerid, "Zadal si zlý typ menu, poui príkaz /typymenu!");

	if(F_drawDistance < 1.0)
	    return SendError(playerid, "Zadal si moc malú vykreslovaciu vzdialenos!");

 	if(F_drawDistance > 299.0)
	    return SendError(playerid, "Zadal si moc ve¾kú vykreslovaciu vzdialenos!");

    format(S_Label, 128, str_replace("=", "\n", S_Label));

	new
	    Float:Pos[3];

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	CreateDynamicMenu(I_pickup, Pos[0], Pos[1], Pos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), S_Label, I_menuid, F_drawDistance);

	new
	    query[512];

	mysql_format(MYSQL, query, 512, "INSERT INTO gm_menu (menu_type, text_label, pickup_model, posX, posY, posZ, virtualWorld, interiorID, draw_distance) VALUES ('%d', '%e', '%d', '%f', '%f', '%f', '%d', '%d', '%f')",
	    I_menuid, S_Label, I_pickup, Pos[0], Pos[1], Pos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), F_drawDistance);

	mysql_tquery(MYSQL, query);

	FormatWarnEx(playerid,6, "AdmCmd:", COLOR_ADMINCMD, "%s vytvoril nové menu.", GetPlayerNameEx(playerid, USE_PUREIDNAME));

	SendSuccess(playerid, "Menu vytvorené!");

	return 1;
}

YCMD:zmazatmenu(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerDynamicMenu(playerid) == -1)
	    return SendError(playerid, "Nestojí v iadnom menu!");

	new
		id = GetPlayerDynamicMenu(playerid),
		query[512];

	mysql_format(MYSQL, query, 512, "DELETE FROM gm_menu WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
	    menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
	    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);

	mysql_query(MYSQL, query, false);

    menuEnum[id][menu_X] = 0.0;
    menuEnum[id][menu_Y] = 0.0;
    menuEnum[id][menu_Z] = 0.0;
    menuEnum[id][menu_VW] = 0;
    menuEnum[id][menu_INT] = 0;
    menuEnum[id][menu_TYPE] = 0;
    menuEnum[id][menu_MODEL] = 0;
    DestroyDynamicArea(menuEnum[id][menu_AREA]);
	if(IsValidDynamic3DTextLabel(menuEnum[id][menu_LABEL]))
		DestroyDynamic3DTextLabel(menuEnum[id][menu_LABEL]);

    if(IsValidDynamicPickup(menuEnum[id][menu_PICKUPID]))
		DestroyDynamicPickup(menuEnum[id][menu_PICKUPID]);

    SendError(playerid, "Menu úspene zmazané!");

	return 1;
}

YCMD:typymenu(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

    new
	    finalString[2048] = "{e34f4f}Zoznam typov menu;\n\n{ffffff}";

	for(new i; i < sizeof(menuNames); i++)
	{

	    if(menuNames[i][0] == '_')
	        continue;

	    new
	        tempString[72];

		format(tempString, 72, "%d: %s\n", i, menuNames[i]);

		strcat(finalString, tempString);

	}

	ShowPlayerDialog(playerid, did_menuList, DIALOG_STYLE_LIST, "TYPY MENU", finalString, "OK", "");

	return 1;
}

YCMD:interiery(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

    new
	    finalString[1024*3] = "{e34f4f}Zoznam interiérov;\n\n{ffffff}";

	for(new i; i < sizeof(interiorIDs); i++)
	{

		if(strlen(interiorIDs[i]) < 2)
		    continue;

	    new
	        tempString[72];

		format(tempString, 72, "%d: %s\n", i, interiorIDs[i]);

		strcat(finalString, tempString);

	}

	ShowPlayerDialog(playerid, did_menuList, DIALOG_STYLE_TABLIST, "INTERIÉRY", finalString, "OK", "");

	return 1;
}


YCMD:interierydomu(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

    new
	    finalString[1024*3] = "{e34f4f}Zoznam interiérov domov;\n\n{ffffff}";

	for(new i; i < sizeof(interiorIDs_h); i++)
	{

	    if(strlen(interiorIDs_h[i]) < 2)
	        continue;

	    new
	        tempString[72];

		format(tempString, 72, "%d: %s\n", i, interiorIDs_h[i]);

		strcat(finalString, tempString);

	}

	ShowPlayerDialog(playerid, did_menuList_house, DIALOG_STYLE_TABLIST, "INTERIÉRY", finalString, "OK", "");

	return 1;
}

YCMD:interierygaraze(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

    new
	    finalString[1024*3] = "{e34f4f}Zoznam interiérov garazi;\n\n{ffffff}";

	for(new i; i < sizeof(interiorIDs_g); i++)
	{

	    new
	        tempString[72];

		format(tempString, 72, "%d: %s\n", i, interiorIDs_g[i]);

		strcat(finalString, tempString);

	}

	ShowPlayerDialog(playerid, did_menuList_garage, DIALOG_STYLE_TABLIST, "INTERIÉRY", finalString, "OK", "");

	return 1;
}

YCMD:pickupymenu(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

    new
	    finalString[1024] = "{e34f4f}Zoznam typov pickupov menu;\n\n{ffffff}";

	for(new i; i < sizeof(menuPickups); i++)
	{

	    new
	        tempString[72];

		format(tempString, 72, "%d: %s\n", menuPickups[i][0][0],  menuPickups[i][1]);

		strcat(finalString, tempString);

	}

	ShowPlayerDialog(playerid, did_menuList, DIALOG_STYLE_MSGBOX, "PICKUPY MENU", finalString, "OK", "");

	return 1;
}

YCMD:acuff(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 3)
		return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params,"d",I_var))
		return SendClientSyntax(playerid, "/acuff [id]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	if(IsPlayerCuffed(I_var))
	{
	    SetPlayerCuffed(I_var, false);

	    SCFM(playerid, 0xD0D0D0FF, "> Odpútal si hráèa %s!", GetPlayerNameEx(I_var, NO_MASK));
	    SCFM(I_var, 0xD0D0D0FF, "> %s a odpútal!", GetPlayerNameEx(playerid, NO_MASK));

	    FormatLog(log_type_admin, "%s(%s) admin-odputal hraca %s(%s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var));
		FormatWarnEx(playerid,3, "AdmCmd:", COLOR_ADMINCMD, "%s admin-odpútal hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	}
	else
	{
 		SetPlayerCuffed(I_var, true);

	    SCFM(playerid, 0xD0D0D0FF, "> Spútal si hráèa %s!", GetPlayerNameEx(I_var, NO_MASK));
	    SCFM(I_var, 0xD0D0D0FF, "> %s a spútal!", GetPlayerNameEx(playerid, NO_MASK));

	    FormatLog(log_type_admin, "%s(%s) admin-sputal hraca %s(%s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var));
		FormatWarnEx(playerid,3, "AdmCmd:", COLOR_ADMINCMD, "%s admin-spútal hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	}

	return 1;
}

YCMD:cuff(playerid, params[], help)
{

    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
		return SendError(playerid, "Tento príkaz nemôe poui, keï si spútaný!");

	new
		I_var,
		S_var[128];

	if(sscanf(params,"ds[128]",I_var,S_var))
		return SendClientSyntax(playerid, "/cuff (/puta) [id] [emócie]");

	MaskToId(I_var);

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(I_var, playerid, 2.5))
		return SendError(playerid, "Tento hráè je moc ïaleko!");

	if((IsPlayerInAnyVehicle(I_var) || IsPlayerInAnyVehicle(playerid)) && (GetPlayerVehicleID(playerid) != GetPlayerVehicleID(I_var)))
	    return SendError(playerid, "Tento hráè sedí v aute!");

	if(IsPlayerCuffed(I_var))
	{

	    SetPlayerInventoryItem(playerid, inv_puta, GetPlayerInventoryItem(playerid, inv_puta)+1);

	    SetPlayerCuffed(I_var, false);

	    new
			S_string[144];

		format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_var);
		SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, S_string);

	    FormatLog(log_type_admin, "%s(%s) odputal hraca %s(%s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var));
		FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s odpútal hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	}
	else
	{

	    if(GetPlayerInventoryItem(playerid, inv_puta) < 1)
		    return SendError(playerid, "Nemá putá!");

        SetPlayerInventoryItem(playerid, inv_puta, GetPlayerInventoryItem(playerid, inv_puta)-1);

 		SetPlayerCuffed(I_var, true);

	    new
			S_string[144];

		format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_var);
		SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, S_string);

	    FormatLog(log_type_admin, "%s(%s) sputal hraca %s(%s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var));
		FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s spútal hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	}

	return 1;
}

YCMD:peprak(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE)
		return SendClientCantUseCommand(playerid);

    if(IsWorking[playerid] == 0)
	    return SendClientCantUseCommand(playerid);

	if(hasTaser[playerid] == false)
	{
	    hasTaser[playerid] = true;

		tg_data[playerid][0] = playerWeapons[playerid][9][pweapons_WeaponId];
		tg_data[playerid][2] = playerWeapons[playerid][9][pweapons_AmmoGiven];
		tg_data[playerid][1] = playerWeapons[playerid][9][pweapons_Ammo];
		tg_data[playerid][3] = playerWeapons[playerid][9][pweapons_SerialNumber];
		tg_data[playerid][4] = playerWeapons[playerid][9][pweapons_IsWork];
		tg_data[playerid][5] = playerWeapons[playerid][9][pweapons_IsPermit];
		format(tg_origin[playerid], 128, playerWeapons[playerid][9][pweapons_Origin]);
		
		Weapons::removeWeapon(playerid, tg_data[playerid][0]);
		FormatWeaponLog(playerid, "[remove] %s bola zmazana po prikaze /peprak.", GetWeaponNameEx(tg_data[playerid][0]));
		Weapons::GivePlayerNewWeapon(playerid, 41, 15000, true, false, "/peprak", false);
		
        FormatWeaponLog(playerid, "[give] Dostal zbran %s s %d nabojmi po prikaze /peprak.", GetWeaponNameEx(41), 15000);
        
		new
		    str[128];

		format(str, 128, "* %s pokladá ruku na opasok a vyahuje slzný sprej.", GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,str);

	}
	else
	{
	    hasTaser[playerid] = false;

		Weapons::removeWeapon(playerid, 41);
		FormatWeaponLog(playerid, "[remove] %s bola zmazana po prikaze /peprak.", GetWeaponNameEx(41));
		Weapons::GivePlayerNewWeapon(playerid, tg_data[playerid][0], tg_data[playerid][1], !!tg_data[playerid][4], !!tg_data[playerid][5], tg_origin[playerid], false, tg_data[playerid][3]);
		FormatWeaponLog(playerid, "[give] Dostal zbran %s s %d nabojmi po prikaze /peprak.", GetWeaponNameEx(tg_data[playerid][0]), tg_data[playerid][1]);

		new
		    str[128];

		format(str, 128, "* %s vkladá slzný sprej spä na opasok.", GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,str);
	}

	return 1;

}

YCMD:alkotester(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW&&GetPlayerAdminLevel(playerid) < 3)
		return SendClientCantUseCommand(playerid);

    if(IsWorking[playerid] == 0&&GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	new
	    target
	;

	if(sscanf(params, "d", target))
	    return SendClientSyntax(playerid, "/alkotester [id]");

    MaskToId(target);

	if(!IsPlayerLogged(target))
	 	return SendClientPlayerOffline(playerid);

	if(IsPlayerNearPlayer(playerid, target, 2.0)) {
    	if(dregerZiadost[target][playerid] == 1)
			return SendError(playerid, "Tomuto hráèovi si u odoslal iados o prehladanie!");

        new
			id;

		if(B_playerHasMask[playerid] == true) id = I_playerMaskID[playerid];
		else id = playerid;

		SCFM(playerid, COLOR_GREY, "> Odoslal si iados o test na poitie alkoholu hráèovi %s, iados vyprí o 15 sekúnd!", GetPlayerNameEx(target, USE_MASK));
		SCFM(target, COLOR_GREY, "> %s ti zaslal iados o test na poitie alkoholu, iados vyprí o 15 sekúnd!", GetPlayerNameEx(playerid, USE_MASK));
		SCFM(target, COLOR_GREY, "> Pre prijatie poui príkaz /accept dreger %d", id);

		dregerZiadost[target][playerid] = 1;
		SetTimerEx("DregerCancel", 15000, false, "ii", target, playerid);

	} else SendError(playerid, "Tento hráè je moc ïaleko!");

	return 1;
}

YCMD:taser(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
		return SendClientCantUseCommand(playerid);

    if(IsWorking[playerid] == 0)
	    return SendClientCantUseCommand(playerid);

	if(hasTaser[playerid] == false)
	{
	    hasTaser[playerid] = true;
	    
	    tg_data[playerid][0] = playerWeapons[playerid][2][pweapons_WeaponId];
		tg_data[playerid][2] = playerWeapons[playerid][2][pweapons_AmmoGiven];
		tg_data[playerid][1] = playerWeapons[playerid][2][pweapons_Ammo];
		tg_data[playerid][3] = playerWeapons[playerid][2][pweapons_SerialNumber];
		tg_data[playerid][4] = playerWeapons[playerid][2][pweapons_IsWork];
		tg_data[playerid][5] = playerWeapons[playerid][2][pweapons_IsPermit];
		format(tg_origin[playerid], 128, playerWeapons[playerid][2][pweapons_Origin]);

		Weapons::removeWeapon(playerid, tg_data[playerid][0]);
		FormatWeaponLog(playerid, "[remove] %s bola zmazana po prikaze /taser.", GetWeaponNameEx(tg_data[playerid][0]));
		Weapons::GivePlayerNewWeapon(playerid, 23, 15000, true, false, "/taser", false);
		FormatWeaponLog(playerid, "[give] Dostal zbran %s s %d nabojmi po prikaze /taser.", GetWeaponNameEx(23), 15000);

		new
		    str[128];

		format(str, 128, "* %s pokladá ruku na púzdro a vyahuje taser.", GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,str);

	}
	else
	{
	    hasTaser[playerid] = false;

        Weapons::removeWeapon(playerid, 23);
		FormatWeaponLog(playerid, "[remove] %s bola zmazana po prikaze /taser.", GetWeaponNameEx(23));
		Weapons::GivePlayerNewWeapon(playerid, tg_data[playerid][0], tg_data[playerid][1], !!tg_data[playerid][4], !!tg_data[playerid][5], tg_origin[playerid], false, tg_data[playerid][3]);
		FormatWeaponLog(playerid, "[give] Dostal zbran %s s %d nabojmi po prikaze /taser.", GetWeaponNameEx(tg_data[playerid][0]), tg_data[playerid][1]);

		new
		    str[128];

		format(str, 128, "* %s vkladá taser do púzdra.", GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,str);
	}

	return 1;

}

YCMD:beanbag(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
		return SendClientCantUseCommand(playerid);

    if(IsWorking[playerid] == 0)
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerWeapon(playerid) != 25)
	    return SendError(playerid, "Nemá v ruke brokovnicu!");

	if(hasBeanBag[playerid] == false)
	{

	    hasBeanBag[playerid] = true;
		SendSuccess(playerid, "Beanbag zapnutý!");

	}
	else
	{

	   	hasBeanBag[playerid] = false;
		SendError(playerid, "Beanbag vypnutý!");

	}

	return 1;

}

YCMD:okna(playerid, params[], help) {
	if(IsPlayerInAnyVehicle(playerid)) {
	    new i = GetPlayerVehicleID(playerid);
		switch(GetVehicleModel(i)) {
			case 509,510,481,448,461,462,463,468,471,521,522,523,581,586,417,425,447,460,469,476,487,488,497,511,512,513,519,520,548,553,563,577,592,593,430,446,452,453,454,472,473,484,493,595: return SendError(playerid,"Toto vozidlo nemá okná!");
		}

		if(GetPlayerVehicleSeat(playerid) != 0 && GetVehicleParams(i, VEHICLE_TYPE_ENGINE) != 1)
		    return SendError(playerid, "Pre manipuláciu s oknami musí by zapnutý motor.");

		new str[48];
		if(sscanf(params,"s[48]",str)) {
			new o[4];
		    GetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), o[0],o[1],o[2],o[3]);

		    new S_first[25];
			if(B_playerHasMask[playerid] == false) {
				strcat(S_first, ReturnName(playerid));
				strdel(S_first,strfind(S_first,"_",true),25);
			} else {
				format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

			if(o[0] != 0) {
		        SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), 0,0,o[2],o[3]);

		        new S_finalString[128];
				format(S_finalString, sizeof(S_finalString), "AME: * %s %s", S_first, "sahuje okná od vozidla.");
				SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

				format(S_finalString, sizeof(S_finalString), "* %s %s", S_first, "sahuje okná od vozidla.");
				BubbleChat(playerid, COLOR_VIOLET, S_finalString);
	        } else {
		        SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), 1,1,o[2],o[3]);

		        new S_finalString[128];
				format(S_finalString, sizeof(S_finalString), "AME: * %s %s", S_first, "vyahuje okná od vozidla.");
				SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

				format(S_finalString, sizeof(S_finalString), "* %s %s", S_first, "vyahuje okná od vozidla.");
				BubbleChat(playerid, COLOR_VIOLET, S_finalString);
		    }

			SendClientSyntax(playerid, "/okna (/rw) [vsetky-lp(lavepredne)-pp(pravepredne)-lz(lavezadne)-pz(pravezadne)]");
		} else {
		    new o[4];
		    GetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), o[0],o[1],o[2],o[3]);

		    new S_first[25];
			if(B_playerHasMask[playerid] == false) {
				strcat(S_first, ReturnName(playerid));
				strdel(S_first,strfind(S_first,"_",true),25);
			} else {
				format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

			new S_finalString_1[128];
		    new S_finalString_2[128];

		    if(!strcmp(str,"vsetky", true)) {
		        if(o[0] != 0) {
		            SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), 0,0,0,0);

		            format(S_finalString_1, sizeof(S_finalString_1), "AME: * %s %s", S_first, "sahuje okná od vozidla.");
					format(S_finalString_2, sizeof(S_finalString_2), "* %s %s", S_first, "sahuje okná od vozidla.");

		        } else {
		            SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), 1,1,1,1);

		            format(S_finalString_1, sizeof(S_finalString_1), "AME: * %s %s", S_first, "vyahuje okná od vozidla.");
					format(S_finalString_2, sizeof(S_finalString_2), "* %s %s", S_first, "vyahuje okná od vozidla.");
		        }
		    } else if(!strcmp(str,"lp", true) || !strcmp(str,"lavepredne", true)) {
		        if(o[0] != 0) {
		            SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), 0,o[1],o[2],o[3]);

		            format(S_finalString_1, sizeof(S_finalString_1), "AME: * %s %s", S_first, "sahuje okno od vozidla.");
					format(S_finalString_2, sizeof(S_finalString_2), "* %s %s", S_first, "sahuje okno od vozidla.");

		        } else {
		            SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), 1,o[1],o[2],o[3]);

		            format(S_finalString_1, sizeof(S_finalString_1), "AME: * %s %s", S_first, "vyahuje okno od vozidla.");
					format(S_finalString_2, sizeof(S_finalString_2), "* %s %s", S_first, "vyahuje okno od vozidla.");
		        }
		    } else if(!strcmp(str,"pp", true) || !strcmp(str,"pravepredne", true)) {
		        if(o[1] != 0) {
		            SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid),o[0],0,o[2],o[3]);

		            format(S_finalString_1, sizeof(S_finalString_1), "AME: * %s %s", S_first, "sahuje okno od vozidla.");
					format(S_finalString_2, sizeof(S_finalString_2), "* %s %s", S_first, "sahuje okno od vozidla.");

		        } else {
		            SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), o[0],1,o[2],o[3]);

		            format(S_finalString_1, sizeof(S_finalString_1), "AME: * %s %s", S_first, "vyahuje okno od vozidla.");
					format(S_finalString_2, sizeof(S_finalString_2), "* %s %s", S_first, "vyahuje okno od vozidla.");
		        }
		    } else if(!strcmp(str,"lz", true) || !strcmp(str,"lavezadne", true)) {
		        if(o[2] != 0) {
		            SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), o[0],o[1],0,o[3]);

		            format(S_finalString_1, sizeof(S_finalString_1), "AME: * %s %s", S_first, "sahuje okno od vozidla.");
					format(S_finalString_2, sizeof(S_finalString_2), "* %s %s", S_first, "sahuje okno od vozidla.");

		        } else {
		            SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), o[0],o[1],1,o[3]);

		            format(S_finalString_1, sizeof(S_finalString_1), "AME: * %s %s", S_first, "vyahuje okno od vozidla.");
					format(S_finalString_2, sizeof(S_finalString_2), "* %s %s", S_first, "vyahuje okno od vozidla.");
		        }
		    } else if(!strcmp(str,"pz", true) || !strcmp(str,"pravezadne", true)) {
		        if(o[3] != 0) {
		            SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), o[0],o[1],o[2],0);

		            format(S_finalString_1, sizeof(S_finalString_1), "AME: * %s %s", S_first, "sahuje okno od vozidla.");
					format(S_finalString_2, sizeof(S_finalString_2), "* %s %s", S_first, "sahuje okno od vozidla.");

		        } else {
		            SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), o[0],o[1],o[2],1);

		            format(S_finalString_1, sizeof(S_finalString_1), "AME: * %s %s", S_first, "vyahuje okno od vozidla.");
					format(S_finalString_2, sizeof(S_finalString_2), "* %s %s", S_first, "vyahuje okno od vozidla.");
		        }
		    } else return SendClientSyntax(playerid, "/okna (/rw) [vsetky-lp(lavepredne)-pp(pravepredne)-lz(lavezadne)-pz(pravezadne)]");

            SendClientMessage(playerid, COLOR_VIOLET, S_finalString_1);
            BubbleChat(playerid, COLOR_VIOLET, S_finalString_2);

		}

		foreach(new id : Player) {
			if(!IsPlayerInAnyVehicle(id)) continue;
			if(GetPlayerVehicleID(id) == GetPlayerVehicleID(playerid)) RefreshBoomboxFor(id);
		}

	} else SendError(playerid,"Nesedí v aute!");
	return 1;
}

YCMD:eject(playerid, params[], help)
{

	if(!IsPlayerInAnyVehicle(playerid) && GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Nesedí v aute!");

    if(GetPlayerVehicleSeat(playerid) != 0 && GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Nie si ofér!");

 	new
 	    I_var,
 	    S_var[128];

	if(GetPlayerAdminLevel(playerid) < 3)
	{

	    if(sscanf(params, "ds[128]", I_var, S_var))
	        return SendClientSyntax(playerid, "/eject [id] [emócie]");

		MaskToId(I_var);

		if(!IsPlayerLogged(I_var))
		    return SendClientPlayerOffline(playerid);

		if(!IsPlayerInAnyVehicle(I_var))
		    return SendError(playerid, "Tohoto hráèa nemôe vyhodi!");

		if(GetPlayerVehicleID(I_var) != GetPlayerVehicleID(playerid) || I_var == playerid)
		    return SendError(playerid, "Tohoto hráèa nemôe vyhodi!");

        new str[256];
		format(str,256,"* %s %s",GetPlayerNameEx(playerid, USE_MASK), S_var);
	   	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,str);

	   	FormatWarnEx(playerid,2, "PlayerCmd:", COLOR_ADMINCMD, "%s vyhodil hráèa %s z auta: %s", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);

		RemovePlayerFromVehicle(I_var);

	}
	else
	{
	    if(sscanf(params, "d", I_var))
	        return SendClientSyntax(playerid, "/eject [id]");

        if(!IsPlayerLogged(I_var))
		    return SendClientPlayerOffline(playerid);

        if(!IsPlayerInAnyVehicle(I_var))
	    	return SendError(playerid, "Tento hráè nesedí v aute!");

        FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s vyhodil hráèa %s z auta.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));

        RemovePlayerFromVehicle(I_var);

        SCFM(playerid, 0xD0D0D0FF, "> Vyhodil si hráèa %s auta.", GetPlayerNameEx(I_var, USE_MASK));
        SCFM(I_var, 0xD0D0D0FF, "> %s a vyhodil z auta.", GetPlayerNameEx(playerid, USE_MASK));

	}



	return 1;
}

YCMD:restart(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
		I_var,
		KickPlayers;

	if(sscanf(params, "dd", I_var, KickPlayers))
	    return SendClientSyntax(playerid, "/restart [retartuje sa za ... sekúnd] [kicknú hráèov (0/1)]");

	if(I_var < 5)
	    return SendError(playerid, "Zadal si malý poèet sekúnd!");

	if(KickPlayers != 0 && KickPlayers != 1)
	    return SendError(playerid, "Musí zada správny poèet vyhodenia hráèov (0 - nevyhodi, 1 - vyhodi)!");

	new
	    S_string[128];

	format(S_string, 128, "> %s spustil retart serveru, prebehne o %d sekúnd!", ReturnMaster(playerid), I_var);
	SendClientMessageToAll(COLOR_ADMINCMD, S_string);

	if(KickPlayers == 1) SetTimer("timer_rst_KickPlayers", (I_var*1000)-20000, false);
	SetTimer("timer_rst_Restart", (I_var*1000), false);
	return 1;
}

YCMD:reloadmaps(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);
	    
    SendRconCommand("reloadfs maps");
	SendRconCommand("reloadfs maps_interior");
	SendRconCommand("reloadfs vegetation");

	new
	    S_string[128];

	format(S_string, 128, "> %s retartoval mapy serveru!", ReturnMaster(playerid));
	SendClientMessageToAll(COLOR_ADMINCMD, S_string);
	
	return 1;
}

YCMD:blindfold(playerid, params[], help)
{
	if(pVrece[playerid] == true)
	{

		return SendError(playerid, "Tento príkaz nemôe poui, keï má na hlave vrece!");

	}
	
	if(pBlindfold[playerid])
	{
	    pBlindfold[playerid] = false;
	    PlayerTextDrawHide(playerid, vreceTD[playerid]);
	    SendSuccess(playerid, "Blindfold bol vypnuty!");
	}
	else
	{
	    pBlindfold[playerid] = true;
	    PlayerTextDrawShow(playerid, vreceTD[playerid]);
	    SendSuccess(playerid, "Blindfold bol zapnuty!");
	}

	return 1;
}

YCMD:vrece(playerid, params[], help)
{

    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
		return SendError(playerid, "Tento príkaz nemôe poui, keï si spútaný!");

	new
	    I_var,
	    S_var[128];

	if(sscanf(params, "ds[128]", I_var, S_var))
	    return SendClientSyntax(playerid, "/vrece [id] [emócie]");

	MaskToId(I_var);

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(I_var, playerid, 2.5))
		return SendError(playerid, "Tento hráè je moc ïaleko!");

	if((IsPlayerInAnyVehicle(I_var) || IsPlayerInAnyVehicle(playerid)) && (GetPlayerVehicleID(playerid) != GetPlayerVehicleID(I_var)))
	    return SendError(playerid, "Tento hráè sedí v aute!");

	if(pVrece[I_var] == false)
	{

		if(GetPlayerInventoryItem(playerid, inv_vrece) < 1)
		    return SendError(playerid, "Nemá vrece!");

	    SetPlayerAttachedObject(I_var, 8, 2060, 2,0,0.00400000,0.02199999,0,0,0,0.37699991,0.51799982,0.94299995);
	    pVrece[I_var] = true;

	    SetPlayerInventoryItem(playerid, inv_vrece, GetPlayerInventoryItem(playerid, inv_vrece)-1);

	    PlayerTextDrawShow(I_var, vreceTD[I_var]);

	    new
			S_string[144];

		format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_var);
		SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, S_string);

	}
	else
	{

	    pVrece[I_var] = false;
		PlayerTextDrawHide(I_var, vreceTD[I_var]);
		RemovePlayerAttachedObject(I_var, 8);

		SetPlayerInventoryItem(playerid, inv_vrece, GetPlayerInventoryItem(playerid, inv_vrece)+1);

		new
			S_string[144];

		format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_var);
		SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, S_string);

	}

	return 1;
}

YCMD:lano(playerid, params[], help)
{
    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
		return SendError(playerid, "Tento príkaz nemôe poui, keï si spútaný!");

	new
	    I_var,
	    S_var[128];

	if(sscanf(params, "ds[128]", I_var, S_var))
	    return SendClientSyntax(playerid, "/lano [id] [emócie]");

	MaskToId(I_var);

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(I_var, playerid, 2.5))
		return SendError(playerid, "Tento hráè je moc ïaleko!");

	if((IsPlayerInAnyVehicle(I_var) || IsPlayerInAnyVehicle(playerid)) && (GetPlayerVehicleID(playerid) != GetPlayerVehicleID(I_var)))
	    return SendError(playerid, "Tento hráè sedí v aute!");

	if(pLano[I_var] == false)
	{

        if(GetPlayerInventoryItem(playerid, inv_lano) < 1)
		    return SendError(playerid, "Nemá lano!");

	    SetPlayerSpecialAction(I_var, SPECIAL_ACTION_CUFFED);
	    SetPlayerAttachedObject(I_var, 9, 19088, 5, 0.061000, 0.119000, 0.074000, -75.700027, 4.099957, -166.800003, 0.050000, 0.227000, 0.053000);
	    pLano[I_var] = true;

	    SetPlayerInventoryItem(playerid, inv_lano, GetPlayerInventoryItem(playerid, inv_lano)-1);

	    new
			S_string[144];

		format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_var);
		SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, S_string);

	}
	else
	{

	    SetPlayerSpecialAction(I_var, 0);
	    pLano[I_var] = false;
		RemovePlayerAttachedObject(I_var, 9);

		SetPlayerInventoryItem(playerid, inv_lano, GetPlayerInventoryItem(playerid, inv_lano)+1);

		new
			S_string[144];

		format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_var);
		SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, S_string);

	}

	return 1;
}

YCMD:accept(playerid, params[], help)
{

	new
		S_var[12],
		I_var = -1;

	if(sscanf(params,"s[12] D(-1)", S_var, I_var))
	    return SendClientSyntax(playerid, "/accept [item-drug-death-frisk-weapon-kevlar-frakcia-nelegalka-dreger-alkohol-bazarauto-playercar] <id>");

	MaskToId(I_var);

	if(!strcmp(S_var, "item", false))
	{

	    if(!IsPlayerLogged(I_var))
	        return SendError(playerid, "Tento hráè nie je v hre! (Nezabudni zada ID!)");

		if(!IsPlayerNearPlayer(playerid, I_var, 2.5))
		    return SendError(playerid, "Tento hráè je moc ïaleko!");

		if(invGive[I_var][1] != playerid)
		    return SendError(playerid, "Tento hráè ti niè nepodáva!");

        new
			string[128],
			item[32],
			itemchar[8];

        strcat(item, GetItemName(invGive[I_var][2]));
		item[0] = tolower(item[0]);

		switch(_:invGive[I_var][2])
		{
		    case 0:
		        format(itemchar, 8, "$");

			case 8:
			    format(itemchar, 8, " kg");

            case 41:
				format(itemchar, 8, " ml");

			default:
   				format(itemchar, 8, " ks");
		}

		if(invGive[I_var][2] == 0)
		{
		    ex_GivePlayerMoney(I_var, -float(invGive[I_var][0]) / 100.00);
		    money_givenby[I_var]+=floatround(float(invGive[I_var][0]) / 100.00,floatround_round);
		    ex_GivePlayerMoney(playerid, float(invGive[I_var][0]) / 100.0);
		    money_accepted[playerid]+=floatround(float(invGive[I_var][0]) / 100.00,floatround_round);
		    format(string, 128, "> Ponuka na podanie %s (%.2f%s) bola prijatá!", item, float(invGive[I_var][0])/100.0, itemchar);
		    
		    invGive[I_var][0] = floatround(invGive[I_var][0]/100,floatround_round);
		}
		else
		{
		    SetPlayerInventoryItem(I_var, invGive[I_var][2], GetPlayerInventoryItem(I_var, invGive[I_var][2])-invGive[I_var][0]);
		    SetPlayerInventoryItem(playerid, invGive[I_var][2], GetPlayerInventoryItem(playerid, invGive[I_var][2])+invGive[I_var][0]);
		    format(string, 128, "> Ponuka na podanie %s (%d%s) bola prijatá!", item, invGive[I_var][0], itemchar);
		}

		new
			S_finalString[128 + 25 + 5],
			S_first[25];

		if(B_playerHasMask[I_var] == false) {
		    strcat(S_first, ReturnName(I_var));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[I_var]);
		}
		format(S_finalString, sizeof(S_finalString), "* %s podáva %s %s.", S_first, item, GetPlayerNameEx(playerid, USE_MASK));
	 	BubbleChat(I_var, COLOR_VIOLET, S_finalString);

	 	format(S_first, 25, "");
	 	if(B_playerHasMask[playerid] == false) {
		    strcat(S_first, ReturnName(playerid));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

		format(S_finalString, sizeof(S_finalString), "* %s berie %s od %s.", S_first, item, GetPlayerNameEx(I_var, USE_MASK));
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

	 	FormatLog(log_type_player, "%s(%s - %s) vzal %s(%d) od %s(%s - %s)!", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), item, invGive[I_var][0], ReturnName(I_var), ReturnMaster(I_var), ReturnIP(I_var));
  		SCFM(playerid, COLOR_GREY, string);
  		SCFM(I_var, COLOR_GREY, string);

  		invGive[I_var][0] = -1;
  		invGive[I_var][1] = -1;
  		invGive[I_var][2] = -1;

		cantManipulate[I_var] = false;

	}
	else if(!strcmp(S_var, "death", false))
	{
	    if(B_allowDeath[playerid] == false)
		    return SendError(playerid, "Tento príkaz teraz nemôe poui!");

		SetPlayerHealth(playerid, 0.0, 1);
		TogglePlayerControllable(playerid, 1);

		B_isFinallyDead[playerid] = true;

		new
		    S_string[128];

		format(S_string, 128, "> %s pouil príkaz /death!", GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,30.0,COLOR_GREY,S_string);

		web_LatestFormat("%s zemrel", GetPlayerNameEx(playerid, NO_MASK));

		FormatWarnEx(playerid,2, "DeathWarn:", COLOR_ADMIN_DEATHWARN, "%s pouil príkaz /death.", GetPlayerNameEx(playerid, USE_PUREIDNAME));
		FormatLog(log_type_player, "%s(%s) pouzil prikaz /death.", ReturnName(playerid), ReturnIP(playerid));
		return 1;
	}
	else if(!strcmp(S_var, "frisk", false))
	{
	    if(!IsPlayerLogged(I_var))
	        return SendError(playerid, "Tento hráè nie je v hre! (Nezabudni zada ID!)");

		if(!IsPlayerNearPlayer(playerid, I_var, 2.5))
		    return SendError(playerid, "Tento hráè je moc ïaleko!");

		if(friskZiadost[playerid][I_var] != 1)
		    return SendError(playerid, "Tento hráè ti neodoslal iados o prehladanie!");

        friskZiadost[playerid][I_var] = 0;

        SCFM(playerid, COLOR_GREY, "> Povolil si iados o prehladanie hráèovi %s!", GetPlayerNameEx(I_var, USE_MASK));
		SCFM(I_var, COLOR_GREY, "> %s ti povolil iados o prehladanie!", GetPlayerNameEx(playerid, USE_MASK));

		ShowPlayerInventory(playerid, I_var);

		////////////////////////////////////////////////////////////////////////

		/* EMPTY WEAPONS */

		new
			lProceed = 0
		;

		for(new x; x < 12; x++)
		{
		    if(playerEmptyGuns[playerid][x] < 1)
		        continue;

			if(lProceed == 0)
			{
				SCFM(I_var, COLOR_DARKRED, "> Prázdne zbrane hráèa %s:", GetPlayerNameEx(playerid, USE_MASK));
			}

			lProceed = 1;

			SCFM(I_var, COLOR_GREY, "> %s", GetWeaponNameEx(playerEmptyGuns[playerid][x]));
		}
	}
	else if(!strcmp(S_var, "dreger", false))
	{
	    if(!IsPlayerLogged(I_var))
	        return SendError(playerid, "Tento hráè nie je v hre! (Nezabudni zada ID!)");

		if(!IsPlayerNearPlayer(playerid, I_var, 2.5))
		    return SendError(playerid, "Tento hráè je moc ïaleko!");

		if(dregerZiadost[playerid][I_var] != 1)
		    return SendError(playerid, "Tento hráè ti neodoslal iados o test na poitie alkoholu!");

        dregerZiadost[playerid][I_var] = 0;

        new
            finalStr[ 144 ]
		;

		format(finalStr, sizeof finalStr, "* %s drí dreger v ruke a strká ho %s do úst, on fúka.", GetPlayerNameEx(I_var, USE_MASK), GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,finalStr);

		format(finalStr, sizeof finalStr, "* Dreger zapípal a ukazuje %.2f promile (( %s ))", float(Alcohol::GetFromPlayer(playerid))/100.0, GetPlayerNameEx(I_var, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,finalStr);

		if(Alcohol::inblood[playerid] >= 200)
		    Achievement::Reward(playerid, ACHIEVEMENT_UNDER_INFLUENCE);
	}
	else if(!strcmp(S_var, "weapon", false))
	{
	    if(!IsPlayerLogged(I_var))
	        return SendError(playerid, "Tento hráè nie je v hre! (Nezabudni zada ID!)");

		if(!IsPlayerNearPlayer(playerid, I_var, 3))
		    return SendError(playerid, "Tento hráè je moc ïaleko!");

		if(give_Weapon[I_var][2] != playerid || give_Weapon[I_var][0] == 0)
      		return SendError(playerid, "Tento hráè ti neponúka zbraò!");

		new
		    weap, ammo;

		for( new i; i < 13; i++ )
		{
		    GetPlayerWeaponData(I_var, i, weap, ammo);

		    if(weap != give_Weapon[I_var][0])
		        continue;

			if(ammo < 1)
			    return SendError(playerid, "Tento hráè ti neponúka zbraò!");

			break;
		}

		if(weap == 0)
		    return SendError(playerid, "Tento hráè ti niè nepodáva!");
		    
        new
			slot = ac_GetWeaponSlot(weap)
		;
        if(playerWeapons[I_var][slot][pweapons_SerialNumber] < 1) return SendError(playerid, "Túto zbraò nie je moné prevzia, systém ju nepozná!");
		    
        Weapons::transferWeapon(I_var, playerid, weap);
        FormatWeaponLog(I_var, "[remove] Podal zbran %s s %d nabojmi hracovi %s.", GetWeaponNameEx(weap),ammo,ReturnName(playerid));
        FormatWeaponLog(playerid, "[give] Zobral podavanu zbran %s s %d nabojmi od hraca %s.", GetWeaponNameEx(weap),ammo,ReturnName(I_var));

        give_Weapon[I_var][0] = 0;
		give_Weapon[I_var][1] = 0;
		give_Weapon[I_var][2] = -1;

		new
			S_finalString[128 + 25 + 5],
			S_first[25];

		if(B_playerHasMask[I_var] == false) {
		    strcat(S_first, ReturnName(I_var));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[I_var]);
		}

		format(S_finalString, sizeof(S_finalString), "* %s podáva %s %s.", S_first, GetWeaponNameEx(weap), GetPlayerNameEx(playerid, USE_MASK));
	 	BubbleChat(I_var, COLOR_VIOLET, S_finalString);

	 	format(S_first, 25, "");
	 	if(B_playerHasMask[playerid] == false) {
		    strcat(S_first, ReturnName(playerid));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

		format(S_finalString, sizeof(S_finalString), "* %s berie %s od %s.", S_first, GetWeaponNameEx(weap), GetPlayerNameEx(I_var, USE_MASK));
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

	 	FormatLog(log_type_player, "%s(%s - %s) vzal zbran %s(%d) od %s(%s - %s)!", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), GetWeaponNameEx(weap), ammo, ReturnName(I_var), ReturnMaster(I_var), ReturnIP(I_var));

        new
		    string[128];

		format(string, 128, "> Ponuka na podanie %s (%d ammo) bola prijatá!", GetWeaponNameEx(weap), ammo);
  		SCFM(playerid, COLOR_GREY, string);
  		SCFM(I_var, COLOR_GREY, string);
	}
	else if(!strcmp(S_var, "drug", false))
	{

	    if(!IsPlayerLogged(I_var))
	        return SendError(playerid, "Tento hráè nie je v hre! (Nezabudni zada ID!)");

		if(!IsPlayerNearPlayer(playerid, I_var, 2.5))
		    return SendError(playerid, "Tento hráè je moc ïaleko!");

		if(invGive[I_var][1] != playerid)
		    return SendError(playerid, "Tento hráè ti niè nepodáva!");

		drug_givePlayerDrug(I_var, invGive[I_var][2], -invGive[I_var][0]);
		drug_givePlayerDrug(playerid, invGive[I_var][2], invGive[I_var][0]);

		new
			string[128]
		;

		new
			S_finalString[128 + 25 + 5],
			S_first[25];

		if(B_playerHasMask[I_var] == false) {
		    strcat(S_first, ReturnName(I_var));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[I_var]);
		}
		format(S_finalString, sizeof(S_finalString), "* %s podáva %s %s.", S_first, GetPlayerNameEx(playerid, USE_MASK), drug_getName(invGive[I_var][2]));
	 	BubbleChat(I_var, COLOR_VIOLET, S_finalString);

	 	format(S_first, 25, "");
	 	if(B_playerHasMask[playerid] == false) {
		    strcat(S_first, ReturnName(playerid));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

		format(S_finalString, sizeof(S_finalString), "* %s berie %s od %s.", S_first, drug_getName(invGive[I_var][2]), GetPlayerNameEx(I_var, USE_MASK));
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

	 	FormatLog(log_type_player, "%s(%s - %s) vzal %s(%d davok) od %s(%s - %s)!", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), drug_getName(invGive[I_var][2]), invGive[I_var][0], ReturnName(I_var), ReturnMaster(I_var), ReturnIP(I_var));

		format(string, 128, "> Ponuka na podanie drogy %s (%d %s) bola prijatá!", drug_getName(invGive[I_var][2]), invGive[I_var][0],"_");
  		SCFM(playerid, COLOR_GREY, string);
  		SCFM(I_var, COLOR_GREY, string);

  		invGive[I_var][0] = -1;
  		invGive[I_var][1] = -1;
  		invGive[I_var][2] = -1;

		cantManipulate[I_var] = false;

	}
	else if(!strcmp(S_var, "kevlar", false))
	{
	    if(!IsPlayerLogged(I_var))
	        return SendError(playerid, "Tento hráè nie je v hre! (Nezabudni zada ID!)");

		if(!IsPlayerNearPlayer(playerid, I_var, 3))
		    return SendError(playerid, "Tento hráè je moc ïaleko!");

		if(give_Kevlar[I_var][1] != playerid || give_Kevlar[I_var][0] == 0)
      		return SendError(playerid, "Tento hráè ti neponúka vestu!");


		new
		    ammo = give_Kevlar[I_var][0],
			Float:pArmour;

		ahac_GetPlayerArmour(I_var, pArmour);

		if(floatround(pArmour, floatround_ceil) < ammo)
		    ammo = floatround(pArmour, floatround_ceil);

		SetPlayerArmour(I_var, 0.0);
		SetPlayerArmour(playerid, float(ammo));

        give_Kevlar[I_var][0] = 0;
		give_Kevlar[I_var][1] = -1;

		new
			S_finalString[128 + 25 + 5],
			S_first[25];

		if(B_playerHasMask[I_var] == false) {
		    strcat(S_first, ReturnName(I_var));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[I_var]);
		}

		format(S_finalString, sizeof(S_finalString), "* %s podáva vestu %s.", S_first, GetPlayerNameEx(playerid, USE_MASK));
	 	BubbleChat(I_var, COLOR_VIOLET, S_finalString);

	 	format(S_first, 25, "");
	 	if(B_playerHasMask[playerid] == false) {
		    strcat(S_first, ReturnName(playerid));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

		format(S_finalString, sizeof(S_finalString), "* %s berie vestu od %s.", S_first, GetPlayerNameEx(I_var, USE_MASK));
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

	 	FormatLog(log_type_player, "%s(%s - %s) vzal vestu (%d) od %s(%s - %s)!", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), ammo, ReturnName(I_var), ReturnMaster(I_var), ReturnIP(I_var));

        new
		    string[128];

		format(string, 128, "> Ponuka na podanie vesty bola prijatá!");
  		SCFM(playerid, COLOR_GREY, string);
  		SCFM(I_var, COLOR_GREY, string);
	}
	else if(!strcmp(S_var, "frakcia", false))
	{
	    if(!IsPlayerLogged(I_var))
	        return SendError(playerid, "Tento hráè nie je v hre! (Nezabudni zada ID!)");

		if(!IsPlayerNearPlayer(playerid, I_var, 3))
		    return SendError(playerid, "Tento hráè je moc ïaleko!");

		if(give_LegalFaction[I_var] != playerid)
      		return SendError(playerid, "Tento hráè a nechce nabra do frakcie!");

		SetPlayerFaction(playerid, GetPlayerFaction(I_var));
		SetPlayerFactionRank(playerid, 1);
		SetPlayerFactionTitle(playerid, "Novacik");
		SetPlayerFactionBadge(playerid, 0);

	 	FormatLog(log_type_player, "%s(%s - %s) nabral hraca %s(%s - %s) do frakcie %s!", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnMaster(I_var), ReturnIP(I_var), factEnum[GetPlayerFaction(playerid)][fact_Name]);

        new
		    string[128];

		format(string, 128, "> Ponuka na nabratie do frakcie bola prijatá!");
  		SCFM(playerid, COLOR_GREY, string);
  		SCFM(I_var, COLOR_GREY, string);

  		give_LegalFaction[I_var] = -1;
  		give_LegalFaction[playerid] = -1;
	}
	else if(!strcmp(S_var, "nelegalka", false))
	{
	    if(!IsPlayerLogged(I_var))
	        return SendError(playerid, "Tento hráè nie je v hre! (Nezabudni zada ID!)");

		if(!IsPlayerNearPlayer(playerid, I_var, 3))
		    return SendError(playerid, "Tento hráè je moc ïaleko!");

		if(give_NeLegalFaction[I_var] != playerid)
      		return SendError(playerid, "Tento hráè a nechce nabra do frakcie!");

		SetPlayerIllegalFaction(playerid, GetPlayerIllegalFaction(I_var));
		SetPlayerIllegalFactionRank(playerid, 1);

	 	FormatLog(log_type_player, "%s(%s - %s) nabral hraca %s(%s - %s) do nelegalnej frakcie %s!", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnMaster(I_var), ReturnIP(I_var), i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Name]);

		new
		    string[128];

		format(string, 128, "> Ponuka na nabratie do nelegálnej frakcie bola prijatá!");
  		SCFM(playerid, COLOR_GREY, string);
  		SCFM(I_var, COLOR_GREY, string);

  		give_NeLegalFaction[I_var] = -1;
  		give_NeLegalFaction[playerid] = -1;
	}
	else if(!strcmp(S_var, "alkohol", false))
	{
	    if(!IsPlayerLogged(I_var))
	        return SendError(playerid, "Tento hráè nie je v hre! (Nezabudni zada ID!)");

		if(!IsPlayerNearPlayer(playerid, I_var, 3))
		    return SendError(playerid, "Tento hráè je moc ïaleko!");

		if(flasaZiadost[playerid][I_var] == 0)
		    return SendError(playerid, "Tento hráè ti nepodáva f¾au alkoholu!");

		if(Alcohol::Holding(playerid))
      		return SendError(playerid, "U drí f¾au alkoholu!");

		new volnyslot = -1;

		for(new x; x < MAX_ALCOHOL_INVENTORY; x ++)
		{
		    if(Alcohol::inventory[playerid][x][alcinv_Objem] > 0)
		        continue;

			volnyslot = x;
			break;
		}

		if(volnyslot == -1)
		    return SendError(playerid, "Nemá volný slot na alkohol!");

		new
		    string[128];

		format(string, 128, "> Ponuka na podanie alkoholu bola prijatá!");
  		SCFM(playerid, COLOR_GREY, string);
  		SCFM(I_var, COLOR_GREY, string);

  		SCFM(playerid, COLOR_LIGHTBLUE, "> Zaèal si konzumova alkohol! Napije sa pravým tlaèidlom myi.");
		SCFM(playerid, COLOR_LIGHTBLUE, "> F¾au schová tlaèidlom /hbottle, podá príkazom /pbottle a nevratne zahodí /dbottle.");

  		Alcohol::inventory[playerid][volnyslot][alcinv_Objem]       = Alcohol::inventory[I_var][Alcohol::invidholding[I_var]][alcinv_Objem];
  		Alcohol::inventory[playerid][volnyslot][alcinv_Alcohol]     = Alcohol::inventory[I_var][Alcohol::invidholding[I_var]][alcinv_Alcohol];
  		Alcohol::inventory[playerid][volnyslot][alcinv_DecreaseBy]  = Alcohol::inventory[I_var][Alcohol::invidholding[I_var]][alcinv_DecreaseBy];
  		Alcohol::inventory[playerid][volnyslot][alcinv_Object]      = Alcohol::inventory[I_var][Alcohol::invidholding[I_var]][alcinv_Object];

  		format(Alcohol::inventory[playerid][volnyslot][alcinv_Name], 64, "%s", Alcohol::inventory[I_var][Alcohol::invidholding[I_var]][alcinv_Name]);

  		/////////////////////////////////////////////

  		Alcohol::inventory[I_var][Alcohol::invidholding[I_var]][alcinv_Objem]		= 0;
  		Alcohol::inventory[I_var][Alcohol::invidholding[I_var]][alcinv_Alcohol]		= 0;
  		Alcohol::inventory[I_var][Alcohol::invidholding[I_var]][alcinv_DecreaseBy]	= 0;
  		Alcohol::inventory[I_var][Alcohol::invidholding[I_var]][alcinv_Object]		= 0;

  		if(flasaZiadost[playerid][I_var] == 2)
  			Alcohol::SetHolding(I_var, false);

  		if(flasaZiadost[playerid][I_var] == 2)
  			Alcohol::SetHolding(playerid, true, Alcohol::inventory[playerid][volnyslot][alcinv_Alcohol], Alcohol::inventory[playerid][volnyslot][alcinv_DecreaseBy], Alcohol::inventory[playerid][volnyslot][alcinv_Objem], Alcohol::inventory[playerid][volnyslot][alcinv_Object], volnyslot);

  		flasaZiadost[playerid][I_var] = 0;
		flasaZiadost[I_var][playerid] = 0;
	}
	else if(!strcmp(S_var, "bazarauto", false))
	{
	    if(!IsPlayerLogged(I_var))
	        return SendError(playerid, "Tento hráè nie je v hre! (Nezabudni zada ID!)");

		if(!IsPlayerNearPlayer(playerid, I_var, 3))
		    return SendError(playerid, "Tento hráè je moc ïaleko!");

		if(bazarsZiadost[playerid][I_var] == 0)
		    return SendError(playerid, "Tento hráè ti nepredáva auto!");

		new vid = bazarvehid[I_var];

		FormatBazarLog(playerid, "[sell] Predaj vozidla %s (%s) hracovi %s.", GetVehicleName(vid), vEnum[vid][v_SPZ], ReturnName(playerid));

		vEnum[vid][v_bazar_Price]   			= 0;
		vEnum[vid][v_bazar_Buyout]   			= 0;
		vEnum[vid][v_bazar_DateAdded]   		= 0;
		vEnum[vid][v_bazar_BoughtFor]   		= 0;
		format(vEnum[vid][v_bazar_Desc], 256, "");
		format(vEnum[vid][v_bazar_AddedBy], MAX_PLAYER_NAME+1, "");

		format(vEnum[vid][v_Owner], 30, ReturnName(playerid));
		format(vEnum[vid][v_SecOwner], 30, "");
		vEnum[vid][v_Faction] = 0;

		new
		    S_query[2048],
		    Float:vHP
		;

		vhac_GetVehicleHealth(vid, vHP);

		mysql_format(MYSQL, S_query, sizeof S_query, "DELETE FROM faction_vehicles WHERE SPZ = '%e'", vEnum[vid][v_SPZ]);
		mysql_tquery(MYSQL, S_query);

		mysql_format(
			MYSQL, S_query, sizeof S_query,
			"INSERT INTO char_vehicles (SPZ, Model, Park_X, Park_Y, Park_Z, Park_A, Park_VW, Park_INT, Color_1, Color_2, Paintjob, Fuel, Battery, Health, Owner, SecondOwner, isUnParked) VALUES ('%e', '%d', '-226.774', '1193.3', '19.408', '270.0', '0', '0', '%d', '%d', '3', '100', '1000', '%.2f', '%e', '', '1')",
			vEnum[vid][v_SPZ],
			GetVehicleModel(vid),
			vEnum[vid][v_Color_1],
			vEnum[vid][v_Color_2],
			vHP,
			ReturnName(playerid)
		);
		mysql_tquery(MYSQL, S_query);

		UpdateFactionVehicleUnit(vid, "", false, false, .windshield=true);

  		bazarsZiadost[playerid][I_var] = 0;
		bazarsZiadost[I_var][playerid] = 0;
		
		Achievement::Reward(playerid, ACHIEVEMENT_FIRST_VEHICLE);
		SCFM(playerid, COLOR_GREY, "> Kúpil si vozidlo %s (%s) z autobazaru! Predal ti ho %s!", GetVehicleName(vid), vEnum[vid][v_SPZ], GetPlayerNameEx(I_var, NO_MASK));
  		SCFM(I_var, COLOR_GREY, "> Predal si vozidlo %s (%s) z autobazaru hráèovi %s!", GetVehicleName(vid), vEnum[vid][v_SPZ], GetPlayerNameEx(playerid, NO_MASK));
	}
	else if(!strcmp(S_var, "playercar", false))
	{
	    if(!IsPlayerLogged(I_var))
	        return SendError(playerid, "Tento hráè nie je v hre! (Nezabudni zada ID!)");

		if(!IsPlayerNearPlayer(playerid, I_var, 3))
		    return SendError(playerid, "Tento hráè je moc ïaleko!");

		if(bazarbZiadost[playerid][I_var] == 0)
		    return SendError(playerid, "Tento hráè ti nepredáva auto!");
		    
		if(bazarcenat[I_var] > ex_GetPlayerMoney(playerid))
		    return SendError(playerid, "Nemas dost penazi!");

		new vid = bazarvehid[I_var];

		ex_GivePlayerMoney(playerid, -bazarcenat[I_var]);
		money_givenby[playerid]+=floatround(bazarcenat[I_var],floatround_round);
		ex_GivePlayerMoney(I_var, bazarcenat[I_var]);
		money_accepted[I_var]+=floatround(bazarcenat[I_var],floatround_round);
		FormatBazarLog(playerid, "[buy] Kupa vozidla %s (%s) od hraca %s za %d$.", GetVehicleName(vid), vEnum[vid][v_SPZ], ReturnName(playerid), bazarcenat[I_var]);

		vEnum[vid][v_bazar_Price]   			= bazarcenat[I_var]*2;
		vEnum[vid][v_bazar_Buyout]   			= 0;
		vEnum[vid][v_bazar_DateAdded]   		= gettime();
		vEnum[vid][v_bazar_BoughtFor]   		= bazarcenat[I_var];
		format(vEnum[vid][v_bazar_Desc], 256, "");
		format(vEnum[vid][v_bazar_AddedBy], MAX_PLAYER_NAME+1, ReturnName(playerid));

		format(vEnum[vid][v_Owner], 30, "");
		format(vEnum[vid][v_SecOwner], 30, "");

		new
		    S_query[2048],
		    Float:vHP
		;

		vhac_GetVehicleHealth(vid, vHP);

		mysql_format(MYSQL, S_query, sizeof S_query, "DELETE FROM char_vehicles WHERE SPZ = '%e'", vEnum[vid][v_SPZ]);
		mysql_tquery(MYSQL, S_query);

		mysql_format(
			MYSQL, S_query, sizeof S_query,
			"INSERT INTO faction_vehicles (SPZ, Model, X, Y, Z, Angle, VirtualWorld, Interior, Color1, Color2, Paintjob, Fuel, Battery, Health, Faction) VALUES ('%e', '%d', '-226.774', '1193.3', '19.408', '270.0', '0', '0', '%d', '%d', '3', '%d', '%d', '%.2f', '%d')",
			vEnum[vid][v_SPZ],
			GetVehicleModel(vid),
			vEnum[vid][v_Color_1],
			vEnum[vid][v_Color_2],
			vEnum[vid][v_Fuel],
			vEnum[vid][v_Battery],
			vHP,
			GetPlayerFaction(playerid)
		);
		mysql_tquery(MYSQL, S_query);

		vEnum[vid][v_Faction] = GetPlayerFaction(playerid);

		UpdateFactionVehicleUnit(vid, bazar_GetUnitText(vid), false, false, .windshield=true);

  		bazarbZiadost[playerid][I_var] = 0;
		bazarbZiadost[I_var][playerid] = 0;

		SCFM(playerid, COLOR_GREY, "> Kúpil si vozidlo %s (%s) od hráèa do bazaru! Predal ti ho %s za %d$!", GetVehicleName(vid), vEnum[vid][v_SPZ], GetPlayerNameEx(I_var, NO_MASK), bazarcenat[I_var]);
  		SCFM(I_var, COLOR_GREY, "> Predal si vozidlo %s (%s) do autobazaru hráèovi %s za %d$!", GetVehicleName(vid), vEnum[vid][v_SPZ], GetPlayerNameEx(playerid, NO_MASK), bazarcenat[I_var]);
	}
	else
	    SendClientSyntax(playerid, "/accept [item-drug-death-frisk-weapon-kevlar-frakcia-nelegalka-dreger-alkohol-bazarauto-playercar] <id>");

	return 1;
}

YCMD:dropwep(playerid, params[], help)
{

	if(B_isPlayerInDM[playerid] == true)
	    return SendError(playerid, "Ked si v death mode mozes len zbran givnut!");

	if(give_Weapon[playerid][0] > 1)
	    return SendError(playerid, "Teraz nemôe manipulova s touto zbraòou!");

	new
		S_var[32];

	sscanf(params, "S()[32]", S_var);

    new dropid = -1;

	for( new i; i < MAX_DROPS; i++ )
	{
	    if(strlen(dropEnum[i][drop_PlacedBy]) > 0)
	        continue;

		dropid = i;
		break;
	}

	if(dropid == -1)
	    return SendError(playerid, "Nie je volný slot na drop!");

	new
	    dropfact = 0,
		weapon = GetPlayerWeapon(playerid),
		ammo = GetPlayerAmmo(playerid),
		Float:Pos[4],
		date[32],

		ex_date[3],
		ex_time[3],

		slot = Weapons::getWeaponSlot(weapon)
	;

	if(weapon == 0 || ammo <= 0)
	    return SendError(playerid, "Túto zbraò nemôe poloi!");
	    
	if(playerWeapons[playerid][slot][pweapons_WeaponId] <= 0 || playerWeapons[playerid][slot][pweapons_WeaponId] > BIGGEST_WEAPON_ID)
	    return SendError(playerid, "Túto zbraò nemôe poloi, má neplatné ID!");
	    
	if(playerWeapons[playerid][slot][pweapons_Ammo] <= 0)
	    return SendError(playerid, "Túto zbraò nemôe poloi, nemá náboje!");
	    
    FormatWeaponLog(playerid, "[remove] Polozil %s s %d nabojmi na zem.", GetWeaponNameEx(weapon), ammo);

    getdate(ex_date[0], ex_date[1], ex_date[2]);
	gettime(ex_time[0], ex_time[1], ex_time[2]);
	format(date, 32, "%d/%d/%d %d:%d:%d", ex_date[2], ex_date[1], ex_date[0], ex_time[0], ex_time[1], ex_time[2]);

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	if(IsPlayerWorking(playerid))
	    dropfact = GetPlayerFaction(playerid);

    new
		S_finalString[128 + 25 + 5];

	new S_first[25];
	if(B_playerHasMask[playerid] == false) {
	    strcat(S_first, ReturnName(playerid));
	    strdel(S_first,strfind(S_first,"_",true),25);
	} else {
	    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
	}

	format(S_finalString, sizeof(S_finalString), "AME: * %s pokláda na zem %s.", S_first, GetWeaponNameEx(weapon));
 	SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

	format(S_finalString, sizeof(S_finalString), "* %s pokláda na zem %s.", S_first, GetWeaponNameEx(weapon));
	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

	ApplyAnimation(playerid, "BOMBER", "BOM_PLANT", 4.1, false, true, true, false, 0, true); // /polozit

	if(!strlen(S_var))
	    SendClientSyntax(playerid, "/dropwep <text>");

	FormatLog(log_type_player, "%s(%s - %s) poklada na zem zbran %s ( %d ammo ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), GetWeaponNameEx(weapon), ammo);

    CreateDynamicDrop(
		1,
		weapon, ammo,
		Pos[0], Pos[1], Pos[2], Pos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid),
		ReturnName(playerid), date, dropfact, S_var, 1, -1,
		
		playerWeapons[playerid][slot][pweapons_SerialNumber],
		playerWeapons[playerid][slot][pweapons_Origin],
		!!playerWeapons[playerid][slot][pweapons_IsWork],
	 	!!playerWeapons[playerid][slot][pweapons_IsPermit]
	);
	
    Weapons::removeWeapon(playerid, weapon, false);
    
	return 1;
}

YCMD:dropvest(playerid, params[], help)
{

	if(give_Kevlar[playerid][0] > 0)
	    return SendError(playerid, "Teraz nemôe manipulova s vestou!");

	new
		S_var[32];

	sscanf(params, "S()[32]", S_var);

    new dropid = -1;

	for( new i; i < MAX_DROPS; i++ )
	{
	    if(strlen(dropEnum[i][drop_PlacedBy]) > 0)
	        continue;

		dropid = i;
		break;
	}

	if(dropid == -1)
	    return SendError(playerid, "Nie je volný slot na drop!");

	new
	    dropfact = 0,
		Float:ar,
		Float:Pos[4],
		date[32],

		ex_date[3],
		ex_time[3];

	ahac_GetPlayerArmour(playerid, ar);
	if(ar < 0.6)
	    return SendError(playerid, "Nemá vestu!");

    SetPlayerArmour(playerid, 0.0);

    getdate(ex_date[0], ex_date[1], ex_date[2]);
	gettime(ex_time[0], ex_time[1], ex_time[2]);
	format(date, 32, "%d/%d/%d %d:%d:%d", ex_date[2], ex_date[1], ex_date[0], ex_time[0], ex_time[1], ex_time[2]);

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	if(IsPlayerWorking(playerid))
	    dropfact = GetPlayerFaction(playerid);

    new
		S_finalString[128 + 25 + 5];

	new S_first[25];
	if(B_playerHasMask[playerid] == false) {
	    strcat(S_first, ReturnName(playerid));
	    strdel(S_first,strfind(S_first,"_",true),25);
	} else {
	    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
	}

	format(S_finalString, sizeof(S_finalString), "AME: * %s pokláda na zem vestu.", S_first);
 	SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

	format(S_finalString, sizeof(S_finalString), "* %s pokláda na zem vestu.", S_first);
	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

	ApplyAnimation(playerid, "BOMBER", "BOM_PLANT", 4.1, false, true, true, false, 0, true); // /polozit

	if(!strlen(S_var))
	    SendClientSyntax(playerid, "/dropvest <text>");

	FormatLog(log_type_player, "%s(%s - %s) poklada na zem vestu ( %d ammo ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), ar);

    CreateDynamicDrop(3, 0, floatround(ar, floatround_round), Pos[0], Pos[1], Pos[2], Pos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), ReturnName(playerid), date, dropfact, S_var, 1);

	return 1;
}

YCMD:pickup(playerid, params[], help)
{

    new
		S_var[32];

	sscanf(params, "S(ne)[32]", S_var);

	new dropid = -1;

	foreach( new i : Drops )
	{
	    if(strlen(dropEnum[i][drop_PlacedBy]) < 1)
	        continue;

		if(!IsPlayerInDynamicArea(playerid, dropEnum[i][drop_AreaID], 0))
		    continue;

		dropid = i;
		break;
	}

	if(dropid == -1)
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");

	if(dropEnum[dropid][drop_Type] == 1)
	{

	    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	    	return SendError(playerid, "Nie si skrèený, stlaè C!");

	    new
	        wid,
	        ammo,
			slot = ac_GetWeaponSlot(dropEnum[dropid][drop_Detail]);

	    GetPlayerWeaponData(playerid, slot, wid, ammo);
	    
	    /*if(dropEnum[dropid][drop_Faction] != 0)
	    {
	        if(factEnum[dropEnum[dropid][drop_Faction]][fact_Type] == FACTION_TYPE_LAW)
	        {
	            if(GetPlayerFaction(playerid) != dropEnum[dropid][drop_Faction])
	                return SendError(playerid, "Nemozes vziat zbran,ktoru polozil prislusnik!");
	        }
	    }*/

		if(wid != 0 && (isnull(S_var) || strcmp(S_var, "ano", false)))
		    return SendError(playerid, "Ak túto zbraò vezme, prepíe sa ti stávajúca zbraò na tomto slote! Ak súhlasí, poui príkaz /pickup ano");

		if(playerEmptyGuns[playerid][slot] > 0)
		    return SendError(playerid, "U jednu takúto zbraò má, ale prázdnu! Poui /myguns!");

        if(canHaveLargeWeapon(playerid, wid) == 0)
   	    	return SendError(playerid, "Uz mas jednu velku zbran!");

		if(dropEnum[dropid][drop_Count] > 0)
		{
	    	Weapons::GivePlayerNewWeapon(playerid, dropEnum[dropid][drop_Detail], dropEnum[dropid][drop_Count], !!dropEnum[dropid][drop_IsWorkWeap], !!dropEnum[dropid][drop_IsPermitWeap], dropEnum[dropid][drop_Origin], false, dropEnum[dropid][drop_SerialNumber]);
	    	FormatWeaponLog(playerid, "[give] Zobral zbran %s s %d nabojmi zo zeme.", GetWeaponNameEx(dropEnum[dropid][drop_Detail]), dropEnum[dropid][drop_Count]);
		}
		else
		{
		    EmptyGuns::GiveGun(playerid, dropEnum[dropid][drop_Detail], false, dropEnum[dropid][drop_Detail],dropEnum[dropid][drop_SerialNumber], dropEnum[dropid][drop_IsWorkWeap], dropEnum[dropid][drop_IsPermitWeap], dropEnum[dropid][drop_Origin]);
		}

	    new
			S_finalString[128 + 25 + 5];

		new S_first[25];
		if(B_playerHasMask[playerid] == false) {
		    strcat(S_first, ReturnName(playerid));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

	    format(S_finalString, sizeof(S_finalString), "AME: * %s dvíha zo zeme %s.", S_first, GetWeaponNameEx(dropEnum[dropid][drop_Detail]));
	    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

		format(S_finalString, sizeof(S_finalString), "* %s dvíha zo zeme %s.", S_first, GetWeaponNameEx(dropEnum[dropid][drop_Detail]));
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

		FormatLog(log_type_player, "%s(%s - %s) dviha zo zeme zbran %s ( %d ammo ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), GetWeaponNameEx(dropEnum[dropid][drop_Detail]), dropEnum[dropid][drop_Count]);
	}
	else if(dropEnum[dropid][drop_Type] == 1000)
	{

	    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	    	return SendError(playerid, "Nie si skrèený, stlaè C!");
	    drug_givePlayerDrug(playerid, dropEnum[dropid][drop_Detail], dropEnum[dropid][drop_Count]);

        new
			S_finalString[128 + 25 + 5];

		new S_first[25];
		if(B_playerHasMask[playerid] == false) {
		    strcat(S_first, ReturnName(playerid));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

	    format(S_finalString, sizeof(S_finalString), "AME: * %s dvíha zo zeme %s.", S_first, drug_getName(dropEnum[dropid][drop_Detail]));
	    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

		format(S_finalString, sizeof(S_finalString), "* %s dvíha zo zeme %s.", S_first, drug_getName(dropEnum[dropid][drop_Detail]));
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

		FormatLog(log_type_player, "%s(%s - %s) dviha zo zeme drogu %s ( %d %s ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), drug_getName(dropEnum[dropid][drop_Detail]), dropEnum[dropid][drop_Count], drug_getUnderName(dropEnum[dropid][drop_Detail]));

	}
	else if(dropEnum[dropid][drop_Type] >= 1200 && dropEnum[dropid][drop_Type] < 1300)
	{

	    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	    	return SendError(playerid, "Nie si skrèený, stlaè C!");

	    Alcohol::Give(playerid, dropEnum[dropid][drop_Text], dropEnum[dropid][drop_Count], dropEnum[dropid][drop_Type]-1200, dropEnum[dropid][drop_Model]);

        new
			S_finalString[128 + 25 + 5];

		new S_first[25];
		if(B_playerHasMask[playerid] == false) {
		    strcat(S_first, ReturnName(playerid));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

	    format(S_finalString, sizeof(S_finalString), "AME: * %s dvíha zo zeme %s.", S_first, dropEnum[dropid][drop_Text]);
	    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

		format(S_finalString, sizeof(S_finalString), "* %s dvíha zo zeme %s.", S_first, dropEnum[dropid][drop_Text]);
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

		FormatLog(log_type_player, "%s(%s - %s) dviha zo zeme flasu %s ( %d %% ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), dropEnum[dropid][drop_Text], dropEnum[dropid][drop_Type]-1200);

	}
	else if(dropEnum[dropid][drop_Type] == 1005)
	{

	    if(GetPVarInt(playerid,"haskrabica") == 1)
	        return SendError(playerid, "U má krabicu!");

	    SetPVarInt(playerid,"haskrabica",1);
	    SetPVarInt(playerid,"krtyp",dropEnum[dropid][drop_Detail]);

        new
			S_finalString[128 + 25 + 5];

		new S_first[25];
		if(B_playerHasMask[playerid] == false) {
		    strcat(S_first, ReturnName(playerid));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

	    format(S_finalString, sizeof(S_finalString), "AME: * %s dvíha zo zeme krabicu.", S_first);
	    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

		format(S_finalString, sizeof(S_finalString), "* %s dvíha zo zeme krabicu.", S_first);
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

	}
	else if(dropEnum[dropid][drop_Type] == 2)
	{

	    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	    	return SendError(playerid, "Nie si skrèený, stlaè C!");

	    ex_GivePlayerMoney(playerid, float(dropEnum[dropid][drop_Count]) / 100.0);
	    money_accepted[playerid]+=floatround(float(dropEnum[dropid][drop_Count]) / 100.0,floatround_round);

	    new
			S_finalString[128 + 25 + 5];

		new S_first[25];
		if(B_playerHasMask[playerid] == false) {
		    strcat(S_first, ReturnName(playerid));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

	    format(S_finalString, sizeof(S_finalString), "AME: * %s dvíha zo zeme peniaze.", S_first);
	    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

		format(S_finalString, sizeof(S_finalString), "* %s dvíha zo zeme peniaze.", S_first);
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

		FormatLog(log_type_player, "%s(%s - %s) dviha zo zeme peniaze ( %.2f $ ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), float(dropEnum[dropid][drop_Count]) / 100.0);
	}
	else if(dropEnum[dropid][drop_Type] == 3)
	{

	    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	    	return SendError(playerid, "Nie si skrèený, stlaè C!");

	    new
	        Float:arm;

		ahac_GetPlayerArmour(playerid, arm);
		if(arm > 0.5 && (isnull(S_var) || strcmp(S_var, "ano", false)))
		    return SendError(playerid, "Ak túto vestu vezme, prepíe sa ti stávajúca! Ak súhlasí, poui príkaz /pickup ano");

	    SetPlayerArmour(playerid, dropEnum[dropid][drop_Count]);

	    new
			S_finalString[128 + 25 + 5];

		new S_first[25];
		if(B_playerHasMask[playerid] == false) {
		    strcat(S_first, ReturnName(playerid));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

	    format(S_finalString, sizeof(S_finalString), "AME: * %s dvíha zo zeme vestu.", S_first);
	    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

		format(S_finalString, sizeof(S_finalString), "* %s dvíha zo zeme vestu.", S_first);
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

		FormatLog(log_type_player, "%s(%s - %s) dviha zo zeme vestu ( %d percent ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), dropEnum[dropid][drop_Count]);
	}
	else
	{

	    new invid;

	    switch(dropEnum[dropid][drop_Type])
	    {
	        case 4: invid = inv_pacidlo;
	        case 5: invid = inv_lano;
	        case 6: invid = inv_vrece;
	        case 7: invid = inv_puta;
	        case 8: invid = inv_weed;
	        case 9: invid = inv_weed_seed;
	        case 10: invid = inv_naboje;
	        case 11: invid = inv_bandaz;
	        case 12: invid = inv_rezerva;
	        case 13: invid = inv_weeds1;
	        case 14: invid = inv_weeds2;
	        case 15: invid = inv_weeds3;
	        case 16: invid = inv_hnojivo;
	        case 17: invid = inv_spritelean;
	        case 18: invid = inv_prometh;
	    }

	    SetPlayerInventoryItem(playerid, invid, GetPlayerInventoryItem(playerid, invid) + dropEnum[dropid][drop_Count]);

	    new
			S_finalString[128 + 25 + 5];

		new S_first[25];
		if(B_playerHasMask[playerid] == false) {
		    strcat(S_first, ReturnName(playerid));
		    strdel(S_first,strfind(S_first,"_",true),25);
		} else {
		    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

	    format(S_finalString, sizeof(S_finalString), "AME: * %s dvíha zo zeme %s.", S_first, GetDropTypeName(dropEnum[dropid][drop_Type]));
	    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

		format(S_finalString, sizeof(S_finalString), "* %s dvíha zo zeme %s.", S_first, GetDropTypeName(dropEnum[dropid][drop_Type]));
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

		FormatLog(log_type_player, "%s(%s - %s) dviha zo zeme %s ( %d ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), GetDropTypeName(dropEnum[dropid][drop_Type]), dropEnum[dropid][drop_Count]);
	}

	/*if(strcmp(dropEnum[dropid][drop_PlacedBy], ReturnName(playerid), false))
	{

	    new
			bool:fnd = false;

		for( new x; x < 4; x++ )
		{
		    if(!strcmp(playerCharacters[playerid][x], dropEnum[dropid][drop_PlacedBy], false))
			{
			    fnd = true;
			    break;
			}
		}

		if(fnd == true)
	    {
	        if(GetPlayerAdminLevel(playerid) < 4)
		    {
			    stats_Ban[playerid] ++;
			    BanPlayer(playerid, "Itemfarming", "System", 2);
			}
			else
			{
			    SCFM(playerid, COLOR_ADMINCMD, "[ ANTI-CHEAT ] Ak by si nebol administrátor, dostal by si BAN za Itemfarming.");
			}
	    }
	}*/

	DestroyDynamicDrop(dropid);

	return 1;
}

YCMD:zmazatdrop(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
		return SendClientCantUseCommand(playerid);

	if(GetPlayerAdminLevel(playerid) < 4 && !IsPlayerWorking(playerid))
        return SendClientCantUseCommand(playerid);

    new
		S_var[32];

	sscanf(params, "S(ne)[32]", S_var);

	new dropid = -1;

	foreach( new i : Drops )
	{
	    if(strlen(dropEnum[i][drop_PlacedBy]) < 1)
	        continue;

		if(!IsPlayerInDynamicArea(playerid, dropEnum[i][drop_AreaID], 0))
		    continue;

		dropid = i;
		break;
	}

	if(dropid == -1)
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");

	if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	    return SendError(playerid, "Nie si skrèený, stlaè C!");

	if(dropEnum[dropid][drop_Type] == 1)
	{
	    FormatWarnEx(playerid,3, "PlayerCmd:", COLOR_ADMINCMD, "%s mae zo zeme zbraò %s ( %d ammo ).", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetWeaponNameEx(dropEnum[dropid][drop_Detail]), dropEnum[dropid][drop_Count]);
		FormatLog(log_type_player, "%s(%s - %s) maze zo zeme zbran %s ( %d ammo ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), GetWeaponNameEx(dropEnum[dropid][drop_Detail]), dropEnum[dropid][drop_Count]);
	}
	else if(dropEnum[dropid][drop_Type] == 2)
	{
	    FormatWarnEx(playerid,3, "PlayerCmd:", COLOR_ADMINCMD, "%s mae zo zeme peniaze ( %d $ ).", GetPlayerNameEx(playerid, USE_PUREIDNAME), dropEnum[dropid][drop_Count]);
		FormatLog(log_type_player, "%s(%s - %s) maze zo zeme peniaze ( %d $ ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), dropEnum[dropid][drop_Count]);
	}
	else if(dropEnum[dropid][drop_Type] == 3)
	{
	    FormatWarnEx(playerid,3, "PlayerCmd:", COLOR_ADMINCMD, "%s mae zo zeme vestu ( %d percent ).", GetPlayerNameEx(playerid, USE_PUREIDNAME), dropEnum[dropid][drop_Count]);
		FormatLog(log_type_player, "%s(%s - %s) maze zo zeme vestu ( %d percent ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), dropEnum[dropid][drop_Count]);
	}
	else
	{
	    FormatWarnEx(playerid,3, "PlayerCmd:", COLOR_ADMINCMD, "%s mae zo zeme %s ( %d ).", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetDropTypeName(dropEnum[dropid][drop_Type]), dropEnum[dropid][drop_Count]);
		FormatLog(log_type_player, "%s(%s - %s) maze zo zeme %s ( %d ).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), GetDropTypeName(dropEnum[dropid][drop_Type]), dropEnum[dropid][drop_Count]);
	}

	SendSuccess(playerid, "Drop úspene zmazaný!");

	DestroyDynamicDrop(dropid);

	return 1;
}

YCMD:dropinfo(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
		return SendClientCantUseCommand(playerid);

    new
		S_var[32];

	if(sscanf(params, "s[32]", S_var))
	    return SendClientSyntax(playerid, "/dropinfo [id dropu/tento]");

	new dropid = -1;

	if(!strcmp(S_var, "tento", false))
	{
		foreach( new i : Drops )
		{
		    if(strlen(dropEnum[i][drop_PlacedBy]) < 1)
		        continue;

			if(!IsPlayerInDynamicArea(playerid, dropEnum[i][drop_AreaID], 0))
			    continue;

			dropid = i;
			break;
		}
	}
	else
	{
	    dropid = strval(S_var);
	}

	if(dropid == -1)
	    return SendError(playerid, "Nie je tu iadny drop!");

	if(dropEnum[dropid][drop_PlacedBy] < 1)
	    return SendError(playerid, "Takýto drop neexistuje!");

	SCFM(playerid, COLOR_COMMANDUSE, "[ DROP ] --------------------------------------------------------------------------");
	SCFM(playerid, COLOR_COMMANDUSE, "[ DROP ] {FFFFFF}Poloil: %s", dropEnum[dropid][drop_PlacedBy]);
	SCFM(playerid, COLOR_COMMANDUSE, "[ DROP ] {FFFFFF}Dátum: %s", dropEnum[dropid][drop_Date]);
	SCFM(playerid, COLOR_COMMANDUSE, "[ DROP ] {FFFFFF}Dodatoèný text: %s", dropEnum[dropid][drop_Text]);
	SCFM(playerid, COLOR_COMMANDUSE, "[ DROP ] {FFFFFF}Typ dropu: %s (ex.: (zbraò: %s), (ammo/poèet: %d))", GetDropTypeName(dropEnum[dropid][drop_Type]), GetWeaponNameEx(dropEnum[dropid][drop_Detail]), dropEnum[dropid][drop_Count]);
	SCFM(playerid, COLOR_COMMANDUSE, "[ DROP ] {FFFFFF}Frakcia: %s", factEnum[dropEnum[dropid][drop_Faction]][fact_Name]);
	SCFM(playerid, COLOR_COMMANDUSE, "[ DROP ] --------------------------------------------------------------------------");

	return 1;
}

YCMD:listdrop(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/listdrop[ex] [id/èas mena (charakter)]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	new
	    finalString[512] = "{FFFFFF}Vylistované dropy hráèa:\n\n",
	    tempString[128],
		caption[30];

	format(caption, 30, GetPlayerNameEx(I_var, NO_MASK));

	for(new i; i < 30; i++)
		caption[i] = toupper(caption[i]);

	foreach( new i : Drops )
	{
	    if(dropEnum[i][drop_Type] == 0)
	        continue;

		if(isnull(dropEnum[i][drop_PlacedBy]) || strcmp(dropEnum[i][drop_PlacedBy], ReturnName(I_var), false))
		    continue;

		if(dropEnum[i][drop_Type] == 1)
		{
		    format(tempString, 128, "ID %d: Zbraò %s (%d ammo), frakcia %d (/frakcie)\n", i, GetWeaponNameEx(dropEnum[i][drop_Detail]), dropEnum[i][drop_Count], dropEnum[i][drop_Faction]);
		}
		else
		{
		    format(tempString, 128, "ID %d: %s (%d), frakcia %d (/frakcie)\n", i, GetDropTypeName(dropEnum[i][drop_Type]), dropEnum[i][drop_Count], dropEnum[i][drop_Faction]);
		}

		strcat(finalString, tempString);

	}

	ShowPlayerDialog(playerid, did_Listdrop, DIALOG_STYLE_MSGBOX, caption, finalString, "OK", "");

    FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s si vylistoval dropy hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));

	return 1;

}

YCMD:listdropex(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var[30];

	if(sscanf(params, "s[30]", I_var))
	    return SendClientSyntax(playerid, "/listdrop[ex] [meno charakteru s podjebníkom]");

	new
	    finalString[512] = "{FFFFFF}Vylistované dropy pod¾a mena:\n\n",
	    tempString[128],
		caption[30],
		pocet = 0;

	format(caption, 30, str_replace("_", " ", I_var));

	for(new i; i < 30; i++)
		caption[i] = toupper(caption[i]);

	foreach( new i : Drops )
	{
	    if(dropEnum[i][drop_Type] == 0)
	        continue;

		if(isnull(dropEnum[i][drop_PlacedBy]) || strcmp(dropEnum[i][drop_PlacedBy], I_var, false))
		    continue;

		if(dropEnum[i][drop_Type] == 1)
		{
		    format(tempString, 128, "ID %d: Zbraò %s (%d ammo), frakcia %d (/frakcie)\n", i, GetWeaponNameEx(dropEnum[i][drop_Detail]), dropEnum[i][drop_Count], dropEnum[i][drop_Faction]);
		}
		else
		{
		    format(tempString, 128, "ID %d: %s (%d), frakcia %d (/frakcie)\n", i, GetDropTypeName(dropEnum[i][drop_Type]), dropEnum[i][drop_Count], dropEnum[i][drop_Faction]);
		}

		pocet ++;

		strcat(finalString, tempString);

	}

	if(pocet == 0)
	    return SendError(playerid, "iadny drop nie je poloený týmto hráèom!");

	ShowPlayerDialog(playerid, did_Listdrop, DIALOG_STYLE_MSGBOX, caption, finalString, "OK", "");

	FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s si vylistoval dropy hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), str_replace("_", " ", I_var));

	return 1;
}

YCMD:gotodrop(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/gotodrop [id dropu (/listdrop[ex])");

	if(dropEnum[I_var][drop_Type] == 0)
 		return SendError(playerid, "Tento drop neexistuje!");

    SetPlayerVirtualWorld(playerid, dropEnum[I_var][drop_VirtualWorld]);
	SetPlayerInterior(playerid, dropEnum[I_var][drop_Interior]);
	SetPlayerPos(playerid, dropEnum[I_var][drop_X], dropEnum[I_var][drop_Y], dropEnum[I_var][drop_Z] + 0.5);

	TogglePlayerControllable(playerid, 0);
 	SetTimerEx("UnFreezePlayer", 2000, false, "i", playerid);

 	SetCameraBehindPlayer(playerid);

 	SCFM(playerid, 0xD0D0D0FF, "> Teleportoval si sa k dropu ID %d, poloil %s (%s)!", I_var, dropEnum[I_var][drop_PlacedBy], dropEnum[I_var][drop_Date]);

 	FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s sa teleportoval k dropu ID %d, poloil %s (%s).", GetPlayerNameEx(playerid, USE_PUREIDNAME), I_var, dropEnum[I_var][drop_PlacedBy], dropEnum[I_var][drop_Date]);
 	FormatLog(log_type_admin, "%s(%s) sa teleportoval k dropu ID %d, polozil %s (%s).", ReturnMaster(playerid), ReturnIP(playerid), I_var, dropEnum[I_var][drop_PlacedBy], dropEnum[I_var][drop_Date]);

	return 1;

}

YCMD:zmazatskin(playerid, params[], help)
{
	new
	    I_var[8];

	if(sscanf(params, "s[8]", I_var))
	    return SendClientSyntax(playerid, "/zmazatskin [slot 1 - 5/vsetky]");

	if(!IsNumeric(I_var))
	{
	    if(strcmp(I_var, "vsetky", false))
	        return SendClientSyntax(playerid, "/zmazatskin [slot 1 - 5/vsetky]");

		skinStorage[playerid][0] = 0;
		skinStorage[playerid][1] = 0;
		skinStorage[playerid][2] = 0;
		skinStorage[playerid][3] = 0;
		skinStorage[playerid][4] = 0;

		SendError(playerid, "Vetky skiny zo atníka zmazané!");
	}
	else
	{
	    if(strval(I_var) < 1 || strval(I_var) > 4)
	        return SendClientSyntax(playerid, "/zmazatskin [slot 1 - 5/vsetky]");

		if(skinStorage[playerid][strval(I_var)] < 1)
		    return SendError(playerid, "Na tomto slote nemá iadny skin!");

        skinStorage[playerid][strval(I_var)] = 0;

        SendError(playerid, "Skin zo atníka zmazaný!");
	}
	return 1;
}

/*YCMD:popis(playerid, params[], help)
{
	new
		I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/popis [id]");

	MaskToId(I_var);

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(playerid, I_var, 5.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	if(I_var != playerid)
	{
		new
		    S_string[145],
			Text3D:label;

		format(S_string, 145, "* %s", popis[I_var]);

		label = CreateDynamic3DTextLabel( S_string, COLOR_VIOLET, 0.0, 0.0, 0.4, 6.0, I_var, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(I_var), GetPlayerInterior(I_var), playerid, 10.0, -1, 2);

		SetTimerEx("timer_DestroyPopisLabel", 5000, false, "i", _:label);
	}
	else
	{
	    new
		    S_string[145];

		format(S_string, 145, "* %s", popis[playerid]);
		SendClientMessage(playerid, COLOR_VIOLET, S_string);
	}
	return 1;
}*/

/*YCMD:vybratpizzu(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_PIZZADELIVERY)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

    if(!isDoingSWJob[playerid])
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(GetPlayerSpecialAction(playerid) == 25)
	    return SendError(playerid, "U má pizzu!");

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesmie sedie v aute!");

	new
	    vehicleid = -1,
	    Float:distance = 3.5,
	    Float:newdist = 0.0,

		Float:Pos[3],
		Float:vPos[3];

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	foreach ( new i : Vehicle )
	{

		GetVehicleBoot(i, vPos[0], vPos[1], vPos[2]);

		newdist = GetDistanceFromPoint(vPos[0], vPos[1], vPos[2], Pos[0], Pos[1], Pos[2]);

		if(newdist < distance)
		{
		    vehicleid = i;
		    distance = newdist;
		}

		continue;
	}
	
	if(vehicleid == -1 || IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nestojí pri kufri vozidla ktoré má pizzu!");
	    
    if(GetVehicleFactionType(vehicleid) != FACTION_TYPE_PIZZADELIVERY)
	    return SendError(playerid, "V tomto vozidle nie je pizza!");

    SetPlayerAttachedObject(playerid, 9, 19571, 6, -0.166999, -0.010000, -0.190999, -15.900000, 90.200042, -7.200002);
    SetPlayerSpecialAction(playerid, 25);

    new S_str[144];
	format(S_str, 144, "* %s vyberá z kufra vozidla %s jednu pizzu. *", GetPlayerNameEx(playerid, USE_MASK), VehicleNames[GetVehicleModel(vehicleid)-400]);
	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

	return 1;
}

YCMD:zahoditpizzu(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_PIZZADELIVERY)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

    if(!isDoingSWJob[playerid])
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(GetPlayerSpecialAction(playerid) != 25)
	    return SendError(playerid, "Nemá pizzu!");

    RemovePlayerAttachedObject(playerid, 9);
    SetPlayerSpecialAction(playerid, 0);

    new S_str[144];
	format(S_str, 144, "* %s zahadzuje pizzu. *", GetPlayerNameEx(playerid, USE_MASK));
	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

	ex_GivePlayerMoney(playerid, -25);
	money_spent[playerid]+=floatround(25,floatround_round);
	SendError(playerid, "Priiel si o 25$ za zahodenie pizze!");

	return 1;
}

YCMD:datpizzu(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_PIZZADELIVERY)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

    if(!isDoingSWJob[playerid])
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(GetPlayerSpecialAction(playerid) != 25)
	    return SendError(playerid, "Nemá pizzu!");

	new
		I_var;

	if(sscanf(params,"d",I_var))
		return SendClientSyntax(playerid, "/datpizzu [id]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	if(!IsPlayerNearPlayer(playerid, I_var, 3.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	SetPlayerInventoryItem(I_var, inv_pizza, GetPlayerInventoryItem(I_var, inv_pizza)+1);

	RemovePlayerAttachedObject(playerid, 9);
    SetPlayerSpecialAction(playerid, 0);

	new S_str[144];
	format(S_str, 144, "* %s podáva pizzu %s. *", GetPlayerNameEx(playerid, USE_MASK), GetPlayerNameEx(I_var, USE_MASK));
	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

	ex_GivePlayerMoney(playerid, -25);
	money_spent[playerid]+=floatround(25,floatround_round);
	SendError(playerid, "Priiel si o 25$ za danie pizze!");

	return 1;
}*/


YCMD:kufor(playerid, params[], help)
{

	new
	    S_var[12],
	    S_emotions[128];

	if(sscanf(params, "s[12] S()[128]", S_var, S_emotions))
		return SendClientSyntax(playerid, "/kufor [otvorit/zatvorit/obsah/satna] <emócie>");

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Sedí v aute!");

	new
	    vehicleid = -1,
	    Float:distance = 2.5,
	    Float:newdist = 0.0,

		Float:Pos[3],
		Float:vPos[3];

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	foreach ( new i : Vehicle )
	{
	    if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i))
	        continue;

		if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i))
		    continue;

		GetVehicleBoot(i, vPos[0], vPos[1], vPos[2]);

		newdist = GetDistanceFromPoint(vPos[0], vPos[1], vPos[2], Pos[0], Pos[1], Pos[2]);

		if(newdist < distance)
		{
		    vehicleid = i;
		    distance = newdist;
		}

		continue;
	}

	switch(GetVehicleModel(vehicleid))
	{
	    case
	        481,
	        510,
	        509:
		{
		    return SendError(playerid, "Toto vozidlo nemá kufor!");
		}
	}

	if(!strcmp(S_var, "otvorit", true))
	{
		if(vehicleid == -1)
		    return SendError(playerid, "Nestojí pri kufri iadneho vozidla!");

		if(GetVehicleParams(vehicleid, VEHICLE_TYPE_BOOT) != 1)
		{
		    if(GetVehicleParams(vehicleid, VEHICLE_TYPE_DOORS) == 1)
		        return SendError(playerid, "Toto vozidlo je zamknuté!");

            if(strlen(S_emotions) > 0)
			{
				new
				    S_string[144];

				format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_emotions);
				SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_string);
			}
		    SetVehicleParams(vehicleid, VEHICLE_TYPE_BOOT, 1);

		    CPS_OnVehicleBootStatusUpdate(vehicleid, 0, 1);
		}
		else
			return SendError(playerid, "Toto vozidlo má otvorený kufor!");
	}
	else if(!strcmp(S_var, "zatvorit", true))
	{
		if(vehicleid == -1)
		    return SendError(playerid, "Nie je tu iadne vozidlo!");

		if(GetVehicleParams(vehicleid, VEHICLE_TYPE_BOOT) == 1)
		{
            if(strlen(S_emotions) > 0)
			{
				new
				    S_string[144];

				format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_emotions);
				SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_string);
			}

		    SetVehicleParams(vehicleid, VEHICLE_TYPE_BOOT, 0);

		    CPS_OnVehicleBootStatusUpdate(vehicleid, 1, 0);
		}
		else
			return SendError(playerid, "Toto vozidlo má zatvorený kufor!");
	}
	else if(!strcmp(S_var, "satna", true))
	{
		if(vehicleid == -1)
		    return SendError(playerid, "Nie je tu iadne vozidlo!");

		if(GetVehicleParams(vehicleid, VEHICLE_TYPE_BOOT) != 1)
		    return SendError(playerid, "Toto vozidlo nemá otvorený kufor!");

		ShowPlayerSkinStorage(playerid);
	}
	else if(!strcmp(S_var, "obsah", true))
	{
		if(vehicleid == -1)
		    return SendError(playerid, "Nie je tu iadne vozidlo!");

		if(GetVehicleParams(vehicleid, VEHICLE_TYPE_BOOT) != 1)
		    return SendError(playerid, "Toto vozidlo nemá otvorený kufor!");

		if(GetVehicleFactionType(vehicleid) == FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
		{
			switch(GetVehicleModel(vehicleid))
			{
			    case
			        596,
			        597,
			        598,
			        599:
				{
				    return SendError(playerid, "Nemôe manipulova s kufrom policajného auta!");
				}
			}
			//return SendError(playerid, "Nemôe manipulova s kufrom policajného auta!");
		}

		InfoBox(playerid, INFOBOX_INFO, "Môe poui aj /mrtvola kufor!");
		ShowPlayerVehicleInventory(playerid, vehicleid);
	}
	else
	    return SendClientSyntax(playerid, "/kufor [otvorit/zatvorit/obsah/satna] <emócie>");

	return 1;
}

YCMD:kapota(playerid, params[], help)
{

	new
	    S_var[12],
	    S_emotions[128];

	if(sscanf(params, "s[12] S()[128]", S_var, S_emotions))
		return SendClientSyntax(playerid, "/kapota [otvorit/zatvorit/motor/bateria/olej] <emócie>");

	new
	    vehicleid = -1,
	    Float:distance = 3.5,
	    Float:newdist = 0.0,

		Float:Pos[3],
		Float:vPos[3];

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	foreach ( new i : Vehicle )
	{
	    if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i))
	        continue;

		if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i))
		    continue;

		GetVehicleHood(i, vPos[0], vPos[1], vPos[2]);

		newdist = GetDistanceFromPoint(vPos[0], vPos[1], vPos[2], Pos[0], Pos[1], Pos[2]);

		if(newdist < distance)
		{
		    vehicleid = i;
		    distance = newdist;
		}

		continue;
	}

	if(!strcmp(S_var, "otvorit", true))
	{
		if(vehicleid == -1)
		    return SendError(playerid, "Nestojí pri kapote iadneho vozidla!");

		if(GetVehicleParams(vehicleid, VEHICLE_TYPE_BONNET) != 1)
		{
		    if(GetVehicleParams(vehicleid, VEHICLE_TYPE_DOORS) == 1)
		        return SendError(playerid, "Toto vozidlo je zamknuté!");

            if(strlen(S_emotions) < 10)
		        return SendError(playerid, "Zadané emócie sú moc krátke!");

			new
			    S_string[144];

			format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_emotions);
			SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_string);

		    SetVehicleParams(vehicleid, VEHICLE_TYPE_BONNET, 1);
		}
		else
			return SendError(playerid, "Toto vozidlo má otvorenú kapotu!");
	}
	else if(!strcmp(S_var, "zatvorit", true))
	{
		if(vehicleid == -1)
		    return SendError(playerid, "Nie je tu iadne vozidlo!");

		if(GetVehicleParams(vehicleid, VEHICLE_TYPE_BONNET) == 1)
		{
            if(strlen(S_emotions) < 10)
		        return SendError(playerid, "Zadané emócie sú moc krátke!");

			new
			    S_string[144];

			format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_emotions);
			SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_string);

		    SetVehicleParams(vehicleid, VEHICLE_TYPE_BONNET, 0);
		}
		else
			return SendError(playerid, "Toto vozidlo má zatvorenú kapotu!");
	}
	else if(!strcmp(S_var, "motor", true))
	{
		if(vehicleid == -1)
		    return SendError(playerid, "Nie je tu iadne vozidlo!");

		if(GetVehicleParams(vehicleid, VEHICLE_TYPE_BONNET) == 1)
		{
            if(strlen(S_emotions) > 0)
			{
				new
				    S_string[144];

				format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_emotions);
				SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_string);
			}

		    new
	   		    palivo[12];

			switch(vEnum[vehicleid][v_FuelType])
			{

	            case 0:
					format(palivo, sizeof palivo, "nemá");

	            case 1:
					format(palivo, sizeof palivo, "benzín");

	            case 2:
					format(palivo, sizeof palivo, "diesel");

	            case 3:
					format(palivo, sizeof palivo, "kerosin");

	            case 4:
					format(palivo, sizeof palivo, "LPG");
			}

			SCFM(playerid, COLOR_GREEN, "> {ffffff}Toto vozidlo má %d litrov paliva, natankovaný je %s!", vEnum[vehicleid][v_Fuel], palivo);

	   		switch(vehicleFuelTypes[GetVehicleModel(vehicleid)-400])
			{

	            case 0:
					format(palivo, sizeof palivo, "nemá");

	            case 1:
					format(palivo, sizeof palivo, "benzín");

	            case 2:
					format(palivo, sizeof palivo, "diesel");

	            case 3:
					format(palivo, sizeof palivo, "kerosin");

	            case 4:
					format(palivo, sizeof palivo, "LPG");
			}

			SCFM(playerid, COLOR_GREEN, "> {ffffff}Do tohoto vozidla patrí %s!", palivo);
		}
		else
			return SendError(playerid, "Toto vozidlo má zatvorenú kapotu!");
	}
	else if(!strcmp(S_var, "bateria", true))
	{
		if(vehicleid == -1)
		    return SendError(playerid, "Nie je tu iadne vozidlo!");

		if(GetPlayerInventoryItem(playerid, inv_carBattery) < 1)
		    return SendError(playerid, "Nemá v inventári autobatériu!");

		if(GetVehicleParams(vehicleid, VEHICLE_TYPE_BONNET) == 1)
		{

			if(strlen(S_emotions) < 15)
			    return SendError(playerid, "pecifikuj prosím emócie (15+ znakov) o tom, ako vymieòa autobatériu!");

            new
  				S_string[144];

			format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_emotions);
			SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_string);

			SetPlayerInventoryItem(playerid, inv_carBattery, GetPlayerInventoryItem(playerid, inv_carBattery) - 1);

			vEnum[vehicleid][v_Battery] = 1000;

			EnterInfo(playerid, "Bateria v aute vymenena!", 5000, 1);

		}
		else
			return SendError(playerid, "Toto vozidlo má zatvorenú kapotu!");
	}
	else if(!strcmp(S_var, "olej", true))
	{
		if(vehicleid == -1)
		    return SendError(playerid, "Nie je tu iadne vozidlo!");

		if(GetPlayerInventoryItem(playerid, inv_carOil) < 1 && !IsPlayerInDynamicMenu(playerid, menut_autodielna))
		    return SendError(playerid, "Nemá v inventári f¾au motorového oleja!");

		if(GetVehicleParams(vehicleid, VEHICLE_TYPE_BONNET) == 1)
		{

			if(strlen(S_emotions) < 15)
			    return SendError(playerid, "pecifikuj prosím emócie (15+ znakov) o tom, ako vymieòa motorový olej!");

            new
  				S_string[144];

			format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_emotions);
			SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_string);

			if(!IsPlayerInDynamicMenu(playerid, menut_autodielna))
				SetPlayerInventoryItem(playerid, inv_carOil, GetPlayerInventoryItem(playerid, inv_carOil) - 1);

			vEnum[vehicleid][v_Oil] = 100.0;

			EnterInfo(playerid, "Olej v aute vymeneny!", 5000, 1);

		}
		else
			return SendError(playerid, "Toto vozidlo má zatvorenú kapotu!");
	}
	else
	    return SendClientSyntax(playerid, "/kapota [otvorit/zatvorit/motor/bateria/olej] <emócie>");

	return 1;
}

YCMD:reloadvattach(playerid, params[], help)
{
	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesedí v iadnom vozidle!");

	new
	    vid = GetPlayerVehicleID(playerid);

	RemoveAttachObj(vid);
	VehAttachObj(vid);

	new
	    S_string[128];

	format(S_string, 128, "> %s znovu-naèítal objekty na vozidle %s!", GetPlayerNameEx(playerid, USE_MASK), GetVehicleName(vid));
	SendLocalMessage(playerid,30.0,COLOR_GREY,S_string);

	FormatWarnEx(playerid,2, "AttachWarn:", COLOR_ADMIN_DEATHWARN, "%s resetoval objekty na vozidle %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetVehicleName(vid));

	return 1;
}

YCMD:fvehicle(playerid, params[], help)
{
	if(GetPlayerFactionRank(playerid) < 9)
	    return SendClientCantUseCommand(playerid);

	new
	    vid = GetPlayerVehicleID(playerid),
	    S_var[35],
		I_var;

	if(sscanf(params, "s[35] D(-1)", S_var, I_var))
	{
		SendClientSyntax(playerid, "/fvehicle (/fveh) [info - factionize - setspawn - destroy - list]");
		SendClientSyntax(playerid, "Factionize: Zmení tvoje súkromné auto na frakèné, nedá sa vráti.");
		SendClientSyntax(playerid, "Setspawn: Nastaví pozíciu spawnu vozidla.");
		SendClientSyntax(playerid, "Destroy: Natrvalo zmae auto z databáze a zo serveru.");
		SendClientSyntax(playerid, "List: Zobrazí list frakèných aut tvojej frakcie.");
	    return 1;
	}

	if(!strcmp(S_var, "factionize", true))
	{
	    if(GetPlayerFactionRank(playerid) < 9)
	        return SendError(playerid, "Na túto akciu potrebuje vo frakcii aspoò rank 9!");
	
	    if(vid == 0)
	        return SendError(playerid, "Nesedí v iadnom vozidle!");
	
	    if(strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
	        return SendError(playerid, "Toto vozidlo nevlastní!");
	        
		if(vEnum[vid][v_bazar_BoughtFor] != 0)
		    return SendError(playerid, "Toto vozidlo je bazarove, pouzi /bazar!");

		if(GetPlayerFactionType(playerid) == FACTION_TYPE_LAW || GetPlayerFactionType(playerid) == FACTION_TYPE_FIRE || GetPlayerFactionType(playerid) == FACTION_TYPE_GOV)
		{
			if(I_var == -1)
			{
			    SendClientSyntax(playerid, "/fvehicle (/fveh) factionize [siréna 0/1]]");
	   			SendClientSyntax(playerid, "0: Zvuková siréna (zatrúbením) na vozidle nebude.");
	   			return SendClientSyntax(playerid, "1: Zvuková siréna (zatrúbením) na vozidle bude.");
			}
		}
		else I_var = 0;

        vEnum[vid][v_Temporary] = true;

		format(vEnum[vid][v_Owner], 30, "-");
		format(vEnum[vid][v_SecOwner], 30, "-");
		vEnum[vid][v_Siren] = I_var;
		vEnum[vid][v_Faction] = GetPlayerFaction(playerid);

		SetVehicleParams(vid, VEHICLE_TYPE_DOORS, 0);

		new
			Float:Pos[4];

		GetVehiclePos(vid, Pos[0], Pos[1], Pos[2]);
		GetVehicleZAngle(vid, Pos[3]);

		vEnum[vid][v_def_SpawnX] = Pos[0];
		vEnum[vid][v_def_SpawnY] = Pos[1];
		vEnum[vid][v_def_SpawnZ] = Pos[2];
		vEnum[vid][v_def_SpawnA] = Pos[3];
		vEnum[vid][v_def_SpawnVW] = GetPlayerVirtualWorld(playerid);
		vEnum[vid][v_def_SpawnINT] = GetPlayerInterior(playerid);
		vEnum[vid][v_def_Health] = 1000.0;

        new
			S_query[1024],
			Cache:query;

		mysql_format(MYSQL, S_query, 1024, "DELETE FROM char_vehicles WHERE SPZ = '%e'", vEnum[vid][v_SPZ]);
		mysql_query(MYSQL, S_query, false);

		mysql_format(MYSQL, S_query, 1024, "SELECT * FROM faction_vehicles WHERE SPZ = '%e'", vEnum[vid][v_SPZ]);
		query = mysql_query(MYSQL, S_query);

		if(cache_num_rows() > 0)
		{

		    cache_delete(query);

		    new
		        VirtualWorld = GetVehicleVirtualWorld(GetPlayerVehicleID(playerid)),
		        Interiors = ex_GetVehicleInterior(GetPlayerVehicleID(playerid)),
		        Faction = GetVehicleFaction(GetPlayerVehicleID(playerid)),
		        Siren = vEnum[GetPlayerVehicleID(playerid)][v_Siren],
		        Float:def_Health = vEnum[GetPlayerVehicleID(playerid)][v_def_Health];

	        mysql_format(MYSQL, S_query, 1024, "UPDATE faction_vehicles SET X = '%f', Y = '%f', Z = '%f', Angle = '%f', VirtualWorld = '%d', Interior = '%d', Siren = '%d', Faction = '%d', def_Health = '%f' WHERE SPZ = '%e'",
	   			Pos[0], Pos[1], Pos[2], Pos[3], VirtualWorld, Interiors, Siren, Faction, def_Health, vEnum[vid][v_SPZ]);

			query = mysql_query(MYSQL, S_query);

			cache_delete(query);
		}
		else
		{
		    new
				Model = GetVehicleModel(vid),
		        VirtualWorld = GetVehicleVirtualWorld(vid),
			   	Interiors = vehicleData[vid][gVeh_Interior],
		        Faction = GetVehicleFaction(vid),
		        Siren = vEnum[vid][v_Siren],
		        Float:def_Health = vEnum[vid][v_def_Health];

			mysql_format(MYSQL, S_query, 1024, "INSERT INTO faction_vehicles (SPZ, Model, X, Y, Z, Angle, VirtualWorld, Interior, Siren, Faction, def_Health) VALUES ('%e', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%f')",
			    vEnum[vid][v_SPZ], Model, Pos[0], Pos[1], Pos[2], Pos[3], VirtualWorld, Interiors, Siren, Faction, def_Health);
			query = mysql_query(MYSQL, S_query);
			cache_delete(query);
		}

		SCFM(playerid, 0xD0D0D0FF, "> Uloil si frakèné vozidlo %s! ID: %d, frakcia: %d, ivot vozidla: %.1fHP.", vEnum[vid][v_SPZ], vid, GetVehicleFaction(vid), vEnum[vid][v_def_Health]);
		FormatLog(log_type_other, "%s(%s - %s) premenil svoje osobne vozidlo %s na frakcne pre frakciu ID %d.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), vEnum[vid][v_SPZ], GetPlayerFaction(playerid));

	}
	else if(!strcmp(S_var, "setspawn", true))
	{
	    if(vid == 0)
	        return SendError(playerid, "Nesedí v iadnom vozidle!");
	        
        if(vEnum[vid][v_bazar_BoughtFor] != 0)
		    return SendError(playerid, "Toto vozidlo je bazarove, pouzi /bazar!");
	
	    if(GetVehicleFaction(vid) != GetPlayerFaction(playerid) || GetVehicleFaction(vid) == 0)
	        return SendError(playerid, "Toto vozidlo nie je tvojej frakcie!");

        new
			S_query[1024],
			Cache:query;

        new
			Float:Pos[4];

		GetVehiclePos(vid, Pos[0], Pos[1], Pos[2]);
		GetVehicleZAngle(vid, Pos[3]);
		
		vEnum[vid][v_def_SpawnX] = Pos[0];
		vEnum[vid][v_def_SpawnY] = Pos[1];
		vEnum[vid][v_def_SpawnZ] = Pos[2];
		vEnum[vid][v_def_SpawnA] = Pos[3];
		vEnum[vid][v_def_SpawnVW] = GetPlayerVirtualWorld(playerid);
		vEnum[vid][v_def_SpawnINT] = GetPlayerInterior(playerid);
		vEnum[vid][v_def_Health] = 1000.0;

		mysql_format(MYSQL, S_query, 1024, "SELECT * FROM faction_vehicles WHERE SPZ = '%e'", vEnum[vid][v_SPZ]);
		query = mysql_query(MYSQL, S_query);

		if(cache_num_rows() > 0)
		{

		    cache_delete(query);

		    new
		        VirtualWorld = GetVehicleVirtualWorld(GetPlayerVehicleID(playerid)),
		        Interiors = ex_GetVehicleInterior(GetPlayerVehicleID(playerid)),
		        Faction = GetVehicleFaction(GetPlayerVehicleID(playerid)),
		        Siren = vEnum[GetPlayerVehicleID(playerid)][v_Siren],
		        Float:def_Health = vEnum[GetPlayerVehicleID(playerid)][v_def_Health];

	        mysql_format(MYSQL, S_query, 1024, "UPDATE faction_vehicles SET X = '%f', Y = '%f', Z = '%f', Angle = '%f', VirtualWorld = '%d', Interior = '%d', Siren = '%d', Faction = '%d', def_Health = '%f' WHERE SPZ = '%e'",
	   			Pos[0], Pos[1], Pos[2], Pos[3], VirtualWorld, Interiors, Siren, Faction, def_Health, vEnum[vid][v_SPZ]);

			query = mysql_query(MYSQL, S_query);

			cache_delete(query);
		}
		else
		{
		    new
				Model = GetVehicleModel(vid),
		        VirtualWorld = GetVehicleVirtualWorld(vid),
			   	Interiors = vehicleData[vid][gVeh_Interior],
		        Faction = GetVehicleFaction(vid),
		        Siren = vEnum[vid][v_Siren],
		        Float:def_Health = vEnum[vid][v_def_Health];

			mysql_format(MYSQL, S_query, 1024, "INSERT INTO faction_vehicles (SPZ, Model, X, Y, Z, Angle, VirtualWorld, Interior, Siren, Faction, def_Health) VALUES ('%e', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%f')",
			    vEnum[vid][v_SPZ], Model, Pos[0], Pos[1], Pos[2], Pos[3], VirtualWorld, Interiors, Siren, Faction, def_Health);
			query = mysql_query(MYSQL, S_query);
			cache_delete(query);
		}

        SCFM(playerid, 0xD0D0D0FF, "> Upravil si spawn frakèného vozidla %s! ID: %d, frakcia: %d, ivot vozidla: %.1fHP.", vEnum[vid][v_SPZ], vid, GetVehicleFaction(vid), vEnum[vid][v_def_Health]);
		FormatLog(log_type_other, "%s(%s - %s) upravil spawn poziciu frakcneho vozidla %s frakcia id %d.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), vEnum[vid][v_SPZ], GetPlayerFaction(playerid));
	}
	else if(!strcmp(S_var, "destroy", true))
	{
	    if(vid == 0)
	        return SendError(playerid, "Nesedí v iadnom vozidle!");
	        
        if(vEnum[vid][v_bazar_BoughtFor] != 0)
		    return SendError(playerid, "Toto vozidlo je bazarove, pouzi /bazar!");
	
	    if(GetVehicleFaction(vid) != GetPlayerFaction(playerid) || GetVehicleFaction(vid) == 0)
	        return SendError(playerid, "Toto vozidlo nie je tvojej frakcie!");

        new
		    S_query[256];

		mysql_format(MYSQL, S_query, 256, "DELETE FROM faction_vehicles WHERE SPZ = '%e'",
			vEnum[GetPlayerVehicleID(playerid)][v_SPZ]);

		new
		    Cache:quer = mysql_query(MYSQL, S_query);
		cache_delete(quer);

		SCFM(playerid, 0xD0D0D0FF, "> Zmazal si frakèné vozidlo %s! ID: %d, frakcia: %d.", vEnum[GetPlayerVehicleID(playerid)][v_SPZ], GetPlayerVehicleID(playerid), GetVehicleFaction(GetPlayerVehicleID(playerid)));

        UpdateFactionVehicleUnit(vid, "", false, false);

		FormatWarnEx(playerid,3, "PlayerCmd:", COLOR_ADMINCMD, "%s zmazal frakèné vozidlo %s. (id %d, frakcia %d)", GetPlayerNameEx(playerid, USE_PUREIDNAME), vEnum[GetPlayerVehicleID(playerid)][v_SPZ], GetPlayerVehicleID(playerid), GetVehicleFaction(GetPlayerVehicleID(playerid)));
		FormatLog(log_type_admin, "%s(%s) zmazal frakcne vozidlo %s. (id %d, frakcia %d)", ReturnMaster(playerid), ReturnIP(playerid), vEnum[GetPlayerVehicleID(playerid)][v_SPZ], GetPlayerVehicleID(playerid), GetVehicleFaction(GetPlayerVehicleID(playerid)));

		for(new i; vehicle_Enum:i < vehicle_Enum; i++) {
			vEnum[GetPlayerVehicleID(playerid)][vehicle_Enum:i] = 0;
		}

        RemoveAttachObj(GetPlayerVehicleID(playerid));
		DestroyVehicle(GetPlayerVehicleID(playerid));
	}
	else if(!strcmp(S_var, "info", false))
	{
	
	    if(vid == 0)
	        return SendError(playerid, "Nesedí v iadnom vozidle!");
	        
        if(vEnum[vid][v_bazar_BoughtFor] != 0)
		    return SendError(playerid, "Toto vozidlo je bazarove, pouzi /bazar!");

	    if(GetVehicleFaction(vid) != GetPlayerFaction(playerid) || GetVehicleFaction(vid) == 0)
	        return SendError(playerid, "Toto vozidlo nie je tvojej frakcie!");

	    new
		    string[1024],
		    tString[256];

        format(tString, 256, "{FFFFFF}> Vozidlo: {e34f4f}%s\n", GetVehicleName(vid));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> SPZ: {e34f4f}%s\n", vEnum[vid][v_SPZ]);
   		strcat(string, tString);

		if(GetVehicleFaction(vid) != 0)
		{
		    format(tString, 256, "{FFFFFF}> Majitel: {e34f4f}%s\n", factEnum[GetVehicleFaction(vid)][fact_Name]);
		    strcat(string, tString);
		}
		else
		{
		    format(tString, 256, "{FFFFFF}> Majitel: {e34f4f}%s\n", vEnum[vid][v_Owner]);
		    strcat(string, tString);

		    format(tString, 256, "{FFFFFF}> Druhé klúèe má: {e34f4f}%s\n", vEnum[vid][v_SecOwner]);
		    strcat(string, tString);
		}

		new
   		    palivo[12];

		switch(vEnum[vid][v_FuelType])
		{

            case 0:
				format(palivo, sizeof palivo, "nemá");

            case 1:
				format(palivo, sizeof palivo, "benzín");

            case 2:
				format(palivo, sizeof palivo, "diesel");

            case 3:
				format(palivo, sizeof palivo, "kerosin");

            case 4:
				format(palivo, sizeof palivo, "LPG");
		}

		format(tString, 256, "{FFFFFF}> Palivo: {e34f4f}%d%% (%s)\n", vEnum[vid][v_Fuel], palivo);
   		strcat(string, tString);

   		switch(vehicleFuelTypes[GetVehicleModel(vid)-400])
		{

            case 0:
				format(palivo, sizeof palivo, "nemá");

            case 1:
				format(palivo, sizeof palivo, "benzín");

            case 2:
				format(palivo, sizeof palivo, "diesel");

            case 3:
				format(palivo, sizeof palivo, "kerosin");

            case 4:
				format(palivo, sizeof palivo, "LPG");
		}

   		format(tString, 256, "{FFFFFF}> Jazdí na palivo: {e34f4f}%s\n", palivo);
   		strcat(string, tString);

   		format(tString, 256, "{FFFFFF}> Batéria: {e34f4f}%d%%\n", vEnum[vid][v_Battery]);
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Stav oleja: {e34f4f}%.0f %%\n", vEnum[vid][v_Oil]);
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Najazdené: {e34f4f}%.3f MI\n", vEnum[vid][v_MileAge]);
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Nitro: {e34f4f}%.1f\n", vEnum[vid][v_Nitrous]);
   		strcat(string, tString);

   		format(tString, 256, "{FFFFFF}> Taxameter: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_TaxameterItem]));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Titanové zámky: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_NoBreakin]));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Nepriestrelné okná: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_TitWindows]));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Autorádio: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_CarRadio]));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Alarm: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_AlarmItem]));
   		strcat(string, tString);

		ShowPlayerDialog(playerid, did_vehinfo, DIALOG_STYLE_MSGBOX, "VOZIDLO", string, "OK", "");
	}
	else if(!strcmp(S_var, "list", false))
	{
		new
		    query[ 256 ]
		;

		mysql_format(MYSQL, query, sizeof query, "SELECT * FROM faction_vehicles WHERE Faction = '%d'", GetPlayerFaction(playerid));
		mysql_tquery(MYSQL, query, "OnFactionVehicleList", "d", playerid);
	}
	else
	{
	    SendClientSyntax(playerid, "/fvehicle (/fveh) [info - factionize - setspawn - destroy]");
		SendClientSyntax(playerid, "Factionize: Zmení tvoje súkromné auto na frakèné, nedá sa vráti.");
		SendClientSyntax(playerid, "Setspawn: Nastaví pozíciu spawnu vozidla.");
		SendClientSyntax(playerid, "Destroy: Natrvalo zmae auto z databáze a zo serveru.");
	    return 1;
	}
	return 1;
}

function OnFactionVehicleList(playerid)
{
	new
	    SPZ[ 36 ],
	    Model,
	    UnitText[ 35 ],
	    string[ 1024 ] = "Model vozidla\tPoznávacia znaèka\tJednotka\n",
	    tstr[ 64 ]
	;

	for(new i; i < cache_num_rows(); i++) {
	    cache_get_value_name(i, "SPZ", SPZ);
	    cache_get_value_name(i, "UnitText", UnitText);
	    cache_get_value_name_int(i, "Model", Model);

	    format(tstr, sizeof tstr, "%s\t%s\t%s\n", VehicleNames[Model-400], SPZ, UnitText);
		strcat(string, tstr);
	}

	ShowPlayerDialog(playerid, did_Null, DIALOG_STYLE_TABLIST_HEADERS, "FRAKÈNÉ VOZIDLÁ", string, "OK", "");

	return 1;
}

YCMD:vehicle(playerid, params[], help)
{
	new
	    S_var[24],
	    S_var1[24];

	if(sscanf(params,"s[24] S()[24]", S_var, S_var1))
	{
		SendClientSyntax(playerid, "/(veh)icle [pouitie]");
	    return SendClientSyntax(playerid, "pouitie [info - park - buypark (500$) - spawn(get)]");
	}

	if(!strcmp(S_var, "info", true))
	{
        if(!IsPlayerInAnyVehicle(playerid))
		    return SendError(playerid, "Nesedí v iadnom vozidle!");

		if(GetPlayerAdminLevel(playerid) < 4 && (strcmp(vEnum[GetPlayerVehicleID(playerid)][v_Owner], ReturnName(playerid), false) && strcmp(vEnum[GetPlayerVehicleID(playerid)][v_SecOwner], ReturnName(playerid), false)))
		    return SendError(playerid, "Od tohoto vozidla nemá k¾úèe!");

		new
		    string[1024],
		    tString[256],

			vid = GetPlayerVehicleID(playerid);

        format(tString, 256, "{FFFFFF}> Vozidlo: {e34f4f}%s\n", GetVehicleName(vid));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> SPZ: {e34f4f}%s\n", vEnum[vid][v_SPZ]);
   		strcat(string, tString);

		if(GetVehicleFaction(vid) != 0)
		{
		    format(tString, 256, "{FFFFFF}> Majitel: {e34f4f}%s\n", factEnum[GetVehicleFaction(vid)][fact_Name]);
		    strcat(string, tString);
		}
		else
		{
		    format(tString, 256, "{FFFFFF}> Majitel: {e34f4f}%s\n", vEnum[vid][v_Owner]);
		    strcat(string, tString);

		    format(tString, 256, "{FFFFFF}> Druhé klúèe má: {e34f4f}%s\n", vEnum[vid][v_SecOwner]);
		    strcat(string, tString);
		}

		new
   		    palivo[12];

		switch(vEnum[vid][v_FuelType])
		{

            case 0:
				format(palivo, sizeof palivo, "nemá");

            case 1:
				format(palivo, sizeof palivo, "benzín");

            case 2:
				format(palivo, sizeof palivo, "diesel");

            case 3:
				format(palivo, sizeof palivo, "kerosin");

            case 4:
				format(palivo, sizeof palivo, "LPG");
		}

		format(tString, 256, "{FFFFFF}> Palivo: {e34f4f}%d%% (%s)\n", vEnum[vid][v_Fuel], palivo);
   		strcat(string, tString);

   		switch(vehicleFuelTypes[GetVehicleModel(vid)-400])
		{

            case 0:
				format(palivo, sizeof palivo, "nemá");

            case 1:
				format(palivo, sizeof palivo, "benzín");

            case 2:
				format(palivo, sizeof palivo, "diesel");

            case 3:
				format(palivo, sizeof palivo, "kerosin");

            case 4:
				format(palivo, sizeof palivo, "LPG");
		}

   		format(tString, 256, "{FFFFFF}> Jazdí na palivo: {e34f4f}%s\n", palivo);
   		strcat(string, tString);

   		format(tString, 256, "{FFFFFF}> Batéria: {e34f4f}%d%%\n", vEnum[vid][v_Battery]);
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Stav oleja: {e34f4f}%.0f %%\n", vEnum[vid][v_Oil]);
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Najazdené: {e34f4f}%.3f MI\n", vEnum[vid][v_MileAge]);
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Nitro: {e34f4f}%.1f\n", vEnum[vid][v_Nitrous]);
   		strcat(string, tString);

   		format(tString, 256, "{FFFFFF}> Taxameter: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_TaxameterItem]));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Titanové zámky: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_NoBreakin]));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Nepriestrelné okná: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_TitWindows]));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Autorádio: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_CarRadio]));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Alarm: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_AlarmItem]));
   		strcat(string, tString);

		ShowPlayerDialog(playerid, did_vehinfo, DIALOG_STYLE_MSGBOX, "VOZIDLO", string, "OK", "");
	}
	else if(!strcmp(S_var, "park", true))
	{

	    if(!IsPlayerInAnyVehicle(playerid))
		    return SendError(playerid, "Nesedí v iadnom vozidle!");

		if(GetPlayerAdminLevel(playerid) < 4 && (strcmp(vEnum[GetPlayerVehicleID(playerid)][v_Owner], ReturnName(playerid), false) && strcmp(vEnum[GetPlayerVehicleID(playerid)][v_SecOwner], ReturnName(playerid), false)))
		    return SendError(playerid, "Od tohoto vozidla nemá k¾úèe!");

		switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
		{
			case
				481,
				509,
				510:
			{
			    GetVehiclePos(GetPlayerVehicleID(playerid), vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnX], vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnY], vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnZ]);
				GetVehicleZAngle(GetPlayerVehicleID(playerid), vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnA]);

				vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnVW] = GetPlayerVirtualWorld(playerid);
				vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnINT] = GetPlayerInterior(playerid);
			}
		}

	    if(!IsPlayerInRangeOfPoint(playerid, 4.0, vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnX], vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnY], vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnZ])
			|| GetPlayerVirtualWorld(playerid) != vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnVW]
			|| GetPlayerInterior(playerid) != vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnINT])
	    {

	        if(GetPlayerVirtualWorld(playerid) != vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnVW] || GetPlayerInterior(playerid) != vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnINT])
	            return SendError(playerid, "Nestojí na parkovacom mieste!");

	        //Hráè nie je pri parkovacom mieste.
	        g_I_playerCheckpoint[playerid] = checkp_vehicle_parkspot;
			fix_SetPlayerCheckpoint(playerid, vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnX], vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnY], vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnZ], 4.0);

			return SCFM(playerid, 0x6699ccff, "> {FFFFFF}Nestojí na parkovacom mieste, bolo ti oznaèené na mape!");
		}

	   	SavePlayerVehicle(GetPlayerVehicleID(playerid), 1);

		SCFM(playerid, 0x6699ccff, "> {FFFFFF}Zaparkoval si vozidlo {e34f4f}%s{ffffff}!", VehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
	}
	else if(!strcmp(S_var, "buypark", true))
	{

	    if(!IsPlayerInAnyVehicle(playerid))
		    return SendError(playerid, "Nesedí v iadnom vozidle!");

		switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
		{
		    case
		        48,
		        509,
		        510:
			{
			    return SendError(playerid, "Pre bicykel nemusí kupova miesto, hocikde poui /(veh)icle park!");
			}
		}

		if(GetPlayerAdminLevel(playerid) < 4 && (strcmp(vEnum[GetPlayerVehicleID(playerid)][v_Owner], ReturnName(playerid), false) && strcmp(vEnum[GetPlayerVehicleID(playerid)][v_SecOwner], ReturnName(playerid), false)))
		    return SendError(playerid, "Od tohoto vozidla nemá k¾úèe!");

	    if(ex_GetPlayerMoney(playerid) < 500)
	        return SCFM(playerid, 0x6699ccff, "> {FFFFFF}Nemá {e34f4f}500$ {ffffff}na kúpenie nového parkovacieho miesta!");

       	SCFM(playerid, 0x6699ccff, "> {FFFFFF}Kúpil si nové parkovacie miesto pre vozidlo {e34f4f}%s {ffffff} za {e34f4f}500${ffffff}!", VehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);

		GetVehiclePos(GetPlayerVehicleID(playerid), vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnX], vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnY], vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnZ]);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnA]);

		vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnVW] = GetPlayerVirtualWorld(playerid);
		vEnum[GetPlayerVehicleID(playerid)][v_def_SpawnINT] = GetPlayerInterior(playerid);

		ex_GivePlayerMoney(playerid, -500);
		money_spent[playerid]+=floatround(500,floatround_round);
	}
	else if(!strcmp(S_var, "spawn", true) || !strcmp(S_var, "get", true))
	{
		ShowPlayerVehicleGet(playerid);
	}
	else
	{
	    SendClientSyntax(playerid, "/(veh)icle [pouitie]");
	    return SendClientSyntax(playerid, "pouitie [info - park - buypark (500$) - spawn(get)]");
	}
	return 1;
}

YCMD:report(playerid, params[], help)
{

	new
	    I_var,
		S_var[128];

	if(sscanf(params, "ds[128]", I_var, S_var))
		return SendClientSyntax(playerid, "/report [id] [otázka]");

	MaskToId(I_var);

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(GetPlayerAdminLevel(I_var))
	    return SendError(playerid, "Nemôe poda report na èlena tímu, zoeò si evidenciu a podaj fórum report!");

	SCFM(playerid, COLOR_PURPLE, "[ REPORT ] {ffffff}Odoslal si report na hráèa %s s dôvodom: '%s'!", GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	FormatWarn(playerid, "REPORT -", COLOR_PURPLE, "{ffffff}%s na %s: %s", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	return 1;
}

YCMD:assistance(playerid, params[], help)
{

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
	{

	    if(hasDotaz[playerid] == true)
		{

		    if(gettime() < dotaz_Time[playerid] + 10)
				return SendError(playerid, "Musí poèka aspoò 10 sekúnd od podania otázky predtým, ako ju zruí.");

			SCFM(playerid, COLOR_PURPLE, "[ ASSIST ] {ffffff}Zruil si svoju otázku!");

	  		FormatWarn(playerid, "ASSIST -", COLOR_PURPLE, "{ffffff}ID %d zruil assist: %s", playerid, dotaz_String[playerid]);
			FormatLog(log_type_assist, "%s(%s - %s) zrusil otazku: %s",ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), dotaz_String[playerid]);

			hasDotaz[playerid] = false;
			dotaz_Time[playerid] = 0;
			dotaz_Conv[playerid] = 0;

			format(dotaz_String[playerid], 128, "");

			new
				ac = GetAssistCount(),
				str[128];

			format(str, 128, "%d ziadosti", ac);
			TextDrawSetString(TD_ziadosti, str);

			if(ac > 0)
			{
				foreach(new i : Player)
				{
					if(GetPlayerAdminLevel(i) < 1)
						continue;

					if(B_playerAdminDuty[i] == false)
						continue;

					TextDrawShowForPlayer(i, TD_ziadosti);
				}
			}
			else
			{
			    foreach(new i : Player)
				{
					if(GetPlayerAdminLevel(i) < 1)
						continue;

					if(B_playerAdminDuty[i] == false)
						continue;

					TextDrawHideForPlayer(i, TD_ziadosti);
				}
			}

			return 1;
		}

		return SendClientSyntax(playerid, "/(assist)ance (/dotaz) [otázka]");
	}

	if(hasConv[playerid] == true)
		return SendError(playerid, "Momentálne s niekym diskutuje o tvojej otázke.");

	if(hasDotaz[playerid] == true)
	{

	    if(gettime() < dotaz_Time[playerid] + 10)
			return SendError(playerid, "Musí poèka aspoò 10 sekúnd od podania otázky predtým, ako ju zruí.");

		SCFM(playerid, COLOR_PURPLE, "[ ASSIST ] {ffffff}Zruil si svoju otázku!");

  		FormatWarn(playerid, "ASSIST -", COLOR_PURPLE, "{ffffff}ID %d zruil assist: %s", playerid, dotaz_String[playerid]);
		FormatLog(log_type_assist, "%s(%s - %s) zrusil otazku: %s",ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), dotaz_String[playerid]);

		hasDotaz[playerid] = false;
		dotaz_Time[playerid] = 0;
		dotaz_Conv[playerid] = 0;

		format(dotaz_String[playerid], 128, "");

		new
			ac = GetAssistCount(),
			str[128];

		format(str, 128, "%d ziadosti", ac);
		TextDrawSetString(TD_ziadosti, str);

		if(ac > 0)
		{
			foreach(new i : Player)
			{
				if(GetPlayerAdminLevel(i) < 1)
					continue;

				if(B_playerAdminDuty[i] == false)
					continue;

				TextDrawShowForPlayer(i, TD_ziadosti);
			}
		}
		else
		{
		    foreach(new i : Player)
			{
				if(GetPlayerAdminLevel(i) < 1)
					continue;

				if(B_playerAdminDuty[i] == false)
					continue;

				TextDrawHideForPlayer(i, TD_ziadosti);
			}
		}
	}
	else
	{

		SCFM(playerid, COLOR_PURPLE, "[ ASSIST ] {ffffff}Odoslal si otázku, poèkaj, kým sa ti ozve Helper!");

		FormatWarn(playerid, "ASSIST -", COLOR_PURPLE, "{ffffff}ID %d (/aa %d): %s", playerid, playerid, S_var);
		FormatLog(log_type_assist, "%s(%s - %s) odoslal otazku: %s",ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), S_var);

		hasDotaz[playerid] = true;
		dotaz_Time[playerid] = gettime();
		dotaz_Conv[playerid] = 0;
		hasConv[playerid] = false;
		format(dotaz_String[playerid], 128, S_var);

		new
			ac = GetAssistCount(),
			str[128];

		format(str, 128, "%d ziadosti", ac);
		TextDrawSetString(TD_ziadosti, str);

		if(ac > 0)
		{
			foreach(new i : Player)
			{
				if(GetPlayerAdminLevel(i) < 1)
					continue;

				if(B_playerAdminDuty[i] == false)
					continue;

				TextDrawShowForPlayer(i, TD_ziadosti);
			}
		}
		else
		{
		    foreach(new i : Player)
			{
				if(GetPlayerAdminLevel(i) < 1)
					continue;

				if(B_playerAdminDuty[i] == false)
					continue;

				TextDrawHideForPlayer(i, TD_ziadosti);
			}
		}
	}

	return 1;
}

YCMD:answerassistance(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 1)
		return SendError(playerid, "Tento príkaz nemôe poui!");

	new
		I_var;

	if(sscanf(params, "d", I_var))
		return SendClientSyntax(playerid, "/(answerassist)ance (/aa) [id]");

	if(!IsPlayerLogged(I_var))
		return SendError(playerid, "Tento hráè nie je v hre!");

	if(hasDotaz[I_var] == false || I_var == playerid)
		return SendError(playerid, "Nemôe odpoveda sám sebe!");

	if(hasConv[I_var] == true)
		return SendError(playerid, "Tomuto hráèovi u pomáha niekto iný!");

	if(hasConv[playerid] == true)
		return SendError(playerid, "U niekomu pomáha!");

    assistCount[playerid] ++;


	SCFM(playerid, COLOR_PURPLE, "[ ASSIST ] {ffffff}Zaèal si diskusiu o asistencii s %s(%s), po %d sekundách èakania!", ReturnName(I_var), ReturnMaster(I_var), gettime()-dotaz_Time[I_var]);
	SCFM(playerid, COLOR_PURPLE, "[ ASSIST ] {ffffff}Hráèova otázka: %s", dotaz_String[I_var]);
	SCFM(playerid, COLOR_PURPLE, "[ ASSIST ] {ffffff}Pí do diskusie príkazom /(c)onversation [správa], zatvori ju môe príkazom /cancelconversation (/cc)!");

	SCFM(I_var, COLOR_PURPLE, "[ ASSIST ] {ffffff}%s s tebou zaèal diskusiu o asistencii po %d sekundách èakania!", ReturnMaster(playerid), gettime()-dotaz_Time[I_var]);
	SCFM(I_var, COLOR_PURPLE, "[ ASSIST ] {ffffff}Pí do diskusie príkazom /(c)onversation [správa]!");

	FormatWarn(playerid, "ASSIST -", COLOR_PURPLE, "{ffffff}%s odpovedá na assist hráèa ID %d!", ReturnMaster(playerid), I_var);
	FormatLog(log_type_assist, "%s(%s - %s) odpoveda na otazku '%s' od %s((%d) %s - %s)", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), dotaz_String[I_var], ReturnName(I_var), I_var, ReturnMaster(I_var), ReturnIP(I_var));

	hasConv[playerid] = true;
	hasConv[I_var] = true;
	dotaz_Conv[playerid] = I_var;
	dotaz_Conv[I_var] = playerid;

	hasDotaz[I_var] = false;
	dotaz_Time[I_var] = 0;
	format(dotaz_String[I_var], 128, "");

	new
		ac = GetAssistCount(),
		str[128];

	format(str, 128, "%d ziadosti", ac);
	TextDrawSetString(TD_ziadosti, str);

	if(ac > 0)
	{
		foreach(new i : Player)
		{
			if(GetPlayerAdminLevel(i) < 1)
				continue;

			if(B_playerAdminDuty[i] == false)
				continue;

			TextDrawShowForPlayer(i, TD_ziadosti);
		}
	}
	else
	{
	    foreach(new i : Player)
		{
			if(GetPlayerAdminLevel(i) < 1)
				continue;

			if(B_playerAdminDuty[i] == false)
				continue;

			TextDrawHideForPlayer(i, TD_ziadosti);
		}
	}

	return 1;
}

YCMD:conversation(playerid, params[], help)
{

	if(hasConv[playerid] == false)
		return SendError(playerid, "Nevedie s nikým konverzáciu!");

	if(hasConv[dotaz_Conv[playerid]] == false)
	{
		hasConv[playerid] = false;
		dotaz_Conv[playerid] = 0;
		return SendError(playerid, "Nevedie s nikým konverzáciu!");
	}

	new
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
		return SendClientSyntax(playerid, "/(c)onversation [správa]");

	new
		I_var = dotaz_Conv[playerid];

	FormatLog(log_type_assist, "CONV: %s(%s - %s) >>> %s(%s - %s): %s", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnMaster(I_var), ReturnIP(I_var), S_var);

    if(GetPVarInt(dotaz_Conv[playerid], "afk_secs") > 4 || GetPVarInt(dotaz_Conv[playerid], "afk_mins") > 0 || isuserafk[dotaz_Conv[playerid]] == 1) EnterInfo(playerid, "~r~Hrac s ktorym mas konverzaciu je AFK a nemusi odpovedat tak skoro.");

	SCFM(playerid, 0x7ce5e3ff, "(( %s(%d): %s ))", ReturnMaster(playerid),playerid, S_var);
	SCFM(dotaz_Conv[playerid], 0x7ce5e3ff, "(( %s(%d): %s ))", ReturnMaster(playerid),playerid, S_var);
	return 1;
}

YCMD:cancelconversation(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 1)
		return SendError(playerid, "Tento príkaz nemôe poui!");

	if(hasConv[playerid] == false || dotaz_Conv[playerid] == -1)
		return SendError(playerid, "Nevedie s nikým konverzáciu!");

	FormatWarn(playerid, "ASSIST -", COLOR_PURPLE, "{ffffff}%s ukonèil diskusiu s hráèom ID %d!", GetPlayerNameEx(playerid, NO_MASK), dotaz_Conv[playerid]);
	FormatLog(log_type_assist, "%s((%d) %s - %s) ukoncil diskuiu s %s((%d) %s - %s)", ReturnName(playerid), playerid, ReturnMaster(playerid), ReturnIP(playerid), ReturnName(dotaz_Conv[playerid]), dotaz_Conv[playerid], ReturnMaster(dotaz_Conv[playerid]), ReturnIP(dotaz_Conv[playerid]));

	SCFM(playerid, COLOR_PURPLE, "[ ASSIST ] {ffffff}Ukonèil si konverzáciu s %s(%s)!", GetPlayerNameEx(dotaz_Conv[playerid], NO_MASK), ReturnMaster(dotaz_Conv[playerid]));
	SCFM(dotaz_Conv[playerid], COLOR_PURPLE, "[ ASSIST ] {ffffff}%s s tebou ukonèil konverzáciu!", GetPlayerNameEx(playerid, NO_MASK));

	hasConv[dotaz_Conv[playerid]] = false;
	dotaz_Conv[dotaz_Conv[playerid]] = 0;
	hasConv[playerid] = false;
	dotaz_Conv[playerid] = 0;
	return 1;
}

YCMD:ua(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 1)
		return SendError(playerid, "Tento príkaz nemôe poui!");

	SCFM(playerid, COLOR_GREEN2, "> Zoznam aktívnych otázok <");

	FormatWarn(playerid, "AdmCmd:", COLOR_ADMINCMD, "%s si pozrel vetky aktívne asistencie.", ReturnMaster(playerid));

	foreach(new i : Player)
	{
		if(!IsPlayerLogged(i))
			continue;

        if(!hasDotaz[i])
			continue;

		SCFM(playerid, COLOR_GREEN2, "> {ffffff}ID %d (/aa %d): %s", i, i, dotaz_String[i]);
	}
	return 1;
}

YCMD:bram(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(!IsPlayerWorking(playerid))
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(GetPlayerFactionRank(playerid) < 4)
	    return SendError(playerid, "Tento príkaz môe poui od ranku 4!");

    if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Teraz nemôe vyramova biznis!");

	foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
		{
		    if(businessEnum[i][bz_Address] != GetPlayerVirtualWorld(playerid)) continue;
		    if(GetPlayerInterior(playerid) != floatround(intList[businessEnum[i][bz_InteriorID]][5], floatround_round)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, intList[businessEnum[i][bz_InteriorID]][0], intList[businessEnum[i][bz_InteriorID]][1], intList[businessEnum[i][bz_InteriorID]][2])) continue;

			if(businessEnum[i][bz_IsLocked] == 0)
			{
			    FormatLog(log_type_other, "%s(%s) sa pokusil vyramovat business %s(zip: %d).", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
                FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s sa pokúsil vyramova business %s(zip: %d).", ReturnName(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
				SendError(playerid, "Tento biznis je odomknutý!");

			    return 1;
			}
			else
			{
			    FormatLog(log_type_other, "%s(%s) vyramoval business %s(zip: %d).", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
				FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s vyramoval business %s(zip: %d).", ReturnName(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);

				businessEnum[i][bz_IsLocked] = 0;
			    foreach( new x : Player )
				{
				    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
				        continue;

					if(!IsPlayerWorking(x))
					    continue;

					SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s vyramoval business %s!", GetPlayerNameEx(playerid, NO_MASK), businessEnum[i][bz_Name]);
				}
			}

			ReloadBusinessLabel(i);

			return 1;
		}
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

        if(businessEnum[i][bz_IsLocked] == 0)
		{
		    FormatLog(log_type_other, "%s(%s) sa pokusil vyramovat business %s(zip: %d).", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
      		FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s sa pokúsil vyramova business %s(zip: %d).", ReturnName(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
			SendError(playerid, "Tento biznis je odomknutý!");

			return 1;
		}
		else
		{
		    FormatLog(log_type_other, "%s(%s) vyramoval business %s(zip: %d).", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
			FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s vyramoval business %s(zip: %d).", ReturnName(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);

			businessEnum[i][bz_IsLocked] = 0;
   			foreach( new x : Player )
			{
   				if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
       				continue;

				if(!IsPlayerWorking(x))
    				continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s vyramoval business %s!", GetPlayerNameEx(playerid, NO_MASK), businessEnum[i][bz_Name]);
			}
		}

		ReloadBusinessLabel(i);
		return 1;
	}

	SendError(playerid, "Nie je tu iadny biznis!");
	return 1;
}


YCMD:vram(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(!IsPlayerWorking(playerid))
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(GetPlayerFactionRank(playerid) < 4)
	    return SendError(playerid, "Tento príkaz môe poui od ranku 4!");

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Teraz nemôe vyramova vozidlo!");
	else
	{
		new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

		if(GetVehicleParams(vid, VEHICLE_TYPE_DOORS) == 1)
		{

            ex_SetVehicleLocked(vid, false);

			SetVehicleParams(vid, VEHICLE_TYPE_DOORS, 0);

			new str[144]; format(str,144,"~w~Vyramoval si vozidlo ~g~%s~w~!", VehicleNames[GetVehicleModel(vid)-400]);
	        EnterInfo(playerid, str, 5000, 2);

			new
				S_finalString[128 + 25 + 5];

			new S_first[25];
			if(B_playerHasMask[playerid] == false) {
				strcat(S_first, ReturnName(playerid));
				strdel(S_first,strfind(S_first,"_",true),25);
			} else {
				format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

			format(S_finalString, sizeof(S_finalString), "* %s ramuje vozidlo.", S_first);
			BubbleChat(playerid, COLOR_VIOLET, S_finalString);

			SetVehiclesAlarm(vid, 1);

			FormatLog(log_type_other, "%s(%s) vyramoval vozidlo %s(%s).", ReturnName(playerid), ReturnIP(playerid), VehicleNames[GetVehicleModel(vid)-400], vEnum[vid][v_SPZ]);
      		FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s sa vyramoval vozidlo %s(%s).", ReturnName(playerid), VehicleNames[GetVehicleModel(vid)-400], vEnum[vid][v_SPZ]);
            SCFM(playerid, COLOR_LIGHTBLUE2, "[ WARN ] %s vyramoval vozidlo %s(%s)!", GetPlayerNameEx(playerid, NO_MASK), VehicleNames[GetVehicleModel(vid)-400], vEnum[vid][v_SPZ]);
		}
		else
		{
            FormatLog(log_type_other, "%s(%s) sa pokusil vyramovat vozidlo %s(%s).", ReturnName(playerid), ReturnIP(playerid), VehicleNames[GetVehicleModel(vid)-400], vEnum[vid][v_SPZ]);
      		FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s sa pokúsil vyramova vozidlo %s(%s).", ReturnName(playerid), VehicleNames[GetVehicleModel(vid)-400], vEnum[vid][v_SPZ]);
			SendError(playerid, "Toto vozidlo je odomknuté!");

			return 1;
		}

	    PlayerPlaySound(playerid, 24600, ppos[0], ppos[1], ppos[2]);
	}
	return 1;
}

YCMD:prace(playerid, params[], help)
{
	if(IsPlayerInDynamicMenu(playerid, menut_anawalt_praca))
	{
		if(Anawalt::isworking[playerid])
		{
		    Anawalt::isworking[playerid] = false;
			Anawalt::workid[playerid] = ANAWALT_WORK_TYPE_NONE;
			
			ex_GivePlayerMoney(playerid, -200);
			money_spent[playerid] += floatround(200,floatround_round);
			
			SCError(playerid, "Preruil si aktuálnu prácu a zaplatil si poplatok 200$!");
			return 1;
		}
		
		if(GetPlayerFactionType(playerid) != FACTION_TYPE_WOODCUTTER)
		    return SendError(playerid, "Tento príkaz nemôe poui!");
		
	    Anawalt::ShowWorkDialog(playerid);
	    return 1;
	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");
	return 1;
}

YCMD:stopjob(playerid, params[], help)
{
	new success = 0;
	if(Sweeper::StartJob(playerid, true) == 0) 	success = 1;
	if(Pizza::StartJob(playerid, true) == 0) 	success = 1;
	
	if(!success)
	    SendError(playerid, "Momentálne nemá aktívnu iadnu prácu, ktorú môe zrui týmto príkazom!");
	
	return 1;
}

YCMD:pracovat(playerid, params[], help)
{

    switch(g_I_playerCheckpoint[playerid])
	{
		case checkp_brigada_krabicePC_1, checkp_brigada_krabicePC_2,
			checkp_brigada_krabiceMG_1, checkp_brigada_krabiceMG_2:

		{
			return SendError(playerid, "Nemôe si to zapnú, keï robí brigádu!");
		}
	}

	if(IsPlayerInDynamicMenu(playerid, menut_zamestnat_smetiar))
	{

		if(GetPlayerFactionType(playerid) != FACTION_TYPE_TRASHMASTER)
			return SendError(playerid, "Tu nie si zamestnaný!");
			
	    return 1;
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_zamestnat_sweeper))
	{

		if(GetPlayerFactionType(playerid) != FACTION_TYPE_SWEEPER)
			return SendError(playerid, "Tu nie si zamestnaný!");
			
		if(Sweeper::DoingJob[playerid] == true)
		    return SendError(playerid, "U robí prácu, poui prosím /stopjob!");
		    
        if(GetPlayerInventoryItem(playerid, inv_vodicakA) == 0)
            return SendError(playerid, "Na vykonávanie tejto práce potrebuje vodièký preukaz skupiny A!");
			
        Sweeper::StartJob(playerid);

	    return 1;
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_zamestnat_pizzaman))
	{

		if(GetPlayerFactionType(playerid) != FACTION_TYPE_PIZZADELIVERY)
			return SendError(playerid, "Tu nie si zamestnaný!");
			
        if(Pizza::DoingJob[playerid] == true)
		    return SendError(playerid, "U robí prácu, poui prosím /stopjob!");
		    
        if(GetPlayerInventoryItem(playerid, inv_vodicakB) == 0)
            return SendError(playerid, "Na vykonávanie tejto práce potrebuje vodièký preukaz skupiny B,BE!");

        Pizza::StartJob(playerid);

	    return 1;
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_zamestnat_preprava))
	{

		if(GetPlayerFactionType(playerid) != FACTION_TYPE_PREPRAVA)
			return SendError(playerid, "Tu nie si zamestnaný!");

		/*if(Trucking::gWorkEnum[playerid][tworkp_Type] != 0)
		{
		    new
		        vehicleid = Trucking::gWorkEnum[playerid][tworkp_VehicleId],
		        trailerid = Trucking::vWorkEnum[vehicleid][tworkv_TrailerId]
			;

		    Trucking::gWorkEnum[playerid][tworkp_Type] 			= 0;
		    Trucking::gWorkEnum[playerid][tworkp_StartUnix] 	= 0;
		    Trucking::gWorkEnum[playerid][tworkp_ToUnix] 	= 0;
		    Trucking::gWorkEnum[playerid][tworkp_VehicleId] 	= 0;

		    Trucking::vWorkEnum[vehicleid][tworkv_Type] 		= 0;
		    Trucking::vWorkEnum[vehicleid][tworkv_Loaded] 		= 0;
		    Trucking::vWorkEnum[vehicleid][tworkv_TrailerId] 	= 0;
		    Trucking::vWorkEnum[vehicleid][tworkv_State] 		= 0;
		    Trucking::vWorkEnum[vehicleid][tworkv_StartId] 		= 0;
		    Trucking::vWorkEnum[vehicleid][tworkv_FinishId] 	= 0;

		    DestroyVehicle(vehicleid);
		    DestroyVehicle(trailerid);

		    SCFM(playerid, 0xD0D0D0FF, "> Práca zruená, priiel si o jeden level!");

		    SetPlayerFactionRank(playerid, GetPlayerFactionRank(playerid) - 1);

		    if(GetPlayerFactionRank(playerid) < 1)
		        SetPlayerFactionRank(playerid, 1);

		    return 1;
		}

		Trucking::ShowWorkOffering(playerid, GetPlayerFactionRank(playerid));*/

	    return 1;
	}
	else if(IsPlayerInDynamicMenu(playerid, menut_pohrebna_sluzba))
	{
	    if(pohrebnasluzba_lasttime+14400 > gettime())
		    return SendError(playerid, "Momentalne nie je k dispozicii ziadna mrtvola!");
		    
        if(GetPlayerInventoryItem(playerid, inv_vodicakB) == 0)
            return SendError(playerid, "Na vykonávanie tejto práce potrebuje vodièký preukaz skupiny B,BE!");

        pohrebnasluzba_lasttime 			= gettime();
        pohrebnasluzba_isDoing[playerid] 	= true;

        g_I_playerCheckpoint[playerid] 		= checkp_pohrebak1;
        fix_SetPlayerCheckpoint(playerid, 1224.097, 305.928, 19.475, 4.0);

        SCFM(playerid, 0xD0D0D0FF, "> Zaèal si prácu! Zober si pohrebák a choï prevzia màtvolu!");
		SCFM(playerid, 0xD0D0D0FF, "> Poplatok za ukoneènie práce je 200$, ak ich nemá, pôjde do mínusu.");
		SCFM(playerid, 0xD0D0D0FF, "> ");
		SCFM(playerid, 0xD0D0D0FF, "> Kde má prevzia mrtvolu zistí pod¾a èerveného checkpointu na minimape.");
		SCFM(playerid, 0xD0D0D0FF, "> Zaplatené dostane %d$ po dokonèení celej práce!", Economy::GetPrice(ECONOMY_LIST_JOB_HROBAR));
		
		return 1;

	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:vpark(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
		return SendError(playerid, "Tento hráè nie je v hre!");

    new
		vid = -1,
		Float:newdist = 0.0,
		Float:distance = 3.1,
		Float:pos[3],
		Float:ppos[3];

	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

	foreach ( new i : Vehicle ) {
		if(!IsValidVehicle(i)) continue;
		if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
		GetVehiclePos(i, pos[0], pos[1], pos[2]);

		newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

		if(newdist < distance) {
			vid = i;
			distance = newdist;
			continue;
		}
	}

	if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

    SavePlayerVehicle(vid, 1);

    SendSuccess(playerid, "Vozidlo zaparkované!");

	return 1;
}

YCMD:vparkall(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
		return SendError(playerid, "Tento príkaz nemôe poui!");

	foreach ( new i : Vehicle ) {
		if(!IsValidVehicle(i)) continue;
		SavePlayerVehicle(i, 1);
	}

    SendSuccess(playerid, "Vetky vozidlá boli zaparkované!");

    FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s zaparkoval vetky autá na serveri.", GetPlayerNameEx(playerid, USE_PUREIDNAME));
    FormatLog(log_type_admin, "%s(%s) zaparkoval vsetky auta na serveri!", ReturnMaster(playerid), ReturnIP(playerid));

	return 1;
}

YCMD:boombox(playerid, params[], help) {

	new
	    S_var[32],
		I_var;

	if(sscanf(params, "s[32] D(-1)", S_var, I_var))
	    return SendClientSyntax(playerid, "/boombox [polozit - zobrat - naladit - povolenie]");

	if(!strcmp(S_var, "polozit", true))
	{
		if(bb_Placed[playerid] == true)
		    return SendError(playerid, "U si poloil Boombox!");

	    if(GetPlayerInventoryItem(playerid, inv_boomBox) < 1)
	        return SendError(playerid, "Nemá v inventári Boombox!");

        bb_Povolenie[playerid] = -1;

		PlaceBoombox(playerid);
		EnterInfo(playerid, "~w~Polozil si svoj boombox!~n~~w~Nalad hudbu prikazom ~g~/boombox naladit~w~!");
	}
	else if(!strcmp(S_var, "zobrat", true))
	{

	    if(bb_Placed[playerid] == false)
		    return SendError(playerid, "Nepoloil si Boombox!");

	    if(GetPlayerVirtualWorld(playerid) != bb_Worlds[playerid][0])
	        return SendError(playerid, "Nie si pri svojom Boomboxe!");

		if(GetPlayerInterior(playerid) != bb_Worlds[playerid][1])
	        return SendError(playerid, "Nie si pri svojom Boomboxe!");

		if(!IsPlayerInRangeOfPoint(playerid, 3.0, bb_Pos[playerid][0], bb_Pos[playerid][1], bb_Pos[playerid][2]))
		    return SendError(playerid, "Nie si pri svojom Boomboxe!");

        bb_Povolenie[playerid] = -1;

		DestroyBoombox(playerid);
		EnterInfo(playerid, "~w~Vzal si svoj boombox!~n~~w~Mozes ho opat neskor polozit prikazom ~g~/boombox polozit~w~!");
	}
	else if(!strcmp(S_var, "povolenie", true))
	{

	    if(bb_Povolenie[playerid] != -1)
	    {
	        SCFM(playerid, 0xD0D0D0FF, "> Povolenie na pouívanie Boomboxu bolo vetkým odobrané!");
	        SCFM(bb_Povolenie[playerid], 0xD0D0D0FF, "> %s ti odobral povolenie na pouívanie Boomboxu!", GetPlayerNameEx(playerid, USE_MASK));
	        bb_Povolenie[playerid] = -1;
	        return 1;
	    }

	    if(I_var == -1)
	        return SendClientSyntax(playerid, "/boombox povolenie [id]");

		MaskToId(I_var);

		if(!IsPlayerLogged(I_var))
		    return SendError(playerid, "Tento hráè nie je v hre!");

	    if(bb_Placed[playerid] == false)
		    return SendError(playerid, "Nepoloil si Boombox!");

		if(!IsPlayerNearPlayer(playerid, I_var, 3.5))
		    return SendError(playerid, "Tento hráè je moc ïaleko!");

        bb_Povolenie[playerid] = I_var;

		SCFM(playerid, 0xD0D0D0FF, "> Dal si povolenie na pouívanie Boomboxu hráèovi %s!", GetPlayerNameEx(I_var, USE_MASK));
  		SCFM(bb_Povolenie[playerid], 0xD0D0D0FF, "> %s ti dal povolenie na pouívanie Boomboxu!", GetPlayerNameEx(playerid, USE_MASK));
	}
	else if(!strcmp(S_var, "naladit", true))
	{
	    new
		    boomid = -1;

		foreach(new i : Player)
		{
	    	if(bb_Placed[i] == false)
				continue;

		    if(GetPlayerVirtualWorld(playerid) != bb_Worlds[i][0])
		        continue;

			if(GetPlayerInterior(playerid) != bb_Worlds[i][1])
		        continue;

			if(!IsPlayerInRangeOfPoint(playerid, 3.0, bb_Pos[i][0], bb_Pos[i][1], bb_Pos[i][2]))
			    continue;

			boomid = i;
		}

		if(boomid == -1)
		    return SendError(playerid, "Nie je tu iadny Boombox!");

		if(boomid != playerid && bb_Povolenie[boomid] != playerid)
		    return SendError(playerid, "S týmto Boomboxom nemôe manipulova!");

		return ShowBoomboxMenu(boomid, playerid);
	}
	else
	    return SendClientSyntax(playerid, "/boombox [polozit - zobrat - naladit - povolenie]");
	return 1;
}

CMD:zbrane(playerid,params[]) {
	if(GetPlayerStaffLevel(playerid) < 2 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW) return SendError(playerid,"Tento prikaz nemozes pouzit!");
	if(GetPlayerStaffLevel(playerid) < 2 && !IsPlayerWorking(playerid)) return SendError(playerid,"Nie si v sluzbe!");
	new var; if(sscanf(params,"d",var)) return SendClientSyntax(playerid, "/zbrane [ID]");
	else {

		MaskToId(var);

		if(!IsPlayerLogged(playerid)) return SendError(playerid,"Tento hrac nie je v hre!");
	    if(GetPlayerStaffLevel(playerid) < 2 && !IsPlayerNearPlayer(playerid,var,1.5)) return SendError(playerid,"Tento hrac je moc daleko!");
	    SCFM(playerid, 0xD0D0D0FF, "> Zbrane hráèa %s:",GetPlayerNameEx(var,NO_MASK));
		for(new i; i < 12; i++) {
		    new wid,ammo,serial[24];
		    if(playerWeapons[var][i][pweapons_IsWork] || playerWeapons[var][i][pweapons_IsPermit]) format(serial, sizeof serial, "%d", playerWeapons[var][i][pweapons_SerialNumber]);
		    else format(serial, sizeof serial, "nemá");
		    GetPlayerWeaponData(var,i,wid,ammo);
		    if(ammo == 0) continue;
		    if(wid != 0){
				if(GetPlayerStaffLevel(playerid) < 2) SCFM(playerid, COLOR_WHITE, "> %s (%d ammo, s.n.: %s)",GetWeaponNameEx(wid),ammo, serial);
				else SCFM(playerid, COLOR_WHITE, "> %s (%d ammo, s.n.: %s, origin: %s)",GetWeaponNameEx(wid),ammo, serial, playerWeapons[var][i][pweapons_Origin]);
			}
		}
	}
	return 1;
}

YCMD:frisk(playerid, params[], help) {
	new var;
	if(sscanf(params,"d",var))
		return SendClientSyntax(playerid, "/frisk (/prehladat) [id]");
	else {

        MaskToId(var);

        if(!IsPlayerLogged(var))
			return SendError(playerid, "Tento hráè nie je v hre!");

		if(!IsPlayerNearPlayer(playerid, var, 2.5))
			return SendError(playerid, "Tento hráè je moc ïaleko!");

		if(friskZiadost[var][playerid] == 1)
			return SendError(playerid, "Tomuto hráèovi si u odoslal iados o prehladanie!");

		new
			id;

		if(B_playerHasMask[playerid] == true) id = I_playerMaskID[playerid];
		else id = playerid;

		SCFM(playerid, COLOR_GREY, "> Odoslal si iados o prehladanie hráèovi %s, iados vyprí o 15 sekúnd!", GetPlayerNameEx(var, USE_MASK));
		SCFM(var, COLOR_GREY, "> %s ti zaslal iados o prehladanie, iados vyprí o 15 sekúnd!", GetPlayerNameEx(playerid, USE_MASK));
		SCFM(var, COLOR_GREY, "> Pre prijatie poui príkaz /accept frisk %d", id);

		friskZiadost[var][playerid] = 1;
		SetTimerEx("FriskCancel", 15000, false, "ii", var, playerid);
	}
	return 1;
}

YCMD:vytvoritgaraz(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
		Name [ 32 ],
		InteriorID,
		PSC,
		BuyPrice,
		ah;

	if(sscanf(params, "dddds[32]", InteriorID, BuyPrice, ah, PSC, Name))
	    return SendClientSyntax(playerid, "/vytvoritgaraz [id interieru /interierygarazi] [cena v $] [pridruené psè domu (0)] [èíslo garáe] [ulica]");

	new
		address = GetBiggestGarageAddress(),
		Float:Pos[6],
		string[128],
		zonen[32];

	GetPlayer2DZone(playerid, zonen, 32);

    FormatLog(log_type_admin, "%s(%s) vytvoril garaz (interier: %d, zipcode: %d, cena: %d$, adresa: %s (%d))", ReturnName(playerid), ReturnIP(playerid), InteriorID, address, BuyPrice, Name, PSC);
	format(string, 128, "Vytvoril si gará! (interier: %d, zipcode: %d, cena: %d$, adresa: %s (%d%s))", InteriorID, address, BuyPrice, Name, PSC, returnOrdinal(PSC));
	SendSuccess(playerid, string);

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	Pos[4] = Pos[0] - 2.25 * floatsin(-Pos[3], degrees);
	Pos[5] = Pos[1] - 2.25 * floatcos(-Pos[3], degrees);

	CreateDynamicGarage(
		Name, zonen, PSC, address, " ",
		Pos[0], Pos[1], Pos[2], Pos[3],
		Pos[4], Pos[5], Pos[2], Pos[3] + 180.0,
		GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), InteriorID, 0,
		BuyPrice, ah
	);

    new
		query[1024];

	mysql_format(MYSQL, query, 1024,
	"INSERT INTO gm_garages (Street, City, Number, PSC, pX, pY, pZ, pA, vX, vY, vZ, vA, VW, Interior, InteriorID, IsLocked, BuyPrice, AssignedHouse) VALUES ('%e', '%e', '%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '0', '%d', '%d')",
		Name,
		zonen,
		PSC,
		address,

		Pos[0], Pos[1], Pos[2], Pos[3],
		Pos[4], Pos[5], Pos[2], Pos[3] + 180.0,
		GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid),
		InteriorID, BuyPrice, ah);

	mysql_query(MYSQL, query, false);
	return 1;
}

YCMD:zmazatgaraz(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1;

    foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadna gará!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmazal garaz (adresa: %s (%d) - %s)", ReturnName(playerid), ReturnIP(playerid), garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City]);
	format(string, 128, "Zmazal si gará! (adresa: %s (%d) - %s)", garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City]);
	SendSuccess(playerid, string);

    new
		query[512];

	mysql_format(MYSQL, query, 512,
	"DELETE FROM gm_garages WHERE Street = '%e' AND PSC = '%d'",
		garageEnum[id][ga_Street], garageEnum[id][ga_PSC]);

	mysql_query(MYSQL, query, false);

	DestroyDynamicGarage(id);

	return 1;
}

YCMD:vytvoritdom(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
		Name [ 32 ],
		InteriorID,
		PSC,
		IsRental,
		BuyPrice;

	if(sscanf(params, "dddds[32]", InteriorID, IsRental, BuyPrice, PSC, Name))
	    return SendClientSyntax(playerid, "/vytvoritdom [id interieru /interierydomu] [prenajom (0/1)] [cena v $] [èíslo domu] [ulica]");

	new
		address = GetBiggestHouseAddress(),
		Float:Pos[4],
		string[128],
		zonen[32];

	GetPlayer2DZone(playerid, zonen, 32);

    FormatLog(log_type_admin, "%s(%s) vytvoril dom (interier: %d, zipcode: %d, cena: %d$, adresa: %s (%d))", ReturnName(playerid), ReturnIP(playerid), InteriorID, address, BuyPrice, Name, PSC);
	format(string, 128, "Vytvoril si dom! (interier: %d, zipcode: %d, cena: %d$, adresa: %s (%d%s))", InteriorID, address, BuyPrice, Name, PSC, returnOrdinal(PSC));
	SendSuccess(playerid, string, 1);

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

    CreateDynamicHouse(
		Name, zonen, PSC, address, "Ne", Pos[0], Pos[1], Pos[2], Pos[3],
		GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), InteriorID, 0,
		BuyPrice, "Ne", IsRental
	);

    new
		query[1024];

	mysql_format(MYSQL, query, 1024,
		"INSERT INTO gm_houses (Street, City, Number, PSC, X, Y, Z, Angle, VW, Interior, InteriorID, IsLocked, BuyPrice, IsRental) VALUES ('%e', '%e', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '0', '%d', '%d')",
		Name,
		zonen,
		PSC,
		address,

		Pos[0], Pos[1], Pos[2], Pos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid),
		InteriorID, BuyPrice, IsRental
	);

	mysql_query(MYSQL, query, false);

	return 1;
}

YCMD:zmazatdom(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1;

    foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadny dom!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmazal dom (adresa: %s (%d) - %s)", ReturnName(playerid), ReturnIP(playerid), houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City]);
	format(string, 128, "Zmazal si dom! (adresa: %s (%d) - %s)", houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City]);
	SendSuccess(playerid, string);

    new
		query[256];

	mysql_format(MYSQL, query, 1024,
	"DELETE FROM gm_houses WHERE Street = '%e' AND PSC = '%d'",
		houseEnum[id][ho_Street], houseEnum[id][ho_PSC]);

	mysql_query(MYSQL, query, false);

	DestroyDynamicHouse(id);

	return 1;
}

YCMD:ahousestreet(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1,
		S_var[32];

	if(sscanf(params, "s[32]", S_var))
	    return SendClientSyntax(playerid, "/ahousestreet [ulica]");

    foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadny dom!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmenil ulicu domu (adresa: %s (%d) - %s) na %s", ReturnName(playerid), ReturnIP(playerid), houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City], S_var);
	format(string, 128, "Zmenil si adresu domu na %s! (adresa: %s (%d) - %s)", S_var, houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City], S_var);
	SendSuccess(playerid, string);

	format(houseEnum[id][ho_Street], 32, S_var);

	ReloadHouseLabel(id);
	return 1;
}

YCMD:ahousecity(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1,
		S_var[32];

	if(sscanf(params, "s[32]", S_var))
	    return SendClientSyntax(playerid, "/ahousecity [mesto]");

    foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadny dom!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmenil lokalitu domu (adresa: %s (%d) - %s) na %s", ReturnName(playerid), ReturnIP(playerid), houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City], S_var);
	format(string, 128, "Zmenil si lokalitu domu na %s! (adresa: %s (%d) - %s)", S_var, houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City], S_var);
	SendSuccess(playerid, string);

	format(houseEnum[id][ho_City], 32, S_var);

	ReloadHouseLabel(id);
	return 1;
}

YCMD:ahouseowner(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1,
		S_var[32],
		I_pocetdni = 0;

	if(sscanf(params, "s[32] D(0)", S_var, I_pocetdni))
	    return SendClientSyntax(playerid, "/ahouseowner [nový majite¾ (pred nikoho zadaj \"Ne\" bez \"\")]");

    foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadny dom!");

	if(houseEnum[id][ho_IsRental] == 1 && I_pocetdni < 1)
	    return SendClientSyntax(playerid, "/ahouseowner [nový majite¾ (pred nikoho zadaj \"Ne\" bez \"\")] [poèet dní na prenájom]");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmenil majitela domu (adresa: %s (%d) - %s) na %s (%d dni)", ReturnName(playerid), ReturnIP(playerid), houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City], S_var, I_pocetdni);
	format(string, 128, "Zmenil si majitela domu na %s! (adresa: %s (%d) - %s)", S_var, houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City], S_var);
	SendSuccess(playerid, string);

	format(houseEnum[id][ho_Owner], 30, S_var);
	format(houseEnum[id][ho_SecOwner], 30, "");

	houseEnum[id][ho_RentTo] = gettime() + (I_pocetdni * 86400);

	ReloadHouseLabel(id);
	return 1;
}

YCMD:ahousenumber(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1,
		S_var;

	if(sscanf(params, "d", S_var))
	    return SendClientSyntax(playerid, "/ahousenumber [èíslo domu]");

    foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadny dom!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmenil èíslo domu (adresa: %s (%d) - %s) na %d", ReturnName(playerid), ReturnIP(playerid), houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City], S_var);
	format(string, 128, "Zmenil si èíslo domu na %d! (adresa: %s (%d) - %s)", S_var, houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City], S_var);
	SendSuccess(playerid, string);

	houseEnum[id][ho_Number] = S_var;

	ReloadHouseLabel(id);
	return 1;
}

YCMD:ahouseprice(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1,
		S_var;

	if(sscanf(params, "d", S_var))
	    return SendClientSyntax(playerid, "/ahouseprice [cena domu]");

    foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadny dom!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmenil cenu domu (adresa: %s (%d) - %s) na %d$", ReturnName(playerid), ReturnIP(playerid), houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City], S_var);
	format(string, 128, "Zmenil si cenu domu na %d$! (adresa: %s (%d) - %s)", S_var, houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City], S_var);
	SendSuccess(playerid, string);

	houseEnum[id][ho_BuyPrice] = S_var;

	ReloadHouseLabel(id);
	return 1;
}

YCMD:resethouse(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1;

    foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadny dom!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) resetoval dom (adresa: %s (%d) - %s)", ReturnName(playerid), ReturnIP(playerid), houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City]);
	format(string, 128, "Resetoval si dom! (adresa: %s (%d) - %s)", houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City]);
	SendSuccess(playerid, string);

	format(houseEnum[id][ho_Owner], 30, "Ne");
	format(houseEnum[id][ho_SecOwner], 30, "");
	houseEnum[id][ho_RentTo]                    = 0;
	houseEnum[id][ho_IsLocked]                  = 0;

	new query[144];

    foreach ( new gid : Garages )
	{
    	if(garageEnum[gid][ga_pX] == 0 && garageEnum[gid][ga_pY] == 0) continue;
    	if(garageEnum[gid][ga_AssignedHouse] == 0) continue;
    	if(garageEnum[gid][ga_AssignedHouse] != houseEnum[id][ho_PSC]) continue;

		format(garageEnum[gid][ga_Owner], 30, "Ne");
       	format(garageEnum[gid][ga_SecOwner], 30, "");

        ReloadGarageLabel(gid);

		mysql_format(MYSQL, query, sizeof query, "UPDATE gm_garages SET Owner = 'Ne' WHERE PSC = '%d'",
			garageEnum[gid][ga_PSC]);

		mysql_query(MYSQL, query, false);
	}

	ReloadHouseLabel(id);
	return 1;
}

YCMD:resetbusiness(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

       	FormatLog(log_type_business, "%s(%s) resetoval biznis %s(zip: %d)", ReturnName(playerid), ReturnIP(playerid), businessEnum[i][bz_Name], businessEnum[i][bz_Address]);
		SendSuccess(playerid, "Resetoval si biznis!");

		format(businessEnum[i][bz_Owner], 30, "Ne");
		format(businessEnum[i][bz_SecOwner], 30, "");
		format(businessEnum[i][bz_MusicAddress], 255, "");

		businessEnum[i][bz_IsLocked]                = 0;
		businessEnum[i][bz_EntryFee]                = 25;
		businessEnum[i][bz_Storage]                	= 0;

		ReloadBusinessLabel(i);
		return 1;
	}

	SendError(playerid, "Nestojí pri vchode do biznisu!");

	return 1;
}

YCMD:resetgarage(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1;

    foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadna gará!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) resetoval garaz (adresa: %s (%d) - %s)", ReturnName(playerid), ReturnIP(playerid), garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City]);
	format(string, 128, "Resetoval si gará! (adresa: %s (%d) - %s)", garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City]);
	SendSuccess(playerid, string);

	format(garageEnum[id][ga_Owner], 30, "Ne");
	format(garageEnum[id][ga_SecOwner], 30, "");

	garageEnum[id][ga_IsLocked]                 = 0;

	ReloadGarageLabel(id);
	return 1;
}


YCMD:ahouseinterior(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1,
		S_var;

	if(sscanf(params, "d", S_var))
	    return SendClientSyntax(playerid, "/ahouseinterior [interier domu /interierydomu]");

    foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadny dom!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmenil interiér domu (adresa: %s (%d) - %s) na %d", ReturnName(playerid), ReturnIP(playerid), houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City], S_var);
	format(string, 128, "Zmenil si interiér domu na %d! (adresa: %s (%d) - %s)", S_var, houseEnum[id][ho_Street], houseEnum[id][ho_Number], houseEnum[id][ho_City], S_var);
	SendSuccess(playerid, string);

	houseEnum[id][ho_InteriorID] = S_var;

	ReloadHouseLabel(id);
	return 1;
}

YCMD:hram(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(!IsPlayerWorking(playerid))
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(GetPlayerFactionRank(playerid) < 4)
	    return SendError(playerid, "Tento príkaz môe poui od ranku 4!");

    if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Teraz nemôe vyramova dom!");

	foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
		{
		    if(houseEnum[i][ho_PSC] != GetPlayerVirtualWorld(playerid)) continue;
		    if(GetPlayerInterior(playerid) != floatround(houseIntList[houseEnum[i][ho_InteriorID]][5], floatround_round)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, houseIntList[houseEnum[i][ho_InteriorID]][0], houseIntList[houseEnum[i][ho_InteriorID]][1], houseIntList[houseEnum[i][ho_InteriorID]][2])) continue;

			if(houseEnum[i][ho_IsLocked] == 0)
			{
			    FormatLog(log_type_business, "%s(%s) sa pokusil vyramovat dom %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
				FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s sa pokúsil vyramova dom %d%s %s, %s (zip: %d).", ReturnName(playerid),houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
			    SendError(playerid, "Tento dom je odomknutý!");
			}
			else
			{
			    FormatLog(log_type_business, "%s(%s) sa vyramoval dom %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
				FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s sa vyramoval dom %d%s %s, %s (zip: %d).", ReturnName(playerid),houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
			    SendSuccess(playerid, "Vyramoval si dom!");
			    houseEnum[i][ho_IsLocked] = 0;

				foreach( new x : Player )
				{
				    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
				        continue;

					if(!IsPlayerWorking(x))
					    continue;

					SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s vyramoval dom %d%s %s, %s!", GetPlayerNameEx(playerid, NO_MASK), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City]);
				}
			}

			ReloadHouseLabel(i);

			return 1;
		}
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;

        if(houseEnum[i][ho_IsLocked] == 0)
		{
		    FormatLog(log_type_business, "%s(%s) sa pokusil vyramovat dom %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
			FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s sa pokúsil vyramova dom %d%s %s, %s (zip: %d).", ReturnName(playerid),houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
		    SendError(playerid, "Tento dom je odomknutý!");
		}
		else
		{
		    FormatLog(log_type_business, "%s(%s) sa vyramoval dom %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
			FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s sa vyramoval dom %d%s %s, %s (zip: %d).", ReturnName(playerid),houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
		    SendSuccess(playerid, "Vyramoval si dom!");
		    houseEnum[i][ho_IsLocked] = 0;

			foreach( new x : Player )
			{
			    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
			        continue;

				if(!IsPlayerWorking(x))
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s vyramoval dom %d%s %s, %s!", GetPlayerNameEx(playerid, NO_MASK), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City]);
			}
		}

		ReloadHouseLabel(i);
		return 1;
	}

	SendError(playerid, "Nie je tu iadny dom!");
	return 1;
}

YCMD:gram(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(!IsPlayerWorking(playerid))
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(GetPlayerFactionRank(playerid) < 4)
	    return SendError(playerid, "Tento príkaz môe poui od ranku 4!");

    if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Teraz nemôe vyramova gará!");

	foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
		{
		    if(garageEnum[i][ga_PSC] != GetPlayerVirtualWorld(playerid)) continue;
		    if(GetPlayerInterior(playerid) != floatround(garageIntList[garageEnum[i][ga_InteriorID]][5], floatround_round)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, garageIntList[garageEnum[i][ga_InteriorID]][0], garageIntList[garageEnum[i][ga_InteriorID]][1], garageIntList[garageEnum[i][ga_InteriorID]][2])) continue;

			if(garageEnum[i][ga_IsLocked] == 0)
			{
			    FormatLog(log_type_business, "%s(%s) sa pokusil vyramovat garaz %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
				FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s sa pokúsil vyramova garaz %d%s %s, %s (zip: %d).", ReturnName(playerid),garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
			    SendError(playerid, "Táto gará je odomknutá!");
			}
			else
			{
			    FormatLog(log_type_business, "%s(%s) vyramoval garaz %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
				FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s vyramoval gará %d%s %s, %s (zip: %d).", ReturnName(playerid),garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
			    SendSuccess(playerid, "Vyramoval si gará!");
			    garageEnum[i][ga_IsLocked] = 0;

				foreach( new x : Player )
				{
				    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
				        continue;

					if(!IsPlayerWorking(x))
					    continue;

					SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s vyramoval gará %d%s %s, %s!", GetPlayerNameEx(playerid, NO_MASK), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City]);
				}
			}

			ReloadGarageLabel(i);

			return 1;
		}
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;

        if(garageEnum[i][ga_IsLocked] == 0)
		{
		    FormatLog(log_type_business, "%s(%s) sa pokusil vyramovat garaz %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
			FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s sa pokúsil vyramova gará %d%s %s, %s (zip: %d).", ReturnName(playerid),garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
		    SendError(playerid, "Táto gará je odomknutá!");
		}
		else
		{
		    FormatLog(log_type_business, "%s(%s) vyramoval garaz %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
			FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s vyramoval gará %d%s %s, %s (zip: %d).", ReturnName(playerid),garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
		    SendSuccess(playerid, "Vyramoval si gará!");
		    garageEnum[i][ga_IsLocked] = 0;

			foreach( new x : Player )
			{
			    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
			        continue;

				if(!IsPlayerWorking(x))
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s vyramoval gará %d%s %s, %s!", GetPlayerNameEx(playerid, NO_MASK), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City]);
			}
		}

		ReloadGarageLabel(i);
		return 1;
	}

	SendError(playerid, "Nie je tu iadna gará!");
	return 1;
}

YCMD:zamknutgaraz(playerid, params[], help)
{
	foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
		{
		    if(garageEnum[i][ga_PSC] != GetPlayerVirtualWorld(playerid)) continue;
		    if(GetPlayerInterior(playerid) != floatround(garageIntList[garageEnum[i][ga_InteriorID]][8], floatround_round)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 50.0, garageIntList[garageEnum[i][ga_InteriorID]][0], garageIntList[garageEnum[i][ga_InteriorID]][1], garageIntList[garageEnum[i][ga_InteriorID]][2])) continue;

			if(strcmp(garageEnum[i][ga_Owner], ReturnName(playerid), false) && strcmp(garageEnum[i][ga_SecOwner], ReturnName(playerid), false))
			    return SendError(playerid, "Od tejto garáe nemá klúèe!");

			if(garageEnum[i][ga_IsLocked] == 0)
			{
			    FormatLog(log_type_business, "%s(%s) zamkol garaz %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
			    SendSuccess(playerid, "Zamkol si gará!");
			    garageEnum[i][ga_IsLocked] = 1;
			}
			else
			{
			    FormatLog(log_type_business, "%s(%s) odomkol gará %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
			    SendSuccess(playerid, "Odomkol si gará!");
			    garageEnum[i][ga_IsLocked] = 0;
			}

			ReloadGarageLabel(i);

			return 1;
		}

		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;

		if(strcmp(garageEnum[i][ga_Owner], ReturnName(playerid), false) && strcmp(garageEnum[i][ga_SecOwner], ReturnName(playerid), false))
		    return SendError(playerid, "Od tejto garáe nemá klúèe!");

        if(garageEnum[i][ga_IsLocked] == 0)
		{
		    FormatLog(log_type_business, "%s(%s) zamkol garaz %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
		    SendSuccess(playerid, "Zamkol si gará!");
		    garageEnum[i][ga_IsLocked] = 1;
		}
		else
		{
		    FormatLog(log_type_business, "%s(%s) odomkol garaz %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
		    SendSuccess(playerid, "Odomkol si gará!");
		    garageEnum[i][ga_IsLocked] = 0;
		}

		ReloadGarageLabel(i);

		return 1;
	}
	SendError(playerid, "Nie je tu iadna gará!");
	return 1;
}

YCMD:azamknutgaraz(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
		{
		    if(garageEnum[i][ga_PSC] != GetPlayerVirtualWorld(playerid)) continue;
		    if(GetPlayerInterior(playerid) != floatround(garageIntList[garageEnum[i][ga_InteriorID]][8], floatround_round)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 50.0, garageIntList[garageEnum[i][ga_InteriorID]][0], garageIntList[garageEnum[i][ga_InteriorID]][1], garageIntList[garageEnum[i][ga_InteriorID]][2])) continue;

			if(garageEnum[i][ga_IsLocked] == 0)
			{
			    FormatLog(log_type_business, "%s(%s) zamkol garaz %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
			    SendSuccess(playerid, "Zamkol si gará!");
			    garageEnum[i][ga_IsLocked] = 1;
			}
			else
			{
			    FormatLog(log_type_business, "%s(%s) odomkol garaz d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
			    SendSuccess(playerid, "Odomkol si gará!");
			    garageEnum[i][ga_IsLocked] = 0;
			}

			ReloadGarageLabel(i);

			return 1;
		}
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;

        if(garageEnum[i][ga_IsLocked] == 0)
		{
		    FormatLog(log_type_business, "%s(%s) zamkol garaz %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
		    SendSuccess(playerid, "Zamkol si gará!");
		    garageEnum[i][ga_IsLocked] = 1;
		}
		else
		{
		    FormatLog(log_type_business, "%s(%s) odomkol garaz %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC]);
		    SendSuccess(playerid, "Odomkol si gará!");
		    garageEnum[i][ga_IsLocked] = 0;
		}

		ReloadGarageLabel(i);
		return 1;
	}
	SendError(playerid, "Nie je tu iadna gará!");
	return 1;
}

YCMD:zamknutdom(playerid, params[], help)
{
	foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
		{
		    if(houseEnum[i][ho_PSC] != GetPlayerVirtualWorld(playerid)) continue;
		    if(GetPlayerInterior(playerid) != floatround(houseIntList[houseEnum[i][ho_InteriorID]][5], floatround_round)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, houseIntList[houseEnum[i][ho_InteriorID]][0], houseIntList[houseEnum[i][ho_InteriorID]][1], houseIntList[houseEnum[i][ho_InteriorID]][2])) continue;
			if(strcmp(houseEnum[i][ho_Owner], ReturnName(playerid), false) && strcmp(houseEnum[i][ho_SecOwner], ReturnName(playerid), false))
			    return SendError(playerid, "Od tohoto domu nemá klúèe!");

			if(houseEnum[i][ho_IsLocked] == 0)
			{
			    FormatLog(log_type_business, "%s(%s) zamkol dom %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
			    SendSuccess(playerid, "Zamkol si dom!");
			    houseEnum[i][ho_IsLocked] = 1;
			}
			else
			{
			    FormatLog(log_type_business, "%s(%s) odomkol dom %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
			    SendSuccess(playerid, "Odomkol si dom!");
			    houseEnum[i][ho_IsLocked] = 0;
			}

			ReloadHouseLabel(i);

			return 1;
		}
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;
		if(strcmp(houseEnum[i][ho_Owner], ReturnName(playerid), false) && strcmp(houseEnum[i][ho_SecOwner], ReturnName(playerid), false))
		    return SendError(playerid, "Od tohoto domu nemá klúèe!");

        if(houseEnum[i][ho_IsLocked] == 0)
		{
		    FormatLog(log_type_business, "%s(%s) zamkol dom %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
		    SendSuccess(playerid, "Zamkol si dom!");
		    houseEnum[i][ho_IsLocked] = 1;
		}
		else
		{
		    FormatLog(log_type_business, "%s(%s) odomkol dom %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
		    SendSuccess(playerid, "Odomkol si dom!");
		    houseEnum[i][ho_IsLocked] = 0;
		}

		ReloadHouseLabel(i);
		return 1;
	}
	SendError(playerid, "Nie je tu iadny dom!");
	return 1;
}

YCMD:azamknutdom(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

	foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
		{
		    if(houseEnum[i][ho_PSC] != GetPlayerVirtualWorld(playerid)) continue;
		    if(GetPlayerInterior(playerid) != floatround(houseIntList[houseEnum[i][ho_InteriorID]][5], floatround_round)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, houseIntList[houseEnum[i][ho_InteriorID]][0], houseIntList[houseEnum[i][ho_InteriorID]][1], houseIntList[houseEnum[i][ho_InteriorID]][2])) continue;

			if(houseEnum[i][ho_IsLocked] == 0)
			{
			    FormatLog(log_type_business, "%s(%s) zamkol dom %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
			    SendSuccess(playerid, "Zamkol si dom!");
			    houseEnum[i][ho_IsLocked] = 1;
			}
			else
			{
			    FormatLog(log_type_business, "%s(%s) odomkol dom %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
			    SendSuccess(playerid, "Odomkol si dom!");
			    houseEnum[i][ho_IsLocked] = 0;
			}

			ReloadHouseLabel(i);

			return 1;
		}
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;

        if(houseEnum[i][ho_IsLocked] == 0)
		{
		    FormatLog(log_type_business, "%s(%s) zamkol dom %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
		    SendSuccess(playerid, "Zamkol si dom!");
		    houseEnum[i][ho_IsLocked] = 1;
		}
		else
		{
		    FormatLog(log_type_business, "%s(%s) odomkol dom %d%s %s, %s (zip: %d).", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC]);
		    SendSuccess(playerid, "Odomkol si dom!");
		    houseEnum[i][ho_IsLocked] = 0;
		}

		ReloadHouseLabel(i);
		return 1;
	}
	SendError(playerid, "Nie je tu iadny dom!");
	return 1;
}

YCMD:renthouse(playerid, params[], help)
{
	new
		I_var = -1,
		Ix;

	if(sscanf(params, "dD(-1)", I_var,Ix))
	    return SendClientSyntax(playerid, "/renthouse [poèet dní]");

	if(I_var < 3 || I_var > 60)
	    return SendError(playerid, "Izbu si môe prenaja od 3 do 60 dní!");

    foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;

		if(houseEnum[i][ho_IsRental] != 1)
		    return SendError(playerid, "Tento dom nie je na prenájom, poui /buyhouse!");

		if(strcmp(houseEnum[i][ho_Owner], "Ne", false))
		    return SendError(playerid, "Tento dom u niekto vlastní!");

		if(i == buyBusiness[playerid][1] && Ix > 0)
		{
		    if(Ix == buyBusiness[playerid][0])
		    {
		        if(ex_GetPlayerMoney(playerid) < houseEnum[i][ho_BuyPrice]*I_var || I_var < 1 || houseEnum[i][ho_BuyPrice]*I_var < 1)
		            return SendError(playerid, "Nemá dos peòazí na zakúpenie tohoto príbytku!");

		        ex_GivePlayerMoney(playerid, -houseEnum[i][ho_BuyPrice]*I_var);
		        money_spent[playerid]+=floatround(houseEnum[i][ho_BuyPrice]*I_var,floatround_round);

		        format(houseEnum[i][ho_Owner], 30, ReturnName(playerid));
		        format(houseEnum[i][ho_SecOwner], 30, "Ne");
		        houseEnum[i][ho_RentTo] = gettime() + (I_var * 86400);

		        FormatLog(log_type_business, "%s(%s) prenajal dom %d%s %s, %s(zip: %d) za %d$ na %d dni!", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC], houseEnum[i][ho_BuyPrice]*I_var, I_var);
				SendSuccess(playerid, "Úspene si prenajal dom!");

				Achievement::Reward(playerid, ACHIEVEMENT_MOTEL);
				if(I_var >= 50)
				    Achievement::Reward(playerid, ACHIEVEMENT_MOTEL_50DAYS);

				ReloadHouseLabel(i);

				buyBusiness[playerid][0] = 0;
				buyBusiness[playerid][1] = 0;

				new
				    query[256];

				mysql_format(MYSQL, query, sizeof query, "UPDATE gm_houses SET Owner = '%e' WHERE PSC = '%d'",
				    ReturnName(playerid), houseEnum[i][ho_PSC]);

				mysql_query(MYSQL, query, false);

				foreach ( new gid : Garages )
				{
				    if(garageEnum[gid][ga_pX] == 0 && garageEnum[gid][ga_pY] == 0) continue;
				    if(garageEnum[gid][ga_AssignedHouse] == 0) continue;
				    if(garageEnum[gid][ga_AssignedHouse] != houseEnum[i][ho_PSC]) continue;

				    format(garageEnum[gid][ga_Owner], 30, ReturnName(playerid));
		        	format(garageEnum[gid][ga_SecOwner], 30, "Ne");

                    ReloadGarageLabel(gid);

                    mysql_format(MYSQL, query, sizeof query, "UPDATE gm_garages SET Owner = '%e' WHERE PSC = '%d'",
				    	ReturnName(playerid), garageEnum[gid][ga_PSC]);

					mysql_query(MYSQL, query, false);
				}

				return 1;
		    }
			else
			    return SendError(playerid, "Zadal si zlé èíslo potvrdenia!");
		}

		buyBusiness[playerid][0] = rand(1000, 10000);
		buyBusiness[playerid][1] = i;

		new
		    string[144];

		format(string, 144, "Skutoène chce prenaja dom %d%s %s za %d$ na %d dní? Ak áno, poui príkaz /renthouse (poèetdní) %d", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_BuyPrice]*I_var, I_var, buyBusiness[playerid][0]);
		SendSuccess(playerid, string, 1);
		return 1;
	}

	SendError(playerid, "Nestojí pri vchode do domu!");

	return 1;
}

YCMD:unrenthouse(playerid, params[], help)
{

    new
		I_var = -1;

	if(sscanf(params, "D(-128)", I_var))
	    return SendClientSyntax(playerid, "/unrenthouse");

    foreach( new i : Houses )
	{
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;

		if(houseEnum[i][ho_IsRental] != 1)
		    return SendError(playerid, "Tento dom nie je na prenájom, poui /sellhouse!");

		if(strcmp(houseEnum[i][ho_Owner], ReturnName(playerid), false))
		    return SendError(playerid, "Tento dom nevlastní!");

		new numDays = floatround(floatabs(float(houseEnum[i][ho_RentTo] - gettime())) / 60 / 60 / 24);

		if(i == sellBusiness[playerid][1] && numDays > 0)
		{
		    if(I_var == sellBusiness[playerid][0])
			{
			    if(floatround((houseEnum[i][ho_BuyPrice]*numDays) / 100 * 60, floatround_round) >= 0)
			    {
		        	ex_GivePlayerMoney(playerid, floatround((houseEnum[i][ho_BuyPrice]*numDays) / 100 * 60, floatround_round));
		        	money_admin[playerid]+=floatround((houseEnum[i][ho_BuyPrice]*numDays) / 100 * 60, floatround_round);
				}

		        format(houseEnum[i][ho_Owner], 30, "Ne");
		        format(houseEnum[i][ho_SecOwner], 30, "");

				houseEnum[i][ho_RentTo] = 0;

		        FormatLog(log_type_business, "%s(%s) unrentol dom %d%s %s, %s(zip: %d) za %d$", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_PSC], floatround((houseEnum[i][ho_BuyPrice]*numDays)/100*60,floatround_round));
				SendSuccess(playerid, "Úspene si odhlásil prenájom domu!");

				ReloadHouseLabel(i);

				sellBusiness[playerid][0] = 0;
				sellBusiness[playerid][1] = 0;

                new
				    query[256];

				mysql_format(MYSQL, query, sizeof query, "UPDATE gm_houses SET Owner = 'Ne', RentTo = '%d' WHERE PSC = '%d'",
				    ReturnName(playerid), 0, houseEnum[i][ho_PSC]);

				mysql_query(MYSQL, query, false);

				foreach ( new gid : Garages )
				{
				    if(garageEnum[gid][ga_pX] == 0 && garageEnum[gid][ga_pY] == 0) continue;
				    if(garageEnum[gid][ga_AssignedHouse] == 0) continue;
				    if(garageEnum[gid][ga_AssignedHouse] != houseEnum[i][ho_PSC]) continue;

				    format(garageEnum[gid][ga_Owner], 30, "Ne");
		        	format(garageEnum[gid][ga_SecOwner], 30, "");

                    ReloadGarageLabel(gid);

                    mysql_format(MYSQL, query, sizeof query, "UPDATE gm_garages SET Owner = 'Ne' WHERE PSC = '%d'",
				    	garageEnum[gid][ga_PSC]);

					mysql_query(MYSQL, query, false);
				}

				return 1;
		    }
			else
			    return SendError(playerid, "Zadal si zlé èíslo potvrdenia!");
		}

		sellBusiness[playerid][0] = rand(1000, 10000);
		sellBusiness[playerid][1] = i;

		new
		    string[144];

		format(string, 144, "Skutoène chce odhlási prenájom domu %d%s %s za %d$? Ak áno, poui príkaz /unrenthouse %d", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], floatround((houseEnum[i][ho_BuyPrice]*numDays)/100*60,floatround_round), sellBusiness[playerid][0]);
		SendSuccess(playerid, string);
		return 1;
	}

	SendError(playerid, "Nestojí pri vchode do domu!");

	return 1;
}

YCMD:transferhouse(playerid, params[], help)
{

	new
	    id = -1,
		idhrac;

	if(sscanf(params, "d", idhrac))
	    return SendClientSyntax(playerid, "/transferhouse [id hráèa na ktorého chce dom prepísa]");

    foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;

		if(strcmp(houseEnum[i][ho_Owner], ReturnName(playerid), false))
		    return SendError(playerid, "Tento dom nevlastní!");

		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadny dom!");

	if(!IsPlayerLogged(idhrac))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(playerid, idhrac, 10.0))
	    return SendError(playerid, "Tento hráè musí by blízko!");

	new
	    string[128];

	format(string, sizeof string, "Zaslal si ponuku hráèovi %s na prepis domu!", GetPlayerNameEx(idhrac, USE_MASK));
	SendSuccess(playerid, string);

	format(string, sizeof string, "{ffffff}> %s chce na teba prepísa dom %d%s %s! Súhlasí?", GetPlayerNameEx(playerid, NO_MASK), houseEnum[id][ho_Number], returnOrdinal(houseEnum[id][ho_Number]), houseEnum[id][ho_Street]);

	ShowPlayerDialog(idhrac, did_transfer_house, DIALOG_STYLE_MSGBOX, "PREPIS DOMU", string, "ÁNO", "NIE");

    prepis_ID[idhrac] = playerid;
    prepistmpvar[idhrac] = id;
	return 1;
}

YCMD:transfergarage(playerid, params[], help)
{

	new
	    id = -1,
		idhrac;

	if(sscanf(params, "d", idhrac))
	    return SendClientSyntax(playerid, "/transfergarage [id hráèa na ktorého chce gara prepísa]");

    foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;

		if(strcmp(garageEnum[i][ga_Owner], ReturnName(playerid), false))
		    return SendError(playerid, "Túto gará nevlastní!");

		id = i;

		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadna gará!");

	if(!IsPlayerLogged(idhrac))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(playerid, idhrac, 10.0))
	    return SendError(playerid, "Tento hráè musí by blízko!");

	new
	    string[128];

	format(string, sizeof string, "Zaslal si ponuku hráèovi %s na prepis garáe!", GetPlayerNameEx(idhrac, USE_MASK));
	SendSuccess(playerid, string);

	format(string, sizeof string, "{ffffff}> %s chce na teba prepísa gará %d%s %s! Súhlasí?", GetPlayerNameEx(playerid, NO_MASK), garageEnum[id][ga_Number], returnOrdinal(garageEnum[id][ga_Number]), garageEnum[id][ga_Street]);

	ShowPlayerDialog(idhrac, did_transfer_garage, DIALOG_STYLE_MSGBOX, "PREPIS GARÁE", string, "ÁNO", "NIE");

    prepis_ID[idhrac] = playerid;
    prepistmpvar[idhrac] = id;
	return 1;
}


YCMD:transferbusiness(playerid, params[], help)
{

	new
	    id = -1,
		idhrac;

	if(sscanf(params, "d", idhrac))
	    return SendClientSyntax(playerid, "/transferbusiness [id hráèa na ktorého chce business prepísa]");

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;
        if(strcmp(businessEnum[i][bz_Owner], ReturnName(playerid), false))
			 return SendError(playerid, "Tento biznis nevlastní!");
       	id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadny biznis!");

	if(!IsPlayerLogged(idhrac))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(playerid, idhrac, 10.0))
	    return SendError(playerid, "Tento hráè musí by blízko!");

	new
	    string[128];

	format(string, sizeof string, "Zaslal si ponuku hráèovi %s na prepis biznisu!", GetPlayerNameEx(idhrac, USE_MASK));
	SendSuccess(playerid, string);

	format(string, sizeof string, "{ffffff}> %s chce na teba prepísa biznis %s! Súhlasí?", GetPlayerNameEx(playerid, NO_MASK), businessEnum[id][bz_Name]);

	ShowPlayerDialog(idhrac, did_transfer_business, DIALOG_STYLE_MSGBOX, "PREPIS BIZNISU", string, "ÁNO", "NIE");

    prepis_ID[idhrac] = playerid;
    prepistmpvar[idhrac] = id;
	return 1;
}

YCMD:buyhouse(playerid, params[], help)
{
	new
		I_var = -1;

	if(sscanf(params, "D(-1)", I_var))
	    return SendClientSyntax(playerid, "/kupitdom");

    foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;

		if(houseEnum[i][ho_IsRental] == 1)
		    return SendError(playerid, "Tento dom je na prenájom, poui /renthouse!");

		if(strcmp(houseEnum[i][ho_Owner], "Ne", false))
		    return SendError(playerid, "Tento dom u niekto vlastní!");

		if(i == buyBusiness[playerid][1] && I_var > 0)
		{
		    if(I_var == buyBusiness[playerid][0])
		    {
		        if(ex_GetPlayerMoney(playerid) < houseEnum[i][ho_BuyPrice])
		            return SendError(playerid, "Nemá dos peòazí na zakúpenie tohoto domu!");

		        ex_GivePlayerMoney(playerid, -houseEnum[i][ho_BuyPrice]);
		        money_spent[playerid]+=floatround(houseEnum[i][ho_BuyPrice],floatround_round);

		        format(houseEnum[i][ho_Owner], 30, ReturnName(playerid));
		        format(houseEnum[i][ho_SecOwner], 30, "Ne");

		        FormatLog(log_type_business, "%s(%s) kupil dom %d%s %s, %s(zip: %d) za %d$", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City], houseEnum[i][ho_PSC], houseEnum[i][ho_BuyPrice]);
				SendSuccess(playerid, "Úspene si kúpil dom!");

				Achievement::Reward(playerid, ACHIEVEMENT_FIRST_HOUSE);
				if(houseEnum[i][ho_BuyPrice] >= 100000)
				    Achievement::Reward(playerid, ACHIEVEMENT_HOUSE_100000);

				ReloadHouseLabel(i);

				buyBusiness[playerid][0] = 0;
				buyBusiness[playerid][1] = 0;

				new
				    query[256];

				mysql_format(MYSQL, query, sizeof query, "UPDATE gm_houses SET Owner = '%e' WHERE PSC = '%d'",
				    ReturnName(playerid), houseEnum[i][ho_PSC]);

				mysql_query(MYSQL, query, false);

				foreach ( new gid : Garages )
				{
				    if(garageEnum[gid][ga_pX] == 0 && garageEnum[gid][ga_pY] == 0) continue;
				    if(garageEnum[gid][ga_AssignedHouse] == 0) continue;
				    if(garageEnum[gid][ga_AssignedHouse] != houseEnum[i][ho_PSC]) continue;

				    format(garageEnum[gid][ga_Owner], 30, ReturnName(playerid));
		        	format(garageEnum[gid][ga_SecOwner], 30, "Ne");

                    ReloadGarageLabel(gid);

                    mysql_format(MYSQL, query, sizeof query, "UPDATE gm_garages SET Owner = '%e' WHERE PSC = '%d'",
				    	ReturnName(playerid), garageEnum[gid][ga_PSC]);

					mysql_query(MYSQL, query, false);
				}

				return 1;
		    }
			else
			    return SendError(playerid, "Zadal si zlé èíslo potvrdenia!");
		}

		buyBusiness[playerid][0] = rand(1000, 10000);
		buyBusiness[playerid][1] = i;

		new
		    string[144];

		format(string, 144, "Skutoène chce kúpi dom %d%s %s za %d$? Ak áno, poui príkaz /kupitdom %d", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_BuyPrice], buyBusiness[playerid][0]);
		SendSuccess(playerid, string);
		return 1;
	}

	SendError(playerid, "Nestojí pri vchode do domu!");

	return 1;
}

YCMD:sellhouse(playerid, params[], help)
{
	new
		I_var = -1;

	if(sscanf(params, "D(-1)", I_var))
	    return SendClientSyntax(playerid, "/predatdom");

    foreach( new i : Houses )
	{
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;

		if(houseEnum[i][ho_IsRental] == 1)
		    return SendError(playerid, "Tento dom je na prenájom, poui /renthouse!");

		if(strcmp(houseEnum[i][ho_Owner], ReturnName(playerid), false))
		    return SendError(playerid, "Tento dom nevlastní!");

		if(i == sellBusiness[playerid][1] && I_var > 0)
		{
		    if(I_var == sellBusiness[playerid][0])
			{
		        ex_GivePlayerMoney(playerid, floatround(houseEnum[i][ho_BuyPrice] / 100 * 60, floatround_round));
		        money_admin[playerid]+=floatround(houseEnum[i][ho_BuyPrice] / 100 * 60, floatround_round);

		        format(houseEnum[i][ho_Owner], 30, "Ne");
		        format(houseEnum[i][ho_SecOwner], 30, "");

		        FormatLog(log_type_business, "%s(%s) predal dom %d%s %s, %s(zip: %d) za %d$", ReturnName(playerid), ReturnIP(playerid), houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_PSC], floatround(houseEnum[i][ho_BuyPrice]/100*60,floatround_round));
				SendSuccess(playerid, "Úspene si predal dom!");

				ReloadHouseLabel(i);

				sellBusiness[playerid][0] = 0;
				sellBusiness[playerid][1] = 0;

                new
				    query[256];

				mysql_format(MYSQL, query, sizeof query, "UPDATE gm_houses SET Owner = 'Ne' WHERE PSC = '%d'",
				    ReturnName(playerid), houseEnum[i][ho_PSC]);

				mysql_query(MYSQL, query, false);

				foreach ( new gid : Garages )
				{
				    if(garageEnum[gid][ga_pX] == 0 && garageEnum[gid][ga_pY] == 0) continue;
				    if(garageEnum[gid][ga_AssignedHouse] == 0) continue;
				    if(garageEnum[gid][ga_AssignedHouse] != houseEnum[i][ho_PSC]) continue;

				    format(garageEnum[gid][ga_Owner], 30, "Ne");
		        	format(garageEnum[gid][ga_SecOwner], 30, "");

                    ReloadGarageLabel(gid);

                    mysql_format(MYSQL, query, sizeof query, "UPDATE gm_garages SET Owner = 'Ne' WHERE PSC = '%d'",
				    	garageEnum[gid][ga_PSC]);

					mysql_query(MYSQL, query, false);
				}

				return 1;
		    }
			else
			    return SendError(playerid, "Zadal si zlé èíslo potvrdenia!");
		}

		sellBusiness[playerid][0] = rand(1000, 10000);
		sellBusiness[playerid][1] = i;

		new
		    string[144];

		format(string, 144, "Skutoène chce preda dom %d%s %s za %d$? Ak áno, poui príkaz /predatdom %d", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], floatround(houseEnum[i][ho_BuyPrice]/100*60,floatround_round), sellBusiness[playerid][0]);
		SendSuccess(playerid, string);
		return 1;
	}

	SendError(playerid, "Nestojí pri vchode do domu!");

	return 1;
}

YCMD:buygarage(playerid, params[], help)
{
	new
		I_var = -1;

	if(sscanf(params, "D(-1)", I_var))
	    return SendClientSyntax(playerid, "/kupitgaraz");

    foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;
		if(strcmp(garageEnum[i][ga_Owner], "Ne", false))
		    return SendError(playerid, "Túto gará u niekto vlastní!");
		if(garageEnum[i][ga_AssignedHouse] != 0)
			return SendError(playerid, "Nemôe kúpi samostatnú gará, keï patrí k domu! Kúp dom a gará sa ti pridá automaticky!");

		if(i == buyBusiness[playerid][1] && I_var > 0)
		{
		    if(I_var == buyBusiness[playerid][0])
		    {
		        if(ex_GetPlayerMoney(playerid) < garageEnum[i][ga_BuyPrice])
		            return SendError(playerid, "Nemá dos peòazí na zakúpenie tejto garáe!");

		        ex_GivePlayerMoney(playerid, -garageEnum[i][ga_BuyPrice]);
		        money_spent[playerid]+=floatround(garageEnum[i][ga_BuyPrice],floatround_round);

		        format(garageEnum[i][ga_Owner], 30, ReturnName(playerid));
		        format(garageEnum[i][ga_SecOwner], 30, "Ne");

		        FormatLog(log_type_business, "%s(%s) kupil garaz %d%s %s, %s(zip: %d) za %d$", ReturnName(playerid), ReturnIP(playerid), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City], garageEnum[i][ga_PSC], garageEnum[i][ga_BuyPrice]);
				SendSuccess(playerid, "Úspene si kúpil gará!");

				ReloadGarageLabel(i);

				buyBusiness[playerid][0] = 0;
				buyBusiness[playerid][1] = 0;

				new
				    query[256];

				mysql_format(MYSQL, query, sizeof query, "UPDATE gm_garages SET Owner = '%e' WHERE PSC = '%d'",
				    ReturnName(playerid), garageEnum[i][ga_PSC]);

				mysql_query(MYSQL, query, false);

				return 1;
		    }
			else
			    return SendError(playerid, "Zadal si zlé èíslo potvrdenia!");
		}

		buyBusiness[playerid][0] = rand(1000, 10000);
		buyBusiness[playerid][1] = i;

		new
		    string[144];

		format(string, 144, "Skutoène chce kúpi gará %d%s %s za %d$? Ak áno, poui príkaz /kupitgaraz %d", garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_BuyPrice], buyBusiness[playerid][0]);
		SendSuccess(playerid, string);
		return 1;
	}

	SendError(playerid, "Nestojí pri vchode do garáe!");

	return 1;
}

YCMD:sellgarage(playerid, params[], help)
{
	new
		I_var = -1;

	if(sscanf(params, "D(-1)", I_var))
	    return SendClientSyntax(playerid, "/predatgaraz");

    foreach( new i : Garages )
	{
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 2.5, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;
		if(strcmp(garageEnum[i][ga_Owner], ReturnName(playerid), false))
		    return SendError(playerid, "Túto gará nevlastní!");
		if(garageEnum[i][ga_AssignedHouse] != 0)
			return SendError(playerid, "Nemôe preda samostatnú gará, keï patrí k domu! Predaj dom a gará sa ti odpredá automaticky!");

		if(i == sellBusiness[playerid][1] && I_var > 0)
		{
		    if(I_var == sellBusiness[playerid][0])
			{
		        ex_GivePlayerMoney(playerid, floatround(garageEnum[i][ga_BuyPrice] / 100 * 60, floatround_round));
		        money_admin[playerid]+=floatround(garageEnum[i][ga_BuyPrice] / 100 * 60, floatround_round);

		        format(garageEnum[i][ga_Owner], 30, "Ne");
		        format(garageEnum[i][ga_SecOwner], 30, "");

		        FormatLog(log_type_business, "%s(%s) predal garaz %d%s %s, %s(zip: %d) za %d$", ReturnName(playerid), ReturnIP(playerid), garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_PSC], floatround(garageEnum[i][ga_BuyPrice]/100*60,floatround_round));
				SendSuccess(playerid, "Úspene si predal gará!");

				ReloadGarageLabel(i);

				sellBusiness[playerid][0] = 0;
				sellBusiness[playerid][1] = 0;

                new
				    query[256];

				mysql_format(MYSQL, query, sizeof query, "UPDATE gm_garages SET Owner = 'Ne' WHERE PSC = '%d'",
				    ReturnName(playerid), garageEnum[i][ga_PSC]);

				mysql_query(MYSQL, query, false);

				return 1;
		    }
			else
			    return SendError(playerid, "Zadal si zlé èíslo potvrdenia!");
		}

		sellBusiness[playerid][0] = rand(1000, 10000);
		sellBusiness[playerid][1] = i;

		new
		    string[144];

		format(string, 144, "Skutoène chce preda gará %d%s %s za %d$? Ak áno, poui príkaz /predatgaraz %d", garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], floatround(garageEnum[i][ga_BuyPrice]/100*60,floatround_round), sellBusiness[playerid][0]);
		SendSuccess(playerid, string);
		return 1;
	}

	SendError(playerid, "Nestojí pri vchode do garáe!");

	return 1;
}

YCMD:agaragestreet(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1,
		S_var[32];

	if(sscanf(params, "s[32]", S_var))
	    return SendClientSyntax(playerid, "/agaragestreet [ulica]");

    foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadna gará!");

	new
	    strings[128];

    FormatLog(log_type_admin, "%s(%s) zmenil ulicu garaze (adresa: %s (%d) - %s) na %s", ReturnName(playerid), ReturnIP(playerid), garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City], S_var);
	format(strings, 128, "Zmenil si adresu garáe na %s! (adresa: %s (%d) - %s)", S_var, garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City]);
	SendSuccess(playerid, strings);

	format(garageEnum[id][ga_Street], 32, S_var);

	ReloadGarageLabel(id);
	return 1;
}

YCMD:agaragecity(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1,
		S_var[32];

	if(sscanf(params, "s[32]", S_var))
	    return SendClientSyntax(playerid, "/agaragecity [mesto]");

    foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadna gará!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmenil lokalitu garaze (adresa: %s (%d) - %s) na %s", ReturnName(playerid), ReturnIP(playerid), garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City], S_var);
	format(string, 128, "Zmenil si lokalitu garáe na %s! (adresa: %s (%d) - %s)", S_var, garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City]);
	SendSuccess(playerid, string);

	format(garageEnum[id][ga_City], 32, S_var);

	ReloadGarageLabel(id);
	return 1;
}

YCMD:agarageowner(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1,
		S_var[32];

	if(sscanf(params, "s[32]", S_var))
	    return SendClientSyntax(playerid, "/agarageowner [nový majite¾ (pre nikoho zadaj \"Ne\" bez \"\")]");

    foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadna gará!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmenil majitela garáe (adresa: %s (%d) - %s) na %s", ReturnName(playerid), ReturnIP(playerid), garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City], S_var);
	format(string, 128, "Zmenil si majitela garáe na %s! (adresa: %s (%d) - %s)", S_var, garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City]);
	SendSuccess(playerid, string);

	format(garageEnum[id][ga_Owner], 30, S_var);
	format(garageEnum[id][ga_SecOwner], 30, "");

	ReloadGarageLabel(id);
	return 1;
}

YCMD:agaragenumber(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1,
		S_var;

	if(sscanf(params, "d", S_var))
	    return SendClientSyntax(playerid, "/agaragenumber [èíslo domu]");

    foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadna gará!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmenil èíslo garaze (adresa: %s (%d) - %s) na %d", ReturnName(playerid), ReturnIP(playerid), garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City], S_var);
	format(string, 128, "Zmenil si èíslo garáe na %d! (adresa: %s (%d) - %s)", S_var, garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City]);
	SendSuccess(playerid, string);

	garageEnum[id][ga_Number] = S_var;

	ReloadGarageLabel(id);
	return 1;
}

YCMD:agarageprice(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1,
		S_var;

	if(sscanf(params, "d", S_var))
	    return SendClientSyntax(playerid, "/agarageprice [cena domu]");

    foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadna gará!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmenil cenu garaze (adresa: %s (%d) - %s) na %d$", ReturnName(playerid), ReturnIP(playerid), garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City], S_var);
	format(string, 128, "Zmenil si cenu garaze na %d$! (adresa: %s (%d) - %s)", S_var, garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City]);
	SendSuccess(playerid, string);

	garageEnum[id][ga_BuyPrice] = S_var;

	ReloadGarageLabel(id);
	return 1;
}

YCMD:agarageinterior(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1,
		S_var;

	if(sscanf(params, "d", S_var))
	    return SendClientSyntax(playerid, "/agarageinterior [interier domu /interierygarazi]");

    foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadna gará!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmenil interiér garaze (adresa: %s (%d) - %s) na %d", ReturnName(playerid), ReturnIP(playerid), garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City], S_var);
	format(string, 128, "Zmenil si interiér garáe na %d! (adresa: %s (%d) - %s)", S_var, garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City]);
	SendSuccess(playerid, string);

	garageEnum[id][ga_InteriorID] = S_var;

	ReloadGarageLabel(id);
	return 1;
}

YCMD:agaragehouse(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1,
		S_var;

	if(sscanf(params, "d", S_var))
	    return SendClientSyntax(playerid, "/agaragehouse [psè priradeneho domu/0]");

    foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadna gará!");

	new
	    string[128];

    FormatLog(log_type_admin, "%s(%s) zmenil priradeny dom garaze (adresa: %s (%d) - %s) na %d", ReturnName(playerid), ReturnIP(playerid), garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City], S_var);
	format(string, 128, "Zmenil si priradený dom garáe %d! (adresa: %s (%d) - %s)", S_var, garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City]);
	SendSuccess(playerid, string);

	garageEnum[id][ga_AssignedHouse] = S_var;

	ReloadGarageLabel(id);
	return 1;
}

YCMD:agaragepos(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new
	    id = -1,
		S_var;

	if(sscanf(params, "d", S_var))
	    return SendClientSyntax(playerid, "/agaragepos [psc garaze]");

    foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(garageEnum[i][ga_PSC] != S_var) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Neexistuje iadna gará s tymto PSÈ!");

	new
	    string[128],
		Float:x, Float:y, Float:z, Float:a;

    FormatLog(log_type_admin, "%s(%s) zmenil poziciu auta garaze (adresa: %s (%d) - %s)", ReturnName(playerid), ReturnIP(playerid), garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City]);
	format(string, 128, "Zmenil si pozíciu vchodu a východu auta garáe! (adresa: %s (%d) - %s)",  garageEnum[id][ga_Street], garageEnum[id][ga_Number], garageEnum[id][ga_City]);
	SendSuccess(playerid, string);

	if(!IsPlayerInAnyVehicle(playerid))
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
	}
	else
	{
		GetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}

	garageEnum[id][ga_vX] = x;
	garageEnum[id][ga_vY] = y;
	garageEnum[id][ga_vZ] = z;
	garageEnum[id][ga_vA] = a;

	new
		query[256];

	mysql_format(MYSQL, query, sizeof query, "UPDATE gm_garages SET vX = '%f', vY = '%f', vZ = '%f', vA = '%f' WHERE PSC = '%d'",
		x,y,z,a,garageEnum[id][ga_PSC]
	);

	mysql_query(MYSQL, query, false);

	ReloadGarageLabel(id);
	return 1;
}

YCMD:megafon(playerid, params[], help)
{
	new
		vid = -1,
		S_var[128];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/megafon (/m) [správa do megafónu]");

	if(IsPlayerInAnyVehicle(playerid))
	    vid = GetPlayerVehicleID(playerid);

	else
	{
	    new
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
	}

	if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo s megafónom!");

	/*switch(GetVehicleModel(vid))
	{
	    case
			407, //FIRETRUCK
			416, //AMBULANCE
			427, //ENFORCER
			430, //PREDATOR
			490, //FBI RANCHER
			497, //POLICE MAVERICK
			528, //FBI TRUCK
			544, //FIRETRUCK LA
			596, //LSPD CRUISER
			597, //SFPD CRUISER
			598, //LVPD CRUISER
			599, //POLICE RANGER
			601: //SWAT
		{}

		default:
		{
		    return SendError(playerid, "Nie je tu iadne vozidlo s megafónom!");
		}
	}*/

	if(GetVehicleFactionType(vid) != FACTION_TYPE_FIRE && GetVehicleFactionType(vid) != FACTION_TYPE_LAW)
        return SendError(playerid, "Nie je tu iadne vozidlo s megafónom!");

	SendMegaphoneMsg(playerid, S_var);

	return 1;
}

SendMegaphoneMsg(playerid, text[])
{

	new
	    string[128 + 24 + 30];

	format(string, sizeof(string), "{f2d734}[ MEGAFÓN ] %s: %s", GetPlayerNameEx(playerid, USE_MASK), text);
    SendLocalMessage(playerid, 60.0, 0xf2d734ff, string);

    foreach( new i : Entrances ) {
	    if(entranceEnum[i][e_posX] == 0 && entranceEnum[i][e_posY] == 0) continue;
		if(entranceEnum[i][e_posVW] != GetPlayerVirtualWorld(playerid)) continue;
		if(entranceEnum[i][e_posINT] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 60.0, entranceEnum[i][e_posX], entranceEnum[i][e_posY], entranceEnum[i][e_posZ])) continue;

		foreach( new x : Player )
		{
		    if(GetPlayerVirtualWorld(x) == i + 10000 && GetPlayerInterior(x) == floatround(intList[entranceEnum[i][e_InteriorID]][5], floatround_round))
		    {
		        SendClientMessage(x, 0xf2d734ff, string);
		    }
		}
	}

	foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 60.0, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

		foreach( new x : Player )
		{
		    if(GetPlayerVirtualWorld(x) == businessEnum[i][bz_Address] && GetPlayerInterior(x) == floatround(intList[businessEnum[i][bz_InteriorID]][5], floatround_round))
		    {
		        SendClientMessage(x, 0xf2d734ff, string);
		    }
		}
	}

	foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 60.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;

		foreach( new x : Player )
		{
		    if(GetPlayerVirtualWorld(x) == houseEnum[i][ho_PSC] && GetPlayerInterior(x) == floatround(houseIntList[houseEnum[i][ho_InteriorID]][5], floatround_round))
		    {
		        SendClientMessage(x, 0xf2d734ff, string);
		    }
		}
	}

	foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 60.0, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;

		foreach( new x : Player )
		{
		    if(GetPlayerVirtualWorld(x) == garageEnum[i][ga_PSC] && GetPlayerInterior(x) == floatround(garageIntList[garageEnum[i][ga_InteriorID]][8], floatround_round))
		    {
		        SendClientMessage(x, 0xf2d734ff, string);
		    }
		}
	}
	return 1;
}


YCMD:stopsign(playerid, params[], help)
{
	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesedí v aute!");

	switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
	{
	    case
	        402, // BUFFALO
	        560, // SULTAN
	        579, // HUNTLEY
			426: // PREMIER
		{}

		default:
		{
		    return SendError(playerid, "Toto vozidlo nemá tabulu STOP!");
		}
	}

	if(GetVehicleFactionType(GetPlayerVehicleID(playerid)) != FACTION_TYPE_LAW)
		return SendError(playerid, "Toto vozidlo nemá tabulu STOP!");

	new
	    Float:stopSignPos_1[][] = {
	        {0.000, -1.250, 0.529, 0.000, 0.000, 0.000}, // BUFFALO
	        {0.000, -0.990, 0.629, 0.000, 0.000, 0.000}, // SULTAN
	        {0.000, -2.400, 0.949, 0.000, 0.000, 0.000}, // HUNTLEY
	        {0.000, -1.399, 0.600, 0.000, 0.000, 0.000} // PREMIER
	    },
	    Float:stopSignPos_2[][] = {
	        {0.050, -1.249, 0.470, 0.000, 0.000, 180.000}, // BUFFALO
	        {0.050, -0.999, 0.590, 0.000, 0.000, 180.000}, // SULTAN
	        {0.050, -2.400, 0.910, 0.000, 0.000, 180.000}, // HUNTLEY
	        {0.050, -1.400, 0.560, 0.000, 0.000, 180.000} // PREMIER
	    },
	    Float:stopSignPos_3[][] = {
	        {0.000, -1.239, 0.370, 0.000, 0.000, 0.000}, // BUFFALO
	        {0.000, -1.000, 0.500, 0.000, 0.000, 0.000}, // SULTAN
	        {0.000, -2.400, 0.825, 0.000, 0.000, 0.000}, // HUNTLEY
	        {0.000, -1.389, 0.450, 0.000, 0.000, 0.000} // PREMIER
	    };

	if(vEnum[GetPlayerVehicleID(playerid)][v_stop_isEnabled] == true)
	{

	    vEnum[GetPlayerVehicleID(playerid)][v_stop_isEnabled] = false;

	    if(IsValidDynamicObject(vEnum[GetPlayerVehicleID(playerid)][v_stop_object_1]))
	        DestroyDynamicObject(vEnum[GetPlayerVehicleID(playerid)][v_stop_object_1]);

        if(IsValidDynamicObject(vEnum[GetPlayerVehicleID(playerid)][v_stop_object_2]))
	        DestroyDynamicObject(vEnum[GetPlayerVehicleID(playerid)][v_stop_object_2]);

        if(IsValidDynamicObject(vEnum[GetPlayerVehicleID(playerid)][v_stop_object_3]))
	        DestroyDynamicObject(vEnum[GetPlayerVehicleID(playerid)][v_stop_object_3]);

		EnterInfo(playerid, "~w~Tabula ~r~STOP ~w~bola vypnuta!");

	}
	else
	{

	    new
	        vindex = 0;

        switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
		{
		    case 402:
		        vindex = 0;

			case 560:
			    vindex = 1;

			case 579:
			    vindex = 2;

			case 426:
			    vindex = 3;

		}

	    vEnum[GetPlayerVehicleID(playerid)][v_stop_isEnabled] = true;

	    vEnum[GetPlayerVehicleID(playerid)][v_stop_object_1] = CreateDynamicObject(19810,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	    SetDynamicObjectMaterial(vEnum[GetPlayerVehicleID(playerid)][v_stop_object_1], 0, 14668, "711c", "bwtilebroth", 0);

	    vEnum[GetPlayerVehicleID(playerid)][v_stop_object_2] = CreateDynamicObject(19810,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	    SetDynamicObjectMaterialText(vEnum[GetPlayerVehicleID(playerid)][v_stop_object_2], 0, "STOP", 50, "Ariel", 20, 1, -2149067, 0, 0);

	    vEnum[GetPlayerVehicleID(playerid)][v_stop_object_3] = CreateDynamicObject(19797,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);

	    AttachDynamicObjectToVehicle(vEnum[GetPlayerVehicleID(playerid)][v_stop_object_1], GetPlayerVehicleID(playerid), stopSignPos_1[vindex][0], stopSignPos_1[vindex][1], stopSignPos_1[vindex][2], stopSignPos_1[vindex][3], stopSignPos_1[vindex][4], stopSignPos_1[vindex][5]);
	    AttachDynamicObjectToVehicle(vEnum[GetPlayerVehicleID(playerid)][v_stop_object_2], GetPlayerVehicleID(playerid), stopSignPos_2[vindex][0], stopSignPos_2[vindex][1], stopSignPos_2[vindex][2], stopSignPos_2[vindex][3], stopSignPos_2[vindex][4], stopSignPos_2[vindex][5]);
	    AttachDynamicObjectToVehicle(vEnum[GetPlayerVehicleID(playerid)][v_stop_object_3], GetPlayerVehicleID(playerid), stopSignPos_3[vindex][0], stopSignPos_3[vindex][1], stopSignPos_3[vindex][2], stopSignPos_3[vindex][3], stopSignPos_3[vindex][4], stopSignPos_3[vindex][5]);

        EnterInfo(playerid, "~w~Tabula ~r~STOP ~w~bola zapnuta!");
	}

	return 1;
}

YCMD:pokuta(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerAdminLevel(playerid) < 4 && !IsPlayerWorking(playerid))
	    return SendError(playerid, "Nie si v slube!");

	new
	    I_var,
	    I_var1,
	    S_var[128];

	if(sscanf(params, "dds[128]", I_var, I_var1, S_var))
	    return SendClientSyntax(playerid, "/pokuta [id] [suma] [dôvod]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(I_var, playerid, 3.5))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	if(I_var1 < 10 || I_var1 > 20000)
	    return SendClientSyntax(playerid, "/pokuta [id] [suma (10 - 20000)] [dôvod]");

	SCFM(I_var, 0xD0D0D0FF, "> %s ti udelil pokutu v hodnote %d$ za '%s'!", GetPlayerNameEx(playerid, NO_MASK), I_var1, S_var);

	web_LatestFormat("%s dostal pokutu", GetPlayerNameEx(I_var, NO_MASK));

	GivePlayerFine(ReturnName(I_var), I_var1, S_var, ReturnName(playerid));

    foreach( new x : Player )
	{
	    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
	        continue;

		if(!IsPlayerWorking(x) && GetPlayerAdminLevel(playerid) < 4)
		    continue;

		SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s dal pokutu v hodnote %d$, dôvodom '%s' hráèovi %s!", GetPlayerNameEx(playerid, NO_MASK), I_var1, S_var, GetPlayerNameEx(I_var, NO_MASK));
	}

	return 1;
}

YCMD:unit(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerFactionType(playerid) != FACTION_TYPE_TAXI)
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerAdminLevel(playerid) < 4 && !IsPlayerWorking(playerid))
	    return SendError(playerid, "Nie si v slube!");

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesedí v iadnom vozidle!");

	if(GetVehicleFactionType(GetPlayerVehicleID(playerid)) != FACTION_TYPE_LAW && GetVehicleFactionType(GetPlayerVehicleID(playerid)) != FACTION_TYPE_FIRE && GetVehicleFactionType(GetPlayerVehicleID(playerid)) != FACTION_TYPE_TAXI)
		return SendError(playerid, "Tomuto vozidlu nemôe zmeni unit!");

    if(GetVehicleFaction(GetPlayerVehicleID(playerid)) != GetPlayerFaction(playerid))
		return SendError(playerid, "Tomuto vozidlu nemôe zmeni unit!");

	new
	    vid = GetPlayerVehicleID(playerid),
		S_var[30];

	if(sscanf(params, "s[30]", S_var))
	    return SendClientSyntax(playerid, "/unit [jednotka (pre vypnutie \"vypnut\")]");

	if(!strcmp(S_var, "vypnut", false))
	{
	    if(vEnum[vid][v_unit_isUsed] == false)
	        return SendError(playerid, "Toto vozidlo nemá nastavenú jednotku!");

		UpdateFactionVehicleUnit(vid, "", true, true, playerid);
	}
	else
	{

	    new
			Float:X,
			Float:Y,
			Float:Z;

		GetVehicleModelInfo(GetVehicleModel(vid), VEHICLE_MODEL_INFO_SIZE, X, Y, Z);

	    if(vEnum[vid][v_unit_isUsed] == true)
	    {
	        UpdateDynamic3DTextLabelText(vEnum[vid][v_unit_Label], 0xffffffff, S_var);
	    }
	    else
	    {
	        vEnum[vid][v_unit_Label] = CreateDynamic3DTextLabel(S_var, 0xffffffff, 0.0, -Y/2.7, -0.2, 10.0, INVALID_PLAYER_ID, vid, 1, -1, -1, -1, 35.0, -1, 5);
	    }

	    format(vEnum[vid][v_unit_text], 32, S_var);

	    vEnum[vid][v_unit_isUsed] = true;

	    foreach( new x : Player )
		{
		    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
		        continue;

			if(!IsPlayerWorking(x))
			    continue;

			SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s nastavil jednotku jeho vozidla %s (%s) na \'%s\'!", GetPlayerNameEx(playerid, NO_MASK), GetVehicleName(vid), vEnum[vid][v_SPZ], S_var);
		}

		UpdateFactionVehicleUnit(vid, S_var, true, true);
	}
	return 1;
}

UpdateFactionVehicleUnit(vid, S_var[], bool:save, bool:announce, playerid = -1, bool:windshield=false)
{

	if(strlen(S_var) > 0)
	{
	    new
			Float:X,
			Float:Y,
			Float:Z;

		if(!windshield)
			GetVehicleModelInfo(GetVehicleModel(vid), VEHICLE_MODEL_INFO_SIZE, X, Y, Z);
		else
            GetVehicleModelInfo(GetVehicleModel(vid), VEHICLE_MODEL_INFO_WHEELSFRONT, X, Y, Z);
	    if(vEnum[vid][v_unit_isUsed] == true)
	    {
	        UpdateDynamic3DTextLabelText(vEnum[vid][v_unit_Label], 0xffffffff, S_var);
	    }
	    else
	    {
	        if(!windshield)
	        	vEnum[vid][v_unit_Label] = CreateDynamic3DTextLabel(S_var, 0xffffffff, 0.0, -Y/2.7, -0.2, 10.0, INVALID_PLAYER_ID, vid, 1, -1, -1, -1, 35.0, -1, 5);
			else
			    vEnum[vid][v_unit_Label] = CreateDynamic3DTextLabel(S_var, 0xffffffff, 0.0, Y/2.0, Z+1.2, 10.0, INVALID_PLAYER_ID, vid, 1, -1, -1, -1, 35.0, -1, 5);
	    }

	    format(vEnum[vid][v_unit_text], 32, S_var);

	    vEnum[vid][v_unit_isUsed] = true;

		if(announce == true && playerid != -1)
		{
		    foreach( new x : Player )
			{
			    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
			        continue;

				if(!IsPlayerWorking(x))
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s nastavil jednotku jeho vozidla %s (%s) na \'%s\'!", GetPlayerNameEx(playerid, NO_MASK), GetVehicleName(vid), vEnum[vid][v_SPZ], S_var);
			}
		}

		if(save == true)
		{
			new
			    query[ 256 ]
			;

			mysql_format(MYSQL, query, sizeof query, "UPDATE faction_vehicles SET UnitText = '%e' WHERE SPZ = '%e'", S_var, vEnum[vid][v_SPZ]);
			mysql_tquery(MYSQL, query);
		}
	}
	else
	{
	    vEnum[vid][v_unit_isUsed] = false;
        DestroyDynamic3DTextLabel(vEnum[vid][v_unit_Label]);
        format(vEnum[vid][v_unit_text], 32, "");

		if(playerid != -1 && announce == true)
		{
	        foreach( new x : Player )
			{
			    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
			        continue;

				if(!IsPlayerWorking(x) && GetPlayerAdminLevel(playerid) < 4)
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s zmazal jednotku z jeho vozidla %s (%s)!", GetPlayerNameEx(playerid, NO_MASK), GetVehicleName(vid), vEnum[vid][v_SPZ]);
			}
		}

		if(save == true)
		{
			new
			    query[ 256 ]
			;

			mysql_format(MYSQL, query, sizeof query, "UPDATE faction_vehicles SET UnitText = '' WHERE SPZ = '%e'", vEnum[vid][v_SPZ]);
			mysql_tquery(MYSQL, query);
		}
	}

	return 1;
}

YCMD:vytvoritatm(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesmie sedie v aute!");

	if(IsEditingATM[playerid] == true)
	    return SendError(playerid, "U edituje ATM!");

    for(new i; i < MAX_ATM; i++)
	{
 		if(atmEnum[i][atm_posX] != 0.0)
   			break;

        if(i >= MAX_ATM)
            return SendError(playerid, "Nie je volný slot na ATM!");

		continue;
	}

	new
	    Float:X,
	    Float:Y,
	    Float:Z,
	    Float:A;

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);

	Z -= 0.9;

	GetXYInFrontOfPlayer(playerid, X, Y, 2.0);

	IsEditingATM[playerid] = true;

    new
		objectid = CreateDynamicObject(19324, X, Y, Z, 0.0, 0.0, A, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 100.0, 70.0, -1, 1);

    Streamer_UpdateEx(playerid, X, Y+0.1, Z);

	EditDynamicObject(playerid, objectid);

	return 1;
}

YCMD:zmazatatm(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerDynamicATM(playerid) == -1)
	    return SendError(playerid, "Nestojí pri iadnom ATM!");

	new
		id = GetPlayerDynamicATM(playerid),
		query[1024];

	mysql_format(MYSQL, query, 1024, "DELETE FROM gm_atms WHERE X > '%f' AND X < '%f' AND Y > '%f' AND Y < '%f' AND Z > '%f' AND Z < '%f'",
 		atmEnum[id][atm_posX]-0.2, atmEnum[id][atm_posX]+0.2,
	    atmEnum[id][atm_posY]-0.2, atmEnum[id][atm_posY]+0.2,
		atmEnum[id][atm_posZ]-0.2, atmEnum[id][atm_posZ]+0.2);

	mysql_query(MYSQL, query, false);

   	atmEnum[id][atm_posX] = 0.0;
    atmEnum[id][atm_posY] = 0.0;
    atmEnum[id][atm_posZ] = 0.0;
    atmEnum[id][atm_posRX] = 0.0;
    atmEnum[id][atm_posRY] = 0.0;
    atmEnum[id][atm_posRZ] = 0.0;
    atmEnum[id][atm_posVW] = 0;
    atmEnum[id][atm_posINT] = 0;
    DestroyDynamicArea(atmEnum[id][atm_AreaID]);
	DestroyDynamicObject(atmEnum[id][atm_Object]);
	DestroyDynamic3DTextLabel(atmEnum[id][atm_Label]);

	SendError(playerid, "ATM úspene zmazané!");

	return 1;
}

YCMD:atm(playerid, params[], help)
{

	if(GetPlayerDynamicATM(playerid) == -1)
	    return SendError(playerid, "Nestojí pri iadnom ATM!");

	if(GetPlayerInventoryItem(playerid, inv_creditCard) < 1)
	    return SendError(playerid, "Nemá kreditnú kartu!");

	format(atm_PIN[playerid], 5, "");
	isUsingATM[playerid] = true;
	isUsingDialog[playerid] = false;

	TogglePlayerControllable(playerid, 0);

	new
		obj = atmEnum[GetPlayerDynamicATM(playerid)][atm_Object],

		Float:x,
		Float:y,
		Float:z,
		Float:rx,
		Float:ry,
		Float:rz;

	GetDynamicObjectPos(obj, x, y, z);
	GetDynamicObjectRot(obj, rx, ry, rz);

	SetPlayerCameraPos(playerid, x - 0.3 * floatsin(-rz, degrees), y - 0.3  * floatcos(-rz, degrees), z + 1.5);
	SetPlayerCameraLookAt(playerid, x + 0.2 * floatsin(-rz, degrees), y + 0.2  * floatcos(-rz, degrees), z);

	PlayerTextDrawSetString(playerid, ATM_TD_main5[playerid], "> Vitajte! Pre vstup do uctu prosim zadajte Vas PIN kod.");
	PlayerTextDrawSetString(playerid, ATM_TD_login8[playerid], "_");

	PlayerTextDrawShow(playerid, ATM_TD_main0[playerid]);
	PlayerTextDrawShow(playerid, ATM_TD_main1[playerid]);
	PlayerTextDrawShow(playerid, ATM_TD_main2[playerid]);
	PlayerTextDrawShow(playerid, ATM_TD_main3[playerid]);
	PlayerTextDrawShow(playerid, ATM_TD_main4[playerid]);
	PlayerTextDrawShow(playerid, ATM_TD_main5[playerid]);

	PlayerTextDrawShow(playerid, ATM_TD_login6[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login7[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login8[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login9[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login10[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login11[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login12[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login13[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login14[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login15[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login16[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login17[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login18[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login19[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login20[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login21[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login22[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login23[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login24[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login25[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login26[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login27[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login28[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login29[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login30[playerid]);
    PlayerTextDrawShow(playerid, ATM_TD_login31[playerid]);

    SelectTextDraw(playerid, 0x949494ff);
	return 1;
}

YCMD:zrusittest(playerid, params[], help)
{

	if(isDoingDMV[playerid] == false)
	    return SendError(playerid, "Nerobí autokolu!");

    PlayerTextDrawHide(playerid, TD_autoskola0[playerid]);
	PlayerTextDrawHide(playerid, TD_autoskola1[playerid]);
	PlayerTextDrawHide(playerid, TD_autoskola2[playerid]);

	DestroyDMV(playerid);

	SCFM(playerid, COLOR_COMMANDUSE, "[ AUTOKOLA ] {ffffff}Gratulujem. Tvoj test bol neúspený. Ty neschopák!");

	return 1;
}

YCMD:vypacit(playerid, params[], help)
{

	if(!IsPlayerNearAnyCrate(playerid))
	    return SendError(playerid, "Nie je tu iadna drevená krabica!");

	if(crateEnum[GetPlayerNearestCrate(playerid)][crate_Unlocked] == true)
	    return SendError(playerid, "Táto drevená krabica u je odomknutá!");

	if(GetPlayerInventoryItem(playerid, inv_pacidlo) < 1)
	    return SendError(playerid, "Nemá páèidlo!");

    SetPlayerInventoryItem(playerid, inv_pacidlo, GetPlayerInventoryItem(playerid, inv_pacidlo) - 1);

	crateEnum[GetPlayerNearestCrate(playerid)][crate_Unlocked] = true;

	new
	    const
			label_Text[ 60 ] = "{73bd8a}[ Drevená krabica ]\n\n{e7e7e7}Odomnutá\n/otvorit";

	UpdateDynamic3DTextLabelText(crateEnum[GetPlayerNearestCrate(playerid)][crate_Label], 0xFFFFFFFF, label_Text);

    new str[256];
	format(str,256,"* %s zaráa páèidlo do otvoru na drevenej krabici a potom ním trhá, èím krabicu otvára.",GetPlayerNameEx(playerid, USE_MASK));
	SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, str);

	ApplyAnimation(playerid, "BOMBER", "BOM_PLANT", 4.1, false, true, true, false, 0, true); // /polozit

	return 1;
}

YCMD:otvorit(playerid, params[], help)
{

	if(!IsPlayerNearAnyCrate(playerid))
	    return SendError(playerid, "Nie je tu iadna drevená krabica!");

	if(!IsPlayerNearAnyCrate(playerid))
	    return SendError(playerid, "Nie je tu iadna drevená krabica!");

	if(crateEnum[GetPlayerNearestCrate(playerid)][crate_Unlocked] == false)
	    return SendError(playerid, "Táto drevená krabica je zamknutá!");

    ShowPlayerCrateInventory(playerid, GetPlayerNearestCrate(playerid));

    new str[256];
	format(str,256,"* %s nazerá do drevenej krabice.",GetPlayerNameEx(playerid, USE_MASK));
	SendLocalMessage(playerid, ME_CHAT_RANGE, COLOR_VIOLET, str);

	return 1;
}

/*ShowGrowShop(playerid)
{
	return ShowPlayerDialog(playerid, did_growshop, DIALOG_STYLE_TABLIST_HEADERS, "GROW SHOP",
	    "Produkt\tCena\nSemienká marihuany\t{2fb838}%d$ / 10ks",
	    "KÚPI", "ZAVRIE");
}*/

YCMD:buyseeds(playerid, params[], help)
{

    if(!IsPlayerInDynamicMenu(playerid, menut_grow_shop))
	{
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");
	}

	if(GetPlayerIllegalFaction(playerid) == 0)
	    return SendError(playerid, "Nie si v ilegálnej frakcii!");

    if(GetPlayerIllegalFactionRank(playerid) < 5)
	    return SendError(playerid, "Aby si mohol objedna dodávku musí by aspoò rank 6 v ilegálnej frakcii!");

	if(i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Perm_Drug_Marijuana] == 0)
	    return SendError(playerid, "Tvoja ilegálna frakcia nemá prístup k drogám!");

	ShowPlayerMenu(playerid, menut_grow_shop);

	return 1;
}

YCMD:buycrate(playerid, params[], help)
{

    if(!IsPlayerInDynamicMenu(playerid, menut_buy_crate))
	{
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");
	}

	if(GetPlayerIllegalFaction(playerid) == 0)
	    return SendError(playerid, "Nie si v ilegálnej frakcii!");

    if(GetPlayerIllegalFactionRank(playerid) < 6)
	    return SendError(playerid, "Aby si mohol objedna dodávku musí by aspoò rank 7 v ilegálnej frakcii!");

	if(i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Perm_Guns] == 0)
	    return SendError(playerid, "Tvoja ilegálna frakcia nemá prístup k zbraniam!");


	for(new i; i < 5; i++) store_weapons[playerid][i] = 0;
	for(new i; i < 3; i++) store_kevlar[playerid][i] = 0;

    ShowPlayerIllegalStore(playerid);

	return 1;
}

YCMD:buystyle(playerid, params[], help)
{

    if(!IsPlayerInDynamicMenu(playerid, menut_gym))
	{
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");
	}

	ShowPlayerMenu(playerid, menut_gym);

	return 1;

}

YCMD:buyammo(playerid, params[], help)
{

    if(!IsPlayerInDynamicMenu(playerid, menut_buy_crate))
	{
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");
	}

	if(GetPlayerIllegalFaction(playerid) == 0)
	    return SendError(playerid, "Nie si v ilegálnej frakcii!");

    if(GetPlayerIllegalFactionRank(playerid) < 5)
	    return SendError(playerid, "Aby si kúpi náboje musí by aspoò rank 5 v ilegálnej frakcii!");

	if(i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Perm_Guns] == 0)
	    return SendError(playerid, "Tvoja ilegálna frakcia nemá prístup k zbraniam!");

    ShowPlayerAmmoShop(playerid);

	return 1;
}

YCMD:setvisibleobjects(playerid, params[], help)
{

	new
		I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/setvisibleobjects (/svo) [maximálny poèet objektov 350 - 2000]");

	if(I_var < 350 || I_var > 2000)
	    return SendClientSyntax(playerid, "/setvisibleobjects (/svo) [maximálny poèet objektov 350 - 2000]");

	SCFM(playerid, 0xD0D0D0FF, "> Poèet maximálnych streamovaných objektov zmenený z %d na %d!", SVO[playerid], I_var);

	SVO[playerid] = I_var;
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, SVO[playerid], playerid);

	Streamer_Update(playerid, -1);
	return 1;

}

YCMD:jail(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerAdminLevel(playerid) < 4 && !IsPlayerWorking(playerid))
	    return SendError(playerid, "Nie si v slube!");

	new
	    I_var,
	    I_var1,
	    S_var[128];

	if(sscanf(params, "dds[128]", I_var, I_var1, S_var))
	    return SendClientSyntax(playerid, "/jail [id] [poèet hodín] [dôvod]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(I_var, playerid, 3.5))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	new bool:isInRange = false, cellExtra=-1;

	for(new i; i < sizeof cell_Position; i++)
	{
	    if(!IsPlayerInRangeOfPoint(I_var, 5.0, cell_Position[i][0], cell_Position[i][1], cell_Position[i][2]))
	        continue;

		isInRange = true;
		cellExtra = floatround(cell_Position[i][3],floatround_round);
		break;
	}

	if(!isInRange)
	    return SendError(playerid, "Nestojí pri celách!");

	if(I_var1 < 1 || I_var1 > 12)
	    return SendClientSyntax(playerid, "/jail [id] [poèet hodín] [dôvod]");

	if(ic_isInJail[I_var] == true)
		return SendError(playerid, "Tento hráè u je vo väzení!");

	ic_isInJail[I_var] = true;
	ic_jailTime[I_var] = gettime() + (I_var1 * 3600);

	SCFM(I_var, 0xD0D0D0FF, "> %s a zatkol na %d hodín za '%s'! Bude prepustený %s.", GetPlayerNameEx(playerid, NO_MASK), I_var1, S_var, getdateunix(ic_jailTime[I_var]));

    foreach( new x : Player )
	{
	    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
	        continue;

		if(!IsPlayerWorking(x) && GetPlayerAdminLevel(playerid) < 4)
		    continue;

		SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s zatkol %s na %d hodín s dôvodom '%s'!", GetPlayerNameEx(playerid, NO_MASK), GetPlayerNameEx(I_var, NO_MASK), I_var1, S_var);
	}

	new done = 0;
	
	while(!done)
	{
	    new i = random(sizeof cell_Position);
	    
	    if(floatround(cell_Position[i][3], floatround_round) != cellExtra)
	        continue;
	        
		done=1;
	    
	    SetPlayerPos(I_var, cell_Position[i][0], cell_Position[i][1], cell_Position[i][2]);
		SetPlayerFacingAngle(I_var, 90.0);
		SetCameraBehindPlayer(I_var);
		
		break;
	}

	return 1;
}

YCMD:unjail(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerAdminLevel(playerid) < 4 && !IsPlayerWorking(playerid))
	    return SendError(playerid, "Nie si v slube!");

	new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/unjail [id]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(I_var, playerid, 10.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	if(ic_isInJail[I_var] == false)
		return SendError(playerid, "Tento hráè nie je vo väzení!");

	ic_isInJail[I_var] = false;
	ic_jailTime[I_var] = 0;

	SCFM(I_var, 0xD0D0D0FF, "> %s a prepustil z väzenia!", GetPlayerNameEx(playerid, NO_MASK));

    foreach( new x : Player )
	{
	    if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
	        continue;

		if(!IsPlayerWorking(x) && GetPlayerAdminLevel(playerid) < 4)
		    continue;

		SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s prepustil %s z väzenia!", GetPlayerNameEx(playerid, NO_MASK), GetPlayerNameEx(I_var, NO_MASK));
	}

	if(GetPlayerVirtualWorld(I_var) == 10867)
	        {
	            SetPlayerPos(I_var, -202.410, 986.505, 19.408);
	            SetPlayerFacingAngle(I_var, 270.0);
	        }
	        else
	        {
	            SetPlayerPos(I_var, 633.180, -571.944, 16.335);
	        	SetPlayerFacingAngle(I_var, 270.0);
	        }

    SetPlayerInterior(I_var, 0);
    SetPlayerVirtualWorld(I_var, 0);
    SetCameraBehindPlayer(I_var);

   	SCFM(I_var, COLOR_LIGHTGREEN, "> Bol si prepustený z väzenia, ui si slobodu!");
	return 1;
}

YCMD:prepustit(playerid, params[], help)
{
	if(ic_isInJail[playerid] == true)
	{
	    if(gettime() > ic_jailTime[playerid])
	    {

	        ic_isInJail[playerid] = false;
	        ic_jailTime[playerid] = 0;
	        
	        if(GetPlayerVirtualWorld(playerid) == 10867)
	        {
	            SetPlayerPos(playerid, -202.410, 986.505, 19.408);
	            SetPlayerFacingAngle(playerid, 270.0);
	        }
	        else
	        {
	            SetPlayerPos(playerid, 633.180, -571.944, 16.335);
	        	SetPlayerFacingAngle(playerid, 270.0);
	        }

	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
	        SetCameraBehindPlayer(playerid);

	        SCFM(playerid, COLOR_LIGHTGREEN, "> Bol si prepustený z väzenia, ui si slobodu!");

	        foreach( new x : Player )
			{
			    if(GetPlayerFactionType(x) != FACTION_TYPE_LAW)
			        continue;

				if(!IsPlayerWorking(x) && GetPlayerAdminLevel(playerid) < 4)
				    continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s bol prepustený z väzenia!", GetPlayerNameEx(playerid, NO_MASK));
			}
	    }
	    else
	        return SendError(playerid, "Nemôe by prepustený!");

 	}
	else
	    return SendError(playerid, "Nemôe by prepustený!");

	return 1;
}

YCMD:zasadit(playerid, params[], help)
{

	new
	    S_var[35],
	    I_var
	;

	if(sscanf(params, "s[35] D(0)", S_var, I_var))
	    return SendClientSyntax(playerid, "/zasadit [amnesiahaze-phattfruity-sourdiesel] <poèet vreciek hnojiva>");

    new weedsinv = -1, drugid = -1;

	if(!strcmp(S_var, "amnesiahaze", true))
		weedsinv = _:inv_weeds2, drugid = 1;
	else if(!strcmp(S_var, "phattfruity", true))
		weedsinv = _:inv_weeds1, drugid = 0;
	else if(!strcmp(S_var, "sourdiesel", true))
		weedsinv = _:inv_weeds3, drugid = 2;
	else
	    return SendClientSyntax(playerid, "/zasadit [amnesiahaze-phattfruity-sourdiesel] <poèet vreciek hnojiva>");

	if(I_var < 0 || GetPlayerInventoryItem(playerid, inv_hnojivo) < I_var)
	    return SendError(playerid, "Môe zada iba taký poèet hnojiva, ktorý má!");

	if(I_var > 3)
	    I_var = 3;

	if(GetPlayerInventoryItem(playerid, weedsinv) < 1)
	    return SendError(playerid, "Nemá semienko zvolenej marihuany!");

	for(new i; i < MAX_WEED; i++)
	{
	    if(strlen(weedEnum[i][weed_Owner]) < 3)
	        continue;

		if(!IsPlayerInDynamicArea(playerid, weedEnum[i][weed_Area], 0))
		    continue;

		return SendError(playerid, "Nesmie stá pri inej sadenici!");
	}

	new
	    Float:x, Float:y, Float:z,
		datum = gettime() + ((18 + random(11)) * 3600),
		query[1024];

    GetPlayerPos(playerid, x, y, z);

	z -= 0.8;

	mysql_format(MYSQL, query, 1024, "INSERT INTO gm_weed (X, Y, Z, VW, Interior, Owner, UnixPlaced, UnixFinish, DrugId, Hnojivo) VALUES ('%f', '%f', '%f', '%d', '%d', '%e', '%d', '%d', '%d', '%d')",
	    x,y,z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), ReturnName(playerid), gettime(), datum, drugid, I_var);

	mysql_tquery(MYSQL, query);

	SetPlayerInventoryItem(playerid, weedsinv, GetPlayerInventoryItem(playerid, weedsinv) - 1);
	SetPlayerInventoryItem(playerid, inv_hnojivo, GetPlayerInventoryItem(playerid, inv_hnojivo) - I_var);

	CreateWeed(x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), ReturnName(playerid), gettime(), datum, drugid, I_var);

	ApplyAnimation(playerid, "BOMBER", "BOM_PLANT", 4.1, false, true, true, false, 0, true); // /polozit

	SendSuccess(playerid, "Zasadil si semienko marihuany! Poèkaj kým vyrastie (18-30 hodín). Môe ju vytrhnú príkazom /vytrhnut!");

	FormatLog(log_type_player, "%s(%s - %s) zasadil sadenicu weedu (drugid: %s, hnojivo: %d) na pozicii %f, %f, %f!", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), drugid, I_var, x,y,z);
	return 1;
}

YCMD:vytrhnut(playerid, params[], help)
{

	new id = -1;

	for(new i; i < MAX_WEED; i++)
	{
	    if(strlen(weedEnum[i][weed_Owner]) < 3)
	        continue;

		if(!IsPlayerInDynamicArea(playerid, weedEnum[i][weed_Area], 0))
		    continue;

		id = i;
		break;
	}

	if(id == -1)
	    return SendError(playerid, "Nie je tu iadna marihuana!");

	if(gettime() < weedEnum[id][weed_UnixFinish])
	{

		new query[1024];
		mysql_format(MYSQL, query, 1024, "DELETE FROM gm_weed WHERE Owner = '%e' AND UnixPlaced = '%d' AND UnixFinish = '%d' LIMIT 1",
		    weedEnum[id][weed_Owner], weedEnum[id][weed_UnixPlaced], weedEnum[id][weed_UnixFinish]);

		mysql_tquery(MYSQL, query);

	    FormatLog(log_type_player, "%s(%s - %s) vytrhol sadenicu weedu od %s!", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), weedEnum[id][weed_Owner]);

		DestroyWeed(id);

		SCFM(playerid, 0xD0D0D0FF, "> Vytrhol si sadenicu marihuany!");

		ApplyAnimation(playerid, "BOMBER", "BOM_PLANT", 4.1, false, true, true, false, 0, true); // /polozit

	}
	else
	{
	    new query[1024];
		mysql_format(MYSQL, query, 1024, "DELETE FROM gm_weed WHERE Owner = '%e' AND UnixPlaced = '%d' AND UnixFinish = '%d' LIMIT 1",
		    weedEnum[id][weed_Owner], weedEnum[id][weed_UnixPlaced], weedEnum[id][weed_UnixFinish]);

		mysql_tquery(MYSQL, query);

	    FormatLog(log_type_player, "%s(%s - %s) pozbieral sadenicu weedu od %s!", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), weedEnum[id][weed_Owner]);

		new pocet = 0;

		switch(weedEnum[id][weed_DrugId])
		{

		    case 0:
		        pocet = 12 + random(3 * (weedEnum[id][weed_Hnojivo] + 1));

            case 1:
		        pocet = 8 + random(3 * (weedEnum[id][weed_Hnojivo] + 1));

            default:
		        pocet = 4 + random(3 * (weedEnum[id][weed_Hnojivo] + 1));
		}

		drug_givePlayerDrug(playerid, weedEnum[id][weed_DrugId], pocet);

		DestroyWeed(id);

		SCFM(playerid, 0xD0D0D0FF, "> Vytrhol si vyrastenú sadenicu marihuany a získal z nej %d gramov marihuany!", pocet);

		ApplyAnimation(playerid, "BOMBER", "BOM_PLANT", 4.1, false, true, true, false, 0, true); // /polozit
	}
	return 1;

}

/*YCMD:hulit(playerid, params[], help)
{

    if(GetPlayerInventoryItem(playerid, inv_weed) < 1)
	    return SendError(playerid, "Nemá marihuanu!");

	new
	    S_var[128];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/hulit [emócie]");

    SetPlayerInventoryItem(playerid, inv_weed, GetPlayerInventoryItem(playerid, inv_weed) - 1);

    new str[256];
	format(str,256,"* %s %s",GetPlayerNameEx(playerid, USE_MASK), S_var);
   	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,str);

   	new
   	    Float:hp;

	ahac_GetPlayerHealth(playerid, hp);
	if(hp + 30.0 > 150.0) hp = 150.0;
	else hp += 30.0;
	ahac_SetPlayerHealth(playerid, hp);

   	EnterInfo(playerid, "~w~Zhulil si sa, pribudlo ti ~b~30 HP~w~!~n~Maximalne mozes mat 150 HP.");

    FormatLog(log_type_player, "%s(%s - %s) vyhulil gram weedu, pribudlo mu 30HP!", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid));
	return 1;
}*/

new const allowed_Trailers[] = {
	403, // LINERUNNER
	514, // TANKER
	515, // ROADTRAIN
	407, // FIRE TRUCK
	525, // TOW TRUCK
	552, // UTILITY VAN
	531 // TRACTOR
};

YCMD:zahaknut(playerid, params[], help)
{

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesedí v iadnom vozidle!");

    if(GetPlayerVehicleSeat(playerid) != 0)
	    return SendError(playerid, "Aby si mohol zaháknu vozidlo, musí by ofér!");

	new
	    bool:isValid = false,
		vid = GetPlayerVehicleID(playerid),
		model = GetVehicleModel(vid);

	for( new i; i < sizeof allowed_Trailers; i++ )
	{
	    if(model != allowed_Trailers[i])
	        continue;

		isValid = true;
		break;
	}

	if(isValid == false)
	    return SendError(playerid, "Toto vozidlo nemôe zaháknu iadne iné vozidlo!");

	new
		vida = -1,
		Float:newdist = 0.0,
		Float:distance = 10.1,
		Float:pos[3],
		Float:ppos[3];

	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

	foreach ( new i : Vehicle ) {
		if(!IsValidVehicle(i)) continue;
		if(i == vid) continue;
		if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
		GetVehiclePos(i, pos[0], pos[1], pos[2]);

		newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

		if(newdist < distance) {
			vida = i;
			distance = newdist;
			continue;
		}
	}
	if(vida == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

	AttachTrailerToVehicle(vida, vid);

	EnterInfo(playerid, "Zahakol si vozidlo!");

    FormatLog(log_type_player, "%s(%s - %s) zahakol vozidlo %s (%s) na vozidlo %s (%s)!", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), VehicleNames[GetVehicleModel(vida)-400], vEnum[vida][v_SPZ], VehicleNames[model-400], vEnum[vid][v_SPZ]);

	return 1;
}

YCMD:odhaknut(playerid, params[], help)
{

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesedí v iadnom vozidle!");

    if(GetPlayerVehicleSeat(playerid) != 0)
	    return SendError(playerid, "Aby si mohol odháknu vozidlo, musí by ofér!");

	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	    return SendError(playerid, "Toto vozidlo nemá za sebou zaháknuté iadne iné vozidlo!");

	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));

    EnterInfo(playerid, "Odhakol si vozidlo!");

	return 1;
}

YCMD:gps(playerid, params[], help)
{
    ShowPlayerGPS(playerid);
	return 1;
}

YCMD:upravitgps(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 5)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

    ShowPlayerGPSEx(playerid);
	return 1;
}

YCMD:radio(playerid, params[], help)
{

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesedí v iadnom vozidle!");

	if(vEnum[GetPlayerVehicleID(playerid)][v_CarRadio] == 0)
	    return SendError(playerid, "Toto vozidlo nemá autorádio! Kúp ho v upgrade shope!");

    ShowCarRadioMenu(playerid);

	return 1;
}

YCMD:getcar(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    S_var[15];

	if(sscanf(params, "s[15]", S_var))
	    return SendClientSyntax(playerid, "/getcar [spz]");

	new vid = -1;
	foreach ( new i : Vehicle )
	{
	    if(strcmp(vEnum[i][v_SPZ], S_var, true))
	        continue;

		vid = i;
		break;
	}

	if(vid == -1)
	    return SendError(playerid, "Vozidlo s touto SPZ neexistuje!");

	new
	    Float:Pos[4];

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	Pos[0] += 4.0 * floatsin(-Pos[3], degrees);
	Pos[1] += 4.0 * floatcos(-Pos[3], degrees);

	SetVehiclePos(vid, Pos[0], Pos[1], Pos[2]);
	SetVehicleVirtualWorld(vid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vid, GetPlayerInterior(playerid));

	SendSuccess(playerid, "Vozidlo teleportované!");
	FormatWarnEx(playerid,3, "AdmCmd:", COLOR_ADMINCMD, "%s k sebe teleportoval vozidlo %s (%s)!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetVehicleName(vid), vEnum[vid][v_SPZ]);

	return 1;
}

YCMD:gotocar(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    S_var[15];

	if(sscanf(params, "s[15]", S_var))
	    return SendClientSyntax(playerid, "/gotocar [spz]");

	new vid = -1;
	foreach ( new i : Vehicle )
	{
	    if(strcmp(vEnum[i][v_SPZ], S_var, true))
	        continue;

		vid = i;
		break;
	}

	if(vid == -1)
	    return SendError(playerid, "Vozidlo s touto SPZ neexistuje!");

	new
	    Float:Pos[4];

	GetVehiclePos(vid, Pos[0], Pos[1], Pos[2]);
	GetVehicleZAngle(vid, Pos[3]);

	Pos[0] += 3.0 * floatsin(-Pos[3], degrees);
	Pos[1] += 3.0 * floatcos(-Pos[3], degrees);

	SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(vid));
	SetPlayerInterior(playerid, ex_GetVehicleInterior(vid));

	SendSuccess(playerid, "Teleportoval si sa k vozidlu!");
	FormatWarnEx(playerid,3, "AdmCmd:", COLOR_ADMINCMD, "%s sa teleportoval k vozidlu %s (%s)!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetVehicleName(vid), vEnum[vid][v_SPZ]);

	return 1;
}

YCMD:getcarid(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    vid;

	if(sscanf(params, "d", vid))
	    return SendClientSyntax(playerid, "/getcarid [id]");

	if(vid < 1 || vid > MAX_VEHICLES) return SendClientSyntax(playerid, "/gotocarid [id]");

	new
	    Float:Pos[4];

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	Pos[0] += 4.0 * floatsin(-Pos[3], degrees);
	Pos[1] += 4.0 * floatcos(-Pos[3], degrees);

	SetVehiclePos(vid, Pos[0], Pos[1], Pos[2]);
	SetVehicleVirtualWorld(vid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vid, GetPlayerInterior(playerid));

	SendSuccess(playerid, "Vozidlo teleportované!");
	FormatWarnEx(playerid,3, "AdmCmd:", COLOR_ADMINCMD, "%s k sebe teleportoval vozidlo %s (%s)!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetVehicleName(vid), vEnum[vid][v_SPZ]);

	return 1;
}

YCMD:gotocarid(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    vid;

	if(sscanf(params, "d", vid))
	    return SendClientSyntax(playerid, "/gotocarid [id]");

	if(vid < 1 || vid > MAX_VEHICLES) return SendClientSyntax(playerid, "/gotocarid [id]");
	new
	    Float:Pos[4];

	GetVehiclePos(vid, Pos[0], Pos[1], Pos[2]);
	GetVehicleZAngle(vid, Pos[3]);

	Pos[0] += 3.0 * floatsin(-Pos[3], degrees);
	Pos[1] += 3.0 * floatcos(-Pos[3], degrees);

	SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(vid));
	SetPlayerInterior(playerid, ex_GetVehicleInterior(vid));

	SendSuccess(playerid, "Teleportoval si sa k vozidlu!");
	FormatWarnEx(playerid,3, "AdmCmd:", COLOR_ADMINCMD, "%s sa teleportoval k vozidlu %s (%s)!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetVehicleName(vid), vEnum[vid][v_SPZ]);

	return 1;
}

YCMD:tunecar(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var,
	    componentid;

	if(sscanf(params, "dd", I_var, componentid))
	    return SendClientSyntax(playerid, "/tunecar [id hraca] [id tuningu]");

	if(!IsPlayerInAnyVehicle(I_var))
	    return SendError(playerid, "Tento hráè nie je v iadnom vozidle!");

    new vehicleide = GetVehicleModel(GetPlayerVehicleID(I_var));
	new modok = islegalcarmod(vehicleide, componentid);

	if(!modok)
	    return SendError(playerid, "Tento komponent nepatrí na toto vozidlo!");

	AddVehicleComponent(GetPlayerVehicleID(I_var), componentid);

	SendSuccess(playerid, "Komponent na vozidlo pridaný!");
	FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s pridal komponent %s na vozidlo %s (%s)!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetComponentName(componentid), GetVehicleName(GetPlayerVehicleID(I_var)), vEnum[GetPlayerVehicleID(I_var)][v_SPZ]);

	return 1;
}

YCMD:carcol(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var,
		c1,
		c2;

	if(sscanf(params, "ddd", I_var, c1, c2))
	    return SendClientSyntax(playerid, "/carcol [id hraca] [farba 1] [farba 2]");

	if(!IsPlayerInAnyVehicle(I_var))
	    return SendError(playerid, "Tento hráè nie je v iadnom vozidle!");

	ChangeVehicleColor(GetPlayerVehicleID(I_var), c1, c2);
	vEnum[GetPlayerVehicleID(I_var)][v_Color_1] = c1;
	vEnum[GetPlayerVehicleID(I_var)][v_Color_2] = c2;

	SendSuccess(playerid, "Vozidlo prefarbené!");
	FormatWarnEx(playerid,4, "AdmCmd:", COLOR_ADMINCMD, "%s prefarbil vozidlo %s (%s)!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetVehicleName(GetPlayerVehicleID(I_var)), vEnum[GetPlayerVehicleID(I_var)][v_SPZ]);

	return 1;
}

YCMD:fajcit(playerid, params[], help)
{

	if(GetPlayerInventoryItem(playerid, inv_cigarety) < 1)
	    return SendError(playerid, "Nemá cigarety!");

    if(GetPlayerInventoryItem(playerid, inv_zapalovac) < 1)
	    return SendError(playerid, "Nemá zapalovaè!");

	new
	    S_var[128];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/fajcit [emócie]");

	if(strlen(S_var) < 10)
	    return SendError(playerid, "Zadané emócie sú moc krátke!");

	SetPlayerInventoryItem(playerid, inv_cigarety, GetPlayerInventoryItem(playerid, inv_cigarety) - 1);
	SetPlayerInventoryItem(playerid, inv_zapalovac, GetPlayerInventoryItem(playerid, inv_zapalovac) - 1);

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);

	new str[256];
	format(str,256,"* %s %s",GetPlayerNameEx(playerid, USE_MASK), S_var);
   	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,str);

	return 1;
}

YCMD:pc(playerid, params[], help)
{

    if(phone_IsOut[playerid] != true)
        return SendError(playerid, "Najprv si vyber telefón príkazom /(ph)one!");

    SelectTextDraw(playerid, -858993409);
    phone_refreshTextdraw(playerid);

    return 1;

}

YCMD:phone(playerid, params[], help)
{

    if(phone_playerHasPhone(playerid) == 0)
		return SendError(playerid, "Nemá mobilný telefón!");

	if(ph_IsDialing[playerid] == true)
		return SendError(playerid, "Vytáèa nejaké èíslo ...");

	if(ph_IsTalking[playerid] == true)
	    return SendError(playerid, "Telefonuje..");

	if(phone_IsOut[playerid] == true)
	{

		for(new x; x < 27; x++)
		    PlayerTextDrawHide(playerid, PTD_phone_MAIN[playerid][x]),
		    PlayerTextDrawDestroy(playerid, PTD_phone_MAIN[playerid][x]);

		for(new x; x < 5; x++)
  			PlayerTextDrawHide(playerid, PTD_phone_MENU[playerid][x]),
  			PlayerTextDrawDestroy(playerid, PTD_phone_MENU[playerid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(playerid, PTD_phone_MESSAGES[playerid][x]),
  			PlayerTextDrawDestroy(playerid, PTD_phone_MESSAGES[playerid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(playerid, PTD_phone_OPTIONS[playerid][x]),
  			PlayerTextDrawDestroy(playerid, PTD_phone_OPTIONS[playerid][x]);

        for(new x; x < 3; x++)
  			PlayerTextDrawHide(playerid, PTD_phone_EXTRA[playerid][x]),
  			PlayerTextDrawDestroy(playerid, PTD_phone_EXTRA[playerid][x]);

		phone_SelectedTile[playerid] 	= 0;
  		phone_Screen[playerid] 			= 0;

  		CancelSelectTextDraw(playerid);

    	phone_IsOut[playerid] 			= false;

		return 1;
	}

	LoadPhone(playerid);

    phone_SelectedTile[playerid] 	= 0;
    phone_Screen[playerid]          = 0;
    phone_IsOut[playerid]           = true;

    SelectTextDraw(playerid, -858993409);

    EnterInfo(playerid, "~w~Telefon mozes zatvorit prikazom ~b~/phone~w~ alebo kliknutim na tlacidlo ~b~BACK~w~!");

    phone_refreshTextdraw(playerid);

	//ShowPlayerPhoneMenu(playerid);

	return 1;
}

YCMD:pick(playerid, params[], help)
{

 	if(ph_CanAccept[playerid] == false)
		return SendError(playerid, "Nemá èo zodvihnú!");

	new
		fromid = ph_CallWith[playerid];

	if(phonebotmp_id[fromid] == 0 && ph_Credit[fromid] <= 0 && ph_PayMode[fromid] == 1)
 	{
		SetPlayerSpecialAction(fromid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(fromid, 8);

		ph_IsTalking[playerid] = false;
		ph_IsTalking[fromid] = false;
		ph_IsDialing[playerid] = false;
		ph_IsDialing[fromid] = false;
		ph_IsWaiting[playerid] = false;
		ph_IsWaiting[fromid] = false;
		ph_CanAccept[playerid] = false;
		ph_CanAccept[fromid] = false;
		ph_IsCaller[fromid] = false;
		ph_IsCaller[playerid] = false;
		ph_CallWith[playerid] = -1;
		ph_CallWith[fromid] = -1;

		SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk preruenia hovoru**");
		SCFM(playerid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk preruenia hovoru**");

		return SetTimerEx("phone_timer_Message_NoCredit", 3000 + random(7000), false, "i", fromid);
  	}
  	else if(phonebotmp_id[fromid] != 0)
  	{
  	    CallRemoteFunction("phoneb_timer_Message_NoCredit", "i", fromid);
  	}

	ph_IsWaiting[fromid] = false;
	ph_IsCaller[fromid] = true;
	ph_IsCaller[playerid] = false;
	ph_CanAccept[playerid] = false;
	ph_timer[fromid] = SetTimerEx("timer_CheckCalling", 30000, true, "i", fromid);

    PlayerPlaySound(fromid, 1058, 0.0, 0.0, 0.0);

	ph_IsTalking[playerid] = true;
	ph_IsTalking[fromid] = true;

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	SetPlayerAttachedObject(playerid, 8, -1027, 6, 0.083, 0.024, 0.013, 0.0, -3.2);

	new str[256];
	if(phone_IsOut[fromid] == false && phonebotmp_id[fromid] == 0)
    {
	    LoadPhone(fromid);

	    phone_SelectedTile[fromid] 	= 0;
	    phone_Screen[fromid]          = 0;
	    phone_IsOut[fromid]           = true;

	    EnterInfo(fromid, "~w~Telefon mozes zatvorit prikazom ~b~/phone~w~ alebo kliknutim na tlacidlo ~b~BACK~w~!~n~Kurzor otvoris prikazom ~b~/pc~w~!");

	    phone_refreshTextdraw(fromid);

	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MENU[fromid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MESSAGES[fromid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_OPTIONS[fromid][x]);

		if(phonebotmp_id[playerid] != 0)	format(str,256, "Call in progress with~n~%s", replaceChars(phone_getPlayerContact(fromid, phone_getPlayerNumber(playerid))));
		else format(str,256, "Call in progress with~n~%s", phoneboEnum[ phonebotmp_id[playerid]-1 ][phonebo_Code]);
		PlayerTextDrawSetString(fromid, PTD_phone_EXTRA[fromid][1], str);

		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][0]);
		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][1]);
	}
	else if(phonebotmp_id[fromid] == 0)
	{

	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MENU[fromid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_MESSAGES[fromid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(fromid, PTD_phone_OPTIONS[fromid][x]);

	    if(phonebotmp_id[playerid] != 0)	format(str,256, "Call in progress with~n~%s", replaceChars(phone_getPlayerContact(fromid, phone_getPlayerNumber(playerid))));
		else format(str,256, "Call in progress with~n~%s", phoneboEnum[ phonebotmp_id[playerid]-1 ][phonebo_Code]);

		PlayerTextDrawSetString(fromid, PTD_phone_EXTRA[fromid][1], str);

		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][0]);
		PlayerTextDrawShow(fromid, PTD_phone_EXTRA[fromid][1]);
	}

	if(phone_IsOut[playerid] == false && phonebotmp_id[playerid] == 0)
    {
	    LoadPhone(playerid);

	    phone_SelectedTile[playerid] 	= 0;
	    phone_Screen[playerid]          = 0;
	    phone_IsOut[playerid]           = true;

	    EnterInfo(playerid, "~w~Telefon mozes zatvorit prikazom ~b~/phone~w~ alebo kliknutim na tlacidlo ~b~BACK~w~!~n~Kurzor otvoris prikazom ~b~/pc~w~!");

	    phone_refreshTextdraw(playerid);

	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(playerid, PTD_phone_MENU[playerid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(playerid, PTD_phone_MESSAGES[playerid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(playerid, PTD_phone_OPTIONS[playerid][x]);

	    if(phonebotmp_id[playerid] != 0)	format(str,256, "Call in progress with~n~%s", replaceChars(phone_getPlayerContact(playerid, phone_getPlayerNumber(fromid))));
		else format(str,256, "Call in progress with~n~%s", phoneboEnum[ phonebotmp_id[fromid]-1 ][phonebo_Code]);

		PlayerTextDrawSetString(playerid, PTD_phone_EXTRA[playerid][1], str);

		PlayerTextDrawShow(playerid, PTD_phone_EXTRA[playerid][0]);
		PlayerTextDrawShow(playerid, PTD_phone_EXTRA[playerid][1]);
	}
	else if(phonebotmp_id[playerid] == 0)
	{

	    for(new x; x < 5; x++)
  			PlayerTextDrawHide(playerid, PTD_phone_MENU[playerid][x]);

		for(new x; x < 2; x++)
  			PlayerTextDrawHide(playerid, PTD_phone_MESSAGES[playerid][x]);

		for(new x; x < 4; x++)
  			PlayerTextDrawHide(playerid, PTD_phone_OPTIONS[playerid][x]);

	    if(phonebotmp_id[playerid] != 0)	format(str,256, "Call in progress with~n~%s", replaceChars(phone_getPlayerContact(playerid, phone_getPlayerNumber(fromid))));
		else format(str,256, "Call in progress with~n~%s", phoneboEnum[ phonebotmp_id[fromid]-1 ][phonebo_Code]);

		PlayerTextDrawSetString(playerid, PTD_phone_EXTRA[playerid][1], str);

		PlayerTextDrawShow(playerid, PTD_phone_EXTRA[playerid][0]);
		PlayerTextDrawShow(playerid, PTD_phone_EXTRA[playerid][1]);
	}

	SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk zodvihnutia**");
	SCFM(playerid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk zodvihnutia**");

	return 1;
}

YCMD:hangup(playerid, params[], help)
{

	if(ph_IsTalking[playerid] == false && ph_IsDialing[playerid] == false && ph_CanAccept[playerid] == false && ph_IsWaiting[playerid] == false)
		return SendError(playerid, "Nemá èo poloi!");

	new
		fromid = ph_CallWith[playerid];

	if(fromid >= MAX_PLAYERS || fromid < 0)
	    fromid = playerid;

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	RemovePlayerAttachedObject(playerid, 8);

	if(ph_IsTalking[fromid] == true || ph_IsWaiting[fromid] == true || ph_IsDialing[fromid] == true)
	{
		SetPlayerSpecialAction(fromid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(fromid, 8);
		for(new x; x < 3; x++)
			PlayerTextDrawHide(fromid, PTD_phone_EXTRA[fromid][x]);
		phone_refreshTextdraw(fromid);
	}
	for(new x; x < 3; x++)
		PlayerTextDrawHide(playerid, PTD_phone_EXTRA[playerid][x]);

	phone_refreshTextdraw(playerid);

	ph_IsTalking[playerid] = false;
	ph_IsTalking[fromid] = false;
	ph_IsDialing[playerid] = false;
	ph_IsDialing[fromid] = false;
	ph_IsWaiting[playerid] = false;
	ph_IsWaiting[fromid] = false;
	ph_CanAccept[playerid] = false;
	ph_CanAccept[fromid] = false;

	TogglePlayerControllable(playerid, 1);
	TogglePlayerControllable(fromid, 1);

	phonebotmp_id[playerid] = 0;
	phonebotmp_id[fromid]   = 0;

	if(ph_IsCaller[playerid])
		KillTimer(ph_timer[playerid]);
	else if(fromid != playerid)
	    KillTimer(ph_timer[fromid]);

	ph_IsCaller[fromid] = false;
	ph_IsCaller[playerid] = false;
	ph_CallWith[playerid] = -1;
	ph_CallWith[fromid] = -1;

	if(fromid != playerid) SCFM(fromid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk poloenia**");
	SCFM(playerid, COLOR_PHONE_MESSAGE, "[ PHONE ] **Zvuk poloenia**");

	return 1;
}

YCMD:lastsms(playerid, params[], help)
{
    new
	    query[256],
	    Cache:c,

		finalString[ 4096 ];

	mysql_format(MYSQL, query, 256, "SELECT * FROM phone_list WHERE DisplayFor = '%e' AND ToNumber = '%d' ORDER BY Date DESC LIMIT 1",
		ReturnName(playerid), phone_getPlayerNumber(playerid));

	c = mysql_query(MYSQL, query);

	if(cache_num_rows() == 0)
	{
		if(phone_IsOut[playerid] == false)
	    {
			LoadPhone(playerid);
		    phone_SelectedTile[playerid] 	= 1;
		    phone_Screen[playerid]          = 1;
		    phone_IsOut[playerid]           = true;

		    EnterInfo(playerid, "~w~Telefon mozes zatvorit prikazom ~b~/phone~w~ alebo kliknutim na tlacidlo ~b~BACK~w~!~n~Kurzor na obrazovku vratis prikazom ~b~/pc~w~!");

		    phone_refreshTextdraw(playerid);
		}

		EnterInfo(playerid, "~w~Neprisli ti ziadne SMS spravy~w~!");

		return 1;
	}

	new
		to,
  		from,
    	text[256],
     	date;

	cache_get_value_name_int(0, "ToNumber", to);
 	cache_get_value_name_int(0, "FromNumber", from);
  	cache_get_value_name(0, "Text", text);
   	cache_get_value_name_int(0, "Date", date);

    if(to == phone_getPlayerNumber(playerid))
		format(finalString, sizeof finalString, "\tOd: %s, dátum: %s\n\n\r%s",
 			phone_getPlayerContact(playerid, from), getdateunix(date), text);
	else
		format(finalString, sizeof finalString, "\tOd: %s, dátum: %s\n\n\r%s",
 			phone_getPlayerContact(playerid, to), getdateunix(date), text);

	cache_delete(c);

    if(phone_IsOut[playerid] == false)
    {
		LoadPhone(playerid);
	    phone_SelectedTile[playerid] 	= 1;
	    phone_Screen[playerid]          = 1;
	    phone_IsOut[playerid]           = true;

	    EnterInfo(playerid, "~w~Telefon mozes zatvorit prikazom ~b~/phone~w~ alebo kliknutim na tlacidlo ~b~BACK~w~!~n~Kurzor na obrazovku vratis prikazom ~b~/pc~w~!");

	    phone_refreshTextdraw(playerid);
	}

	ShowPlayerDialog(playerid, did_phone_sms_last, DIALOG_STYLE_MSGBOX, "TELEFÓN - SPRÁVA", finalString, "ODPOVEÏ", "OK");

	return 1;
}

YCMD:vytvoritpumpu(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
		return SendError(playerid, "Tento prikaz nemôe poui!");

	new
		S_benzid,
		S_var[4][6],
		S_boxname[30];

	if(sscanf(params, "d s[6] s[6] s[6] s[6] s[30]", S_benzid, S_var[0], S_var[1], S_var[2], S_var[3], S_boxname))
		return SendClientSyntax(playerid, "/vytvoritpumpu [id biznisu] [benzín (y/n)] [diesel (y/n)] [kerosin (y/n)] [LPG (y/n)] [meno boxu]");

	if(S_benzid == 0)
		return SendError(playerid, "Zlé ID biznisu!");

    for (new i; i < MAX_FUEL_STATIONS; i++)
	{
		if(strcmp(fuelEnum[i][fuel_cislo_boxu], S_boxname, true))
		    continue;

		return SendError(playerid, "Box s týmto menom u existuje!");
	}

	for( new i; i < sizeof S_var; i++)
	{
		if(strcmp(S_var[i], "y", true) && strcmp(S_var[i], "n", true))
			return SendClientSyntax(playerid, "/vytvoritpumpu [id biznisu] [benzín (y/n)] [diesel (y/n)] [kerosin (y/n)] [LPG (y/n)] [meno boxu]");
	}

	new
		Float:x, Float:y, Float:z,
		Float:a,

		Float:price[4],
		storage[4],
		isusing[4];

	for( new i; i < 4; i++)
	{
		price[i] = 1.234;
		storage[i] = 500;

		if(!strcmp(S_var[i], "y", true))
			isusing[i] = 1;
		else
			isusing[i] = 0;
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	x += 0.6 * floatsin(-a, degrees);
	y += 0.6 * floatcos(-a, degrees);

	CreateDynamicFuelStation(x, y, z, S_benzid, S_boxname, price, storage, isusing);

	new
	    query[1024];

	mysql_format(MYSQL, query, sizeof query, "INSERT INTO gm_business_fuel (X, Y, Z, AssignedBusiness, Price_Benzin, Price_Diesel, Price_Kerosin, Price_LPG, Storage_Benzin, Storage_Diesel, Storage_Kerosin, Storage_LPG, IsUsing_Benzin, IsUsing_Diesel, IsUsing_Kerosin, IsUsing_LPG, CisloBoxu) VALUES ('%f', '%f', '%f', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%e')",
		x, y, z, S_benzid, price[0], price[1], price[2], price[3], storage[0], storage[1], storage[2], storage[3], isusing[0], isusing[1], isusing[2], isusing[3], S_boxname);
	mysql_query(MYSQL, query, false);
	return 1;
}

YCMD:zmazatpumpu(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
	    S_var[30];

	if(sscanf(params, "s[30]", S_var))
	    return SendClientSyntax(playerid, "/zmazatpumpu [oznaèenie boxu]");

	new
		id = -1,
		query[144];

	for (new i; i < MAX_FUEL_STATIONS; i++)
	{
		if(strcmp(fuelEnum[i][fuel_cislo_boxu], S_var, true))
		    continue;

		id = i;
		break;
	}

	if(id == -1)
	    return SendError(playerid, "Box s týmto oznaèením neexistuje!");

	mysql_format(MYSQL, query, 144, "DELETE FROM gm_business_fuel WHERE CisloBoxu = '%e'",
	    fuelEnum[id][fuel_cislo_boxu]);

	mysql_query(MYSQL, query, false);

    format(fuelEnum[id][fuel_cislo_boxu], 30, "");

    fuelEnum[id][fuel_assig_biz] = 0;

    DestroyDynamicArea(fuelEnum[id][fuel_AreaID]);
	if(IsValidDynamic3DTextLabel(fuelEnum[id][fuel_Label]))
		DestroyDynamic3DTextLabel(fuelEnum[id][fuel_Label]);

    SendError(playerid, "Box úspene zmazaný!");

	return 1;
}

YCMD:doplnitpumpu(playerid, params[], help)
{

	new
	    S_var[30],
		S_var1[15];

	if(sscanf(params, "s[15] s[30]", S_var1, S_var))
	    return SendClientSyntax(playerid, "/doplnitpumpu [typ (benzin/diesel/kerosin/lpg)] [oznaèenie boxu]");

	new
		id = -1,
		isnear = 0,
		typ = -1;

	for (new i; i < MAX_FUEL_STATIONS; i++)
	{
		if(strcmp(fuelEnum[i][fuel_cislo_boxu], S_var, true))
		    continue;
		    
		id = i;
		
		if(!IsPlayerInRangeOfPoint(playerid, 7.5, fuelEnum[i][fuel_X], fuelEnum[i][fuel_Y], fuelEnum[i][fuel_Z]))
		    continue;

		isnear = 1;
		break;
	}

	if(id == -1)
	    return SendError(playerid, "Box s týmto oznaèením neexistuje!");
	    
    if(isnear != 1)
	    return SendError(playerid, "Si moc ïaleko od tohoto boxu!");

	if(!strcmp(S_var1, "benzin", true))
	    typ = 0;
	else if(!strcmp(S_var1, "diesel", true))
	    typ = 1;
    else if(!strcmp(S_var1, "kerosin", true))
	    typ = 2;
    else if(!strcmp(S_var1, "lpg", true))
	    typ = 3;
	else
	    return SendClientSyntax(playerid, "/doplnitpumpu [typ (benzin/diesel/kerosin/lpg)] [oznaèenie boxu]");

	/*foreach( new i : Businesses )
	{
	    if(businessEnum[i][bz_Address] != fuelEnum[id][fuel_assig_biz])
			continue;

		if(strcmp(businessEnum[i][bz_Owner], ReturnName(playerid), true) && GetPlayerAdminLevel(playerid) < 4)
			return SendError(playerid, "Tento box nemôe doplni!");

		break;
	}*/

	new
	    instorage = 0,
		add;

	if(typ == 0)
	    instorage = fuelEnum[id][fuel_st_benzin];
	else if(typ == 1)
	    instorage = fuelEnum[id][fuel_st_diesel];
	else if(typ == 2)
	    instorage = fuelEnum[id][fuel_st_kerosin];
	else if(typ == 3)
	    instorage = fuelEnum[id][fuel_st_lpg];

    if(palivocisterna[GetPlayerVehicleID(playerid)] < 1)
        return SendError(playerid,"Nemá naloené palivo!");

	if(GetVehicleTrailer(GetPlayerVehicleID(playerid)) == 0)
	    return SendError(playerid,"Nemá naloené palivo!");

	if(instorage > 499)
	    return SendError(playerid, "Tento box je plný!");

	add = (500-instorage);

	if(add > palivocisterna[GetPlayerVehicleID(playerid)]) add = palivocisterna[GetPlayerVehicleID(playerid)];

	if(add <= 0)
	    return SendError(playerid, "Nemá naloené palivo!");

    palivocisterna[GetPlayerVehicleID(playerid)] -= add;

	if(typ == 0)
	    fuelEnum[id][fuel_st_benzin] += add;
	else if(typ == 1)
	    fuelEnum[id][fuel_st_diesel] += add;
	else if(typ == 2)
	    fuelEnum[id][fuel_st_kerosin] += add;
	else if(typ == 3)
	    fuelEnum[id][fuel_st_lpg] += add;

	SCFM(playerid, COLOR_ADMINCMD, "> Doplnil si box %s s %dL paliva! Ostáva ti %dL!", S_var, add, palivocisterna[GetPlayerVehicleID(playerid)]);

	ReloadBoxLabel(id);

	SendSuccess(playerid, "Box doplnený!");

	return 1;
}

YCMD:kanister(playerid, params[], help)
{

	if(kanisterType[playerid] == 0)
	    return SendError(playerid, "Nemá kanister!");

	if(GetPlayerInventoryItem(playerid, inv_kanister) <= 0)
	    return SendError(playerid, "Tento kanister je prázdny!");

    new
		vid = -1,
		Float:newdist = 0.0,
		Float:distance = 3.1,
		Float:pos[3],
		Float:ppos[3];

	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

	foreach ( new i : Vehicle )
	{

		if(!IsValidVehicle(i)) continue;
		if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
		GetVehiclePos(i, pos[0], pos[1], pos[2]);

		newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

		if(newdist < distance) {
			vid = i;
			distance = newdist;
			continue;
		}

	}
	if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

	if(GetVehicleParams(vid, VEHICLE_TYPE_ENGINE) == 1)
	    return SendError(playerid, "Toto vozidlo má zapnutý motor!");

	if(vEnum[vid][v_Fuel] >= 100)
	    return SendError(playerid, "Toto vozidlo má plnú nádr!");

    vEnum[vid][v_Fuel] += GetPlayerInventoryItem(playerid, inv_kanister);
    vEnum[vid][v_FuelType] = kanisterType[playerid];
    SetPlayerInventoryItem(playerid, inv_kanister, 0);
    if(vEnum[vid][v_Fuel] > 100) SetPlayerInventoryItem(playerid, inv_kanister, vEnum[vid][v_Fuel]-100);

    SendSuccess(playerid, "Vozidlo natankované!");

	return 1;
}

YCMD:natankovat(playerid, params[], help)
{

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nemôe tankova, pokia¾ sedí vo vozidle!");

	new
	    S_var[12];

	if(sscanf(params, "s[12]", S_var))
	    return SendClientSyntax(playerid, "/natankovat [benzin - diesel - kerosin - LPG]");

	new
	    benzinid = -1;

	if(!strcmp(S_var, "benzin", true))
	    benzinid = 0;
	else if(!strcmp(S_var, "diesel", true))
	    benzinid = 1;
    else if(!strcmp(S_var, "kerosin", true))
	    benzinid = 2;
    else if(!strcmp(S_var, "lpg", true))
	    benzinid = 3;

	if(benzinid == -1)
	    return SendError(playerid, "Takýto typ paliva neponúkajú!");

	new
		id = -1;

	for (new i; i < MAX_FUEL_STATIONS; i++)
	{
		if(fuelEnum[i][fuel_assig_biz] == 0)
		    continue;

		if(!IsPlayerInDynamicArea(playerid, fuelEnum[i][fuel_AreaID], 0))
		    continue;

		id = i;
		break;
	}

	if(id == -1)
	    return SendError(playerid, "Nie je tu iadny box!");

	if((fuelEnum[id][fuel_is_benzin] == 0 && benzinid == 0) ||
	    (fuelEnum[id][fuel_is_diesel] == 0 && benzinid == 1) ||
	    (fuelEnum[id][fuel_is_kerosin] == 0 && benzinid == 2) ||
	    (fuelEnum[id][fuel_is_lpg] == 0 && benzinid == 3))
		return SCError(playerid, "Takýto typ paliva box %s neponúka!", fuelEnum[id][fuel_cislo_boxu]);

    if((fuelEnum[id][fuel_st_benzin] == 0 && benzinid == 0) ||
	    (fuelEnum[id][fuel_st_diesel] == 0 && benzinid == 1) ||
	    (fuelEnum[id][fuel_st_kerosin] == 0 && benzinid == 2) ||
	    (fuelEnum[id][fuel_st_lpg] == 0 && benzinid == 3))
		return SCError(playerid, "Tento typ paliva box %s nemá na sklade!", fuelEnum[id][fuel_cislo_boxu]);

	if((floatround(fuelEnum[id][fuel_pr_benzin], floatround_round) > ex_GetPlayerMoney(playerid) && benzinid == 0) ||
        (floatround(fuelEnum[id][fuel_pr_diesel], floatround_round) > ex_GetPlayerMoney(playerid) && benzinid == 1) ||
        (floatround(fuelEnum[id][fuel_pr_kerosin], floatround_round) > ex_GetPlayerMoney(playerid) && benzinid == 2) ||
        (floatround(fuelEnum[id][fuel_pr_lpg], floatround_round) > ex_GetPlayerMoney(playerid) && benzinid == 3))
        return SendError(playerid, "Nemá dos peòazí!");

    new
		bool:jeKupenaBenzinka = false;

	for(new i; i < MAX_FUEL_STATIONS; i++)
	{
	    if(fuelEnum[i][fuel_assig_biz] == 0)
	        continue;

		if(jeKupenaBenzinka == true)
		    break;

		foreach( new x : Businesses )
		{
		    if(businessEnum[x][bz_Address] != fuelEnum[i][fuel_assig_biz])
		        continue;

			if(strlen(businessEnum[x][bz_Owner]) < 4)
			    continue;

			jeKupenaBenzinka = true;

			break;
		}
	}

    foreach( new i : Businesses )
	{
	    if(businessEnum[i][bz_Address] != fuelEnum[id][fuel_assig_biz])
			continue;

		if(strlen(businessEnum[i][bz_Owner]) < 4 && jeKupenaBenzinka == true)
		{
            return SendError(playerid, "Momentálne máme zatvorené, bohuial, natankujte prosím inde!");
		}

		break;
	}

	new
		vid = -1,
		Float:newdist = 0.0,
		Float:distance = 3.1,
		Float:pos[3],
		Float:ppos[3];

	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

	foreach ( new i : Vehicle )
	{

		if(!IsValidVehicle(i)) continue;
		if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
		GetVehiclePos(i, pos[0], pos[1], pos[2]);

		newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

		if(newdist < distance) {
			vid = i;
			distance = newdist;
			continue;
		}

	}
	if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

	if(GetVehicleParams(vid, VEHICLE_TYPE_ENGINE) == 1)
	    return SendError(playerid, "Toto vozidlo má zapnutý motor!");

	fstat_CanTankovat[playerid] = true;
	fstat_Tankuje[playerid] = false;
	fstat_IDAuta[playerid] = vid;
	fstat_NatankovalLitrov[playerid] = 0;
	fstat_TypPaliva[playerid] = benzinid;
	fstat_BoxID[playerid] = id;

	if(benzinid == 0) fstat_CenaZaLiter[playerid] = fuelEnum[id][fuel_pr_benzin];
	else if(benzinid == 1) fstat_CenaZaLiter[playerid] = fuelEnum[id][fuel_pr_diesel];
	else if(benzinid == 2) fstat_CenaZaLiter[playerid] = fuelEnum[id][fuel_pr_kerosin];
	else if(benzinid == 3) fstat_CenaZaLiter[playerid] = fuelEnum[id][fuel_pr_lpg];

	new tstring[128];

	format(tstring, 128, "~w~Tankujes palivo do vozidla ~b~%s~w~!~n~Stlac a drz ~b~SPACE~w~ pre tankovanie.", GetVehicleName(vid));

	EnterInfo(playerid, tstring, 15000, 5);

	return 1;
}

YCMD:fos(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(IsPlayerInAnyVehicle(playerid))
	{

	    new
			vid = -1;

	    vid = GetPlayerVehicleID(playerid);

		if(GetVehicleFactionType(vid) != FACTION_TYPE_FIRE)
	        return SendError(playerid, "Nie je tu iadne vozidlo ktoré je vybavené poèítaèom!");

		ShowPlayerFOS(playerid);
	}
    else if(IsPlayerInDynamicMenu(playerid, menut_fos))
	{
	    return ShowPlayerFOS(playerid);
	}
	else
		return SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:mdc(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_GOV && GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(IsPlayerInAnyVehicle(playerid))
	{

	    new
			vid = -1;

	    vid = GetPlayerVehicleID(playerid);

		if(GetVehicleFactionType(vid) != FACTION_TYPE_GOV && GetVehicleFactionType(vid) != FACTION_TYPE_LAW)
	        return SendError(playerid, "Nie je tu iadne vozidlo ktoré je vybavené MDC!");

		ShowPlayerMDC(playerid);
	}
    else if(IsPlayerInDynamicMenu(playerid, menut_mdc))
	{
	    return ShowPlayerMDC(playerid);
	}
	else
		return SendError(playerid, "Nie si ani vo vozidle s MDC ani pri poèítaèi!");

	return 1;
}

YCMD:clothing(playerid, params[], help)
{

	new
	    S_var[3],
	    I_var;

	if(!sscanf(params, "s[3] d", S_var, I_var))
	{
		if(!strcmp(S_var, "p", true) || !strcmp(S_var, "n", true))
		{
			I_var --;
		    if(I_var < 0 || I_var > 19)
		        return SendError(playerid, "Zadal si zlý slot!");

		    if(playerAttachments[playerid][I_var][MODELID] == 0)
			    return SendError(playerid, "Na tomto slote nemá iadny doplnok!");

			if(playerAttachments[playerid][I_var][ACTIVE] == true)
			    return SendError(playerid, "Tento objekt u má nasadený!");

			new
				volnyslot = -1,
				i = I_var;

			for ( new index; index < ATTACH_MAX_SLOTS; index ++ )
			{

			    if(IsPlayerAttachedObjectSlotUsed(playerid, index))
		        	continue;

				volnyslot = index;

				break;

			}

			playerAttachments[playerid][ i ][INDEX] = volnyslot;
			playerAttachments[playerid][ i ][ACTIVE] = true;

            SetPlayerAttachedObject(playerid, volnyslot,
	       		playerAttachments[playerid][ i ][MODELID],
	  			playerAttachments[playerid][ i ][BONE],
	     		playerAttachments[playerid][ i ][FOFFSETX],
	       		playerAttachments[playerid][ i ][FOFFSETY],
		        playerAttachments[playerid][ i ][FOFFSETZ],
		        playerAttachments[playerid][ i ][FROTX],
		        playerAttachments[playerid][ i ][FROTY],
		        playerAttachments[playerid][ i ][FROTZ],
		        playerAttachments[playerid][ i ][FSCALEX],
		        playerAttachments[playerid][ i ][FSCALEY],
		        playerAttachments[playerid][ i ][FSCALEZ],
	        	playerAttachments[playerid][ i ][COLOR1],
	        	playerAttachments[playerid][ i ][COLOR2]
			);

			SendSuccess(playerid, "Doplnok nasadený!");

			return 1;

		}
		else if(!strcmp(S_var, "d", true))
		{
		    I_var --;
		    if(I_var < 0 || I_var > 19)
		        return SendError(playerid, "Zadal si zlý slot!");

		    if(playerAttachments[playerid][I_var][MODELID] == 0)
			    return SendError(playerid, "Na tomto slote nemá iadny doplnok!");

			if(playerAttachments[playerid][I_var][ACTIVE] == false)
			    return SendError(playerid, "Tento objekt nemá nasadený!");

			RemovePlayerAttachedObject(playerid, playerAttachments[playerid][ I_var ][INDEX] );
			playerAttachments[playerid][ I_var ][INDEX] = -1;
			playerAttachments[playerid][ I_var ][ACTIVE] = false;

			SendSuccess(playerid, "Doplnok sundaný!");

			return 1;
		}
	}

    Attachment_Show(playerid);

	return 1;

}

YCMD:nabitzbran(playerid, params[], help)
{

	if(GetPlayerWeapon(playerid) < 22 || GetPlayerWeapon(playerid) > 35)
	    return SendError(playerid, "Túto zbraò nemôe nabi!");

	new
	    I_var,
		MaxAmmo = 500000;

	for( new i; i < sizeof maxWeaponAmmo; i++)
	{

	    if(maxWeaponAmmo[i][0] != GetPlayerWeapon(playerid))
	        continue;

		MaxAmmo = maxWeaponAmmo[i][1];

		break;
	}

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/nabitzbran [poèet nábojov]");

    if(GetPlayerAmmo(playerid) > MaxAmmo)
	    SetPlayerAmmo(playerid, GetPlayerWeapon(playerid), MaxAmmo);

	if(I_var > GetPlayerInventoryItem(playerid, inv_naboje))
	    return SendError(playerid, "Nemá to¾ko nábojov!");

	if(I_var < 1 || I_var + GetPlayerAmmo(playerid) > MaxAmmo)
	    return SCFM(playerid, COLOR_ADMINCMD, "> Nemôe nabi to¾ko nábojov, maximálne môe nabi %d nábojov!", MaxAmmo - GetPlayerAmmo(playerid));

    Weapons::increaseAmmo(playerid, Weapons::getWeaponSlot(GetPlayerWeapon(playerid)), I_var);

	SetPlayerInventoryItem(playerid, inv_naboje, GetPlayerInventoryItem(playerid, inv_naboje) - I_var);

	SCFM(playerid, 0xD0D0D0FF, "> Zbraò %s nabitá s %d nábojmi! Nové náboje: %d!", GetWeaponNameEx(GetPlayerWeapon(playerid)), I_var, GetPlayerAmmo(playerid) + I_var);

    new
		S_finalString[128 + 25 + 5],
		S_first[25]
	;
	if(B_playerHasMask[playerid] == false) {
	    strcat(S_first, ReturnName(playerid));
	    strdel(S_first,strfind(S_first,"_",true),25);
	} else {
	    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
	}
	format(S_finalString, sizeof(S_finalString), "* %s prebíja zbraò.", S_first);
 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

	FormatLog(log_type_buythings, "%s(%s - %s) si nabil zbran %s (%d) s %d nabojmi! Nove naboje: %d", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), GetWeaponNameEx(GetPlayerWeapon(playerid)), GetPlayerAmmo(playerid), GetPlayerAmmo(playerid) + I_var);

	return 1;
}

function unfreezep(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

YCMD:bandaz(playerid, params[], help)
{

	new
	    I_var,
	    S_var[ 128 ];

	if(sscanf(params, "ds[128]",
		I_var, S_var))
		    return SendClientSyntax(playerid, "/bandaz [id] [emócie]");

	if(!IsPlayerLogged(I_var))
		return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(playerid, I_var, 3.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	if(IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(I_var))
	    return SendError(playerid, "Nesmiete sedie v iadnom vozidle!");

	if(strlen(S_var) < 15)
	    return SendError(playerid, "Emócie sú moc krátke!");

	if(!isBleeding[I_var])
	    return SendError(playerid, "Tento hráè nekrváca!");

	if(GetPlayerInventoryItem(playerid, inv_bandaz) < 1)
	    return SendError(playerid, "Nemá bandá, kúp jednu v General Store!");

    SetPlayerInventoryItem(playerid, inv_bandaz, GetPlayerInventoryItem(playerid, inv_bandaz) - 1);

   	isBleeding[I_var] = false;

	new
 		S_string[144];

	format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_var);
	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_string);

	FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s dal bandá na %s s emóciami '%s'!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	return 1;
}

function timer_HouseHeal(playerid)
{

    if(GetPlayerVirtualWorld(playerid) < MIN_HOUSE_ADDRESS || GetPlayerVirtualWorld(playerid) >= MAX_HOUSE_ADDRESS)
        return 0;

	new
	    Float:pHP;

	ahac_GetPlayerHealth(playerid, pHP);

	if(pHP + 2.5 >= 100.0)
	{
		ahac_SetPlayerHealth(playerid, 100.0);

		B_dmg_IsInDS[playerid] = false;

		B_isLegWounded[playerid] = false;

		isBleeding[playerid] = false;

		unStoppableAnim[playerid] = false;

		B_informDeath[playerid] = false;

	    B_allowDeath[playerid] = false;
		B_isFinallyDead[playerid] = false;

		TogglePlayerControllable(playerid, 1);

		if(T_timer_deathTimer[playerid] != -1) KillTimer(T_timer_deathTimer[playerid]);
		T_timer_deathTimer[playerid] = -1;

		if(IsValidDynamic3DTextLabel(T3D_dmg_Label[playerid]))
		{
			DestroyDynamic3DTextLabel(T3D_dmg_Label[playerid]);
			T3D_dmg_Label[playerid] = Text3D:INVALID_3DTEXT_ID;
		}

		for(new i; i < 80; i++)
		{
			I_dmg_Damages[playerid][i][0] = -1;
			I_dmg_Damages[playerid][i][1] = -1;
			I_dmg_Damages[playerid][i][2] = -1;
		}

		SendSuccess(playerid, "Tvoj ivot je plný, zranenia sa ti uzdravili!");

		return 1;
	}

	ahac_SetPlayerHealth(playerid, pHP + 2.5);

	SetTimerEx("timer_HouseHeal", 4000, false, "i", playerid);

	return 1;

}

YCMD:zivot(playerid, params[], help)
{

    if(GetPlayerVirtualWorld(playerid) >= MIN_HOUSE_ADDRESS && GetPlayerVirtualWorld(playerid) < MAX_HOUSE_ADDRESS)
    {

        SendSuccess(playerid, "Spustil si doplòovanie ivota, môe to trva a do troch minút!");
        SetTimerEx("timer_HouseHeal", 1, false, "i", playerid);

    }
    
    else
    
    {
        SendError(playerid, "Tento príkaz môe poui iba v dome!");
    }

    return 1;

}

YCMD:zivoty(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(!IsPlayerWorking(playerid))
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var,
	    S_var[ 128 ];

	if(sscanf(params, "ds[128]",
		I_var, S_var))
		    return SendClientSyntax(playerid, "/zivoty [id] [emócie]");

	if(!IsPlayerLogged(I_var))
		return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(playerid, I_var, 3.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesmie sedie v iadnom vozidle!");

	if(strlen(S_var) < 15)
	    return SendError(playerid, "Emócie sú moc krátke!");

    if(B_dmg_IsInDS[I_var] == true)
	{
	    new
		    damage,
		    bool:head = false;

	    for(new i; i < 80; i++)
		{
			if(I_dmg_Damages[I_var][i][0] < 1) continue;
			if(I_dmg_Damages[I_var][i][0] == 9)
			    head = true;

			damage += I_dmg_Damages[playerid][i][2];
		}

		if((damage > 160 || head == true))
		{
		    SendError(playerid, "Tomuto hráèovi niet pomoci, je màtvy, musí poui /death alebo dosta /heal od admina!");
		    return 1;
		}
	}

    ApplyAnimation(playerid, "BOMBER", "BOM_PLANT", 4.1, false, true, true, false, 0, true); // /polozit
    ApplyAnimation(I_var, "BOMBER", "BOM_PLANT", 4.1, false, true, true, false, 0, true); // /polozit

    new
        Float:pHP;

	ahac_GetPlayerHealth(I_var, pHP);

	if(pHP + 30.0 > 100.0)
	    pHP = 100.0;
	else
	    pHP += 30.0;

	ahac_SetPlayerHealth(I_var, pHP);

	isBleeding[I_var] = false;

	B_dmg_IsInDS[I_var] = false;
	B_isLegWounded[I_var] = false;
	isBleeding[I_var] = false;
	unStoppableAnim[I_var] = false;
	B_informDeath[I_var] = false;
    B_allowDeath[I_var] = false;
	B_isFinallyDead[I_var] = false;
	TogglePlayerControllable(I_var, 1);
	if(T_timer_deathTimer[I_var] != -1) KillTimer(T_timer_deathTimer[I_var]);
	T_timer_deathTimer[I_var] = -1;
	if(IsValidDynamic3DTextLabel(T3D_dmg_Label[I_var]))
	{
		DestroyDynamic3DTextLabel(T3D_dmg_Label[I_var]);
		T3D_dmg_Label[I_var] = Text3D:INVALID_3DTEXT_ID;
	}

	for(new i; i < 80; i++)
	{
		I_dmg_Damages[I_var][i][0] = -1;
		I_dmg_Damages[I_var][i][1] = -1;
		I_dmg_Damages[I_var][i][2] = -1;
	}

	new
 		S_string[144];

	format(S_string, 144, "* %s %s", GetPlayerNameEx(playerid, USE_MASK), S_var);
	SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_string);

	FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s dal ivoty %s s emóciami '%s'!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), S_var);
	return 1;
}

YCMD:duty(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_TAXI && GetPlayerFactionType(playerid) != FACTION_TYPE_MEDIA && GetPlayerFactionType(playerid) != FACTION_TYPE_MECHANIC)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

    if(!IsPlayerWorking(playerid))
	{

	    IsWorking[playerid] = true;

	    if(GetPlayerFactionType(playerid) == FACTION_TYPE_TAXI)
	    {

	 		new
	   			radioString[128];

			format(radioString, sizeof radioString, "[YELLOW CAB CO.] %s je on-duty! Pre odvoz volajte na '222-444-666'.",
			    GetPlayerNameEx(playerid, NO_MASK));

			SendClientMessageToAll(COLOR_YELLOW, radioString);

            BumpPlayerColor(playerid);
			I_pSkin_Work[playerid] = GetPlayerCustomSkin(playerid);

		}
		else if(GetPlayerFactionType(playerid) == FACTION_TYPE_MEDIA)
	    {

            foreach( new x : Player )
			{
		 		if(GetPlayerFactionType(x) != FACTION_TYPE_MEDIA)
		   			continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s je on-duty!", GetPlayerNameEx(playerid, NO_MASK));
			}

            BumpPlayerColor(playerid);
			I_pSkin_Work[playerid] = GetPlayerCustomSkin(playerid);

		}
		else if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC)
	    {

            foreach( new x : Player )
			{
		 		if(GetPlayerFactionType(x) != FACTION_TYPE_MECHANIC)
		   			continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s je on-duty!", GetPlayerNameEx(playerid, NO_MASK));
			}

            BumpPlayerColor(playerid);
			I_pSkin_Work[playerid] = GetPlayerCustomSkin(playerid);

		}

		EnterInfo(playerid, "~w~Vitaj v sluzbe!");
	}
	else
	{
        IsWorking[playerid] = false;
	    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MEDIA)
	    {

            foreach( new x : Player )
			{
		 		if(GetPlayerFactionType(x) != FACTION_TYPE_MEDIA)
		   			continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s je off-duty!", GetPlayerNameEx(playerid, NO_MASK));
			}

		}
		else if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC)
	    {

            foreach( new x : Player )
			{
		 		if(GetPlayerFactionType(x) != FACTION_TYPE_MECHANIC)
		   			continue;

				SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s je off-duty!", GetPlayerNameEx(playerid, NO_MASK));
			}

            BumpPlayerColor(playerid);

		}
	    EnterInfo(playerid, "~w~Odisiel si zo sluzby!");
	}
	return 1;

}

YCMD:pay(playerid, params[], help)
{

	new
		I_var,
		Float:S_var;

	if(sscanf(params, "df",I_var, S_var))
		return SendClientSyntax(playerid, "/pay [id] [suma]");

    MaskToId(I_var);

	if(!IsPlayerLogged(I_var))
		return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(I_var, playerid, 3.0))
		return SendError(playerid, "Tento hráè je moc ïaleko!");

    if(playerid == I_var)
	    return SendError(playerid, "Tento príkaz nemôe aplikova na seba!");

	if(cantManipulate[playerid] == true)
	    return SendError(playerid, "U niekomu nieèo posiela!");

    if(S_var < 0.1)
        return SendError(playerid, "Zadal si zlú sumu!");

    if(S_var > ex_GetPlayerMoney(playerid))
        return SendError(playerid, "To¾ko peòazí nemá!");

	invGive[playerid][1] = I_var;
	invGive[playerid][2] = 0;
	invGive[playerid][0] = floatround(S_var * 100, floatround_round);
	invEditItem[playerid] = 0;

    new
		string[128],
		item[32],
		itemchar[8],
		id=I_var;

	strcat(item, GetItemName(invEditItem[playerid]));
	item[0] = tolower(item[0]);

	switch(_:invEditItem[playerid])
	{
	    case 0:
	        format(itemchar, 8, "$");

		case 8:
		    format(itemchar, 8, " kg");

		default:
		    format(itemchar, 8, " ks");
	}

	if(invEditItem[playerid] == 0)
	{
		format(string, 128, "> Odoslal si ponuku hráèovi %s na podanie %s (%s%.2f)! Ponuka uplynie za 15 sekúnd.", GetPlayerNameEx(id, USE_MASK), item, itemchar, float(invGive[playerid][0]) / 100.0);
	}
	else
	    format(string, 128, "> Odoslal si ponuku hráèovi %s na podanie %s (%d%s)! Ponuka uplynie za 15 sekúnd.", GetPlayerNameEx(id, USE_MASK), item, invGive[playerid][0], itemchar);

    SCFM(playerid, COLOR_GREY, string);

    if(invEditItem[playerid] == 0)
    	format(string, 128, "> %s ti chce poda item %s (%s%.2f)!", GetPlayerNameEx(playerid, USE_MASK), item, itemchar, float(invGive[playerid][0]) / 100.0);
	else
	    format(string, 128, "> %s ti chce poda item %s (%d%s)!", GetPlayerNameEx(playerid, USE_MASK), item, invGive[playerid][0], itemchar);

    SCFM(id, COLOR_GREY, string);

    format(string, 128, "> Pre prijatie ponuky poui príkaz /accept item <%d>! Ponuka uplynie za 15 sekúnd.", ReturnID(playerid));
    SCFM(id, COLOR_GREY, string);

    cantManipulate[playerid] = true;

    SetTimerEx("timer_StopItemPonuka", 15*1000, false, "iiii", playerid, id, invEditItem[playerid], invGive[playerid][0]);

	return 1;
}

YCMD:givewep(playerid, params[], help)
{

	new
		I_var,
		S_var[32];

	if(sscanf(params, "d S(ruka)[32]",I_var, S_var))
		return SendClientSyntax(playerid, "/givewep [id]");

    MaskToId(I_var);

	if(!IsPlayerLogged(I_var))
		return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(I_var, playerid, 3.0))
		return SendError(playerid, "Tento hráè je moc ïaleko!");

    if(playerid == I_var)
	    return SendError(playerid, "Tento príkaz nemôe aplikova na seba!");

    new
		weap = 0,
		string[ 128 ];

	weap = GetPlayerWeapon(playerid);

	if(weap == 0)
		return SendError(playerid, "Túto zbraò nemôe poda!");

	if(GetPlayerAmmo(playerid) < 1)
		return SendError(playerid, "To¾ko nábojov v tejto zbrani nemá!");
		
	new
	    slot = Weapons::getWeaponSlot(weap)
	;
	
	if(playerWeapons[playerid][slot][pweapons_SerialNumber] < 1)
	    return SendError(playerid, "Túto zbraò nemôe poda, systém ju nepozná!");

    if(canHaveLargeWeapon(I_var, weap) == 0)
  		return SendError(playerid, "Uz ma jednu velku zbran!");

	give_Weapon[playerid][0] = weap;
	give_Weapon[playerid][1] = GetPlayerAmmo(playerid);
	give_Weapon[playerid][2] = I_var;

	SetTimerEx("GivePlayerWeaponTimer", 1000 * 15, false, "ii", playerid, I_var);

	format(string, 128, "> Odoslal si ponuku hráèovi %s na podanie zbrane %s! Ponuka uplynie za 15 sekúnd.", GetPlayerNameEx(I_var, USE_MASK), GetWeaponNameEx(weap));
	SCFM(playerid, COLOR_GREY, string);

	format(string, 128, "> %s ti chce poda zbraò %s!", GetPlayerNameEx(playerid, USE_MASK), GetWeaponNameEx(weap));
	SCFM(I_var, COLOR_GREY, string);

	format(string, 128, "> Pre prijatie ponuky poui príkaz /accept weapon <%d>! Ponuka uplynie za 15 sekúnd.", ReturnID(playerid));
	SCFM(I_var, COLOR_GREY, string);

	return 1;
}

YCMD:givevest(playerid, params[], help)
{

	new
		I_var;

	if(sscanf(params, "d",I_var))
		return SendClientSyntax(playerid, "/givevest [id]");

    MaskToId(I_var);

	if(!IsPlayerLogged(I_var))
		return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(I_var, playerid, 3.0))
		return SendError(playerid, "Tento hráè je moc ïaleko!");

	if(playerid == I_var)
	    return SendError(playerid, "Tento príkaz nemôe aplikova na seba!");

    new
		Float:Farmour,
		armour
	;

    new
    	string[128];

	ahac_GetPlayerArmour(playerid, Farmour);

	armour = floatround(Farmour, floatround_ceil);

	if(armour == 0)
		return SendError(playerid, "Nemá vestu!");

	give_Kevlar[playerid][0] = armour;
	give_Kevlar[playerid][1] = I_var;

	SetTimerEx("GivePlayerKevlarTimer", 1000 * 15, false, "ii", playerid, I_var);

	format(string, 128, "> Odoslal si ponuku hráèovi %s na podanie vesty! Ponuka uplynie za 15 sekúnd.", GetPlayerNameEx(I_var, USE_MASK));
	SCFM(playerid, COLOR_GREY, string);

	format(string, 128, "> %s ti chce poda zbraò vestu!", GetPlayerNameEx(playerid, USE_MASK));
	SCFM(I_var, COLOR_GREY, string);

	format(string, 128, "> Pre prijatie ponuky poui príkaz /accept kevlar <%d>! Ponuka uplynie za 15 sekúnd.", ReturnID(playerid));
	SCFM(I_var, COLOR_GREY, string);

	return 1;
}

YCMD:datauto(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var,
	    S_var[42];

	if(sscanf(params, "ds[42]", I_var, S_var))
	    return SendClientSyntax(playerid, "/datauto [id hráèa] [model]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

    if(GetPlayerDonatorLevel(I_var) < 1 && CountPlayerVehicles(I_var) >= MAX_PLAYER_VEHICLES)
    	return SendError(playerid, "Tento hráè nemá volný slot na vozidlo!");

	if(GetPlayerDonatorLevel(I_var) == 1 && CountPlayerVehicles(I_var) >= MAX_DON_1_VEHICLES)
 		return SendError(playerid, "Tento hráè nemá volný slot na vozidlo!");

	if(GetPlayerDonatorLevel(I_var) == 2 && CountPlayerVehicles(I_var) >= MAX_DON_2_VEHICLES)
		return SendError(playerid, "Tento hráè nemá volný slot na vozidlo!");

	if(GetPlayerDonatorLevel(I_var) == 3 && CountPlayerVehicles(I_var) >= MAX_DON_3_VEHICLES)
		return SendError(playerid, "Tento hráè nemá volný slot na vozidlo!");

    new
	    model = INVALID_VEHICLE_ID;

	if(!IsNumeric(S_var))
	    model = ReturnVehicleID(S_var);
	else
	    model = strval(S_var);

	if(model < 400 || model > 611 || model == INVALID_VEHICLE_ID)
		return SendError(playerid, "Takýto model neexistuje!");

    new
		vehicleid,
		SPZ[24];

	vehicleid = CreateVehicle(model, 641.148, -499.903, 16.078, 270.0, 1, 1, -1, 0);

	strcat(SPZ, SPZ_PATTERN);

	for(new i; i < sizeof(SPZ); i++)
	{
		if(SPZ[i] == '1')
		{
		    SPZ[i] = getRandomLetter();
		}
		else if(SPZ[i] == '2')
		{
		    SPZ[i] = (48 + random(10));
		}

		continue;
	}

	SetVehicleNumberPlate(vehicleid, SPZ);
	SetVehicleHealth(vehicleid, 1000.0);
	veh_IsDeath[vehicleid] = false;

	vEnum[vehicleid][v_Color_1] = 1;
	vEnum[vehicleid][v_Color_2] = 1;

	vEnum[vehicleid][v_Temporary] = false;
	vEnum[vehicleid][v_ELM] = false;
	vEnum[vehicleid][v_Radar] = false;
	vEnum[vehicleid][v_Taxameter] = false;
	vEnum[vehicleid][v_TaxameterItem] = 0;
	vEnum[vehicleid][v_NoBreakin] = 0;
	vEnum[vehicleid][v_TitWindows] = 0;
	vEnum[vehicleid][v_Alarm] = false;
	vEnum[vehicleid][v_AlarmItem] = 0;
	vEnum[vehicleid][v_Oil] = 100.0;
	
	vEnum[vehicleid][v_bazar_Price]   = 0;
	vEnum[vehicleid][v_bazar_Buyout]   = 0;
	vEnum[vehicleid][v_bazar_DateAdded]   = 0;
	vEnum[vehicleid][v_bazar_BoughtFor]   = 0;
	format(vEnum[vehicleid][v_bazar_Desc], 256, "");
	format(vEnum[vehicleid][v_bazar_AddedBy], MAX_PLAYER_NAME+1, "");

	format(vEnum[vehicleid][v_SPZ], 24, SPZ);
	format(vEnum[vehicleid][v_Owner], 30, ReturnName(I_var));
	vEnum[vehicleid][v_Fuel] = 100;
	vEnum[vehicleid][v_FuelType] = vehicleFuelTypes[GetVehicleModel(vehicleid)-400];
	vEnum[vehicleid][v_Battery] = 1000;
	vEnum[vehicleid][v_Siren] = 0;
	vEnum[vehicleid][v_MileAge] = 0.0;
	vEnum[vehicleid][v_Nitrous] = 0.0;
	vEnum[vehicleid][v_Faction] = 0;
	vEnum[vehicleid][v_CarRadio] = 0;

	vEnum[vehicleid][v_Sun_LDoor] = 0;
	vEnum[vehicleid][v_Sun_RDoor] = 0;
	vEnum[vehicleid][v_Sun_Hood] = 0;
	vEnum[vehicleid][v_Sun_Boot] = 0;
	vEnum[vehicleid][v_Sun_FBumper] = 0;
	vEnum[vehicleid][v_Sun_RBumper] = 0;

	vEnum[vehicleid][v_def_SpawnX] = 641.148;
	vEnum[vehicleid][v_def_SpawnY] = -499.903;
	vEnum[vehicleid][v_def_SpawnZ] = 16.078;
	vEnum[vehicleid][v_def_SpawnA] = 270.0;
	vEnum[vehicleid][v_def_SpawnVW] = 0;
	vEnum[vehicleid][v_def_SpawnINT] = 0;
	vEnum[vehicleid][v_def_Health] = 1000.0;

	new
 		S_string[144],
		S_query[1024];

	format(S_string, 144, "> Dal si vozidlo %s ( %s ) hráèovi %s!", VehicleNames[model-400], SPZ, GetPlayerNameEx(I_var, NO_MASK));
	SCFM(playerid, COLOR_COMMANDUSE, S_string);

    FormatWarnEx(playerid,5, "AdmCmd:", COLOR_ADMINCMD, "%s dal hráèske vozidlo %s (%s) hráèovi %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), VehicleNames[model-400], SPZ, GetPlayerNameEx(I_var, USE_PUREIDNAME));
	FormatLog(log_type_buythings, "%s(%s - %s) dal vozidlo %s(%s) hracovi %s(%s - %s).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), VehicleNames[model-400], SPZ, ReturnName(I_var), ReturnMaster(I_var), ReturnIP(I_var));

	mysql_format(MYSQL, S_query, 1024, "INSERT INTO char_vehicles (SPZ, Model, Park_X, Park_Y, Park_Z, Park_A, Park_VW, Park_INT, Color_1, Color_2, Paintjob, Fuel, Battery, Health, Owner, SecondOwner, isUnParked) VALUES ('%e', '%d', '641.148', '-499.903', '16.078', '270.0', '0', '0', '%d', '%d', '3', '100', '1000', '1000.0', '%e', '', '1')",
		SPZ, model, 1, 1, ReturnName(I_var));

	mysql_tquery(MYSQL, S_query);

	return 1;
}

YCMD:cenaauta(playerid, params[], help)
{

	/*if(GetPlayerAdminLevel(playerid) < 1 && GetPlayerFactionType(playerid) != FACTION_TYPE_BAZAR)
	    return SendError(playerid, "Tento príkaz nemôe poui!");*/

	new
	    S_var[42];

	if(sscanf(params, "s[42]", S_var))
	    return SendClientSyntax(playerid, "/cenaauta [model]");

	new
	    model = INVALID_VEHICLE_ID;

	if(!IsNumeric(S_var))
	    model = ReturnVehicleID(S_var);
	else
	    model = strval(S_var);

	if(model < 400 || model > 611 || model == INVALID_VEHICLE_ID)
		return SendError(playerid, "Takýto model neexistuje!");

	FormatWarn(playerid, "AdmCmd:", COLOR_ADMINCMD, "%s si zistil cenu vozidla %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), VehicleNames[model-400]);
	
	new query[164], price = -1, pricekr = -1, donlvl = 0;
	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM dealership_vehicles WHERE model = '%d'", model);
	new Cache:cache = mysql_query(MYSQL, query);
	if(cache_num_rows() > 0)
	{
	    cache_get_value_name_int(0, "price", price);
	    cache_get_value_name_int(0, "kredity", pricekr);
        cache_get_value_name_int(0, "donatorlevel", donlvl);
	}
	cache_delete(cache);
	
	if(price == -1 && pricekr == -1)
		SendError(playerid, "Tento model nie je v databázi!");
	else if(pricekr == -1)
	    SCError(playerid, "Vozidlo %s stojí %d$, potrebný donator level je %d.", VehicleNames[model-400], price, donlvl);
    else if(price == -1)
	    SCError(playerid, "Vozidlo %s stojí %d kreditov, potrebný donator level je %d.", VehicleNames[model-400], pricekr, donlvl);
	else
	    SCError(playerid, "Vozidlo %s stojí %d$ alebo %d kreditov, potrebný donator level je %d.", VehicleNames[model-400], price, pricekr, donlvl);
	return 1;

}

YCMD:flip(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/flip [hráè]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerInAnyVehicle(I_var))
	    return SendError(playerid, "Tento hráè nie je v aute!");

	SetVehicleZAngle(GetPlayerVehicleID(I_var), 0);

	SendSuccess(playerid, "Hráè prevrátený spä na kolesá!");

	FormatWarnEx(playerid,3, "AdmCmd:", COLOR_ADMINCMD, "%s prevrátil vozidlo hráèa %s spä na kolesá!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));

	return 1;

}

YCMD:slap(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var,
		Float:force;

	if(sscanf(params, "dF(0.0)", I_var, force))
	    return SendClientSyntax(playerid, "/slap [hráè] [force]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerInAnyVehicle(I_var))
	{
	    new
		    Float:X, Float:Y, Float:Z;

		GetPlayerVelocity(I_var, X, Y, Z);
		if(force == 0.0)
			SetPlayerVelocity(I_var, X, Y, Z + 0.15);
		else
		    SetPlayerVelocity(I_var, X, Y, Z + force);

		FadeColorForPlayer(I_var,255,0,0,255,0,0,0,0,2,1);
	}
	else
	{
		new
		    Float:X, Float:Y, Float:Z;

		GetVehicleVelocity(GetPlayerVehicleID(I_var), X, Y, Z);
		if(force == 0.0)
			SetVehicleVelocity(GetPlayerVehicleID(I_var), X, Y, Z + 0.24);
		else
		    SetVehicleVelocity(GetPlayerVehicleID(I_var), X, Y, Z + force);
	}

	SendSuccess(playerid, "Hráè slapnutý!");

	FormatWarnEx(playerid,3, "AdmCmd:", COLOR_ADMINCMD, "%s slapol hráèa %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));

	return 1;

}

YCMD:cislo(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/cislo [telefónne èíslo/id]");

	if(I_var < MAX_PLAYERS)
	{
	    if(!IsPlayerLogged(I_var))
	        return SendError(playerid, "Tento hráè nie je v hre!");

		if(phone_getPlayerNumber(I_var) == INVALID_PHONE_NUMBER)
		    return SendError(playerid, "Tento hráè nemá SIM kartu!");

		SCFM(playerid, 0xD0D0D0FF, "> Telefónne èíslo tohoto hráèa je: %d", phone_getPlayerNumber(I_var), phone_getPlayerNumber(I_var));
	    FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s si zistil telefónne èíslo hráèa %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	}
	else
	{
		I_var = phone_getPlayerFromNumber(I_var);

		if(I_var == INVALID_PHONE_PLAYER)
		    return SendError(playerid, "iadny online hráè s týmto èíslom neexistuje!");

		SCFM(playerid, 0xD0D0D0FF, "> Toto telefónne èíslo vlastní tento hráè: %s", GetPlayerNameEx(I_var, USE_PUREIDNAME));
	    FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s si zistil majite¾a telefónneho èísla (%s)!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	}

	return 1;
}

YCMD:maska(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/maska [id masky/hráèa]");

	MaskToId(I_var);

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je online!");

	SCFM(playerid, 0xD0D0D0FF, "> Hráè: %s - ID masky: %d", GetPlayerNameEx(I_var, USE_PUREIDNAME), I_playerMaskID[I_var]);
    FormatWarnEx(playerid,2, "AdmCmd:", COLOR_ADMINCMD, "%s si zistil ID masky/ID hráèa %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));

	return 1;

}

YCMD:togfchat(playerid, params[], help)
{
	if(GetPlayerFactionRank(playerid) < 9)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(factEnum[GetPlayerFaction(playerid)][fact_IsBlocked] == 0)
	{

	    factEnum[GetPlayerFaction(playerid)][fact_IsBlocked] = 1;

	    foreach( new x : Player )
		{
	 		if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
	   			continue;

			SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s zablokoval frakèný chat!", GetPlayerNameEx(playerid, NO_MASK));
		}

	}
	else
	{

	    factEnum[GetPlayerFaction(playerid)][fact_IsBlocked] = 0;

	    foreach( new x : Player )
		{
	 		if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
	   			continue;

			SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s odblokoval frakèný chat!", GetPlayerNameEx(playerid, NO_MASK));
		}

	}

	return 1;
}

YCMD:togmyfchat(playerid, params[], help)
{
    if(GetPlayerFaction(playerid) == 0)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(factEnum[GetPlayerFaction(playerid)][fact_IsBlocked] == 1)
	    return SendError(playerid, "Frakèný chat je vypnutý!");

	togfchat[playerid] = !togfchat[playerid];

	if(togfchat[playerid] == 1)
	{
	    SendError(playerid, "Frakèný chat vypnutý!");

	    foreach( new x : Player )
		{
			if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
				continue;

			if(togfchat[x] == 1 && x != playerid)
			    continue;

			SCFM(x, 0x61cc5dff, "(( %s si vypol frakèný chat! ))", GetPlayerNameEx(playerid, USE_PUREIDNAME));
		}
	}
	else
	{
	    SendSuccess(playerid, "Frakèný chat zapnutý!");

	    foreach( new x : Player )
		{
			if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
				continue;

			if(togfchat[x] == 1 && x != playerid)
			    continue;

			SCFM(x, 0x61cc5dff, "(( %s si zapol frakèný chat! ))", GetPlayerNameEx(playerid, USE_PUREIDNAME));
		}
	}

	return 1;
}

YCMD:f(playerid, params[], help)
{
	if(GetPlayerFaction(playerid) == 0)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(factEnum[GetPlayerFaction(playerid)][fact_IsBlocked] == 1)
	    return SendError(playerid, "Frakèný chat je vypnutý!");

	new
	    S_var[ 128 ];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/f [správa]");

	new tstr[192];
    if(strlen(GetPlayerFactionTitle(playerid)) < 1 || !strcmp(GetPlayerFactionTitle(playerid), "Nic", false))
		format(tstr,192, "(( %s: %s ))", GetPlayerNameEx(playerid, USE_PUREIDNAME), S_var);
	else
	    format(tstr,192, "(( %s %s: %s ))", GetPlayerFactionTitle(playerid), GetPlayerNameEx(playerid, USE_PUREIDNAME), S_var);


    foreach( new x : Player )
	{
		if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
			continue;

        if(togfchat[x] == 1)
   			continue;

		SendClientMessage(x, 0x61cc5dff, tstr);
	}

	return 1;
}

YCMD:tognchat(playerid, params[], help)
{
	if(GetPlayerIllegalFactionRank(playerid) < 9)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_IsBlocked] == 0)
	{

	    i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_IsBlocked] = 1;

	    foreach( new x : Player )
		{
	 		if(GetPlayerIllegalFaction(x) != GetPlayerIllegalFaction(playerid))
	   			continue;

			SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s zablokoval frakèný chat!", GetPlayerNameEx(playerid, NO_MASK));
		}

	}
	else
	{

	    i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_IsBlocked] = 0;

	    foreach( new x : Player )
		{
	 		if(GetPlayerIllegalFaction(x) != GetPlayerIllegalFaction(playerid))
	   			continue;

			SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s odblokoval frakèný chat!", GetPlayerNameEx(playerid, NO_MASK));
		}

	}

	return 1;
}

YCMD:togmynchat(playerid, params[], help)
{
    if(GetPlayerIllegalFaction(playerid) == 0)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_IsBlocked] == 1)
	    return SendError(playerid, "Frakèný chat je vypnutý!");

	tognchat[playerid] = !tognchat[playerid];

	if(tognchat[playerid] == 1)
	{
	    SendError(playerid, "Frakèný chat vypnutý!");

	    foreach( new x : Player )
		{
			if(GetPlayerIllegalFaction(x) != GetPlayerIllegalFaction(playerid))
				continue;

			if(tognchat[x] == 1 && x != playerid)
			    continue;

			SCFM(x, 0x61cc5dff, "(( %s si vypol frakèný chat! ))", GetPlayerNameEx(playerid, USE_PUREIDNAME));
		}
	}
	else
	{
	    SendSuccess(playerid, "Frakèný chat zapnutý!");

	    foreach( new x : Player )
		{
			if(GetPlayerIllegalFaction(x) != GetPlayerIllegalFaction(playerid))
				continue;

			if(tognchat[x] == 1 && x != playerid)
			    continue;

			SCFM(x, 0x61cc5dff, "(( %s si zapol frakèný chat! ))", GetPlayerNameEx(playerid, USE_PUREIDNAME));
		}
	}

	return 1;
}

YCMD:n(playerid, params[], help)
{
	if(GetPlayerIllegalFaction(playerid) == 0)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_IsBlocked] == 1)
	    return SendError(playerid, "Frakèný chat je vypnutý!");

	new
	    S_var[ 128 ];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/n [správa]");

    foreach( new x : Player )
	{
		if(GetPlayerIllegalFaction(x) != GetPlayerIllegalFaction(playerid))
			continue;

        if(tognchat[x] == 1)
   			continue;

		SCFM(x, 0x5ea35bff, "(( %s: %s ))", GetPlayerNameEx(playerid, NO_MASK), S_var);
	}

	return 1;
}


YCMD:upos(playerid,params[],help)
{
	if(GetPlayerAdminLevel(playerid) < 2) return SendError(playerid,"Tento príkaz nemozes pouzit!");
	SendSuccess(playerid,"Pozicia ulozena, pouzi /npos pre nacitanie!");
	GetPlayerPos(playerid,lastPos[playerid][0], lastPos[playerid][1], lastPos[playerid][2]);
    lastWorlds[playerid][0] = GetPlayerVirtualWorld(playerid);
    lastWorlds[playerid][1] = GetPlayerInterior(playerid);
	return 1;
}

YCMD:npos(playerid,params[], help) {
    if(GetPlayerAdminLevel(playerid) < 2) return SendError(playerid,"Tento prikaz nemozes pouzit!");
    if(lastPos[playerid][0] == 0) return SendError(playerid,"Nemas ulozenu poziciu, pouzi /upos!");
    SendSuccess(playerid,"Ulozena pozicia nacitana!");
    SetPlayerPos(playerid,lastPos[playerid][0], lastPos[playerid][1], lastPos[playerid][2]);
    SetPlayerVirtualWorld(playerid, lastWorlds[playerid][0]);
    SetPlayerInterior(playerid, lastWorlds[playerid][1]);
	return 1;
}

YCMD:id(playerid, params[], help) {
    new name[MAX_PLAYER_NAME];
    if(sscanf(params, "s[24]", name)) return SendClientSyntax(playerid, "/id [èas mena]");
    new counts = 0;
    new playername[MAX_PLAYER_NAME];

	if(GetPlayerAdminLevel(playerid) < 2)
	{
	    foreach (new i : Player) {
	        if(IsPlayerConnected(i)) {
	            GetPlayerName(i, playername, MAX_PLAYER_NAME);
	            if(strfind(playername, name, true) != -1 || (opt_HideMaster[i] == 0 && strfind(ReturnMaster(i), name, true) != -1)) {
	                if(counts == 0) {
	                    if(opt_HideMaster[i] == 1)
	                        SCFM(playerid, COLOR_GREY, "> %s (id: %d, level: %d,ping: %d)", GetPlayerNameEx(i, NO_MASK), i, GetPlayerRoleplayLevel(i), GetPlayerPing(i));
	                    else
	                    	SCFM(playerid, COLOR_GREY, "> %s (id: %d, level: %d, master: %s, ping: %d)", GetPlayerNameEx(i, NO_MASK), i, GetPlayerRoleplayLevel(i), ReturnMaster(i), GetPlayerPing(i));
	                    counts++;
	                    continue;
	                }
	                counts++;
	                if(opt_HideMaster[i] == 1)
	                	SCFM(playerid, COLOR_GREY, "> %s (id: %d, level: %d, ping: %d)", GetPlayerNameEx(i, NO_MASK), i, GetPlayerRoleplayLevel(i), GetPlayerPing(i));
	                else
	                	SCFM(playerid, COLOR_GREY, "> %s (id: %d, level: %d, master: %s, ping: %d)", GetPlayerNameEx(i, NO_MASK), i, GetPlayerRoleplayLevel(i), ReturnMaster(i), GetPlayerPing(i));

				}
	        }
		}
	}
	else
	{
	    foreach (new i : Player) {
	        if(IsPlayerConnected(i)) {
	            GetPlayerName(i, playername, MAX_PLAYER_NAME);
	            if(strfind(playername, name, true) != -1 || strfind(ReturnMaster(i), name, true) != -1) {
	                if(counts == 0) {
                		SCFM(playerid, COLOR_GREY, "> %s (id: %d, level: %d, master: %s, ping: %d)", GetPlayerNameEx(i, NO_MASK), i, GetPlayerRoleplayLevel(i), ReturnMaster(i), GetPlayerPing(i));
	                    counts++;
	                    continue;
	                }
	                counts++;
                	SCFM(playerid, COLOR_GREY, "> %s (id: %d, level: %d, master: %s, ping: %d)", GetPlayerNameEx(i, NO_MASK), i, GetPlayerRoleplayLevel(i), ReturnMaster(i), GetPlayerPing(i));
	            }
	        }
		}
	}

    if(counts == 0) return SendError(playerid, "iaden hráè nebol nájdený!");
    return 1;
}

YCMD:rfv(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	foreach( new i : Vehicle )
	{

	    if(GetVehicleFaction(i) == 0)
	        continue;
	        
		new istrailer = 0;
		switch(GetVehicleModel(i))
		{
		    case 435, 450, 584, 591:
		    {
		        istrailer = 1;
		    }
		}
		if(istrailer) continue;

		new
		    bool:isOccupied = false;

		foreach ( new pl : Player )
		{

		    if(!IsPlayerInAnyVehicle(pl))
		        continue;

			if(GetPlayerVehicleID(pl) != i)
			    continue;

			isOccupied = true;

			break;

		}

		if(isOccupied)
		    continue;
		
		if(ELM_CarHasModule(i))
		{
			if(gELM_vehicleRegime[i][ELM_LISTITEM_MAJAK] == 1)
			{
			    DestroyDynamicObject(gELM_vehicleMajakObject[i][0]);
		     	DestroyDynamicObject(gELM_vehicleMajakObject[i][1]);
			}
			gELM_vehicleRegime[i][ELM_LISTITEM_MAJAK] = 0;

			if(gELM_vehicleRegime[i][ELM_LISTITEM_FRONT] == 1)
			    DestroyDynamicObject(gELM_vehicleFrontObject[i]);
	        gELM_vehicleRegime[i][ELM_LISTITEM_FRONT] = 0;

		    if(gELM_vehicleRegime[i][ELM_LISTITEM_DIR_LEFT] == 1 || gELM_vehicleRegime[i][ELM_LISTITEM_DIR_RIGHT] == 1 || gELM_vehicleRegime[i][ELM_LISTITEM_DIR_BACK] == 1)
			    DestroyDynamicObject(gELM_vehicleDirectionalObject[i]);

	        gELM_vehicleRegime[i][ELM_LISTITEM_DIR_LEFT] 	= 0;
	        gELM_vehicleRegime[i][ELM_LISTITEM_DIR_RIGHT] 	= 0;
	        gELM_vehicleRegime[i][ELM_LISTITEM_DIR_BACK]    = 0;

			if(gELM_vehicleRegime[i][ELM_LISTITEM_SPOTLIGHT] == 1)
				DestroyDynamicObject(gELM_vehicleSpotlightObject[i]);

	        gELM_vehicleRegime[i][ELM_LISTITEM_SPOTLIGHT]   = 0;

			for( new x; x < ELM_MAX_STATIC_OBJECT; x++)
			{
			    if( gELM_vehicleStaticObject[i][x] != ELM_INVALID_STATIC_OBJECT )
			    {
			        DestroyDynamicObject(gELM_vehicleStaticObject[i][x]);
			        gELM_vehicleStaticObject[i][x] = ELM_INVALID_STATIC_OBJECT;
				}
			}
		}
		
		for(new ix; ix < 14; ix++)
		{
		    if(ix > 13)
		        break;

			tvehtuningresp[i][ix] = GetVehicleComponentInSlot(i, ix);

		}

		vEnum[i][v_FuelType] = vehicleFuelTypes[GetVehicleModel(i)-400];
		vEnum[i][v_Fuel] = 100;
		vEnum[i][v_Battery] = 1000;
		vEnum[i][v_Oil] = 100.0;
		vEnum[i][v_IsBeingRespawned] = true;

		if(GetVehicleFactionType(i) != FACTION_TYPE_BAZAR) RepairVehicle(i);
		SetVehicleToRespawn(i);
	}

	new
	    SCMFF[256];

	format(SCMFF, 256, "> %s respawnol vetky frakèné vozidilá!", GetPlayerNameEx(playerid, NO_MASK));
	SendClientMessageToAll(COLOR_ADMINCMD, SCMFF);

	return 1;

}

YCMD:respawnveh(playerid, params[], help)
{

	if(GetPlayerFaction(playerid) == 0 && GetPlayerAdminLevel(playerid) < 3)
        return SendError(playerid, "Tento príkaz nemôe poui!");

	if(GetPlayerFactionRank(playerid) < 9 && GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new S_var[32];
	if(sscanf(params,"s[32]", S_var))
	    return SendClientSyntax(playerid, "/respawnveh [vsetky/id vozidla (/dl)]");

	if(IsNumeric(S_var))
	{
	    new i = strval(S_var);

	    if(GetVehicleFaction(i) != GetPlayerFaction(playerid) && GetPlayerAdminLevel(playerid) < 3)
			return SendError(playerid, "Toto vozidlo nemôe respawnú!");

		new
		    bool:isOccupied = false;

		foreach ( new pl : Player )
		{

		    if(!IsPlayerInAnyVehicle(pl))
		        continue;

			if(GetPlayerVehicleID(pl) != i)
			    continue;

			isOccupied = true;

			break;

		}

		if(isOccupied)
		    return SendError(playerid, "V tomto vozidle niekto sedí!");

        if(ELM_CarHasModule(i))
		{
			if(gELM_vehicleRegime[i][ELM_LISTITEM_MAJAK] == 1)
			{
			    DestroyDynamicObject(gELM_vehicleMajakObject[i][0]);
		     	DestroyDynamicObject(gELM_vehicleMajakObject[i][1]);
			}
			gELM_vehicleRegime[i][ELM_LISTITEM_MAJAK] = 0;

			if(gELM_vehicleRegime[i][ELM_LISTITEM_FRONT] == 1)
			    DestroyDynamicObject(gELM_vehicleFrontObject[i]);
	        gELM_vehicleRegime[i][ELM_LISTITEM_FRONT] = 0;

		    if(gELM_vehicleRegime[i][ELM_LISTITEM_DIR_LEFT] == 1 || gELM_vehicleRegime[i][ELM_LISTITEM_DIR_RIGHT] == 1 || gELM_vehicleRegime[i][ELM_LISTITEM_DIR_BACK] == 1)
			    DestroyDynamicObject(gELM_vehicleDirectionalObject[i]);

	        gELM_vehicleRegime[i][ELM_LISTITEM_DIR_LEFT] 	= 0;
	        gELM_vehicleRegime[i][ELM_LISTITEM_DIR_RIGHT] 	= 0;
	        gELM_vehicleRegime[i][ELM_LISTITEM_DIR_BACK]    = 0;

			if(gELM_vehicleRegime[i][ELM_LISTITEM_SPOTLIGHT] == 1)
				DestroyDynamicObject(gELM_vehicleSpotlightObject[i]);

	        gELM_vehicleRegime[i][ELM_LISTITEM_SPOTLIGHT]   = 0;

			for( new x; x < ELM_MAX_STATIC_OBJECT; x++)
			{
			    if( gELM_vehicleStaticObject[i][x] != ELM_INVALID_STATIC_OBJECT )
			    {
			        DestroyDynamicObject(gELM_vehicleStaticObject[i][x]);
			        gELM_vehicleStaticObject[i][x] = ELM_INVALID_STATIC_OBJECT;
				}
			}
		}

		vEnum[i][v_FuelType] = vehicleFuelTypes[GetVehicleModel(i)-400];
		vEnum[i][v_Fuel] = 100;
		vEnum[i][v_Battery] = 1000;
		vEnum[i][v_Oil] = 100.0;
		vEnum[i][v_IsBeingRespawned] = true;
		
		for(new ix; ix < 14; ix++)
		{
		    if(ix > 13)
		        break;

			tvehtuningresp[i][ix] = GetVehicleComponentInSlot(i, ix);

		}
		
		SetVehicleToRespawn(i);
		if(GetVehicleFactionType(i) != FACTION_TYPE_BAZAR) RepairVehicle(i);

		SendSuccess(playerid, "Vozidlo respawnuté!");
	}
	else if(!strcmp(S_var, "vsetky", true))
	{

	    if(GetPlayerFaction(playerid) == 0)
        	return SendError(playerid, "Tento príkaz nemôe poui!");

		foreach( new i : Vehicle )
		{

		    if(GetVehicleFaction(i) != GetPlayerFaction(playerid))
		        continue;

			new
			    bool:isOccupied = false;

			foreach ( new pl : Player )
			{

			    if(!IsPlayerInAnyVehicle(pl))
			        continue;

				if(GetPlayerVehicleID(pl) != i)
				    continue;

				isOccupied = true;

				break;

			}

			if(isOccupied)
			    continue;

            if(ELM_CarHasModule(i))
			{
				if(gELM_vehicleRegime[i][ELM_LISTITEM_MAJAK] == 1)
				{
				    DestroyDynamicObject(gELM_vehicleMajakObject[i][0]);
			     	DestroyDynamicObject(gELM_vehicleMajakObject[i][1]);
				}
				gELM_vehicleRegime[i][ELM_LISTITEM_MAJAK] = 0;

				if(gELM_vehicleRegime[i][ELM_LISTITEM_FRONT] == 1)
				    DestroyDynamicObject(gELM_vehicleFrontObject[i]);
		        gELM_vehicleRegime[i][ELM_LISTITEM_FRONT] = 0;

			    if(gELM_vehicleRegime[i][ELM_LISTITEM_DIR_LEFT] == 1 || gELM_vehicleRegime[i][ELM_LISTITEM_DIR_RIGHT] == 1 || gELM_vehicleRegime[i][ELM_LISTITEM_DIR_BACK] == 1)
				    DestroyDynamicObject(gELM_vehicleDirectionalObject[i]);

		        gELM_vehicleRegime[i][ELM_LISTITEM_DIR_LEFT] 	= 0;
		        gELM_vehicleRegime[i][ELM_LISTITEM_DIR_RIGHT] 	= 0;
		        gELM_vehicleRegime[i][ELM_LISTITEM_DIR_BACK]    = 0;

				if(gELM_vehicleRegime[i][ELM_LISTITEM_SPOTLIGHT] == 1)
					DestroyDynamicObject(gELM_vehicleSpotlightObject[i]);

		        gELM_vehicleRegime[i][ELM_LISTITEM_SPOTLIGHT]   = 0;

				for( new x; x < ELM_MAX_STATIC_OBJECT; x++)
				{
				    if( gELM_vehicleStaticObject[i][x] != ELM_INVALID_STATIC_OBJECT )
				    {
				        DestroyDynamicObject(gELM_vehicleStaticObject[i][x]);
				        gELM_vehicleStaticObject[i][x] = ELM_INVALID_STATIC_OBJECT;
					}
				}
			}
			
			for(new ix; ix < 14; ix++)
			{
			    if(ix > 13)
			        break;

				tvehtuningresp[i][ix] = GetVehicleComponentInSlot(i, ix);

			}
			
			vEnum[i][v_FuelType] = vehicleFuelTypes[GetVehicleModel(i)-400];
			vEnum[i][v_Fuel] = 100;
			vEnum[i][v_Battery] = 1000;
			vEnum[i][v_Oil] = 100.0;
			vEnum[i][v_IsBeingRespawned] = true;
			
			if(GetVehicleFactionType(i) != FACTION_TYPE_BAZAR) RepairVehicle(i);

			SetVehicleToRespawn(i);

		}

		foreach( new x : Player )
		{

			if(GetPlayerFaction(x) != GetPlayerFaction(playerid))
	  			continue;

			SCFM(x, COLOR_LIGHTBLUE2, "[ WARN ] %s respawnol vetky frakèné vozidlá!", GetPlayerNameEx(playerid, NO_MASK));
		}

		FormatWarnEx(playerid, 2, "AdmCmd:", COLOR_ADMINCMD, "%s respawnol vetky frakèné vozidlá (%s)!", GetPlayerNameEx(playerid, NO_MASK), factEnum[GetPlayerFaction(playerid)][fact_Name]);

	}
	else
	    return SendClientSyntax(playerid, "/respawnveh [vsetky/id vozidla (/dl)]");

	return 1;

}

YCMD:vytvoritarrow(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
	    Float:Pos[4], VW, INTERIOR,
		S_Label[128],
		FactionId;

	if(sscanf(params,"ffffddds[128]", Pos[0], Pos[1], Pos[2], Pos[3], VW, INTERIOR, FactionId, S_Label))
	    return SendClientSyntax(playerid, "/vytvoritarrow [tox] [toy] [toz] [toangle] [tovw] [tointerior] [id frakcie (def.0)] [label]");

    format(S_Label, 128, str_replace("=", "\n", S_Label));

	new
	    Float:Pose[3];

	GetPlayerPos(playerid, Pose[0], Pose[1], Pose[2]);

	CreateDynamicArrow(Pose[0], Pose[1], Pose[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), Pos[0], Pos[1], Pos[2], Pos[3], VW, INTERIOR, S_Label, FactionId);

	new
	    query[1024];

	mysql_format(MYSQL, query, 1024, "INSERT INTO gm_arrows (X, Y, Z, VW, INTERIOR, ToX, ToY, ToZ, ToAngle, ToVW, ToINTERIOR, Label, Faction) VALUES ('%f', '%f', '%f', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%e', '%d')",
	    Pose[0], Pose[1], Pose[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), Pos[0], Pos[1], Pos[2], Pos[3], VW, INTERIOR, S_Label, FactionId);

	mysql_query(MYSQL, query, false);

	FormatWarnEx(playerid,6, "AdmCmd:", COLOR_ADMINCMD, "%s vytvoril nový arrow.", GetPlayerNameEx(playerid, USE_PUREIDNAME));

	SendSuccess(playerid, "Arrow vytvorený!");

	return 1;
}

YCMD:zmazatarrow(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerDynamicArrow(playerid) == -1)
	    return SendError(playerid, "Nestojí v iadnom menu!");

	new
		id = GetPlayerDynamicArrow(playerid),
		query[1024];

	mysql_format(MYSQL, query, 1024, "DELETE FROM gm_arrows WHERE VW = '%d' AND INTERIOR = '%d' AND ToVW = '%d' AND ToINTERIOR = '%d' AND X > '%f' AND X < '%f' AND Y > '%f' AND Y < '%f' AND Z > '%f' AND Z < '%f'",
	    arrowEnum[id][arr_VW], arrowEnum[id][arr_INTERIOR], arrowEnum[id][arr_ToVW], arrowEnum[id][arr_ToINTERIOR],
		arrowEnum[id][arr_X]-0.2, arrowEnum[id][arr_X]+0.2,
	    arrowEnum[id][arr_Y]-0.2, arrowEnum[id][arr_Y]+0.2,
		arrowEnum[id][arr_Z]-0.2, arrowEnum[id][arr_Z]+0.2);

	mysql_query(MYSQL, query, false);

    arrowEnum[id][arr_X] = 0.0;
    arrowEnum[id][arr_Y] = 0.0;
    arrowEnum[id][arr_Z] = 0.0;

    DestroyDynamicArea(arrowEnum[id][arr_AreaID]);
	if(IsValidDynamic3DTextLabel(arrowEnum[id][arr_LabelID]))
		DestroyDynamic3DTextLabel(arrowEnum[id][arr_LabelID]);

    if(IsValidDynamicPickup(arrowEnum[id][arr_PickupID]))
		DestroyDynamicPickup(arrowEnum[id][arr_PickupID]);

    SendError(playerid, "Arrow úspene zmazaný!");

	return 1;
}

YCMD:forcepayday(playerid, params[], help)
{
	if(!IsPlayerAdmin(playerid))
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	   	i;

	if(sscanf(params, "d", i))
	    return SendClientSyntax(playerid, "/forcepayday [id]");

	SCFM(i, 0xD0D0D0FF, "> Prila ti výplata! Vyzdvihni si ju v Palomino Creek Town Hall, ak chce.");
 	if(Vyplata_TYP[i] == 0)
	{
		g_B_canHavePayDay[i] = true;
  		g_B_canPickUpPayDay[i] = true;

		g_I_VyplataExpire[i] = gettime() + 1800;

		payDayCheck[i] = rand(1, 9999);

		new
			tdStr[64];

		format(tdStr, sizeof tdStr, "Cislo seku: ~w~%04d", payDayCheck[i]);

		PlayerTextDrawShow(i, TD_vyplaty[i][0]);
  		PlayerTextDrawSetString(i, TD_vyplaty[i][0], tdStr);
    	PlayerTextDrawShow(i, TD_vyplaty[i][0]);
	}
	else
	{
 		GivePlayerPayDay(i, 1);
	}

 	SCFM(playerid, 0xD0D0D0FF, "> Dal si výplatu hráèovi %s!", GetPlayerNameEx(i, NO_MASK));

	return 1;
}

YCMD:forcepaydaytoall(playerid, params[], help)
{
	if(!IsPlayerAdmin(playerid))
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	foreach( new i : Player )
	{
		SCFM(i, 0xD0D0D0FF, "> Prila ti výplata! Vyzdvihni si ju v Palomino Creek Town Hall, ak chce.");
	 	if(Vyplata_TYP[i] == 0)
		{
			g_B_canHavePayDay[i] = true;
		    g_B_canPickUpPayDay[i] = true;

			g_I_VyplataExpire[i] = gettime() + 1800;

			payDayCheck[i] = rand(1, 9999);

			new
				tdStr[64];

			format(tdStr, sizeof tdStr, "Cislo seku: ~w~%04d", payDayCheck[i]);

			PlayerTextDrawShow(i, TD_vyplaty[i][0]);
   			PlayerTextDrawSetString(i, TD_vyplaty[i][0], tdStr);
    		PlayerTextDrawShow(i, TD_vyplaty[i][0]);
		}
		else
		{
  			GivePlayerPayDay(i, 1);
		}
	}
	return 1;
}


YCMD:forcelottery(playerid, params[], help)
{
	if(!IsPlayerAdmin(playerid))
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(lottery == 0)
	    lottery = rand(3000, 32500);

    new
		lotteryCount,
		lotteryNumber = rand(1,100),
		lotteryWinner;

	foreach( new i : Player )
	{
		if(GetPlayerInventoryItem(i, inv_lotteryTicket) == lotteryNumber)
  		{
			lotteryCount ++;
			lotteryWinner = i;
		}
	}

	if(lotteryCount == 0)
	{
	    foreach( new i : Player )
	    {
	        SetPlayerInventoryItem(i, inv_lotteryTicket, 0);

	        SCFM(i, COLOR_LOTTERY, "[ LOTÉRIA ] V jackpote bolo $%d USD, no èíslo %d netipol nikto!", lottery, lotteryNumber);
	    }
	}
	else if(lotteryCount == 1)
	{
	    foreach( new i : Player )
	    {
	        SetPlayerInventoryItem(i, inv_lotteryTicket, 0);

	        SCFM(i, COLOR_LOTTERY, "[ LOTÉRIA ] V jackpote bolo $%d USD a správne èíslo %d tipol iba %s!", lottery, lotteryNumber, GetPlayerNameEx(lotteryWinner, NO_MASK));
			if(i == lotteryWinner)
			{
			    SCFM(i, COLOR_LOTTERY, "[ LOTÉRIA ] Gratulujem, vyhral si $%d USD! Ui ich dobre!", lottery);
			    ex_GivePlayerMoney(i, lottery);
			    money_admin[i]+=floatround(lottery,floatround_round);
			}
		}
	}
	else
	{
	    foreach( new i : Player )
	    {

	        if(GetPlayerInventoryItem(i, inv_lotteryTicket) == lotteryNumber)
	        {
	            SCFM(i, COLOR_LOTTERY, "[ LOTÉRIA ] V jackpote bolo $%d USD a správne èíslo %d tipli %d ¾udia!", lottery, lotteryNumber, lotteryCount);
                SCFM(i, COLOR_LOTTERY, "[ LOTÉRIA ] Gratulujem, vyhral si $%d USD! Ui ich dobre!", floatround(float(lottery) / float(lotteryCount), floatround_round));
                ex_GivePlayerMoney(i, floatround(float(lottery) / float(lotteryCount), floatround_round));
                money_admin[i]+=floatround(float(lottery) / float(lotteryCount), floatround_round);
			}
			else
			    SCFM(i, COLOR_LOTTERY, "[ LOTÉRIA ] V jackpote bolo $%d USD a správne èíslo %d tipli %d ¾udia!", lottery, lotteryNumber, lotteryCount);

			SetPlayerInventoryItem(i, inv_lotteryTicket, 0);
		}
	}

	lottery = 0;
	return 1;
}

YCMD:vehguns(playerid, params[], help)
{

    if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");

	new
	    vehicleid = GetPlayerVehicleID(playerid);

    if(GetVehicleFactionType(vehicleid) != FACTION_TYPE_LAW || GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
		return SendError(playerid, "V tomto vozidle nemôe poui /vehguns!");

	switch(GetVehicleModel(vehicleid))
	{
	    case
	        481,
	        510,
	        509:
		{
		    return SendError(playerid, "Do tohoto vozidla nemôe odloi zbrane!");
		}
	}

	SCFM(playerid, COLOR_COMMANDUSE, "[ SLOT 1 ] {ffffff}%s (%d ammo) - /takegun 1", GetCrateItemName(vehicleInventory_Weapons[GetPlayerVehicleID(playerid)][0]), vehicleInventory_Weapons[GetPlayerVehicleID(playerid)][1]);
	SCFM(playerid, COLOR_COMMANDUSE, "[ SLOT 2 ] {ffffff}%s (%d ammo) - /takegun 2", GetCrateItemName(vehicleInventory_Weapons[GetPlayerVehicleID(playerid)][2]), vehicleInventory_Weapons[GetPlayerVehicleID(playerid)][3]);
	SCFM(playerid, COLOR_COMMANDUSE, "[ SLOT 3 ] {ffffff}%s (%d ammo) - /takegun 3", GetCrateItemName(vehicleInventory_Weapons[GetPlayerVehicleID(playerid)][4]), vehicleInventory_Weapons[GetPlayerVehicleID(playerid)][5]);

	return 1;
}

YCMD:storegun(playerid, params[], help)
{

    if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");

    new
	    vehicleid = GetPlayerVehicleID(playerid);

    if(GetVehicleFactionType(vehicleid) != FACTION_TYPE_LAW || GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
		return SendError(playerid, "V tomto vozidle nemôe poui /storegun!");

	switch(GetVehicleModel(vehicleid))
	{
	    case
	        481,
	        510,
	        509:
		{
		    return SendError(playerid, "Do tohoto vozidla nemôe odloi zbrane!");
		}
	}

	new
		I_var,
		S_var[32];

	if(sscanf(params, "ds[32]", I_var,S_var))
	    return SendClientSyntax(playerid, "/storegun [slot 1 - 3 (/vehguns)] [meno zbrane]");

	if(I_var < 1 || I_var > 3)
        return SendClientSyntax(playerid, "/storegun [slot 1 - 3 (/vehguns)] [meno zbrane]");

    new weaponname[ 35 ], wep = -1, ammo = 0;

	for( new i; i <= 46; i++ )
	{
	    switch (i)
		{
			case 0, 19, 20, 21, 44, 45:
			{
				continue;
			}

			default:
			{
				GetWeaponName(i, weaponname, sizeof (weaponname));

				if (strfind(weaponname, S_var, true) != -1)
				{

					new
					    slot = ac_GetWeaponSlot(i),
					    weapon,
						ammox
					;

					GetPlayerWeaponData(playerid, slot, weapon, ammox);

					if(ammox < 1 || weapon != i)
					{
					    new
					        S_string[ 144 ];

						format(S_string, sizeof S_string, "Nemá zbraò %s!", weaponname);

						SendError(playerid, S_string);

						return 1;
					}
					else
					{
					    wep = weapon;
					    ammo = ammox;
					}

					break;
				}
			}
		}
	}

	if(wep == -1)
		return SendError(playerid, "Takáto zbraò v systéme nie je!");

    new
		slotid,
		veh = GetPlayerVehicleID(playerid);

	switch(I_var)
	{
 		case 2:
   			slotid = 2;

		case 3:
  			slotid = 4;

		default:
			slotid = 0;
	}

	if(vehicleInventory_Weapons[veh][slotid] <= 0)
 	{

		FormatLog(log_type_trunk, "%s(%s - %s) vklada do kufra vozidla %s (%s) zbran %s (%d ammo) (/takegun)", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), GetVehicleName(veh), vEnum[veh][v_SPZ], GetWeaponNameEx(wep), ammo);

		new
			S_finalString[128 + 25 + 5];

		new S_first[25];

		if(B_playerHasMask[playerid] == false) {
  			strcat(S_first, ReturnName(playerid));
	    	strdel(S_first,strfind(S_first,"_",true),25);
		} else {
  			format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

		Weapons::removeWeapon(playerid, wep);
		FormatWeaponLog(playerid, "[remove] Vlozil %s s %d nabojmi do kufra vozidla %s (%s).", GetWeaponNameEx(wep), ammo, GetVehicleName(veh), vEnum[veh][v_SPZ]);

		format(S_finalString, sizeof(S_finalString), "AME: * %s nieèo vkladá do úloného priestoru ...", S_first);
  		SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

		format(S_finalString, sizeof(S_finalString), "* %s nieèo vkladá do úloného priestoru ...", S_first);
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

		vehicleInventory_Weapons[veh][slotid] = wep;
  		vehicleInventory_Weapons[veh][slotid+1] = ammo;

  		InfoBox(playerid, INFOBOX_INFO, "Pre vytiahnutie zbrane môe poui /takegun!");
	}
 	else
	    return SendError(playerid, "Na tomto slote u je nejaká zbraò!");

	return 1;
}

YCMD:takegun(playerid, params[], help)
{

    if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Tento príkaz teraz nemôe poui!");

    new
	    vehicleid = GetPlayerVehicleID(playerid);

    if(GetVehicleFactionType(vehicleid) != FACTION_TYPE_LAW || GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
		return SendError(playerid, "V tomto vozidle nemôe poui /takegun!");

    switch(GetVehicleModel(vehicleid))
	{
	    case
	        481,
	        510,
	        509:
		{
		    return SendError(playerid, "Do tohoto vozidla nemôe odloi zbrane!");
		}
	}

	new
		I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/takegun [slot 1 - 3 (/vehguns)]");

	if(I_var < 1 || I_var > 3)
        return SendClientSyntax(playerid, "/takegun [slot 1 - 3 (/vehguns)]");

    new
		slotid,
		veh = GetPlayerVehicleID(playerid);

	switch(I_var)
	{
 		case 2:
   			slotid = 2;

		case 3:
  			slotid = 4;

		default:
			slotid = 0;
	}

	if(vehicleInventory_Weapons[veh][slotid] > 0)
 	{
    	new origin[128];
		format(origin,128,"SD /takegun (%s)", GetPlayerNameEx(playerid, NO_MASK));
		Weapons::GivePlayerNewWeapon(playerid, vehicleInventory_Weapons[veh][slotid], vehicleInventory_Weapons[veh][slotid+1], true, false, origin,true);
    
        FormatWeaponLog(playerid, "[give] Zobral zbran %s s %d z kufra vozidla %s (%s).", GetWeaponNameEx(vehicleInventory_Weapons[veh][slotid]), vehicleInventory_Weapons[veh][slotid+1], GetVehicleName(veh), vEnum[veh][v_SPZ]);

		FormatLog(log_type_trunk, "%s(%s - %s) vybera z kufra vozidla %s (%s) zbran %s (%d ammo) (/takegun)", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), GetVehicleName(veh), vEnum[veh][v_SPZ], GetWeaponNameEx(vehicleInventory_Weapons[veh][slotid]), vehicleInventory_Weapons[veh][slotid+1]);

		new
			S_finalString[128 + 25 + 5];

		new S_first[25];

		if(B_playerHasMask[playerid] == false) {
  			strcat(S_first, ReturnName(playerid));
	    	strdel(S_first,strfind(S_first,"_",true),25);
		} else {
  			format(S_first,25,"(%d)",I_playerMaskID[playerid]);
		}

		format(S_finalString, sizeof(S_finalString), "AME: * %s nieèo vyberá z úloného priestoru ...", S_first);
  		SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

		format(S_finalString, sizeof(S_finalString), "* %s nieèo vyberá z úloného priestoru ...", S_first);
	 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

		vehicleInventory_Weapons[veh][slotid] = 0;
  		vehicleInventory_Weapons[veh][slotid+1] = 0;

  		InfoBox(playerid, INFOBOX_INFO, "Pre vloenie zbrane môe poui /storegun!");
	}
 	else
	    return SendError(playerid, "Na tomto slote nie je iadna zbraò!");

	return 1;
}

YCMD:scrollgun(playerid, params[], help)
{

	new
	    S_var[ 35 ];

	if(sscanf(params, "s[35]", S_var))
	    return SendClientSyntax(playerid, "/scrollgun [meno zbrane]");

	new weaponname[ 35 ];

	for( new i; i <= 46; i++ )
	{
	    switch (i)
		{
			case 0, 19, 20, 21, 44, 45:
			{
				continue;
			}

			default:
			{
				GetWeaponName(i, weaponname, sizeof (weaponname));

				if (strfind(weaponname, S_var, true) != -1)
				{

					new
					    slot = ac_GetWeaponSlot(i),
					    weapon,
						ammo
					;

					GetPlayerWeaponData(playerid, slot, weapon, ammo);

					if(ammo < 1 || weapon != i)
					{
					    new
					        S_string[ 144 ];

						format(S_string, sizeof S_string, "Nemá zbraò %s!", weaponname);

						SendError(playerid, S_string);
					}
					else
					{
					
					    if(weapon == 28 || weapon == 29 || weapon == 32)
						{
						    if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
						        return SendError(playerid, "Túto zbraò nemôe ma ako vodiè!");
						}
					
					    SetPlayerArmedWeapon(playerid, weapon);

					    new
					        S_string[ 144 ];

						format(S_string, sizeof S_string, "Prehodil si si na zbraò %s!", weaponname);

						SendSuccess(playerid, S_string);
					}

					return 1;
				}
			}
		}
	}

	SendError(playerid, "Takáto zbraò v systéme nie je!");

	return 1;
}

YCMD:reklama(playerid, params[], help)
{
	new
		S_var[24],
		I_var = -1;

	if(sscanf(params, "s[24] D(-1)", S_var, I_var))
	    return SendClientSyntax(playerid, "/reklama [kupit (5000$) - zmazat(vrati sa 2500$) - text]");

	new
		bizid = -1;

    foreach( new i : Businesses )
	{
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(strcmp(businessEnum[i][bz_Owner], ReturnName(playerid), false) && strcmp(businessEnum[i][bz_SecOwner], ReturnName(playerid), false) && GetPlayerAdminLevel(playerid) < 4)
			continue;

		if(!IsPlayerInRangeOfPoint(playerid, 10.0, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

		bizid = i;

		break;
	}

	if(bizid == -1)
		return SendError(playerid, "Nestojí pri vchode do biznisu ktorý môe spravova!");

	if(!strcmp(S_var, "kupit", true))
	{

		if(I_var < 1 || I_var > 3)
			return SendClientSyntax(playerid, "/reklama kupit <variacia 1 - 3>");

		if(ex_GetPlayerMoney(playerid) < 5000)
			return SendError(playerid, "Nemá 5000$!");

		new
			tquery[ 128 ];

		mysql_format(MYSQL, tquery, sizeof tquery, "SELECT * FROM gm_adtabula WHERE AssignedBiz = '%d'",
			businessEnum[bizid][bz_Address]);

		new
			Cache:cache = mysql_query(MYSQL, tquery),
			pocet;

		pocet = cache_num_rows();

		cache_delete(cache);

		if(pocet > 0)
			return SendError(playerid, "Tento biznis u má nejakú reklamnú tabulu!");

		adtabula_bizid[playerid] =  businessEnum[bizid][bz_Address];

		switch(I_var)
		{
			case 1:
				adtabula_model[playerid] = 1443;

			case 2:
				adtabula_model[playerid] = 1444;

			case 3:
				adtabula_model[playerid] = 2599;
		}

		new
			Float:X, Float:Y, Float:Z,
			Float:A;

		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);

		X += 2.0 * floatsin(-A, degrees);
		Y += 2.0 * floatcos(-A, degrees);

		adtabula_objectid[playerid] = CreateDynamicObject(adtabula_model[playerid], X, Y, Z, 0.0, 0.0, A + 180, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 50.0, 25.0, -1, 1);

		Streamer_UpdateEx(playerid, X, Y+0.1, Z);

		adtabula_placing[playerid] = true;

		EditDynamicObject(playerid, adtabula_objectid[playerid]);

		SendSuccess(playerid, "Polo tabulu na miesto aké chce a potom ju ulo, peniaze sa ti odèítajú potom!");

		return 1;
	}
	else if(!strcmp(S_var, "zmazat", true))
	{

	    new
			tquery[ 128 ];

		mysql_format(MYSQL, tquery, sizeof tquery, "SELECT * FROM gm_adtabula WHERE AssignedBiz = '%d'",
			businessEnum[bizid][bz_Address]);

		new
			Cache:cache = mysql_query(MYSQL, tquery),
			pocet;

		pocet = cache_num_rows();

		cache_delete(cache);

		if(pocet == 0)
			return SendError(playerid, "Tento biznis nemá iadnu reklamnú tabulu!");

        mysql_format(MYSQL, tquery, sizeof tquery, "DELETE FROM gm_adtabula WHERE AssignedBiz = '%d'",
			businessEnum[bizid][bz_Address]);

		mysql_query(MYSQL, tquery, false);

		new
		    id = -1;

		for(new i; i < MAX_AD_TABLES; i++)
		{
			if(adTableEnum[i][adt_assignedBiz] == businessEnum[bizid][bz_Address])
			{
				id = i;
				break;
			}
		}

		if(id != -1)
		{
		    DestroyDynamicObject(adTableEnum[id][adt_ObjectID]);
	     	DestroyDynamic3DTextLabel(adTableEnum[id][adt_LabelID]);

	     	adTableEnum[id][adt_Model] = 0;
	     	adTableEnum[id][adt_assignedBiz] = 0;
		}

		SendError(playerid, "Tabula zmazaná!");
		ex_GivePlayerMoney(playerid, 2500);
		money_admin[playerid]+=floatround(2500,floatround_round);

		return 1;
	}
	else if(!strcmp(S_var, "text", true))
	{

	    new
			tquery[ 128 ];

		mysql_format(MYSQL, tquery, sizeof tquery, "SELECT * FROM gm_adtabula WHERE AssignedBiz = '%d'",
			businessEnum[bizid][bz_Address]);

		new
			Cache:cache = mysql_query(MYSQL, tquery),
			pocet;

		pocet = cache_num_rows();

		cache_delete(cache);

		if(pocet == 0)
			return SendError(playerid, "Tento biznis nemá iadnu reklamnú tabulu!");
		new
		    id = -1;

		for(new i; i < MAX_AD_TABLES; i++)
		{
			if(adTableEnum[i][adt_assignedBiz] == businessEnum[bizid][bz_Address])
			{
				id = i;
				break;
			}
		}

		if(id == -1)
		    return SendError(playerid, "Tento biznis nemá reklamnú tabulu!");

		adtabula_bizid[playerid] = businessEnum[bizid][bz_Address];
		adtabula_editingid[playerid] = id;

		ShowPlayerDialog(playerid, did_adtable_text, DIALOG_STYLE_INPUT, "TEXT REKLAMNEJ TABULE", "{ffffff}> pecifikuj prosím text tejto reklamnej tabule, môe poui aj farebné HEX kódy {FARBA}\nPre nový riadok poui =.", "OK", "ZRUI");

		SendError(playerid, "Upravuje text tabule!");

		return 1;
	}
	return 1;
}

YCMD:trestnybod(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

    if(GetPlayerAdminLevel(playerid) < 3 && !IsPlayerWorking(playerid))
	    return SendClientCantUseCommand(playerid);

    new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/trestnybod [id]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(GetPlayerAdminLevel(playerid) < 4 && !IsPlayerNearPlayer(playerid, I_var, 3.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	ptrestnebody[I_var] ++;

	if(ptrestnebody[I_var] >= 12)
	{
	    ptrestnebody[I_var] = 12;
	    SCError(playerid, "Udelil si trestný bod %d/12 hráèovi %s! Odober mu oprávnenia!", ptrestnebody[I_var], GetPlayerNameEx(I_var, NO_MASK));
	    SCError(I_var, "Policajt %s ti udelil trestný bod. Je to bod èíslo %d z maximálnych 12!", GetPlayerNameEx(playerid, USE_MASK), ptrestnebody[I_var]);
	}
	else
	{
	    SCError(playerid, "Udelil si trestný bod %d/12 hráèovi %s!", ptrestnebody[I_var], GetPlayerNameEx(I_var, NO_MASK));
	    SCError(I_var, "Policajt %s ti udelil trestný bod. Je to bod èíslo %d z maximálnych 12!", GetPlayerNameEx(playerid, USE_MASK), ptrestnebody[I_var]);
	}

	return 1;
}

YCMD:dtrestnybod(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

    if(GetPlayerAdminLevel(playerid) < 3 && !IsPlayerWorking(playerid))
	    return SendClientCantUseCommand(playerid);

    if(GetPlayerAdminLevel(playerid) < 3 && GetPlayerFactionRank(playerid) < 7)
	    return SendClientCantUseCommand(playerid);

    new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/dtrestnybod [id]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(GetPlayerAdminLevel(playerid) < 4 && !IsPlayerNearPlayer(playerid, I_var, 3.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	ptrestnebody[I_var] --;

	if(ptrestnebody[I_var] < 0)
	{
	    ptrestnebody[I_var] = 0;
	}

    SCError(playerid, "Zmazal si trestný bod %d/12 hráèovi %s!", ptrestnebody[I_var], GetPlayerNameEx(I_var, NO_MASK));
    SCError(I_var, "Policajt %s ti zmazal trestný bod. Má %d bodov z maximálnych 12!", GetPlayerNameEx(playerid, USE_MASK), ptrestnebody[I_var]);

	return 1;
}

YCMD:zakazriadenia(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

    if(GetPlayerAdminLevel(playerid) < 3 && !IsPlayerWorking(playerid))
	    return SendClientCantUseCommand(playerid);

    new
	    I_var, hodiny;

	if(sscanf(params, "dd", I_var,hodiny))
	    return SendClientSyntax(playerid, "/zakazriadenia [id] [hodiny]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(GetPlayerAdminLevel(playerid) < 4 && !IsPlayerNearPlayer(playerid, I_var, 3.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");
	    
	if(hodiny < 1 || hodiny > 720) return SendError(playerid, "Hodiny musia by v rozmedzí 1-720!");

	zakazrizeni[I_var] = (gettime() + (hodiny * 60 * 60));
	SCError(playerid, "Udelil si zákaz riadenia hráèovi %s. Vyprí mu %s!", GetPlayerNameEx(I_var, NO_MASK), getdateunix(zakazrizeni[I_var]));
 	SCError(I_var, "Policajt %s ti udelil zákaz riadenia, vyprí ti %s!", GetPlayerNameEx(playerid, USE_MASK), getdateunix(zakazrizeni[I_var]));

	return 1;
}

YCMD:dzakazriadenia(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

    if(GetPlayerAdminLevel(playerid) < 3 && !IsPlayerWorking(playerid))
	    return SendClientCantUseCommand(playerid);

    if(GetPlayerAdminLevel(playerid) < 3 && GetPlayerFactionRank(playerid) < 7)
	    return SendClientCantUseCommand(playerid);

    new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/dzakazriadenia [id]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(GetPlayerAdminLevel(playerid) < 4 && !IsPlayerNearPlayer(playerid, I_var, 3.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	if(zakazrizeni[playerid] < gettime())
	    return SendError(playerid, "Tento hráè nemá zákaz riadenia!");

	zakazrizeni[playerid] = 0;

    SCError(playerid, "Zmazal si zákaz riadenia hráèovi %s!", ptrestnebody[I_var], GetPlayerNameEx(I_var, NO_MASK));
    SCError(I_var, "Policajt %s ti zmazal zákaz riadenia!", GetPlayerNameEx(playerid, USE_MASK));

	return 1;
}

YCMD:lic(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerFactionType(playerid) != FACTION_TYPE_LAW)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var,
	    S_var[ 24 ];

	if(sscanf(params, "ds[24]", I_var, S_var))
	    return SendClientSyntax(playerid, "/lic [id/meno hráèa] [grpA-grpB-grpC-grpT-flyPermit-boatPermit-fishPermit-zbrPermit]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(GetPlayerAdminLevel(playerid) < 4 && !IsPlayerNearPlayer(playerid, I_var, 3.0))
	    return SendError(playerid, "Tento hráè je moc ïaleko!");

	new
		oprv_str[34];

	if(!strcmp(S_var, "grpA", true))
	{

	    if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerInventoryItem(I_var, inv_vodicakA) == 0)
			return SendError(playerid, "Tomuto hráèovi nemôe da túto licenciu!");

	    format(oprv_str, sizeof oprv_str, "vodicak sk. A");
	    SetPlayerInventoryItem(I_var, inv_vodicakA, !GetPlayerInventoryItem(I_var, inv_vodicakA));
	}
	else if(!strcmp(S_var, "grpB", true))
	{

	    if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerInventoryItem(I_var, inv_vodicakB) == 0)
			return SendError(playerid, "Tomuto hráèovi nemôe da túto licenciu!");

	    format(oprv_str, sizeof oprv_str, "vodicak sk. B,BE");
	    SetPlayerInventoryItem(I_var, inv_vodicakB, !GetPlayerInventoryItem(I_var, inv_vodicakB));
	}
	else if(!strcmp(S_var, "grpC", true))
	{

	    if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerInventoryItem(I_var, inv_vodicakC) == 0)
			return SendError(playerid, "Tomuto hráèovi nemôe da túto licenciu!");

	    format(oprv_str, sizeof oprv_str, "vodicak sk. C,CE");
	    SetPlayerInventoryItem(I_var, inv_vodicakC, !GetPlayerInventoryItem(I_var, inv_vodicakC));
	}
	else if(!strcmp(S_var, "grpT", true))
	{

	    if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerInventoryItem(I_var, inv_vodicakT) == 0)
			return SendError(playerid, "Tomuto hráèovi nemôe da túto licenciu!");

	    format(oprv_str, sizeof oprv_str, "vodicak sk. D");
	    SetPlayerInventoryItem(I_var, inv_vodicakT, !GetPlayerInventoryItem(I_var, inv_vodicakT));
	}
	else if(!strcmp(S_var, "fishPermit", true))
	{

	    if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerInventoryItem(I_var, inv_fishingPermit) == 0)
			return SendError(playerid, "Tomuto hráèovi nemôe da túto licenciu!");

	    format(oprv_str, sizeof oprv_str, "rybarske povolenie");
	    SetPlayerInventoryItem(I_var, inv_fishingPermit, !GetPlayerInventoryItem(I_var, inv_fishingPermit));
	}
	else if(!strcmp(S_var, "zbrPermit", true))
	{

	    if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerInventoryItem(I_var, inv_zbrojnyPreukaz) == 0)
			return SendError(playerid, "Tomuto hráèovi nemôe da túto licenciu!");

	    format(oprv_str, sizeof oprv_str, "zbrojny preukaz");

		if(GetPlayerInventoryItem(I_var, inv_zbrojnyPreukaz) == 1)
	        SetPlayerInventoryItem(I_var, inv_zbrojnyPreukaz, 0);
		else
		    SetPlayerInventoryItem(I_var, inv_zbrojnyPreukaz, 1);
	}
	else if(!strcmp(S_var, "flyPermit", true))
	{

	    if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerInventoryItem(I_var, inv_flyPermit) == 0)
			return SendError(playerid, "Tomuto hráèovi nemôe da túto licenciu!");

	    format(oprv_str, sizeof oprv_str, "letecký preukaz");

		if(GetPlayerInventoryItem(I_var, inv_flyPermit) == 1)
	        SetPlayerInventoryItem(I_var, inv_flyPermit, 0);
		else
		    SetPlayerInventoryItem(I_var, inv_flyPermit, 1);
	}
	else if(!strcmp(S_var, "boatPermit", true))
	{

	    if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerInventoryItem(I_var, inv_boatPermit) == 0)
			return SendError(playerid, "Tomuto hráèovi nemôe da túto licenciu!");

	    format(oprv_str, sizeof oprv_str, "lodný preukaz");

		if(GetPlayerInventoryItem(I_var, inv_boatPermit) == 1)
	        SetPlayerInventoryItem(I_var, inv_boatPermit, 0);
		else
		    SetPlayerInventoryItem(I_var, inv_boatPermit, 1);
	}
	else
		return SendClientSyntax(playerid, "/lic [id/meno hráèa] [grpA-grpB-grpC-grpT-flyPermit-boatPermit-fishPermit-zbrPermit]");

	SCFM(playerid, 0xD0D0D0FF, "> Dal/vzal si licenciu %s hráèovi %s", oprv_str, GetPlayerNameEx(I_var, NO_MASK));
	SCFM(I_var, 0xD0D0D0FF, "> %s ti dal/vzal licenciu %s!", GetPlayerNameEx(playerid, NO_MASK), oprv_str);
	FormatLog(log_type_admin, "%s(%s - %s) dal/vzal licenciu %s hracovi %s(%s).", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), oprv_str, ReturnName(I_var), ReturnIP(I_var));

	return 1;
}

YCMD:vperm(playerid, params[], help)
{

	new
	    I_var,
		S_var[ 32 ];

	if(sscanf(params, "ds[32]", I_var, S_var))
	    return SendClientSyntax(playerid, "/vperm [id (pre anulovanie zadaj -1)] [spz]");

	if(!IsPlayerLogged(I_var) && I_var != -1)
	    return SendError(playerid, "Tento hráè nie je v hre!");

	foreach( new i : Vehicle )
	{

	    if(!IsValidVehicle(i))
	        continue;

	    if(strcmp(S_var, vEnum[i][v_SPZ], false))
			continue;

		if(strcmp(ReturnName(playerid), vEnum[i][v_Owner], false))
		    return SendError(playerid, "Toto vozidlo nevlastní!");

		if(I_var != -1)
		{

		    new
		        query[256];

			mysql_format(MYSQL, query, sizeof query, "UPDATE char_vehicles SET SecondOwner = '%e' WHERE SPZ = '%e'", ReturnName(I_var), vEnum[i][v_SPZ]);
			mysql_query(MYSQL, query, false);

			format(vEnum[i][v_SecOwner], 30, ReturnName(I_var));
		}
		else
		{

		    new
		        query[256];

			mysql_format(MYSQL, query, sizeof query, "UPDATE char_vehicles SET SecondOwner = '-' WHERE SPZ = '%e'", vEnum[i][v_SPZ]);
			mysql_query(MYSQL, query, false);

		    format(vEnum[i][v_SecOwner], 30, "-");
		}

        if(I_var != -1)
        {
			SCFM(playerid, 0xD0D0D0FF, "> Dal si povolenie pouíva tvoje vozidlo (%s) hráèovi %s!", vEnum[i][v_SPZ], GetPlayerNameEx(I_var, USE_MASK));
			SCFM(I_var, 0xD0D0D0FF, "> %s ti dal povolenie pouíva jeho vozidlo (%s)!", GetPlayerNameEx(playerid, USE_MASK), vEnum[i][v_SPZ]);
		}
		else
		    SCFM(playerid, 0xD0D0D0FF, "> Vzal si povolenie pouíva tvoje vozidlo (%s) vetkým hráèom!", vEnum[i][v_SPZ]);

		return 1;

	}

	SendError(playerid, "Vozidlo s touto znaèkou neexistuje!");

	return 1;
}

YCMD:gperm(playerid, params[], help)
{

	new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/gperm [id (pre anulovanie zadaj -1)]");

	if(!IsPlayerLogged(I_var) && I_var != -1)
	    return SendError(playerid, "Tento hráè nie je v hre!");

	new id = -1;

    foreach( new i : Garages ) {
	    if(garageEnum[i][ga_pX] == 0 && garageEnum[i][ga_pY] == 0) continue;
		if(garageEnum[i][ga_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(garageEnum[i][ga_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(strcmp(garageEnum[i][ga_Owner], ReturnName(playerid), false)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, garageEnum[i][ga_pX], garageEnum[i][ga_pY], garageEnum[i][ga_pZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadna gará ktorú vlastní!");

	if(I_var != -1)
	{
	    format(garageEnum[id][ga_SecOwner], 30, ReturnName(I_var));

		SCFM(playerid, 0xD0D0D0FF, "> Dal si povolenie pouíva tvoju gará hráèovi %s!", GetPlayerNameEx(I_var, USE_MASK));
		SCFM(I_var, 0xD0D0D0FF, "> %s ti dal povolenie pouíva jeho gará!", GetPlayerNameEx(playerid, USE_MASK));
	}
	else
	{
	    format(garageEnum[id][ga_SecOwner], 30, "_");

		SCFM(playerid, 0xD0D0D0FF, "> Vzal si povolenie pouíva tvoju gará vetkým hráèom!", GetPlayerNameEx(I_var, USE_MASK));
	}

	return 1;
}

YCMD:hperm(playerid, params[], help)
{

	new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/hperm [id (pre anulovanie zadaj -1)]");

	if(!IsPlayerLogged(I_var) && I_var != -1)
	    return SendError(playerid, "Tento hráè nie je v hre!");

	new id = -1;

    foreach( new i : Houses ) {
	    if(houseEnum[i][ho_PosX] == 0 && houseEnum[i][ho_PosY] == 0) continue;
		if(houseEnum[i][ho_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(houseEnum[i][ho_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(strcmp(houseEnum[i][ho_Owner], ReturnName(playerid), false)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, houseEnum[i][ho_PosX], houseEnum[i][ho_PosY], houseEnum[i][ho_PosZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadny dom ktorý vlastní!");

	if(I_var != -1)
	{
	    format(houseEnum[id][ho_SecOwner], 30, ReturnName(I_var));

		SCFM(playerid, 0xD0D0D0FF, "> Dal si povolenie pouíva tvoj dom hráèovi %s!", GetPlayerNameEx(I_var, USE_MASK));
		SCFM(I_var, 0xD0D0D0FF, "> %s ti dal povolenie pouíva jeho dom!", GetPlayerNameEx(playerid, USE_MASK));
	}
	else
	{
	    format(houseEnum[id][ho_SecOwner], 30, "_");

		SCFM(playerid, 0xD0D0D0FF, "> Vzal si povolenie pouíva tvoj dom vetkým hráèom!", GetPlayerNameEx(I_var, USE_MASK));
	}

	return 1;
}

YCMD:bperm(playerid, params[], help)
{

	new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/bperm [id (pre anulovanie zadaj -1)]");

	if(!IsPlayerLogged(I_var) && I_var != -1)
	    return SendError(playerid, "Tento hráè nie je v hre!");

	new id = -1;

    foreach( new i : Businesses ) {
	    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
		if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid)) continue;
		if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
		if(strcmp(businessEnum[i][bz_Owner], ReturnName(playerid), false)) continue;
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;
		id = i;
		break;
	}

	if(id == -1)
		return SendError(playerid, "Nie je tu iadny business ktorý vlastní!");

	if(I_var != -1)
	{
	    format(businessEnum[id][bz_SecOwner], 30, ReturnName(I_var));

		SCFM(playerid, 0xD0D0D0FF, "> Dal si povolenie pouíva tvoj biznis hráèovi %s!", GetPlayerNameEx(I_var, USE_MASK));
		SCFM(I_var, 0xD0D0D0FF, "> %s ti dal povolenie pouíva jeho biznis!", GetPlayerNameEx(playerid, USE_MASK));
	}
	else
	{
	    format(businessEnum[id][bz_SecOwner], 30, "_");

		SCFM(playerid, 0xD0D0D0FF, "> Vzal si povolenie pouíva tvoj biznis vetkým hráèom!", GetPlayerNameEx(I_var, USE_MASK));
	}

	return 1;
}

YCMD:liveperm(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_MEDIA)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    I_var;

	if(sscanf(params, "d", I_var))
	    return SendClientSyntax(playerid, "/liveperm [id]");

	if(!IsPlayerLogged(I_var))
	    return SendError(playerid, "Tento hráè nie je v hre!");

    vysielaniePerm[I_var] = !vysielaniePerm[I_var];

    if(vysielaniePerm[I_var])
    {
	    SCFM(playerid, 0xD0D0D0FF, "> Povolil si ivý vstup hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
	    SCFM(I_var, 0xD0D0D0FF, "> %s ti povolil ivý vstup, môe poui príkaz /live a /news!", GetPlayerNameEx(playerid, NO_MASK));
	}
	else
	{
	    SCFM(playerid, 0xD0D0D0FF, "> Zakázal si ivý vstup hráèovi %s!", GetPlayerNameEx(I_var, NO_MASK));
	    SCFM(I_var, 0xD0D0D0FF, "> %s ti zakázal ivý vstup!", GetPlayerNameEx(playerid, NO_MASK));
	}
	return 1;
}

YCMD:majetok(playerid, params[], help)
{
    new
	    finalString[2048] = "{60a5f2}Vozidlá:\n",
	    tString[128];

    new
		mql_query[128];

	mysql_format(MYSQL, mql_query, sizeof(mql_query), "SELECT * FROM char_vehicles WHERE Owner = '%e' ORDER BY Model", ReturnName(playerid));

	new
	    Cache:query = mysql_query(MYSQL, mql_query),
	    SPZ[30],
	    Model;

	for(new i; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

     	cache_get_value_name(i, "SPZ", SPZ);
     	cache_get_value_name_int(i, "Model", Model);

     	if(Model == 481 || Model == 509 || Model == 510)
     	    continue;

     	format(tString, sizeof tString, "{ffffff}\n\r\t%s [ %s ]", VehicleNames[Model-400], SPZ);
     	strcat(finalString, tString);
	}

	cache_delete(query);

	strcat(finalString, "\n\n\r{60a5f2}Domy:\n");

	foreach( new i : Houses )
	{
	    if(houseEnum[i][ho_PSC] == 0)
	        continue;

		if(strcmp(ReturnName(playerid), houseEnum[i][ho_Owner], true))
		    continue;

        format(tString, sizeof tString, "{ffffff}\n\r\t%d%s %s, %s", houseEnum[i][ho_Number], returnOrdinal(houseEnum[i][ho_Number]), houseEnum[i][ho_Street], houseEnum[i][ho_City]);
     	strcat(finalString, tString);
	}

	strcat(finalString, "\n\n\r{60a5f2}Garáe:\n");

	foreach( new i : Garages )
	{
	    if(garageEnum[i][ga_PSC] == 0)
	        continue;

		if(strcmp(ReturnName(playerid), garageEnum[i][ga_Owner], true))
		    continue;

        format(tString, sizeof tString, "{ffffff}\n\r\t%d%s %s, %s", garageEnum[i][ga_Number], returnOrdinal(garageEnum[i][ga_Number]), garageEnum[i][ga_Street], garageEnum[i][ga_City]);
     	strcat(finalString, tString);
	}

	strcat(finalString, "\n\n\r{60a5f2}Biznisy:\n");

	foreach( new i : Businesses )
	{
	    if(businessEnum[i][bz_Address] == 0)
	        continue;

		if(strcmp(ReturnName(playerid), businessEnum[i][bz_Owner], true))
		    continue;

        format(tString, sizeof tString, "{ffffff}\n\r\t%s", businessEnum[i][bz_Name]);
     	strcat(finalString, tString);
	}

	ShowPlayerDialog(playerid, did_majetok, DIALOG_STYLE_MSGBOX, "MAJETOK",
	    finalString,
	    "BACK", "");

	return 1;
}

YCMD:fire(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerAdminLevel(playerid) < 4)
		return SendError(playerid, "Tento príkaz nemôe poui!");



	new
		I_var,
		I_hp;

	if(sscanf(params, "dd", I_var, I_hp))
		return SendClientSyntax(playerid, "/fire [model ohòa 1-6] [hp]");

	if(I_var < 1 || I_var > 6)
		return SendClientSyntax(playerid, "/fire [model ohòa 1-6] [hp]");

	if(I_hp < 5.0 || I_hp > 15000.0)
		return SendError(playerid, "HP ohòa je moc malé alebo moc ve¾ké!");

	new
		model = 0,
		freeid = -1;

	switch(I_var)
	{
		case 1:
			model = 18688;

		case 2:
			model = 18692;

		case 3:
			model = 18691;

		case 4:
			model = 18690;

		case 5:
			model = 18689;

		case 6:
			model = 18694;

	}

	for( new i; i < sizeof fdFire; i++ )
	{

		if(fdFire[i][fdfire_Model] != 0)
			continue;

		freeid = i;

		break;

	}

	if(freeid == -1)
		return SendError(playerid, "Nie je volný slot na oheò!");

	new
		Float:X, Float:Y, Float:Z, i = freeid;

	GetPlayerPos(playerid, X, Y, Z);

	fdFire[i][fdfire_Model] 		= model;
	fdFire[i][fdfire_ObjectID] 		= CreateDynamicObject(model, X, Y, Z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 150.0, 135.0, -1, 5);
	//fdFire[i][fdfire_AreaID]   		= CreateDynamicSphere(X, Y, Z + 2.5, 4.0);

	fdFire[i][fdfire_X]				= X;
	fdFire[i][fdfire_Y]				= Y;
	fdFire[i][fdfire_Z]				= Z;

	fdFire[i][fdfire_HP]			= float(I_hp);

	format(fdFire[i][fdfire_PlacedBy], 30, ReturnName(playerid));

	Streamer_UpdateEx(playerid, X, Y+0.1, Z);

	fdFire_Placuje[playerid]		= true;
	fdFire_OhenID[playerid]			= i;

	EditDynamicObject(playerid, fdFire[i][fdfire_ObjectID]);

	return 1;
}

YCMD:dfire(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerAdminLevel(playerid) < 4)
		return SendError(playerid, "Tento príkaz nemôe poui!");

    fdFire_OhenID[playerid] = GetPlayerFDFire(playerid);

    if(fdFire_OhenID[playerid] == -1)
        return SendError(playerid, "Nie je tu iadny oheò!");

    fdFire[fdFire_OhenID[playerid]][fdfire_HP] 		= 0.0;
	fdFire[fdFire_OhenID[playerid]][fdfire_Model] 	= 0;
	fdFire[fdFire_OhenID[playerid]][fdfire_Steps] 	= 0;

	DestroyDynamicObject(fdFire[fdFire_OhenID[playerid]][fdfire_ObjectID]);
	DestroyDynamic3DTextLabel(fdFire[fdFire_OhenID[playerid]][fdfire_LabelID]);
	DestroyDynamicObject(fdFire[fdFire_OhenID[playerid]][fdfire_AreaID]);
	return 1;
}

YCMD:mods(playerid, params[], help)
{

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesedí v iadnom vozidle!");

	if(GetPlayerVehicleSeat(playerid) != 0)
	    return SendError(playerid, "Nie si ofér!");

	if(!IsPlayerInDynamicArea(playerid, PCMechanicArea, 0))
	    return SendError(playerid, "Nenachádza sa pri upgrade shop!");

	new
	    S_var[12];

	if(sscanf(params, "s[12]", S_var))
	    return SendClientSyntax(playerid, "/mods [buy - reset]");

	if(!strcmp(S_var, "buy", true))
	{

	    new
	        vehicleid = GetPlayerVehicleID(playerid),

			cena = GetPlayerUpgradePrice(vehicleid);

	    if(cena < 1)
	        return SendError(playerid, "Na vozidle neprebehli iadne zmeny!");

	    if(ex_GetPlayerMoney(playerid) < cena)
	        return SendError(playerid, "Nemá dos peòazí na kúpu!");

		ex_GivePlayerMoney(playerid, -cena);
		money_spent[playerid] += floatround(cena,floatround_round);

		SCFM(playerid, 0xD0D0D0FF, "> Modifikoval si tvoje vozidlo za %d$!", cena);

		if(upgradeShop_carColor[vehicleid][0] != -1)
			vEnum[vehicleid][v_Color_1] = upgradeShop_carColor[vehicleid][0];

        if(upgradeShop_carColor[vehicleid][1] != -1)
			vEnum[vehicleid][v_Color_2] = upgradeShop_carColor[vehicleid][1];

        ChangeVehicleColor(GetPlayerVehicleID(playerid), vEnum[GetPlayerVehicleID(playerid)][v_Color_1], vEnum[GetPlayerVehicleID(playerid)][v_Color_2]);


		// RESET MOD VARIABLES

        upgradeShop_carColor[GetPlayerVehicleID(playerid)][0] = -1;
        upgradeShop_carColor[GetPlayerVehicleID(playerid)][1] = -1;

	}
	else if(!strcmp(S_var, "reset", true))
	{

	    SCFM(playerid, 0xD0D0D0FF, "> Modifikácie vozidla boli vynulované!");

	    ChangeVehicleColor(GetPlayerVehicleID(playerid), vEnum[GetPlayerVehicleID(playerid)][v_Color_1], vEnum[GetPlayerVehicleID(playerid)][v_Color_2]);

		// RESET MOD VARIABLES

        upgradeShop_carColor[GetPlayerVehicleID(playerid)][0] = -1;
        upgradeShop_carColor[GetPlayerVehicleID(playerid)][1] = -1;
	}
	else
	    return SendClientSyntax(playerid, "/mods [buy - reset]");
	return 1;

}

YCMD:assistmaster(playerid, params[], help)
{

	new
	    string[2048] = "{ffffff}",
	    tString[128];

	foreach( new i : Player )
	{
	    if(GetPlayerAdminLevel(i) < 1)
			continue;

		format(tString, sizeof tString, "%s (%d odpovedí)\n", ReturnMaster(i), assistCount[i]);
		strcat(string, tString);
	}

	ShowPlayerDialog(playerid, did_assistmaster, DIALOG_STYLE_MSGBOX, "ASSISTMASTER", string, "OK", "");

	return 1;
}

YCMD:snow(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    S_string[32],
	    S_toggle[6],
		I_int = -1
	;

	if(sscanf(params, "s[32] s[6] D(-1)", S_string, S_toggle, I_int))
	    return SendClientSyntax(playerid, "/snow [efekt] [on-off] <hustota 1-10>");

	if(!strcmp(S_string, "efekt", true))
	{

	    if(!strcmp(S_toggle, "off", true))
	    {
			gSnowParticles = false;

			foreach( new i : Player )
	        {
			    DeleteSnow(i);
	        }

			gSnowParticles_X = 0;

	        FormatLog(log_type_admin, "%s(%s) vypol snezny efekt.", ReturnName(playerid), ReturnIP(playerid));
			FormatWarnEx(playerid, 6,"AdmCmd:", COLOR_ADMINCMD, "%s vypol snený efekt", GetPlayerNameEx(playerid, USE_PUREIDNAME));
	    }
	    else if(!strcmp(S_toggle, "on", true))
	    {

	        if(I_int < 1 || I_int > 10)
	            return SendClientSyntax(playerid, "/snow [mapa-efekt] [on-off] [hustota 1-10]");

	        gSnowParticles = true;
	        gSnowParticles_X = I_int;

	        foreach( new i : Player )
	        {
				CreateSnow(i);
	        }

	        FormatLog(log_type_admin, "%s(%s) zapol snezny efekt.", ReturnName(playerid), ReturnIP(playerid));
			FormatWarnEx(playerid,6, "AdmCmd:", COLOR_ADMINCMD, "%s zapol snezny efekt.", GetPlayerNameEx(playerid, USE_PUREIDNAME));
	    }
	    else
	        return SendClientSyntax(playerid, "/snow [efekt] [on-off] <hustota 1-10>");
	}
	else
	    return SendClientSyntax(playerid, "/snow [efekt] [on-off] <hustota 1-10>");

	return 1;
}

YCMD:vysielacka(playerid, params[], help)
{

	if(GetPlayerInventoryItem(playerid, inv_vysielacka) == 0.0)
	    return SendError(playerid, "Nemá vysielaèku, kúp si jednu v obchode s elektronikou!");

	if(vysielackaToggle[playerid] == 1)
	    return SendError(playerid, "Tvoja vysielaèka je vypnutá, poui /vysielackaon (/von).");

	new
	    S_var[128];

	if(sscanf(params, "s[128]", S_var))
	    return SendClientSyntax(playerid, "/(v)ysielacka [správa]");

    SendRadioMessageFromPlayer(playerid, GetPlayerInventoryItem(playerid, inv_vysielacka), S_var, USE_MASK);

	return 1;

}

YCMD:vysielackaon(playerid, params[], help)
{

	if(GetPlayerInventoryItem(playerid, inv_vysielacka) == 0.0)
	    return SendError(playerid, "Nemá vysielaèku, kúp si jednu v obchode s elektronikou!");

	if(vysielackaToggle[playerid] == 0)
	    return SendError(playerid, "Tvoja vysielaèka je zapnutá, poui /vysielackaoff (/voff).");

    vysielackaToggle[playerid] = 0;

	SendSuccess(playerid, "Vysielaèka zapnutá!");

	return 1;

}

YCMD:vysielackaoff(playerid, params[], help)
{

	if(GetPlayerInventoryItem(playerid, inv_vysielacka) == 0.0)
	    return SendError(playerid, "Nemá vysielaèku, kúp si jednu v obchode s elektronikou!");

	if(vysielackaToggle[playerid] == 1)
	    return SendError(playerid, "Tvoja vysielaèka je vypnutá, poui /vysielackaon (/von).");

    vysielackaToggle[playerid] = 1;

	SendSuccess(playerid, "Vysielaèka vypnutá!");

	return 1;

}

YCMD:frekvencia(playerid, params[], help)
{
	if(GetPlayerInventoryItem(playerid, inv_vysielacka) == 0.0)
	    return SendError(playerid, "Nemá vysielaèku, kúp si jednu v obchode s elektronikou!");

	if(vysielackaToggle[playerid] == 1)
	    return SendError(playerid, "Tvoja vysielaèka je vypnutá, poui /vysielackaon (/von).");

	new
	    Float:F_var;

	if(sscanf(params, "f", F_var))
	    return SendClientSyntax(playerid, "/frekvencia [frekvencia v tvare des. èísla (ex. 911.2)]");

	if(F_var < 1.0 || F_var > 9999.9)
        return SendError(playerid, "Zadaj prosím frekvenciu väèiu ako 0.9 a meniu ako 10000.0!");

	SetPlayerInventoryItem(playerid, inv_vysielacka, F_var);

	new
	    S_string[ 128 ]
	;

	format(S_string, sizeof S_string, "Frekvencia zmenená na '%.2f MHz'. Maj na mysli e frekvencia je citlivá na desatinné èísla, môe a poèu aj niekto z inej!", F_var);

	SendSuccess(playerid, S_string);

	SendRadioMessageFromPlayer(playerid, F_var, "*** Zvuk pripojenia sa na kanál ***", 2);

	return 1;
}

CMD:vytvorittag(playerid, params[])
{

    if(GetPlayerIllegalFaction(playerid) == 0 && GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Nie si v ilegálnej frakcii!");

    if(GetPlayerIllegalFactionRank(playerid) < 5 && GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Aby si mohol vytvori tag musí by aspoò rank 5 v ilegálnej frakcii!");

	if(i_factEnum[GetPlayerIllegalFaction(playerid)][ifact_Perm_Graffitis] == 0 && GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Tvoja ilegálna frakcia nemá prístup k tagom!");

	if(isPlayerEditingTag[playerid] == true)
		return SendError(playerid, "U edituje nejaký tag!");

	new
	    Float:pX, Float:pY, Float:pZ,
	    Float:pA,

		freeId;

	GetPlayerPos(playerid, pX, pY, pZ);
	GetPlayerFacingAngle(playerid, pA);

	pX += 1.5 * floatsin(-pA, degrees);
	pY += 1.5 * floatcos(-pA, degrees);

	AngleToQuarter(pA);

	freeId = Iter_Alloc(Graffiti);

	format(graffitiEnum[freeId][graffiti_Text], 1024, "SPRAY_TAG");
	format(graffitiEnum[freeId][graffiti_Font], 32,   "Most Wazted");
	graffitiEnum[freeId][graffiti_MatSize] 		= 90;
	graffitiEnum[freeId][graffiti_FontSize] 	= 20;
	graffitiEnum[freeId][graffiti_Bold] 		= 1;

	graffitiEnum[freeId][graffiti_IsBeingEdited] = true;
	graffitiEnum[freeId][graffiti_EditedBy]     = playerid;

	graffitiEnum[freeId][graffiti_ObjectId] =
		CreateDynamicObject(
			19477,
			pX, pY, pZ,
			0.0, 0.0, pA - 90,
			GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid),
			-1,
			80.0, 80.0,
			-1, 3
		)
 	;

    RefreshGraffitiTag(freeId);

 	Streamer_Update(playerid);

 	isPlayerEditingTag[playerid] = true;
 	playerEditingTagId[playerid] = freeId;

 	EditDynamicObject(playerid, graffitiEnum[freeId][graffiti_ObjectId]);

	return 1;

}

YCMD:zmazattag(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	new
		S_var[128];

	sscanf(params, "S(°)[128]", S_var);

	new
	    id = GetPlayerGraffiti(playerid, S_var);

	if(id == -1)
	    return SendError(playerid, "Nestojí pri iadnom tagu!");

	new
		query[1024],
		Float:x,
		Float:y,
		Float:z;

	GetDynamicObjectPos(graffitiEnum[id][graffiti_ObjectId], x, y, z);

	mysql_format(MYSQL, query, 1024, "DELETE FROM gm_graffiti WHERE Text = '%e' AND FontSize = '%d' AND X > '%f' AND X < '%f' AND Y > '%f' AND Y < '%f' AND Z > '%f' AND Z < '%f'",
	   	graffitiEnum[id][graffiti_Text], graffitiEnum[id][graffiti_FontSize],
 		x-0.05, x+0.05,
	    y-0.05, y+0.05,
		z-0.05, z+0.05);

	mysql_tquery(MYSQL, query);

	DestroyDynamicObject(graffitiEnum[id][graffiti_ObjectId]);
	Iter_Remove(Graffiti, id);

	SendError(playerid, "Tag úspene zmazaný!");

	return 1;
}

YCMD:taginfo(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	new
		S_var[128];

	sscanf(params, "S(°)[128]", S_var);

	new
	    id = GetPlayerGraffiti(playerid, S_var);

	if(id == -1)
	    return SendError(playerid, "Nestojí pri iadnom tagu!");

	new
		string[144]
	;

	format(string, sizeof string, "Tag s textom '%s' vytvoril '%s'!", graffitiEnum[id][graffiti_Text], graffitiEnum[id][graffiti_Owner]);

	SendSuccess(playerid, string);

	return 1;
}

/*YCMD:whitelist(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 1)
	    return SendClientCantUseCommand(playerid);

	ShowPlayerWhitelist(playerid);

	return 1;
}*/

YCMD:vytvoritmapikonu(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
	    I_var1,
	    I_var2;

	if(sscanf(params, "dd", I_var1, I_var2))
	    return SendClientSyntax(playerid, "/vytvoritmapikonu [model] [stream dist.: local-0, global-1]");

	if(I_var1 < 0 || I_var1 > 63)
	    return SendError(playerid, "Zadal si zlý model!");

    if(I_var2 < 0 || I_var2 > 1)
	    return SendError(playerid, "Zadal si zlý stream distance!");

	new
	    Float:x, Float:y, Float:z,
		query[ 1024 ]
	;

	GetPlayerPos(playerid, x, y, z);

	mysql_format(MYSQL, query, sizeof query, "INSERT INTO gm_map_icons (Icon, X, Y, Z, Style) VALUES ('%d', '%f', '%f', '%f', '%d')",
		I_var1,
		x,y,z,
		I_var2
	);

	mysql_query(MYSQL, query, false);

	CreateSystemMapIcon(I_var1, x, y, z, I_var2);

	SendSuccess(playerid, "Vytvoril si novú map ikonu!");

	return 1;
}

YCMD:zmazatmapikonu(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerSystemMapIcon(playerid) == -1)
	    return SendError(playerid, "Nestojí pri iadnej map ikone!");

	new
		id = GetPlayerSystemMapIcon(playerid),
		query[512];

	mysql_format(MYSQL, query, 512, "DELETE FROM gm_map_icons WHERE Icon = '%d' AND Style = '%d' AND X > '%f' AND X < '%f' AND Y > '%f' AND Y < '%f' AND Z > '%f' AND Z < '%f'",
	   	mapIconEnum[id][mapIcon_Model], mapIconEnum[id][mapIcon_Style],
 		mapIconEnum[id][mapIcon_X]-0.2, mapIconEnum[id][mapIcon_X]+0.2,
	    mapIconEnum[id][mapIcon_Y]-0.2, mapIconEnum[id][mapIcon_Y]+0.2,
		mapIconEnum[id][mapIcon_Z]-0.2, mapIconEnum[id][mapIcon_Z]+0.2);

	mysql_query(MYSQL, query, false);

   	DestroySystemMapIcon(id);

	SendError(playerid, "Map ikona zmazaná!");

	return 1;
}

YCMD:krabica(playerid, params[],help)
{
	new
	    S_var[ 32 ]
	;

	if(sscanf(params,"s[32]",S_var))
	    return SendClientSyntax(playerid, "/krabica [polozit-zobrat-nalozit-vylozit-uskladnit]");

	if(!strcmp(S_var, "polozit",true))
	{
	    if(GetPVarInt(playerid,"haskrabica") != 1)
	        return SendError(playerid,"Nemá krabicu!");

		new Float:pos[3];

		GetPlayerPos(playerid, pos[0],pos[1],pos[2]);

        CreateDynamicDrop(1005, GetPVarInt(playerid,"krtyp"), 1, pos[0],pos[1],pos[2], 0.0, GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), ReturnName(playerid));

        DeletePVar(playerid, "krtyp");
        DeletePVar(playerid, "haskrabica");

        SendSuccess(playerid, "Krabica poloená!");
	} else if(!strcmp(S_var, "zobrat",true))
	{

	    new dropid = -1;

		foreach( new i : Drops )
		{
		    if(strlen(dropEnum[i][drop_PlacedBy]) < 1)
		        continue;

			if(!IsPlayerInDynamicArea(playerid, dropEnum[i][drop_AreaID], 0))
			    continue;

			dropid = i;
			break;
		}

		if(dropid == -1)
		    return SendError(playerid, "Tento príkaz teraz nemôe poui!");

        if(dropEnum[dropid][drop_Type] == 1005)
		{

		    if(GetPVarInt(playerid,"haskrabica") == 1)
		        return SendError(playerid, "U má krabicu!");

		    SetPVarInt(playerid,"haskrabica",1);
		    SetPVarInt(playerid,"krtyp",dropEnum[dropid][drop_Detail]);

	        new
				S_finalString[128 + 25 + 5];

			new S_first[25];
			if(B_playerHasMask[playerid] == false) {
			    strcat(S_first, ReturnName(playerid));
			    strdel(S_first,strfind(S_first,"_",true),25);
			} else {
			    format(S_first,25,"(%d)",I_playerMaskID[playerid]);
			}

		    format(S_finalString, sizeof(S_finalString), "AME: * %s dvíha zo zeme krabicu.", S_first);
		    SendClientMessage(playerid, COLOR_VIOLET, S_finalString);

			format(S_finalString, sizeof(S_finalString), "* %s dvíha zo zeme krabicu.", S_first);
		 	BubbleChat(playerid, COLOR_VIOLET, S_finalString);

		 	DestroyDynamicDrop(dropid);

		}
		else
		    return SendError(playerid, "Nejsi pri krabici!");
	} else if(!strcmp(S_var, "nalozit",true))
	{
	    if(GetPVarInt(playerid,"haskrabica") != 1)
		      return SendError(playerid, "Nemá krabicu!");

        if(IsPlayerInAnyVehicle(playerid))
		    return SendError(playerid, "Sedí v aute!");

		new
		    vehicleid = -1,
		    Float:distance = 2.5,
		    Float:newdist = 0.0,

			Float:Pos[3],
			Float:vPos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		foreach ( new i : Vehicle )
		{
		    if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i))
		        continue;

			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i))
			    continue;

			GetVehicleBoot(i, vPos[0], vPos[1], vPos[2]);

			newdist = GetDistanceFromPoint(vPos[0], vPos[1], vPos[2], Pos[0], Pos[1], Pos[2]);

			if(newdist < distance)
			{
			    vehicleid = i;
			    distance = newdist;
			}

			continue;
		}

		if(vehicleid == -1)
		    return SendError(playerid, "Nestojí pri kufri iadneho vozidla!");

		if(GetVehicleParams(vehicleid, VEHICLE_TYPE_BOOT) != 1)
		    return SendError(playerid, "Kufor neni otvorený!");

		new
			vehiclemodel = GetVehicleModel(vehicleid),

			maxkr = 0,
			alltype = 0
		;

        maxkr = getmaxdeliveryslots(vehiclemodel, alltype);

        if(maxkr == 0 || alltype == 0)
            return SendError(playerid, "Do tohoto vozidla nemôe naloi túto krabicu!");

		if(vEnum[vehicleid][v_CargoQuantity] + 1 > maxkr)
		    return SendError(playerid, "Táto krabica sa do tohoto vozidla nemestí!");

		if(vEnum[vehicleid][v_CargoType] > 0 && vEnum[vehicleid][v_CargoType] != GetPVarInt(playerid,"krtyp"))
            return SendError(playerid, "V tomto vozidle u je naloený iný typ krabice!");

        vEnum[vehicleid][v_CargoType]=GetPVarInt(playerid,"krtyp");
        vEnum[vehicleid][v_CargoQuantity]++;

        if(vEnum[vehicleid][v_CargoQuantity] == 1)
        {
            new Float:fPos[4], Float:fSize[3];

            new
				Float:vX,
	    		Float:vY,
	    		Float:vZ,

	    		str[ 128 ]
			;

			format(str, 128, "V tomto vozidle je %d/%d krabíc!",vEnum[vehicleid][v_CargoQuantity],maxkr);

            GetVehiclePos(vehicleid, fPos[0], fPos[1], fPos[2]);
	        GetVehicleZAngle(vehicleid, fPos[3]);
	        GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]);

	       	vX = fPos[0] - (floatsqroot(fSize[1] + fSize[1]) * floatsin(-fPos[3], degrees));
	        vY = fPos[1] - (floatsqroot(fSize[1] + fSize[1]) * floatcos(-fPos[3], degrees));
	        vZ = fPos[2];

            krabicalabel[vehicleid] = CreateDynamic3DTextLabel(
															str,
															COLOR_ADMINCMD,
															vX, vY, vZ + 0.1,
															7.0,
															INVALID_PLAYER_ID, vehicleid, 1,
															-1, -1,
															-1, 50.0, -1, 1
			);
		}
		else
		{
		    new
		        str[ 128 ]
			;

			format(str, 128, "V tomto vozidle je %d/%d krabíc!",vEnum[vehicleid][v_CargoQuantity],maxkr);
			UpdateDynamic3DTextLabelText(krabicalabel[vehicleid],COLOR_ADMINCMD, str);
		}

        DeletePVar(playerid,"haskrabica");
        DeletePVar(playerid,"krtyp");

        SCFM(playerid, COLOR_ADMINCMD, "[tovar]; Krabica naloená! Je tam %d krabíc z max. %d! Typ krabíc: %s", vEnum[vehicleid][v_CargoQuantity], maxkr, A_cargoTypes[vEnum[vehicleid][v_CargoType]]);

	} else if(!strcmp(S_var, "vylozit",true))
	{
	    if(GetPVarInt(playerid,"haskrabica") == 1)
		  return SendError(playerid, "U má krabicu!");

        if(IsPlayerInAnyVehicle(playerid))
		    return SendError(playerid, "Sedí v aute!");

		new
		    vehicleid = -1,
		    Float:distance = 2.5,
		    Float:newdist = 0.0,

			Float:Pos[3],
			Float:vPos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		foreach ( new i : Vehicle )
		{
		    if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i))
		        continue;

			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i))
			    continue;

			GetVehicleBoot(i, vPos[0], vPos[1], vPos[2]);

			newdist = GetDistanceFromPoint(vPos[0], vPos[1], vPos[2], Pos[0], Pos[1], Pos[2]);

			if(newdist < distance)
			{
			    vehicleid = i;
			    distance = newdist;
			}

			continue;
		}

		if(vehicleid == -1)
		    return SendError(playerid, "Nestojí pri kufri iadneho vozidla!");

		if(GetVehicleParams(vehicleid, VEHICLE_TYPE_BOOT) != 1)
		    return SendError(playerid, "Kufor neni otvorený!");

		if(vEnum[vehicleid][v_CargoQuantity] <= 0)
		    return SendError(playerid, "V tomto vozidle nie je iadna krabica!");

        SetPVarInt(playerid, "haskrabica",1);
        SetPVarInt(playerid,"krtyp",vEnum[vehicleid][v_CargoType]);

        vEnum[vehicleid][v_CargoQuantity] --;

		if(vEnum[vehicleid][v_CargoQuantity] <= 0)
		    DestroyDynamic3DTextLabel(krabicalabel[vehicleid]);
		else
		{
		    new
		        str[ 128 ],
		        alltype
			;
            new maxkr = getmaxdeliveryslots(GetVehicleModel(vehicleid), alltype);
			format(str, 128, "V tomto vozidle je %d/%d krabíc!",vEnum[vehicleid][v_CargoQuantity],maxkr);
			UpdateDynamic3DTextLabelText(krabicalabel[vehicleid],COLOR_ADMINCMD, str);
		}

        SCFM(playerid, COLOR_ADMINCMD, "[tovar]; Krabica vyloená! Je tam ete %d krabíc! Typ krabíc: %s", vEnum[vehicleid][v_CargoQuantity], A_cargoTypes[vEnum[vehicleid][v_CargoType]]);

	} else if(!strcmp(S_var, "uskladnit",true))
	{
	    if(GetPVarInt(playerid,"haskrabica") != 1)
	        return SendError(playerid,"Nemá krabicu!");

		foreach( new i : Businesses ) {
		    if(businessEnum[i][bz_PosX] == 0 && businessEnum[i][bz_PosY] == 0) continue;
			if(businessEnum[i][bz_PosVirtualWorld] != GetPlayerVirtualWorld(playerid))
			{
			    if(businessEnum[i][bz_Address] != GetPlayerVirtualWorld(playerid)) continue;
			    if(GetPlayerInterior(playerid) != floatround(intList[businessEnum[i][bz_InteriorID]][5], floatround_round)) continue;
				if(!IsPlayerInRangeOfPoint(playerid, 3.0, intList[businessEnum[i][bz_InteriorID]][0], intList[businessEnum[i][bz_InteriorID]][1], intList[businessEnum[i][bz_InteriorID]][2])) continue;

	            ShowPlayerBusinessInfo(playerid, i);

				return 1;
			}
			if(businessEnum[i][bz_PosInterior] != GetPlayerInterior(playerid)) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 2.5, businessEnum[i][bz_PosX], businessEnum[i][bz_PosY], businessEnum[i][bz_PosZ])) continue;

			if(GetPVarInt(playerid,"krtyp") != businessEnum[i][bz_BusinessType])
				return SendError(playerid,"Typ krabice nekoreponduje s typom biznisu!");

            businessEnum[i][bz_Tovar] += A_cargoStocked[businessEnum[i][bz_BusinessType]];

	        DeletePVar(playerid,"haskrabica");
        	DeletePVar(playerid,"krtyp");

			return 1;
		}

		new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);

		if(zzz != -1)
		{
		    A_cargoStorage[zzz][1] += A_cargoStocked[GetPVarInt(playerid, "krtyp")];

		    DeletePVar(playerid,"haskrabica");
        	DeletePVar(playerid,"krtyp");

        	new str[1024],id=zzz;
        	format(str, 1024, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", A_cargoStorage[zzz][1]);

			UpdateDynamic3DTextLabelText(menuEnum[id][menu_LABEL], 0xffffffff, str);

			mysql_format(MYSQL, str, sizeof str, "UPDATE gm_menu SET storage_CAR_PARTS = '%d' WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
			    A_cargoStorage[zzz][1],menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
			    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);

			mysql_tquery(MYSQL, str);

			SendSuccess(playerid, "Doplnil si tovar!");
			return 1;
		}

		SendError(playerid, "Nestojí pri vchode do biznisu!");
	}
	return 1;
}

YCMD:drevo(playerid, params[],help)
{
	new
	    S_var[ 32 ]
	;

	if(sscanf(params,"s[32]",S_var))
	    return SendClientSyntax(playerid, "/drevo [nalozit-vylozit]");

	if(!strcmp(S_var, "nalozit",true))
	{
	    if(Anawalt::playerhold[playerid][0] == 0)
		      return SendError(playerid, "Nemá drevo!");

        if(IsPlayerInAnyVehicle(playerid))
		    return SendError(playerid, "Sedí v aute!");

		new
		    vehicleid = -1,
		    Float:distance = 2.5,
		    Float:newdist = 0.0,

			Float:Pos[3],
			Float:vPos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		foreach ( new i : Vehicle )
		{
		    if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i))
		        continue;

			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i))
			    continue;

			GetVehicleBoot(i, vPos[0], vPos[1], vPos[2]);

			newdist = GetDistanceFromPoint(vPos[0], vPos[1], vPos[2], Pos[0], Pos[1], Pos[2]);

			if(newdist < distance)
			{
			    vehicleid = i;
			    distance = newdist;
			}

			continue;
		}

		if(vehicleid == -1)
		    return SendError(playerid, "Nestojí pri kufri iadneho vozidla!");

		if(GetVehicleParams(vehicleid, VEHICLE_TYPE_BOOT) != 1)
		    return SendError(playerid, "Úloný priestor neni otvorený!");
		    
		if(GetVehicleFactionType(vehicleid) != FACTION_TYPE_WOODCUTTER)
		    return SendError(playerid, "Do tohoto vozidla nemôe naloi drevo!");

		if(vEnum[vehicleid][v_tree_Type] != 0 && vEnum[vehicleid][v_tree_Count] > 0 && vEnum[vehicleid][v_tree_Type] != Anawalt::playerhold[playerid][1])
		    return SendError(playerid, "Vo vozidle je iný typ dreva!");

		if(vEnum[vehicleid][v_tree_Count] + Anawalt::playerhold[playerid][2] > 2000)
		    return SendError(playerid, "Táto várka sa do tohoto vozidla nemestí!");

        vEnum[vehicleid][v_tree_Count] += Anawalt::playerhold[playerid][2];
        vEnum[vehicleid][v_tree_Type] = Anawalt::playerhold[playerid][1];
        
        Anawalt::playerhold[playerid][0] = 0;
        Anawalt::playerhold[playerid][1] = 0;
        Anawalt::playerhold[playerid][2] = 0;

        SetPlayerSpecialAction(playerid, 0);
        RemovePlayerAttachedObject(playerid, 9);

        SCFM(playerid, COLOR_ADMINCMD, "[drevo]; Drevo naloené! Je tam %d ks z max. %d ks! Typ dreva: %s", vEnum[vehicleid][v_tree_Count], 2000, Anawalt::treeTypeNames[vEnum[vehicleid][v_tree_Type]]);

	} else if(!strcmp(S_var, "vylozit",true))
	{
        if(Anawalt::playerhold[playerid][0] != 0)
		  return SendError(playerid, "U má drevo!");

        if(IsPlayerInAnyVehicle(playerid))
		    return SendError(playerid, "Sedí v aute!");

		new
		    vehicleid = -1,
		    Float:distance = 2.5,
		    Float:newdist = 0.0,

			Float:Pos[3],
			Float:vPos[3];

		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		foreach ( new i : Vehicle )
		{
		    if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i))
		        continue;

			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i))
			    continue;

			GetVehicleBoot(i, vPos[0], vPos[1], vPos[2]);

			newdist = GetDistanceFromPoint(vPos[0], vPos[1], vPos[2], Pos[0], Pos[1], Pos[2]);

			if(newdist < distance)
			{
			    vehicleid = i;
			    distance = newdist;
			}

			continue;
		}

		if(vehicleid == -1)
		    return SendError(playerid, "Nestojí pri kufri iadneho vozidla!");

		if(GetVehicleParams(vehicleid, VEHICLE_TYPE_BOOT) != 1)
		    return SendError(playerid, "Kufor neni otvorený!");

		if(vEnum[vehicleid][v_tree_Count] <= 0)
		    return SendError(playerid, "V tomto vozidle nie je iadne drevo!");
		    
		new maxx = 20;
		
		if(vEnum[vehicleid][v_tree_Count] < maxx) maxx = vEnum[vehicleid][v_tree_Count];
		vEnum[vehicleid][v_tree_Count] -= maxx;

        Anawalt::playerhold[playerid][0] = 1;
		Anawalt::playerhold[playerid][1] = vEnum[vehicleid][v_tree_Type];
		Anawalt::playerhold[playerid][2] = maxx;

		SetPlayerSpecialAction(playerid, 25);
		SetPlayerAttachedObject(playerid, 9, 1463, 6, 0.021, 0.104, -0.226, 66.6999, -171.2, -109.6, 0.28, 0.31, 0.457);

        SCFM(playerid, COLOR_ADMINCMD, "[drevo]; Drevo vyloené! Vyloil si %d kusov, zostalo tam %d! Typ dreva: %s", maxx, vEnum[vehicleid][v_tree_Count], Anawalt::treeTypeNames[vEnum[vehicleid][v_tree_Type]]);

	}
	return 1;
}

YCMD:pvc(playerid,params[],help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendError(playerid, "Nemôe poui tento príkaz!");

    new
		vid = -1,
		Float:newdist = 0.0,
		Float:distance = 3.1,
		Float:pos[3],
		Float:ppos[3];

	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

	foreach ( new i : Vehicle ) {
		if(!IsValidVehicle(i)) continue;
		if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
		GetVehiclePos(i, pos[0], pos[1], pos[2]);

		newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

		if(newdist < distance) {
			vid = i;
			distance = newdist;
			continue;
		}
	}
	if(vid == -1 && !IsPlayerInAnyVehicle(playerid)) return SendError(playerid, "Nie je tu iadne vozidlo!");
	vid = GetPlayerVehicleID(playerid);
	if(vid == 0) return SendError(playerid, "Nie je tu iadne vozidlo!");

	if(GetVehicleModel(vid) != 584)
	    return SendError(playerid, "Toto neni cisterna!");

	SCFM(playerid, COLOR_ADMINCMD, "> Majitel tejto cisterny je %s!", cistvod[vid]);

	return 1;
}

YCMD:pv(playerid,params[],help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendError(playerid, "Nemôe poui tento príkaz");

    new
		vid = -1,
		Float:newdist = 0.0,
		Float:distance = 3.1,
		Float:pos[3],
		Float:ppos[3];

	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

	foreach ( new i : Vehicle ) {
		if(!IsValidVehicle(i)) continue;
		if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
		GetVehiclePos(i, pos[0], pos[1], pos[2]);

		newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

		if(newdist < distance) {
			vid = i;
			distance = newdist;
			continue;
		}
	}
	if(vid == -1 && !IsPlayerInAnyVehicle(playerid)) return SendError(playerid, "Nie je tu iadne vozidlo!");
	vid = GetPlayerVehicleID(playerid);
	if(vid == 0) return SendError(playerid, "Nie je tu iadne vozidlo!");

	if(GetVehicleModel(vid) == 584)
	    return SendError(playerid, "Toto je cisterna!");

 	new
 		finalString[1024*2],
		tString[128 + 20];

	format(finalString, 1024, "{e34f4f}Posledný oféri vozidla ID %d;\n\n{ffffff}", vid);
	for(new id = MAX_LAST_DRIVER - 1; id > -1; id --)
	{
	    if(id < 0) break;
		format(tString, 128+20, "%d. %s\n", id, posvod[vid][id]);
		strcat(finalString, tString);
	}

	ShowPlayerDialog(playerid, did_Null, DIALOG_STYLE_MSGBOX, "POSLEDNÍ OFERI", finalString, "OK", "");

	return 1;
}

YCMD:cisterna(playerid,params[],help)
{
	if(IsPlayerInDynamicMenu(playerid,menut_d_cisterna))
	{

	    new
	        vehicleid = GetPlayerVehicleID(playerid),
	        trailerid = GetVehicleTrailer(vehicleid)
		;

		if(trailerid == 0 || GetVehicleModel(trailerid) != 584)
		    return SendError(playerid, "Nemá napojenú cisternu!");

		new Float:fcena = ((palivocisterna[vehicleid] * REFILL_FUEL_PRICE) * 0.2);

		ex_GivePlayerMoney(playerid, fcena);
		money_work[playerid]+=floatround(fcena,floatround_round);
        palivocisterna[vehicleid] = 0;
        DestroyVehicle(trailerid);

        SCFM(playerid, COLOR_ADMINCMD, "> Vrátil si cisternu a dostal si %.2f$!", fcena);

	}
		else return SendError(playerid,"Tento príkaz teraz nemôe poui!");

	return 1;
}

YCMD:predatkrabicu(playerid,params[],help)
{
	if(IsPlayerInDynamicMenu(playerid, menut_sellkrab))
	{
	    if(GetPVarInt(playerid,"haskrabica")!=1)
	    	return SendError(playerid, "Nedrí krabicu!");

		new Float:fcena = (float(A_cargoPrice[GetPVarInt(playerid, "krtyp")])*0.8);

		ex_GivePlayerMoney(playerid, fcena);
		money_work[playerid]+=floatround(fcena,floatround_round);

		SCFM(playerid, COLOR_ADMINCMD, "> Predal si krabicu s %s za %.2f$!", A_cargoTypes[GetPVarInt(playerid, "krtyp")], fcena);

        DeletePVar(playerid, "krtyp");
        DeletePVar(playerid, "haskrabica");

	    return 1;
	}

	SendError(playerid,"Tento príkaz teraz nemôe poui!");
	return 1;
}

YCMD:sklad(playerid, params[], help)
{

    if(IsPlayerInDynamicMenu(playerid, menut_trucker_vyklad))
	{
	    if(GetPVarInt(playerid,"haskrabica")==1)
	    return SendError(playerid, "U drí krabicu!");

		new
		    string[ 1024 ] = "Typ tovaru\tCena za krabicu\tKusy v jednej krabici\n",
		    tstr[128]
		;

	    for(new x = 1; x < sizeof A_cargoTypes; x++)
	    {
	        format(tstr, sizeof tstr, "%s\t%d$\t%d\n",A_cargoTypes[x],A_cargoPrice[x],A_cargoStocked[x]);
	        strcat(string,tstr);
	    }

	    ShowPlayerDialog(playerid, did_trucker_buy, DIALOG_STYLE_TABLIST_HEADERS, "KÚPA KRABÍC", string, "KÚPI", "ZRUI");

	    return 1;

	}
	else if(IsPlayerInDynamicMenu(playerid, menut_trucker_naklad))
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    	return SendError(playerid, "Nesedí v kamióne!");

		switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
		{
		    case 403, 514, 515:
		    {}

		    default:
		        return SendError(playerid, "Nesedí v kamióne!");
		}

		if(palivocisterna[GetPlayerVehicleID(playerid)] >= 4000)
		    return SendError(playerid, "Tento kamión u má nieèo naloené!");

		/*new
		    Float:f_cena,
		    cena
		;

        f_cena = ( float(2000) * REFILL_FUEL_PRICE );
		cena = floatround(f_cena, floatround_ceil);

		if(cena < 1)
		    cena = 1;

		if(ex_GetPlayerMoney(playerid) < cena)
		    return SendError(playerid, "Nemá dos peòazí!");

		ex_GivePlayerMoney(playerid, -cena);

		new
		    Float:p[3];

		GetVehiclePos(GetPlayerVehicleID(playerid),p[0],p[1],p[2]);

		new vha = CreateVehicle(584,p[0],p[1],p[2]+35.0,0.0, 1, 1, -1, 0);
		format(vEnum[vha][v_SPZ], 24, "TAHAC");

		SetTimerEx("atve", 800, false, "ii", GetPlayerVehicleID(playerid),vha);
		SetTimerEx("fpaliv", 30000, false, "ii", playerid,GetPlayerVehicleID(playerid));

		TogglePlayerControllable(playerid, 0);
		SendSuccess(playerid, "Poèkaj 30 sekúnd kým sa ti naloí palivo!");*/

		ShowPlayerDialog(
			playerid, did_trucker_buyfuel, DIALOG_STYLE_INPUT, "SKLAD  KÚPI",
			"{FFFFFF}> Zadaj poèet litrov od 100-4000, ko¾ko chce naloi!",
			"OK","SPA"
		);

	    return 1;

	}

	SendError(playerid, "Tento príkaz teraz nemôe poui!");

	return 1;

}

function fpaliv(playerid,vehicleid)
{

	TogglePlayerControllable(playerid, 1);
    SCFM(playerid, COLOR_ADMINCMD, "> Má %dL paliva! Môe ich odvies na benzínku a doplni príkazom /doplnitpumpu!", palivocisterna[vehicleid]);

	return 1;
}

function atve(v1,v2)
{
	return AttachTrailerToVehicle(v2,v1);
}

YCMD:tuning(playerid, params[], help)
{
	if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna))
	        return SendError(playerid, "Nie si v autodielni!");

        //new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);
		//if(zzz != -1 && A_cargoStorage[zzz][1] < 1) return SendError(playerid, "Táto dielòa nemá na sklade diely!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

		pvehicleid[playerid] = vid;
		pmodelid[playerid] = GetVehicleModel(vid);

		ShowPlayerDialog(playerid, did_tuning_main, DIALOG_STYLE_LIST, "TUNING", "Paint Jobs\nKolesá\nHydraulika\nNitro\nZmaza tuning", "VYBRA", "ZAVRIE");
	}
	else
	{
	    SendError(playerid, "Tento príkaz nemôe poui!");
	}

	return 1;
}

YCMD:opravit(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC)
	{

    	if(!IsPlayerInDynamicMenu(playerid, menut_autodielna))
	        return SendError(playerid, "Nie si v autodielni!");

        new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);
		if(zzz != -1 && A_cargoStorage[zzz][1] < 1) return SendError(playerid, "Táto dielòa nemá na sklade diely!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

		/*if(strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
		{

		    new
				bool:fnd = false;

			for( new x; x < 4; x++ )
			{
			    if(!strcmp(playerCharacters[playerid][x], vEnum[vid][v_Owner], false))
				{
				    fnd = true;
				    break;
				}
			}

			if(fnd == true)
		    {
		        return SendError(playerid, "Nemôe upravova vozidlo svojmu druhému charakteru!");
		    }
		}*/

	    new
	        var[12];

		if(sscanf(params,"s[12]", var))
		    return SendClientSyntax(playerid, "/opravit [lavedvere-pravedvere-kapota-kufor-pnaraznik-znaraznik-pneu-svetla-vsetko]");

        new door[4], panel[7], tirese[4], lightse[4];

		new panels, doors, lights, tires, vsetko = 0;
		GetVehicleDamageStatus(vid, panels, doors, lights, tires);

		decode_doors(doors, door[0], door[1], door[2], door[3]);
		decode_tires(tires, tirese[0], tirese[1], tirese[2], tirese[3]);
		decode_lights(lights, lightse[0], lightse[1], lightse[2]);
		decode_panels(panels, panel[0], panel[1], panel[2], panel[3], panel[4], panel[5], panel[6]);

		if(!strcmp(var,"LaveDvere",true)) door[2] = 0;
		else if(!strcmp(var,"PraveDvere",true)) door[3] = 0;
		else if(!strcmp(var,"Kapota",true)) door[0] = 0;
		else if(!strcmp(var,"Kufor",true)) door[1] = 0;
		else if(!strcmp(var,"PNaraznik",true)) panel[5] = 0;
		else if(!strcmp(var,"ZNaraznik",true)) panel[6] = 0;
		else if(!strcmp(var,"Pneu",true)) tirese[0] = 0, tirese[1] = 0, tirese[2] = 0, tirese[3] = 0;
		else if(!strcmp(var,"Svetla",true)) lightse[0] = 0, lightse[1] = 0, lightse[2] = 0, lightse[3] = 0;
		else if(!strcmp(var,"vsetko", true)) vsetko = 1;
		else {
		    return SendClientSyntax(playerid, "/opravit [vsetko-lavedvere-pravedvere-kapota-kufor-pnaraznik-znaraznik-pneu-svetla");
		}

		new vpar[7],Float:vhp;
		vhac_GetVehicleHealth(vid,vhp);

		GetVehicleParamsEx(vid, vpar[0], vpar[1], vpar[2], vpar[3], vpar[4], vpar[5], vpar[6]);
		SetVehicleParamsEx(vid, 0, 0, 0, 0, 0, 0, 0);

		if(zzz != -1&&vhp< 999.9)
		{
			new str[1024],id=zzz;
			A_cargoStorage[zzz][1]--;
	    	format(str, 1024, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", A_cargoStorage[zzz][1]);
			UpdateDynamic3DTextLabelText(menuEnum[id][menu_LABEL], 0xffffffff, str);
			mysql_format(MYSQL, str, sizeof str, "UPDATE gm_menu SET storage_CAR_PARTS = '%d' WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
			    A_cargoStorage[zzz][1],menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
			    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);
			mysql_tquery(MYSQL, str);
		}

		RepairVehicle(vid);

		if(vsetko == 0)
			UpdateVehicleDamageStatus(vid, encode_panels(panel[0], panel[1], panel[2], panel[3], panel[4], panel[5], panel[6]), encode_doors(door[0], door[1], door[2], door[3]), encode_lights(lightse[0], lightse[1], lightse[2]), encode_tires(tirese[0], tirese[1], tirese[2], tirese[3]));
		else
		    RepairVehicle(vid);

		SetVehicleParamsEx(vid, vpar[0], vpar[1], vpar[2], vpar[3], vpar[4], vpar[5], vpar[6]);

		SendSuccess(playerid, "Èas vozidla opravená!");
	}
	else
	{
	    SendError(playerid, "Tento príkaz nemôe poui!");
	}

	return 1;
}

YCMD:vymenitkoleso(playerid, params[], help)
{
    if(hasRezerva[playerid] && GetPlayerInventoryItem(playerid, inv_rezerva) > 0)
	{

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

	    new
	        var[12];

		if(sscanf(params,"s[12]", var))
		    return SendClientSyntax(playerid, "/vymenitkoleso [lavepredne-lavezadne-pravepredne-pravezadne]");

        new tiresx[4];

		new panels, doors, lights, tires;
		GetVehicleDamageStatus(vid, panels, doors, lights, tires);

		decode_tires(tires, tiresx[0], tiresx[1], tiresx[2], tiresx[3]);

		if(!strcmp(var,"lavepredne",true))
		{
			if(tiresx[3] != 1)
			    return SendError(playerid, "Toto koleso nie je prasknute!");

            tiresx[3] = 0;
		}
		else if(!strcmp(var,"lavezadne",true))
		{
			if(tiresx[2] != 1)
			    return SendError(playerid, "Toto koleso nie je prasknute!");

            tiresx[2] = 0;
		}
		else if(!strcmp(var,"pravepredne",true))
		{
			if(tiresx[1] != 1)
			    return SendError(playerid, "Toto koleso nie je prasknute!");

            tiresx[1] = 0;
		}
		else if(!strcmp(var,"pravezadne",true))
		{
			if(tiresx[0] != 1)
			    return SendError(playerid, "Toto koleso nie je prasknute!");

            tiresx[0] = 0;
		}
		else {
		    return SendClientSyntax(playerid, "/vymenitkoleso [lavepredne-lavezadne-pravepredne-pravezadne]");
		}

        SetPlayerInventoryItem(playerid, inv_rezerva, 0);
		UpdateVehicleDamageStatus(vid, panels, doors, lights, encode_tires(tiresx[0], tiresx[1], tiresx[2], tiresx[3]));
		FormatWarnEx(playerid,2, "PlayerCmd:", COLOR_ADMINCMD, "%s vymenil koleso auta s emóciami: %s", GetPlayerNameEx(playerid, USE_PUREIDNAME), var);

		SendSuccess(playerid, "Koleso vozidla vymenené!");
	}
	else
	{
	    SendError(playerid, "Nemá v rukách rezervu!");
	}

	return 1;
}

YCMD:sundat(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerFactionType(playerid) == FACTION_TYPE_FIRE || GetPlayerAdminLevel(playerid) >= 5)
	{

	    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC && !IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 5)
	        return SendError(playerid, "Nie si v autodielni!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

	    new
	        var[12];

		if(sscanf(params,"s[12]", var))
		    return SendClientSyntax(playerid, "/sundat [lavedvere-pravedvere-kapota-kufor-pnaraznik-znaraznik]");

        new door[4], panel[7];
		new panels, doors, lights, tires;
		GetVehicleDamageStatus(vid, panels, doors, lights, tires);
		decode_doors(doors, door[0], door[1], door[2], door[3]);
		decode_panels(panels, panel[0], panel[1], panel[2], panel[3], panel[4], panel[5], panel[6]);

		if(!strcmp(var,"LaveDvere",true)) door[2] = 4, vEnum[vid][v_Sun_LDoor] = 4;
		else if(!strcmp(var,"PraveDvere",true)) door[3] = 4, vEnum[vid][v_Sun_RDoor] = 4;
		else if(!strcmp(var,"Kapota",true)) door[0] = 4, vEnum[vid][v_Sun_Hood] = 4;
		else if(!strcmp(var,"Kufor",true)) door[1] = 4, vEnum[vid][v_Sun_Boot] = 4;
		else if(!strcmp(var,"PNaraznik",true)) panel[5] = 3, vEnum[vid][v_Sun_FBumper] = 3;
		else if(!strcmp(var,"ZNaraznik",true)) panel[6] = 3, vEnum[vid][v_Sun_RBumper] = 3;
		else {
		    return SendClientSyntax(playerid, "/sundat [lavedvere-pravedvere-kapota-kufor-pnaraznik-znaraznik]");
		}

		new vpar[7];
		GetVehicleParamsEx(vid, vpar[0], vpar[1], vpar[2], vpar[3], vpar[4], vpar[5], vpar[6]);
		SetVehicleParamsEx(vid, 0, 0, 0, 0, 0, 0, 0);
		UpdateVehicleDamageStatus(vid, encode_panels(panel[0], panel[1], panel[2], panel[3], panel[4], panel[5], panel[6]), encode_doors(door[0], door[1], door[2], door[3]), lights, tires);
		SetVehicleParamsEx(vid, vpar[0], vpar[1], vpar[2], vpar[3], vpar[4], vpar[5], vpar[6]);
		SendSuccess(playerid, "Èas vozidla sundaná!");
	}
	else
	{
	    SendError(playerid, "Tento príkaz nemôe poui!");
	}

	return 1;
}

YCMD:nasadit(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna))
	        return SendError(playerid, "Nie si v autodielni!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

	    new
	        var[12];

		if(sscanf(params,"s[12]", var))
		    return SendClientSyntax(playerid, "/nasadit [lavedvere-pravedvere-kapota-kufor-pnaraznik-znaraznik]");

        new door[4], panel[7];
		new panels, doors, lights, tires;
		GetVehicleDamageStatus(vid, panels, doors, lights, tires);
		decode_doors(doors, door[0], door[1], door[2], door[3]);
		decode_panels(panels, panel[0], panel[1], panel[2], panel[3], panel[4], panel[5], panel[6]);

		if(!strcmp(var,"LaveDvere",true)) door[2] = 0, vEnum[vid][v_Sun_LDoor] = 0;
		else if(!strcmp(var,"PraveDvere",true)) door[3] = 0, vEnum[vid][v_Sun_RDoor] = 0;
		else if(!strcmp(var,"Kapota",true)) door[0] = 0, vEnum[vid][v_Sun_Hood] = 0;
		else if(!strcmp(var,"Kufor",true)) door[1] = 0, vEnum[vid][v_Sun_Boot] = 0;
		else if(!strcmp(var,"PNaraznik",true)) panel[5] = 0, vEnum[vid][v_Sun_FBumper] = 0;
		else if(!strcmp(var,"ZNaraznik",true)) panel[6] = 0, vEnum[vid][v_Sun_RBumper] = 0;
		else {
		    return SendClientSyntax(playerid, "/nasadit [lavedvere-pravedvere-kapota-kufor-pnaraznik-znaraznik]");
		}

		new vpar[7];
		GetVehicleParamsEx(vid, vpar[0], vpar[1], vpar[2], vpar[3], vpar[4], vpar[5], vpar[6]);
		SetVehicleParamsEx(vid, 0, 0, 0, 0, 0, 0, 0);
		UpdateVehicleDamageStatus(vid, encode_panels(panel[0], panel[1], panel[2], panel[3], panel[4], panel[5], panel[6]), encode_doors(door[0], door[1], door[2], door[3]), lights, tires);
		SetVehicleParamsEx(vid, vpar[0], vpar[1], vpar[2], vpar[3], vpar[4], vpar[5], vpar[6]);
		SendSuccess(playerid, "Èas vozidla nasadena, zmena sa prejavi po /opravit (èas)!");
	}
	else
	{
	    SendError(playerid, "Tento príkaz nemôe poui!");
	}

	return 1;
}

YCMD:pridatalarm(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerAdminLevel(playerid) > 3)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 4)
	        return SendError(playerid, "Nie si v autodielni!");

        new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);
		if(zzz != -1 && A_cargoStorage[zzz][1] < 1) return SendError(playerid, "Táto dielòa nemá na sklade diely!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

		/*if(strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
		{

		    new
				bool:fnd = false;

			for( new x; x < 4; x++ )
			{
			    if(!strcmp(playerCharacters[playerid][x], vEnum[vid][v_Owner], false))
				{
				    fnd = true;
				    break;
				}
			}

			if(fnd == true)
		    {
		        return SendError(playerid, "Nemôe upravova vozidlo svojmu druhému charakteru!");
		    }
		}*/

        if(vEnum[GetPlayerVehicleID(playerid)][v_AlarmItem] != 0)
        	return SendError(playerid, "Toto vozidlo u má alarm!");

		vEnum[GetPlayerVehicleID(playerid)][v_AlarmItem] = 1;

		SendSuccess(playerid, "Alarm naintalovaný!");

		if(zzz != -1)
		{
			new str[1024],id=zzz;
			A_cargoStorage[zzz][1]--;
	    	format(str, 1024, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", A_cargoStorage[zzz][1]);
			UpdateDynamic3DTextLabelText(menuEnum[id][menu_LABEL], 0xffffffff, str);
			mysql_format(MYSQL, str, sizeof str, "UPDATE gm_menu SET storage_CAR_PARTS = '%d' WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
			    A_cargoStorage[zzz][1],menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
			    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);
			mysql_tquery(MYSQL, str);
		}

	}
	else
		SendError(playerid, "Tento príkaz nemôe poui!");

	return 1;
}

YCMD:odstranitalarm(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerAdminLevel(playerid) > 3)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 4)
	        return SendError(playerid, "Nie si v autodielni!");

        new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);
		if(zzz != -1 && A_cargoStorage[zzz][1] < 1) return SendError(playerid, "Táto dielòa nemá na sklade diely!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

        if(vEnum[GetPlayerVehicleID(playerid)][v_AlarmItem] == 0)
        	return SendError(playerid, "Toto vozidlo nemá alarm!");

		vEnum[GetPlayerVehicleID(playerid)][v_AlarmItem] = 0;

		SendSuccess(playerid, "Alarm odintalovaný!");

		if(zzz != -1)
		{
			new str[1024],id=zzz;
			A_cargoStorage[zzz][1]++;
	    	format(str, 1024, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", A_cargoStorage[zzz][1]);
			UpdateDynamic3DTextLabelText(menuEnum[id][menu_LABEL], 0xffffffff, str);
			mysql_format(MYSQL, str, sizeof str, "UPDATE gm_menu SET storage_CAR_PARTS = '%d' WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
			    A_cargoStorage[zzz][1],menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
			    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);
			mysql_tquery(MYSQL, str);
		}

	}
	else
		SendError(playerid, "Tento príkaz nemôe poui!");

	return 1;
}

YCMD:pridatradio(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerAdminLevel(playerid) > 3)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 4)
	        return SendError(playerid, "Nie si v autodielni!");

        new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);
		if(zzz != -1 && A_cargoStorage[zzz][1] < 1) return SendError(playerid, "Táto dielòa nemá na sklade diely!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

		/*if(strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
		{

		    new
				bool:fnd = false;

			for( new x; x < 4; x++ )
			{
			    if(!strcmp(playerCharacters[playerid][x], vEnum[vid][v_Owner], false))
				{
				    fnd = true;
				    break;
				}
			}

			if(fnd == true)
		    {
		        return SendError(playerid, "Nemôe upravova vozidlo svojmu druhému charakteru!");
		    }
		}*/

        if(vEnum[GetPlayerVehicleID(playerid)][v_CarRadio] == 1)
        	return SendError(playerid, "Toto vozidlo u má rádio!");

		vEnum[GetPlayerVehicleID(playerid)][v_CarRadio] = 1;

		SendSuccess(playerid, "Autorádio naintalované!");

		if(zzz != -1)
		{
			new str[1024],id=zzz;
			A_cargoStorage[zzz][1]--;
	    	format(str, 1024, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", A_cargoStorage[zzz][1]);
			UpdateDynamic3DTextLabelText(menuEnum[id][menu_LABEL], 0xffffffff, str);
			mysql_format(MYSQL, str, sizeof str, "UPDATE gm_menu SET storage_CAR_PARTS = '%d' WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
			    A_cargoStorage[zzz][1],menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
			    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);
			mysql_tquery(MYSQL, str);
		}

	}
	else
		SendError(playerid, "Tento príkaz nemôe poui!");

	return 1;
}

YCMD:odcerpatpalivo(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerAdminLevel(playerid) > 3)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 4)
	        return SendError(playerid, "Nie si v autodielni!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

		vEnum[vid][v_Fuel] = 0;
		vEnum[vid][v_FuelType] = FUEL_NOFUEL;
		SendSuccess(playerid, "Palivo odèerpané!");

	}
	else
		SendError(playerid, "Tento príkaz nemôe poui!");

	return 1;
}

YCMD:pridatpancier(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerAdminLevel(playerid) > 3)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 4)
	        return SendError(playerid, "Nie si v autodielni!");

        new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);
		if(zzz != -1 && A_cargoStorage[zzz][1] < 1) return SendError(playerid, "Táto dielòa nemá na sklade diely!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

		/*if(strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
		{

		    new
				bool:fnd = false;

			for( new x; x < 4; x++ )
			{
			    if(!strcmp(playerCharacters[playerid][x], vEnum[vid][v_Owner], false))
				{
				    fnd = true;
				    break;
				}
			}

			if(fnd == true)
		    {
		        return SendError(playerid, "Nemôe upravova vozidlo svojmu druhému charakteru!");
		    }
		}*/

        if(vEnum[vid][v_def_Health] >= 1500.0)
        	return SendError(playerid, "Toto vozidlo u je opancierované!");

		if(ex_GetPlayerMoney(playerid) < 40000)
		    return SendError(playerid, "Nemá 40.000$ na pancierovanie!");

		ex_GivePlayerMoney(playerid, -40000);
		money_spent[playerid]+=floatround(40000,floatround_round);
		FormatLog(log_type_player, "%s (%s - %s) pridal pancier na auto so SPZ %s", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), vEnum[vid][v_SPZ]);
		vEnum[vid][v_def_Health] = 1500.0;
		SendSuccess(playerid, "Vozidlo opancierované!");

		if(zzz != -1)
		{
			new str[1024],id=zzz;
			A_cargoStorage[zzz][1]--;
	    	format(str, 1024, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", A_cargoStorage[zzz][1]);
			UpdateDynamic3DTextLabelText(menuEnum[id][menu_LABEL], 0xffffffff, str);
			mysql_format(MYSQL, str, sizeof str, "UPDATE gm_menu SET storage_CAR_PARTS = '%d' WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
			    A_cargoStorage[zzz][1],menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
			    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);
			mysql_tquery(MYSQL, str);
		}

	}
	else
		SendError(playerid, "Tento príkaz nemôe poui!");

	return 1;
}

YCMD:odstranitpancier(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerAdminLevel(playerid) > 3)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 4)
	        return SendError(playerid, "Nie si v autodielni!");

        new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);
		if(zzz != -1 && A_cargoStorage[zzz][1] < 1) return SendError(playerid, "Táto dielòa nemá na sklade diely!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

        if(vEnum[GetPlayerVehicleID(playerid)][v_def_Health] <= 1000.0)
        	return SendError(playerid, "Toto vozidlo nemá pancier!");

		vEnum[GetPlayerVehicleID(playerid)][v_def_Health] = 1000.0;

		SendSuccess(playerid, "Vozidlo odpancierované!");

		if(zzz != -1)
		{
			new str[1024],id=zzz;
			A_cargoStorage[zzz][1]++;
	    	format(str, 1024, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", A_cargoStorage[zzz][1]);
			UpdateDynamic3DTextLabelText(menuEnum[id][menu_LABEL], 0xffffffff, str);
			mysql_format(MYSQL, str, sizeof str, "UPDATE gm_menu SET storage_CAR_PARTS = '%d' WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
			    A_cargoStorage[zzz][1],menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
			    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);
			mysql_tquery(MYSQL, str);
		}

	}
	else
		SendError(playerid, "Tento príkaz nemôe poui!");

	return 1;
}

YCMD:pridattzamky(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerAdminLevel(playerid) > 3)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 4)
	        return SendError(playerid, "Nie si v autodielni!");

        new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);
		if(zzz != -1 && A_cargoStorage[zzz][1] < 1) return SendError(playerid, "Táto dielòa nemá na sklade diely!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

		/*if(strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
		{

		    new
				bool:fnd = false;

			for( new x; x < 4; x++ )
			{
			    if(!strcmp(playerCharacters[playerid][x], vEnum[vid][v_Owner], false))
				{
				    fnd = true;
				    break;
				}
			}

			if(fnd == true)
		    {
		        return SendError(playerid, "Nemôe upravova vozidlo svojmu druhému charakteru!");
		    }
		}*/

        if(vEnum[vid][v_NoBreakin] == 1)
        	return SendError(playerid, "Toto vozidlo u má titánové zámky!");

		if(ex_GetPlayerMoney(playerid) < 40000)
		    return SendError(playerid, "Nemá 40.000$ na titánové zámky!");

		ex_GivePlayerMoney(playerid, -40000);
		money_spent[playerid]+=floatround(40000,floatround_round);
		FormatLog(log_type_player, "%s (%s - %s) pridal titanove zamky na auto so SPZ %s", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), vEnum[vid][v_SPZ]);
		vEnum[vid][v_NoBreakin] = 1;
		SendSuccess(playerid, "Vozidlo dostalo titanove zamky!");

		if(zzz != -1)
		{
			new str[1024],id=zzz;
			A_cargoStorage[zzz][1]--;
	    	format(str, 1024, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", A_cargoStorage[zzz][1]);
			UpdateDynamic3DTextLabelText(menuEnum[id][menu_LABEL], 0xffffffff, str);
			mysql_format(MYSQL, str, sizeof str, "UPDATE gm_menu SET storage_CAR_PARTS = '%d' WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
			    A_cargoStorage[zzz][1],menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
			    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);
			mysql_tquery(MYSQL, str);
		}

	}
	else
		SendError(playerid, "Tento príkaz nemôe poui!");

	return 1;
}

YCMD:odstranittzamky(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerAdminLevel(playerid) > 3)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 4)
	        return SendError(playerid, "Nie si v autodielni!");

        new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);
		if(zzz != -1 && A_cargoStorage[zzz][1] < 1) return SendError(playerid, "Táto dielòa nemá na sklade diely!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

        if(vEnum[GetPlayerVehicleID(playerid)][v_NoBreakin] == 0)
        	return SendError(playerid, "Toto vozidlo nemá titánové zámky!");

		vEnum[GetPlayerVehicleID(playerid)][v_NoBreakin] = 0;

		SendSuccess(playerid, "Odstránil si titánové zámky!");

		if(zzz != -1)
		{
			new str[1024],id=zzz;
			A_cargoStorage[zzz][1]++;
	    	format(str, 1024, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", A_cargoStorage[zzz][1]);
			UpdateDynamic3DTextLabelText(menuEnum[id][menu_LABEL], 0xffffffff, str);
			mysql_format(MYSQL, str, sizeof str, "UPDATE gm_menu SET storage_CAR_PARTS = '%d' WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
			    A_cargoStorage[zzz][1],menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
			    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);
			mysql_tquery(MYSQL, str);
		}

	}
	else
		SendError(playerid, "Tento príkaz nemôe poui!");

	return 1;
}

YCMD:pridatnokna(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerAdminLevel(playerid) > 3)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 4)
	        return SendError(playerid, "Nie si v autodielni!");

        new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);
		if(zzz != -1 && A_cargoStorage[zzz][1] < 1) return SendError(playerid, "Táto dielòa nemá na sklade diely!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

        if(vEnum[vid][v_TitWindows] == 1)
        	return SendError(playerid, "Toto vozidlo u má nepriestrelné okná!");

		if(ex_GetPlayerMoney(playerid) < 90000)
		    return SendError(playerid, "Nemá 90.000$ na nepriestrelné okná!");

		ex_GivePlayerMoney(playerid, -90000);
		money_spent[playerid]+=floatround(90000,floatround_round);
		FormatLog(log_type_player, "%s (%s - %s) pridal nepriestrelne okna na auto so SPZ %s", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), vEnum[vid][v_SPZ]);
		vEnum[vid][v_TitWindows] = 1;
		SendSuccess(playerid, "Vozidlo dostalo nepriestrelne okna!");

		if(zzz != -1)
		{
			new str[1024],id=zzz;
			A_cargoStorage[zzz][1]--;
	    	format(str, 1024, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", A_cargoStorage[zzz][1]);
			UpdateDynamic3DTextLabelText(menuEnum[id][menu_LABEL], 0xffffffff, str);
			mysql_format(MYSQL, str, sizeof str, "UPDATE gm_menu SET storage_CAR_PARTS = '%d' WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
			    A_cargoStorage[zzz][1],menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
			    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);
			mysql_tquery(MYSQL, str);
		}

	}
	else
		SendError(playerid, "Tento príkaz nemôe poui!");

	return 1;
}

YCMD:odstranitnokna(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerAdminLevel(playerid) > 3)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 4)
	        return SendError(playerid, "Nie si v autodielni!");

        new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);
		if(zzz != -1 && A_cargoStorage[zzz][1] < 1) return SendError(playerid, "Táto dielòa nemá na sklade diely!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

        if(vEnum[GetPlayerVehicleID(playerid)][v_TitWindows] == 0)
        	return SendError(playerid, "Toto vozidlo nemá nepriestreln= okná!");

		vEnum[GetPlayerVehicleID(playerid)][v_TitWindows] = 0;

		SendSuccess(playerid, "Odstránil si nepriestrelné okná!");

		if(zzz != -1)
		{
			new str[1024],id=zzz;
			A_cargoStorage[zzz][1]++;
	    	format(str, 1024, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", A_cargoStorage[zzz][1]);
			UpdateDynamic3DTextLabelText(menuEnum[id][menu_LABEL], 0xffffffff, str);
			mysql_format(MYSQL, str, sizeof str, "UPDATE gm_menu SET storage_CAR_PARTS = '%d' WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
			    A_cargoStorage[zzz][1],menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
			    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);
			mysql_tquery(MYSQL, str);
		}

	}
	else
		SendError(playerid, "Tento príkaz nemôe poui!");

	return 1;
}

YCMD:odstranitradio(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerAdminLevel(playerid) > 3)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 4)
	        return SendError(playerid, "Nie si v autodielni!");

        new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);
		if(zzz != -1 && A_cargoStorage[zzz][1] < 1) return SendError(playerid, "Táto dielòa nemá na sklade diely!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

        if(vEnum[GetPlayerVehicleID(playerid)][v_CarRadio] == 0)
        	return SendError(playerid, "Toto vozidlo nemá rádio!");

		vEnum[GetPlayerVehicleID(playerid)][v_CarRadio] = 0;

		SendSuccess(playerid, "Rádio odintalované!");

        if(zzz != -1)
		{
			new str[1024],id=zzz;
			A_cargoStorage[zzz][1]++;
	    	format(str, 1024, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", A_cargoStorage[zzz][1]);
			UpdateDynamic3DTextLabelText(menuEnum[id][menu_LABEL], 0xffffffff, str);
			mysql_format(MYSQL, str, sizeof str, "UPDATE gm_menu SET storage_CAR_PARTS = '%d' WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
			    A_cargoStorage[zzz][1],menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
			    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);
			mysql_tquery(MYSQL, str);
		}
	}
	else
		SendError(playerid, "Tento príkaz nemôe poui!");

	return 1;
}

YCMD:farba(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna))
	        return SendError(playerid, "Nie si v autodielni!");

        new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);
		if(zzz != -1 && A_cargoStorage[zzz][1] < 1) return SendError(playerid, "Táto dielòa nemá na sklade diely!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

		new
			c1,
			c2;

		if(sscanf(params, "dd", c1, c2))
		    return SendClientSyntax(playerid, "/farba [farba 1] [farba 2]");

		ChangeVehicleColor(vid, c1, c2);
		vEnum[vid][v_Color_1] = c1;
		vEnum[vid][v_Color_2] = c2;

		if(zzz != -1)
		{
			new str[1024],id=zzz;
			A_cargoStorage[zzz][1]--;
	    	format(str, 1024, "{C0C0C0}[ SKLAD ]\n{FFFFFF}%d dielov", A_cargoStorage[zzz][1]);
			UpdateDynamic3DTextLabelText(menuEnum[id][menu_LABEL], 0xffffffff, str);
			mysql_format(MYSQL, str, sizeof str, "UPDATE gm_menu SET storage_CAR_PARTS = '%d' WHERE menu_type = '%d' AND pickup_model = '%d' AND virtualWorld = '%d' AND interiorID = '%d' AND posX > '%f' AND posX < '%f' AND posY > '%f' AND posY < '%f' AND posZ > '%f' AND posZ < '%f'",
			    A_cargoStorage[zzz][1],menuEnum[id][menu_TYPE], menuEnum[id][menu_MODEL], menuEnum[id][menu_VW], menuEnum[id][menu_INT], menuEnum[id][menu_X]-0.2, menuEnum[id][menu_X]+0.2,
			    menuEnum[id][menu_Y]-0.2, menuEnum[id][menu_Y]+0.2, menuEnum[id][menu_Z]-0.2, menuEnum[id][menu_Z]+0.2);

			mysql_tquery(MYSQL, str);
		}
    }
	else
	{
	    SendError(playerid, "Tento príkaz nemôe poui!");
	}
	return 1;
}

YCMD:vytvoritactora(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
	    I_skin,
	    S_command[32],
	    I_animid
	;

	if(sscanf(params,"ds[32]D(0)", I_skin, S_command, I_animid))
	    return SendClientSyntax(playerid, "/vytvoritactora [skin] [anim prikaz] <anim id (def. 0)>");

	if(I_skin < 0)
	    return SendError(playerid, "Zlý skin!");

	new
	    AnimName[32],
	    AnimNumber = -1
	;

	for( new x; x < sizeof(A_animIndexes); x ++)
	{
	    if(strcmp(S_command, A_animIndexes[x][0], true))
	        continue;

		if(A_animIndexes[x][1][0] != I_animid)
		    continue;

		format(AnimName, 32, "%s", A_animIndexes[x][0]);
		AnimNumber = A_animIndexes[x][1][0];

		break;
	}

	new
	    query[512],
		Float:x, Float:y, Float:z, Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	SetPlayerPos(playerid, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z);

	mysql_format(MYSQL, query, 512, "INSERT INTO gm_actors (Skin, X, Y, Z, Angle, VirtualWorld, AnimName, AnimNumber) VALUES ('%d', '%f', '%f', '%f', '%f', '%d', '%e', '%d')",
	    I_skin, x, y, z, angle, GetPlayerVirtualWorld(playerid), AnimName, AnimNumber);

	mysql_query(MYSQL, query, false);

	FormatWarnEx(playerid,6, "AdmCmd:", COLOR_ADMINCMD, "%s vytvoril nového actora.", GetPlayerNameEx(playerid, USE_PUREIDNAME));

	SendSuccess(playerid, "Actor vytvorený!");

	CreateServerActor(I_skin, x,y,z,angle, GetPlayerVirtualWorld(playerid), "", AnimName, AnimNumber);

	return 1;

}

YCMD:zmazatactora(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerServerActor(playerid) == -1)
	    return SendError(playerid, "Nestojí pri iadnom actorovi!");

	new
		id = GetPlayerServerActor(playerid),
		query[512];

	mysql_format(MYSQL, query, 512, "DELETE FROM gm_actors WHERE Skin = '%d' AND VirtualWorld = '%d' AND X > '%f' AND X < '%f' AND Y > '%f' AND Y < '%f' AND Z > '%f' AND Z < '%f'",
	   	actorEnum[id][act_Skin], actorEnum[id][act_VirtualWorld],
 		actorEnum[id][act_PosX]-0.02, actorEnum[id][act_PosX]+0.02,
	    actorEnum[id][act_PosY]-0.02, actorEnum[id][act_PosY]+0.02,
		actorEnum[id][act_PosZ]-0.02, actorEnum[id][act_PosZ]+0.02);

	mysql_query(MYSQL, query, false);

    actorEnum[id][act_UniqueID] = 0;
   	actorEnum[id][act_PosX] = 0.0;
    actorEnum[id][act_PosY] = 0.0;
    actorEnum[id][act_PosZ] = 0.0;

    DestroyDynamicActor(actorEnum[id][act_ActorID]);

	SendError(playerid, "Actor úspene zmazaný!");

	return 1;
}

YCMD:vytvoritcctv(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
	    S_command[32]
	;

	if(sscanf(params,"s[32]", S_command))
	    return SendClientSyntax(playerid, "/vytvoritcctv [meno]");

	new id = CreateCCTV(playerid, S_command, 0);
	EditCCTV(playerid, id);

	FormatWarnEx(playerid,6, "AdmCmd:", COLOR_ADMINCMD, "%s vytvoril novú CCTV kameru: '%s'.", GetPlayerNameEx(playerid, USE_PUREIDNAME), S_command);
	SendSuccess(playerid, "Kamera vytvorená a uloená, uprav pozíciu, ak chce!");

	return 1;

}

YCMD:cctv(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendClientCantUseCommand(playerid);

    ShowPlayerCCTVMenuEx(playerid);

	return 1;
}

YCMD:zmazatcctv(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
	    S_command
	;

	if(sscanf(params,"d", S_command))
	    return SendClientSyntax(playerid, "/zmazatcctv [id]");

	DeleteCCTV(S_command);
	SendSuccess(playerid, "Kamera zmazaná!");

	return 1;

}

YCMD:opravitcctv(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	new
	    S_command
	;

	if(sscanf(params,"d", S_command))
	    return SendClientSyntax(playerid, "/opravitcctv [id]");

	if(S_command >= MAX_CCTV || S_command < 0)
	    return SendError(playerid, "Táto kamera neexistuje!");

    if(strlen(CCTVInfo[S_command][cctv_Name]) > 2)
	    return SendError(playerid, "Táto kamera neexistuje!");

 	if(CCTVInfo[S_command][cctv_IsBroken] == 0)
	    return SendError(playerid, "Táto kamera nie je znièená!");

	DestroyDynamicObject(CCTVInfo[S_command][cctv_Particle]);
	CCTVInfo[S_command][cctv_IsBroken] = 0;

	foreach( new ix : Player )
	{
  		if(GetPlayerFactionType(ix) != FACTION_TYPE_LAW)
			continue;

		if(!IsPlayerWorking(ix))
			continue;

		SCFM(ix, COLOR_RADIO, "[ Radio - 9112 MHz ] Dispeèer: Kamera %s mi znova naskoèila.", CCTVInfo[S_command][cctv_Name]);
	}

	SendSuccess(playerid, "Kamera opravená!");

	return 1;

}

YCMD:kreditshop(playerid, params[], help)
{
	ShowPlayerGoldMenu(playerid);
	return 1;
}

YCMD:obliect(playerid, params[], help)
{
	if(GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE)
	    return SendError(playerid, "Musí by hasiè v slube!");

    if(!IsPlayerWorking(playerid))
	    return SendError(playerid, "Musí by hasiè v slube!");

	new
	    newskin = -1;

	switch(GetPlayerCustomSkin(playerid))
	{
	    case 20022 .. 20024:
	        newskin = GetPlayerCustomSkin(playerid)+4;

        case 20026 .. 20028:
	        newskin = GetPlayerCustomSkin(playerid)-4;
	        
		case 20029:
		    newskin = 308;
		    
		case 308:
		    newskin = 20029;

		default:
			return SendError(playerid, "Obliec/vyzliec sa môe iba ak má skin hasièa!");
	}

	I_pSkin_Work[playerid] = newskin;
	ex_SetPlayerSkin(playerid, I_pSkin_Work[playerid]);

	SendSuccess(playerid, "Skin zmeneny!");
	return 1;
}

/*YCMD:update(playerid, params[], help)
{
    HTTP(playerid, HTTP_GET, "countyliferoleplay.eu/changelog.php", "", "HTTPREQUEST_CHANGELOG");
	return 1;
}*/

forward StopGreet(var,playerid); public StopGreet(var,playerid) {
    greet[var][playerid] = 0;
	greetAnim[var][playerid] = 0;
	return 1;
}

forward YesGreet(playerid,var); public YesGreet(playerid,var) {
    switch(greetAnim[playerid][var]) {
	    case 1: {
	        ApplyAnimation(playerid, "GANGS", "HNDSHKAA", 4.1, false, false, false, false, 0, false); // /sup 1
	        ApplyAnimation(var, "GANGS", "HNDSHKAA", 4.1, false, false, false, false, 0, false); // /sup 1
	    }
	    case 2: {
	        ApplyAnimation(playerid, "GANGS", "HNDSHKBA", 4.1, false, false, false, false, 0, false); // /sup 2
	        ApplyAnimation(var, "GANGS", "HNDSHKBA", 4.1, false, false, false, false, 0, false); // /sup 2
	    }
	    case 3: {
	        ApplyAnimation(playerid, "GANGS", "HNDSHKCA", 4.1, false, false, false, false, 0, false); // /sup 3
	        ApplyAnimation(var, "GANGS", "HNDSHKCA", 4.1, false, false, false, false, 0, false); // /sup 3
	    }
	    case 4: {
	        ApplyAnimation(playerid, "GANGS", "HNDSHKCB", 4.1, false, false, false, false, 0, false); // /sup 4
	        ApplyAnimation(var, "GANGS", "HNDSHKCB", 4.1, false, false, false, false, 0, false); // /sup 4
	    }
	    case 5: {
	        ApplyAnimation(playerid, "GANGS", "HNDSHKDA", 4.1, false, false, false, false, 0, false); // /sup 5
	        ApplyAnimation(var, "GANGS", "HNDSHKDA", 4.1, false, false, false, false, 0, false); // /sup 5
	    }
	    case 6: {
	        ApplyAnimation(playerid, "GANGS", "HNDSHKEA", 4.1, false, false, false, false, 0, false); // /sup 6
	        ApplyAnimation(var, "GANGS", "HNDSHKEA", 4.1, false, false, false, false, 0, false); // /sup 6
	    }
	    case 7: {
	        ApplyAnimation(playerid, "GANGS", "HNDSHKFA", 4.1, false, false, false, false, 0, false); // /sup 6
	        ApplyAnimation(var, "GANGS", "HNDSHKFA", 4.1, false, false, false, false, 0, false); // /sup 6
	    }
	    case 8: {
	        ApplyAnimation(playerid, "GANGS", "HNDSHKFA_SWT", 4.1, false, false, false, false, 0, false); // /sup 7
	        ApplyAnimation(var, "GANGS", "HNDSHKFA_SWT", 4.1, false, false, false, false, 0, false); // /sup 7
	    }
	    case 9: {
	        ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 3.0, 0, 0, 0, 0, 0, 1);
	        ApplyAnimation(var, "GANGS", "prtial_hndshk_biz_01", 3.0, 0, 0, 0, 0, 0, 1);
	    }
	    
	    case 21: {
	        ApplyAnimation(playerid, "BD_FIRE", "GRLFRD_KISS_03", 4.1, false, false, false, false, 0, true); // /pusa
	        ApplyAnimation(var, "BD_FIRE", "GRLFRD_KISS_03", 4.1, false, false, false, false, 0, true); // /pusa
	    }
	    case 22: {
	        ApplyAnimation(playerid, "BD_FIRE", "PLAYA_KISS_03", 4.1, false, true, true, false, 0, true); // /pusa
	        ApplyAnimation(var, "BD_FIRE", "PLAYA_KISS_03", 4.1, false, true, true, false, 0, true); // /pusa
	    }
	}
	return 1;
}

YCMD:greet(playerid, params[],help) {
	new var,var1; if(sscanf(params,"dd",var,var1)) return SendClientSyntax(playerid, "/greet [id] [id animacie /SUP]");
	MaskToId(var);
	if(!IsPlayerLogged(var)) return SendError(playerid, "Tento hrac nie je v hre!");
	if(!IsPlayerNearPlayer(playerid, var, 2)) return SendError(playerid, "Tento hrac je moc daleko!");
	if(var1 < 1 || var1 > 9) return SendError(playerid, "Zadal si zle ID animacie, pouzi animaciu 1 - 9!");
	greet[var][playerid] = 1;
	greetAnim[var][playerid] = var1;
	greetAnim[playerid][var] = var1;

	new msg[144];
	format(msg,144,"Zaslal si hráèovi %s ponuku na pozdrav. Animácia je /sup [%d]!", GetPlayerNameEx(var, USE_MASK), var1);
	SendSuccess(playerid, msg,1);
	format(msg,144,"%s Ti poslal ponuku na pozdrav! Na prijatie má 30 sekúnd, pre priatie poui /greetapprove [%d]!", GetPlayerNameEx(playerid, USE_MASK), ReturnID(playerid));
	SendSuccess(var, msg,1);
	SetTimerEx("StopGreet", 15000, false, "ii", var, playerid);
	return 1;
}

YCMD:greetapprove(playerid, params[],help) {
	new var; if(sscanf(params,"d",var)) return SendClientSyntax(playerid,"/greetapprove [id]");
	MaskToId(var);
	if(!IsPlayerLogged(var)) return SendError(playerid, "Tento hrac nie je v hre!");
	if(!IsPlayerNearPlayer(playerid, var, 2)) return SendError(playerid, "Tento hrac je moc daleko!");
	if(greet[playerid][var] != 1) return SendError(playerid, "Tento hrac Ti neposlal ponuku na pozdrav!");

	SetTimerEx("YesGreet", 800, false, "ii", playerid, var);

	greet[playerid][var] = 0;

	SendSuccess(playerid, "Ziadost o pozdrav prijata!");
	SendSuccess(var, "Ziadost o pozdrav prijata!");
	return 1;
}

YCMD:kiss(playerid, params[],help) {
	new var,var1; if(sscanf(params,"dd",var,var1)) return SendClientSyntax(playerid, "/kiss [id] [id animacie /PUSA]");
	MaskToId(var);
	if(!IsPlayerLogged(var)) return SendError(playerid, "Tento hrac nie je v hre!");
	if(!IsPlayerNearPlayer(playerid, var, 2)) return SendError(playerid, "Tento hrac je moc daleko!");
	if(var1 < 1 || var1 > 2) return SendError(playerid, "Zadal si zle ID animacie, pouzi animaciu 1 - 2!");
	greet[var][playerid] = 1;
	greetAnim[var][playerid] = var1+20;
	greetAnim[playerid][var] = var1+20;

	new msg[144];
	format(msg,144,"Zaslal si hráèovi %s ponuku na pobozkanie. Animácia je /pusa [%d]!", GetPlayerNameEx(var, USE_MASK), var1);
	SendSuccess(playerid, msg,1);
	format(msg,144,"%s Ti poslal ponuku na pobozkanie! Na prijatie má 30 sekúnd, pre priatie poui /kissapprove [%d]!", GetPlayerNameEx(playerid, USE_MASK), ReturnID(playerid));
	SendSuccess(var, msg,1);
	SetTimerEx("StopGreet", 15000, false, "ii", var, playerid);
	return 1;
}

YCMD:kissapprove(playerid, params[],help) {
	new var; if(sscanf(params,"d",var)) return SendClientSyntax(playerid,"/kissapprove [id]");
	MaskToId(var);
	if(!IsPlayerLogged(var)) return SendError(playerid, "Tento hrac nie je v hre!");
	if(!IsPlayerNearPlayer(playerid, var, 2)) return SendError(playerid, "Tento hrac je moc daleko!");
	if(greet[playerid][var] != 1) return SendError(playerid, "Tento hrac Ti neposlal ponuku na pobozkanie!");
	if(greetAnim[playerid][var] < 20) return SendError(playerid, "Tento hráè ti neposlal ponuku na pobozkanie!");

	SetTimerEx("YesGreet", 800, false, "ii", playerid, var);

	greet[playerid][var] = 0;

	SendSuccess(playerid, "Ziadost o pobozkanie prijata!");
	SendSuccess(var, "Ziadost o pobozkanie prijata!");
	return 1;
}

YCMD:dobject(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 4)
	    return SendError(playerid, "Tento prikaz nemozes pouzit!");

    tstudio_dobject[playerid] = true;
    SendError(playerid, "Klikni na objekt ktory chces zmazat!");
	SelectObject(playerid);

	return 1;
}

YCMD:vytvorithasicak(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE)
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerAdminLevel(playerid) < 4 && !IsPlayerWorking(playerid))
	    return SendError(playerid, "Musí by v slube!");

	if(isdoingfireext[playerid] == true)
	    return SendError(playerid, "U vytvára hasièak!");

    new
	    Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);
	GetXYInFrontOfPlayer(playerid, x, y, 2);

    isdoingfireext[playerid] = true;
	Streamer_UpdateEx(playerid, x, y+0.1, z);
	EditDynamicObject(playerid, CreateDynamicObject(2690,x,y,z,0.0,0.0,0.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid),-1,30, 30, -1, 1));

	ex_GivePlayerMoney(playerid, -200);
	money_spent[playerid]+=floatround(200,floatround_round);

	return 1;
}

YCMD:zmazathasicak(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4 && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE)
	    return SendClientCantUseCommand(playerid);

	if(GetPlayerAdminLevel(playerid) < 4 && !IsPlayerWorking(playerid))
	    return SendError(playerid, "Musí by v slube!");

	if(isdoingfireext[playerid] == true)
	    return SendError(playerid, "U vytvára hasièak!");

	new id = GetPlayerDynamicFireExt(playerid);
	if(id == -1)
	    return SendError(playerid, "Nie je tu iadny hasièák!");

	new query[256*2];
	mysql_format(MYSQL, query, sizeof query, "DELETE FROM gm_hasicaky WHERE SPOTREBA = '%d' AND PKONTROLA = '%d' LIMIT 1", fireExt[id][firee_SPOTREBA], fireExt[id][firee_PKONTROLA]);
	mysql_query(MYSQL, query, false);

	DestroyDynamicFireExt(id);

	return 1;
}

YCMD:zobrathasicak(playerid, params[], help)
{

	new id = GetPlayerDynamicFireExt(playerid);
	if(id == -1)
	    return SendError(playerid, "Nie je tu iadny hasièák!");

	if(fireExt[id][firee_STOLEN] == 1)
	    return SendError(playerid, "Tento hasiaci prístroj u odcudzili!");

	new pwep, pammo;
	GetPlayerWeaponData(playerid,9,pwep,pammo);
	if(pwep == 42 && pammo>0)
	    return SendError(playerid, "U má hasiaci prístroj!");

	new query[256*2];
	mysql_format(MYSQL, query, sizeof query, "UPDATE gm_hasicaky SET STOLEN = 1 WHERE SPOTREBA = '%d' AND PKONTROLA = '%d' LIMIT 1", fireExt[id][firee_SPOTREBA], fireExt[id][firee_PKONTROLA]);
	mysql_query(MYSQL, query, false);

	DestroyDynamic3DTextLabel(fireExt[id][firee_LABEL]);

	fireExt[id][firee_STOLEN]=1;

	DestroyDynamicObject(fireExt[id][firee_OBJECT]);

	fireExt[id][firee_LABEL] = CreateDynamic3DTextLabel(
		"{eaeaea}DRIAK NA HASIACI PRÍSTROJ\n{FFFFFF}/vratithasicak\n/vymenithasicak", 0xFFFFFFFF, fireExt[id][firee_X], fireExt[id][firee_Y], fireExt[id][firee_Z], 2.0,
		INVALID_PLAYER_ID,
		INVALID_VEHICLE_ID,
		0,fireExt[id][firee_VW],fireExt[id][firee_INTERIOR],-1,10.0, -1, 0
	);

	new ammo = 5000, odcitaj = 0;

	if(fireExt[id][firee_SPOTREBA] < gettime())
		odcitaj = floatround( ( ( fireExt[id][firee_SPOTREBA]-gettime() ) / 86400) * 500, floatround_ceil);

	ammo -= odcitaj;

	if(ammo < 0)
	{
	    new S_str[144];
		format(S_str, 144, "** %s berie z driaka hasiaci prístroj, odistil pojistku, ale po stlaèení spúte sa niè nestalo, hasiaci prístroj je po dátume spotreby. *", GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);
	}
	else
	{
	    new S_str[144];
		format(S_str, 144, "** %s berie z driaka hasiaci prístroj a odisuje na òom pojistku. *", GetPlayerNameEx(playerid, USE_MASK));
		SendLocalMessage(playerid,ME_CHAT_RANGE,COLOR_VIOLET,S_str);

	    Weapons::GivePlayerNewWeapon(playerid, 42, 750, false, false, "/zobrathasicak", false);
	    FormatWeaponLog(playerid, "[give] Zobral %s s %d nabojmi z drziaku.", GetWeaponNameEx(42), ammo);
	}

	return 1;
}

YCMD:skontrolovathasicak(playerid, params[], help)
{

	new id = GetPlayerDynamicFireExt(playerid);
	if(id == -1)
	    return SendError(playerid, "Nie je tu iadny hasièák!");

	if(fireExt[id][firee_STOLEN] == 1)
	    return SendError(playerid, "Tento hasièák je ukradnutý!");

	new query[256*2];
	mysql_format(MYSQL, query, sizeof query, "UPDATE gm_hasicaky SET PKONTROLA = '%d' WHERE SPOTREBA = '%d' AND PKONTROLA = '%d' LIMIT 1", gettime(), fireExt[id][firee_SPOTREBA], fireExt[id][firee_PKONTROLA]);
	mysql_query(MYSQL, query, false);

	fireExt[id][firee_PKONTROLA]=gettime();

	new str[256*2];
	format(str, sizeof str,
		"{eaeaea}HASIACI PRÍSTROJ\n{5a5a5a}DÁTUM SPOTREBY: {eaeaea}%s\n{5a5a5a}POSLEDNÁ KONTROLA: {eaeaea}%s\n/zobrathasicak",
		getdateunixfireex(fireExt[id][firee_SPOTREBA]), getdateunixfireex(fireExt[id][firee_PKONTROLA])
	);

	UpdateDynamic3DTextLabelText(fireExt[id][firee_LABEL], 0xFFFFFFFF, str);
	SendSuccess(playerid, "Skontrolovany!");

	return 1;
}

YCMD:vymenithasicak(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(!IsPlayerWorking(playerid) && GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new id = GetPlayerDynamicFireExt(playerid);
	if(id == -1)
	    return SendError(playerid, "Nie je tu iadny hasièák!");

	new query[256*2];
	mysql_format(MYSQL, query, sizeof query, "UPDATE gm_hasicaky SET STOLEN = 0, SPOTREBA = '%d', PKONTROLA = '%d' WHERE SPOTREBA = '%d' AND PKONTROLA = '%d' LIMIT 1", gettime()+(2629800*2), gettime(), fireExt[id][firee_SPOTREBA], fireExt[id][firee_PKONTROLA]);
	mysql_query(MYSQL, query, false);

	fireExt[id][firee_PKONTROLA] = gettime();
	fireExt[id][firee_SPOTREBA]  = gettime()+(2629800*2);

	if(fireExt[id][firee_STOLEN] == 1)
	    fireExt[id][firee_OBJECT] = CreateDynamicObject(2690,fireExt[id][firee_X],fireExt[id][firee_Y],fireExt[id][firee_Z],fireExt[id][firee_RX],fireExt[id][firee_RY],fireExt[id][firee_RZ],fireExt[id][firee_VW],fireExt[id][firee_INTERIOR],-1,30, 30, -1, 1);

	fireExt[id][firee_STOLEN]    = 0;

	new str[256*2];
	format(str, sizeof str,
		"{eaeaea}HASIACI PRÍSTROJ\n{5a5a5a}DÁTUM SPOTREBY: {eaeaea}%s\n{5a5a5a}POSLEDNÁ KONTROLA: {eaeaea}%s\n/zobrathasicak",
		getdateunixfireex(fireExt[id][firee_SPOTREBA]), getdateunixfireex(fireExt[id][firee_PKONTROLA])
	);

	UpdateDynamic3DTextLabelText(fireExt[id][firee_LABEL], 0xFFFFFFFF, str);

	SendSuccess(playerid, "Hasiaci prístroj vymenený!");

	ex_GivePlayerMoney(playerid, -190);
	money_spent[playerid]+=floatround(190,floatround_round);

	return 1;
}

YCMD:vratithasicak(playerid, params[], help)
{

	if(GetPlayerWeapon(playerid) != 42)
	    return SendError(playerid, "Nemá v ruke hasiaci prístroj!");

	new id = GetPlayerDynamicFireExt(playerid);
	if(id == -1)
	    return SendError(playerid, "Nie je tu iadny hasièák!");

	if(fireExt[id][firee_STOLEN] != 1)
	    return SendError(playerid, "U tu je hasiaci prístroj!");

	new query[256*2];
	mysql_format(MYSQL, query, sizeof query, "UPDATE gm_hasicaky SET STOLEN = 0 WHERE SPOTREBA = '%d' AND PKONTROLA = '%d' LIMIT 1", fireExt[id][firee_SPOTREBA], fireExt[id][firee_PKONTROLA]);
	mysql_query(MYSQL, query, false);

	if(fireExt[id][firee_STOLEN] == 1)
	    fireExt[id][firee_OBJECT] = CreateDynamicObject(2690,fireExt[id][firee_X],fireExt[id][firee_Y],fireExt[id][firee_Z],fireExt[id][firee_RX],fireExt[id][firee_RY],fireExt[id][firee_RZ],fireExt[id][firee_VW],fireExt[id][firee_INTERIOR],-1,30, 30, -1, 1);

	fireExt[id][firee_STOLEN]    = 0;

	new str[256*2];
	format(str, sizeof str,
		"{eaeaea}HASIACI PRÍSTROJ\n{5a5a5a}DÁTUM SPOTREBY: {eaeaea}%s\n{5a5a5a}POSLEDNÁ KONTROLA: {eaeaea}%s\n/zobrathasicak",
		getdateunixfireex(fireExt[id][firee_SPOTREBA]), getdateunixfireex(fireExt[id][firee_PKONTROLA])
	);

	Weapons::removeWeapon(playerid, 42);
	FormatWeaponLog(playerid, "[remove] Vlozil %s do drziaku.", GetWeaponNameEx(42));

	UpdateDynamic3DTextLabelText(fireExt[id][firee_LABEL], 0xFFFFFFFF, str);

	SendSuccess(playerid, "Hasiaci prístroj vrátený!");

	return 1;
}

YCMD:breakin(playerid, params[], help)
{

	if(GetPlayerRoleplayLevel(playerid) < 3)
	    return SendError(playerid, "Musí by roleplay level 3!");

    if(breakin_isPlayerFreezed[playerid] > 0)
    {
        breakin_StopBreaking(playerid);
        return 1;
    }

	new pdonline = 0, players = 0;

	foreach( new i : Player )
	{

	    players ++;

	    if(GetPlayerFactionType(i) != FACTION_TYPE_LAW)
	        continue;

		if(!IsPlayerWorking(i))
			continue;

		pdonline ++;
	}

    if(players < 8)
    	return SendError(playerid, "Pre kráde vozidla musí by online aspoò 8 hráèov!");

	if(pdonline < 4)
 		return SendError(playerid, "Pre kráde vozidla musia by online aspoò 4 policajti!");

	if(GetPlayerInventoryItem(playerid, inv_pacidlo) < 1)
	    return SendError(playerid, "Na vykonanie tejto akcie potrebuje páèidlo!");

	new
		vid = -1,
		Float:newdist = 0.0,
		Float:distance = 3.1,
		Float:pos[3],
		Float:ppos[3];

	GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

	foreach ( new i : Vehicle ) {
		if(!IsValidVehicle(i)) continue;
		if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
		GetVehiclePos(i, pos[0], pos[1], pos[2]);

		newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

		if(newdist < distance) {
			vid = i;
			distance = newdist;
			continue;
		}
	}
	if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");
	
	new fnd = 0;
	foreach(new i : Player)
	{
	    if(strlen(vEnum[vid][v_Owner]) > 3 && strcmp(ReturnName(i), vEnum[vid][v_Owner], false))
	        continue;

		fnd = 1;
		break;
	}
	if(fnd == 0)
	    return SendError(playerid, "Majite¾ tohoto vozidla nie je online!");

	if(GetVehicleParams(vid, VEHICLE_TYPE_DOORS) != 1)
	{
	    new vpanel, vdoor, vlight, vtire,
			bonnet,boot,driver_door,passenger_door;
		GetVehicleDamageStatus(breakin_vehId[playerid], vpanel, vdoor, vlight, vtire);

		decode_doors(vdoor, bonnet,boot,driver_door,passenger_door);

		if(driver_door < 2)
		    driver_door = 1;

		UpdateVehicleDamageStatus(breakin_vehId[playerid], vpanel, encode_doors(bonnet,boot,driver_door,passenger_door), vlight, vtire);

		InfoBox(playerid, INFOBOX_HAPPY, "Toto auto u je odomknuté!");

		return 1;
	}
	
	if(vEnum[vid][v_NoBreakin] == 1 || GetVehicleFaction(vid) == 255)
	    return SendError(playerid, "Na vykonanie tejto akcie potrebuje páèidlo z titánu!");
	    
    if(vEnum[vid][v_bazar_BoughtFor] != 0)
		return SendError(playerid, "ee toto nepojde sory");

    breakin_playerProgress[playerid] = BREAKIN_DEFAULT_PROGRESS;
    breakin_vehId[playerid] = vid;
    PlayerTextDrawTextSize(playerid, breakin_td[playerid][2], 37.000000 + (breakin_playerProgress[playerid] * 0.64), 0.000000);

	PlayerTextDrawShow(playerid, breakin_td[playerid][0]);
	PlayerTextDrawShow(playerid, breakin_td[playerid][1]);
	PlayerTextDrawShow(playerid, breakin_td[playerid][2]);

	SetPlayerAttachedObject(playerid, 9, 18634, 6, 0.071999, 0.000000, -0.008000, 79.399917, -116.399978, 0.000000);

	SendClientMessage(playerid, 0xAFAFAFFF, "> Aby si vypáèil dvere tohoto vozidla, bude musie èo najrýchlejie klika! Nad minimapou má ukazovate¾.");
	SendClientMessage(playerid, 0xAFAFAFFF, "> Ak bude ukazovate¾ plný, vozidlo sa otvorí, ale keï nemá alarm a ukazovate¾ sa vyprázdni, budú zavolaní policajti.");
	SendClientMessage(playerid, 0xAFAFAFFF, "> Keï bude pripravený, zaèni èo najrýchlejie stláèa ¾avé tlaèítko myi (ACTION BUTTON)! Pre zruenie stlaè Y.");

	breakin_isPlayerFreezed[playerid] =	1;

	TogglePlayerControllable(playerid, 0);
	SetCameraBehindPlayer(playerid);

	ClearAnimations(playerid, 1);
	ApplyAnimation(playerid, "CHAINSAW", "IDLE_CSAW", 4.1, true, true, true, true, 0, true); // /ruky

	return 1;
}

function hotwirecar(playerid)
{
	if(random(4) == 1)
	{
	    TogglePlayerControllable(playerid, 1);
        hotwire_isPlayerFreezed[playerid] = 0;
        SendSuccess(playerid, "tartovanie sa podarilo!");
		isStartingEngine[playerid] = true;
        SetTimerEx("timer_StartEngine", 1, false, "ii",playerid, GetPlayerVehicleID(playerid));
	}
	else
	{
	    TogglePlayerControllable(playerid, 1);
        hotwire_isPlayerFreezed[playerid] = 0;
        SendError(playerid, "tartovanie sa nepodarilo!");
	}
	return 1;
}

YCMD:hotwire(playerid, params[], help)
{

	if(GetPlayerRoleplayLevel(playerid) < 3)
	    return SendError(playerid, "Musí by roleplay level 3!");

	if(!IsPlayerInAnyVehicle(playerid) || (IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) != 0))
	    return SendError(playerid, "Nie si v iadnom aute ako ofér!");

    if(hotwire_isPlayerFreezed[playerid] > 0)
	    return SendError(playerid, "U hotwiruje vozidlo!");
	    
    new pdonline = 0, players = 0;

	foreach( new i : Player )
	{

	    players ++;

	    if(GetPlayerFactionType(i) != FACTION_TYPE_LAW)
	        continue;

		if(!IsPlayerWorking(i))
			continue;

		pdonline ++;
	}

    if(players < 8)
    	return SendError(playerid, "Pre kráde vozidla musí by online aspoò 8 hráèov!");

	if(pdonline < 4)
 		return SendError(playerid, "Pre kráde vozidla musia by online aspoò 4 policajti!");
	    
    new vid = GetPlayerVehicleID(playerid), fnd = 0;
	    
    if(GetVehicleFaction(vid) == 255)
	    return SendError(playerid, "Na vykonanie tejto akcie potrebuje kladivo z mordoru!");

	foreach(new i : Player)
	{
	    if(strlen(vEnum[vid][v_Owner]) > 3 && strcmp(ReturnName(i), vEnum[vid][v_Owner], false))
	        continue;

		fnd = 1;
		break;
	}
	if(fnd == 0)
	    return SendError(playerid, "Majite¾ tohoto vozidla nie je online!");

	SendClientMessage(playerid, 0xAFAFAFFF, "> Vyèkaj 45 sekúnd!");

	hotwire_isPlayerFreezed[playerid] =	1;

	TogglePlayerControllable(playerid, 0);
	SetCameraBehindPlayer(playerid);

	SetTimerEx("hotwirecar", 45000, false, "i", playerid);

	return 1;
}

YCMD:nabitbateriu(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerAdminLevel(playerid) > 3)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 4)
	        return SendError(playerid, "Nie si v autodielni!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

		if(vEnum[vid][v_Battery] >= 800)
			return SendError(playerid, "Toto vozidlo nemá dostatoène vybitú batériu!");

		vEnum[vid][v_Battery] = 800;
		SendSuccess(playerid, "Batéria dobitá!");

	}
	else
		SendError(playerid, "Tento príkaz nemôe poui!");

	return 1;
}

YCMD:sdo(playerid, params[], help)
{
	new
	    S_var[175]
	;

	if(sscanf(params, "s[175]", S_var))
	    return SendClientSyntax(playerid, "/sdo [text na statické /do (poui = pre nový riadok)]");

	new
	    id = -1
	;

	for(new i ; i < MAX_STATIC_DO; i++)
	{
	    if(static_do[playerid][i] != -1)
	        continue;

		id = i;
		break;
	}

	if(id == -1)
	    return SendError(playerid, "U si poloil ve¾a statických /do!");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);

	format(S_var, sizeof S_var, "* %s (( %s ))", str_replace("=", "\n", S_var), GetPlayerNameEx(playerid, NO_MASK));

	static_do[playerid][id] = _:CreateDynamic3DTextLabel(
															S_var, COLOR_VIOLET,
															X, Y, Z, 15.0,
															INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1,
															GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid),
															-1, 30.0,
															-1, 0
	);

	static_doarea[playerid][id] = CreateDynamicSphere(
	                                                        X, Y, Z,
	                                                        2.0,
	                                                        GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid),
	                                                        -1
	);

	SendSuccess(playerid, "Vytvoril si /sdo, zruí ho príkazom /dsdo!");

	return 1;
}

YCMD:dsdo(playerid, params[], help)
{

	new lvl = GetPlayerAdminLevel(playerid), fin = 0;

	foreach( new i : Player )
	{

	    if(lvl < 2 && i != playerid)
	        continue;

		for(new x; x < MAX_STATIC_DO; x++)
		{
			if(static_do[i][x] == -1)
			    continue;

			if(!IsPlayerInDynamicArea(playerid, static_doarea[i][x]))
			    continue;

			DestroyDynamicArea(static_doarea[i][x]);
			DestroyDynamic3DTextLabel(Text3D:static_do[i][x]);
			static_do[i][x] = -1;

			fin = 1;
			break;
		}

		if(fin == 1)
		    break;

	}

	if(fin == 1)
		SendSuccess(playerid, "/sdo zmazané!");
	else
	    SendError(playerid, "Nie je tu iadne /sdo!");

	return 1;
}

YCMD:datdrogy(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		I_var1,
		I_var2, dovodex[144];

	if(sscanf(params,"ddds[144]",I_var,I_var1,I_var2,dovodex))
		return SendClientSyntax(playerid, "/datdrug [id] [id drogy /drogy] [poèet] [dovod]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	if(I_var1 < 1)
	    return SendError(playerid, "Zlé ID drogy, poui /drogy!");

	I_var1 -= 1;

	drug_givePlayerDrug(I_var, I_var1, I_var2);

	new
		S_string[144];

	format(S_string, 144, "> Dal si hráèovi %s %dg drogy %s!", GetPlayerNameEx(I_var, NO_MASK), I_var2, drug_getName(I_var1));
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti dal %dg drogy %s!", GetPlayerNameEx(playerid, NO_MASK), I_var2, drug_getName(I_var1));
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s dal hráèovi %s(%s) %dg drogy %s (dovod: %s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1, drug_getName(I_var1),dovodex);
    FormatWarnEx(playerid, 4, "AdmCmd:", COLOR_ADMINCMD, "%s dal hráèovi %s %dg drogy %s (dovod: %s).", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), I_var1, drug_getName(I_var1),dovodex);
	return 1;
}

YCMD:datweedseed(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 4)
		return SendClientCantUseCommand(playerid);

	new
		I_var,
		S_var[35],
		I_var1,dovodex[144];

	if(sscanf(params,"ds[35] ds[144]",I_var,S_var,I_var1,dovodex))
		return
				SendClientSyntax(
								playerid,
								"/datweedseed [id] [phattfruity-amnesiahaze-sourdiesel] [poèet] [dovod]"
				);

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	new
	    drugid = -1
	;

	if(!strcmp(S_var, "amnesiahaze", true)) drugid = _:inv_weeds2;
	else if(!strcmp(S_var, "phattfruity", true)) drugid = _:inv_weeds1;
	else if(!strcmp(S_var, "sourdiesel", true)) drugid = _:inv_weeds3;
	else return SendError(playerid, "Tento druh drogy neexistuje!");

	SetPlayerInventoryItem(I_var, drugid, GetPlayerInventoryItem(I_var, drugid) + I_var1);

	new
		S_string[144]
	;

	format(S_string, 144, "> Dal si hráèovi %s %d semienok marihuany!", GetPlayerNameEx(I_var, NO_MASK), I_var1);
	SendClientMessage(playerid, 0xD0D0D0FF, S_string);

	format(S_string, 144, "> %s ti dal %d semienok marihuany!", GetPlayerNameEx(playerid, NO_MASK), I_var1);
	SendClientMessage(I_var, 0xD0D0D0FF, S_string);

	FormatLog(log_type_admin, "%s(%s dal hráèovi %s(%s) %d semienok marihuany (dovod: %s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var), I_var1, dovodex);
    FormatWarnEx(playerid, 4, "AdmCmd:", COLOR_ADMINCMD, "%s dal hráèovi %s %d semienok marihuany (dovod: %s).", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME), I_var1, dovodex);
	return 1;

}

YCMD:freeze(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 1)
		return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params,"d",I_var))
		return SendClientSyntax(playerid, "/freeze [id]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

	if(ex_toggleControllable[I_var] != 0)
	{
	    TogglePlayerControllable(I_var, 0);

	    new
			S_string[144];

		format(S_string, 144, "> Zmrazil si hráèa %s!", GetPlayerNameEx(I_var, NO_MASK));
		SendClientMessage(playerid, 0xD0D0D0FF, S_string);

		format(S_string, 144, "> %s a zmrazil!", GetPlayerNameEx(playerid, NO_MASK));
		SendClientMessage(I_var, 0xD0D0D0FF, S_string);
		FormatLog(log_type_admin, "%s(%s) zmrazil hraca %s(%s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var));
		FormatWarn(playerid, "AdmCmd:", COLOR_ADMINCMD, "%s zmrazil hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));
	}
	else
	{

	    TogglePlayerControllable(I_var, 1);

	    new
			S_string[144];

		format(S_string, 144, "> Odmrazil si hráèa %s!", GetPlayerNameEx(I_var, NO_MASK));
		SendClientMessage(playerid, 0xD0D0D0FF, S_string);

		format(S_string, 144, "> %s a odmrazil!", GetPlayerNameEx(playerid, NO_MASK));
		SendClientMessage(I_var, 0xD0D0D0FF, S_string);
		FormatLog(log_type_admin, "%s(%s) odmrazil hraca %s(%s).", ReturnName(playerid), ReturnIP(playerid), ReturnName(I_var), ReturnIP(I_var));
		FormatWarn(playerid, "AdmCmd:", COLOR_ADMINCMD, "%s odmrazil hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));

	}
	return 1;
}

YCMD:tpfw(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    Float:X, Float:Y, Float:Z;

	GetPlayerPos(playerid, X,Y,Z);
    GetXYInFrontOfPlayer(playerid, X, Y, 2.5);
    SetPlayerPos(playerid, X, Y, Z);
    SendSuccess(playerid, "Teleported!");
	return 1;
}

YCMD:tpup(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    Float:X, Float:Y, Float:Z;

	GetPlayerPos(playerid, X,Y,Z);
    SetPlayerPos(playerid, X, Y, Z+2.5);

    SendSuccess(playerid, "Teleported!");
	return 1;
}

YCMD:tpdn(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 2)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	new
	    Float:X, Float:Y, Float:Z;

	GetPlayerPos(playerid, X,Y,Z);
    SetPlayerPos(playerid, X, Y, Z-2.5);

    SendSuccess(playerid, "Teleported!");

	return 1;
}

YCMD:bankaccs(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 4)
		return SendClientCantUseCommand(playerid);

	new
		I_var;

	if(sscanf(params,"d",I_var))
		return SendClientSyntax(playerid, "/bankaccs [id]");

	if(!IsPlayerLogged(I_var))
		return SendClientPlayerOffline(playerid);

    DeletePlayerBankAccounts(I_var, playerid);

    FormatWarnEx(playerid, 3, "AdmCmd:", COLOR_ADMINCMD, "%s si vylistoval bankové úèty hráèa %s.", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetPlayerNameEx(I_var, USE_PUREIDNAME));

	return 1;
}

YCMD:ppaska(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsWorking[playerid] == 0 && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesmie sedie v aute!");

	if(IsEditingBarrier[playerid] == false)
	    return SendError(playerid, "Neahá pásku!");

	if(editingpaskaid{playerid} == -1)
	    return SendError(playerid, "Neahá pásku!");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
    SetLineSegmentDest(editingpaskaid{playerid}, X, Y, Z);

    editingpaskaid{playerid} = -1;
    IsEditingBarrier[playerid] = false;

    EnterInfo(playerid, "Paska bola uspesne natiahnuta, zmazes ju prikazom ~b~/dpaska~w~!", 3000, 10);

	return 1;
}

YCMD:dpaska(playerid, params[], help)
{

	if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsWorking[playerid] == 0 && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesmie sedie v aute!");

	for(new i; i < MAX_BARRIERS; i++)
 	{

		if(strlen(barrierEnum[i][barri_PlacedBy]) < 2)
		    continue;

		if(GetPlayerVirtualWorld(playerid) != barrierEnum[i][barri_PosVW])
		    continue;

        if(GetPlayerInterior(playerid) != barrierEnum[i][barri_PosINT])
		    continue;

		if(barrierEnum[i][barri_LabelUsed] != 5)
		    continue;

		if(!IsPlayerInRangeOfPoint(playerid, 20.0, barrierEnum[i][barri_PosX], barrierEnum[i][barri_PosY], barrierEnum[i][barri_PosZ]))
		    continue;

        new bool:tmpv = false;
  		foreach( new x : Player )
	    {
	        if(editingpaskaid{x} != i)
	            continue;

			tmpv = true;
			break;
	    }

	    if(tmpv == true)
			return SendError(playerid, "Túto bariéru niekto upravuje!");

		DestroyLineSegment(barrierEnum[i][barri_BarrierID]);

		format(barrierEnum[i][barri_PlacedBy], 25, "");

		barrierEnum[i][barri_LabelUsed] = 0;

		barrierEnum[i][barri_PosX] = 0.0;
		barrierEnum[i][barri_PosY] = 0.0;
		barrierEnum[i][barri_PosZ] = 0.0;

		barrierEnum[i][barri_PosVW] = 0;
		barrierEnum[i][barri_PosINT] = 0;

		DestroyDynamicObject(barrierEnum[i][barri_BarrierID]);

		EnterInfo(playerid, "Zmazal si pasku!", 3000, 0);

		return 1;
	}

	SendError(playerid, "Nie je tu iadna bariéra!");

	return 1;
}

YCMD:paska(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_LAW && GetPlayerFactionType(playerid) != FACTION_TYPE_FIRE && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsWorking[playerid] == 0 && GetPlayerAdminLevel(playerid) < 3)
	    return SendClientCantUseCommand(playerid);

	if(IsPlayerInAnyVehicle(playerid))
	    return SendError(playerid, "Nesmie sedie v aute!");

	if(IsEditingBarrier[playerid] == true || IsEditingSpike[playerid] == true)
	    return SendError(playerid, "U pokláda bariéru!");

    for(new i; i < MAX_BARRIERS; i++)
	{
 		if(strlen(barrierEnum[i][barri_PlacedBy]) < 2)
   			break;

        if(strlen(barrierEnum[i][barri_PlacedBy]) >= MAX_BARRIERS)
            return SendError(playerid, "Nie je volný slot na bariéru!");

		continue;
	}

	for(new i; i < MAX_BARRIERS; i++)
 	{
  		if(strlen(barrierEnum[i][barri_PlacedBy]) > 1)
    		continue;

		new Float:X, Float:Y, Float:Z, Float:A;

		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);

		X += 1.5 * floatsin(-A, degrees);
		Y += 1.5 * floatcos(-A, degrees);


		format(barrierEnum[i][barri_PlacedBy], 25, ReturnName(playerid));

		barrierEnum[i][barri_LabelUsed] = 5;
		barrierEnum[i][barri_PosX] = X;
		barrierEnum[i][barri_PosY] = Y;
		barrierEnum[i][barri_PosZ] = Z;

		barrierEnum[i][barri_PosVW] = GetPlayerVirtualWorld(playerid);
		barrierEnum[i][barri_PosINT] = GetPlayerInterior(playerid);

        IsEditingBarrier[playerid] = true;
		editingpaskaid{playerid} = barrierEnum[i][barri_BarrierID] = CreateLineSegment(
			19834, 2.335,
			X, Y, Z,
			X, Y, Z,
			0.0, 0.0, 90.0,
			.objlengthoffset = -(2.335/2)
		);

		SetLineSegmentMaxLength(editingpaskaid{playerid}, 40.0);

  		Streamer_UpdateEx(playerid, X,Y+0.1,Z);

		EnterInfo(playerid, "~w~Zacal si tahat pasku, chod na poziciu kde ju chces dotiahnut a napis ~b~/ppaska~w~!", 30000, 0);

		return 1;
	}

	SendError(playerid, "Nie je vo¾ný slot na pásku!");
	return 1;
}

YCMD:zosrotovatauto(playerid, params[], help)
{
    if(GetPlayerStaffLevel(playerid) < 4) return SendClientCantUseCommand(playerid);

    new
		I_var[30]
	;

	if(sscanf(params,"s[30]",I_var))
		return SendClientSyntax(playerid, "/zosrotovatauto [spz/toto]");

	new vId = -1;

	if(strcmp(I_var, "toto", false))
	{

		new bool:vFound = false;

		foreach( new vehicleid : Vehicle )
		{
		    if(!IsValidVehicle(vehicleid))
		        continue;

			if(!strlen(vEnum[vehicleid][v_SPZ]))
			    continue;

			if(strcmp(vEnum[vehicleid][v_SPZ], I_var, false))
			    continue;

			vFound = true;
			vId = vehicleid;
		}

		if(vFound == false)
		    return SendError(playerid, "Vozidlo s touto znaèkou neexistuje!");
	}
	else
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	        return SendError(playerid, "Nie si v iadnom vozidle!");

		vId = GetPlayerVehicleID(playerid);
	}

	if(strlen(vEnum[vId][v_Owner]) < 2)
	    return SendError(playerid, "Toto vozidlo nemôe zorotova!");

    SCFM(playerid, 0xD0D0D0FF, "> Zorotoval si vozidlo %s (%s), patrilo hráèovi %s!", GetVehicleName(vId), vEnum[vId][v_SPZ], vEnum[vId][v_Owner]);
    FormatWarn(playerid, "AdmCmd:", COLOR_ADMINCMD, "%s zorotoval vozidlo %s (%s), patrilo hráèovi %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetVehicleName(vId), vEnum[vId][v_SPZ], vEnum[vId][v_Owner]);
	FormatLog(log_type_buythings, "%s(%s - %s) admin-zosrotoval vozidlo so SPZ %s.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), vEnum[vId][v_SPZ]);

    new mysql[144];

    mysql_format(MYSQL, mysql, sizeof mysql, "DELETE FROM char_vehicles WHERE SPZ = '%e'", vEnum[vId][v_SPZ]);
    mysql_query(MYSQL, mysql, false);
    RemoveAttachObj(vId);
    DestroyVehicle(vId);

    return 1;
}

YCMD:prepisauto(playerid, params[], help)
{
    if(GetPlayerStaffLevel(playerid) < 4) return SendClientCantUseCommand(playerid);

    new
		play,
		I_var[30]
	;

	if(sscanf(params,"ds[30]",play,I_var))
		return SendClientSyntax(playerid, "/prepisauto [id hráèa na ktorého prepísa] [spz/toto]");

	new vId = -1;

	if(strcmp(I_var, "toto", false))
	{

		new bool:vFound = false;

		foreach( new vehicleid : Vehicle )
		{
		    if(!IsValidVehicle(vehicleid))
		        continue;

			if(!strlen(vEnum[vehicleid][v_SPZ]))
			    continue;

			if(strcmp(vEnum[vehicleid][v_SPZ], I_var, false))
			    continue;

			vFound = true;
			vId = vehicleid;
		}

		if(vFound == false)
		    return SendError(playerid, "Vozidlo s touto znaèkou neexistuje!");
	}
	else
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	        return SendError(playerid, "Nie si v iadnom vozidle!");

		vId = GetPlayerVehicleID(playerid);
	}

	if(strlen(vEnum[vId][v_Owner]) < 2)
	    return SendError(playerid, "Toto vozidlo nemôe prepísa, pokia¾ ho teraz nikto nevlastní!");
	    
    if(GetVehicleFaction(vId) != 0)
	    return SendError(playerid, "Toto vozidlo nemôe prepísa, pokia¾ je frakèné alebo bazarové!");

    if(GetPlayerDonatorLevel(play) < 1 && CountPlayerVehicles(play) >= MAX_PLAYER_VEHICLES)
	    return SendError(playerid, "Nemá volný slot na vozidlo!");

    if(GetPlayerDonatorLevel(play) == 1 && CountPlayerVehicles(play) >= MAX_DON_1_VEHICLES)
	    return SendError(playerid, "Nemá volný slot na vozidlo!");

    if(GetPlayerDonatorLevel(play) == 2 && CountPlayerVehicles(play) >= MAX_DON_2_VEHICLES)
	    return SendError(playerid, "Nemá volný slot na vozidlo!");

    if(GetPlayerDonatorLevel(play) == 3 && CountPlayerVehicles(play) >= MAX_DON_3_VEHICLES)
	    return SendError(playerid, "Nemá volný slot na vozidlo!");

	FormatLog(log_type_other, "%s(%s - %s) admin-prepisal vozidlo %s hraca %s na hraca %s(%s - %s)", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), vEnum[vId][v_SPZ], vEnum[vId][v_Owner], ReturnName(play), ReturnMaster(play), ReturnIP(play));

	new
	    str[256];

	mysql_format(MYSQL, str, sizeof str, "UPDATE char_vehicles SET Owner = '%e' WHERE SPZ = '%e'", ReturnName(play), vEnum[vId][v_SPZ]);
	mysql_query(MYSQL, str, false);

    SCFM(playerid, 0xD0D0D0FF, "> Prepísal si vozidlo %s (%s) ktoré patrilo hráèovi %s na hráèa %s!", GetVehicleName(vId), vEnum[vId][v_SPZ], vEnum[vId][v_Owner], ReturnName(play));
    FormatWarn(playerid, "AdmCmd:", COLOR_ADMINCMD, "%s prepísal vozidlo %s (%s) ktoré patrilo hráèovi %s na hráèa %s!", GetPlayerNameEx(playerid, USE_PUREIDNAME), GetVehicleName(vId), vEnum[vId][v_SPZ], vEnum[vId][v_Owner], ReturnName(play));
	FormatLog(log_type_buythings, "%s(%s - %s) admin-prepisal vozidlo so SPZ %s ktore patrilo hracovi %s na hraca %s.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), vEnum[vId][v_SPZ], vEnum[vId][v_Owner], ReturnName(play));

    format(vEnum[vId][v_Owner], 30, "%s", ReturnName(play));

    return 1;
}

YCMD:newmap(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	ShowPlayerDialog(playerid, did_map_newmap, DIALOG_STYLE_INPUT, "BMAP  NOVÁ MAPA", "{FFFFFF}> Zadaj prosím meno mapy, ktorú chce vytvori!", "VYTVORI", "ZRUI");

	return 1;
}

YCMD:maps(playerid, params[], help)
{
	if(GetPlayerAdminLevel(playerid) < 5)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

    BMap::ShowAllMaps(playerid, did_bmap_maps, "EXISTUJÚCE MAPY", "VYBRA");

	return 1;
}

BMap::ShowAllMaps(playerid, dialogid, caption[], butt1[], butt2[] = "ZRUI")
{

	new
		query[ 64 ],
		Cache:cache,

		fstring[ 1024 ],
		name[ 64 ]
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM maps_names");
	cache = mysql_query(MYSQL, query);

    for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name(i, "name", name);

	    strcat(fstring, name);
	    strcat(fstring, "\n");
	}

	cache_delete(cache);

	ShowPlayerDialog(
	    playerid,
	    dialogid,
	    DIALOG_STYLE_LIST,
	    caption,
		fstring,
		butt1, butt2
	);

	return 1;
}

YCMD:deletemap(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	if(!IsPlayerAdmin(playerid))
	    return SendError(playerid, "Tento príkaz je iba pre RCON administrátora!");

	BMap::ShowAllMaps(playerid, did_map_deletemap, "BMAP  ZMAZA MAPU", "ZMAZA");

	return 1;
}

YCMD:vattachpridat(playerid,params[],help)
{
    if(GetPlayerAdminLevel(playerid) < 6)
	    return SendError(playerid, "Tento príkaz nemôe poui!");

	ShowPlayerDialog(playerid, did_vattach_adm_add, DIALOG_STYLE_INPUT, "TUNING  PRIDA NOVÝ OBJEKT", "{FFFFFF}> Zadaj prosím ID objektu, ktoré chce prida!", "ÏALEJ", "SPA");
	return 1;
}

showallvattach(playerid, caption[], butt1[])
{

	new
		query[ 64 ],
		Cache:cache,

		fstring[ 4096 ],
		name[ 49 ]
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_attachable");
	cache = mysql_query(MYSQL, query);

    for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name(i, "Name", name);

	    strcat(fstring, name);
	    strcat(fstring, "\n");
	}

	cache_delete(cache);

	ShowPlayerDialog(
	    playerid,
	    did_vattach_adm_rem,
	    DIALOG_STYLE_LIST,
	    caption,
		fstring,
		butt1, "ZRUI"
	);

	return 1;
}
showallvattachmenuedit(playerid)
{

	new
		query[ 144 ],
		Cache:cache,

		fstring[ MAX_ATTACH_SLOTS*50 ],
		name[ 49 ]
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_objects WHERE SPZ='%e' ORDER BY Slot",vEnum[pvehicleid[playerid]][v_SPZ]);
	cache = mysql_query(MYSQL, query);

    for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name(i, "Name", name);

	    strcat(fstring, name);
	    strcat(fstring, "\n");
	}

	cache_delete(cache);

	ShowPlayerDialog(
	    playerid,
	    did_vattach_menu,
	    DIALOG_STYLE_LIST,
	    "TUNING  VYBRA ÈAS",
		fstring,
		"VYBRA", "ZRUI"
	);

	return 1;
}

showallvattachmenu(playerid)
{

    new
		query[ 64 ],
		Cache:cache,

		tstrx[ 150 ][ 48 ],
		models[ 150 ] = {0, ...}
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_attachable");
	cache = mysql_query(MYSQL, query);

    for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name(i, "Name", tstrx[i]);
	    cache_get_value_name_int(i, "Model", models[i]);
	}

	cache_delete(cache);

    //return ShowPlayerDialog(playerid, did_locker_sd_skin_m, DIALOG_STYLE_PREVIEW_MODEL, "VYBER UNIFORMY", string, "VYBRAT", "SPAT");
    ShowPreviewModelDialog(playerid, did_vattach, "VYBER TUNINGU", models, tstrx, "VYBRAT", "SPAT");

	return 1;
}

showallvattachmenuex(playerid)
{

    new
		query[ 64 ],
		Cache:cache,

		tstrx[ 150 ][ 48 ],
		models[ 150 ] = {0, ...}
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_attachable");
	cache = mysql_query(MYSQL, query);

    for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name(i, "Name", tstrx[i]);
	    cache_get_value_name_int(i, "Model", models[i]);
	}

	cache_delete(cache);

    //return ShowPlayerDialog(playerid, did_locker_sd_skin_m, DIALOG_STYLE_PREVIEW_MODEL, "VYBER UNIFORMY", string, "VYBRAT", "SPAT");
    ShowPreviewModelDialog(playerid, did_vattach_kata, "KATALOG", models, tstrx, "OK", "");

	return 1;
}

YCMD:vattachzmazat(playerid,params[],help)
{
    if(GetPlayerAdminLevel(playerid) < 6)
	    return SendError(playerid, "Tento príkaz nemôe poui!");


	showallvattach(playerid, "TUNING  ZMAZA OBJEKT (VÝBER)", "ZMAZA");

	return 1;
}

GetVehicleFreeAttachSlot(vehicleid)
{
	new ret=-1;

	for(new x; x<MAX_ATTACH_SLOTS;x++)
	{
	    if(vattachobj[vehicleid][x] == 0)
	    {
			ret = x;
			break;
	    }
	}

	return ret;
}

stock HexToInt( string[ ] )
{
	if( string[ 0 ] == 0 ) return ( 0 );

	new i;
	new cur = 1;
	new res = 0;
	for( i = strlen( string ); i > 0; i -- )
	{
		if( string[ i - 1 ] < 58 )
		{
			res = res + cur * ( string[ i - 1 ] - 48 );
		}
		else
		{
			res = res + cur * ( string[ i - 1 ] - 65 + 10 );
			cur = cur * 16;
		}
	}

	return ( res );
}

function OnLoadAttach(vehicleid)
{
	new
	    Float:Pos[6],
		Model,
		ColorArray[ 512 ],
		TextArray[ 512 ],
		c_arr_s[ 25 ][12],
		c_count
	;

    for(new i = 0; i < cache_num_rows(); i++) {
	    if(i == cache_num_rows()) break;

	    cache_get_value_name_int(i, "Model", Model);
	    cache_get_value_name_float(i, "X", Pos[0]);
	    cache_get_value_name_float(i, "Y", Pos[1]);
	    cache_get_value_name_float(i, "Z", Pos[2]);
	    cache_get_value_name_float(i, "RX", Pos[3]);
	    cache_get_value_name_float(i, "RY", Pos[4]);
	    cache_get_value_name_float(i, "RZ", Pos[5]);
	    cache_get_value_name(i, "ColorArray", ColorArray);
	    cache_get_value_name(i, "TextArray", TextArray);

	    //colorarray
	    for( new x; x < 25; x++ )
	    {
	        c_arr_s[x][0] = -1;
	    }

		c_count = strexplode(c_arr_s, ColorArray, ",");

	    vattachobj[vehicleid][i] = CreateDynamicObject(Model, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1,-1, 300.0, 300.0, -1);

		if(c_count > 0)
		{
		    for( new x; x < c_count; x++ )
		    {
				if(strval(c_arr_s[x]) != -1)
				{
				    SetDynamicObjectMaterial(vattachobj[vehicleid][i], x, 8695, "pyramid", "white", RGBAToARGB(gVehicleColors[strval(c_arr_s[x])]));
				}
			}
		}
		//end of colorrarray

		//textarray
		if(strlen(TextArray) >= 5)
		{

		    new
			    Text[ 128 ] = "off",
			    MaterialSize = 90,
			    FontId = 1,
			    FontFace[ 64 ] = "Arial",
			    FontSize = 24,
			    Bold = 1,
			    FontColor = 0xFFFFFFFF,
			    BackColor = 0,
			    Alignment = 0
			;

		    new
		        arr_Exp_S[ 25 ][ 180 ]
			;

		    strexplode(arr_Exp_S, TextArray, ",");

		    format(arr_Exp_S[0], 130, "%s", str_replace("{", "", arr_Exp_S[0]));
	     	format(arr_Exp_S[0], 130, "%s", str_replace("}", "", arr_Exp_S[0]));

			format(Text, sizeof Text, "%s", arr_Exp_S[0]);

		    MaterialSize 		= strval(arr_Exp_S[1]);
		    FontId 				= strval(arr_Exp_S[2]);
		    FontSize			= strval(arr_Exp_S[3]);
		    Bold 				= strval(arr_Exp_S[4]);
		    FontColor 			= strval(arr_Exp_S[5]);
		    BackColor 			= strval(arr_Exp_S[6]);
		    Alignment 			= strval(arr_Exp_S[7]);

		    if(FontId > 1)
			{
				format(FontFace, sizeof FontFace, "%s", gTuningFonts[FontId]);

			}

			if(strcmp(Text, "off", false))
			    SetDynamicObjectMaterialText(vattachobj[vehicleid][i], 0, Text, MaterialSize, FontFace, FontSize, Bold, FontColor, BackColor, Alignment);


		}
		//end of textarray

		AttachDynamicObjectToVehicle(vattachobj[vehicleid][i], vehicleid, Pos[0], Pos[1], Pos[2], Pos[3], Pos[4], Pos[5]);
	}

	return 1;
}

VehAttachObj(vehicleid)
{
    new
		query[ 188 ]
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_objects WHERE SPZ = '%e' ORDER BY Slot", vEnum[vehicleid][v_SPZ]);
	mysql_tquery(MYSQL, query, "OnLoadAttach", "i", vehicleid);

	return 1;
}

RemoveAttachObj(vehicleid)
{
    for(new x; x<MAX_ATTACH_SLOTS;x++)
	{
	    if(vattachobj[vehicleid][x] != 0)
	    {
			DestroyDynamicObject(vattachobj[vehicleid][x]);
			vattachobj[vehicleid][x] = 0;
	    }
	}
	return 1;
}

YCMD:tuningkatalog(playerid, params[], help)
{
    showallvattachmenuex(playerid);
	return 1;
}

YCMD:vedit(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerAdminLevel(playerid) >= 6)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 6)
	        return SendError(playerid, "Nie si v autodielni!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

		/*if(strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
		{

		    new
				bool:fnd = false;

			for( new x; x < 4; x++ )
			{
			    if(!strcmp(playerCharacters[playerid][x], vEnum[vid][v_Owner], false))
				{
				    fnd = true;
				    break;
				}
			}

			if(fnd == true)
		    {
		        return SendError(playerid, "Nemôe upravova vozidlo svojmu druhému charakteru!");
		    }
		}*/

		pvehicleid[playerid] = vid;
		showallvattachmenuedit(playerid);
	}
	else
	{
	    SendError(playerid, "Tento príkaz nemôe poui!");
	}

	return 1;
}

YCMD:vattach(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) == FACTION_TYPE_MECHANIC || GetPlayerAdminLevel(playerid) >= 6)
	{

	    if(!IsPlayerInDynamicMenu(playerid, menut_autodielna) && GetPlayerAdminLevel(playerid) < 6)
	        return SendError(playerid, "Nie si v autodielni!");

        new zzz = IsPlayerInDynamicMenuEx(playerid, menut_autodielna);
		if(zzz != -1 && A_cargoStorage[zzz][1] < 1) return SendError(playerid, "Táto dielòa nemá na sklade diely!");

	    new
			vid = -1,
			Float:newdist = 0.0,
			Float:distance = 3.1,
			Float:pos[3],
			Float:ppos[3];

		GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);

		foreach ( new i : Vehicle ) {
			if(!IsValidVehicle(i)) continue;
			if(GetPlayerVirtualWorld(playerid) != GetVehicleVirtualWorld(i)) continue;
			if(GetPlayerInterior(playerid) != ex_GetVehicleInterior(i)) continue;
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			newdist = GetDistanceFromPoint(pos[0], pos[1], pos[2], ppos[0], ppos[1], ppos[2]);

			if(newdist < distance) {
				vid = i;
				distance = newdist;
				continue;
			}
		}
		if(vid == -1) return SendError(playerid, "Nie je tu iadne vozidlo!");

		/*if(strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
		{

		    new
				bool:fnd = false;

			for( new x; x < 4; x++ )
			{
			    if(!strcmp(playerCharacters[playerid][x], vEnum[vid][v_Owner], false))
				{
				    fnd = true;
				    break;
				}
			}

			if(fnd == true)
		    {
		        return SendError(playerid, "Nemôe upravova vozidlo svojmu druhému charakteru!");
		    }
		}*/

		if(GetVehicleFreeAttachSlot(vid) == -1)
		    return SendError(playerid, "Toto vozidlo nemá volný slot!");

		pvehicleid[playerid] = vid;
		showallvattachmenu(playerid);
	}
	else
	{
	    SendError(playerid, "Tento príkaz nemôe poui!");
	}

	return 1;
}

YCMD:vax(playerid,params[],help)
{
    new xslot = GetPVarInt(playerid, "vattacheditslot");
    if(xslot < 1)
		return SendError(playerid, "Tento príkaz nemôe poui!");
	xslot --;

	new Float:mult = 0.0;
	if(sscanf(params,"f",mult))
	    return SendClientSyntax(playerid, "/vax [pozícia, max 2.0, min -2.0]");

	if(mult < -2.0 || mult > 2.0)
	    return SendClientSyntax(playerid, "/vax [pozícia, max 2.0, min -2.0]");

	new
	    Float:pos[6],
		query[ 144 ],
		Cache:cache
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_objects WHERE Slot = '%d' AND SPZ = '%e'", xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	cache = mysql_query(MYSQL, query);

    cache_get_value_name_float(0, "X", pos[0]);
    cache_get_value_name_float(0, "Y", pos[1]);
    cache_get_value_name_float(0, "Z", pos[2]);
    cache_get_value_name_float(0, "RX", pos[3]);
    cache_get_value_name_float(0, "RY", pos[4]);
    cache_get_value_name_float(0, "RZ", pos[5]);

	cache_delete(cache);

	if(pos[0] + mult > 5.0 || pos[0] - mult < -5.0)
	    return SendError(playerid, "Objekt musi byt na aute!");

	AttachDynamicObjectToVehicle(vattachobj[pvehicleid[playerid]][xslot], pvehicleid[playerid], pos[0] + mult, pos[1], pos[2], pos[3],pos[4],pos[5]);

	mysql_format(MYSQL, query, sizeof query, "UPDATE vehicle_objects SET X = '%f' WHERE Slot = '%d' AND SPZ = '%e'", pos[0] + mult, xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	mysql_tquery(MYSQL, query);

	SendSuccess(playerid, "Objekt posunuty!");
	return 1;
}

YCMD:vay(playerid,params[],help)
{
    new xslot = GetPVarInt(playerid, "vattacheditslot");
    if(xslot < 1)
		return SendError(playerid, "Tento príkaz nemôe poui!");
	xslot --;

	new Float:mult = 0.0;
	if(sscanf(params,"f",mult))
	    return SendClientSyntax(playerid, "/vay [pozícia, max 2.0, min -2.0]");

	if(mult < -2.0 || mult > 2.0)
	    return SendClientSyntax(playerid, "/vay [pozícia, max 2.0, min -2.0]");

	new
	    Float:pos[6],
		query[ 144 ],
		Cache:cache
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_objects WHERE Slot = '%d' AND SPZ = '%e'", xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	cache = mysql_query(MYSQL, query);

    cache_get_value_name_float(0, "X", pos[0]);
    cache_get_value_name_float(0, "Y", pos[1]);
    cache_get_value_name_float(0, "Z", pos[2]);
    cache_get_value_name_float(0, "RX", pos[3]);
    cache_get_value_name_float(0, "RY", pos[4]);
    cache_get_value_name_float(0, "RZ", pos[5]);

	cache_delete(cache);

	if(pos[1] + mult > 10.0 || pos[1] - mult < -10.0)
	    return SendError(playerid, "Objekt musi byt na aute!");

	AttachDynamicObjectToVehicle(vattachobj[pvehicleid[playerid]][xslot], pvehicleid[playerid], pos[0], pos[1] + mult, pos[2], pos[3],pos[4],pos[5]);

	mysql_format(MYSQL, query, sizeof query, "UPDATE vehicle_objects SET Y = '%f' WHERE Slot = '%d' AND SPZ = '%e'", pos[1] + mult, xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	mysql_tquery(MYSQL, query);

	SendSuccess(playerid, "Objekt posunuty!");
	return 1;
}

YCMD:vaz(playerid,params[],help)
{
    new xslot = GetPVarInt(playerid, "vattacheditslot");
    if(xslot < 1)
		return SendError(playerid, "Tento príkaz nemôe poui!");
	xslot --;

	new Float:mult = 0.0;
	if(sscanf(params,"f",mult))
	    return SendClientSyntax(playerid, "/vaz [pozícia, max 2.0, min -2.0]");

	if(mult < -2.0 || mult > 2.0)
	    return SendClientSyntax(playerid, "/vaz [pozícia, max 2.0, min -2.0]");

	new
	    Float:pos[6],
		query[ 144 ],
		Cache:cache
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_objects WHERE Slot = '%d' AND SPZ = '%e'", xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	cache = mysql_query(MYSQL, query);

    cache_get_value_name_float(0, "X", pos[0]);
    cache_get_value_name_float(0, "Y", pos[1]);
    cache_get_value_name_float(0, "Z", pos[2]);
    cache_get_value_name_float(0, "RX", pos[3]);
    cache_get_value_name_float(0, "RY", pos[4]);
    cache_get_value_name_float(0, "RZ", pos[5]);

	cache_delete(cache);

	if(pos[2] + mult > 3.0 || pos[2] - mult < -3.0)
	    return SendError(playerid, "Objekt musi byt na aute!");

	AttachDynamicObjectToVehicle(vattachobj[pvehicleid[playerid]][xslot], pvehicleid[playerid], pos[0], pos[1], pos[2]+mult, pos[3],pos[4],pos[5]);

	mysql_format(MYSQL, query, sizeof query, "UPDATE vehicle_objects SET Z = '%f' WHERE Slot = '%d' AND SPZ = '%e'", pos[2] + mult, xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	mysql_tquery(MYSQL, query);

	SendSuccess(playerid, "Objekt posunuty!");
	return 1;
}

YCMD:vrx(playerid,params[],help)
{
    new xslot = GetPVarInt(playerid, "vattacheditslot");
    if(xslot < 1)
		return SendError(playerid, "Tento príkaz nemôe poui!");
	xslot --;

	new Float:mult = 0.0;
	if(sscanf(params,"f",mult))
	    return SendClientSyntax(playerid, "/vrx [pozícia, max 360.0, min -360.0]");

	if(mult < -360.0 || mult > 360.0)
	    return SendClientSyntax(playerid, "/vrx [pozícia, max 360.0, min -360.0]");

	new
	    Float:pos[6],
		query[ 144 ],
		Cache:cache
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_objects WHERE Slot = '%d' AND SPZ = '%e'", xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	cache = mysql_query(MYSQL, query);

    cache_get_value_name_float(0, "X", pos[0]);
    cache_get_value_name_float(0, "Y", pos[1]);
    cache_get_value_name_float(0, "Z", pos[2]);
    cache_get_value_name_float(0, "RX", pos[3]);
    cache_get_value_name_float(0, "RY", pos[4]);
    cache_get_value_name_float(0, "RZ", pos[5]);

	cache_delete(cache);

	AttachDynamicObjectToVehicle(vattachobj[pvehicleid[playerid]][xslot], pvehicleid[playerid], pos[0], pos[1], pos[2], pos[3]+mult,pos[4],pos[5]);

	mysql_format(MYSQL, query, sizeof query, "UPDATE vehicle_objects SET RX = '%f' WHERE Slot = '%d' AND SPZ = '%e'", pos[3] + mult, xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	mysql_tquery(MYSQL, query);

	SendSuccess(playerid, "Objekt posunuty!");
	return 1;
}

YCMD:vry(playerid,params[],help)
{
    new xslot = GetPVarInt(playerid, "vattacheditslot");
    if(xslot < 1)
		return SendError(playerid, "Tento príkaz nemôe poui!");
	xslot --;

	new Float:mult = 0.0;
	if(sscanf(params,"f",mult))
	    return SendClientSyntax(playerid, "/vry [pozícia, max 360.0, min -360.0]");

	if(mult < -360.0 || mult > 360.0)
	    return SendClientSyntax(playerid, "/vry [pozícia, max 360.0, min -360.0]");

	new
	    Float:pos[6],
		query[ 144 ],
		Cache:cache
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_objects WHERE Slot = '%d' AND SPZ = '%e'", xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	cache = mysql_query(MYSQL, query);

    cache_get_value_name_float(0, "X", pos[0]);
    cache_get_value_name_float(0, "Y", pos[1]);
    cache_get_value_name_float(0, "Z", pos[2]);
    cache_get_value_name_float(0, "RX", pos[3]);
    cache_get_value_name_float(0, "RY", pos[4]);
    cache_get_value_name_float(0, "RZ", pos[5]);

	cache_delete(cache);

	AttachDynamicObjectToVehicle(vattachobj[pvehicleid[playerid]][xslot], pvehicleid[playerid], pos[0], pos[1], pos[2], pos[3],pos[4]+mult,pos[5]);

	mysql_format(MYSQL, query, sizeof query, "UPDATE vehicle_objects SET RY = '%f' WHERE Slot = '%d' AND SPZ = '%e'", pos[4] + mult, xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	mysql_tquery(MYSQL, query);

	SendSuccess(playerid, "Objekt posunuty!");
	return 1;
}

YCMD:vrz(playerid,params[],help)
{
    new xslot = GetPVarInt(playerid, "vattacheditslot");
    if(xslot < 1)
		return SendError(playerid, "Tento príkaz nemôe poui!");
	xslot --;

	new Float:mult = 0.0;
	if(sscanf(params,"f",mult))
	    return SendClientSyntax(playerid, "/vrz [pozícia, max 360.0, min -360.0]");

	if(mult < -360.0 || mult > 360.0)
	    return SendClientSyntax(playerid, "/vrz [pozícia, max 360.0, min -360.0]");

	new
	    Float:pos[6],
		query[ 144 ],
		Cache:cache
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_objects WHERE Slot = '%d' AND SPZ = '%e'", xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	cache = mysql_query(MYSQL, query);
    cache_get_value_name_float(0, "X", pos[0]);
    cache_get_value_name_float(0, "Y", pos[1]);
    cache_get_value_name_float(0, "Z", pos[2]);
    cache_get_value_name_float(0, "RX", pos[3]);
    cache_get_value_name_float(0, "RY", pos[4]);
    cache_get_value_name_float(0, "RZ", pos[5]);
	cache_delete(cache);

	AttachDynamicObjectToVehicle(vattachobj[pvehicleid[playerid]][xslot], pvehicleid[playerid], pos[0], pos[1], pos[2], pos[3],pos[4],pos[5]+mult);

	mysql_format(MYSQL, query, sizeof query, "UPDATE vehicle_objects SET RZ = '%f' WHERE Slot = '%d' AND SPZ = '%e'", pos[5] + mult, xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	mysql_tquery(MYSQL, query);

	SendSuccess(playerid, "Objekt posunuty!");
	return 1;
}

YCMD:vcolor(playerid,params[],help)
{
    new xslot = GetPVarInt(playerid, "vattacheditslot");
    if(xslot < 1)
		return SendError(playerid, "Tento príkaz nemôe poui!");
	xslot --;

	new sss, ccc;
	if(sscanf(params,"dd",sss,ccc))
	    return SendClientSyntax(playerid, "/vcolor [slot 1-16] [id farby]");

	if(sss < 1 || sss > 16 || ccc < -1 || ccc > 256)
	    return SendClientSyntax(playerid, "/vcolor [slot 1-16] [id farby]");

	new
		ColorArray[ 512 ],
		query[ 1024 ],
		Cache:cache,

		c_arr_s[25][4]
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_objects WHERE Slot = '%d' AND SPZ = '%e'", xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	cache = mysql_query(MYSQL, query);
    cache_get_value_name(0, "ColorArray", ColorArray);
	cache_delete(cache);

	strexplode(c_arr_s, ColorArray, ",");

	if(ccc == -1)
	    SetDynamicObjectMaterial(vattachobj[pvehicleid[playerid]][xslot], sss-1, -1, "none", "none", 0xFF000000);
	else
		SetDynamicObjectMaterial(vattachobj[pvehicleid[playerid]][xslot], sss-1, 8695, "pyramid", "white", RGBAToARGB(gVehicleColors[ccc]));

	format(ColorArray, 512, "");

	for(new x; x < 16; x++)
	{
	    if(x == sss-1)
	    {
	        new v[ 24 ];
	        valstr(v, ccc);
	    	strcat(ColorArray, v);
		}
	    else if(strlen(c_arr_s[x]) < 1)
	    	strcat(ColorArray, "-1");
		else
		    strcat(ColorArray, c_arr_s[x]);

		if(x == 15)
		    break;

        strcat(ColorArray, ",");
	}

	mysql_format(MYSQL, query, sizeof query, "UPDATE vehicle_objects SET ColorArray = '%e' WHERE Slot = '%d' AND SPZ = '%e'", ColorArray, xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	mysql_tquery(MYSQL, query);

	SendSuccess(playerid, "Objekt posunuty!");
	return 1;
}

YCMD:vtext(playerid,params[],help)
{
	SendError(playerid, "Tento príkaz je doèasne vypnutý!");
    /*new xslot = GetPVarInt(playerid, "vattacheditslot");
    if(xslot < 1)
		return SendError(playerid, "Tento príkaz nemôe poui!");
	xslot --;

	new
		par1[32],
		tmppar[ 130 ]
	;

	if(sscanf(params,"s[32] S()[130]",par1,tmppar))
	    return SendClientSyntax(playerid, "/vtext [text-velkost-font-velkostfontu-hrubka-farba-farbapozadia-zarovnanie]");

	new
	    TextArray[ 512 ],
	    query[ 180 ],
	    Cache:cache,

	    Text[ 128 ] = "off",
	    MaterialSize = 90,
	    FontId = 1,
	    FontFace[ 64 ] = "Arial",
	    FontSize = 24,
	    Bold = 1,
	    FontColor = 0xFFFFFFFF,
	    BackColor = 0,
	    Alignment = 0
	;

	mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_objects WHERE Slot = '%d' AND SPZ = '%e'", xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
	cache = mysql_query(MYSQL, query);
    cache_get_value_name(0, "TextArray", TextArray);
	cache_delete(cache);

	if(strlen(TextArray) >= 5)
	{

	    new
	        arr_Exp_S[ 25 ][ 180 ]
		;

	    strexplode(arr_Exp_S, TextArray, ",");

	    format(arr_Exp_S[0], 130, "%s", str_replace("{", "", arr_Exp_S[0]));
     	format(arr_Exp_S[0], 130, "%s", str_replace("}", "", arr_Exp_S[0]));

		format(Text, sizeof Text, "%s", arr_Exp_S[0]);

	    MaterialSize 		= strval(arr_Exp_S[1]);
	    FontId 				= strval(arr_Exp_S[2]);
	    FontSize			= strval(arr_Exp_S[3]);
	    Bold 				= strval(arr_Exp_S[4]);
	    FontColor 			= strval(arr_Exp_S[5]);
	    BackColor 			= strval(arr_Exp_S[6]);
	    Alignment 			= strval(arr_Exp_S[7]);
	}

	if(FontId > 1)
	{
		format(FontFace, sizeof FontFace, "%s", gTuningFonts[FontId]);

	}

	if(!strcmp(par1, "text",true))
	{
	    // text

	    new par2[ 128 ];

	    if(sscanf(params, "s[32] s[128]", par1, par2))
	        return SendClientSyntax(playerid, "/vtext text [text ktorý bude napísaný (pre vypnutie \"off\")]");

		if(!strcmp(par2, "off", true))
		{
		    // vypnut

			format(Text, sizeof Text, "off");

			SendError(playerid, "Text bol vypnuty!");

		}
		else
		{

		    if(strfind(Text, ",", true) != -1 || strfind(Text, "{", true) != -1 || strfind(Text, "}", true) != -1)
				return SendError(playerid, "Text nesmie obsahovat , { }!");

		    // zapnut

		    format(Text, sizeof Text, "%s", par2);

			SendError(playerid, "Text bol zapnuty!");

		}
	}
	else if(!strcmp(par1, "velkost",true))
	{
	    // text

	    if(!strcmp(Text, "off", false))
	        return SendError(playerid, "Najprv nastav text!");

	    new par2;

	    if(sscanf(params, "s[32] d", par1, par2))
	        return SendClientSyntax(playerid, "/vtext velkost [10-20-30-40-50-60-70-80-90-100-110-120-130-140]");

		if(par2 % 10 != 0 || par2 < 10 || par2 > 140)
		    return SendClientSyntax(playerid, "/vtext velkost [10-20-30-40-50-60-70-80-90-100-110-120-130-140]");

		MaterialSize = par2;

		SendSuccess(playerid, "Velkost upravena!");
	}
	else if(!strcmp(par1, "font",true))
	{
	    // text

	    if(!strcmp(Text, "off", false))
	        return SendError(playerid, "Najprv nastav text!");

	    new par2;

	    if(sscanf(params, "s[32] d", par1, par2))
	        return SendClientSyntax(playerid, "/vtext font [id fontu (/attachfonty)]");

		if(par2 < 1 || par2 > sizeof(gTuningFonts))
		    return SendClientSyntax(playerid, "/vtext font [id fontu (/attachfonty)]");

		FontId = par2;
		format(FontFace, sizeof FontFace, "%s", gTuningFonts[FontId]);

		SendSuccess(playerid, "Font upraveny!");
	}
	else if(!strcmp(par1, "velkostfontu",true))
	{
	    // text

	    if(!strcmp(Text, "off", false))
	        return SendError(playerid, "Najprv nastav text!");

	    new par2;

	    if(sscanf(params, "s[32] d", par1, par2))
	        return SendClientSyntax(playerid, "/vtext velkostfontu [8-255]");

		if(par2 < 8 || par2 > 255)
		    return SendClientSyntax(playerid, "/vtext velkostfontu [8-255]");

		FontSize = par2;

		SendSuccess(playerid, "Velkost upravena!");
	}
	else if(!strcmp(par1, "hrubka",true))
	{
	    // text

	    if(!strcmp(Text, "off", false))
	        return SendError(playerid, "Najprv nastav text!");

	    new par2;

	    if(sscanf(params, "s[32] d", par1, par2))
	        return SendClientSyntax(playerid, "/vtext hrubka [0-1]");

		if(par2 < 0 || par2 > 1)
		    return SendClientSyntax(playerid, "/vtext hrubka [0-1]");

		Bold = par2;

		SendSuccess(playerid, "Hrubka upravena!");
	}
	else if(!strcmp(par1, "farba",true))
	{
	    // text

	    if(!strcmp(Text, "off", false))
	        return SendError(playerid, "Najprv nastav text!");

	    new par2;

	    if(sscanf(params, "s[32] x", par1, par2))
	        return SendClientSyntax(playerid, "/vtext farba [hex farba]");

		FontColor = par2;

		SendSuccess(playerid, "Farba upravena!");
	}
	else if(!strcmp(par1, "farbapozadia",true))
	{
	    // text

	    if(!strcmp(Text, "off", false))
	        return SendError(playerid, "Najprv nastav text!");

	    new par2;

	    if(sscanf(params, "s[32] x", par1, par2))
	        return SendClientSyntax(playerid, "/vtext farbapozadia [hex farba]");

		BackColor = par2;

		SendSuccess(playerid, "Farba upravena!");
	}
	else if(!strcmp(par1, "zarovnanie",true))
	{
	    // text

	    if(!strcmp(Text, "off", false))
	        return SendError(playerid, "Najprv nastav text!");

	    new par2;

	    if(sscanf(params, "s[32] x", par1, par2))
	        return SendClientSyntax(playerid, "/vtext zarovnanie [vlavo-0 | stred-1 | vpravo-2]");

		if(par2 < 0 || par2 > 2)
		    return SendClientSyntax(playerid, "/vtext zarovnanie [vlavo-0 | stred-1 | vpravo-2]");

		Alignment = par2;

		SendSuccess(playerid, "Zarovnanie upravene!");
	}
	else
	    return SendClientSyntax(playerid, "/vtext [text-velkost-font-velkostfontu-hrubka-farba-farbapozadia-zarovnanie]");

	if(!strcmp(Text, "off", false))
	{
	    new
	        Model,
			Float:Pos[6],

			ColorArray[512],

			c_arr_s[ 25 ][12],
			c_count
		;

	    mysql_format(MYSQL, query, sizeof query, "SELECT * FROM vehicle_objects WHERE Slot = '%d' AND SPZ = '%e'", xslot, vEnum[pvehicleid[playerid]][v_SPZ]);
		cache = mysql_query(MYSQL, query);
	    cache_get_value_name_int(0, "Model", Model);
	    cache_get_value_name(0, "ColorArray", ColorArray);
	    cache_get_value_name_float(0, "X", Pos[0]);
	    cache_get_value_name_float(0, "Y", Pos[1]);
	    cache_get_value_name_float(0, "Z", Pos[2]);
	    cache_get_value_name_float(0, "RX", Pos[3]);
	    cache_get_value_name_float(0, "RY", Pos[4]);
	    cache_get_value_name_float(0, "RZ", Pos[5]);
		cache_delete(cache);

	    DestroyDynamicObject(vattachobj[pvehicleid[playerid]][xslot]);

	    vattachobj[pvehicleid[playerid]][xslot] = CreateDynamicObject(Model, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1,-1, 300.0, 300.0, -1);

	    //colorarray
	    for( new x; x < 25; x++ )
	    {
	        c_arr_s[x][0] = -1;
	    }

		c_count = strexplode(c_arr_s, ColorArray, ",");

		if(c_count > 0)
		{
		    for( new x; x < c_count; x++ )
		    {
				if(strval(c_arr_s[x]) != -1)
				{
				    SetDynamicObjectMaterial(vattachobj[pvehicleid[playerid]][xslot], x, 8695, "pyramid", "white", RGBAToARGB(gVehicleColors[strval(c_arr_s[x])]));
				}
			}
		}
		//end of colorrarray

	    AttachDynamicObjectToVehicle(vattachobj[pvehicleid[playerid]][xslot], pvehicleid[playerid], Pos[0], Pos[1], Pos[2], Pos[3], Pos[4], Pos[5]);
	}
	else
	    SetDynamicObjectMaterialText(vattachobj[pvehicleid[playerid]][xslot], 0, Text, MaterialSize, FontFace, FontSize, Bold, FontColor, BackColor, Alignment);

	mysql_format(MYSQL, query, sizeof query, "UPDATE vehicle_objects SET TextArray = '{%e},%d,%d,%d,%d,%d,%d,%d' WHERE SPZ = '%e' AND Slot = '%d'",
	    Text, MaterialSize, FontId, FontSize, Bold, FontColor, BackColor, Alignment,
	    vEnum[pvehicleid[playerid]][v_SPZ], xslot
	);

	mysql_tquery(MYSQL, query);
	*/
	return 1;
}

YCMD:vexit(playerid,params[],help)
{
    new xslot = GetPVarInt(playerid, "vattacheditslot");
    if(xslot < 1)
		return SendError(playerid, "Tento príkaz nemôe poui!");

	DeletePVar(playerid,"vattacheditslot");

	SendSuccess(playerid, "Uprava tuningu dokoncena!");
	return 1;
}

YCMD:skate(playerid,params[],help){
	if(GetPlayerInventoryItem(playerid,inv_skateboard)<1)
	    return SendError(playerid, "Nemas skateboard!");

	if(!IsPlayerInAnyVehicle(playerid)){
		ApplyAnimation(playerid, "CARRY","null",0,0,0,0,0,0,0);
	    ApplyAnimation(playerid, "SKATE","null",0,0,0,0,0,0,0);
	    ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
	    SetPlayerArmedWeapon(playerid,0);
		if(InfoSkate[playerid][sActive] == 0){

			InfoSkate[playerid][sActive] = 1;

			#if TYPE_SKATE == 0
				// the skate is placed on the right arm
				SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
			#else
				// the skate is placed in the back
				SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,1,0.055999,-0.173999,-0.007000,-95.999893,-1.600010,24.099992,1.000000,1.000000,1.000000);
			#endif

			PlayerPlaySound(playerid,21000,0,0,0);
			SendSuccess(playerid, "Vybral si si skateboard!");

		}
		else
		{

			HideSkateboard(playerid);
			SendSuccess(playerid, "Schoval si skateboard!");

		}
	}
	else
	    SendError(playerid, "Nemozes sediet v aute!");

	return 1;
}

HideSkateboard(playerid)
{

    if(InfoSkate[playerid][sActive] == 2)
		DestroyObject(InfoSkate[playerid][sSkate]);
	else
		RemovePlayerAttachedObject(playerid,INDEX_SKATE);

	PlayerPlaySound(playerid,21000,0,0,0);

	InfoSkate[playerid][sActive] = 0;

	return 1;
}

YCMD:zapalit(playerid, params[], help)
{

	if(GetPlayerInventoryItem(playerid, inv_katalog) < 1 || GetPlayerInventoryItem(playerid, inv_zapalovac) < 1)
	    return SendError(playerid, "Na zaloenie ohna potrebujes zapalovac a katalog!");

	new
		model = 18688,
		freeid = -1;

	for( new i; i < sizeof fdFire; i++ )
	{

		if(fdFire[i][fdfire_Model] != 0)
			continue;

		freeid = i;

		break;

	}

	if(freeid == -1)
		return SendError(playerid, "Nie je volný slot na oheò!");

	new
		Float:X, Float:Y, Float:Z, i = freeid;

	GetPlayerPos(playerid, X, Y, Z);

	Z -= 3.0;

	fdFire[i][fdfire_Model] 		= model;
	fdFire[i][fdfire_ObjectID] 		= CreateDynamicObject(model, X, Y, Z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 150.0, 135.0, -1, 5);
	fdFire[i][fdfire_AreaID]   		= CreateDynamicSphere(X, Y, Z + 2.5, 2.0);

	fdFire[i][fdfire_X]				= X;
	fdFire[i][fdfire_Y]				= Y;
	fdFire[i][fdfire_Z]				= Z;

	fdFire[i][fdfire_Steps]         = 1;
	fdFire[i][fdfire_HP]			= 5.0;

	format(fdFire[i][fdfire_PlacedBy], 30, ReturnName(playerid));

	Streamer_UpdateEx(playerid, X, Y+0.1, Z);

    fdFire[i][fdfire_LabelID] = CreateDynamic3DTextLabel("5 HP", 0xb03939ff, X,Y,Z + 3.0, 9.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 10.0, -1, 10);
    SCFM(playerid, COLOR_LIGHTBLUE, "> {FFFFFF}Oheò sa postupne zväèí a rozíri, nemusí ich zapalova ve¾a!");

    SetPlayerInventoryItem(playerid, inv_katalog, GetPlayerInventoryItem(playerid, inv_katalog) - 1);
    SetPlayerInventoryItem(playerid, inv_zapalovac, GetPlayerInventoryItem(playerid, inv_zapalovac) - 1);

	return 1;
}

YCMD:achievements(playerid, params[], help)
{
	Achievement::List(playerid);
	return 1;
}

YCMD:hbottle(playerid, params[], help)
{
    if(!Alcohol::Holding(playerid))
	    return SendError(playerid, "Nedrí f¾au s alkoholom!");

	SCFM(playerid, COLOR_LIGHTBLUE, "> Odloil si f¾au s alkoholom!");
    Alcohol::SetHolding(playerid, false);
	return 1;
}

YCMD:dbottle(playerid, params[], help)
{
    if(!Alcohol::Holding(playerid))
	    return SendError(playerid, "Nedrí f¾au s alkoholom!");

	SCFM(playerid, COLOR_LIGHTBLUE, "> Nevratne si zahodil f¾au s alkoholom!");
    Alcohol::SetHolding(playerid, false);

    Alcohol::inventory[playerid][Alcohol::invidholding[playerid]][alcinv_Objem] 		= 0;
    Alcohol::inventory[playerid][Alcohol::invidholding[playerid]][alcinv_DecreaseBy] 	= 0;
    Alcohol::inventory[playerid][Alcohol::invidholding[playerid]][alcinv_Alcohol] 		= 0;
    Alcohol::inventory[playerid][Alcohol::invidholding[playerid]][alcinv_Object] 		= 0;
	return 1;
}

YCMD:pbottle(playerid, params[], help)
{

	if(!Alcohol::Holding(playerid))
	    return SendError(playerid, "Nedrí f¾au s alkoholom!");

	new
	    target
	;

	if(sscanf(params, "d", target))
	    return SendClientSyntax(playerid, "/pbottle [id]");

    MaskToId(target);

	if(!IsPlayerLogged(target))
	 	return SendClientPlayerOffline(playerid);

	if(IsPlayerNearPlayer(playerid, target, 2.0)) {
    	if(flasaZiadost[target][playerid] == 1)
			return SendError(playerid, "Tomuto hráèovi si u odoslal iados o prehladanie!");

        new
			id;

		if(B_playerHasMask[playerid] == true) id = I_playerMaskID[playerid];
		else id = playerid;

		SCFM(playerid, COLOR_GREY, "> Odoslal si iados o podanie alkoholu hráèovi %s, iados vyprí o 15 sekúnd!", GetPlayerNameEx(target, USE_MASK));
		SCFM(target, COLOR_GREY, "> %s ti zaslal iados o podanie alkoholu, iados vyprí o 15 sekúnd!", GetPlayerNameEx(playerid, USE_MASK));
		SCFM(target, COLOR_GREY, "> Pre prijatie poui príkaz /accept alkohol %d", id);

		flasaZiadost[target][playerid] = 2;
		SetTimerEx("AlkoholCancel", 15000, false, "ii", target, playerid);

	} else SendError(playerid, "Tento hráè je moc ïaleko!");

	return 1;
}

YCMD:upravitekonomiku(playerid, params[], help)
{
    if(strcmp(ReturnMaster(playerid), "bigw3b", false) || !IsPlayerAdmin(playerid))
    {
		return SendError(playerid, "Iba vznesene osoby nesuce meno bigw3b maju pristup do tejto casti nastaveni! FUCK OFF.");
    }
    
	Economy::ShowCategories(playerid);
    
	return 1;
}

YCMD:kupitodserveru(playerid, params[], help)
{

    if(GetPlayerFactionType(playerid) != FACTION_TYPE_BAZAR && GetPlayerAdminLevel(playerid) < 3)
		return SendClientCantUseCommand(playerid);

    if(GetPlayerFactionRank(playerid) < 9)
		return SendError(playerid, "Na toto nemas opravnenie!");

	if(ex_GetPlayerMoney(playerid) < Economy::GetPrice(ECONOMY_LIST_BAZAR_SERVER))
	    return SCFM(playerid, COLOR_LIGHTBLUE, "> Pre kúpenie náhodného auta potrebuje %d$!", Economy::GetPrice(ECONOMY_LIST_BAZAR_SERVER));

	ex_GivePlayerMoney(playerid, -Economy::GetPrice(ECONOMY_LIST_BAZAR_SERVER));
	money_spent[playerid]+=floatround(Economy::GetPrice(ECONOMY_LIST_BAZAR_SERVER),floatround_round);
	bazar_SpawnServer(playerid);
	return 1;
}

YCMD:bazar(playerid, params[], help)
{
    if(GetPlayerFactionType(playerid) != FACTION_TYPE_BAZAR && GetPlayerAdminLevel(playerid) < 3)
		return SendClientCantUseCommand(playerid);

	new
	    vid = GetPlayerVehicleID(playerid),
	    S_var[35],
		S_var2[128];

	if(sscanf(params, "s[35] S(null)[128]", S_var, S_var2))
	{
		SendClientSyntax(playerid, "/bazar [popis-cena-buyout-list-info-setspawn-destroy-sell]");
		SendClientSyntax(playerid, "Popis: upraví popis auta ('null' pre vypnutie, = pre nový riadok)");
		SendClientSyntax(playerid, "Buyout: povolí/zakáe kúpu vozidla ak nikto z bazaru nie je online.");
		SendClientSyntax(playerid, "List zobrazí vetky vozidlá v bazare.");
		SendClientSyntax(playerid, "Info: zobrazí informácie o vozidle.");
		SendClientSyntax(playerid, "Setspawn: Nastaví pozíciu spawnu vozidla.");
		SendClientSyntax(playerid, "Sell: predá vozidlo hráèovi so zadaným ID");
		SendClientSyntax(playerid, "Destroy: Natrvalo zmae auto z databáze a zo serveru, bez vrátenia $.");
	    return 1;
	}

	if(!strcmp(S_var, "setspawn", true))
	{
	    if(vid == 0)
	        return SendError(playerid, "Nesedí v iadnom vozidle!");
	        
        if(vEnum[vid][v_bazar_BoughtFor] == 0)
		    return SendError(playerid, "Toto vozidlo nie je z autobazaru!");
	        
	    if(GetVehicleFaction(vid) != GetPlayerFaction(playerid) || GetVehicleFaction(vid) == 0)
	        return SendError(playerid, "Toto vozidlo nie je tvojej frakcie!");
	        
        if(strcmp(vEnum[vid][v_bazar_AddedBy], ReturnName(playerid), false) && GetPlayerFactionRank(playerid) < 9)
		    return SendError(playerid, "Na toto nemas opravnenie!");

        new
			S_query[1024],
			Cache:query;

        new
			Float:Pos[4];

		GetVehiclePos(vid, Pos[0], Pos[1], Pos[2]);
		GetVehicleZAngle(vid, Pos[3]);
		
		vEnum[vid][v_def_SpawnX] = Pos[0];
		vEnum[vid][v_def_SpawnY] = Pos[1];
		vEnum[vid][v_def_SpawnZ] = Pos[2];
		vEnum[vid][v_def_SpawnA] = Pos[3];
		vEnum[vid][v_def_SpawnVW] = GetPlayerVirtualWorld(playerid);
		vEnum[vid][v_def_SpawnINT] = GetPlayerInterior(playerid);

		mysql_format(MYSQL, S_query, 1024, "SELECT * FROM faction_vehicles WHERE SPZ = '%e'", vEnum[vid][v_SPZ]);
		query = mysql_query(MYSQL, S_query);

		if(cache_num_rows() > 0)
		{

		    cache_delete(query);

		    new
		        VirtualWorld = GetVehicleVirtualWorld(GetPlayerVehicleID(playerid)),
		        Interiors = ex_GetVehicleInterior(GetPlayerVehicleID(playerid)),
		        Faction = GetVehicleFaction(GetPlayerVehicleID(playerid)),
		        Siren = vEnum[GetPlayerVehicleID(playerid)][v_Siren],
		        Float:def_Health = vEnum[GetPlayerVehicleID(playerid)][v_def_Health];

	        mysql_format(MYSQL, S_query, 1024, "UPDATE faction_vehicles SET X = '%f', Y = '%f', Z = '%f', Angle = '%f', VirtualWorld = '%d', Interior = '%d', Siren = '%d', Faction = '%d', def_Health = '%f' WHERE SPZ = '%e'",
	   			Pos[0], Pos[1], Pos[2], Pos[3], VirtualWorld, Interiors, Siren, Faction, def_Health, vEnum[vid][v_SPZ]);

			mysql_tquery(MYSQL, S_query);
		}
		else
		{
		    cache_delete(query);
		
		    new
				Model = GetVehicleModel(vid),
		        VirtualWorld = GetVehicleVirtualWorld(vid),
			   	Interiors = vehicleData[vid][gVeh_Interior],
		        Faction = GetVehicleFaction(vid),
		        Siren = vEnum[vid][v_Siren],
		        Float:def_Health = vEnum[vid][v_def_Health];

			mysql_format(MYSQL, S_query, 1024, "INSERT INTO faction_vehicles (SPZ, Model, X, Y, Z, Angle, VirtualWorld, Interior, Siren, Faction, def_Health) VALUES ('%e', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%f')",
			    vEnum[vid][v_SPZ], Model, Pos[0], Pos[1], Pos[2], Pos[3], VirtualWorld, Interiors, Siren, Faction, def_Health);
			mysql_tquery(MYSQL, S_query);
		}

        SCFM(playerid, 0xD0D0D0FF, "> Upravil si spawn vozidla autobazaru %s! ID: %d, ivot vozidla: %.1fHP.", vEnum[vid][v_SPZ], vid, vEnum[vid][v_def_Health]);
		FormatLog(log_type_other, "%s(%s - %s) upravil spawn poziciu bazaroveho vozidla %s.", ReturnName(playerid), ReturnMaster(playerid), ReturnIP(playerid), vEnum[vid][v_SPZ]);
		FormatBazarLog(playerid, "[edit] Uprava spawn pozicie vozidla %s (%s).", GetVehicleName(vid), vEnum[vid][v_SPZ]);
	}
	else if(!strcmp(S_var, "destroy", true))
	{
	    if(vid == 0)
	        return SendError(playerid, "Nesedí v iadnom vozidle!");
	        
        if(vEnum[vid][v_bazar_BoughtFor] == 0)
		    return SendError(playerid, "Toto vozidlo nie je z autobazaru!");
	
	    if(GetVehicleFaction(vid) != GetPlayerFaction(playerid) || GetVehicleFaction(vid) == 0)
	        return SendError(playerid, "Toto vozidlo nie je tvojej frakcie!");
	        
        if(GetPlayerFactionRank(playerid) < 9)
		    return SendError(playerid, "Na toto nemas opravnenie!");


        new
		    S_query[256];

		mysql_format(MYSQL, S_query, 256, "DELETE FROM faction_vehicles WHERE SPZ = '%e'",
			vEnum[GetPlayerVehicleID(playerid)][v_SPZ]);

		mysql_tquery(MYSQL, S_query);

		SCFM(playerid, 0xD0D0D0FF, "> Zmazal si bazarové vozidlo %s! ID: %d.", vEnum[GetPlayerVehicleID(playerid)][v_SPZ], GetPlayerVehicleID(playerid));

		FormatWarnEx(playerid,3, "PlayerCmd:", COLOR_ADMINCMD, "%s zmazal  bazarové vozidlo %s. (id %d)", GetPlayerNameEx(playerid, USE_PUREIDNAME), vEnum[GetPlayerVehicleID(playerid)][v_SPZ], GetPlayerVehicleID(playerid));
		FormatLog(log_type_admin, "%s(%s) zmazal frakcne vozidlo %s. (id %d)", ReturnMaster(playerid), ReturnIP(playerid), vEnum[GetPlayerVehicleID(playerid)][v_SPZ], GetPlayerVehicleID(playerid));

        UpdateFactionVehicleUnit(vid, "", false, false);
        
        vEnum[vid][v_bazar_BoughtFor] = 0;

		for(new i; vehicle_Enum:i < vehicle_Enum; i++) {
			vEnum[GetPlayerVehicleID(playerid)][vehicle_Enum:i] = 0;
		}
		
		FormatBazarLog(playerid, "[delete] Zmazane bazarove vozidlo %s (%s).", GetVehicleName(vid), vEnum[vid][v_SPZ]);

        RemoveAttachObj(GetPlayerVehicleID(playerid));
		DestroyVehicle(GetPlayerVehicleID(playerid));
	}
	else if(!strcmp(S_var, "info", false))
	{
	
	    if(vid == 0)
	        return SendError(playerid, "Nesedí v iadnom vozidle!");
	        
        if(vEnum[vid][v_bazar_BoughtFor] == 0)
		    return SendError(playerid, "Toto vozidlo nie je z autobazaru!");

	    if(GetVehicleFaction(vid) != GetPlayerFaction(playerid) || GetVehicleFaction(vid) == 0)
	        return SendError(playerid, "Toto vozidlo nie je tvojej frakcie!");

	    new
		    string[1024],
		    tString[256];

        format(tString, 256, "{FFFFFF}> Vozidlo: {e34f4f}%s\n", GetVehicleName(vid));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> SPZ: {e34f4f}%s\n", vEnum[vid][v_SPZ]);
   		strcat(string, tString);

		new
   		    palivo[12];

		switch(vEnum[vid][v_FuelType])
		{

            case 0:
				format(palivo, sizeof palivo, "nemá");

            case 1:
				format(palivo, sizeof palivo, "benzín");

            case 2:
				format(palivo, sizeof palivo, "diesel");

            case 3:
				format(palivo, sizeof palivo, "kerosin");

            case 4:
				format(palivo, sizeof palivo, "LPG");
		}

		format(tString, 256, "{FFFFFF}> Palivo: {e34f4f}%d%% (%s)\n", vEnum[vid][v_Fuel], palivo);
   		strcat(string, tString);

   		switch(vehicleFuelTypes[GetVehicleModel(vid)-400])
		{

            case 0:
				format(palivo, sizeof palivo, "nemá");

            case 1:
				format(palivo, sizeof palivo, "benzín");

            case 2:
				format(palivo, sizeof palivo, "diesel");

            case 3:
				format(palivo, sizeof palivo, "kerosin");

            case 4:
				format(palivo, sizeof palivo, "LPG");
		}

   		format(tString, 256, "{FFFFFF}> Jazdí na palivo: {e34f4f}%s\n", palivo);
   		strcat(string, tString);

   		format(tString, 256, "{FFFFFF}> Batéria: {e34f4f}%d%%\n", vEnum[vid][v_Battery]);
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Stav oleja: {e34f4f}%.0f %%\n", vEnum[vid][v_Oil]);
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Najazdené: {e34f4f}%.3f MI\n", vEnum[vid][v_MileAge]);
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Nitro: {e34f4f}%.1f\n", vEnum[vid][v_Nitrous]);
   		strcat(string, tString);

   		format(tString, 256, "{FFFFFF}> Taxameter: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_TaxameterItem]));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Titanové zámky: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_NoBreakin]));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Nepriestrelné okná: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_TitWindows]));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Autorádio: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_CarRadio]));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Alarm: {e34f4f}%s\n\n", ReturnBoolString(vEnum[vid][v_AlarmItem]));
   		strcat(string, tString);
   		
   		format(tString, 256, "{FFFFFF}> Odkúpil: {e34f4f}%s\n", vEnum[vid][v_bazar_AddedBy]);
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Odkúpené: {e34f4f}%s\n", getdateunix(vEnum[vid][v_bazar_DateAdded]));
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Odkúpené za: {e34f4f}%d\n", vEnum[vid][v_bazar_BoughtFor]);
   		strcat(string, tString);
   		format(tString, 256, "{FFFFFF}> Buyout povolený: {e34f4f}%s\n", ReturnBoolString(vEnum[vid][v_bazar_Buyout]));
   		strcat(string, tString);

		ShowPlayerDialog(playerid, did_vehinfo, DIALOG_STYLE_MSGBOX, "VOZIDLO", string, "OK", "");
	}
	else if(!strcmp(S_var, "list", false))
	{
		new
		    query[ 256 ]
		;

		mysql_format(MYSQL, query, sizeof query, "SELECT * FROM faction_vehicles WHERE Faction = '%d'", GetPlayerFaction(playerid));
		mysql_tquery(MYSQL, query, "OnFactionVehicleList", "d", playerid);
	}
	else if(!strcmp(S_var, "buyout", false))
	{
	    if(vid == 0)
	        return SendError(playerid, "Nesedí v iadnom vozidle!");

        if(vEnum[vid][v_bazar_BoughtFor] == 0)
		    return SendError(playerid, "Toto vozidlo nie je z autobazaru!");

	    if(GetVehicleFaction(vid) != GetPlayerFaction(playerid) || GetVehicleFaction(vid) == 0)
	        return SendError(playerid, "Toto vozidlo nie je tvojej frakcie!");
	        
        if(strcmp(vEnum[vid][v_bazar_AddedBy], ReturnName(playerid), false) && GetPlayerFactionRank(playerid) < 9)
		    return SendError(playerid, "Na toto nemas opravnenie!");

		vEnum[vid][v_bazar_Buyout] = ! vEnum[vid][v_bazar_Buyout];
		UpdateFactionVehicleUnit(vid, bazar_GetUnitText(vid), false, false, .windshield=true);

		SCFM(playerid, COLOR_LIGHTBLUE, "> Buyout status vozidla bol upravený. Povolené kupova vozidlo, ak nie je bazar online: %s", ReturnBoolString(vEnum[vid][v_bazar_Buyout]));
		
		FormatBazarLog(playerid, "[edit] Upraveny status buyoutu vozidla %s (%s) -> %d.", GetVehicleName(vid), vEnum[vid][v_SPZ], vEnum[vid][v_bazar_Buyout]);
	}
	else if(!strcmp(S_var, "cena", false))
	{
	    if(vid == 0)
	        return SendError(playerid, "Nesedí v iadnom vozidle!");
        if(vEnum[vid][v_bazar_BoughtFor] == 0)
		    return SendError(playerid, "Toto vozidlo nie je z autobazaru!");

        if(strcmp(vEnum[vid][v_bazar_AddedBy], ReturnName(playerid), false) && GetPlayerFactionRank(playerid) < 9)
		    return SendError(playerid, "Na toto nemas opravnenie!");

	    if(GetVehicleFaction(vid) != GetPlayerFaction(playerid) || GetVehicleFaction(vid) == 0)
	        return SendError(playerid, "Toto vozidlo nie je tvojej frakcie!");

        if(!strcmp(S_var2, "null", true) || !IsNumeric(S_var2) || strval(S_var2) < 1)
	    {
	        return SendError(playerid, "Cena musí by kladné celé èíslo!");
		}
		else
		{
		    new cena = strval(S_var2);

		    if(cena < 1)
		        return SendError(playerid, "Cena musí by kladné celé èíslo!");

		    vEnum[vid][v_bazar_Price] = cena;
		    UpdateFactionVehicleUnit(vid, bazar_GetUnitText(vid), false, false, .windshield=true);

		    SendSuccess(playerid, "Cena vozidla upravena!");

		    FormatBazarLog(playerid, "[edit] Uprava ceny vozidla %s (%s) -> %d$.", GetVehicleName(vid), vEnum[vid][v_SPZ], cena);
		}
	}
	else if(!strcmp(S_var, "sell", false))
	{
	    if(vid == 0)
	        return SendError(playerid, "Nesedí v iadnom vozidle!");
	        
        if(vEnum[vid][v_bazar_BoughtFor] == 0)
		    return SendError(playerid, "Toto vozidlo nie je z autobazaru!");

        if(strcmp(vEnum[vid][v_bazar_AddedBy], ReturnName(playerid), false) && GetPlayerFactionRank(playerid) < 9)
		    return SendError(playerid, "Na toto nemas opravnenie!");

	    if(GetVehicleFaction(vid) != GetPlayerFaction(playerid) || GetVehicleFaction(vid) == 0)
	        return SendError(playerid, "Toto vozidlo nie je tvojej frakcie!");

        if(!strcmp(S_var2, "null", true) || !IsNumeric(S_var2) || strval(S_var2) < 0)
	    {
	        return SendError(playerid, "Tento hráè nie je v hre!");
		}
		else
		{
		    new target = strval(S_var2);
		    
			if(!IsPlayerLogged(target))
				return SendError(playerid, "Tento hráè nie je v hre!");

			if(!IsPlayerNearPlayer(target, playerid, 10.0))
				return SendError(playerid, "Tento hráè je moc ïaleko!");

			if(GetPlayerFactionRank(playerid) < 9)
			{
			    if(playerid == target)
				    return SendError(playerid, "Tento príkaz nemôe aplikova na seba!");
			}

		    if(bazarsZiadost[target][playerid] == 1)
				return SendError(playerid, "Tomuto hráèovi si u odoslal iados o predanie vozidla!");
				
            if(GetPlayerDonatorLevel(target) < 1 && CountPlayerVehicles(target) >= MAX_PLAYER_VEHICLES)
			    return SendError(playerid, "Nemá volný slot na vozidlo!");

			if(GetPlayerDonatorLevel(target) == 1 && CountPlayerVehicles(target) >= MAX_DON_1_VEHICLES)
			    return SendError(playerid, "Nemá volný slot na vozidlo!");

			if(GetPlayerDonatorLevel(target) == 2 && CountPlayerVehicles(target) >= MAX_DON_2_VEHICLES)
			    return SendError(playerid, "Nemá volný slot na vozidlo!");

			if(GetPlayerDonatorLevel(target) == 3 && CountPlayerVehicles(target) >= MAX_DON_3_VEHICLES)
			    return SendError(playerid, "Nemá volný slot na vozidlo!");

	        new
				id;

			if(B_playerHasMask[playerid] == true) id = I_playerMaskID[playerid];
			else id = playerid;

			SCFM(playerid, COLOR_GREY, "> Odoslal si iados o predanie vozidla hráèovi %s, iados vyprí o 15 sekúnd!", GetPlayerNameEx(target, USE_MASK));
			SCFM(target, COLOR_GREY, "> %s ti zaslal iados o predanie vozidla, iados vyprí o 15 sekúnd!", GetPlayerNameEx(playerid, USE_MASK));
			SCFM(target, COLOR_GREY, "> Pre prijatie poui príkaz /accept bazarauto %d", id);

			bazarsZiadost[target][playerid] = 1;
			bazarvehid[playerid] = vid;
			SetTimerEx("BazarSCancel", 15000, false, "ii", target, playerid);
		}
	}
	else if(!strcmp(S_var, "popis", false))
	{
	    if(vid == 0)
	        return SendError(playerid, "Nesedí v iadnom vozidle!");

        if(vEnum[vid][v_bazar_BoughtFor] == 0)
		    return SendError(playerid, "Toto vozidlo nie je z autobazaru!");
		    
        if(strcmp(vEnum[vid][v_bazar_AddedBy], ReturnName(playerid), false) && GetPlayerFactionRank(playerid) < 9)
		    return SendError(playerid, "Na toto nemas opravnenie!");

	    if(GetVehicleFaction(vid) != GetPlayerFaction(playerid) || GetVehicleFaction(vid) == 0)
	        return SendError(playerid, "Toto vozidlo nie je tvojej frakcie!");
	
	    if(!strcmp(S_var2, "null", true))
	    {
	        format(vEnum[vid][v_bazar_Desc],256,"");
		    UpdateFactionVehicleUnit(vid, bazar_GetUnitText(vid), false, false, .windshield=true);
            
            SendError(playerid, "Popis vozidla vypnuty!");
            
            FormatBazarLog(playerid, "[edit] Vypnutie popisu vozidla %s (%s).", GetVehicleName(vid), vEnum[vid][v_SPZ]);
		}
		else
		{
		    format(vEnum[vid][v_bazar_Desc],256,"%s", replaceChars(S_var2));
		    UpdateFactionVehicleUnit(vid, bazar_GetUnitText(vid), false, false, .windshield=true);
		    
		    FormatBazarLog(playerid, "[edit] Uprava popisu vozidla %s (%s) -> '%s'.", GetVehicleName(vid), vEnum[vid][v_SPZ], replaceChars(S_var2));
		}
	}
	else
	{
	    SendClientSyntax(playerid, "/bazar [popis-cena-buyout-list-info-setspawn-destroy-sell]");
		SendClientSyntax(playerid, "Popis: upraví popis auta ('null' pre vypnutie, = pre nový riadok)");
		SendClientSyntax(playerid, "Buyout: povolí/zakáe kúpu vozidla ak nikto z bazaru nie je online.");
		SendClientSyntax(playerid, "List zobrazí vetky vozidlá v bazare.");
		SendClientSyntax(playerid, "Info: zobrazí informácie o vozidle.");
		SendClientSyntax(playerid, "Setspawn: Nastaví pozíciu spawnu vozidla.");
		SendClientSyntax(playerid, "Sell: predá vozidlo hráèovi so zadaným ID");
		SendClientSyntax(playerid, "Destroy: Natrvalo zmae auto z databáze a zo serveru, bez vrátenia $.");
	    return 1;
	}
	return 1;
}

bazar_GetUnitText(vid)
{
	new finstr[512], tstr[256] = "", tstrx[24] = "";
	
	if(strlen(vEnum[vid][v_bazar_Desc]) > 1)
		format(tstr, 256, "\n\n%s", str_replace("=", "\n", vEnum[vid][v_bazar_Desc]));
	
	if(vEnum[vid][v_bazar_Buyout] == 1)
	{
	    format(tstrx, sizeof tstrx, "\n\n/kupitvozidlo %d", vid);
	}

	format(finstr, sizeof finstr, "{FFFFFF}[ %s ]\n[ {94c45e}$%d {ffffff}]\n[ {cccccc}%.2f najazdených mí¾ {ffffff}]%s%s",
	
	    GetVehicleName(vid),
	    vEnum[vid][v_bazar_Price],
	    vEnum[vid][v_MileAge],
	    tstr,
	    tstrx
	);
	
	return finstr;
}

bazar_Log(playerid, str[])
{
    new
	    S_query[1024];

	mysql_format(MYSQL, S_query, 1024, "INSERT INTO bazar_log (date,employee_name,message) VALUES ('%d', '%e', '%e')", gettime(), ReturnName(playerid),str);
	mysql_tquery(MYSQL, S_query);
	return 1;
}

weapon_Log(playerid, str[])
{
    new
	    S_query[1024];

	mysql_format(MYSQL, S_query, 1024, "INSERT INTO weapon_log (date,username,text) VALUES ('%d', '%e', '%e')", gettime(), ReturnName(playerid),str);
	mysql_tquery(MYSQL, S_query);
	return 1;
}

new bazarRandomCars[] = {
	400,
	401,
	404,
	405,
	410,
	412,
	413,
	414,
	418,
	419,
	421,
	422,
	426,
	429,
	436,
	436,
	436,
	438,
	439,
	445,
	458,
	459,
	466,466,466,
	467,467,467,
	474,
	475,
	478,478,478,
	479,
	482,
	483,
	489,
	491,
	492,
	496,
	498,
	517,
	518,
	526,
	527,
	529,
	533,
	540,
	542,542,
	543,543,
	547,547,
	549,549,549,549,
	550,
	551,
	554,
	561,
	566,
	576,
	579,
	580,
	585,
	589,
	600,600,600,
	604,604,604,604,
	605,605,605,605,605,
	609,
	
	462,
	463,
	461,
	468,
	471,
	521,
	581
};

bazar_SpawnServer(playerid)
{
	new
	    Float:X = -226.774,
	    Float:Y = 1193.299,
	    Float:Z = 19.408,
	    Float:Angle = 270.066,
	    
	    vModel = bazarRandomCars[random(sizeof(bazarRandomCars))],
	    vSPZ[24],
	    vWrecked = (random(4) == 1) ? 1 : 0,
	    vColor1 = 0+random(125),
	    Float:vHealth = 1000.0,
	    
	    vehicleid
	;

	////////////////////////////////////////////////////////////////////////////

	vehicleid = CreateVehicle(vModel, X, Y, Z, Angle, vColor1, vColor1, -1, 0);
	strcat(vSPZ, SPZ_PATTERN);
	
	if(vWrecked == 1)
	{
	    vHealth = 400.0 + (random(6001) / 10.0);
	    
	    new
	        vpanels,
	        vdoors,
	        vlights,
	        vtires
		;
		
		for(new i = 0; i < cellbits; i += 8)
		{
		    vdoors |= (random(2) << 1) << i;
		}
	    
	    GetVehicleDamageStatus(vehicleid, vpanels, vdoors, vlights, vtires);
	    UpdateVehicleDamageStatus(vehicleid, vpanels, vdoors, vlights, vtires);
	}

	for(new i; i < sizeof(vSPZ); i++)
	{
		if(vSPZ[i] == '1')
		{
		    vSPZ[i] = getRandomLetter();
		}
		else if(vSPZ[i] == '2')
		{
		    vSPZ[i] = (48 + random(10));
		}
		continue;
	}

	SetVehicleNumberPlate(vehicleid, vSPZ);
	SetVehicleHealth(vehicleid, vHealth);
	veh_IsDeath[vehicleid] = false;

	vEnum[vehicleid][v_Color_1] = vColor1;
	vEnum[vehicleid][v_Color_2] = vColor1;

	vEnum[vehicleid][v_bazar_Price]   = Economy::GetPrice(ECONOMY_LIST_BAZAR_SERVER)*2;
	vEnum[vehicleid][v_bazar_Buyout]   = 0;
	vEnum[vehicleid][v_bazar_DateAdded]   = gettime();
	vEnum[vehicleid][v_bazar_BoughtFor]   = Economy::GetPrice(ECONOMY_LIST_BAZAR_SERVER);
	format(vEnum[vehicleid][v_bazar_Desc], 256, "");
	format(vEnum[vehicleid][v_bazar_AddedBy], MAX_PLAYER_NAME+1, ReturnName(playerid));

	vEnum[vehicleid][v_Temporary] = false;
	vEnum[vehicleid][v_ELM] = false;
	vEnum[vehicleid][v_Radar] = false;
	vEnum[vehicleid][v_Taxameter] = false;
	vEnum[vehicleid][v_TaxameterItem] = 0;
	vEnum[vehicleid][v_Alarm] = false;
	vEnum[vehicleid][v_NoBreakin] = 0;
	vEnum[vehicleid][v_TitWindows] = 0;

	format(vEnum[vehicleid][v_SPZ], 24, vSPZ);
	format(vEnum[vehicleid][v_Owner], 30, "");
	vEnum[vehicleid][v_Fuel] = 3+random(100);
	vEnum[vehicleid][v_FuelType] = vehicleFuelTypes[GetVehicleModel(vehicleid)-400];
	vEnum[vehicleid][v_Battery] = 30+random(971);
	vEnum[vehicleid][v_Siren] = 0;
	vEnum[vehicleid][v_MileAge] = 0.0+(random(1500000)/10.0);
	vEnum[vehicleid][v_Nitrous] = 0.0;
	vEnum[vehicleid][v_Faction] = 9;
	vEnum[vehicleid][v_CarRadio] = 0+random(2);
	vEnum[vehicleid][v_AlarmItem] = 0+random(2);

	vEnum[vehicleid][v_Oil] = 3.0 + (random(98) / 10.0);

	vEnum[vehicleid][v_def_SpawnX] = X;
	vEnum[vehicleid][v_def_SpawnY] = Y;
	vEnum[vehicleid][v_def_SpawnZ] = Z;
	vEnum[vehicleid][v_def_SpawnA] = Angle;
	vEnum[vehicleid][v_def_SpawnVW] = 0;
	vEnum[vehicleid][v_def_SpawnINT] = 0;
	vEnum[vehicleid][v_def_Health] = 1000.0;

	vEnum[vehicleid][v_Sun_LDoor] = 0;
	vEnum[vehicleid][v_Sun_RDoor] = 0;
	vEnum[vehicleid][v_Sun_Hood] = 0;
	vEnum[vehicleid][v_Sun_Boot] = 0;
	vEnum[vehicleid][v_Sun_FBumper] = 0;
	vEnum[vehicleid][v_Sun_RBumper] = 0;
	
	new S_query[1024];
	mysql_format(
			MYSQL, S_query, 1024,
			"INSERT INTO faction_vehicles (SPZ, Model, X, Y, Z, Angle, VirtualWorld, Interior, Siren, Faction, def_Health, Bazar_BoughtFor) VALUES ('%e', '%d', '%f', '%f', '%f', '%f', '0', '0', '0', '9', '1000.0', '%d')",
		    vEnum[vehicleid][v_SPZ], vModel, X, Y, Z, Angle, Economy::GetPrice(ECONOMY_LIST_BAZAR_SERVER));
	mysql_tquery(MYSQL, S_query);
	
    UpdateFactionVehicleUnit(vehicleid, bazar_GetUnitText(vehicleid), false, false, .windshield=true);

    SCFM(playerid, COLOR_LIGHTBLUE, "> Zakúpil si nové bazarové vozidlo %s (%s) za %d$!", GetVehicleName(vehicleid), vEnum[vehicleid][v_SPZ], Economy::GetPrice(ECONOMY_LIST_BAZAR_SERVER));
    SCFM(playerid, COLOR_LIGHTBLUE, "> Toto vozidlo môe spravova len ty príkazom /bazar!");
    SCFM(playerid, COLOR_LIGHTBLUE, "> Nezabudni ho zaparkova tam kde má by a uloi ho príkazom /bazar setspawn!");
    FormatBazarLog(playerid, "[server-buy] Kupa vozidla %s (%s) -> '%.1f HP'.", GetVehicleName(vehicleid), vEnum[vehicleid][v_SPZ], vHealth);

	return 1;
}

YCMD:predatbazaru(playerid, params[], help)
{
	new
	    target, cena;
	    
	if(sscanf(params,"dd",target, cena))
	    return SendClientSyntax(playerid, "/predatbazaru [id hráèa] [cena]");
	    
	new vid = GetPlayerVehicleID(playerid);
	if(vid == 0) return SendError(playerid, "Nesedí v iadnom vozidle!");
	
	if(strcmp(vEnum[vid][v_Owner], ReturnName(playerid), false))
        return SendError(playerid, "Toto vozidlo nevlastní!");
        
	if(cena < 1)
	    return SendClientSyntax(playerid, "/predatbazaru [id] [cena]");
	    
    if(!IsPlayerLogged(target))
	    return SendError(playerid, "Tento hráè nie je v hre!");

	if(!IsPlayerNearPlayer(target, playerid, 10.0))
		return SendError(playerid, "Tento hráè je moc ïaleko!");
	    
	if(GetPlayerFactionType(target) != FACTION_TYPE_BAZAR)
	    return SendError(playerid, "Tento hráè nepracuje v autobazare!");

	new
		id;

	if(B_playerHasMask[playerid] == true) id = I_playerMaskID[playerid];
	else id = playerid;

	SCFM(playerid, COLOR_GREY, "> Odoslal si iados o predanie vozidla bazaru hráèovi %s za %d$, iados vyprí o 15 sekúnd!", GetPlayerNameEx(target, USE_MASK),cena);
	SCFM(target, COLOR_GREY, "> %s ti zaslal iados o predanie vozidla bazaru, iados vyprí o 15 sekúnd! Cena za auto: %d$", GetPlayerNameEx(playerid, USE_MASK),cena);
	SCFM(target, COLOR_GREY, "> Pre prijatie poui príkaz /accept playercar %d", id);

	bazarbZiadost[target][playerid] = 1;
	bazarvehid[playerid] = vid;
	bazarcenat[playerid] = cena;
	SetTimerEx("BazarBCancel", 15000, false, "ii", target, playerid);

	return 1;
}

YCMD:kupitvozidlo(playerid, params[], help)
{

    new
        vid,
		I_var = -1;

	if(sscanf(params, "dD(-1)", vid, I_var))
	    return SendClientSyntax(playerid, "/kupitvozidlo [id]");

	if(vid < 1 || vid >= 2000)
	    return SendError(playerid, "Toto vozidlo nemôe kúpi!");

	if(vEnum[vid][v_bazar_BoughtFor] == 0)
        return SendError(playerid, "Toto vozidlo nemôe kúpi!");

	new Float:vX, Float:vY, Float:vZ;
	GetVehiclePos(vid, vX, vY, vZ);

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, vX, vY, vZ))
	    return SendError(playerid, "Toto vozidlo je moc ïaleko!");

    if(GetPlayerDonatorLevel(playerid) < 1 && CountPlayerVehicles(playerid) >= MAX_PLAYER_VEHICLES)
	    return SendError(playerid, "Nemá volný slot na vozidlo!");

	if(GetPlayerDonatorLevel(playerid) == 1 && CountPlayerVehicles(playerid) >= MAX_DON_1_VEHICLES)
	    return SendError(playerid, "Nemá volný slot na vozidlo!");

	if(GetPlayerDonatorLevel(playerid) == 2 && CountPlayerVehicles(playerid) >= MAX_DON_2_VEHICLES)
	    return SendError(playerid, "Nemá volný slot na vozidlo!");

	if(GetPlayerDonatorLevel(playerid) == 3 && CountPlayerVehicles(playerid) >= MAX_DON_3_VEHICLES)
	    return SendError(playerid, "Nemá volný slot na vozidlo!");

	if(-255 == buyBusiness[playerid][1] && I_var > 0)
	{
	    if(I_var == buyBusiness[playerid][0])
	    {
	        if(vEnum[vid][v_bazar_Price] > ex_GetPlayerMoney(playerid))
        		return SendError(playerid, "Toto vozidlo si nemôe dovoli!");

	        ex_GivePlayerMoney(playerid, -vEnum[vid][v_bazar_Price]);
	        money_spent[playerid]+=floatround(vEnum[vid][v_bazar_Price],floatround_round);
			factEnum[vEnum[vid][v_Faction]][fact_Cash] += vEnum[vid][v_bazar_Price];

			FormatBazarLog(playerid, "[buyout] Kupa vozidla %s (%s) hracom %s -> '%d$'.", GetVehicleName(vid), vEnum[vid][v_SPZ], vEnum[vid][v_bazar_Price]);

			new cena = vEnum[vid][v_bazar_Price];

			vEnum[vid][v_bazar_Price]   				= 0;
			vEnum[vid][v_bazar_Buyout]   			= 0;
			vEnum[vid][v_bazar_DateAdded]   		= 0;
			vEnum[vid][v_bazar_BoughtFor]   		= 0;
			format(vEnum[vid][v_bazar_Desc], 256, "");
			format(vEnum[vid][v_bazar_AddedBy], MAX_PLAYER_NAME+1, "");

			format(vEnum[vid][v_Owner], 30, ReturnName(playerid));
			format(vEnum[vid][v_SecOwner], 30, "");

			new
			    S_query[2048],
			    Float:vHP
			;

			vhac_GetVehicleHealth(vid, vHP);

			mysql_format(MYSQL, S_query, sizeof S_query, "DELETE FROM faction_vehicles WHERE SPZ = '%e'", vEnum[vid][v_SPZ]);
			mysql_tquery(MYSQL, S_query);

			mysql_format(
				MYSQL, S_query, sizeof S_query,
				"INSERT INTO char_vehicles (SPZ, Model, Park_X, Park_Y, Park_Z, Park_A, Park_VW, Park_INT, Color_1, Color_2, Paintjob, Fuel, Battery, Health, Owner, SecondOwner, isUnParked) VALUES ('%e', '%d', '-226.774', '1193.3', '19.408', '270.0', '0', '0', '%d', '%d', '3', '100', '1000', '%.2f', '%e', '', '1')",
				vEnum[vid][v_SPZ],
				GetVehicleModel(vid),
				vEnum[vid][v_Color_1],
				vEnum[vid][v_Color_2],
				vHP,
				ReturnName(playerid)
			);
			mysql_tquery(MYSQL, S_query);

			vEnum[vid][v_Faction] = 0;

			UpdateFactionVehicleUnit(vid, "", false, false, .windshield=true);

			SCFM(playerid, COLOR_LIGHTBLUE, "> Kúpil si vozidlo %s z autobazaru. Stálo a %d$! Môe odís!", GetVehicleName(vid), cena);
			return 1;
	    }
		else
		    return SendError(playerid, "Zadal si zlé èíslo potvrdenia!");
	}

	buyBusiness[playerid][0] = rand(1000, 10000);
	buyBusiness[playerid][1] = -255;

	new
	    string[144];

	format(string, 144, "> Skutoène chce kúpi toto auto za %d$? Ak áno, poui príkaz /kupitvozidlo %d %d", vEnum[vid][v_bazar_Price], vid, buyBusiness[playerid][0]);
	SCFM(playerid, COLOR_LIGHTBLUE, string);

	return 1;
}

YCMD:modelcount(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 3)
	    return SendError(playerid, "Na tento prikaz nemas opravnenie!");

	new
		modelcount[212],
		tmodel,
		query[128],
		Cache:cache;
	
	mysql_format(MYSQL, query, sizeof query, "SELECT Model FROM char_vehicles");
	cache = mysql_query(MYSQL, query);
	for(new x,y=cache_num_rows(); x < y; x++)
	{
	    cache_get_value_name_int(x,"Model",tmodel);
	    modelcount[tmodel-400]++;
	}
	cache_delete(cache);
	
	mysql_format(MYSQL, query, sizeof query, "SELECT Model FROM faction_vehicles");
	cache = mysql_query(MYSQL, query);
	for(new x,y=cache_num_rows(); x < y; x++)
	{
	    cache_get_value_name_int(x,"Model",tmodel);
	    modelcount[tmodel-400]++;
	}
	cache_delete(cache);
	
	new fstr[2048]="Model\tKusov na serveri",tstr[128];
	
	for(new x; x < 212; x++)
	{
	    if(modelcount[x] < 1) continue;
	    
	    format(tstr, sizeof tstr, "\n%s\t%d",VehicleNames[x],modelcount[x]);
	    strcat(fstr,tstr);
	}
	
	ShowPlayerDialog(playerid, did_Null, DIALOG_STYLE_TABLIST_HEADERS, "VÝSKYT VOZIDIEL NA SERVERI", fstr, "OK", "");
	
	return 1;
}

YCMD:charity(playerid, params[], help)
{
	new I_var;
	if(sscanf(params,"d",I_var)) return SendClientSyntax(playerid, "/charity [poèet peòazí na charitu]");
	
	if(I_var < 1 || I_var > ex_GetPlayerMoney(playerid))
	    return SendError(playerid, "...prosim a, neskuaj ojeba systém a tát, dik");
	    
    for(new f; f < MAX_FACTIONS; f++)
 	{
  		if(strlen(factEnum[f][fact_Name]) < 3) continue;
	    if(factEnum[f][fact_Type] == FACTION_TYPE_GOV) {
     		factEnum[f][fact_Cash] += I_var;
       		break;
	    }
    }
    
    ex_GivePlayerMoney(playerid, -I_var);
    money_spent[playerid] += floatround(I_var, floatround_round);
    
    SCSuccess(playerid, "Juj, dal si %d$ na charitu!", I_var);
	
	return 1;
}

YCMD:cenydomu(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new I_var;
	if(sscanf(params,"d",I_var))
	    return SendClientSyntax(playerid, "/cenydomu [multiplier * 100]");


    foreach( new i : Houses )
	{
	    if(houseEnum[i][ho_PSC] < MIN_HOUSE_ADDRESS) continue;

		houseEnum[i][ho_BuyPrice]=floatround(houseEnum[i][ho_BuyPrice] * (float(I_var)/float(100)), floatround_round);
		ReloadHouseLabel(i);

		continue;
	}

	SCError(playerid, "Multiplier cien domu zmenený na %.2f!", float(I_var)/float(100));

	return 1;
}

YCMD:cenygarazi(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new I_var;
	if(sscanf(params,"d",I_var))
	    return SendClientSyntax(playerid, "/cenygarazi [multiplier * 100]");
	    
   	foreach( new i : Garages )
	{
	    if(garageEnum[i][ga_PSC] < MIN_GARAGE_ADDRESS) continue;

		garageEnum[i][ga_BuyPrice]=floatround(garageEnum[i][ga_BuyPrice] * (float(I_var)/float(100)), floatround_round);
		ReloadGarageLabel(i);

		continue;
	}

	SCError(playerid, "Multiplier cien domu zmenený na %.2f!", float(I_var)/float(100));

	return 1;
}

YCMD:cenybiznisov(playerid, params[], help)
{
    if(GetPlayerAdminLevel(playerid) < 5)
	    return SendClientCantUseCommand(playerid);

	new I_var;
	if(sscanf(params,"d",I_var))
	    return SendClientSyntax(playerid, "/cenybiznisov [multiplier * 100]");


    foreach( new i : Businesses )
	{
	    if(businessEnum[i][bz_Address] < MIN_BUSINESS_ADDRESS) continue;

		businessEnum[i][bz_BuyPrice]=floatround(businessEnum[i][bz_BuyPrice] * (float(I_var)/float(100)), floatround_round);
		ReloadBusinessLabel(i);

		continue;
	}

	SCError(playerid, "Multiplier cien biznisov zmenený na %.2f!", float(I_var)/float(100));

	return 1;
}

/*
	FARM PROPERTIES
*/

YCMD:vytvoritfarmu(playerid, params[], help)
{

	if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);

	new
		Name [ 128 ],
		BuyPrice,
	;

	if(sscanf(params, "ds[128]", BuyPrice, Name))
	    return SendClientSyntax(playerid, "/vytvoritfarmu [cena zakupenia (0 aby sa nedala zakupit)] [meno farmy]");

	new
		Float:Pos[3]
	;

    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    Farm::CreateProperty(Name, "", BuyPrice, Pos[0], Pos[1], Pos[2], 0.0, 0.0, 0.0, 0.0);

    new
		query[1024];

	mysql_format(
		MYSQL, query, sizeof query,
		"INSERT INTO gm_farms (name, owner, buyprice, x, y, z) VALUES ('%e', '', '%f', '%f', '%f')",
		Name, BuyPrice, Pos[0], Pos[1], Pos[2]
	);

	mysql_tquery(MYSQL, query);
	
	FormatLog(log_type_admin, "%s(%s) vytvoril farmu (nazov: %s, cena: %d)", ReturnName(playerid), ReturnIP(playerid), Name, BuyPrice);
	SCSuccess(playerid, "Vytvoril si novú farmu s názvom '%s'! Jej cena je $%d!", Name, BuyPrice);

	return 1;
}

YCMD:zmazatfarmu(playerid, params[], help)
{

    if(GetPlayerAdminLevel(playerid) < 6)
	    return SendClientCantUseCommand(playerid);
	    
	new
	    farmid = Farm::ReturnStandingProperty(playerid)
	;
	
	if(farmid == INVALID_FARM_ID)
	    return SendError(playerid, "Nestojí pri iadnej farme!");
	    
    new
		query[1024];

	mysql_format(
		MYSQL, query, sizeof query,
		"DELETE FROM gm_farms WHERE name = '%e' AND owner = '%e'",
		Farm::data[ farmid ][ farm_Name ], Farm::data[ farmid ][ farm_Owner ]
	);

	mysql_tquery(MYSQL, query);
	
	SCSuccess(playerid, "Farma %s bola natrvalo zmazaná zo serveru!", Farm::data[ farmid ][ farm_Name ]);
	FormatLog(log_type_admin, "%s(%s) zmazal farmu (nazov: %s, majitel: %s)", ReturnName(playerid), ReturnIP(playerid), Farm::data[ farmid ][ farm_Name ], Farm::data[ farmid ][ farm_Owner ]);
	    
	Farm::DestroyProperty(farmid);

	return 1;
}
